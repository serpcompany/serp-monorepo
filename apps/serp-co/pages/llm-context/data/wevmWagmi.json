[
  {
    "owner": "wevm",
    "repo": "wagmi",
    "content": "TITLE: Creating an Account Component with Wagmi Hooks\nDESCRIPTION: This component displays the connected account information, including ENS name and avatar if available. It also provides a disconnect button to terminate the wallet connection using Wagmi's useDisconnect hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccount, useDisconnect, useEnsAvatar, useEnsName } from 'wagmi'\n\nexport function Account() {\n  const { address } = useAccount()\n  const { disconnect } = useDisconnect()\n  const { data: ensName } = useEnsName({ address })\n  const { data: ensAvatar } = useEnsAvatar({ name: ensName! })\n\n  return (\n    <div>\n      {ensAvatar && <img alt=\"ENS Avatar\" src={ensAvatar} />}\n      {address && <div>{ensName ? `${ensName} (${address})` : address}</div>}\n      <button onClick={() => disconnect()}>Disconnect</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Connected Account Information and Disconnect Option\nDESCRIPTION: Creates a React component that shows the connected account's address, ENS name, ENS avatar, and provides a disconnect button. It uses various Wagmi hooks to fetch and display account information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccount, useDisconnect, useEnsAvatar, useEnsName } from 'wagmi'\n\nexport function Account() {\n  const { address } = useAccount()\n  const { disconnect } = useDisconnect()\n  const { data: ensName } = useEnsName({ address })\n  const { data: ensAvatar } = useEnsAvatar({ name: ensName! })\n\n  return (\n    <div>\n      {ensAvatar && <img alt=\"ENS Avatar\" src={ensAvatar} />}\n      {address && <div>{ensName ? `${ensName} (${address})` : address}</div>}\n      <button onClick={() => disconnect()}>Disconnect</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wagmi Configuration Setup\nDESCRIPTION: Configures Wagmi with supported chains, connectors (including WalletConnect, MetaMask, and Safe), and transport methods.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createConfig } from 'wagmi'\nimport { base, mainnet, optimism } from 'wagmi/chains'\nimport { injected, metaMask, safe, walletConnect } from 'wagmi/connectors'\n\nconst projectId = '<WALLETCONNECT_PROJECT_ID>'\n\nexport const config = createConfig({\n  chains: [mainnet, base],\n  connectors: [\n    injected(),\n    walletConnect({ projectId }),\n    metaMask(),\n    safe(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [base.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useAccount Hook in a React Component\nDESCRIPTION: Demonstrates how to use the `useAccount` hook within a React functional component to access account information.  The `useAccount` hook is called without parameters to fetch the current account.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccount } from 'wagmi'\n\nfunction App() {\n  const account = useAccount()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Configuration for Wagmi\nDESCRIPTION: Required tsconfig.json settings for Wagmi, specifically enabling strict mode for proper type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi and Dependencies via Package Managers\nDESCRIPTION: These commands demonstrate how to install Wagmi and its required dependencies (viem and @tanstack/react-query) using different package managers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Integrating useSendTransaction Composable in Vue\nDESCRIPTION: Connecting the form to Wagmi's useSendTransaction composable to enable sending Ethereum transactions from the application. Also displaying the transaction hash after submission.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useSendTransaction } from 'wagmi'\n  import { parseEther } from 'viem'\n\n  const { data: hash, sendTransaction } = useSendTransaction()\n\n  function submit(event: Event) {\n    const formData = new FormData(event.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n    <input name=\"value\" placeholder=\"0.05\" required />\n    <button type=\"submit\">Send</button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useDisconnect Hook in React Component\nDESCRIPTION: Demonstrates how to use the useDisconnect hook in a React component to create a disconnect button.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDisconnect.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDisconnect } from 'wagmi'\n\nfunction App() {\n  const { disconnect } = useDisconnect()\n\n  return (\n    <button onClick={() => disconnect()}>\n      Disconnect\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAccount in a Vue Component\nDESCRIPTION: Demonstrates how to use the useAccount composable in a Vue component to access the current Ethereum account address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// ---cut-start---\n// @errors: 2322\nimport { type Config } from '@wagmi/vue'\nimport { mainnet, sepolia } from '@wagmi/vue/chains'\n\ndeclare module '@wagmi/vue' {\n  interface Register {\n    config: Config<readonly [typeof mainnet, typeof sepolia]>\n  }\n}\n// ---cut-end---\nimport { useAccount } from '@wagmi/vue'\n\nconst account = useAccount()\n</script>\n\n<template>\n  Address: {{ account.address }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Migrating from useToken to useReadContracts (TypeScript)\nDESCRIPTION: Shows how to replace the deprecated useToken hook with useReadContracts to fetch ERC20 token information in Wagmi v2.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToken } from 'wagmi' // [!code --]\nimport { useReadContracts } from 'wagmi' // [!code ++]\nimport { erc20Abi } from 'viem' // [!code ++]\n\nconst result = useToken({ // [!code --]\n  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code --]\n}) // [!code --]\nconst result = useReadContracts({ // [!code ++]\n  allowFailure: false, // [!code ++]\n  contracts: [ // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'decimals', // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'name', // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'symbol', // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'totalSupply', // [!code ++]\n    }, // [!code ++]\n  ] // [!code ++]\n}) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Using Wagmi to create a multi-chain Viem Client\nDESCRIPTION: This snippet demonstrates how to leverage Wagmi's `createConfig` and `getClient` to easily create a multi-chain aware Viem Client. This simplifies interacting with different chains without manually setting up separate Viem Clients for each chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/viem.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Import modules. \nimport { http, createConfig, getClient, getConnectorClient } from '@wagmi/core' \nimport { base, mainnet, optimism, zora } from '@wagmi/core/chains' \nimport { getBlockNumber, sendTransaction } from 'viem/actions' // [!code hl]\n\n// 2. Set up a Wagmi Config \nexport const config = createConfig({ \n  chains: [base, mainnet, optimism, zora], \n  transports: { \n    [base.id]: http(), \n    [mainnet.id]: http(), \n    [zora.id]: http(), \n  }, \n}) \n\n// 3. Extract a Viem Client for the current active chain.\nconst publicClient = getClient(config)\nconst blockNumber = await getBlockNumber(publicClient) // [!code hl]\n\n// 4. Extract a Viem Client for the current active chain & account.\nconst walletClient = getConnectorClient(config)\nconst hash = await sendTransaction(walletClient, /* ... */) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Migrating Network and Account Hooks in TypeScript\nDESCRIPTION: Shows migration from useNetwork to useAccount and useConfig hooks for accessing chain and network information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccount } from 'wagmi'\nconst { chain } = useAccount()\n\nimport { useConfig } from 'wagmi'\nconst { chains } = useConfig()\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi CLI Configuration File\nDESCRIPTION: Commands for generating a Wagmi CLI configuration file (wagmi.config.ts or wagmi.config.js) using different package managers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm wagmi init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx wagmi init\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn wagmi init\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun wagmi init\n```\n\n----------------------------------------\n\nTITLE: Basic NFT Minting Form Component in React\nDESCRIPTION: Initial setup of a React component with a basic form for NFT minting that accepts a token ID input.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\n\nexport function MintNFT() {\n  return (\n    <form>\n      <input name=\"tokenId\" placeholder=\"69420\" required />\n      <button type=\"submit\">Mint</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Minting Component with Wagmi Hooks\nDESCRIPTION: Vue component that implements NFT minting functionality using Wagmi's useWriteContract and useWaitForTransactionReceipt hooks. Handles form submission, transaction sending, and monitoring transaction status.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { \n  useWaitForTransactionReceipt,\n  useWriteContract \n} from 'wagmi'\nimport { abi } from './abi'\n\nconst { \n  data: hash,\n  error, \n  isPending,\n  writeContract \n} = useWriteContract()\n\nfunction submit(event: Event) { \n  const formData = new FormData(e.target as HTMLFormElement) \n  const tokenId = formData.get('tokenId') as string \n  writeContract({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    abi,\n    functionName: 'mint',\n    args: [BigInt(tokenId)],\n  })\n} \n\nconst { isLoading: isConfirming, isSuccess: isConfirmed } =\n  useWaitForTransactionReceipt({\n    hash,\n  })\n</script>\n\n<template\n  <form @submit.prevent=\"submit\"> \n    <input name=\"tokenId\" placeholder=\"69420\" required />\n    <button :disabled=\"isPending\" type=\"submit\">\n      <span v-if=\"isPending\">Sending...</span>\n      <span v-else>Send</span>\n    </button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n    <div v-if=\"isConfirming\">Waiting for confirmation...</div>\n    <div v-if=\"isConfirmed\">Transaction Confirmed!</div>\n    <div v-if=\"error\">\n      Error: {{ (error as BaseError).shortMessage || error.message }}\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi and Dependencies using Package Managers\nDESCRIPTION: Commands for installing Wagmi and its dependencies (viem and @tanstack/react-query) using different package managers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Integrating SendTransaction Component in React App with Wagmi\nDESCRIPTION: Sets up a React application with WagmiProvider and QueryClientProvider, importing and rendering the SendTransaction component. This serves as the main application entry point.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider, useAccount } from 'wagmi'\nimport { config } from './config'\nimport { SendTransaction } from './send-transaction' // [!code ++]\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}> \n        <SendTransaction /> // [!code ++]\n      </QueryClientProvider> \n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Wagmi Hooks in React Components\nDESCRIPTION: Example showing how to import and use the generated React hooks for ERC-20 token interactions, including standard and function-specific hook variants.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useReadErc20, useReadErc20BalanceOf } from './generated'\n\n// Use the generated ERC-20 read hook\nconst { data } = useReadErc20({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  functionName: 'balanceOf',\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n})\n\n// Use the generated ERC-20 \"balanceOf\" hook\nconst { data } = useReadErc20BalanceOf({\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Core and Dependencies via Package Managers\nDESCRIPTION: Commands for installing Wagmi Core and its dependencies (connectors and viem) using different package managers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/core @wagmi/connectors viem@{{viemVersion}}\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/core @wagmi/connectors viem@{{viemVersion}}\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @wagmi/core @wagmi/connectors viem@{{viemVersion}}\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @wagmi/core @wagmi/connectors viem@{{viemVersion}}\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Integration with useWriteContract\nDESCRIPTION: Implementation of contract writing functionality using Wagmi's useWriteContract composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWriteContract } from 'wagmi'\nimport { abi } from './abi'\n\nconst { data: hash, writeContract } = useWriteContract()\n\nfunction submit(event: Event) {\n  const formData = new FormData(e.target as HTMLFormElement)\n  const tokenId = formData.get('tokenId') as string\n  writeContract({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    abi,\n    functionName: 'mint',\n    args: [BigInt(tokenId)],\n  })\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"tokenId\" placeholder=\"69420\" required />\n    <button type=\"submit\">Mint</button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n  </form>\n</template>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const abi = [\n  {\n    name: 'mint',\n    type: 'function',\n    stateMutability: 'nonpayable',\n    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],\n    outputs: [],\n  },\n] as const\n```\n\n----------------------------------------\n\nTITLE: Implementing SendTransaction Component with Wagmi Hooks\nDESCRIPTION: Defines a SendTransaction React component using wagmi's hooks for sending transactions and monitoring their status. It includes a form for address and value inputs, transaction submission logic, and displaying transaction status.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { \n  type BaseError, \n  useSendTransaction, \n  useWaitForTransactionReceipt \n} from 'wagmi' \nimport { parseEther } from 'viem' \n \nexport function SendTransaction() {\n  const { \n    data: hash,\n    error, \n    isPending, \n    sendTransaction \n  } = useSendTransaction() \n\n  async function submit(e: React.FormEvent<HTMLFormElement>) { \n    e.preventDefault() \n    const formData = new FormData(e.target as HTMLFormElement) \n    const to = formData.get('address') as `0x${string}` \n    const value = formData.get('value') as string \n    sendTransaction({ to, value: parseEther(value) }) \n  } \n\n  const { isLoading: isConfirming, isSuccess: isConfirmed } = \n    useWaitForTransactionReceipt({ \n      hash, \n    }) \n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n      <input name=\"value\" placeholder=\"0.05\" required />\n      <button \n        disabled={isPending} \n        type=\"submit\"\n      >\n        {isPending ? 'Confirming...' : 'Send'} \n      </button>\n      {hash && <div>Transaction Hash: {hash}</div>} \n      {isConfirming && <div>Waiting for confirmation...</div>} \n      {isConfirmed && <div>Transaction confirmed.</div>} \n      {error && ( \n        <div>Error: {(error as BaseError).shortMessage || error.message}</div> \n      )} \n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract with Constructor Args in React TypeScript\nDESCRIPTION: Illustrates how to use the useDeployContract hook to deploy a contract with constructor arguments in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDeployContract } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { wagmiAbi } from './abi'\n\nfunction App() {\n  const { deployContract } = useDeployContract()\n\n  return (\n    <button\n      onClick={() =>\n        deployContract({\n          abi: wagmiAbi,\n          args: [69420],\n          bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n        })\n      }\n    >\n      Deploy Contract\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useConnectorClient in React Component\nDESCRIPTION: Demonstrates the basic implementation of useConnectorClient within a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnectorClient } from 'wagmi'\n\nfunction App() {\n  const result = useConnectorClient()\n}\n```\n\n----------------------------------------\n\nTITLE: Loading State Implementation for NFT Minting\nDESCRIPTION: Adding loading state handling to improve user experience during transaction confirmation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { useWriteContract } from 'wagmi'\nimport { abi } from './abi'\n\nexport function MintNFT() {\n  const { \n    data: hash, \n    isPending,\n    writeContract \n  } = useWriteContract()\n\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const tokenId = formData.get('tokenId') as string\n    writeContract({\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'mint',\n      args: [BigInt(tokenId)],\n    })\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"tokenId\" placeholder=\"69420\" required />\n      <button \n        disabled={isPending}\n        type=\"submit\"\n      >\n        {isPending ? 'Confirming...' : 'Mint'}\n      </button>\n      {hash && <div>Transaction Hash: {hash}</div>}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useSendTransaction Hook in SendTransaction Component\nDESCRIPTION: This snippet demonstrates how to use the useSendTransaction hook from Wagmi to send transactions and display the transaction hash.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { useSendTransaction } from 'wagmi'\nimport { parseEther } from 'viem'\n\nexport function SendTransaction() {\n  const { data: hash, sendTransaction } = useSendTransaction()\n\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n      <input name=\"value\" placeholder=\"0.05\" required />\n      <button type=\"submit\">Send</button>\n      {hash && <div>Transaction Hash: {hash}</div>}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Deployment with Constructor Arguments\nDESCRIPTION: Example showing how to deploy a contract with constructor arguments using deployContract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/deployContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deployContract } from '@wagmi/core'\nimport { wagmiAbi } from './abi'\nimport { config } from './config'\n\nconst result = await deployContract(config, {\n  abi: wagmiAbi,\n  args: [69420],\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Viem Client to Ethers Provider (v5)\nDESCRIPTION: Implementation of utility functions to convert a Viem client to an Ethers.js v5 provider. Includes support for both regular and fallback providers, with a React hook for easy integration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\nimport { useMemo } from 'react'\nimport type { Chain, Client, Transport } from 'viem'\nimport { Config, useClient } from 'wagmi'\n\nexport function clientToProvider(client: Client<Transport, Chain>) {\n  const { chain, transport } = client\n  const network = {\n    chainId: chain.id,\n    name: chain.name,\n    ensAddress: chain.contracts?.ensRegistry?.address,\n  }\n  if (transport.type === 'fallback')\n    return new providers.FallbackProvider(\n      (transport.transports as ReturnType<Transport>[]).map(\n        ({ value }) => new providers.JsonRpcProvider(value?.url, network),\n      ),\n    )\n  return new providers.JsonRpcProvider(transport.url, network)\n}\n\n/** Hook to convert a viem Client to an ethers.js Provider. */\nexport function useEthersProvider({\n  chainId,\n}: { chainId?: number | undefined } = {}) {\n  const client = useClient<Config>({ chainId })\n  return useMemo(() => (client ? clientToProvider(client) : undefined), [client])\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Event Watching Implementation\nDESCRIPTION: Example showing how to watch contract Transfer events using watchContractEvent with basic configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchContractEvent.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchContractEvent } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst unwatch = watchContractEvent(config, {\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  abi,\n  eventName: 'Transfer',\n  onLogs(logs) {\n    console.log('New logs!', logs)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Error Handling with Wagmi Core in TypeScript\nDESCRIPTION: This example demonstrates how to use exported error types from Wagmi Core to strongly type catch statements. It shows how to cast errors to specific types and access type-specific properties based on error conditions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type GetBlockNumberErrorType, getBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\ntry {\n  const blockNumber = await getBlockNumber(config)\n} catch (e) {\n  const error = e as GetBlockNumberErrorType\n  error.name\n  //    ^? (property) name: \"Error\" | \"ChainDisconnectedError\" | \"HttpRequestError\" | \"InternalRpcError\" | \"InvalidInputRpcError\" | \"InvalidParamsRpcError\" | \"InvalidRequestRpcError\" | \"JsonRpcVersionUnsupportedError\" | ... 16 more ... | \"WebSocketRequestError\"\n\n  if (error.name === 'InternalRpcError')\n    error.code\n    //    ^? (property) code: -32603\n\n  if (error.name === 'HttpRequestError')\n    error.headers\n    //    ^? (property) headers: Headers\n    error.status\n    //    ^? (property) status: number\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with Chains and Connectors\nDESCRIPTION: This configuration file sets up Wagmi with specified blockchain networks and wallet connectors. It defines the available chains (mainnet and base) and connectors (injected, WalletConnect, MetaMask, and Safe) with their respective transport methods.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { http, createConfig } from 'wagmi'\nimport { base, mainnet, optimism } from 'wagmi/chains'\nimport { injected, metaMask, safe, walletConnect } from 'wagmi/connectors'\n\nconst projectId = '<WALLETCONNECT_PROJECT_ID>'\n\nexport const config = createConfig({\n  chains: [mainnet, base],\n  connectors: [\n    injected(),\n    walletConnect({ projectId }),\n    metaMask(),\n    safe(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [base.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Viem actions for tree-shakable usage with Wagmi\nDESCRIPTION: This snippet demonstrates how to import specific Viem actions (e.g., `getLogs`, `watchAsset`) and use them with Wagmi's `getClient` and `getConnectorClient` to ensure tree-shaking and reduce bundle size. It highlights the recommended approach for integrating Viem actions directly within a Wagmi context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/viem.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Import modules. \nimport { http, createConfig, getClient, getConnectorClient } from '@wagmi/core' \nimport { base, mainnet, optimism, zora } from '@wagmi/core/chains' \nimport { getLogs, watchAsset } from 'viem/actions' // [!code hl]\n\n// 2. Set up a Wagmi Config \nexport const config = createConfig({ \n  chains: [base, mainnet, optimism, zora], \n  transports: { \n    [base.id]: http(), \n    [mainnet.id]: http(), \n    [optimism.id]: http(), \n    [zora.id]: http(), \n  }, \n}) \n\n// 3. Extract a Viem Client for the current active chain.\nconst publicClient = getClient(config)\nconst logs = await getLogs(publicClient, /* ... */) // [!code hl]\n\n// 4. Extract a Viem Client for the current active chain & account.\nconst walletClient = getConnectorClient(config)\nconst success = await watchAsset(walletClient, /* ... */) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of writeContracts for Batch Contract Transactions\nDESCRIPTION: Shows how to use writeContracts to execute multiple contract function calls in a single transaction batch, including approval and transfer operations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\nimport { writeContracts } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n\nconst id = await writeContracts(config, {\n  contracts: [\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'approve',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n        100n\n      ],\n    },\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'transferFrom',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        '0x0000000000000000000000000000000000000000',\n        100n\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Write Integration with Wagmi\nDESCRIPTION: Integration of Wagmi's useWriteContract hook to handle NFT minting transactions with contract interaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { useWriteContract } from 'wagmi'\nimport { abi } from './abi'\n\nexport function MintNFT() {\n  const { data: hash, writeContract } = useWriteContract()\n\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const tokenId = formData.get('tokenId') as string\n    writeContract({\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'mint',\n      args: [BigInt(tokenId)],\n    })\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"tokenId\" placeholder=\"69420\" required />\n      <button type=\"submit\">Mint</button>\n      {hash && <div>Transaction Hash: {hash}</div>}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useEstimateGas in Vue Component\nDESCRIPTION: Demonstrates the basic implementation of the useEstimateGas composable in a Vue component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\n\nconst result = useEstimateGas()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useAccountEffect in a React component\nDESCRIPTION: This code shows how to use the `useAccountEffect` hook within a React functional component to listen for account connection and disconnection events. It defines the `onConnect` and `onDisconnect` callbacks to execute custom logic when these events occur.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccountEffect.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccountEffect } from 'wagmi'\n\nfunction App() {\n  useAccountEffect({\n    onConnect(data) {\n      console.log('Connected!', data)\n    },\n    onDisconnect() {\n      console.log('Disconnected!')\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract to Simulate a Contract Interaction\nDESCRIPTION: Demonstrates how to use the simulateContract function to simulate a contract interaction, specifically a transferFrom function call on an ERC20 token contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet Options Component for Connector Selection\nDESCRIPTION: Implements a React component that displays available wallet connectors and handles the connection process when a user selects a wallet option.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { Connector, useConnect } from 'wagmi'\n\nexport function WalletOptions() {\n  const { connectors, connect } = useConnect()\n\n  return connectors.map((connector) => (\n    <button key={connector.uid} onClick={() => connect({ connector })}>\n      {connector.name}\n    </button>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping React App with WagmiProvider and QueryClientProvider\nDESCRIPTION: Example of setting up the Wagmi and TanStack Query providers in a React application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './config'\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        {/** ... */}\n      </QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WagmiProvider Implementation in React\nDESCRIPTION: Demonstrates the basic usage of WagmiProvider in a React application, wrapping components and providing configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './config' \n\nfunction App() {\n  return (\n    <WagmiProvider config={config}> \n      {/** ... */}\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Viem actions as client methods with Wagmi\nDESCRIPTION: This snippet demonstrates how to import and utilize Viem actions directly as methods on the `publicClient` and `walletClient` obtained from Wagmi's `getPublicClient` and `getWalletClient`. While functional, this approach is less optimized for tree-shaking compared to importing actions directly.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/viem.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Import modules. \nimport { http, createConfig, getPublicClient, getWalletClient } from '@wagmi/core' \nimport { base, mainnet, optimism, zora } from '@wagmi/core/chains' \n\n// 2. Set up a Wagmi Config \nexport const config = createConfig({ \n  chains: [base, mainnet, optimism, zora], \n  transports: { \n    [base.id]: http(), \n    [mainnet.id]: http(), \n    [optimism.id]: http(), \n    [zora.id]: http(), \n  }, \n}) \n\n// 3. Extract a Viem Public Client for the current active chain.\nconst publicClient = getPublicClient(config)\nconst logs = await publicClient.getLogs(publicClient, /* ... */) // [!code hl]\n\n// 4. Extract a Viem Wallet Client for the current active chain & account.\nconst walletClient = getWalletClient(config)\nconst success = await walletClient.watchAsset(walletClient, /* ... */) // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Chain Properties Configuration in TypeScript\nDESCRIPTION: Example showing how to use Celo's feeCurrency property in a contract simulation with Wagmi.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/chain-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { useSimulateContract } from 'wagmi'\n\nconst result = useSimulateContract({\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n  feeCurrency: '0xâ€¦', \n})\n```\n\n----------------------------------------\n\nTITLE: Basic Wagmi CLI Configuration in JavaScript\nDESCRIPTION: Demonstrates the simplest form of a Wagmi CLI configuration file using JavaScript. This snippet shows how to export a default configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // config options\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Transaction Form Component in Vue\nDESCRIPTION: Initial setup of a SendTransaction component with a basic form for entering recipient address and transaction value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n</script>\n\n<template>\n  <form>\n    <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n    <input name=\"value\" placeholder=\"0.05\" required />\n    <button type=\"submit\">Send</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Wagmi Composables in Vue Component\nDESCRIPTION: Example of using Wagmi Vue Composables (useAccount and useEnsName) in a Vue component to fetch and display an ENS name for a connected account.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useAccount, useEnsName } from '@wagmi/vue'\n\nconst { address } = useAccount()\nconst { data, error, status } = useEnsName({ address })\n</script>\n\n<template>\n  <div v-if=\"status === 'pending'\">Loading ENS name</div>\n  <div v-else-if=\"status === 'error'\">\n    Error fetching ENS name: {{error.message}}\n  </div>\n  <div v-else>ENS name: {{data}}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSignMessage in Vue Component\nDESCRIPTION: Demonstrates the basic usage of useSignMessage in a Vue component to sign a message. The example shows how to set up the component with the composable and create a button that triggers the signing function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignMessage.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSignMessage } from '@wagmi/vue'\n\nconst { signMessage } = useSignMessage()\n</script>\n\n<template>\n  <button @click=\"signMessage({ message: 'hello world' })\">\n    Sign message\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Connect Function with Injected Connector\nDESCRIPTION: Demonstrates how to use the 'connect' function with an injected connector and a configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/connect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from '@wagmi/core'\nimport { injected } from '@wagmi/connectors'\nimport { config } from './config'\n\nconst result = await connect(config, { connector: injected() })\n```\n\n----------------------------------------\n\nTITLE: NFT Minting Component Implementation\nDESCRIPTION: React component that handles NFT minting functionality using Wagmi hooks. Includes form handling, transaction submission, and status tracking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { \n  type BaseError, \n  useWaitForTransactionReceipt, \n  useWriteContract \n} from 'wagmi'\nimport { abi } from './abi'\n \nexport function MintNFT() {\n  const { \n    data: hash,\n    error,   \n    isPending, \n    writeContract \n  } = useWriteContract() \n\n  async function submit(e: React.FormEvent<HTMLFormElement>) { \n    e.preventDefault() \n    const formData = new FormData(e.target as HTMLFormElement) \n    const tokenId = formData.get('tokenId') as string \n    writeContract({\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'mint',\n      args: [BigInt(tokenId)],\n    })\n  } \n\n  const { isLoading: isConfirming, isSuccess: isConfirmed } = \n    useWaitForTransactionReceipt({ \n      hash, \n    }) \n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"tokenId\" placeholder=\"69420\" required />\n      <button \n        disabled={isPending} \n        type=\"submit\"\n      >\n        {isPending ? 'Confirming...' : 'Mint'} \n      </button>\n      {hash && <div>Transaction Hash: {hash}</div>}\n      {isConfirming && <div>Waiting for confirmation...</div>} \n      {isConfirmed && <div>Transaction confirmed.</div>} \n      {error && ( \n        <div>Error: {(error as BaseError).shortMessage || error.message}</div> \n      )} \n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Specific Chain ID with Injected Connector\nDESCRIPTION: Illustrates how to connect to a specific chain ID (mainnet in this case) using the 'connect' function and an injected connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/connect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { injected } from '@wagmi/connectors'\nimport { config } from './config'\n\nconst result = await connect(config, {\n  chainId: mainnet.id,\n  connector: injected(),\n})\n```\n\n----------------------------------------\n\nTITLE: Watching User's Balance and Invalidating Queries\nDESCRIPTION: Demonstrates how to watch a user's balance and invalidate balance queries when the block number changes, using watchEffect and invalidateQueries.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useQueryClient } from '@tanstack/vue-query' \nimport { useBlockNumber, useBalance } from '@wagmi/vue' \nimport { watchEffect } from 'vue' \n\nconst queryClient = useQueryClient()\nconst { data: blockNumber } = useBlockNumber({ watch: true })\nconst { data: balance, queryKey } = useBalance()\n  \nwatchEffect(() => {\n  queryClient.invalidateQueries({ queryKey })\n})\n</script>\n\n<template>\n  <div>Block Number: {{ blockNumber }}</div>\n  <div>Balance: {{ balance }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Complete Chain Definition with Type Assertion\nDESCRIPTION: Complete example of Ethereum mainnet chain configuration using type assertion pattern, including all required properties like ID, name, native currency, RPC URLs, block explorers, and contract addresses.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/create-chain.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Chain } from 'viem'\n\nexport const mainnet = {\n  id: 1,\n  name: 'Ethereum',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: { http: ['https://eth.merkle.io'] },\n  },\n  blockExplorers: {\n    default: { name: 'Etherscan', url: 'https://etherscan.io' },\n  },\n  contracts: {\n    ensRegistry: {\n      address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n    },\n    ensUniversalResolver: {\n      address: '0xE4Acdd618deED4e6d2f03b9bf62dc6118FC9A4da',\n      blockCreated: 16773775,\n    },\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 14353601,\n    },\n  },\n} as const satisfies Chain\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi for Ethereum Wallet Connections\nDESCRIPTION: Sets up the Wagmi configuration with connectors for Injected, WalletConnect, MetaMask, and Safe wallets. It configures Mainnet and Base chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createConfig } from 'wagmi'\nimport { base, mainnet, optimism } from 'wagmi/chains'\nimport { injected, metaMask, safe, walletConnect } from 'wagmi/connectors'\n\nconst projectId = '<WALLETCONNECT_PROJECT_ID>'\n\nexport const config = createConfig({\n  chains: [mainnet, base],\n  connectors: [\n    injected(),\n    walletConnect({ projectId }),\n    metaMask(),\n    safe(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [base.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Error Handling Implementation\nDESCRIPTION: Adding error handling for transaction failures and user rejections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWaitForTransactionReceipt, useWriteContract } from 'wagmi'\nimport { abi } from './abi'\n\nconst { data: hash, error, isPending, writeContract } = useWriteContract()\n\nfunction submit(event: Event) {\n  const formData = new FormData(e.target as HTMLFormElement)\n  const tokenId = formData.get('tokenId') as string\n  writeContract({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    abi,\n    functionName: 'mint',\n    args: [BigInt(tokenId)],\n  })\n}\n\nconst { isLoading: isConfirming, isSuccess: isConfirmed } =\n  useWaitForTransactionReceipt({\n    hash,\n  })\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"tokenId\" placeholder=\"69420\" required />\n    <button :disabled=\"isPending\" type=\"submit\">\n      <span v-if=\"isPending\">Sending...</span>\n      <span v-else>Send</span>\n    </button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n    <div v-if=\"isConfirming\">Waiting for confirmation...</div>\n    <div v-if=\"isConfirmed\">Transaction Confirmed!</div>\n    <div v-if=\"error\">\n      Error: {{ (error as BaseError).shortMessage || error.message }}\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useReadContract in a React Component - TSX\nDESCRIPTION: This snippet shows how to set up a React component that uses the useReadContract hook to call a read-only smart contract function. It requires the contract ABI, address, and function name as parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContract.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContract } from 'wagmi'\nimport { abi } from './abi'\n\nfunction App() {\n  const result = useReadContract({\n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'totalSupply',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of estimateFeesPerGas\nDESCRIPTION: Demonstrates the basic usage of estimateFeesPerGas function to get fee estimates for blockchain transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateFeesPerGas } from '@wagmi/core'\nimport { config } from './config'\n\nconst result = await estimateFeesPerGas(config)\n```\n\n----------------------------------------\n\nTITLE: Using Wagmi Actions with Configuration\nDESCRIPTION: Example of using Wagmi actions by passing the config to retrieve account information and ENS name.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount, getEnsName } from '@wagmi/core'\nimport { config } from './config'\n\nconst { address } = getAccount(config)\nconst ensName = await getEnsName(config, { address })\n```\n\n----------------------------------------\n\nTITLE: Using const-asserted ABI for type inference in Wagmi\nDESCRIPTION: Demonstration of how to use const-assertion with ABIs to achieve full type safety and inference in Wagmi composables.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst abi = [â€¦] as const // <--- const assertion\nconst { data } = useReadContract({ abi })\n```\n\n----------------------------------------\n\nTITLE: Migrating from usePrepareContractWrite to useSimulateContract in TypeScript\nDESCRIPTION: Shows how to migrate from the removed usePrepareContractWrite hook to the new useSimulateContract hook, including button handling changes and data access patterns.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSimulateContract, useWriteContract } from 'wagmi'\n\nconst { data } = useSimulateContract({\n  address: '0x',\n  abi: [{\n    type: 'function',\n    name: 'transferFrom',\n    stateMutability: 'nonpayable',\n    inputs: [\n      { name: 'sender', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint256' },\n    ],\n    outputs: [{ type: 'bool' }],\n  }],\n  functionName: 'transferFrom',\n  args: ['0x', '0x', 123n],\n})\nconst { writeContract } = useWriteContract()\n\n<button\n  disabled={!Boolean(data?.request)}\n  onClick={() => writeContract(data!.request)}\n>\n  Write contract\n</button>\n```\n\n----------------------------------------\n\nTITLE: Wrapping React App with Wagmi and React Query Providers\nDESCRIPTION: Demonstrates how to wrap a React application with Wagmi and React Query context providers to enable state management and caching for wallet connections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Import modules\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './config'\n\n// 2. Set up a React Query client.\nconst queryClient = new QueryClient()\n\nfunction App() {\n  // 3. Wrap app with Wagmi and React Query context.\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}> \n        {/** ... */} \n      </QueryClientProvider> \n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Receipt Handling\nDESCRIPTION: Implementation of transaction confirmation tracking using useWaitForTransactionReceipt composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWaitForTransactionReceipt, useWriteContract } from 'wagmi'\nimport { abi } from './abi'\n\nconst { data: hash, isPending, writeContract } = useWriteContract()\n\nfunction submit(event: Event) {\n  const formData = new FormData(e.target as HTMLFormElement)\n  const tokenId = formData.get('tokenId') as string\n  writeContract({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    abi,\n    functionName: 'mint',\n    args: [BigInt(tokenId)],\n  })\n}\n\nconst { isLoading: isConfirming, isSuccess: isConfirmed } =\n  useWaitForTransactionReceipt({\n    hash,\n  })\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"tokenId\" placeholder=\"69420\" required />\n    <button :disabled=\"isPending\" type=\"submit\">\n      <span v-if=\"isPending\">Sending...</span>\n      <span v-else>Send</span>\n    </button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n    <div v-if=\"isConfirming\">Waiting for confirmation...</div>\n    <div v-if=\"isConfirmed\">Transaction Confirmed!</div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useWriteContract in a Vue Component\nDESCRIPTION: Complete example of using the useWriteContract composable in a Vue component to execute a transferFrom function on an ERC-20 token contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWriteContract.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWriteContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst { writeContract } = useWriteContract()\n</script>\n\n<template>\n  <button @click=\"writeContract({ \n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'transferFrom',\n    args: [\n      '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n      123n,\n    ],\n  })\">\n    Transfer\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Migrating from configureChains to Native Multichain Support (TypeScript)\nDESCRIPTION: Shows how to update the Wagmi configuration to use native multichain support in v2, replacing the configureChains function with direct chain and transport configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureChains, createConfig } from 'wagmi' // [!code --]\nimport { http, createConfig } from 'wagmi' // [!code ++]\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst { chains, publicClient } = configureChains( // [!code --]\n  [mainnet, sepolia], // [!code --]\n  [publicProvider(), publicProvider()], // [!code --]\n) // [!code --]\n\nexport const config = createConfig({\n  publicClient, // [!code --]\n  chains: [mainnet, sepolia], // [!code ++]\n  transports: { // [!code ++]\n    [mainnet.id]: http(), // [!code ++]\n    [sepolia.id]: http(), // [!code ++]\n  }, // [!code ++]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Viem Public Actions with Wagmi\nDESCRIPTION: This snippet demonstrates how to utilize Viem's `getLogs` Action with a `useQuery` Composable to create a custom logs query functionality. It shows the pattern of importing Viem actions, extracting a Viem Client, and using it with Tanstack Query.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/viem.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// 1. Import modules. \nimport { useClient, useConnectorClient } from '@wagmi/vue' \nimport { useMutation, useQuery } from '@wagmi/vue/query'\nimport { getLogs, watchAsset } from 'viem/actions'\n\n// 2. Extract a Viem Client for the current active chain. \nconst client = useClient() \n\n// 3. Create a \"custom\" Query Composable that utilizes the Client. \nconst { data: logs } = useQuery( \n  computed(() => ({ \n    queryKey: ['logs', client.value.uid], \n    queryFn: () => getLogs(client.value) \n  })) \n) \n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useSwitchAccount Hook in React Component\nDESCRIPTION: Demonstrates how to use the useSwitchAccount hook in a React component to render buttons for switching accounts using available connectors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSwitchAccount } from 'wagmi'\n\nfunction App() {\n  const { connectors, switchAccount } = useSwitchAccount()\n\n  return (\n    <div>\n      {connectors.map((connector) => (\n        <button key={connector.id} onClick={() => switchAccount({ connector })}>\n          {connector.name}\n        </button>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Hook Mutation Arguments\nDESCRIPTION: Example of migrating from v1 to v2 style mutation arguments in hooks, showing the required changes in implementation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignMessage } from 'wagmi'\n\nconst { signMessage } = useSignMessage()\n\n<button\n  onClick={() => signMessage({ message: 'foo bar baz' })}\n>\n  Sign message\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Write Implementation\nDESCRIPTION: Example showing how to execute a basic contract write operation using the writeContract function with necessary parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await writeContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using getEnsAddress to fetch an ENS address\nDESCRIPTION: This example demonstrates how to use the getEnsAddress function to fetch an ENS address for a given name. It includes normalizing the ENS name using viem's normalize function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAddress } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAddress = getEnsAddress(config, {\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Invalidating Balance Query After User Interaction\nDESCRIPTION: Shows how to invalidate a user's balance query after a user interaction, which marks the balance as stale and triggers a refetch of rendered balance queries.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\n\nconst { queryKey } = useBalance()\n</script>\n\n<template>\n  <button @click=\"queryClient.invalidateQueries({ queryKey })\">\n    Invalidate\n  </button>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: balance } = useBalance()\n</script>\n\n<template>\n  <div>{{ balance }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting up Wagmi Core Configuration Variables in Vue\nDESCRIPTION: Defines essential configuration variables for Wagmi Core documentation. Establishes the documentation path as 'core', the main package name as '@wagmi/core', and the connectors package name as '@wagmi/connectors'.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/createConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'core'\nconst packageName = '@wagmi/core'\nconst connectorsPackageName = '@wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Automatic Installation of Wagmi using CLI\nDESCRIPTION: Commands for installing Wagmi using the create-wagmi CLI with different package managers. This method creates a new Wagmi project with TypeScript and required dependencies.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create wagmi\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm create wagmi@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create wagmi\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun create wagmi\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Parameters Array - TypeScript\nDESCRIPTION: This snippet illustrates how to specify which parameters should be prepared for the transaction within the hook, optimizing its setup.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    parameters: ['gas', 'nonce'],\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple Contract Functions with useReadContracts\nDESCRIPTION: This snippet showcases how to use the useReadContracts hook to call multiple functions on the same contract in a single call, handling loading and error states for all function calls together.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type BaseError, useReadContracts } from 'wagmi'\n\nfunction ReadContract() {\n  const { \n    data,\n    error,\n    isPending\n  } = useReadContracts({ \n    contracts: [{ \n      ...wagmiContractConfig,\n      functionName: 'balanceOf',\n      args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],\n    }, { \n      ...wagmiContractConfig, \n      functionName: 'ownerOf', \n      args: [69n], \n    }, { \n      ...wagmiContractConfig, \n      functionName: 'totalSupply', \n    }] \n  }) \n  const [balance, ownerOf, totalSupply] = data || [] \n\n  if (isPending) return <div>Loading...</div>\n\n  if (error)\n    return (\n      <div>\n        Error: {(error as BaseError).shortMessage || error.message}\n      </div>\n    ) \n\n  return (\n    <>\n      <div>Balance: {balance?.toString()}</div>\n      <div>Owner of Token 69: {ownerOf?.toString()}</div> \n      <div>Total Supply: {totalSupply?.toString()}</div> \n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Form Handler to SendTransaction Component\nDESCRIPTION: This snippet adds a form submission handler to the SendTransaction component to process user input.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\n\nexport function SendTransaction() {\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n      <input name=\"value\" placeholder=\"0.05\" required />\n      <button type=\"submit\">Send</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connectors with createConfig\nDESCRIPTION: Shows how to add wallet connectors to a Wagmi configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { injected } from 'wagmi/connectors' // [!code focus]\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [injected()], // [!code focus]\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Typed Data with Block Number in Wagmi Core\nDESCRIPTION: This example shows how to verify typed data signatures by specifying a block number. This parameter is only used when verifying data signed by a Smart Contract Account to check if the contract was already deployed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyTypedData } from '@wagmi/core'\nimport { domain, types } from './data'\nimport { config } from './config'\n\nconst valid = await verifyTypedData(config, {\n  blockNumber: 12345678n, // [!code focus]\n  domain,\n  types,\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  primaryType: 'Mail',\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n// true\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Data with useReadContract in React\nDESCRIPTION: This snippet demonstrates how to use the useReadContract hook to retrieve the token balance of an address from a smart contract. It includes the main component and the contract configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContract } from 'wagmi'\nimport { wagmiContractConfig } from './contracts'\n\nfunction ReadContract() {\n  const { data: balance } = useReadContract({\n    ...wagmiContractConfig,\n    functionName: 'balanceOf',\n    args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],\n  })\n\n  return (\n    <div>Balance: {balance?.toString()}</div>\n  )\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport const wagmiContractConfig = {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: [\n    {\n      type: 'function',\n      name: 'balanceOf',\n      stateMutability: 'view',\n      inputs: [{ name: 'account', type: 'address' }],\n      outputs: [{ type: 'uint256' }],\n    },\n    {\n      type: 'function',\n      name: 'totalSupply',\n      stateMutability: 'view',\n      inputs: [],\n      outputs: [{ name: 'supply', type: 'uint256' }],\n    },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Creating Wagmi Config in TypeScript\nDESCRIPTION: Example of creating and exporting a Wagmi config using createConfig. It configures Wagmi to use Mainnet and Sepolia chains with an injected connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '@wagmi/core'\nimport { mainnet, sepolia } from '@wagmi/core/chains'\nimport { injected } from '@wagmi/connectors'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [injected()],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Write with Simulation\nDESCRIPTION: Advanced implementation showing how to combine simulateContract with writeContract for safer transaction execution.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract, writeContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst { request } = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n})\nconst hash = await writeContract(config, request)\n```\n\n----------------------------------------\n\nTITLE: Converting Viem Client to Ethers Signer (v5)\nDESCRIPTION: Utility functions for converting a Viem client to an Ethers.js v5 signer, enabling wallet interactions. Includes a React hook for managing the conversion in components.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providers } from 'ethers'\nimport { useMemo } from 'react'\nimport type { Account, Chain, Client, Transport } from 'viem'\nimport { Config, useConnectorClient } from 'wagmi'\n\nexport function clientToSigner(client: Client<Transport, Chain, Account>) {\n  const { account, chain, transport } = client\n  const network = {\n    chainId: chain.id,\n    name: chain.name,\n    ensAddress: chain.contracts?.ensRegistry?.address,\n  }\n  const provider = new providers.Web3Provider(transport, network)\n  const signer = provider.getSigner(account.address)\n  return signer\n}\n\n/** Action to convert a Viem Client to an ethers.js Signer. */\nexport function useEthersSigner({ chainId }: { chainId?: number } = {}) {\n  const { data: client } = useConnectorClient<Config>({ chainId })\n  return useMemo(() => (client ? clientToSigner(client) : undefined), [client])\n}\n```\n\n----------------------------------------\n\nTITLE: Updating fee estimation from fetchFeeData to estimateFeesPerGas\nDESCRIPTION: Shows the new approach for estimating gas fees, replacing the removed fetchFeeData with estimateFeesPerGas. This change simplifies fee estimation and aligns better with gas estimation practices.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchFeeData } from '@wagmi/core' // [!code --]\nimport { estimateFeesPerGas } from '@wagmi/core' // [!code ++]\nimport { config } from './config' // [!code ++]\n\nconst result = await fetchFeeData() // [!code --]\nconst result = await estimateFeesPerGas(config) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Updating useContractWrite Hook in React/TypeScript\nDESCRIPTION: The useContractWrite hook parameters have been consolidated into a singular config parameter. This change simplifies the API and makes it more consistent with other hooks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nuseContractWrite({\n  addressOrName: mlootContractAddress,\n  contractInterface: mlootABI,\n  functionName: \"claim\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with MetaMask Connector\nDESCRIPTION: Demonstrates how to set up a Wagmi configuration with MetaMask connector, including chain configurations and HTTP transport setup.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\nimport { metaMask } from '{{connectorsPackageName}}'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [metaMask()],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Updating Query Data Imperatively with wagmi\nDESCRIPTION: Demonstrates how to get and set query data imperatively using getQueryData and setQueryData methods with wagmi's getBlockQueryOptions. This is useful for retrieving or updating blockchain data outside of React components.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBlockQueryOptions } from 'wagmi'\nimport type { Block } from 'viem'\nimport { queryClient } from './app'\nimport { config } from './config'\n\nexport function getPendingBlockData() {\n  return queryClient.getQueryData( \n    getBlockQueryOptions(config, { \n      chainId: config.state.chainId, \n      tag: 'pending' \n    } \n  )) \n}\n\nexport function setPendingBlockData(data: Block) {\n  return queryClient.setQueryData( \n    getBlockQueryOptions(config, { \n      chainId: config.state.chainId, \n      tag: 'pending' \n    }, \n    data \n  )) \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Receipt Confirmation in SendTransaction Component\nDESCRIPTION: This snippet adds transaction confirmation status using the useWaitForTransactionReceipt hook from Wagmi.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport {\n  useSendTransaction,\n  useWaitForTransactionReceipt\n} from 'wagmi'\nimport { parseEther } from 'viem'\n\nexport function SendTransaction() {\n  const {\n    data: hash,\n    isPending,\n    sendTransaction\n  } = useSendTransaction()\n\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n\n  const { isLoading: isConfirming, isSuccess: isConfirmed } =\n    useWaitForTransactionReceipt({\n      hash,\n    })\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n      <input name=\"value\" placeholder=\"0.05\" required />\n      <button\n        disabled={isPending}\n        type=\"submit\"\n      >\n        {isPending ? 'Confirming...' : 'Send'}\n      </button>\n      {hash && <div>Transaction Hash: {hash}</div>}\n      {isConfirming && <div>Waiting for confirmation...</div>}\n      {isConfirmed && <div>Transaction confirmed.</div>}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi for Vue.js Application\nDESCRIPTION: This snippet demonstrates how to set up the Wagmi configuration for a Vue.js application. It includes setting up connectors for various wallet types and specifying supported chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createConfig } from '@wagmi/vue'\nimport { base, mainnet, optimism } from '@wagmi/vue/chains'\nimport { injected, metaMask, safe, walletConnect } from '@wagmi/vue/connectors'\n\nconst projectId = '<WALLETCONNECT_PROJECT_ID>'\n\nexport const config = createConfig({\n  chains: [mainnet, base],\n  connectors: [\n    injected(),\n    walletConnect({ projectId }),\n    metaMask(),\n    safe(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [base.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Wagmi Configuration\nDESCRIPTION: Example of creating and exporting a Wagmi configuration using createConfig with Mainnet and Sepolia chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '@wagmi/core'\nimport { mainnet, sepolia } from '@wagmi/core/chains'\nimport { injected } from '@wagmi/connectors'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [injected()],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionConfirmations with Transaction Hash\nDESCRIPTION: Demonstrates how to use the getTransactionConfirmations function with a transaction hash. It requires a configuration object and the transaction hash as parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionConfirmations.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTransactionConfirmations } from '@wagmi/core'\nimport { config } from './config'\n\nconst transaction = getTransactionConfirmations(config, {\n  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Wagmi Plugin into Vue Application\nDESCRIPTION: This snippet shows how to inject the Wagmi plugin and Vue Query plugin into a Vue application. It ensures that the application is aware of Wagmi's reactive state and in-memory caching.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Import modules.\nimport { VueQueryPlugin } from '@tanstack/vue-query';\nimport { WagmiPlugin } from '@wagmi/vue';\nimport { createApp } from 'vue';\n\nimport App from './App.vue';\nimport { config } from './wagmi';\n\ncreateApp(App)\n  // 2. Inject the Wagmi plugin.\n  .use(WagmiPlugin, { config })\n  // 3. Inject the Vue Query plugin.\n  .use(VueQueryPlugin, {})\n  .mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Import useReadContracts from Wagmi\nDESCRIPTION: This code snippet shows how to import the `useReadContracts` hook from the Wagmi library. This hook is used to call multiple read methods on a contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Contract Address Configuration\nDESCRIPTION: This example highlights how to define the contract address when using the `useReadContracts` hook. The address is a fundamental parameter that specifies the location of the contract on the blockchain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',  // [!code hl]\n        abi: mlootABI,\n        functionName: 'getChest',\n        args: [69],\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of watchAsset to Add ERC20 Token\nDESCRIPTION: Demonstrates how to use the watchAsset action to request a user to track an ERC20 token in their wallet.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchAsset } from '@wagmi/core'\nimport { config } from './config'\n\nawait watchAsset(config, {\n  type: 'ERC20',\n  options: {\n    address: '0x0000000000000000000000000000000000000000',\n    symbol: 'WAGMI',\n    decimals: 18,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Wagmi Plugin to Vue App\nDESCRIPTION: Example of adding the WagmiPlugin to a Vue app instance and passing the created config to the plugin options.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WagmiPlugin } from '@wagmi/vue'\nimport { createApp } from 'vue'\nimport { config } from './config'\nimport App from './App.vue'\n\ncreateApp(App)\n  .use(WagmiPlugin, { config })\n  .mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Configuring Chains with Providers in Wagmi\nDESCRIPTION: Example showing the new configureChains API usage with Alchemy and public providers. Demonstrates how to set up client connectors with configured chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nimport { chain, createClient, defaultChains } from \"wagmi\";\n\nimport { alchemyProvider } from \"wagmi/providers/alchemy\";\nimport { publicProvider } from \"wagmi/providers/public\";\n\nimport { CoinbaseWalletConnector } from \"wagmi/connectors/coinbaseWallet\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\nimport { WalletConnectConnector } from \"wagmi/connectors/walletConnect\";\n\nconst alchemyId = process.env.ALCHEMY_ID;\n\nconst { chains, provider, webSocketProvider } = configureChains(\n  defaultChains,\n  [alchemyProvider({ alchemyId }), publicProvider()],\n);\n\nconst client = createClient({\n  autoConnect: true,\n  connectors: [\n    new MetaMaskConnector({ chains }),\n    new CoinbaseWalletConnector({\n      chains,\n      options: {\n        appName: \"wagmi\",\n      },\n    }),\n    new WalletConnectConnector({\n      chains,\n      options: {\n        qrcode: true,\n      },\n    }),\n    new InjectedConnector({\n      chains,\n      options: {\n        name: \"Injected\",\n        shimDisconnect: true,\n      },\n    }),\n  ],\n  provider,\n  webSocketProvider,\n});\n```\n\n----------------------------------------\n\nTITLE: Using switchAccount in a TypeScript file\nDESCRIPTION: Demonstrates how to use the switchAccount function with a configuration and connector. It also shows how to get connections using getConnections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections, switchAccount } from '@wagmi/core'\nimport { config } from './config'\n\nconst connections = getConnections(config)\nconst result = await switchAccount(config, {\n  connector: connections[0]?.connector,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Options with Connector Support\nDESCRIPTION: This component renders a list of available wallet connectors for users to choose from. It includes a WalletOption component that checks connector readiness and handles the connection process when clicked.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { Connector, useConnect } from 'wagmi'\n\nexport function WalletOptions() {\n  const { connectors, connect } = useConnect()\n\n  return connectors.map((connector) => (\n    <WalletOption\n      key={connector.uid}\n      connector={connector}\n      onClick={() => connect({ connector })}\n    />\n  ))\n}\n\nfunction WalletOption({\n  connector,\n  onClick,\n}: {\n  connector: Connector\n  onClick: () => void\n}) {\n  const [ready, setReady] = React.useState(false)\n\n  React.useEffect(() => {\n    ;(async () => {\n      const provider = await connector.getProvider()\n      setReady(!!provider)\n    })()\n  }, [connector])\n\n  return (\n    <button disabled={!ready} onClick={onClick}>\n      {connector.name}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Wagmi CLI Configuration with Contracts and Plugins\nDESCRIPTION: A comprehensive configuration that includes ERC-20 contracts and implements Etherscan and React plugins for fetching ABIs and generating React hooks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { etherscan, react } from '@wagmi/cli/plugins'\nimport { erc20Abi } from 'viem'\nimport { mainnet, sepolia } from 'wagmi/chains'\n \nexport default defineConfig({\n  out: 'src/generated.ts',\n  contracts: [\n    {\n      name: 'erc20',\n      abi: erc20Abi,\n    },\n  ],\n  plugins: [\n    etherscan({\n      apiKey: process.env.ETHERSCAN_API_KEY!,\n      chainId: mainnet.id,\n      contracts: [\n        {\n          name: 'EnsRegistry',\n          address: {\n            [mainnet.id]: '0x314159265dd8dbb310642f98f50c066173c1259b',\n            [sepolia.id]: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n          },\n        },\n      ],\n    }),\n    react(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with data parameter\nDESCRIPTION: Demonstrates how to include contract data when sending a transaction using sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using useSendTransaction Hook in React Component\nDESCRIPTION: Demonstrates how to use the useSendTransaction hook in a React component to send a transaction with a specified amount of Ether to a target address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSendTransaction } from 'wagmi'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const { sendTransaction } = useSendTransaction()\n\n  return (\n    <button\n      onClick={() =>\n        sendTransaction({\n          to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n          value: parseEther('0.01'),\n        })\n      }\n    >\n      Send transaction\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Transport Configuration with Fallback\nDESCRIPTION: Demonstrates how to configure multiple transports with fallback options for different chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, fallback, http } from 'wagmi' // [!code focus]\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: { // [!code focus]\n    [mainnet.id]: fallback([ // [!code focus]\n      http('https://...'), // [!code focus]\n      http('https://...'), // [!code focus]\n    ]), // [!code focus]\n    [sepolia.id]: http('https://...'), // [!code focus]\n  }, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing formatUnits parameter with direct Viem formatUnits function\nDESCRIPTION: Shows how to migrate from using the deprecated 'formatUnits' parameter and 'formatted' return values to using Viem's 'formatUnits' function directly. This approach gives more control over formatting with explicit decimals specification.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatUnits } from 'viem' // [!code ++]\nimport { getToken } from '@wagmi/core'\n\nconst result = await getToken({\n  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  formatUnits: 'ether',\n})\nresult.totalSupply.formatted  // [!code --]\nformatUnits(result.totalSupply.value, 18)  // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi CLI v2 with Package Managers\nDESCRIPTION: Commands for installing the latest version of Wagmi CLI using different package managers (pnpm, npm, yarn, bun).\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @wagmi/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @wagmi/cli\n```\n\n----------------------------------------\n\nTITLE: Using prepareWriteContract with writeContract in TypeScript\nDESCRIPTION: Example showing how to use the new prepareWriteContract action to prepare a configuration before passing it to writeContract. This is the new recommended way to handle contract write operations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\nimport { prepareWriteContract, writeContract } from '@wagmi/core'\n\nconst tokenId = 69\n\n+const config = await prepareWriteContract({\n+ addressOrName: '0x...',\n+ contractInterface: wagmiAbi,\n+ functionName: 'mint',\n+ args: [tokenId]\n+})\n\nconst result = await writeContract({\n- addressOrName: '0x...',\n- contractInterface: wagmiAbi,\n- functionName: 'mint',\n- args: [tokenId],\n+ ...config\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Contract Reading with useReadContract in React\nDESCRIPTION: This snippet shows how to use the query.enabled option to prevent the contract read from running until a dependency (address) is available.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data: balance } = useReadContract({\n  ...wagmiContractConfig,\n  functionName: 'balanceOf',\n  args: [address],\n  query: {\n    enabled: !!address,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Invalidating Contract Data on New Blocks using useBlockNumber\nDESCRIPTION: This example demonstrates how to use the useBlockNumber hook to invalidate the contract data query when a new block is mined, triggering a refetch of the data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQueryClient } from '@tanstack/react-query'\nimport { useEffect } from 'react'\nimport { useBlockNumber, useReadContract } from 'wagmi'\n\nfunction ReadContract() {\n  const queryClient = useQueryClient()\n  const { data: balance, refetch } = useReadContract({\n    ...wagmiContractConfig,\n    functionName: 'balanceOf',\n    args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],\n  })\n  const { data: blockNumber } = useBlockNumber({ watch: true })\n\n  useEffect(() => {\n    // if `useReadContract` is in a different hook/component,\n    // you can import `readContractQueryKey` from `'wagmi/query'` and\n    // construct a one-off query key to use for invalidation\n    queryClient.invalidateQueries({ queryKey })\n  }, [blockNumber, queryClient])\n\n  return (\n    <div>Balance: {balance?.toString()}</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Account Effect Callbacks in TypeScript\nDESCRIPTION: Demonstrates migration of account connection callbacks from useAccount to the new useAccountEffect hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccountEffect } from 'wagmi'\n\nuseAccountEffect({\n  onConnect(data) {\n    console.log('connected', data)\n  },\n  onDisconnect() {\n    console.log('disconnected')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Wallet Connection Options in Vue\nDESCRIPTION: This Vue component renders a list of available wallet connectors and allows users to connect their wallets. It uses the useConnect and useChainId composables from Wagmi.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnect, useChainId } from '@wagmi/vue';\n\nconst chainId = useChainId();\nconst { connectors, connect } = useConnect();\n</script>\n\n<template>\n  <button\n    v-for=\"connector in connectors\"\n    @click=\"connect({ connector, chainId })\"\n  >\n    {{ connector.name }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using onReplaced Callback with useWaitForTransactionReceipt\nDESCRIPTION: Example demonstrating how to use the onReplaced callback to handle replaced, repriced, or cancelled transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\n\nconst result = useWaitForTransactionReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  onReplaced: replacement => console.log(replacement), \n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Reading Token Balance from a Smart Contract in Vue\nDESCRIPTION: A Vue component that reads the token balance of a specific address from the Wagmi Example contract. This demonstrates the basic implementation of useReadContract to fetch data from a smart contract's view function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/read-from-contract.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from 'wagmi'\nimport { wagmiContractConfig } from './contracts'\n\nconst { data: balance } = useReadContract({\n  ...wagmiContractConfig,\n  functionName: 'balanceOf',\n  args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],\n})\n</script>\n\n<template>\n  <div>Balance: {{ balance?.toString() }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Viem Private Key with Wagmi's sendTransaction\nDESCRIPTION: This snippet demonstrates how to use a Viem private key account with Wagmi's `sendTransaction` action. It shows how to convert a private key to an account object using `privateKeyToAccount` and then pass this account explicitly to the `sendTransaction` function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/viem.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { http, createConfig, sendTransaction } from '@wagmi/core' \nimport { base, mainnet, optimism, zora } from '@wagmi/core/chains' \nimport { parseEther } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const config = createConfig({ \n  chains: [base, mainnet, optimism, zora], \n  transports: { \n    [base.id]: http(), \n    [mainnet.id]: http(), \n    [zora.id]: http(), \n  }, \n}) \n\nconst account = privateKeyToAccount('0x...') // [!code hl]\n\nconst hash = await sendTransaction({ \n  account, // [!code hl]\n  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  value: parseEther('0.001')\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Connected Account Information in Vue\nDESCRIPTION: This Vue component shows information about the connected account, including the address and connector name. It also provides a disconnect button using Wagmi's useAccount and useDisconnect composables.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useAccount, useDisconnect } from '@wagmi/vue';\n\nconst { address, connector } = useAccount();\nconst { disconnect } = useDisconnect();\n</script>\n\n<template>\n  <div>Address: {{ address }}</div>\n  <div>Connected to {{ connector?.name }} Connector.</div>\n  <button @click=\"disconnect()\">Disconnect</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Error Type Discrimination in Vue Component with Wagmi\nDESCRIPTION: A Vue component demonstrating how to handle different error types from Wagmi's useBlockNumber composable. Shows type discrimination using error.name and accessing type-specific error properties like status and code.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// @noErrors\nimport { useBlockNumber } from 'wagmi'\n\nconst { data, error } = useBlockNumber()\n//            ^?\n\n\nerror?.name\n//     ^?\n\n\n\n\n\n</script>\n\n<template>\n  <div v-if=\"error?.name === 'HttpRequestError'\">\n    A HTTP error occurred. Status: {{ error.status }}\n//                                          ^?\n  </div>\n\n  <div v-else-if=\"error?.name === 'LimitExceededRpcError'\">\n    Rate limit exceeded. Code: {{ error.code }}\n//                                      ^?\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Inject External Configuration into usePublicClient\nDESCRIPTION: Illustrates the usePublicClient hook with an external configuration object. Useful for applications requiring custom setups different from the nearest WagmiProvider defaults.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePublicClient.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePublicClient } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const client = usePublicClient({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in SendTransaction Component with Wagmi\nDESCRIPTION: This snippet adds error handling to the SendTransaction component to display error messages for transaction failures or rejections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport {\n  type BaseError,\n  useSendTransaction,\n  useWaitForTransactionReceipt\n} from 'wagmi'\nimport { parseEther } from 'viem'\n\nexport function SendTransaction() {\n  const {\n    data: hash,\n    error,\n    isPending,\n    sendTransaction\n  } = useSendTransaction()\n\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n\n  const { isLoading: isConfirming, isSuccess: isConfirmed } =\n    useWaitForTransactionReceipt({\n      hash,\n    })\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n      <input name=\"value\" placeholder=\"0.05\" required />\n      <button\n        disabled={isPending}\n        type=\"submit\"\n      >\n        {isPending ? 'Confirming...' : 'Send'}\n      </button>\n      {hash && <div>Transaction Hash: {hash}</div>}\n      {isConfirming && <div>Waiting for confirmation...</div>}\n      {isConfirmed && <div>Transaction confirmed.</div>}\n      {error && (\n        <div>Error: {(error as BaseError).shortMessage || error.message}</div>\n      )}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Const-Asserted Types for useSignTypedData\nDESCRIPTION: Shows type inference for the useSignTypedData hook using const-asserted type definitions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignTypedData.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignTypedData } from 'wagmi'\n// ---cut---\nconst types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n\nconst { signTypedData } = useSignTypedData()\n\nsignTypedData({\n  types,\n  primaryType: 'Mail',\n  // ^?\n\n\n  message: {\n  // ^?\n\n\n\n\n\n\n\n\n\n\n\n\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useBalance hook in React component\nDESCRIPTION: This example shows how to use the `useBalance` hook within a React component to fetch the balance of a specific Ethereum address. It imports `useBalance` from `wagmi` and calls it with an address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBalance } from 'wagmi'\n\nfunction App() {\n  const result = useBalance({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Receipt Monitoring Implementation\nDESCRIPTION: Integration of useWaitForTransactionReceipt hook to track and display transaction confirmation status.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { \n  useWaitForTransactionReceipt,\n  useWriteContract \n} from 'wagmi'\nimport { abi } from './abi'\n\nexport function MintNFT() {\n  const { \n    data: hash, \n    isPending, \n    writeContract \n  } = useWriteContract()\n\n  const { isLoading: isConfirming, isSuccess: isConfirmed } =\n    useWaitForTransactionReceipt({\n      hash,\n    })\n\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const tokenId = formData.get('tokenId') as string\n    writeContract({\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'mint',\n      args: [BigInt(tokenId)],\n    })\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"tokenId\" placeholder=\"69420\" required />\n      <button \n        disabled={isPending}\n        type=\"submit\"\n      >\n        {isPending ? 'Confirming...' : 'Mint'}\n      </button>\n      {hash && <div>Transaction Hash: {hash}</div>}\n      {isConfirming && <div>Waiting for confirmation...</div>}\n      {isConfirmed && <div>Transaction confirmed.</div>}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: useCall with ScopeKey Parameter\nDESCRIPTION: Illustrates the usage of the `scopeKey` parameter within the `useCall` hook to scope the cache to a given context. Hooks that have identical context will share the same cache. The `scopeKey` parameter accepts a `string | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useCall({\n    scopeKey: 'foo' // [!code focus]\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Wagmi Provider and Wallet Connection in React\nDESCRIPTION: This component sets up the WagmiProvider and QueryClientProvider to enable wallet connectivity in the application. It includes a ConnectWallet component that conditionally renders either the Account or WalletOptions component based on connection status.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/connect-wallet.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider, useAccount } from 'wagmi'\nimport { config } from './config'\nimport { Account } from './account' // [!code ++]\nimport { WalletOptions } from './wallet-options' // [!code ++]\n\nconst queryClient = new QueryClient()\n\nfunction ConnectWallet() { // [!code ++]\n  const { isConnected } = useAccount() // [!code ++]\n  if (isConnected) return <Account /> // [!code ++]\n  return <WalletOptions /> // [!code ++]\n} // [!code ++]\n\nfunction App() {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}> \n        <ConnectWallet /> // [!code ++]\n      </QueryClientProvider> \n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SendCalls Usage\nDESCRIPTION: Demonstrates basic usage of sendCalls with multiple transaction calls including value transfer and contract interaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { sendCalls } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst id = await sendCalls(config, {\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      data: '0xdeadbeef',\n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing UseWatchContractEventReturnType\nDESCRIPTION: Shows how to import the UseWatchContractEventReturnType for TypeScript type checking of the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchContractEvent.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchContractEventReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Form Handler Implementation\nDESCRIPTION: Adding a basic form submission handler to process the tokenId input.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nfunction submit(event: Event) {\n  const formData = new FormData(e.target as HTMLFormElement)\n  const tokenId = formData.get('tokenId') as string\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"tokenId\" placeholder=\"69420\" required />\n    <button type=\"submit\">Mint</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Max Priority Fee Per Gas Parameter - TypeScript\nDESCRIPTION: This snippet details how to set the maximum priority fee per gas for an EIP-1559 transaction, which can enable faster transaction processing.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther, parseGwei } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    maxFeePerGas: parseGwei('20'),\n    maxPriorityFeePerGas: parseGwei('2'),\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching balance for specific chain\nDESCRIPTION: Shows how to use the getBalance function to fetch the balance for a specific chain by providing the chainId.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBalance } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst balance = await getBalance(config, {\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Tracking Transaction Confirmation Status in Vue\nDESCRIPTION: Using Wagmi's useWaitForTransactionReceipt composable to track and display the confirmation status of the transaction after it's been sent to the network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  import { \n    useSendTransaction,\n    useWaitForTransactionReceipt,\n  } from 'wagmi'\n  import { parseEther } from 'viem'\n\n  const { \n    data: hash, \n    isPending,\n    sendTransaction \n  } = useSendTransaction()\n\n  function submit(event: Event) {\n    const formData = new FormData(event.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n\n  const { isLoading: isConfirming, isSuccess: isConfirmed } =\n    useWaitForTransactionReceipt({\n      hash,\n    })\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n    <input name=\"value\" placeholder=\"0.05\" required />\n    <button :disabled=\"isPending\" type=\"submit\">\n      <span v-if=\"isPending\">Sending...</span>\n      <span v-else>Send</span>\n    </button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n    <div v-if=\"isConfirming\">Waiting for confirmation...</div>\n    <div v-if=\"isConfirmed\">Transaction Confirmed!</div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Loading and Error States in useReadContract\nDESCRIPTION: This example demonstrates how to handle loading and error states when using the useReadContract hook, including displaying a loading indicator and error messages.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type BaseError, useReadContract } from 'wagmi'\n\nfunction ReadContract() {\n  const { \n    data: balance,\n    error,\n    isPending\n  } = useReadContract({\n    ...wagmiContractConfig,\n    functionName: 'balanceOf',\n    args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],\n  })\n\n  if (isPending) return <div>Loading...</div>\n\n  if (error)\n    return (\n      <div>\n        Error: {(error as BaseError).shortMessage || error.message}\n      </div>\n    )\n\n  return (\n    <div>Balance: {balance?.toString()}</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Typed Errors in Wagmi Hooks with React\nDESCRIPTION: This React component demonstrates how to use the useBlockNumber hook from Wagmi and handle different error types. It shows error discrimination using the 'name' property and accessing specific error properties based on the error type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlockNumber } from 'wagmi'\n\nfunction App() {\n  const { data, error } = useBlockNumber()\n  //            ^?\n\n  error?.name\n  //     ^?\n\n\n\n\n\n\n  if (error?.name === 'HttpRequestError') {\n    const { status } = error\n    //      ^?      \n\n\n    return <div>A HTTP error occurred. Status: {status}</div>\n  }\n  if (error?.name === 'LimitExceededRpcError') {\n    const { code } = error\n    //      ^?\n\n    \n    return <div>Rate limit exceeded. Code: {code}</div>\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Viem Actions with Wagmi Hooks in TypeScript React\nDESCRIPTION: This snippet demonstrates two methods of using Viem Actions within a Wagmi setup: tree-shakable actions and client actions. It shows how to set up a Wagmi config, extract Viem clients, and create custom query and mutation hooks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/viem.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Import modules. \nimport { useMutation, useQuery } from '@tanstack/react-query'\nimport { http, createConfig, useClient, useConnectorClient } from 'wagmi' \nimport { base, mainnet, optimism, zora } from 'wagmi/chains' \nimport { getLogs, watchAsset } from 'viem/actions'\n\n// 2. Set up a Wagmi Config \nexport const config = createConfig({ \n  chains: [base, mainnet, optimism, zora], \n  transports: { \n    [base.id]: http(), \n    [mainnet.id]: http(), \n    [optimism.id]: http(), \n    [zora.id]: http(), \n  }, \n}) \n\nfunction Example() {\n  // 3. Extract a Viem Client for the current active chain.\n  const publicClient = useClient({ config })\n\n  // 4. Create a \"custom\" Query Hook that utilizes the Client.\n  const { data: logs } = useQuery({\n    queryKey: ['logs', publicClient.uid],\n    queryFn: () => getLogs(publicClient, /* ... */)\n  })\n  \n  // 5. Extract a Viem Client for the current active chain & account.\n  const { data: walletClient } = useConnectorClient({ config })\n\n  // 6. Create a \"custom\" Mutation Hook that utilizes the Client.\n  const { mutate } = useMutation({\n    mutationFn: (asset) => watchAsset(walletClient, asset)\n  })\n\n  return (\n    <div>\n      {/* ... */}\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Import modules. \nimport { useMutation, useQuery } from '@tanstack/react-query'\nimport { http, createConfig, useClient, useConnectorClient } from 'wagmi' \nimport { base, mainnet, optimism, zora } from 'wagmi/chains' \n\n// 2. Set up a Wagmi Config \nexport const config = createConfig({ \n  chains: [base, mainnet, optimism, zora], \n  transports: { \n    [base.id]: http(), \n    [mainnet.id]: http(), \n    [optimism.id]: http(), \n    [zora.id]: http(), \n  }, \n}) \n\nfunction Example() {\n  // 3. Extract a Viem Client for the current active chain.\n  const publicClient = useClient({ config })\n\n  // 4. Create a \"custom\" Query Hook that utilizes the Client.\n  const { data: logs } = useQuery({\n    queryKey: ['logs', publicClient.uid],\n    queryFn: () => publicClient.getLogs(/* ... */)\n  })\n  \n  // 5. Extract a Viem Client for the current active chain & account.\n  const { data: walletClient } = useConnectorClient({ config })\n\n  // 6. Create a \"custom\" Mutation Hook that utilizes the Client.\n  const { mutate } = useMutation({\n    mutationFn: (asset) => walletClient.watchAsset(asset)\n  })\n\n  return (\n    <div>\n      {/* ... */}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Viem Client to Ethers v6 Provider\nDESCRIPTION: Implementation to convert a Viem client to an Ethers.js v6 provider. Handles both regular and fallback transports, creating appropriate JsonRpcProvider or FallbackProvider instances with network configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Config, getClient } from '@wagmi/core'\nimport { FallbackProvider, JsonRpcProvider } from 'ethers'\nimport type { Client, Chain, Transport } from 'viem'\n\nexport function clientToProvider(client: Client<Transport, Chain>) {\n  const { chain, transport } = client\n  const network = {\n    chainId: chain.id,\n    name: chain.name,\n    ensAddress: chain.contracts?.ensRegistry?.address,\n  }\n  if (transport.type === 'fallback') {\n    const providers = (transport.transports as ReturnType<Transport>[]).map(\n      ({ value }) => new JsonRpcProvider(value?.url, network),\n    )\n    if (providers.length === 1) return providers[0]\n    return new FallbackProvider(providers)\n  }\n  return new JsonRpcProvider(transport.url, network)\n}\n\n/** Action to convert a viem Client to an ethers.js Provider. */\nexport function getEthersProvider(\n  config: Config,\n  { chainId }: { chainId?: number } = {},\n) {\n  const client = getClient(config, { chainId })\n  if (!client) return\n  return clientToProvider(client)\n}\n```\n\n----------------------------------------\n\nTITLE: Using config.chains instead of getNetwork\nDESCRIPTION: Illustrates how to replace the removed getNetwork and watchNetwork actions by directly using the config.chains for chain information. This encourages better practices by tying network information closely to configuration, enhancing maintainability.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getNetwork } from '@wagmi/core' // [!code --]\n\nconst { chains } = getNetwork() // [!code --]\nconst chains = config.chains // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Basic Typed Data Verification Example\nDESCRIPTION: Demonstrates how to import and use verifyTypedData to verify a typed data signature with domain, types and message parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyTypedData } from '@wagmi/core'\nimport { domain, types } from './data'\nimport { config } from './config'\n\nconst valid = await verifyTypedData(config, {\n  domain,\n  types,\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  primaryType: 'Mail',\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from usePrepareSendTransaction to useEstimateGas in TypeScript\nDESCRIPTION: Demonstrates migration from usePrepareSendTransaction to useEstimateGas hook, including updated transaction handling and gas estimation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEstimateGas, useSendTransaction } from 'wagmi'\nimport { parseEther } from 'viem'\n\nconst { data } = useEstimateGas({\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\nconst { sendTransaction } = useSendTransaction()\n\n<button\n  disabled={!Boolean(data)}\n  onClick={() => sendTransaction({\n    gas: data,\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })}\n>\n  Send transaction\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Transport with createConfig in wagmi\nDESCRIPTION: Example demonstrating how to use the http transport when creating a wagmi configuration with multiple chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createConfig, \n  http // [!code hl]\n} from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [injected()],\n  transports: {\n    [mainnet.id]: http('https://foo-bar-baz.quiknode.pro/...'), // [!code hl]\n    [sepolia.id]: http('https://foo-bar-sep.quiknode.pro/...'), // [!code hl]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useBalance Composable\nDESCRIPTION: Demonstrates basic usage of the useBalance composable to fetch the balance for a specific Ethereum address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Connectors with useDisconnect Hook\nDESCRIPTION: Demonstrates how to use the connectors returned by useDisconnect to create multiple disconnect buttons.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDisconnect.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDisconnect } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const { connectors, disconnect } = useDisconnect()\n\n  return (\n    <div>\n      {connectors.map((connector) => (\n        <button key={connector.id} onClick={() => disconnect({ connector })}>\n          {connector.name}\n        </button>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WagmiProvider with Initial State in Next.js (TypeScript/TSX)\nDESCRIPTION: This code demonstrates how to implement the WagmiProvider component with initial state support in a Next.js client component. It uses the QueryClient from @tanstack/react-query.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ssr.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { type ReactNode, useState } from 'react'\nimport { type State, WagmiProvider } from 'wagmi'\n\nimport { getConfig } from './config'\n\ntype Props = {\n  children: ReactNode,\n  initialState: State | undefined,\n}\n\nexport function Providers({ children, initialState }: Props) {\n  const [config] = useState(() => getConfig())\n  const [queryClient] = useState(() => new QueryClient())\n\n  return (\n    <WagmiProvider config={config} initialState={initialState}>\n      <QueryClientProvider client={queryClient}>\n        {children}\n      </QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSignTypedData Hook in React Component\nDESCRIPTION: Demonstrates how to use the useSignTypedData hook in a React component to sign typed data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignTypedData.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignTypedData } from 'wagmi'\n\n\nfunction App() {\n  const { signTypedData } = useSignTypedData()\n\n  return (\n    <button\n      onClick={() =>\n        signTypedData({\n          types: {\n            Person: [\n              { name: 'name', type: 'string' },\n              { name: 'wallet', type: 'address' },\n            ],\n            Mail: [\n              { name: 'from', type: 'Person' },\n              { name: 'to', type: 'Person' },\n              { name: 'contents', type: 'string' },\n            ],\n          },\n          primaryType: 'Mail',\n          message: {\n            from: {\n              name: 'Cow',\n              wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n            },\n            to: {\n              name: 'Bob',\n              wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n            },\n            contents: 'Hello, Bob!',\n          },\n        })\n      }\n    >\n      Sign message\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Transaction Type for Contract Simulation\nDESCRIPTION: Illustrates how to define the specific transaction type for a contract simulation using Wagmi's simulateContract method. Allows explicit specification of transaction protocol version.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  type: 'eip1559', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating gas instead of prepareSendTransaction\nDESCRIPTION: Highlights the replacement of prepareSendTransaction with estimateGas, facilitating a clearer gas estimation process within the framework.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareSendTransaction } from '@wagmi/core' // [!code --]\nimport { estimateGas } from '@wagmi/core' // [!code ++]\nimport { config } from './config' // [!code ++]\n\nconst result = await prepareSendTransaction({ ... }) // [!code --]\nconst result = await estimateGas(config, { ... }) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with Block Hash\nDESCRIPTION: This snippet shows how to use the useTransaction hook with a block hash and index parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransaction } from 'wagmi'\n\nfunction App() {\n  const result = useTransaction({\n    blockHash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n    index: 0,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Contract Addresses in Wagmi CLI\nDESCRIPTION: Example showing how to configure contract addresses in Wagmi CLI, demonstrating both single address format and multi-chain address format using an object with chainId keys.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/options.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  out: 'src/generated.ts',\n  contracts: [\n    {\n      abi: [â€¦],\n      address: '0xâ€¦',\n      name: 'MyCoolContract',\n    },\n    {\n      abi: [â€¦],\n      address: {\n        1: '0xfooâ€¦',\n        5: '0xbarâ€¦',\n      },\n      name: 'MyCoolMultichainContract'\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Narrowing Return Types with ChainId Data Property\nDESCRIPTION: Shows how to narrow return types using the chainId data property for type-safe access to chain-specific properties.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/chain-properties.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\nimport { zkSync } from '@wagmi/vue/chains'\n\nconst { data } = useWaitForTransactionReceipt({\n  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',\n})\n\nif (data?.chainId === zkSync.id) {\n  data?.logs\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Block Number Changes with useBlockNumber (TSX)\nDESCRIPTION: Demonstrates enabling the watch feature in 'useBlockNumber' to listen for real-time changes in block numbers. Shows basic toggle as well as advanced options via parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-21_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useBlockNumber } from 'wagmi'\n\nfunction App() {\n  const result = useBlockNumber({\n    watch: true, // [!code focus]\n  })\n}\n```\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useBlockNumber } from 'wagmi'\n\nfunction App() {\n  const result = useBlockNumber({\n    watch: { // [!code focus]\n      pollingInterval: 4_000, // [!code focus]\n    }, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SendTransaction Component in React with Wagmi\nDESCRIPTION: This snippet shows the initial setup of a SendTransaction component with a basic form structure.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\n\nexport function SendTransaction() {\n  return (\n    <form>\n      <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n      <input name=\"value\" placeholder=\"0.05\" required />\n      <button type=\"submit\">Send</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Form Submission Handler in Vue\nDESCRIPTION: Implementing a form submission handler that extracts address and value from form data. This prepares the component for transaction submission.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  function submit(event: Event) {\n    const formData = new FormData(event.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n    <input name=\"value\" placeholder=\"0.05\" required />\n    <button type=\"submit\">Send</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Renamed Wagmi React Hooks Mapping\nDESCRIPTION: Migration reference showing the mapping between old and new hook names in the Wagmi library. The renaming better reflects the hooks' functionality and aligns with underlying Viem actions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nuseContractRead -> useReadContract\nuseContractReads -> useReadContracts\nuseContractWrite -> useWriteContract\nuseContractEvent -> useWatchContractEvent\nuseContractInfiniteReads -> useInfiniteReadContracts\nuseFeeData -> useEstimateFeesPerGas\nuseSwitchNetwork -> useSwitchChain\nuseWaitForTransaction -> useWaitForTransactionReceipt\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Query Devtools with wagmi\nDESCRIPTION: Demonstrates how to set up TanStack Query Devtools with wagmi, including configuration of the queryKeyHashFn to correctly serialize BigInt values for display. This setup is essential for properly debugging Ethereum data queries.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  QueryClient,\n  QueryClientProvider,\n} from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\"; \nimport { hashFn } from \"@wagmi/core/query\"; \n\nconst queryClient = new QueryClient({\n  defaultOptions: { \n    queries: { \n      queryKeyHashFn: hashFn, \n    }, \n  }, \n});\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for Typed Data\nDESCRIPTION: Defines the domain and types structure used for typed data verification including Person and Mail types.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Using useGasPrice with scopeKey\nDESCRIPTION: Demonstrates the use of the `scopeKey` parameter for `useGasPrice`.  The `scopeKey` allows you to scope the cache to a given context. Hooks that have identical context will share the same cache. Here it uses `foo` as `scopeKey`.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useGasPrice.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useGasPrice } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useGasPrice({\n    scopeKey: 'foo', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with nonce parameter\nDESCRIPTION: Shows how to specify a custom nonce when sending a transaction using sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  nonce: 123,\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from getToken to readContracts in Wagmi\nDESCRIPTION: Demonstrates how to replace the deprecated 'getToken' function with 'readContracts' to retrieve token information. The new approach calls multiple contract functions (decimals, name, symbol, totalSupply) to get complete token details.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getToken } from '@wagmi/core' // [!code --]\nimport { readContracts } from '@wagmi/core' // [!code ++]\nimport { erc20Abi } from 'viem' // [!code ++]\nimport { config } from './config' // [!code ++]\n\nconst result = await getToken(config, { // [!code --]\n  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code --]\n}) // [!code --]\nconst result = await readContracts(config, { // [!code ++]\n  allowFailure: false, // [!code ++]\n  contracts: [ // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'decimals', // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'name', // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'symbol', // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'totalSupply', // [!code ++]\n    }, // [!code ++]\n  ] // [!code ++]\n}) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Cache Duration Configuration - TypeScript\nDESCRIPTION: Shows how to configure the cache duration for ABI fetching. The cache duration is specified in milliseconds and defaults to 30 minutes if not set.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/fetch.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { fetch } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    fetch({\n      cacheDuration: 300_000,\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n      request(contract) {\n        if (!contract.address) throw new Error('address is required')\n        const address =\n          typeof contract.address === 'string'\n            ? contract.address\n            : Object.values(contract.address)[0]\n        return {\n          url: `https://api.etherscan.io/api?module=contract&action=getabi&address=${address}`,\n        }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Hydrating Cookie State in Next.js App Directory Layout (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to extract the cookie from headers and use cookieToInitialState to hydrate the Wagmi state in a Next.js App Directory layout file.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ssr.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type ReactNode } from 'react'\nimport { headers } from 'next/headers'\nimport { cookieToInitialState } from 'wagmi'\n\nimport { getConfig } from './config'\nimport { Providers } from './providers'\n\nexport default async function Layout({ children }: { children: ReactNode }) {\n  const initialState = cookieToInitialState(\n    getConfig(),\n    (await headers()).get('cookie')\n  )\n  return (\n    <html lang=\"en\">\n      <body>\n        <Providers initialState={initialState}>\n          {children}\n        </Providers>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract in Vue Component\nDESCRIPTION: This example demonstrates how to use the useSimulateContract composable within a Vue component to simulate a contract interaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi Provider with React Query\nDESCRIPTION: Sets up the main application component with WagmiProvider and QueryClientProvider, integrating the MintNft component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider, useAccount } from 'wagmi'\nimport { config } from './config'\nimport { MintNft } from './mint-nft'\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}> \n        <MintNft />\n      </QueryClientProvider> \n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Wagmi Client with fallback Transport\nDESCRIPTION: Demonstrates how to set up a Wagmi configuration with fallback transport options. This approach provides redundancy by using multiple HTTP endpoints, falling back to the next one if the current one fails.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/fallback.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createConfig, \n  fallback, // [!code hl]\n  http,\n} from '{{packageName}}'\nimport { mainnet } from '{{packageName}}/chains'\n\nexport const config = createConfig({\n  chains: [mainnet],\n  connectors: [injected()],\n  transports: {\n    [mainnet.id]: fallback([ // [!code hl]\n      http('https://foo-bar-baz.quiknode.pro/...'), // [!code hl]\n      http('https://mainnet.infura.io/v3/...'), // [!code hl]\n    ]) // [!code hl]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating ENS Name Normalization in useEnsAddress Hook (TypeScript)\nDESCRIPTION: Demonstrates how to manually normalize ENS names before passing them to the useEnsAddress hook in Wagmi v2, as internal normalization has been removed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\nimport { normalize } from 'viem/ens' // [!code ++]\n\nconst result = useEnsAddress({\n  name: 'wevm.eth', // [!code --]\n  name: normalize('wevm.eth'), // [!code ++]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Private Key & Mnemonic Accounts with Wagmi in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Viem's Private Key & Mnemonic Accounts with Wagmi by explicitly passing the account through the 'account' argument on Wagmi Actions. It includes setting up a Wagmi config and using a private key account with the useSendTransaction hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/viem.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { http, createConfig, useSendTransaction } from 'wagmi' \nimport { base, mainnet, optimism, zora } from 'wagmi/chains' \nimport { parseEther } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nexport const config = createConfig({ \n  chains: [base, mainnet, optimism, zora], \n  transports: { \n    [base.id]: http(), \n    [mainnet.id]: http(), \n    [optimism.id]: http(), \n    [zora.id]: http(), \n  }, \n}) \n\nconst account = privateKeyToAccount('0x...')\n\nfunction Example() {\n  const { data: hash } = useSendTransaction({\n    account,\n    to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    value: parseEther('0.001')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Wagmi Configuration in TypeScript\nDESCRIPTION: Example of creating a Wagmi configuration using createConfig, setting up chains and connectors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { injected } from 'wagmi/connectors'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [injected()],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWriteContract in React Component\nDESCRIPTION: Demonstrates how to use the useWriteContract hook in a React component to execute a transferFrom function on an ERC20 contract. Shows button implementation with contract interaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContract.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWriteContract } from 'wagmi'\nimport { abi } from './abi'\n\nfunction App() {\n  const { writeContract } = useWriteContract()\n\n  return (\n    <button \n      onClick={() => \n        writeContract({ \n          abi,\n          address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n          functionName: 'transferFrom',\n          args: [\n            '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n            '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n            123n,\n          ],\n       })\n      }\n    >\n      Transfer\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useToken Hook Usage\nDESCRIPTION: Example showing basic implementation of useToken hook to fetch token information for a specific address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useToken } from 'wagmi'\n\nfunction App() {\n  const result = useToken({\n    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring wagmi with custom Transport\nDESCRIPTION: Shows how to set up a wagmi configuration using the custom Transport with a custom RPC implementation. This connects to a JSON-RPC API via a customRpc implementation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createConfig, \n  custom // [!code hl]\n} from '{{packageName}}'\nimport { mainnet } from '{{packageName}}/chains'\nimport { customRpc } from './rpc'\n\nexport const config = createConfig({\n  chains: [mainnet],\n  connectors: [injected()],\n  transports: {\n    [mainnet.id]: custom({ // [!code hl]\n      async request({ method, params }) { // [!code hl]\n        const response = await customRpc.request(method, params) // [!code hl]\n        return response // [!code hl]\n      } // [!code hl]\n    }) // [!code hl]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Connect Wallet Components in Vue App\nDESCRIPTION: This snippet demonstrates how to integrate the Connect and Account components into the main App component. It conditionally renders either the Account or Connect component based on the connection status.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/connect-wallet.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useAccount } from '@wagmi/vue';\nimport Account from './Account.vue';\nimport Connect from './Connect.vue';\n\nconst { isConnected } = useAccount();\n</script>\n\n<template>\n  <Account v-if=\"isConnected\" />\n  <Connect v-else />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using watchBlockNumber Action in Vue Component\nDESCRIPTION: This snippet demonstrates how to use the watchBlockNumber action from Wagmi Core inside a Vue component. It shows how to properly set up a watcher for block number changes with proper cleanup when the component is unmounted.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/actions.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { watchEffect } from 'vue'\nimport { useConfig } from '@wagmi/vue'\nimport { watchBlockNumber } from '@wagmi/vue/actions'\n\nconst config = useConfig()\n\nwatchEffect((onCleanup) => {\n  const unwatch = watchBlockNumber(config, {\n    onBlockNumber(blockNumber) {\n      console.log('Block number changed!', blockNumber)\n    },\n  })\n\n  onCleanup(unwatch)\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Converting Viem Client to Ethers Provider (v6)\nDESCRIPTION: Implementation of utility functions to convert a Viem client to an Ethers.js v6 provider. Includes optimized handling of fallback providers and a React hook wrapper.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FallbackProvider, JsonRpcProvider } from 'ethers'\nimport { useMemo } from 'react'\nimport type { Chain, Client, Transport } from 'viem'\nimport { type Config, useClient } from 'wagmi'\n\nexport function clientToProvider(client: Client<Transport, Chain>) {\n  const { chain, transport } = client\n  const network = {\n    chainId: chain.id,\n    name: chain.name,\n    ensAddress: chain.contracts?.ensRegistry?.address,\n  }\n  if (transport.type === 'fallback') {\n    const providers = (transport.transports as ReturnType<Transport>[]).map(\n      ({ value }) => new JsonRpcProvider(value?.url, network),\n    )\n    if (providers.length === 1) return providers[0]\n    return new FallbackProvider(providers)\n  }\n  return new JsonRpcProvider(transport.url, network)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Viem Client with getClient Method in wagmi\nDESCRIPTION: Demonstrates how to create a new Viem Client object using the config.getClient method. This allows specifying a chainId to get a client for a specific blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config'\n\nconst client = config.getClient({ chainId: 1 })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForTransactionReceipt in a React Component\nDESCRIPTION: Demonstrates how to use the useWaitForTransactionReceipt hook in a React component to wait for a transaction receipt.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWaitForTransactionReceipt } from 'wagmi'\n\nfunction App() {\n  const result = useWaitForTransactionReceipt({\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a wagmi configuration with cookie storage\nDESCRIPTION: Shows how to set up a wagmi configuration using cookieStorage, which is necessary for the cookieToInitialState function to work properly.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/cookieToInitialState.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createConfig, \n  http, \n  cookieStorage,\n  createStorage\n} from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  ssr: true,\n  storage: createStorage({ \n    storage: cookieStorage,\n  }), \n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: useCall with GasPrice Parameter\nDESCRIPTION: Illustrates the usage of the `gasPrice` parameter within the `useCall` hook to specify the price (in wei) to pay per gas. The `gasPrice` parameter accepts a `bigint | undefined` value and only applies to Legacy Transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    gasPrice: parseGwei('20'), // [!code focus]\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSendTransaction in a Vue Component\nDESCRIPTION: Demonstrates how to use the useSendTransaction composable in a Vue component to send a transaction with a specified amount of Ether to a target address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSendTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSendTransaction } from '@wagmi/vue'\nimport { parseEther } from 'viem'\n\nconst { sendTransaction } = useSendTransaction()\n</script>\n\n<template>\n  <button\n    @click=\"sendTransaction({\n      to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      value: parseEther('0.01')\n    })\"\n  >\n    Send transaction\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useWatchContractEvent in a React Component\nDESCRIPTION: Demonstrates how to use the useWatchContractEvent hook in a React component to watch for Transfer events on a specific contract address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchContractEvent.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchContractEvent } from 'wagmi'\nimport { abi } from './abi'\n\nfunction App() {\n  useWatchContractEvent({\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    abi,\n    eventName: 'Transfer',\n    onLogs(logs) {\n      console.log('New logs!', logs)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using onError Callback with watchBlocks\nDESCRIPTION: Demonstrates how to implement error handling with the onError callback function, which is triggered when there are issues fetching block data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  onBlock(block) { \n    console.log('Block changed!', block) \n  }, \n  onError(error) { // [!code focus]\n    console.error('Block error', error) // [!code focus]\n  }, // [!code focus]\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using watchConnectors to subscribe to connector changes\nDESCRIPTION: Demonstrates how to use the watchConnectors function to subscribe to changes in connectors. It includes importing the function, using a config object, and defining an onChange callback.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnectors.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchConnectors } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchConnectors(config, {\n  onChange(connectors) {\n    console.log('Connectors changed!', connectors)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Vue Component Implementation of Typed Data Signing\nDESCRIPTION: Complete Vue component example showing how to implement typed data signing with useSignTypedData, including structured type definitions and message formatting\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignTypedData.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSignTypedData } from '@wagmi/vue'\n\nconst { signTypedData } = useSignTypedData()\n</script>\n\n<template>\n  <button\n    @click=\"signTypedData({\n      types: {\n        Person: [\n          { name: 'name', type: 'string' },\n          { name: 'wallet', type: 'address' },\n        ],\n        Mail: [\n          { name: 'from', type: 'Person' },\n          { name: 'to', type: 'Person' },\n          { name: 'contents', type: 'string' },\n        ],\n      },\n      primaryType: 'Mail',\n      message: {\n        from: {\n          name: 'Cow',\n          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n        },\n        to: {\n          name: 'Bob',\n          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n        },\n        contents: 'Hello, Bob!',\n      },\n    })\"\n  >\n    Sign message\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useAccount with Config Parameter\nDESCRIPTION: Demonstrates how to use the `useAccount` hook with a `config` parameter. This allows specifying a custom `Config` object instead of relying on the `WagmiProvider` context. The code showcases importing and using a custom config object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccount.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccount } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const account = useAccount({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Ethers Signer Adapter\nDESCRIPTION: Example showing how to import and use the getEthersSigner function in a component. This demonstrates the practical application of the signer adapter in a Wagmi project.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEthersSigner } from './ethers'\nimport { config } from './config'\n\nfunction example() {\n  const provider = getEthersSigner(config)\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using prepareWriteContract with writeContract in TypeScript\nDESCRIPTION: Example demonstrating how to use the prepareWriteContract hook to prepare parameters for a contract write transaction. This prepares the necessary configuration and returns it to be passed to writeContract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareWriteContract, writeContract } from \"@wagmi/core\";\n\nconst config = await prepareWriteContract({\n  addressOrName: \"0x...\",\n  contractInterface: wagmiAbi,\n  functionName: \"mint\",\n});\nconst result = await writeContract(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with Chains and Connectors\nDESCRIPTION: Creates and exports a wagmi configuration with specified chains (mainnet and base) and wallet connectors (injected, WalletConnect, MetaMask, and Safe). Defines HTTP transport for each chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { http, createConfig } from 'wagmi'\nimport { base, mainnet, optimism } from 'wagmi/chains'\nimport { injected, metaMask, safe, walletConnect } from 'wagmi/connectors'\n\nconst projectId = '<WALLETCONNECT_PROJECT_ID>'\n\nexport const config = createConfig({\n  chains: [mainnet, base],\n  connectors: [\n    injected(),\n    walletConnect({ projectId }),\n    metaMask(),\n    safe(),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [base.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with chainId\nDESCRIPTION: Demonstrates how to specify a chainId when sending a transaction to validate against a specific network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  chainId: mainnet.id,\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: State Interface Definition in wagmi\nDESCRIPTION: Defines the State interface used by the Config object, detailing properties like chainId, connections, current connection, and connection status.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type State } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Async Wagmi CLI Configuration\nDESCRIPTION: Demonstrates how to create an asynchronous Wagmi CLI configuration using an async function export, useful for resolving external resources.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig(async () => {\n  const data = await asyncFunction()\n  return {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring contracts Parameter in writeContracts\nDESCRIPTION: Shows how to configure the contracts parameter with multiple contract function calls, including addresses, ABIs, function names, and arguments.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\nimport { writeContracts } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n\nconst id = await writeContracts(config, {\n  contracts: [ \n    { \n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \n      abi, \n      functionName: 'approve', \n      args: [ \n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n        100n \n      ], \n    }, \n    { \n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \n      abi, \n      functionName: 'transferFrom', \n      args: [ \n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n        '0x0000000000000000000000000000000000000000', \n        100n \n      ], \n    }, \n  ], \n})\n```\n\n----------------------------------------\n\nTITLE: Basic WalletConnect Configuration\nDESCRIPTION: Demonstrates how to set up a basic Wagmi configuration with WalletConnect, including chain setup and HTTP transport.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    walletConnect({\n      projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n    }),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi CLI with Actions Plugin\nDESCRIPTION: Demonstrates how to use the actions plugin in the Wagmi CLI configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/actions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { actions } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    actions(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Fee Per Gas for EIP-1559 Transaction\nDESCRIPTION: Demonstrates setting the maximum fee per gas for a contract simulation using Wagmi's simulateContract method. Applies specifically to EIP-1559 transactions with gas price configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  maxFeePerGas: parseGwei('20'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Read Operation\nDESCRIPTION: Example demonstrating basic usage of readContract to fetch totalSupply from a contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await readContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'totalSupply',\n})\n```\n\n----------------------------------------\n\nTITLE: Using getAccount Function with Configuration\nDESCRIPTION: This example demonstrates how to use the getAccount function with a configuration object to retrieve the current account information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount } from '@wagmi/core'\nimport { config } from './config'\n\nconst account = getAccount(config)\n```\n\n----------------------------------------\n\nTITLE: useBalance with config parameter\nDESCRIPTION: This snippet demonstrates how to use the `useBalance` hook with the `config` parameter.  The `config` parameter specifies a custom `Config` object to use instead of the one from the `WagmiProvider`.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBalance } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useBalance({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Const-Asserted ERC721 ABI Example\nDESCRIPTION: Example of a const-asserted ERC721 ABI definition for type-safe contract interactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst erc721Abi = [\n  {\n    name: 'balanceOf',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'address', name: 'owner' }],\n    outputs: [{ type: 'uint256' }],\n  },\n  {\n    name: 'isApprovedForAll',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { type: 'address', name: 'owner' },\n      { type: 'address', name: 'operator' },\n    ],\n    outputs: [{ type: 'bool' }],\n  },\n  {\n    name: 'getApproved',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'uint256', name: 'tokenId' }],\n    outputs: [{ type: 'address' }],\n  },\n  {\n    name: 'ownerOf',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'uint256', name: 'tokenId' }],\n    outputs: [{ type: 'address' }],\n  },\n  {\n    name: 'tokenURI',\n    type: 'function',\n    stateMutability: 'pure',\n    inputs: [{ type: 'uint256', name: 'tokenId' }],\n    outputs: [{ type: 'string' }],\n  },\n] as const\n```\n\n----------------------------------------\n\nTITLE: Basic Coinbase Wallet Configuration\nDESCRIPTION: Demonstrates how to configure wagmi with Coinbase Wallet connector including chain setup and transport configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\nimport { coinbaseWallet } from '{{connectorsPackageName}}'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [coinbaseWallet()],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useReadContract with Custom Account\nDESCRIPTION: Demonstrates how to specify a custom account to use when calling the contract function (sets msg.sender).\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'balanceOf',\n  args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],\n  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useWatchPendingTransactions Hook in React Component\nDESCRIPTION: Demonstrates how to use the useWatchPendingTransactions hook in a React component to watch for new pending transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchPendingTransactions } from 'wagmi'\n\nfunction App() {\n  useWatchPendingTransactions({\n    onTransactions(transactions) {\n      console.log('New transactions!', transactions)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from useBalance with Token to useReadContracts (TypeScript)\nDESCRIPTION: Shows how to replace the deprecated useBalance hook with token parameter to useReadContracts for ERC20 token balances in Wagmi v2.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBalance } from 'wagmi' // [!code --]\nimport { useReadContracts } from 'wagmi' // [!code ++]\nimport { erc20Abi } from 'viem' // [!code ++]\n\nconst result = useBalance({ // [!code --]\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48', // [!code --]\n  token: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code --]\n}) // [!code --]\nconst result = useReadContracts({ // [!code ++]\n  allowFailure: false, // [!code ++]\n  contracts: [ // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'balanceOf', // [!code ++]\n      args: ['0x4557B18E779944BFE9d78A672452331C186a9f48'], // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'decimals', // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'symbol', // [!code ++]\n    }, // [!code ++]\n  ] // [!code ++]\n}) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Value Parameter\nDESCRIPTION: Illustrates how to use the `value` parameter in the `useEstimateGas` hook to set the amount of wei sent in a transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B', \n    value: parseEther('0.01'), // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useWatchBlockNumber in Vue Component\nDESCRIPTION: Demonstrates how to use the useWatchBlockNumber hook in a Vue component setup. It logs the block number changes to the console.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchBlockNumber.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWatchBlockNumber } from '@wagmi/vue'\n\nuseWatchBlockNumber({\n  onBlockNumber(blockNumber) {\n    console.log('Block number changed!', blockNumber)\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with type parameter\nDESCRIPTION: Demonstrates how to specify the transaction type when using sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  type: 'eip1559',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Viem Client setup (without Wagmi)\nDESCRIPTION: This snippet showcases the manual setup of Viem Clients for multiple chains without using Wagmi, highlighting the verbosity and boilerplate involved. This serves as a comparison to demonstrate the benefits of using Wagmi for multi-chain support.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/viem.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Manually set up Viem Clients without wagmi. Don't do this, it's only here \n// to demonstrate the amount of boilerplate required.\n\nimport { createPublicClient, createWalletClient, http } from 'viem'\nimport { base, mainnet, optimism, zora } from 'viem/chains'\n\nconst publicClient = {\n  base: createPublicClient({\n    chain: base,\n    transport: http()\n  }),\n  mainnet: createPublicClient({\n    chain: mainnet,\n    transport: http()\n  }),\n  optimism: createPublicClient({\n    chain: optimism,\n    transport: http()\n  }),\n  zora: createPublicClient({\n    chain: zora,\n    transport: http()\n  })\n} as const\n\nconst walletClient = {\n  base: createWalletClient({\n    chain: base,\n    transport: custom(window.ethereum)\n  }),\n  mainnet: createWalletClient({\n    chain: mainnet,\n    transport: custom(window.ethereum)\n  }),\n  optimism: createWalletClient({\n    chain: optimism,\n    transport: custom(window.ethereum)\n  }),\n  zora: createWalletClient({\n    chain: zora,\n    transport: custom(window.ethereum)\n  })\n} as const\n\nconst blockNumber = await publicClient.mainnet.getBlockNumber()\nconst hash = await walletClient.mainnet.sendTransaction(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Importing useChainId Hook in Vue.js/TypeScript\nDESCRIPTION: Demonstrates how to import and use the useChainId hook in a Vue.js component. This hook returns the current chain ID from the Wagmi configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChainId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChainId } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Invalidating Query Data After User Interaction in React with wagmi\nDESCRIPTION: Demonstrates how to extract a queryKey from useBalance hook and invalidate it after user interaction, causing all rendered balance queries to refetch. This is useful for refreshing balance data after transactions or state changes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBalance } from 'wagmi'\n\nfunction App() {\n  // 1. Extract `queryKey` from the useBalance Hook. \n  const { queryKey } = useBalance() \n\n  return (\n    <button\n      onClick={async () => {\n        // 2. Invalidate the query when the user clicks \"Invalidate\". \n        await queryClient.invalidateQueries({ queryKey }) \n      }}\n    >\n      Invalidate\n    </button>\n  )\n}\n\nfunction Example() {\n  // 3. Other `useBalance` Hooks in your rendered React tree will be refetched! \n  const { data: balance } = useBalance() \n\n  return <div>{balance}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Contract for Wagmi Integration\nDESCRIPTION: Configuration for the Wagmi Example token contract, including the contract address and ABI definition for the balanceOf and totalSupply functions. This configuration is required for useReadContract to interact with the contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/read-from-contract.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiContractConfig = {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: [\n    {\n      type: 'function',\n      name: 'balanceOf',\n      stateMutability: 'view',\n      inputs: [{ name: 'account', type: 'address' }],\n      outputs: [{ type: 'uint256' }],\n    },\n    {\n      type: 'function',\n      name: 'totalSupply',\n      stateMutability: 'view',\n      inputs: [],\n      outputs: [{ name: 'supply', type: 'uint256' }],\n    },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of createConfig with Chains and Transports\nDESCRIPTION: Demonstrates how to create a Wagmi configuration with multiple chains and their associated HTTP transports.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Config State with setState Method in wagmi\nDESCRIPTION: Shows how to update the Config object's internal state using the setState method. This example demonstrates updating the chainId conditionally based on the current connection status.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mainnet } from '{{packageName}}/chains'\nimport { config } from './config'\n\nconfig.setState((x) => ({\n  ...x,\n  chainId: x.current ? x.chainId : mainnet.id,\n}))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using prepareSendTransaction with sendTransaction in TypeScript\nDESCRIPTION: Example showing how to use the new prepareSendTransaction hook to prepare transaction parameters before sending a transaction. This prepares the required parameters and returns a config to be passed to sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareSendTransaction, sendTransaction } from \"@wagmi/core\";\n\nconst config = await prepareSendTransaction({\n  request: {\n    to: \"moxey.eth\",\n    value: parseEther(\"1\"),\n  },\n});\nconst result = await sendTransaction(config);\n```\n\n----------------------------------------\n\nTITLE: Handling Loading and Error States in useReadContract\nDESCRIPTION: A Vue component that demonstrates how to handle loading and error states when reading contract data. It shows proper error handling and user feedback during contract data retrieval with isPending and error properties.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/read-from-contract.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from 'wagmi'\n\nconst { \n  data: balance,\n  error, \n  isPending \n} = useReadContract({\n  ...wagmiContractConfig,\n  functionName: 'balanceOf',\n  args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],\n})\n</script>\n\n<template>\n  <div v-if=\"isPending\">Loading...</div> \n\n  <div v-else-if=\"error\"> \n    Error: {{ (error as BaseError).shortMessage || error.message }} \n  </div> \n\n  <div v-else>Balance: {{ balance?.toString() }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Form Component Setup\nDESCRIPTION: Initial setup of a Vue component with a basic form structure for minting NFTs.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n</script>\n \n<template>\n  <form>\n    <input name=\"tokenId\" placeholder=\"69420\" required />\n    <button type=\"submit\">Mint</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: useCall with Data Parameter\nDESCRIPTION: Illustrates the usage of the `data` parameter within the `useCall` hook to specify the hashed method call with encoded arguments. The `data` parameter accepts a `0x${string} | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', // [!code focus]\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Cookie Storage for Wagmi in Vue\nDESCRIPTION: This code snippet shows how to set up cookie storage in the Wagmi configuration for Vue. It imports necessary functions, enables SSR, and configures cookie storage to persist data between server and client.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/ssr.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { \n  createConfig, \n  http, \n  cookieStorage, // [!code ++]\n  createStorage // [!code ++]\n} from '@wagmi/vue'\nimport { mainnet, sepolia } from '@wagmi/vue/chains'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  ssr: true,\n  storage: createStorage({  // [!code ++]\n    storage: cookieStorage, // [!code ++]\n  }),  // [!code ++]\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useSimulateContract in Vue\nDESCRIPTION: This snippet shows how to import the useSimulateContract composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSimulateContract } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Using Config Parameter in useProof Hook\nDESCRIPTION: This snippet shows how to apply a configuration object to the useProof hook. The 'config' parameter allows overriding the default setup with a user-defined configuration, offering flexible library operation adjustments.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useProof } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useProof({\n    config, // [!code focus]\n    address: '0x4200000000000000000000000000000000000016',\n    storageKeys: [\n      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n    ],\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Loading State to SendTransaction Component\nDESCRIPTION: This snippet adds a loading state to the SendTransaction component to improve user experience while waiting for transaction confirmation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/send-transaction.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { useSendTransaction } from 'wagmi'\nimport { parseEther } from 'viem'\n\nexport function SendTransaction() {\n  const {\n    data: hash,\n    isPending,\n    sendTransaction\n  } = useSendTransaction()\n\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n      <input name=\"value\" placeholder=\"0.05\" required />\n      <button\n        disabled={isPending}\n        type=\"submit\"\n      >\n        {isPending ? 'Confirming...' : 'Send'}\n      </button>\n      {hash && <div>Transaction Hash: {hash}</div>}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Private Key & Mnemonic Accounts with Wagmi\nDESCRIPTION: This snippet demonstrates how to use Viem's Private Key & Mnemonic Accounts with Wagmi by explicitly passing the account via the `account` argument on Wagmi Actions. It shows how to create and use a private key account for sending transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/viem.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { useConfig } from '@wagmi/vue'\nimport { sendTransactionMutationOptions, useMutation } from '@wagmi/vue/query'\n\nconst config = useConfig()\nconst { mutate: sendTransaction } = useMutation(\n  sendTransactionMutationOptions(config)\n)\n\nconst account = privateKeyToAccount('0x...') // [!code hl]\n\nsendTransaction({\n  account, // [!code hl]\n  to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n  value: parseEther('0.001')\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Migrating from getBalance with token parameter to readContracts in Wagmi\nDESCRIPTION: Shows how to replace the deprecated 'getBalance' with 'token' parameter to using 'readContracts' for ERC20 token balances. The new approach calls multiple contract functions (balanceOf, decimals, symbol) to retrieve complete token balance information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBalance } from '@wagmi/core' // [!code --]\nimport { readContracts } from '@wagmi/core' // [!code ++]\nimport { erc20Abi } from 'viem' // [!code ++]\nimport { config } from './config' // [!code ++]\n\nconst result = await getBalance(config, { // [!code --]\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48', // [!code --]\n  token: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code --]\n}) // [!code --]\nconst result = await readContracts(config, { // [!code ++]\n  allowFailure: false, // [!code ++]\n  contracts: [ // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'balanceOf', // [!code ++]\n      args: ['0x4557B18E779944BFE9d78A672452331C186a9f48'], // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'decimals', // [!code ++]\n    }, // [!code ++]\n    { // [!code ++]\n      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code ++]\n      abi: erc20Abi, // [!code ++]\n      functionName: 'symbol', // [!code ++]\n    }, // [!code ++]\n  ] // [!code ++]\n}) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Getting account and reading contract with config parameter\nDESCRIPTION: Demonstrates the updated approach for retrieving account information and reading contract balances, emphasizing the new requirement to pass a config object. This change promotes better code clarity and allows multiple config objects in a project.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount, readContract } from '@wagmi/core'\nimport { parseAbi } from 'viem'\nimport { config } from './config' // [!code ++]\n\nconst account = getAccount() // [!code --]\nconst account = getAccount(config) // [!code ++]\n\nconst balanceOf = readContract({ // [!code --]\nconst balanceOf = readContract(config, { // [!code ++]\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n  functionName: 'balanceOf',\n  args: ['0xd2135CfB216b74109775236E36d4b433F1DF507B'],\n})\n```\n\n----------------------------------------\n\nTITLE: Form Handler Implementation for NFT Minting\nDESCRIPTION: Adding form submission handling to capture the token ID input value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\n\nexport function MintNFT() {\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const tokenId = formData.get('tokenId') as string\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"tokenId\" placeholder=\"69420\" required />\n      <button type=\"submit\">Mint</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Narrowing Return Types with ChainId Parameter\nDESCRIPTION: Demonstrates how to narrow return types for chain-specific properties using the chainId parameter in transaction receipt handling.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/chain-properties.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\nimport { zkSync } from '@wagmi/vue/chains'\n\nconst { data } = useWaitForTransactionReceipt({\n  chainId: zkSync.id,\n  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',\n})\n\ndata?.logs\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe Connector with wagmi\nDESCRIPTION: Demonstrates how to set up wagmi configuration with Safe connector, including chain setup and HTTP transport configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/safe.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\nimport { safe } from '{{connectorsPackageName}}'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [safe()],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Available Connectors in Vue\nDESCRIPTION: Demonstrates how to use the connectors array from useConnect to render a list of available wallet connectors as buttons.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnect } from '@wagmi/vue'\n\nconst { connect, connectors } = useConnect()\n</script>\n\n<template>\n  <div>\n    <button v-for=\"connector in connectors\" :key=\"connector.id\" @click=\"connect({ connector })\">\n      {{ connector.name }}\n    </button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring EIP-1559 Transaction Fees\nDESCRIPTION: Demonstrates setting maxFeePerGas and maxPriorityFeePerGas for EIP-1559 transactions. Shows how to configure both the total fee and priority fee in Gwei.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSimulateContract } from 'wagmi'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSimulateContract({\n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'transferFrom',\n    args: [\n      '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n      123n,\n    ],\n    maxFeePerGas: parseGwei('20'),\n    maxPriorityFeePerGas: parseGwei('2'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useFeeHistory with config parameter\nDESCRIPTION: This snippet showcases the usage of the `config` parameter in the `useFeeHistory` hook, allowing a custom Wagmi `Config` to be used.  This enables overriding the default configuration and provides more control over how the hook fetches data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFeeHistory } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useFeeHistory({\n    blockCount: 4,\n    rewardPercentiles: [25, 75]\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Contract ABI Configuration\nDESCRIPTION: This snippet illustrates how to configure the ABI (Application Binary Interface) for a contract within the `useReadContracts` hook. The ABI is crucial for type inference and ensuring safety when interacting with the contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI, // [!code hl]\n        functionName: 'getChest',\n        args: [69],\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching balance with block tag\nDESCRIPTION: Demonstrates how to use the getBalance function with a specific block tag to fetch the balance at that block state.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBalance } from '@wagmi/core'\nimport { config } from './config'\n\nconst balance = getBalance(config, {\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  blockTag: 'latest',\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching ENS Name with Block Tag in Vue.js\nDESCRIPTION: This example demonstrates using the useEnsName composable with a block tag to fetch the ENS name at a specific block state.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsName } from '@wagmi/vue'\n\nconst result = useEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  blockTag: 'latest',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Multiple Config Setup\nDESCRIPTION: Example showing how to set up multiple Wagmi configurations with different chains and transports.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, optimism } from 'wagmi/chains'\n\nexport const configA = createConfig({\n  chains: [mainnet],\n  transports: {\n    [mainnet.id]: http(),\n  },\n})\n\nexport const configB = createConfig({\n  chains: [optimism],\n  transports: {\n    [optimism.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Wagmi Hooks in a React Component\nDESCRIPTION: Example of using Wagmi hooks (useAccount and useEnsName) in a React component to fetch and display ENS name.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccount, useEnsName } from 'wagmi'\n\nexport function Profile() {\n  const { address } = useAccount()\n  const { data, error, status } = useEnsName({ address })\n  if (status === 'pending') return <div>Loading ENS name</div>\n  if (status === 'error')\n    return <div>Error fetching ENS name: {error.message}</div>\n  return <div>ENS name: {data}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using useWatchContractEvent in a Vue Component\nDESCRIPTION: Demonstrates how to set up event watching for a contract in a Vue component. This example listens for 'Transfer' events from a specific contract address and logs them to the console.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchContractEvent.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWatchContractEvent } from '@wagmi/vue'\nimport { abi } from './abi'\n\nuseWatchContractEvent({\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  abi,\n  eventName: 'Transfer',\n  onLogs(logs) {\n    console.log('New logs!', logs)\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Const-Asserted ABI with TypeScript\nDESCRIPTION: Demonstrates the use of const assertions on ABIs to fortify type safety in contract reading functionality. By asserting ABIs as const, it improves the reliability of type inference in TypeScript. This example involves configuring the ABI and using it to call readContract with ensured type integrity.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createConfig, http } from '@wagmi/core'\nimport { mainnet, sepolia } from '@wagmi/core/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\nconst erc721Abi = [\n  {\n    name: 'balanceOf',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'address', name: 'owner' }],\n    outputs: [{ type: 'uint256' }],\n  },\n  {\n    name: 'isApprovedForAll',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { type: 'address', name: 'owner' },\n      { type: 'address', name: 'operator' },\n    ],\n    outputs: [{ type: 'bool' }],\n  },\n  {\n    name: 'getApproved',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'uint256', name: 'tokenId' }],\n    outputs: [{ type: 'address' }],\n  },\n  {\n    name: 'ownerOf',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'uint256', name: 'tokenId' }],\n    outputs: [{ type: 'address' }],\n  },\n  {\n    name: 'tokenURI',\n    type: 'function',\n    stateMutability: 'pure',\n    inputs: [{ type: 'uint256', name: 'tokenId' }],\n    outputs: [{ type: 'string' }],\n  },\n] as const\n// ---cut---\nimport { readContract } from '@wagmi/core'\n\nconst result = await readContract(config, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: erc721Abi,\n  functionName: 'balanceOf',\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n})\n\nresult\n```\n\n----------------------------------------\n\nTITLE: Utilizing defineConfig for Wagmi CLI Intellisense\nDESCRIPTION: Shows how to use the defineConfig utility to provide intellisense for Wagmi CLI configuration without JSDoc annotations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\n\nexport default defineConfig({\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useStorageAt Hook in TypeScript\nDESCRIPTION: Shows how to import the useStorageAt hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useStorageAt } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with Mock Connector\nDESCRIPTION: Demonstrates how to set up a Wagmi configuration using the mock connector with specified accounts and chain settings.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/mock.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\nimport { mock } from '{{connectorsPackageName}}'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    mock({\n      accounts: [\n        '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n        '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n        '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',\n      ],\n    }),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Connector Configuration with configureChains\nDESCRIPTION: This shows how to refactor connectors configuration to use configureChains. The update removes manual RPC URL derivation since wagmi now handles RPC URLs internally through the configureChains function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  chain,\n+  configureChains,\n  createClient\n} from 'wagmi';\n\n+import { publicProvider } from 'wagmi/providers/public'\n\nimport { CoinbaseWalletConnector } from 'wagmi/connectors/coinbaseWallet'\nimport { InjectedConnector } from 'wagmi/connectors/injected'\nimport { MetaMaskConnector } from 'wagmi/connectors/metaMask'\nimport { WalletConnectConnector } from 'wagmi/connectors/walletConnect'\n\n+const { chains } = configureChains(\n+  [chain.mainnet],\n+  [publicProvider()]\n+);\n\nconst client = createClient({\n-  connectors({ chainId }) {\n-    const chain = chains.find((x) => x.id === chainId) ?? defaultChain\n-    const rpcUrl = chain.rpcUrls.alchemy\n-      ? `${chain.rpcUrls.alchemy}/${alchemyId}`\n-      : chain.rpcUrls.default\n-    return [\n+  connectors: [\n    new MetaMaskConnector({ chains }),\n    new CoinbaseWalletConnector({\n      chains,\n      options: {\n        appName: 'wagmi',\n-       chainId: chain.id,\n-       jsonRpcUrl: rpcUrl,\n      },\n    }),\n    new WalletConnectConnector({\n      chains,\n      options: {\n        qrcode: true,\n-       rpc: { [chain.id]: rpcUrl },\n      },\n    }),\n    new InjectedConnector({\n      chains,\n      options: { name: 'Injected' },\n    }),\n  ]\n-  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useClient in a Vue Component\nDESCRIPTION: Demonstrates how to use the useClient composable within a Vue component's setup script.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useClient } from '@wagmi/vue'\n\nconst client = useClient()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Connected Chain Syncing for watchBlockNumber\nDESCRIPTION: Shows how to disable syncing with the connected chain when using watchBlockNumber.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlockNumber(config, {\n  onBlockNumber(blockNumber) {\n    console.log('Block number changed!', blockNumber)\n  },\n  syncConnectedChain: false,\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using useReadContracts hook in React\nDESCRIPTION: This example demonstrates how to use the `useReadContracts` hook to call multiple read methods on different contracts. It defines contract configurations with address, ABI, function name, and arguments, and then passes them to the hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nconst wagmigotchiContract = {\n  address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n  abi: wagmigotchiABI,\n} as const\nconst mlootContract = {\n  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n  abi: mlootABI,\n} as const\n\nfunction App() {\n  const result = useReadContracts({\n    contracts: [\n      {\n        ...wagmigotchiContract,\n        functionName: 'getAlive',\n      },\n      {\n        ...wagmigotchiContract,\n        functionName: 'getBoredom',\n      },\n      {\n        ...mlootContract,\n        functionName: 'getChest',\n        args: [69],\n      },\n      {\n        ...mlootContract,\n        functionName: 'getWaist',\n        args: [69],\n      },\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chain-Specific Parameters in simulateContract\nDESCRIPTION: This snippet demonstrates how to use chain-specific properties like Celo's feeCurrency when simulating a contract interaction. It imports the necessary functions from viem and wagmi/core, and uses a custom configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/chain-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { simulateContract } from '@wagmi/core'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n  feeCurrency: '0xâ€¦', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using useChainId Hook in a React Component\nDESCRIPTION: Demonstrates how to use the `useChainId` hook within a React component to access the current chain ID. The example defines a simple `App` component that calls `useChainId` and stores the returned chain ID in a variable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChainId.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChainId } from 'wagmi'\n\nfunction App() {\n  const chainId = useChainId()\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Chain Synchronization\nDESCRIPTION: Shows how to disable automatic synchronization of the chainId state with the current connection.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  syncConnectedChain: false, // [!code focus]\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useSimulateContract hook within a React component to simulate a contract interaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSimulateContract } from 'wagmi'\nimport { abi } from './abi'\n\nfunction App() {\n  const result = useSimulateContract({\n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'transferFrom',\n    args: [\n      '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n      123n,\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Polling Interval for watchBlockNumber\nDESCRIPTION: Demonstrates how to set a custom polling interval when using watchBlockNumber with polling.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlockNumber(config, {\n  onBlockNumber(blockNumber) { \n    console.log('Block number changed!', blockNumber) \n  }, \n  pollingInterval: 1_000,\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Error Handling Implementation for NFT Minting\nDESCRIPTION: Adding comprehensive error handling for transaction failures and user rejections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { \n  type BaseError,\n  useWaitForTransactionReceipt, \n  useWriteContract \n} from 'wagmi'\nimport { abi } from './abi'\n\nexport function MintNFT() {\n  const { \n    data: hash,\n    error,  \n    isPending, \n    writeContract \n  } = useWriteContract()\n\n  const { isLoading: isConfirming, isSuccess: isConfirmed } =\n    useWaitForTransactionReceipt({\n      hash,\n    })\n\n  async function submit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const formData = new FormData(e.target as HTMLFormElement)\n    const tokenId = formData.get('tokenId') as string\n    writeContract({\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'mint',\n      args: [BigInt(tokenId)],\n    })\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <input name=\"tokenId\" placeholder=\"69420\" required />\n      <button \n        disabled={isPending}\n        type=\"submit\"\n      >\n        {isPending ? 'Confirming...' : 'Mint'}\n      </button>\n      {hash && <div>Transaction Hash: {hash}</div>}\n      {isConfirming && <div>Waiting for confirmation...</div>}\n      {isConfirmed && <div>Transaction confirmed.</div>}\n      {error && (\n        <div>Error: {(error as BaseError).shortMessage || error.message}</div>\n      )}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useSimulateContract Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the useSimulateContract hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSimulateContract } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using onBlock Callback with watchBlocks\nDESCRIPTION: Shows the implementation of the onBlock callback function, which is triggered whenever a new block is detected and provides access to the block data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  onBlock(block) { // [!code focus]\n    console.log('Block changed!', block) // [!code focus]\n  }, // [!code focus]\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue App Entry Point with Wagmi Integration\nDESCRIPTION: Main Vue application component that handles wallet connection state and renders Account, Connect, and MintNft components conditionally based on connection status.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useAccount } from '@wagmi/vue';\nimport Account from './Account.vue';\nimport Connect from './Connect.vue';\nimport MintNft from './MintNft.vue';\n\nconst { isConnected } = useAccount();\n</script>\n\n<template>\n  <Account v-if=\"isConnected\" />\n  <Connect v-else />\n  <MintNft v-if=\"isConnected\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Connection Interface Definition in wagmi\nDESCRIPTION: Defines the Connection interface which represents a connection to an Ethereum provider, including properties like accounts, chainId, and the associated connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Connection } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Setting maxPriorityFeePerGas in Contract Write Operations with Wagmi in TypeScript\nDESCRIPTION: Example of using the maxPriorityFeePerGas parameter when writing to a contract with the @wagmi/core library. This parameter sets the max priority fee per gas in wei and only applies to EIP-1559 transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeContract } from '@wagmi/core'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await writeContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Updating createClient Configuration in TypeScript\nDESCRIPTION: The provider config option is now required on createClient. It is recommended to pass the provider given from configureChains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  createClient,\n+ defaultChains,\n+ configureChains\n} from 'wagmi'\n+import { publicProvider } from 'wagmi/providers/publicProvider'\n\n+const { provider } = configureChains(defaultChains, [\n+ publicProvider\n+])\n\nconst client = createClient({\n+ provider\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Event Watching with Arguments\nDESCRIPTION: Example demonstrating how to watch contract events with specific arguments and parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchContractEvent.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchContractEvent } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst unwatch = watchContractEvent(config, {\n  abi,\n  args: {\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  },\n  onLogs(logs) {\n    console.log('Logs changed!', logs)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using getFeeHistory in TypeScript\nDESCRIPTION: This example shows how to use the getFeeHistory function to fetch historical gas information. It includes the basic usage with blockCount and rewardPercentiles parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFeeHistory } from '@wagmi/core'\nimport { config } from './config'\n\nconst feeHistory = await getFeeHistory(config, {\n  blockCount: 4,\n  rewardPercentiles: [25, 75]\n})\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Const-Asserted ABI\nDESCRIPTION: Shows improved TypeScript type inference when using a const-asserted ABI definition with useReadContract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nconst abi = [\n  {\n    type: 'function',\n    name: 'balanceOf',\n    stateMutability: 'view',\n    inputs: [{ name: 'account', type: 'address' }],\n    outputs: [{ type: 'uint256' }],\n  },\n  {\n    type: 'function',\n    name: 'totalSupply',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [{ name: 'supply', type: 'uint256' }],\n  },\n] as const\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'balanceOf',\n  // ^?\n\n\n  args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],\n  // ^?\n})\n\nresult.data\n//     ^?\n```\n\n----------------------------------------\n\nTITLE: useCall with BlockTag Parameter\nDESCRIPTION: Illustrates the usage of the `blockTag` parameter within the `useCall` hook to specify the block tag to perform the call against. The `blockTag` parameter accepts a `'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    blockTag: 'safe', // [!code focus]\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing waitForTransactionReceipt from @wagmi/core\nDESCRIPTION: Shows how to import the waitForTransactionReceipt function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForTransactionReceipt } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Basic useEnsText Hook Usage with ENS Name and Twitter Key\nDESCRIPTION: Demonstrates basic usage of the useEnsText hook to fetch a Twitter handle associated with an ENS name. The example includes normalizing the ENS name using viem's normalize function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsText } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsText({\n    name: normalize('wevm.eth'),\n    key: 'com.twitter',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Metadata Configuration\nDESCRIPTION: Example of setting up metadata for the WalletConnect connection including app name, description, and URL.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nconst connector = walletConnect({\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n  metadata: {\n    name: 'Example',\n    description: 'Example website',\n    url: 'https://example.com',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWatchAsset Hook in React Component\nDESCRIPTION: Demonstrates implementation of useWatchAsset hook in a React component to add token tracking functionality. Shows how to configure the hook with token details like address, symbol, and decimals.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchAsset.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchAsset } from 'wagmi'\n\nfunction App() {\n  const { watchAsset } = useWatchAsset()\n\n  return (\n    <button\n      onClick={() => watchAsset({\n        type: 'ERC20',\n        options: {\n          address: '0x0000000000000000000000000000000000000000',\n          symbol: 'WAGMI',\n          decimals: 18,\n        },\n      })}\n    >\n      Watch asset\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating WagmiConfig to WagmiProvider (TypeScript/React)\nDESCRIPTION: Demonstrates how to update the WagmiConfig component to the new WagmiProvider in Wagmi v2 React applications.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WagmiConfig } from 'wagmi' // [!code --]\nimport { WagmiProvider } from 'wagmi' // [!code ++]\nimport { config } from './config'\n\nfunction App() {\n  return (\n    <WagmiConfig config={config}> // [!code --]\n    <WagmiProvider config={config}> // [!code ++]\n      {/** ... */}\n    </WagmiProvider> // [!code ++]\n    </WagmiConfig> // [!code --]\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Etherscan Plugin in Wagmi CLI\nDESCRIPTION: Demonstrates how to configure the Etherscan plugin in the Wagmi CLI configuration file. It includes setting the API key, chain ID, and specifying contracts to fetch ABIs for.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { etherscan } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    etherscan({\n      apiKey: process.env.ETHERSCAN_API_KEY,\n      chainId: 1,\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getBlockNumber from @wagmi/core\nDESCRIPTION: This snippet shows how to import the getBlockNumber action from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockNumber } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using useConnectors in a React component\nDESCRIPTION: Demonstrates how to use the useConnectors hook in a React component to access configured connectors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectors.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnectors } from 'wagmi'\n\nfunction App() {\n  const connectors = useConnectors()\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReconnect and Handling Connectors in React Component\nDESCRIPTION: This snippet explains how to access available connectors in conjunction with the `useReconnect` hook within a React component. It also shows how to trigger a reconnection with specific connectors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReconnect.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReconnect } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\nimport { useEffect } from 'react'\n\nfunction App() {\n  const { reconnect, connectors } = useReconnect()\n\n  useEffect(() => {\n    reconnect({ connectors })\n  }, [])\n}\n```\n\n----------------------------------------\n\nTITLE: Using blockTag Parameter with watchBlocks\nDESCRIPTION: Demonstrates how to specify a block tag when watching for blocks, allowing monitoring of pending blocks instead of the default latest blocks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  blockTag: 'pending', // [!code focus]\n  onBlock(block) {\n    console.log('Block changed!', block)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using watchChainId Function\nDESCRIPTION: Demonstrates how to use watchChainId to subscribe to chain ID changes. The function accepts a config object and an options object with an onChange callback.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchChainId.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchChainId } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchChainId(config, {\n  onChange(chainId) {\n    console.log('Chain ID changed!', chainId)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Ethers Provider Adapter\nDESCRIPTION: Example showing how to import and use the getEthersProvider function in a component. This demonstrates the practical application of the adapter in a Wagmi project.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEthersProvider } from './ethers'\nimport { config } from './config'\n\nfunction example() {\n  const provider = getEthersProvider(config)\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cookie Storage in Wagmi Configuration (TypeScript)\nDESCRIPTION: This code sets up cookie storage in the Wagmi configuration to persist data between server and client. It uses the cookieStorage and createStorage functions from Wagmi.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ssr.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createConfig, \n  http, \n  cookieStorage,\n  createStorage\n} from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nexport function getConfig() {\n  return createConfig({\n    chains: [mainnet, sepolia],\n    ssr: true,\n    storage: createStorage({\n      storage: cookieStorage,\n    }),\n    transports: {\n      [mainnet.id]: http(),\n      [sepolia.id]: http(),\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBlockNumber in a Vue Component\nDESCRIPTION: Demonstrates how to use the useBlockNumber composable in a Vue component to fetch and display the current block number.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBlockNumber } from '@wagmi/vue'\n\nconst { data: blockNumber } = useBlockNumber()\n</script>\n\n<template>\n  Block Number: {{ blockNumber }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting maxFeePerGas in Contract Write Operations with Wagmi in TypeScript\nDESCRIPTION: Example of using the maxFeePerGas parameter when writing to a contract with the @wagmi/core library. This parameter sets the total fee per gas in wei, inclusive of maxPriorityFeePerGas, and only applies to EIP-1559 transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeContract } from '@wagmi/core'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await writeContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  maxFeePerGas: parseGwei('20'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Chains in createConfig\nDESCRIPTION: Demonstrates how to specify chains when creating a Wagmi configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia], // [!code focus]\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in Wagmi CLI\nDESCRIPTION: Example showing how to configure plugins in Wagmi CLI, using etherscan for fetching ABIs and react for generating React hooks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/options.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { etherscan, react } from '@wagmi/cli/plugins'\n\nexport default {\n  out: 'src/generated.js',\n  plugins: [\n    etherscan({\n      apiKey: process.env.ETHERSCAN_API_KEY,\n      chainId: 5,\n      contracts: [\n        {\n          name: 'EnsRegistry',\n          address: {\n            1: '0x314159265dd8dbb310642f98f50c066173c1259b',\n            5: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n          },\n        },\n      ],\n    }),\n    react(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring wagmi with Injected Connector\nDESCRIPTION: Demonstrates how to set up wagmi configuration with the injected connector, including chain configurations and HTTP transport setup.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/injected.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\nimport { injected } from '{{connectorsPackageName}}'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [injected()],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing simulateContract from @wagmi/core\nDESCRIPTION: Shows how to import the simulateContract function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Specifying Function Name in useReadContract\nDESCRIPTION: Demonstrates how to specify which function to call on the smart contract using the functionName parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'balanceOf', // [!code focus]\n  args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Converting Viem Client to Ethers v6 Signer\nDESCRIPTION: Implementation to convert a Viem client with an account to an Ethers.js v6 signer. Creates a BrowserProvider from the transport and initializes a JsonRpcSigner with the account address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, getConnectorClient } from '@wagmi/core'\nimport { BrowserProvider, JsonRpcSigner } from 'ethers'\nimport type { Account, Chain, Client, Transport } from 'viem'\n\nexport function clientToSigner(client: Client<Transport, Chain, Account>) {\n  const { account, chain, transport } = client\n  const network = {\n    chainId: chain.id,\n    name: chain.name,\n    ensAddress: chain.contracts?.ensRegistry?.address,\n  }\n  const provider = new BrowserProvider(transport, network)\n  const signer = new JsonRpcSigner(provider, account.address)\n  return signer\n}\n\n/** Action to convert a viem Wallet Client to an ethers.js Signer. */\nexport async function getEthersSigner(\n  config: Config,\n  { chainId }: { chainId?: number } = {},\n) {\n  const client = await getConnectorClient(config, { chainId })\n  return clientToSigner(client)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Invalidation\nDESCRIPTION: Example of implementing query invalidation to watch and update user balance based on block number changes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueryClient } from '@tanstack/react-query'\nimport { useEffect } from 'react'\nimport { useBlockNumber, useBalance } from 'wagmi'\n\nfunction App() {\n  const queryClient = useQueryClient()\n  const { data: blockNumber } = useBlockNumber({ watch: true })\n  const { data: balance, queryKey } = useBalance()\n  \n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey })\n  }, [blockNumber])\n\n  return <div>{balance}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Contract without Constructor Args in React TypeScript\nDESCRIPTION: Demonstrates how to use the useDeployContract hook to deploy a contract without constructor arguments in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDeployContract } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { wagmiAbi } from './abi'\n\nfunction App() {\n  const { deployContract } = useDeployContract()\n\n  return (\n    <button\n      onClick={() =>\n        deployContract({\n          abi: wagmiAbi,\n          bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n        })\n      }\n    >\n      Deploy Contract\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Contract Data on New Blocks using useBlockNumber\nDESCRIPTION: This snippet shows how to use the useBlockNumber hook to refetch contract data when a new block is mined, ensuring the displayed data stays up-to-date.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/read-from-contract.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { useBlockNumber, useReadContract } from 'wagmi'\n\nfunction ReadContract() {\n  const { data: balance, refetch } = useReadContract({\n    ...wagmiContractConfig,\n    functionName: 'balanceOf',\n    args: ['0x03A71968491d55603FFe1b11A9e23eF013f75bCF'],\n  })\n  const { data: blockNumber } = useBlockNumber({ watch: true })\n\n  useEffect(() => {\n    // want to refetch every `n` block instead? use the modulo operator!\n    // if (blockNumber % 5 === 0) refetch() // refetch every 5 blocks\n    refetch()\n  }, [blockNumber])\n\n  return (\n    <div>Balance: {balance?.toString()}</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCapabilities in a React Component - TSX\nDESCRIPTION: This snippet shows how to use the useCapabilities hook within a React functional component. It calls the hook to fetch capabilities without any parameters, which returns the default capabilities for the user's connected wallet.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const result = useCapabilities()\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSignMessage Hook in React Component\nDESCRIPTION: Demonstrates how to use the useSignMessage hook in a React component to create a button for signing messages.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignMessage.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignMessage } from 'wagmi'\n\nfunction App() {\n  const { signMessage } = useSignMessage()\n\n  return (\n    <button onClick={() => signMessage({ message: 'hello world' })}>\n      Sign message\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Viem Wallet Actions with Wagmi\nDESCRIPTION: This snippet shows how to utilize Viem's `watchAsset` Action with a `useMutation` Composable to create custom wallet interaction functionality. It demonstrates the pattern for wallet-based actions that require a connection.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/viem.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// 1. Import modules. \nimport { useConnectorClient } from '@wagmi/vue' \nimport { useMutation } from '@wagmi/vue/query'\nimport { watchAsset } from 'viem/actions'\n\n// 2. Extract a Viem Client for the current active chain. \nconst { data: connectorClient } = useConnectorClient()\n\n// 3. Create a \"custom\" Mutation Composable that utilizes the Client. \nconst { mutate } = useMutation({\n  mutationFn: (asset) => watchAsset(connectorClient, asset)\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with gasPrice parameter\nDESCRIPTION: Demonstrates how to set the gas price for a legacy transaction using sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  gasPrice: parseGwei('20'),\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring maxPriorityFeePerGas for EIP-1559 Transactions\nDESCRIPTION: Demonstrates setting both maxFeePerGas and maxPriorityFeePerGas for EIP-1559 transactions when estimating gas.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic ENS Avatar Retrieval\nDESCRIPTION: Example showing basic usage of getEnsAvatar with ENS name normalization\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAvatar } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAvatar = await getEnsAvatar(config, {\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Read with Block Number\nDESCRIPTION: Example demonstrating how to read contract state at a specific block number.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await readContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'totalSupply',\n  blockNumber: 17829139n,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Token Information Retrieval\nDESCRIPTION: Basic example of using getToken to fetch information for a specific token address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getToken } from '@wagmi/core'\nimport { config } from './config'\n\nconst token = getToken(config, {\n  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n})\n```\n\n----------------------------------------\n\nTITLE: Using blockNumber Parameter with useEnsAddress\nDESCRIPTION: This example demonstrates how to specify a specific block number when fetching ENS address data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAddress({\n    blockNumber: 17829139n, \n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using capabilities Parameter with writeContracts\nDESCRIPTION: Demonstrates how to use the capabilities parameter to provide additional metadata for calls, such as specifying a paymaster service for gas abstraction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\nimport { writeContracts } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n\nconst id = await writeContracts(config, {\n  contracts: [\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'approve',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n        100n\n      ],\n    },\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'transferFrom',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        '0x0000000000000000000000000000000000000000',\n        100n\n      ],\n    },\n  ],\n  capabilities: { \n    paymasterService: { \n      url: 'https://...' \n    } \n  } \n})\n```\n\n----------------------------------------\n\nTITLE: Updating WagmiConfig Component in React/TypeScript\nDESCRIPTION: The client prop is now required on WagmiConfig. This change ensures that the client is properly configured before use.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  createClient,\n+ configureChains,\n+ defaultChains\n} from 'wagmi'\n+import { publicProvider } from 'wagmi/providers/public'\n\n+const { provider, webSocketProvider } = configureChains(defaultChains, [\n+ publicProvider(),\n+])\n\n+const client = createClient({\n+ provider,\n+ webSocketProvider,\n+})\n\nfunction App() {\n  return (\n    <WagmiConfig\n+     client={client}\n    >\n      <YourRoutes />\n    </WagmiConfig>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Contract Queries in Wagmi\nDESCRIPTION: Example showing how to conditionally enable a contract query based on dependencies using the query.enabled option. This prevents unnecessary queries when required parameters like an address are not yet available.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/read-from-contract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: balance } = useReadContract({\n  ...wagmiContractConfig,\n  functionName: 'balanceOf',\n  args: [address],\n  query: { \n    enabled: !!address, \n  }, \n})\n```\n\n----------------------------------------\n\nTITLE: AllowFailure Configuration\nDESCRIPTION: This snippet showcases how to configure the `allowFailure` option within the `useReadContracts` hook. Setting `allowFailure` to `false` will cause the hook to throw an error if any of the contract calls revert.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    allowFailure: false, // [!code hl]\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI,\n        functionName: 'getChest',\n        args: [69]\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of watchBlockNumber\nDESCRIPTION: Demonstrates the basic usage of watchBlockNumber, including setting up a callback for block number changes and unwatching.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlockNumber(config, {\n  onBlockNumber(blockNumber) {\n    console.log('Block number changed!', blockNumber)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with To Parameter\nDESCRIPTION: Describes the use of the `to` parameter which specifies the transaction recipient or contract address in the `useEstimateGas` hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Read with Account Parameter\nDESCRIPTION: Example showing how to read contract data while specifying a sender account.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await readContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'balanceOf',\n  args: ['0xd2135CfB216b74109775236E36d4b433F1DF507B'],\n  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n})\n```\n\n----------------------------------------\n\nTITLE: Using getEnsText with custom universalResolverAddress\nDESCRIPTION: Demonstrates how to use the getEnsText function with a custom universal resolver address for ENS resolution.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsText } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensText = await getEnsText(config, {\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Configuration - TypeScript\nDESCRIPTION: Demonstrates basic setup of the fetch plugin with contract configuration and request handling for fetching ABIs from Etherscan.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/fetch.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { fetch } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    fetch({\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n      request(contract) {\n        if (!contract.address) throw new Error('address is required')\n        const address =\n          typeof contract.address === 'string'\n            ? contract.address\n            : Object.values(contract.address)[0]\n        return {\n          url: `https://api.etherscan.io/api?module=contract&action=getabi&address=${address}`,\n        }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Block Number Watching Implementation\nDESCRIPTION: Demonstrates basic usage of useWatchBlockNumber hook with a callback function that logs block number changes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchBlockNumber } from 'wagmi'\n\nfunction App() {\n  useWatchBlockNumber({\n    onBlockNumber(blockNumber) {\n      console.log('Block number changed!', blockNumber)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Available Connectors\nDESCRIPTION: Demonstrates how to dynamically render connection buttons for available connectors\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnect.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect } from 'wagmi'\n\nfunction App() {\n  const { connect, connectors } = useConnect()\n\n  return (\n    <div>\n      {connectors.map((connector) => (\n        <button key={connector.id} onClick={() => connect({ connector })}>\n          {connector.name}\n        </button>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useReconnect Hook in React Component\nDESCRIPTION: This TypeScript snippet shows how to use the `useReconnect` hook within a React functional component, incorporating the `useEffect` hook to trigger a reconnection when the component mounts.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReconnect.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReconnect } from 'wagmi'\nimport { useEffect } from 'react'\n\nfunction App() {\n  const { reconnect } = useReconnect()\n\n  useEffect(() => {\n    reconnect()\n  }, [])\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBytecode in a Vue Component\nDESCRIPTION: Demonstrates how to use the useBytecode composable in a Vue component to retrieve bytecode for a specific address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBytecode } from '@wagmi/vue'\n\nconst { data: byteCode } = useBytecode({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n})\n</script>\n\n<template>\n  Byte Code: {{ byteCode }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing custom Transport's request function\nDESCRIPTION: Demonstrates how to implement the required request function for the custom Transport, which follows the EIP-1193 specification.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { customRpc } from './rpc'\n\nconst transport = custom({\n  async request({ method, params }) { // [!code focus:3]\n    const response = await customRpc.request(method, params)\n    return response\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Contract Function with useReadContract\nDESCRIPTION: Demonstrates how to provide arguments to the contract function call using the args parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'balanceOf',\n  args: ['0x6b175474e89094c44da98b954eedeac495271d0f'], // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Chain ID Parameter\nDESCRIPTION: Demonstrates how to use the `chainId` parameter in the `useEstimateGas` hook, which targets a specific blockchain when estimating gas.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { mainnet } from '@wagmi/core/chains'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    chainId: mainnet.id, // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-20 token balance\nDESCRIPTION: Demonstrates how to use the getBalance function to fetch the balance of a specific ERC-20 token for an address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBalance } from '@wagmi/core'\nimport { config } from './config'\n\nconst balance = getBalance(config, {\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  token: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Chain Switching\nDESCRIPTION: Demonstrates implementation of chain switching functionality in a Vue component using useSwitchChain composable. Shows how to render available chains and handle chain switching.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchChain.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSwitchChain } from '@wagmi/vue'\n\nconst { chains, switchChain } = useSwitchChain()\n</script>\n\n<template>\n  <div>\n    <button \n      v-for=\"chain in chains\" \n      :key=\"chain.id\" \n      @click=\"switchChain({ chainId: chain.id })\"\n    >\n      {{ chain.name }}\n    </button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Block Retrieval with Transactions\nDESCRIPTION: Example of retrieving block information including full transaction objects\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlock } from '@wagmi/core'\nimport { config } from './config'\n\nconst blockNumber = await getBlock(config, {\n  includeTransactions: true\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Server-Side Rendering Support\nDESCRIPTION: Shows how to enable server-side rendering (SSR) support in a Wagmi configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi' // [!code focus]\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  ssr: true, // [!code focus]\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic usage of useEnsName hook\nDESCRIPTION: Demonstrates basic usage of the useEnsName hook to fetch an ENS name for a specific Ethereum address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsName } from 'wagmi'\n\nfunction App() {\n  const result = useEnsName({\n    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting transaction type in Contract Write Operations with Wagmi in TypeScript\nDESCRIPTION: Example of setting the transaction type parameter when writing to a contract with the @wagmi/core library. This optional parameter narrows the transaction request type to either 'legacy', 'eip1559', or 'eip2930'.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await writeContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  type: 'eip1559', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic useConnect Usage in Vue\nDESCRIPTION: Demonstrates how to use the useConnect composable to connect with an injected wallet provider in a Vue component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnect } from '@wagmi/vue'\nimport { injected } from '@wagmi/connectors'\n\nconst { connect } = useConnect()\n</script>\n\n<template>\n  <button @click=\"connect({ connector: injected() })\">\n    Connect\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI with Constructor Args in TypeScript\nDESCRIPTION: Demonstrates how to define the ABI for a smart contract with constructor arguments in TypeScript.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [{ name: \"x\", type: \"uint32\" }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  ...\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Connector with watchAsset\nDESCRIPTION: Demonstrates how to specify a connector when using the watchAsset action, giving more control over which wallet connection is used.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount, watchAsset } from '@wagmi/core'\nimport { config } from './config'\n\nconst { connector } = getAccount(config)\nconst result = await watchAsset(config, {\n  connector, // [!code focus]\n  options: {\n    address: '0x0000000000000000000000000000000000000000',\n    symbol: 'WAGMI',\n    decimals: 18,\n  },\n  type: 'ERC20',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic ENS Name Lookup Implementation\nDESCRIPTION: Example showing how to fetch an ENS name for a specific Ethereum address using getEnsName.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsName } from '@wagmi/core'\nimport { config } from './config'\n\nconst ensName = getEnsName(config, {\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n})\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract with Block Number Parameter\nDESCRIPTION: Demonstrates how to use the simulateContract function with a specific block number for the simulation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  blockNumber: 17829139n,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing usePublicClient Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the usePublicClient hook from wagmi to interact with Viem's PublicClient. Ensure wagmi is installed as a dependency.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePublicClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePublicClient } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Specifying the chainId Parameter\nDESCRIPTION: Use the chainId parameter to specify the chain ID when fetching data, demonstrated by setting it to the mainnet's ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateMaxPriorityFeePerGas.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateMaxPriorityFeePerGas } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useEstimateMaxPriorityFeePerGas({\n    chainId: mainnet.id,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring wagmi with WebSocket Transport\nDESCRIPTION: Demonstrates how to set up a wagmi configuration using the webSocket Transport for multiple chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createConfig, \n  webSocket\n} from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [injected()],\n  transports: {\n    [mainnet.id]: webSocket('wss://foo-bar-baz.quiknode.pro/...'),\n    [sepolia.id]: webSocket('wss://foo-bar-sep.quicknode.pro/...'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Typed Data with Signature Parameter in React\nDESCRIPTION: Example showing how to use the useVerifyTypedData hook with a signature parameter to verify typed data in a React component. The hook takes domain information, type definitions, the message to verify, and the signature to check.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { domain, types } from './data'\nimport { useVerifyTypedData } from 'wagmi'\n\nfunction App() {\n  const result = useVerifyTypedData({\n    domain,\n    types,\n    message: {\n      from: {\n        name: 'Cow',\n        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n      },\n      to: {\n        name: 'Bob',\n        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n      },\n      contents: 'Hello, Bob!',\n    },\n    primaryType: 'Mail',\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Parameter in Contract Simulation\nDESCRIPTION: Demonstrates how to set the gas parameter when simulating a contract transaction using useSimulateContract. The gas value is specified in Gwei using the parseGwei utility.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSimulateContract } from 'wagmi'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSimulateContract({\n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'transferFrom',\n    args: [\n      '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n      123n,\n    ],\n    gas: parseGwei('20'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: ReadContracts Usage Example\nDESCRIPTION: Demonstrates how to use readContracts to call multiple contract methods across different contracts with various parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readContracts } from '@wagmi/core'\nimport { config } from './config'\n\nconst wagmigotchiContract = {\n  address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n  abi: wagmigotchiABI,\n} as const\nconst mlootContract = {\n  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n  abi: mlootABI,\n} as const\n\nconst result = await readContracts(config, {\n  contracts: [\n    {\n      ...wagmigotchiContract,\n      functionName: 'getAlive',\n    },\n    {\n      ...wagmigotchiContract,\n      functionName: 'getBoredom',\n    },\n    {\n      ...mlootContract,\n      functionName: 'getChest',\n      args: [69],\n    },\n    {\n      ...mlootContract,\n      functionName: 'getWaist',\n      args: [69],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Interaction with Gas Parameter in Vue\nDESCRIPTION: This snippet demonstrates how to use the useSimulateContract composable with a gas parameter. It simulates a transferFrom function call on an ERC20 token contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  gas: parseGwei('20'), // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Transport name\nDESCRIPTION: Demonstrates setting a custom name for the Transport, which defaults to \"Ethereum Provider\" if not specified.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = custom(\n  provider,\n  { \n    name: 'Window Ethereum Provider', // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Connector Parameter\nDESCRIPTION: This code snippet shows how to use the `connector` parameter within the `useEstimateGas` hook. If no account is provided, it uses the default account associated with the specified connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections, estimateGas } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const connections = getConnections(config)\n  const result = useEstimateGas({\n    connector: connections[0]?.connector, // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Nonce\nDESCRIPTION: Shows how to set a custom nonce value for transaction ordering. The nonce is a unique number that identifies the transaction sequence.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSimulateContract } from 'wagmi'\nimport { abi } from './abi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSimulateContract({\n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'transferFrom',\n    args: [\n      '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n      123n,\n    ],\n    nonce: 123,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Chain-Specific Message Verification\nDESCRIPTION: Example showing message verification with specific chain ID for Smart Contract Accounts\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyMessage.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyMessage } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nawait verifyMessage(config, {\n  chainId: mainnet.id,\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: 'hello world',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n```\n\n----------------------------------------\n\nTITLE: Including Storage Keys in useProof Hook\nDESCRIPTION: This example shows how to provide an array of storage keys to the useProof hook. Storage keys indicate specific storage slots to be included in the proof, allowing for detailed verification.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useProof } from 'wagmi'\n\nfunction App() {\n  const result = useProof({\n    address: '0x4200000000000000000000000000000000000016',\n    storageKeys: [ // [!code focus:3]\n      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n    ],\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useReadContract\nDESCRIPTION: Demonstrates the basic usage pattern of the useReadContract composable to call a totalSupply function on a contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'totalSupply',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useClient Hook in React\nDESCRIPTION: Shows how to use the useClient hook in a React component to access the Viem Client instance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useClient.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useClient } from 'wagmi'\n\nfunction App() {\n  const client = useClient()\n}\n```\n\n----------------------------------------\n\nTITLE: Using getPublicClient to retrieve a Viem PublicClient instance\nDESCRIPTION: Demonstrates how to use the getPublicClient function to obtain a Viem PublicClient instance using a configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getPublicClient.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getPublicClient } from '@wagmi/core'\nimport { config } from './config'\n\nconst client = getPublicClient(config)\n```\n\n----------------------------------------\n\nTITLE: Initialize Viem PublicClient with Custom Chain ID\nDESCRIPTION: This snippet configures the usePublicClient hook to connect to a specified blockchain network by providing a chainId parameter. Requires chain configuration from wagmi.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePublicClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePublicClient } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\nimport { config } from './config'\n\nfunction App() {\n  const client = usePublicClient({\n    chainId: mainnet.id,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Interaction with Max Priority Fee Per Gas in Vue\nDESCRIPTION: This example demonstrates the use of the useSimulateContract composable with both maxFeePerGas and maxPriorityFeePerGas parameters for EIP-1559 transactions. It simulates a transferFrom function call on an ERC20 token contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'), // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useWriteContracts Hook in React Component\nDESCRIPTION: Demonstrates how to use the useWriteContracts hook in a React component to send multiple contract calls in a single transaction. It includes parsing an ABI and setting up the contract calls.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContracts.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWriteContracts } from 'wagmi/experimental'\nimport { parseAbi } from 'viem'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n\nfunction App() {\n  const { writeContracts } = useWriteContracts()\n\n  return (\n    <button\n      onClick={() =>\n        writeContracts({\n          contracts: [\n            {\n              address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n              abi,\n              functionName: 'approve',\n              args: [\n                '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n                100n\n              ],\n            },\n            {\n              address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n              abi,\n              functionName: 'transferFrom',\n              args: [\n                '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n                '0x0000000000000000000000000000000000000000',\n                100n\n              ],\n            },\n          ],\n        })\n      }\n    >\n      Send calls\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Scope Key Parameter\nDESCRIPTION: Captures how to use the `scopeKey` parameter for caching, ensuring that hooks with the same context can share cached data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    scopeKey: 'foo', // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Implementation\nDESCRIPTION: Demonstrates basic implementation of watchPendingTransactions with transaction logging\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchPendingTransactions } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchPendingTransactions(config, {\n  onTransactions(transactions) {\n    console.log('New transactions!', transactions)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Event Watching with Chain ID\nDESCRIPTION: Example showing how to watch contract events on a specific chain using chainId parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchContractEvent.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchContractEvent } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst unwatch = watchContractEvent(config, {\n  abi,\n  chainId: mainnet.id,\n  onLogs(logs) {\n    console.log('Logs changed!', logs)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Interaction with Value in Vue\nDESCRIPTION: This snippet illustrates how to use the useSimulateContract composable with a value parameter. It simulates a transferFrom function call on an ERC20 token contract while sending 0.01 ETH along with the transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  value: parseEther('0.01'), // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading State Implementation\nDESCRIPTION: Adding loading state handling to the mint form using isPending flag.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWriteContract } from 'wagmi'\nimport { abi } from './abi'\n\nconst { data: hash, isPending, writeContract } = useWriteContract()\n\nfunction submit(event: Event) {\n  const formData = new FormData(e.target as HTMLFormElement)\n  const tokenId = formData.get('tokenId') as string\n  writeContract({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    abi,\n    functionName: 'mint',\n    args: [BigInt(tokenId)],\n  })\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"tokenId\" placeholder=\"69420\" required />\n    <button :disabled=\"isPending\" type=\"submit\">\n      <span v-if=\"isPending\">Sending...</span>\n      <span v-else>Send</span>\n    </button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Interaction with Transaction Type in Vue\nDESCRIPTION: This example demonstrates how to use the useSimulateContract composable with a specific transaction type. It simulates a transferFrom function call on an ERC20 token contract using an EIP-1559 transaction type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  type: 'eip1559', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Converting Viem Client to Ethers v5 Provider\nDESCRIPTION: Implementation to convert a Viem client to an Ethers.js v5 provider. Handles both regular and fallback transports, creating appropriate JsonRpcProvider or FallbackProvider instances with network configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Config, getClient } from '@wagmi/core'\nimport { providers } from 'ethers'\nimport type { Client, Chain, Transport } from 'viem'\n\nexport function clientToProvider(client: Client<Transport, Chain>) {\n  const { chain, transport } = client\n  const network = {\n    chainId: chain.id,\n    name: chain.name,\n    ensAddress: chain.contracts?.ensRegistry?.address,\n  }\n  if (transport.type === 'fallback')\n    return new providers.FallbackProvider(\n      (transport.transports as ReturnType<Transport>[]).map(\n        ({ value }) => new providers.JsonRpcProvider(value?.url, network),\n      ),\n    )\n  return new providers.JsonRpcProvider(transport.url, network)\n}\n\n/** Action to convert a viem Public Client to an ethers.js Provider. */\nexport function getEthersProvider(\n  config: Config,\n  { chainId }: { chainId?: number } = {},\n) {\n  const client = getClient(config, { chainId })\n  if (!client) return\n  return clientToProvider(client)\n}\n```\n\n----------------------------------------\n\nTITLE: Using useVerifyMessage Hook in React Component\nDESCRIPTION: Example of using the useVerifyMessage hook in a React component to verify a signed message.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVerifyMessage } from 'wagmi'\n\nfunction App() {\n  const result = useVerifyMessage({\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    message: 'hello world',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Domain and Types for Typed Data\nDESCRIPTION: This snippet defines the domain and types objects used in the typed data verification process. It includes the structure for Person and Mail types.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Using signMessage with Specific Connector in TypeScript\nDESCRIPTION: Shows how to use the signMessage action with a specific connector obtained from getAccount function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount, signMessage } from '@wagmi/core'\nimport { config } from './config'\n\nconst { connector } = getAccount(config)\nconst result = await signMessage(config, {\n  connector,\n  message: 'hello world',\n})\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract with Account Parameter\nDESCRIPTION: Shows how to use the simulateContract function with a specific account for signing the transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Contracts for Sourcify ABI Fetching\nDESCRIPTION: Demonstrates how to define the contracts array for the Sourcify plugin to specify which contract ABIs to fetch. Each entry requires a name and can include an address as a string or chain-specific object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { sourcify } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    sourcify({\n      chainId: 100,\n      contracts: [ // [!code focus]\n        { // [!code focus]\n          name: 'Deposit', // [!code focus]\n          address: '0x00000000219ab540356cbb839cbe05303d7705fa', // [!code focus]\n        }, // [!code focus]\n      ], // [!code focus]\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Universal Resolver Address Configuration\nDESCRIPTION: Setting a custom address for the ENS Universal Resolver Contract when fetching an avatar.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAvatar({\n    name: normalize('wevm.eth'),\n    universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying chainId with useEnsAddress in React\nDESCRIPTION: This example demonstrates how to specify a particular blockchain network ID when fetching ENS address data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' \nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAddress({\n    chainId: mainnet.id, \n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: BlockNumber Configuration\nDESCRIPTION: This snippet demonstrates how to configure the `blockNumber` to use when performing the read operations with the `useReadContracts` hook. This allows reading contract data from a specific block in the past.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    blockNumber: 69420n, // [!code hl]\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI,\n        functionName: 'getChest',\n        args: [69]\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBlock with chainId parameter\nDESCRIPTION: This snippet shows how to specify the chain ID while using the `useBlock` hook to fetch data from a particular blockchain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' // [!code focus]\n\nfunction App() {\n  const result = useBlock({\n    chainId: mainnet.id, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: GetEnsName with Block Tag Parameter\nDESCRIPTION: Example showing how to fetch an ENS name using a specific block tag.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsName } from '@wagmi/core'\nimport { config } from './config'\n\nconst ensName = getEnsName(config, {\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  blockTag: 'latest',\n})\n```\n\n----------------------------------------\n\nTITLE: Lossless BigInt Serialization with Wagmi in TypeScript\nDESCRIPTION: Demonstrates how to use Wagmi's serialize and deserialize utilities to handle BigInt values in a lossless manner. This approach converts BigInt values to a format that can be serialized and later deserialized back to their original form.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { serialize, deserialize } from 'wagmi'\n\nconst serialized = serialize({ value: 69420n })\n// '{\"value\":\"#bigint.69420\"}'\n\nconst deserialized = deserialize(serialized)\n// { value: 69420n }\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with gas parameter\nDESCRIPTION: Shows how to specify the gas limit when sending a transaction using sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  gas: parseGwei('20'),\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with maxPriorityFeePerGas parameter\nDESCRIPTION: Demonstrates how to set both maxFeePerGas and maxPriorityFeePerGas for an EIP-1559 transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForTransactionReceipt with onReplaced Callback\nDESCRIPTION: Shows how to use the useWaitForTransactionReceipt hook with an onReplaced callback function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from 'wagmi'\n\nfunction App() {\n  const result = useWaitForTransactionReceipt({\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n    onReplaced: replacement => console.log(replacement),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectParameters Type from Wagmi Core\nDESCRIPTION: Shows how to import the ConnectParameters type from the @wagmi/core package for type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/connect.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ConnectParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useChains Hook from wagmi\nDESCRIPTION: This snippet demonstrates how to import the useChains hook from the wagmi library for use in a React component. It is essential for accessing the blockchain chains configured in the application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChains.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChains } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getConnectorClient\nDESCRIPTION: Demonstrates basic usage of getConnectorClient to obtain a Viem Client using the config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnectorClient } from '@wagmi/core'\nimport { config } from './config'\n\nconst client = await getConnectorClient(config)\n```\n\n----------------------------------------\n\nTITLE: Enabling SSR in Wagmi Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to enable server-side rendering in the Wagmi configuration by setting the 'ssr' property to true.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ssr.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  ssr: true,\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useBlock with blockHash Parameter\nDESCRIPTION: Example of using the useBlock hook with a specific blockHash parameter to get transaction count for a particular block.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\n\nfunction App() {\n  const result = useBlock({\n    blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d' \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getBlockNumber with chainId Parameter\nDESCRIPTION: Example demonstrating how to specify a specific chain ID when fetching the block number, allowing interaction with a particular blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockNumber } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst blockNumber = await getBlockNumber(config, {\n  chainId: mainnet.id, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Connection Usage with Injected Connector\nDESCRIPTION: Demonstrates how to use the useConnect hook to create a connection button with an injected wallet connector\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnect.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect } from 'wagmi'\nimport { injected } from 'wagmi/connectors'\n\nfunction App() {\n  const { connect } = useConnect()\n\n  return (\n    <button onClick={() => connect({ connector: injected() })}>\n      Connect\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract with Block Tag Parameter\nDESCRIPTION: Shows how to use the simulateContract function with a specific block tag for the simulation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  blockTag: 'safe',\n})\n```\n\n----------------------------------------\n\nTITLE: Using getEnsText to fetch ENS text record\nDESCRIPTION: Demonstrates how to use the getEnsText function to retrieve a text record for an ENS name. It includes normalizing the ENS name and specifying the key.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsText } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensText = getEnsText(config, {\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n})\n```\n\n----------------------------------------\n\nTITLE: useToken with Custom Config\nDESCRIPTION: Example demonstrating useToken implementation with custom configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useToken } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useToken({\n    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Args Configuration\nDESCRIPTION: This example shows how to configure the arguments (`args`) to be passed to the contract function when using the `useReadContracts` hook. These arguments are essential for providing input data to the contract function being called.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI,\n        functionName: 'getChest',\n        args: [69], // [!code hl]\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Storage Object with localStorage\nDESCRIPTION: Demonstrates how to create a new Storage object using the createStorage function with localStorage.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage } from '{{packageName}}'\n\nconst storage = createStorage({ storage: localStorage })\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Interaction with Gas Price in Vue\nDESCRIPTION: This example shows how to use the useSimulateContract composable with a gasPrice parameter for legacy transactions. It simulates a transferFrom function call on an ERC20 token contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  gasPrice: parseGwei('20'), // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using getFeeHistory with blockTag Parameter in TypeScript\nDESCRIPTION: This example shows how to use the getFeeHistory function with the optional blockTag parameter to specify the block tag for the highest block of the requested range.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFeeHistory } from '@wagmi/core'\nimport { config } from './config'\n\nconst feeHistory = await getFeeHistory(config, {\n  blockCount: 4,\n  blockTag: 'safe',\n  rewardPercentiles: [25, 75],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Implementation of useSwitchAccount\nDESCRIPTION: A Vue component that demonstrates how to use the useSwitchAccount composable to render a list of connectors and switch between accounts.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSwitchAccount } from 'wagmi'\n\nconst { connectors, switchAccount } = useSwitchAccount()\n</script>\n\n<template>\n  <div>\n    <button \n      v-for=\"connector in connectors\" \n      :key=\"connector.id\" \n      @click=\"switchAccount({ connector })\"\n    >\n      {{ connector.name }}\n    </button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Chains in TypeScript\nDESCRIPTION: Shows how to configure chains in v2 using the new native multichain support, replacing the old configureChains function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createConfig } from '@wagmi/core'\nimport { mainnet, sepolia } from '@wagmi/core/chains'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWatchContractEvent with Custom Arguments\nDESCRIPTION: Demonstrates how to use the useWatchContractEvent hook with custom arguments for filtering events.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchContractEvent.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchContractEvent } from 'wagmi'\nimport { abi } from './abi'\n\nfunction App() {\n  useWatchContractEvent({\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    abi,\n    args: {\n      to: '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n    }\n    eventName: 'Transfer',\n    onLogs(logs) {\n      console.log('New logs!', logs)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useSendTransaction Hook in React\nDESCRIPTION: Illustrates how to use a custom configuration with the useSendTransaction hook in a React component, instead of using the default configuration from WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendTransaction.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSendTransaction } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSendTransaction({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useBalance with blockNumber parameter\nDESCRIPTION: This snippet demonstrates how to use the `useBalance` hook with the `blockNumber` parameter. The `blockNumber` parameter specifies the block at which to fetch the balance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { useBalance } from 'wagmi'\n\nfunction App() {\n  const result = useBalance({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    blockNumber: 17829139n, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAvatar with Custom Universal Resolver Address\nDESCRIPTION: Shows how to specify a custom ENS Universal Resolver Contract address when using the useEnsAvatar composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAvatar } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAvatar({\n  name: normalize('wevm.eth'),\n  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Verifying Typed Data with Block Tag in Wagmi Core\nDESCRIPTION: This example demonstrates how to verify typed data signatures by specifying a block tag. This is commonly used with Smart Contract Accounts to verify at a specific blockchain state like 'latest' or 'finalized'.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyTypedData } from '@wagmi/core'\nimport { domain, types } from './data'\nimport { config } from './config'\n\nconst valid = await verifyTypedData(config, {\n  blockTag: 'latest', // [!code focus]\n  domain,\n  types,\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  primaryType: 'Mail',\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n// true\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi for SSR in Vue\nDESCRIPTION: This snippet demonstrates how to configure Wagmi for SSR in a Vue application by enabling the 'ssr' option in the Wagmi config. It sets up the configuration with mainnet and sepolia chains, and HTTP transports.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/ssr.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createConfig, http } from '@wagmi/vue'\nimport { mainnet, sepolia } from '@wagmi/vue/chains'\n\nconst config = createConfig({ // [!code focus:99]\n  chains: [mainnet, sepolia],\n  ssr: true, // [!code ++]\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useSwitchChain Hook - React Component\nDESCRIPTION: Demonstrates how to implement chain switching functionality in a React component using the useSwitchChain hook. Shows rendering a list of available chains and handling chain switching.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchChain.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSwitchChain } from 'wagmi'\n\nfunction App() {\n  const { chains, switchChain } = useSwitchChain()\n\n  return (\n    <div>\n      {chains.map((chain) => (\n        <button key={chain.id} onClick={() => switchChain({ chainId: chain.id })}>\n          {chain.name}\n        </button>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: useCall with Value Parameter\nDESCRIPTION: Illustrates the usage of the `value` parameter within the `useCall` hook to specify the value (in wei) sent with this transaction. The `value` parameter accepts a `bigint | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'), // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: NFT Contract ABI Definition\nDESCRIPTION: Defines the ABI for the NFT contract's mint function with necessary type information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/write-to-contract.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const abi = [\n  {\n    name: 'mint',\n    type: 'function',\n    stateMutability: 'nonpayable',\n    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],\n    outputs: [],\n  },\n] as const\n```\n\n----------------------------------------\n\nTITLE: Setting chainId Parameter in useBlockNumber\nDESCRIPTION: Demonstrates how to specify a specific chain ID when using the useBlockNumber composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBlockNumber } from '@wagmi/vue'\nimport { mainnet } from '@wagmi/vue/chains'\n\nconst { data: blockNumber } = useBlockNumber({\n  chainId: mainnet.id,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry Plugin Forge Options in TypeScript\nDESCRIPTION: Shows how to configure various Forge options in the Foundry plugin for Wagmi CLI, including clean, build, path, and rebuild settings.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { foundry } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    foundry({\n      forge: {\n        clean: true,\n        build: true,\n        path: 'path/to/forge',\n        rebuild: true,\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useStorageAt Hook in React Component\nDESCRIPTION: Demonstrates how to use the useStorageAt hook within a React component to retrieve storage data from a specific Ethereum address and slot.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStorageAt } from 'wagmi'\n\nfunction App() {\n  const result = useStorageAt({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    slot: '0x0',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Read with Chain ID\nDESCRIPTION: Example showing how to specify a chain ID when reading contract data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readContract } from '@wagmi/core'\nimport { mainnet } from 'wagmi/chains'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await readContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'totalSupply',\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Contract Deployment with Custom Connector\nDESCRIPTION: Example showing contract deployment with a specific connector configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/deployContract.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount, deployContract } from '@wagmi/core'\nimport { wagmiAbi } from './abi'\nimport { config } from './config'\n\nconst { connector } = getAccount(config)\nconst result = await deployContract(config, {\n  abi: wagmiAbi,\n  args: [69420],\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n  connector,\n})\n```\n\n----------------------------------------\n\nTITLE: Using useBlock with watch parameter\nDESCRIPTION: This snippet shows how to enable the watch feature for the `useBlock` hook, allowing the component to listen for changes in block data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\n\nfunction App() {\n  const result = useBlock({\n    watch: true, // [!code focus]\n  })\n}\n\n```tsx [index-2.tsx]\nimport { useBlock } from 'wagmi'\n\nfunction App() {\n  const result = useBlock({\n    watch: { // [!code focus]\n      pollingInterval: 4_000, // [!code focus]\n    }, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider on createClient in wagmi\nDESCRIPTION: The provider config option is now required on createClient. It is recommended to use the provider given from configureChains. This example shows how to update your code to use the public provider with defaultChains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  createClient,\n+ defaultChains,\n+ configureChains\n} from 'wagmi'\n+import { publicProvider } from 'wagmi/providers/publicProvider'\n\n+const { provider } = configureChains(defaultChains, [\n+ publicProvider\n+])\n\nconst client = createClient({\n+ provider\n})\n```\n\n----------------------------------------\n\nTITLE: Using formatUnits Parameter with useEstimateFeesPerGas\nDESCRIPTION: Demonstrates how to specify the units to use when formatting the gas fee results.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEstimateFeesPerGas } from 'wagmi'\n\nfunction App() {\n  const result = useEstimateFeesPerGas({\n    formatUnits: 'ether', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: MulticallAddress Configuration\nDESCRIPTION: This example demonstrates how to configure the `multicallAddress` when using the `useReadContracts` hook.  The `multicallAddress` specifies the address of the multicall contract used to batch the read calls.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI,\n        functionName: 'getChest',\n        args: [69]\n      },\n      // ...\n    ],\n    multicallAddress: '0xca11bde05977b3631167028862be2a173976ca11', // [!code hl]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useEstimateFeesPerGas\nDESCRIPTION: Demonstrates the basic implementation of the useEstimateFeesPerGas hook in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEstimateFeesPerGas } from 'wagmi'\n\nfunction App() {\n  const result = useEstimateFeesPerGas()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chain Definition with Type Assertion\nDESCRIPTION: Initial example showing minimal chain definition using type assertion pattern in TypeScript.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/create-chain.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Chain } from 'viem'\n\nexport const mainnet = {} as const satisfies Chain\n```\n\n----------------------------------------\n\nTITLE: Transaction Request with Access List\nDESCRIPTION: Example showing how to prepare a transaction request with an access list configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/prepareTransactionRequest.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareTransactionRequest } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nawait prepareTransactionRequest(config, {\n  accessList: [\n    {\n      address: '0x1',\n      storageKeys: ['0x1'],\n    },\n  ],\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1'),\n})\n```\n\n----------------------------------------\n\nTITLE: Block Retrieval by Hash\nDESCRIPTION: Example of retrieving block information using a specific block hash\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlock } from '@wagmi/core'\nimport { config } from './config'\n\nconst blockNumber = await getBlock(config, {\n  blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d'\n})\n```\n\n----------------------------------------\n\nTITLE: Using useConfig in Application Component\nDESCRIPTION: The following code snippet illustrates how to use the useConfig hook within a React functional component called App. It retrieves the configuration and stores it in a variable named config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConfig.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConfig } from 'wagmi'\n\nfunction App() {\n  const config = useConfig()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Wagmi CLI Configuration\nDESCRIPTION: Illustrates how to create a conditional Wagmi CLI configuration that changes based on the environment using a function export.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig(() => {\n  if (process.env.NODE_ENV === 'dev') {\n    return {\n      // dev specific config\n    }\n  } else {\n    return {\n      // production specific config\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Narrowing Return Types with chainId Data Property\nDESCRIPTION: This example demonstrates how to narrow return types using the chainId property that wagmi sets internally. By checking if the result's chainId matches zkSync.id, TypeScript can properly infer chain-specific types.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/chain-properties.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForTransactionReceipt } from '@wagmi/core'\nimport { zkSync } from '@wagmi/core/chains'\n\nconst result = await waitForTransactionReceipt({\n  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',\n})\n\nif (result.chainId === zkSync.id) {\n  result.logs\n  //     ^? (property) logs: ZkSyncLog[] | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Using connector Parameter with writeContracts\nDESCRIPTION: Demonstrates how to specify a particular connector to send the contract calls with, using getConnections to obtain available connectors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\nimport { getConnections } from '@wagmi/core'\nimport { writeContracts } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n\nconst connections = getConnections(config)\nconst id = await writeContracts(config, {\n  contracts: [\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'approve',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n        100n\n      ],\n    },\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'transferFrom',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        '0x0000000000000000000000000000000000000000',\n        100n\n      ],\n    },\n  ],\n  connector: connections[0]?.connector, \n})\n```\n\n----------------------------------------\n\nTITLE: Using useWalletClient Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useWalletClient hook within a React component. It includes the necessary import and basic usage.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWalletClient } from 'wagmi'\n\nfunction App() {\n  const result = useWalletClient()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gas Price for Legacy Transactions\nDESCRIPTION: Demonstrates setting a gas price for legacy transactions when estimating gas requirements.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  gasPrice: parseGwei('20'),\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useVerifyTypedData Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useVerifyTypedData hook in a React component. It includes the necessary parameters such as domain, types, message, primaryType, address, and signature.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { domain, types } from './data'\nimport { useVerifyTypedData } from 'wagmi'\n\nfunction App() {\n  const result = useVerifyTypedData({\n    domain,\n    types,\n    message: {\n      from: {\n        name: 'Cow',\n        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n      },\n      to: {\n        name: 'Bob',\n        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n      },\n      contents: 'Hello, Bob!',\n    },\n    primaryType: 'Mail',\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract with Connector Parameter\nDESCRIPTION: Shows how to use the simulateContract function with a specific connector for the simulation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount, simulateContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst { connector } = getAccount(config)\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  connector,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WagmiPlugin with Config Parameter\nDESCRIPTION: Illustrates how to use the 'config' parameter when initializing the WagmiPlugin. The config object is injected into the context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { WagmiPlugin } from '@wagmi/vue'\n\nimport App from './App.vue'\nimport { config } from './config' \n\ncreateApp(App)\n  .use(WagmiPlugin, { \n    config // [!code focus]\n  })\n  .mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Using token Parameter with useBalance\nDESCRIPTION: Demonstrates how to fetch the balance of an ERC-20 token instead of the native currency.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  token: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sync Storage Persistence\nDESCRIPTION: Example of setting up Wagmi with TanStack Query using synchronous storage persistence (localStorage/sessionStorage).\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSyncStoragePersister } from '@tanstack/query-sync-storage-persister'\nimport { QueryClient } from '@tanstack/react-query'\nimport { PersistQueryClientProvider } from '@tanstack/react-query-persist-client'\nimport { WagmiProvider, deserialize, serialize } from 'wagmi'\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      gcTime: 1_000 * 60 * 60 * 24, // 24 hours\n    },\n  },\n})\n\nconst persister = createSyncStoragePersister({\n  serialize,\n  storage: window.localStorage,\n  deserialize,\n})\n\nfunction App() {\n  return (\n    <WagmiProvider config={config}>\n      <PersistQueryClientProvider\n        client={queryClient}\n        persistOptions={{ persister }}\n      >\n        {/* ... */}\n      </PersistQueryClientProvider>\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Viem Client to Ethers v5 Signer\nDESCRIPTION: Implementation to convert a Viem client with an account to an Ethers.js v5 signer. Creates a Web3Provider from the transport and gets a signer for the account address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/ethers.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, getConnectorClient } from '@wagmi/core'\nimport { providers } from 'ethers'\nimport type { Account, Chain, Client, Transport } from 'viem'\n\nexport function clientToSigner(client: Client<Transport, Chain, Account>) {\n  const { account, chain, transport } = client\n  const network = {\n    chainId: chain.id,\n    name: chain.name,\n    ensAddress: chain.contracts?.ensRegistry?.address,\n  }\n  const provider = new providers.Web3Provider(transport, network)\n  const signer = provider.getSigner(account.address)\n  return signer\n}\n\n/** Action to convert a Viem Client to an ethers.js Signer. */\nexport async function getEthersSigner(\n  config: Config,\n  { chainId }: { chainId?: number } = {},\n) {\n  const client = await getConnectorClient(config, { chainId })\n  return clientToSigner(client)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example\nDESCRIPTION: Demonstrates how to use waitForCallsStatus with sendCalls to monitor transaction status and get receipts.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { sendCalls, waitForCallsStatus } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst id = await sendCalls(config, {\n  calls: [{\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1')\n  }]\n})\n\nconst { status, receipts } = await waitForCallsStatus(config, {\n  id,\n})\n```\n\n----------------------------------------\n\nTITLE: Using poll Parameter with watchBlocks\nDESCRIPTION: Shows how to configure the watcher to use polling instead of WebSocket subscriptions for checking new blocks, which can be useful for clients or environments that don't support WebSockets.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  poll: true, // [!code focus]\n  onBlock(block) {\n    console.log('Block changed!', block)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Fetching Query Data Imperatively\nDESCRIPTION: Demonstrates how to fetch query data imperatively using fetchQuery, useful for retrieving data outside of Vue components.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockQueryOptions } from '@wagmi/vue/query'\nimport { queryClient } from './main'\nimport { config } from './config'\n\nexport async function fetchBlockData() {\n  return queryClient.fetchQuery(\n    getBlockQueryOptions(config, {\n      chainId: config.state.chainId,\n    }\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBlockNumber in React Component (TSX)\nDESCRIPTION: This example showcases how to use the 'useBlockNumber' hook in a React component to fetch the latest block number. It highlights the basic usage without any additional parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-21_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useBlockNumber } from 'wagmi'\n\nfunction App() {\n  const result = useBlockNumber()\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEnsText with Normalized ENS Name\nDESCRIPTION: Demonstrates the importance of the name parameter and normalizing ENS names before using them with useEnsText.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsText } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsText({\n    name: normalize('wevm.eth'), \n    key: 'com.twitter',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic switchChain Usage\nDESCRIPTION: Demonstrates basic usage of switchChain to switch to the mainnet chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { switchChain } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nawait switchChain(config, { chainId: mainnet.id })\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with Custom Config\nDESCRIPTION: This snippet shows how to use the useTransaction hook with a custom configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransaction } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useTransaction({\n    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using account Parameter with writeContracts\nDESCRIPTION: Demonstrates how to specify a specific account to execute the batch contract calls using the account parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\nimport { writeContracts } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n\nconst id = await writeContracts(config, {\n  account: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n  contracts: [\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'approve',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n        100n\n      ],\n    },\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'transferFrom',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        '0x0000000000000000000000000000000000000000',\n        100n\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Account for Gas Estimation\nDESCRIPTION: Shows how to specify an account address when estimating gas for a transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useConnectorClient in Vue Component\nDESCRIPTION: Demonstrates basic implementation of the useConnectorClient composable in a Vue component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnectorClient } from '@wagmi/vue'\n\nconst result = useConnectorClient()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using getEnsAddress with blockNumber parameter\nDESCRIPTION: This snippet shows how to use the getEnsAddress function with the blockNumber parameter to fetch an ENS address at a specific block.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAddress } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAddress = getEnsAddress(config, {\n  blockNumber: 17829139n,\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWalletClient with ChainId Parameter\nDESCRIPTION: This example demonstrates how to use the useWalletClient hook with a specific chain ID as a parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWalletClient } from 'wagmi'\n\nfunction App() {\n  const result = useWalletClient({\n    chainId: mainnet.id,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useSignTypedData Hook\nDESCRIPTION: Demonstrates how to use a custom config with the useSignTypedData hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignTypedData.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignTypedData } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSignTypedData({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitForTransactionReceipt with @wagmi/core\nDESCRIPTION: Demonstrates how to use the waitForTransactionReceipt function to wait for a transaction receipt. It requires a configuration object and transaction hash.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForTransactionReceipt } from '@wagmi/core'\nimport { config } from './config'\n\nconst transactionReceipt = waitForTransactionReceipt(config, {\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing Wagmi Provider with Viem Transport (TypeScript)\nDESCRIPTION: Shows how to replace Wagmi provider imports with Viem transports for RPC connections in v2.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { alchemyProvider } from 'wagmi/providers/alchemy' // [!code --]\nimport { http } from 'viem' // [!code ++]\n\nconst transport = http('https://mainnet.example.com')\n```\n\n----------------------------------------\n\nTITLE: Updating useContractEvent Hook in React/TypeScript\nDESCRIPTION: The useContractEvent hook parameters have been consolidated into a singular config parameter. This change provides a more consistent API across the library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nuseContractEvent({\n  addressOrName: uniContractAddress,\n  contractInterface: erc20ABI,\n  eventName: \"Transfer\",\n  listener,\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract with Block Number\nDESCRIPTION: This example demonstrates how to use the useSimulateContract composable with a specific block number parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f', \n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  blockNumber: 17829139n,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Injected Connector\nDESCRIPTION: Demonstrates how to create a custom injected connector using createConnector function. Shows the basic structure of creating a connector with parameters and configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/createConnector.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConnector } from '@wagmi/core'\n\nexport type InjectedParameters = {}\n\nexport function injected(parameters: InjectedParameters = {}) {\n  return createConnector((config) => ({\n    // ...\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Deserialize Function\nDESCRIPTION: Demonstrates how to use a custom deserialize function when creating a Storage object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage, deserialize } from '{{packageName}}'\n\nconst storage = createStorage({\n  deserialize,\n  storage: localStorage,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Wagmi CLI Configuration in TypeScript\nDESCRIPTION: A minimal Wagmi configuration file that specifies the output path, with empty arrays for contracts and plugins.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\n\nexport default defineConfig({\n  out: 'src/generated.ts',\n  contracts: [],\n  plugins: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useDisconnect in a Vue Component\nDESCRIPTION: Demonstrates how to use the useDisconnect composable in a Vue component to create a disconnect button.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useDisconnect.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useDisconnect } from '@wagmi/vue'\n\nconst { disconnect } = useDisconnect()\n</script>\n\n<template>\n  <button @click=\"disconnect()\">\n    Disconnect\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining ABI in TypeScript with Const Assertion\nDESCRIPTION: This TypeScript snippet provides an example of defining an ABI array with 'as const' for proper type safety and inference when calling read-only contract functions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst abi = [\n  {\n    type: 'function',\n    name: 'balanceOf',\n    stateMutability: 'view',\n    inputs: [{ name: 'account', type: 'address' }],\n    outputs: [{ type: 'uint256' }],\n  },\n  {\n    type: 'function',\n    name: 'totalSupply',\n    stateMutability: 'view',\n    inputs: [],\n    outputs: [{ name: 'supply', type: 'uint256' }],\n  },\n] as const\n```\n\n----------------------------------------\n\nTITLE: Using useConnections in a Vue Component\nDESCRIPTION: Demonstrates how to use the useConnections composable within a Vue component setup function to retrieve active connections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnections.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnections } from 'wagmi'\n\nconst connections = useConnections()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using disconnect Action with Wagmi Core Config\nDESCRIPTION: Demonstrates how to use the disconnect action with a Wagmi Core configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/disconnect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { disconnect } from '@wagmi/core'\nimport { config } from './config'\n\nawait disconnect(config)\n```\n\n----------------------------------------\n\nTITLE: Basic watchAccount Usage Example\nDESCRIPTION: Demonstrates how to use watchAccount to subscribe to account changes, including setting up the onChange handler and cleanup function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAccount.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchAccount } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchAccount(config, {\n  onChange(data) {\n    console.log('Account changed!', data)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using useBlock with blockTag Parameter\nDESCRIPTION: Example of using the useBlock hook with a blockTag parameter to fetch transaction count for a special block tag like 'pending'.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\n\nfunction App() {\n  const result = useBlock({\n    blockTag: 'pending' \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Connector with Multiple Accounts\nDESCRIPTION: Demonstrates how to set up a mock connector with a list of Ethereum addresses as accounts.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/mock.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mock } from '{{connectorsPackageName}}'\n\nconst connector = mock({\n  accounts: [\n    '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',\n    '0x90F79bf6EB2c4f870365E785982E1f101E93b906',\n    '0x15d34aaf54267db7d7c367839aaf71a00a2c6a65',\n    '0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc',\n    '0x976EA74026E726554dB657fA54763abd0C3a0aa9',\n    '0x14dC79964da2C08b23698B3D3cc7Ca32193d9955',\n    '0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f',\n    '0xa0Ee7A142d267C1f36714E4a8F75612F20a79720',\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting with Custom Configuration\nDESCRIPTION: Example of using useConnect with a custom configuration object\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnect.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useConnect({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBlock to include transactions\nDESCRIPTION: This snippet shows how to include transaction data when fetching block information using the `useBlock` hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useBlock({\n    includeTransactions: true // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract with AccessList Parameter\nDESCRIPTION: Demonstrates how to use the simulateContract function with an accessList parameter for optimized gas usage.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  accessList: [{\n    address: '0x1',\n    storageKeys: ['0x1'],\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: Block Retrieval with Chain ID\nDESCRIPTION: Example of retrieving block information from a specific chain using chainId\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlock } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst blockNumber = await getBlock(config, {\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Using useReconnect with Config in React Component\nDESCRIPTION: This snippet demonstrates how to use the `useReconnect` hook along with a custom configuration object. It illustrates importing a config and passing it as a parameter to `useReconnect`.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReconnect.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReconnect } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useReconnect({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Complete SendTransaction Component Implementation\nDESCRIPTION: The full implementation of the SendTransaction component with all features: form submission, transaction sending, status tracking, and error handling.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  import { \n    useSendTransaction,\n    useWaitForTransactionReceipt,\n  } from 'wagmi'\n  import { parseEther } from 'viem'\n\n  const { \n    data: hash, \n    error,\n    isPending,\n    sendTransaction \n  } = useSendTransaction()\n\n  function submit(event: Event) {\n    const formData = new FormData(event.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n\n  const { isLoading: isConfirming, isSuccess: isConfirmed } = \n    useWaitForTransactionReceipt({ \n      hash, \n    }) \n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n    <input name=\"value\" placeholder=\"0.05\" required />\n    <button :disabled=\"isPending\" type=\"submit\">\n      <span v-if=\"isPending\">Sending...</span>\n      <span v-else>Send</span>\n    </button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n    <div v-if=\"isConfirming\">Waiting for confirmation...</div> \n    <div v-if=\"isConfirmed\">Transaction Confirmed!</div> \n    <div v-if=\"error\">\n      Error: {{ (error as BaseError).shortMessage || error.message }}\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: useAccountEffect with onDisconnect callback\nDESCRIPTION: This snippet focuses on the `onDisconnect` callback of the `useAccountEffect` hook. It shows how to execute custom code when all accounts are disconnected.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccountEffect.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccountEffect } from 'wagmi'\n\nfunction App() {\n  useAccountEffect({\n    onDisconnect() { // [!code focus]\n      console.log('Disconnected!') // [!code focus]\n    }, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Updating Query Data\nDESCRIPTION: Shows how to retrieve and update query data imperatively using getQueryData and setQueryData, useful for managing query data outside of Vue components.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GetBalanceReturnType } from '@wagmi/vue/actions'\nimport { getBalanceQueryOptions } from '@wagmi/vue/query'\nimport { queryClient } from './app'\nimport { config } from './config'\n\nexport function getBalanceData() {\n  return queryClient.getQueryData(\n    getBalanceQueryOptions(config, {\n      chainId: config.state.chainId,\n    }\n  ))\n}\n\nexport function setBalanceData(parameters: Partial<GetBalanceReturnType>) {\n  return queryClient.setQueryData(\n    getBalanceQueryOptions(config, {\n      chainId: config.state.chainId,\n    },\n    data => ({ ...data, ...parameters })\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Connector-specific Chain Switch\nDESCRIPTION: Shows how to switch chains using a specific connector instance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections, switchAccount } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst connections = getConnections(config)\nconst result = await switchChain(config, {\n  chainId: mainnet.id,\n  connector: connections[0]?.connector,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Provider Target\nDESCRIPTION: Shows how to configure a custom Ethereum provider target with specific provider details.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/injected.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injected } from '{{connectorsPackageName}}'\n\nconst connector = injected({\n  target() {\n    return {\n      id: 'windowProvider',\n      name: 'Window Provider',\n      provider: window.ethereum,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom universalResolverAddress with useEnsResolver\nDESCRIPTION: Shows how to provide a custom Universal Resolver Contract address when using the useEnsResolver hook instead of using the default address for the current chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsResolver } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsResolver({\n    name: normalize('wevm.eth'),\n    universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: signTypedData with Custom Account\nDESCRIPTION: Example demonstrating how to use signTypedData with a specific account address\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signTypedData } from '@wagmi/core'\nimport { config } from './config'\nimport { types } from './typedData'\n\nconst result = await signTypedData(config, {\n  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  types,\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with Custom Configuration\nDESCRIPTION: Example of using useTransaction with a custom configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransaction } from '@wagmi/vue'\nimport { config } from './config' // [!code focus]\n\nconst result = useTransaction({\n  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using blockTag Parameter in useVerifyMessage\nDESCRIPTION: Example of using the blockTag parameter when verifying a message signed by a Smart Contract Account.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVerifyMessage } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useVerifyMessage({\n    blockTag: 'pending',\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    message: 'hello world',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEnsText with Block Tag\nDESCRIPTION: Demonstrates fetching ENS text records at a specific block tag using the blockTag parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsText } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsText({\n    blockTag: 'latest', \n    name: normalize('wevm.eth'),\n    key: 'com.twitter',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEnsName Composable in Vue.js\nDESCRIPTION: This example demonstrates how to use the useEnsName composable to fetch the ENS name for a given Ethereum address in a Vue component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsName } from '@wagmi/vue'\n\nconst result = useEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using getGasPrice with Configuration\nDESCRIPTION: Demonstrates how to use the getGasPrice function with a configuration object to fetch the current gas price.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getGasPrice.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGasPrice } from '@wagmi/core'\nimport { config } from './config'\n\nconst gasPrice = await getGasPrice(config)\n```\n\n----------------------------------------\n\nTITLE: Using useConfig in Vue Component\nDESCRIPTION: Demonstrates how to use the useConfig composable in a Vue component to access the Config instance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConfig.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConfig } from 'wagmi'\n\nconst config = useConfig()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Access List Parameter - TypeScript\nDESCRIPTION: This example shows how to include an access list in the transaction request, which helps optimize gas usage for specified addresses.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    accessList: [\n      {\n        address: '0x1',\n        storageKeys: ['0x1'],\n      },\n    ],\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing ENS Names in TypeScript\nDESCRIPTION: Demonstrates how to manually normalize ENS names using Viem's normalize function before passing them to Wagmi actions in v2.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAddress } from '@wagmi/core'\nimport { normalize } from 'viem'\nimport { config } from './config'\n\nconst result = await getEnsAddress(config, {\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using useBlock with custom configuration\nDESCRIPTION: This snippet demonstrates how to use a custom configuration object with the `useBlock` hook instead of default settings from WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useBlock({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getConnectors with Configuration\nDESCRIPTION: Demonstrates how to use getConnectors function with a Wagmi configuration to retrieve configured connectors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectors.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnectors } from '@wagmi/core'\nimport { config } from './config'\n\nconst connectors = getConnectors(config)\n```\n\n----------------------------------------\n\nTITLE: Migrating from useNetwork to useSwitchNetwork Hook\nDESCRIPTION: The network switching functionality has been moved from useNetwork to a new useSwitchNetwork hook. The useNetwork hook now only returns chain and chains properties, while all switching functionality is available in useSwitchNetwork.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  useNetwork\n+ useSwitchNetwork\n} from 'wagmi'\n\nconst {\n- activeChain\n+ chain,\n  chains,\n- data,\n- error,\n- isError,\n- isIdle,\n- isLoading,\n- isSuccess,\n- pendingChainId,\n- switchNetwork,\n- switchNetworkAsync,\n- status,\n- reset,\n-} = useNetwork({\n- chainId: 69,\n- onError(error) {},\n- onMutate(args) {},\n- onSettled(data, error) {},\n- onSuccess(data) {}\n-})\n+} = useNetwork()\n\n+const {\n+ data,\n+ error,\n+ isError,\n+ isIdle,\n+ isLoading,\n+ isSuccess,\n+ pendingChainId,\n+ switchNetwork,\n+ switchNetworkAsync,\n+ status,\n+ reset,\n+} = useSwitchNetwork({\n+ chainId: 69,\n+ onError(error) {},\n+ onMutate(args) {},\n+ onSettled(data, error) {},\n+ onSuccess(data) {}\n+})\n```\n\n----------------------------------------\n\nTITLE: Setting nonce in Contract Write Operations with Wagmi in TypeScript\nDESCRIPTION: Example of using the nonce parameter when writing to a contract with the @wagmi/core library. The nonce is a unique number identifying this transaction in the blockchain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await writeContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  nonce: 123, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Value Parameter - TypeScript\nDESCRIPTION: This example specifies the value in wei that is sent with the transaction, showing how to integrate it into the request.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using universalResolverAddress parameter with useEnsName\nDESCRIPTION: Demonstrates specifying a custom ENS Universal Resolver Contract address instead of using the chain's default.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsName } from 'wagmi'\n\nfunction App() {\n  const result = useEnsName({\n    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Request Preparation\nDESCRIPTION: Basic example of preparing a transaction request with a recipient address and value in Ether.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/prepareTransactionRequest.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareTransactionRequest } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nawait prepareTransactionRequest(config, {\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1'),\n})\n```\n\n----------------------------------------\n\nTITLE: GetBytecode with Block Number\nDESCRIPTION: Shows how to use getBytecode with a specific block number parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBytecode } from '@wagmi/core'\nimport { config } from './config'\n\nawait getBytecode(config, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  blockNumber: 16280770n,\n})\n```\n\n----------------------------------------\n\nTITLE: Prefetching Queries in Event Handler\nDESCRIPTION: Demonstrates how to prefetch query data in response to user events like hovering or focusing on an element, useful for improving perceived performance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConfig, useChainId, useQueryClient } from '@wagmi/vue'\nimport { getBlockQueryOptions } from '@wagmi/vue/query'\n\nconst config = useConfig()\nconst chainId = useChainId()\nconst queryClient = useQueryClient()\n\nconst prefetch = () => \n  queryClient.prefetchQuery(getBlockQueryOptions(config, { chainId })) \n</script>\n\n<template>\n  <a\n    @mouseenter=\"prefetch\" \n    @focus=\"prefetch\" \n    href=\"...\"\n  >\n    Block details\n  </a>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using chainId Parameter with estimateFeesPerGas\nDESCRIPTION: Demonstrates specifying a particular chain ID when calling the estimateFeesPerGas function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateFeesPerGas } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst result = await estimateFeesPerGas(config, {\n  chainId: mainnet.id, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useTransactionReceipt\nDESCRIPTION: Basic example of using the useTransactionReceipt composable to fetch a transaction receipt by providing a transaction hash.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransactionReceipt } from '@wagmi/vue'\n\nconst result = useTransactionReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: GetEnsName with Block Number Parameter\nDESCRIPTION: Example demonstrating how to fetch an ENS name at a specific block number.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsName } from '@wagmi/core'\nimport { config } from './config'\n\nconst ensName = getEnsName(config, {\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  blockNumber: 17829139n,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Value in Contract Simulation\nDESCRIPTION: Shows how to specify the value to be transferred in wei during a contract simulation using Wagmi's simulateContract method. Demonstrates converting ether to wei using parseEther utility.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  value: parseEther('0.01'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: useToken with Format Units\nDESCRIPTION: Example showing useToken implementation with format units configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToken } from 'wagmi'\n\nfunction App() {\n  const result = useToken({\n    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n    formatUnits: 'ether',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract with Connector\nDESCRIPTION: This example demonstrates how to use the useSimulateContract composable with a specific connector parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnectorClient, useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst { data: connector } = useConnectorClient()\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  connector,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionConfirmations Hook in React Component\nDESCRIPTION: Demonstrates how to use the useTransactionConfirmations hook in a React component to fetch transaction confirmation data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionConfirmations } from 'wagmi'\n\nfunction App() {\n  const result = useTransactionConfirmations({\n    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Create-Wagmi using Package Managers\nDESCRIPTION: Command-line instructions for installing and initializing a new Wagmi project using different package managers (npm, pnpm, or yarn). The create-wagmi CLI helps bootstrap new Wagmi applications.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/create-wagmi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create wagmi\n# or\npnpm create wagmi\n# or\nyarn create wagmi\n```\n\n----------------------------------------\n\nTITLE: Configuring MetaMask Headless Mode\nDESCRIPTION: Demonstrates how to enable headless mode for custom modal implementations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { metaMask } from '{{connectorsPackageName}}'\n\nconst connector = metaMask({\n  headless: true\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction Loading State in Vue\nDESCRIPTION: Enhancing the UI with loading states to indicate when a transaction is pending approval from the user's wallet.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useSendTransaction } from 'wagmi'\n  import { parseEther } from 'viem'\n\n  const { \n    data: hash, \n    isPending,\n    sendTransaction \n  } = useSendTransaction()\n\n  function submit(event: Event) {\n    const formData = new FormData(event.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n    <input name=\"value\" placeholder=\"0.05\" required />\n    <button :disabled=\"isPending\" type=\"submit\">\n      <span v-if=\"isPending\">Sending...</span>\n      <span v-else>Send</span>\n    </button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Config with Wagmi\nDESCRIPTION: This snippet illustrates how to create a configuration object using the wagmi library. It includes defining the chains and setting up HTTP transports for each chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConfig.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getClient\nDESCRIPTION: Demonstrates basic usage of getClient to obtain a Viem Client instance using a configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getClient.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getClient } from '@wagmi/core'\nimport { config } from './config'\n\nconst client = getClient(config)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useChains in Vue Component\nDESCRIPTION: Demonstrates basic usage of the useChains composable in a Vue component to access configured chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChains.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useChains } from '@wagmi/vue'\n\nconst chains = useChains()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Connectors as Peer Dependencies\nDESCRIPTION: Demonstrates how to install the @wagmi/connectors package using different package managers after it was moved to peer dependencies in v2.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/connectors\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/connectors\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @wagmi/connectors\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @wagmi/connectors\n```\n\n----------------------------------------\n\nTITLE: useCall with MaxPriorityFeePerGas Parameter\nDESCRIPTION: Illustrates the usage of the `maxPriorityFeePerGas` parameter within the `useCall` hook to specify the max priority fee per gas (in wei). The `maxPriorityFeePerGas` parameter accepts a `bigint | undefined` value and only applies to EIP-1559 Transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    maxFeePerGas: parseGwei('20'),\n    maxPriorityFeePerGas: parseGwei('2'), // [!code focus]\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Config Parameter - TypeScript\nDESCRIPTION: This snippet shows how to use a custom configuration for the `usePrepareTransactionRequest` hook instead of the default settings.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    config,\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling Interval with useWaitForTransactionReceipt\nDESCRIPTION: Example showing how to configure the polling interval when waiting for a transaction receipt, setting the frequency of checks in milliseconds.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\n\nconst result = useWaitForTransactionReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  pollingInterval: 1_000, \n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Infinite Read Contracts with MLoot Example\nDESCRIPTION: Demonstrates how to use useInfiniteReadContracts to fetch contract attributes with pagination using a dynamic page parameter\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useInfiniteReadContracts.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useInfiniteReadContracts } from 'wagmi'\nimport { abi } from './abi'\n\nconst mlootContractConfig = {\n  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n  abi,\n} as const\n\nfunction App() {\n  const result = useInfiniteReadContracts({\n    cacheKey: 'mlootAttributes',\n    contracts(pageParam) {\n      const args = [pageParam] as const\n      return [\n        { ...mlootContractConfig, functionName: 'getChest', args },\n        { ...mlootContractConfig, functionName: 'getFoot', args },\n        { ...mlootContractConfig, functionName: 'getHand', args },\n      ]\n    }\n    query: {\n      initialPageParam: 0,\n      getNextPageParam: (_lastPage, _allPages, lastPageParam) => {\n        return lastPageParam + 1\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useGasPrice with Config\nDESCRIPTION: Illustrates using `useGasPrice` with a custom `Config` object. This allows for using a pre-configured Wagmi configuration instead of relying on the nearest `WagmiProvider`.  It imports a `config` object from a local file and passes it to the hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useGasPrice.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useGasPrice } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useGasPrice({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Interaction with Scope Key in Vue\nDESCRIPTION: This example shows how to use the useSimulateContract composable with a scopeKey parameter. It simulates a transferFrom function call on an ERC20 token contract with a specific cache scope.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  scopeKey: 'foo', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForTransactionReceipt with Custom Config\nDESCRIPTION: Shows how to use the useWaitForTransactionReceipt hook with a custom configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWaitForTransactionReceipt } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useWaitForTransactionReceipt({\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getChains to retrieve configured chains\nDESCRIPTION: Demonstrates how to use the getChains function to retrieve the configured chains from a wagmi config object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getChains.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getChains } from '@wagmi/core'\nimport { config } from './config'\n\nconst chains = getChains(config)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Wagmi Plugin\nDESCRIPTION: Shows how to create a custom plugin by implementing the Plugin type and configuring it in the Wagmi CLI. The plugin must include a name property and typically implements either contracts or run functionality.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction myPlugin(): Plugin {\n  // `name` is the only required property.\n  name: 'MyPlugin',\n  // You likely want to at least include `contracts` or `run`.\n  // ...\n}\n\nexport default defineConfig({\n  out: 'src/generated.ts',\n  plugins: [myPlugin()],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useShowCallsStatus Hook in React Component\nDESCRIPTION: Demonstrates how to use the useShowCallsStatus hook within a React component to show the status of a call batch.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useShowCallsStatus.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShowCallsStatus } from 'wagmi/experimental'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const { showCallsStatus } = useShowCallsStatus()\n\n  return (\n    <button\n      onClick={() =>\n        showCallsStatus({\n          id: '0x1234567890abcdef',\n        })\n      }\n    >\n      Show calls status\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getGasPrice with Specific Chain ID\nDESCRIPTION: Illustrates how to use getGasPrice with a specific chain ID (mainnet in this case) for fetching gas price data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getGasPrice.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGasPrice } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst gasPrice = await getGasPrice(config, {\n  chainId: mainnet.id, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEstimateGas Hook in a React Component\nDESCRIPTION: Demonstrates how to use the `useEstimateGas` hook within a React functional component to estimate gas without submitting the transaction. The result variable stores the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\n\nfunction App() {\n  const result = useEstimateGas()\n}\n```\n\n----------------------------------------\n\nTITLE: Using getEnsText with blockTag parameter\nDESCRIPTION: Demonstrates how to use the getEnsText function with a block tag to fetch the text record at a specific block state.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsText } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensText = getEnsText(config, {\n  blockTag: 'latest',\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n})\n```\n\n----------------------------------------\n\nTITLE: Transaction Request with Gas Parameters\nDESCRIPTION: Example demonstrating how to set gas price and priority fee parameters for a transaction request.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/prepareTransactionRequest.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareTransactionRequest } from '@wagmi/core'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nawait prepareTransactionRequest(config, {\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'),\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  value: parseEther('1'),\n})\n```\n\n----------------------------------------\n\nTITLE: Error Handling Implementation\nDESCRIPTION: Demonstrates how to handle errors when watching block numbers using onError callback.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchBlockNumber } from 'wagmi'\n\nfunction App() {\n  useWatchBlockNumber({\n    onBlockNumber(blockNumber) { \n      console.log('New block number', blockNumber) \n    }, \n    onError(error) {\n      console.error('Block error', error)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useGasPrice with chainId\nDESCRIPTION: Shows how to use the `useGasPrice` hook with the `chainId` parameter.  This allows you to specify which chain to fetch the gas price from. `mainnet.id` is passed as the `chainId` to fetch the gas price for the mainnet network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useGasPrice.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useGasPrice } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' // [!code focus]\n\nfunction App() {\n  const result = useGasPrice({\n    chainId: mainnet.id, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UseSwitchAccountParameters Type in TypeScript\nDESCRIPTION: Shows how to import the UseSwitchAccountParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchAccount.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSwitchAccountParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Transitioning from prepareWriteContract to simulateContract\nDESCRIPTION: Demonstrates the migration from the prepareWriteContract function to using simulateContract, promoting a more straightforward interaction model with contract functions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareWriteContract } from '@wagmi/core' // [!code --]\nimport { simulateContract } from '@wagmi/core' // [!code ++]\nimport { config } from './config' // [!code ++]\n\nconst result = await prepareWriteContract({ ... }) // [!code --]\nconst result = await simulateContract(config, { ... }) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useEnsAddress Hook in React\nDESCRIPTION: This example demonstrates the basic usage of the useEnsAddress hook in a React component, including proper normalization of ENS names.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAddress({\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: WagmiProvider with Config Parameter\nDESCRIPTION: Illustrates how to use the required config parameter when implementing WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './config' \n\nfunction App() {\n  return (\n    <WagmiProvider\n      config={config} // [!code focus]\n    >\n      {/** ... */}\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Address in useReadContract\nDESCRIPTION: Shows how to specify the smart contract address when using useReadContract to call a function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f', // [!code focus]\n  functionName: 'totalSupply',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fetching balance with block number\nDESCRIPTION: Shows how to use the getBalance function with a specific block number to fetch the balance at that block.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBalance } from '@wagmi/core'\nimport { config } from './config'\n\nconst balance = getBalance(config, {\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  blockNumber: 17829139n,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useEnsAvatar Hook in React\nDESCRIPTION: Demonstrates how to use the useEnsAvatar hook in a React component to fetch an ENS avatar, with proper name normalization.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAvatar({\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using config Parameter with useSendCalls\nDESCRIPTION: Shows how to use the `config` parameter with the `useSendCalls` hook. The `config` parameter allows specifying a custom Wagmi `Config` to use instead of the one provided by the nearest `WagmiProvider`.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendCalls.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"import { useSendCalls } from 'wagmi/experimental'\\nimport { config } from './config' // [!code focus]\\n\\nfunction App() {\\n  const result = useSendCalls({\\n    config, // [!code focus]\\n  })\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Number for ENS Avatar Lookup\nDESCRIPTION: Setting a specific block number when fetching an ENS avatar to get historical data at that block height.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAvatar({\n    blockNumber: 17829139n,\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Data Parameter - TypeScript\nDESCRIPTION: This example demonstrates how to include data in the transaction request, which represents a hashed method call to a smart contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting pollingInterval in useWatchPendingTransactions\nDESCRIPTION: Shows how to set a custom polling interval when using the useWatchPendingTransactions hook with polling enabled.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchPendingTransactions } from 'wagmi'\n\nfunction App() {\n  useWatchPendingTransactions({\n    onTransactions(transactions) {\n      console.log('New transactions!', transactions)\n    },\n    pollingInterval: 1_000,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Connector for Gas Estimation\nDESCRIPTION: Shows how to use a connector when estimating gas, which will use the default account from the connector if no account is explicitly provided.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnections, useEstimateGas } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst connections = useConnections()\nconst result = useEstimateGas({\n  connector: connections[0]?.connector,\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useBlock to fetch block data by block hash\nDESCRIPTION: This snippet demonstrates how to use the `useBlock` hook to fetch block information using a specific block hash.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\n\nfunction App() {\n  const result = useBlock({\n    blockHash: '0x89644bbd5c8d682a2e9611170e6c1f02573d866d286f006cbf517eec7254ec2d' // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useBalance with scopeKey parameter\nDESCRIPTION: This snippet demonstrates how to use the `useBalance` hook with the `scopeKey` parameter. The `scopeKey` parameter scopes the cache to a given context. Hooks that have identical context will share the same cache.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBalance } from 'wagmi'\n\nfunction App() {\n  const result = useBalance({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    scopeKey: 'foo', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useConnectorClient with Custom Config\nDESCRIPTION: Demonstrates how to use useConnectorClient with a custom configuration instead of using the nearest WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnectorClient } from '@wagmi/vue'\nimport { config } from './config' // [!code focus]\n\nconst result = useConnectorClient({\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useFeeHistory hook in React\nDESCRIPTION: This example demonstrates how to use the `useFeeHistory` hook within a React component to fetch historical gas information. It showcases the basic structure of calling the hook and passing parameters such as `blockCount` and `rewardPercentiles`.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFeeHistory } from 'wagmi'\n\nfunction App() {\n  const result = useFeeHistory({\n    blockCount: 4,\n    rewardPercentiles: [25, 75]\n})\n}\n```\n\n----------------------------------------\n\nTITLE: SendCalls with Account Parameter\nDESCRIPTION: Example showing sendCalls usage with explicit account parameter specification.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { sendCalls } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst id = await sendCalls(config, {\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      data: '0xdeadbeef',\n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useWriteContract\nDESCRIPTION: Example showing how to provide a custom configuration to the useWriteContract composable instead of using the global configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWriteContract.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWriteContract } from '@wagmi/vue'\nimport { config } from './config'\n\nconst result = useWriteContract({\n  config,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using blockTag with useVerifyTypedData for Smart Contract Accounts\nDESCRIPTION: Example showing how to specify a blockTag parameter when verifying typed data signatures for Smart Contract Accounts. This parameter indicates which block state to use when checking if the contract was deployed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { domain, types } from './data'\nimport { useVerifyTypedData } from 'wagmi'\n\nfunction App() {\n  const result = useVerifyTypedData({\n    blockTag: 'latest',\n    domain,\n    types,\n    message: {\n      from: {\n        name: 'Cow',\n        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n      },\n      to: {\n        name: 'Bob',\n        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n      },\n      contents: 'Hello, Bob!',\n    },\n    primaryType: 'Mail',\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: BatchSize Configuration\nDESCRIPTION: This example illustrates how to configure the `batchSize` parameter in the `useReadContracts` hook. The `batchSize` determines the maximum size (in bytes) for each calldata chunk sent in a single request.  Some RPC Providers limit the amount of calldata that can be sent in a single `eth_call` request.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    batchSize: 1024, // [!code hl]\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI,\n        functionName: 'getChest',\n        args: [69]\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getConnectorClient with Explicit Connector\nDESCRIPTION: Demonstrates how to specify a particular connector when using getConnectorClient.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections, getConnectorClient } from '@wagmi/core'\nimport { config } from './config'\n\nconst connections = getConnections(config)\nconst client = await getConnectorClient(config, {\n  connector: connections[0]?.connector, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForTransactionReceipt with Custom Polling Interval\nDESCRIPTION: Demonstrates how to use the useWaitForTransactionReceipt hook with a custom polling interval.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from 'wagmi'\n\nfunction App() {\n  const result = useWaitForTransactionReceipt({\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n    pollingInterval: 1_000,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using chainId parameter with useEnsName\nDESCRIPTION: Shows how to use the chainId parameter to specify which blockchain to query for the ENS name.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsName } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' // [!code focus]\n\nfunction App() {\n  const result = useEnsName({\n    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    chainId: mainnet.id, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Connector Usage in TypeScript\nDESCRIPTION: Demonstrates the change in connector usage from class-based to function-based in v2, using the WalletConnect connector as an example.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '@wagmi/connectors'\n\nconst connector = walletConnect({\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n})\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract with Specific Account\nDESCRIPTION: This example shows how to use the useSimulateContract composable with a specific account parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initialize Viem PublicClient in React Application\nDESCRIPTION: Demonstrates how to utilize the usePublicClient hook to access the Viem PublicClient within a React component. It simplifies client-side interaction with Viem's public API endpoints. No parameters are required if the default configuration is sufficient.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePublicClient.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePublicClient } from 'wagmi'\n\nfunction App() {\n  const client = usePublicClient()\n}\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with specific account\nDESCRIPTION: Shows how to specify a particular account when sending a transaction using sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useBlockTransactionCount Hook\nDESCRIPTION: Demonstrates basic implementation of the useBlockTransactionCount hook in a React component without any parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlockTransactionCount } from 'wagmi'\n\nfunction App() {\n  const result = useBlockTransactionCount()\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Config with useBlockNumber (TSX)\nDESCRIPTION: Illustrates setting a custom configuration object for 'useBlockNumber'. This allows for overriding the default configuration provided by WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-21_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useBlockNumber } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useBlockNumber({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Narrowing Return Types with chainId Parameter\nDESCRIPTION: This snippet shows how to narrow return types based on the chainId parameter. By specifying zkSync.id, the return type includes zkSync-specific properties like ZkSyncLog[] instead of generic Log[].\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/chain-properties.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForTransactionReceipt } from '@wagmi/core'\nimport { zkSync } from '@wagmi/core/chains'\n\nconst result = await waitForTransactionReceipt({\n  chainId: zkSync.id,\n  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',\n})\n\nresult.logs\n//     ^? (property) logs: ZkSyncLog[] | undefined\n```\n\n----------------------------------------\n\nTITLE: Using useBlock with chainId Parameter\nDESCRIPTION: Example of using the useBlock hook with a chainId parameter to specify which blockchain to query for transaction count.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' \n\nfunction App() {\n  const result = useBlock({\n    chainId: mainnet.id, \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Contract ABI\nDESCRIPTION: TypeScript constant defining the ABI (Application Binary Interface) for the NFT contract's mint function, specifying the function signature and parameter types.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/write-to-contract.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const abi = [\n  {\n    name: 'mint',\n    type: 'function',\n    stateMutability: 'nonpayable',\n    inputs: [{ internalType: 'uint32', name: 'tokenId', type: 'uint32' }],\n    outputs: [],\n  },\n] as const\n```\n\n----------------------------------------\n\nTITLE: Custom Client Configuration\nDESCRIPTION: Shows how to create a custom Viem client for advanced configuration scenarios.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient, http } from 'viem' // [!code focus]\nimport { createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  client({ chain }) { // [!code focus]\n    return createClient({ chain, transport: http('https://...') }) // [!code focus]\n  }, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of watchBlocks\nDESCRIPTION: Demonstrates the basic usage pattern of the watchBlocks function, which includes setting up a watcher for block changes and later unwatching.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  onBlock(block) {\n    console.log('Block changed!', block)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Priority Fee Per Gas for EIP-1559 Transaction\nDESCRIPTION: Shows how to set the maximum priority fee per gas for a contract simulation using Wagmi's simulateContract method. Specifically configures the priority fee component of EIP-1559 transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  maxFeePerGas: parseGwei('20'),\n  maxPriorityFeePerGas: parseGwei('2'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Chain Definitions\nDESCRIPTION: Example showing how to import blockchain chain definitions from the @wagmi/core/chains entrypoint, which proxies chain configurations from viem/chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/chains.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mainnet } from '@wagmi/core/chains'\n```\n\n----------------------------------------\n\nTITLE: Configuring useContractWrite with Prepared Request in TypeScript\nDESCRIPTION: Updates the configuration of useContractWrite to use the prepared config from usePrepareContractWrite, improving transaction preparation and reducing errors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\nimport { usePrepareContractWrite, useContractWrite } from 'wagmi'\n\n+const { config } = usePrepareContractWrite({\n+ addressOrName: '0x...',\n+ contractInterface: wagmiAbi,\n+ functionName: 'mint',\n+ args: [tokenId]\n+})\n\nconst { data } = useContractWrite({\n- addressOrName: '0x...',\n- contractInterface: wagmiAbi,\n- functionName: 'mint',\n- args: [tokenId],\n+ ...config\n})\n```\n\n----------------------------------------\n\nTITLE: Using scopeKey for Cache Isolation with useVerifyTypedData\nDESCRIPTION: Example showing how to use the scopeKey parameter to isolate the cache for a specific verification context. This ensures that hooks with the same scopeKey share cache data, while those with different keys maintain separate caches.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { domain, types } from './data'\nimport { useVerifyTypedData } from 'wagmi'\n\nfunction App() {\n  const result = useVerifyTypedData({\n    scopeKey: 'foo'\n    domain,\n    types,\n    message: {\n      from: {\n        name: 'Cow',\n        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n      },\n      to: {\n        name: 'Bob',\n        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n      },\n      contents: 'Hello, Bob!',\n    },\n    primaryType: 'Mail',\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Basic Message Verification Example\nDESCRIPTION: Example showing how to import and use verifyMessage function with basic parameters\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyMessage.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyMessage } from '@wagmi/core'\nimport { config } from './config'\n\nawait verifyMessage(config, {\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: 'hello world',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Chain Definition with defineChain\nDESCRIPTION: Initial example showing minimal chain definition using the defineChain function from Viem.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/create-chain.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from 'viem'\n\nexport const mainnet = defineChain({})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useWatchAsset\nDESCRIPTION: Example showing how to use a custom configuration with the useWatchAsset hook instead of the default WagmiProvider config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchAsset.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchAsset } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useWatchAsset({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useConnectorClient with Account Parameter\nDESCRIPTION: Demonstrates how to specify an account when using the useConnectorClient composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnectorClient } from '@wagmi/vue'\n\nconst result = useConnectorClient({\n  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic getBytecode Usage\nDESCRIPTION: Demonstrates basic usage of getBytecode function to retrieve contract bytecode.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBytecode } from '@wagmi/core'\nimport { config } from './config'\n\nawait getBytecode(config, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Batch JSON-RPC in HTTP Transport\nDESCRIPTION: How to enable Batch JSON-RPC functionality to send multiple JSON-RPC requests in a single HTTP request.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...', {\n  batch: true // [!code hl]\n})\n```\n\n----------------------------------------\n\nTITLE: Chain Staleness Configuration\nDESCRIPTION: Shows how to configure chain staleness behavior for WalletConnect when new chains are added.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nconst connector = walletConnect({\n  isNewChainsStale: true,\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n})\n```\n\n----------------------------------------\n\nTITLE: Using signMessage Action in TypeScript\nDESCRIPTION: Demonstrates how to use the signMessage action to sign a message. It imports the necessary components and uses a configuration file.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signMessage } from '@wagmi/core'\nimport { config } from './config'\n\nawait signMessage(config, { message: 'hello world' })\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Deployment\nDESCRIPTION: Example demonstrating basic contract deployment using deployContract from @wagmi/core with bytecode and ABI.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/deployContract.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deployContract } from '@wagmi/core'\nimport { wagmiAbi } from './abi'\nimport { config } from './config'\n\nconst result = await deployContract(config, {\n  abi: wagmiAbi,\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Raw Message Data in TypeScript\nDESCRIPTION: Demonstrates how to sign the raw data representation of a message using the signMessage action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signMessage } from '@wagmi/core'\nimport { config } from './config'\n\nconst result = await signMessage(config, {\n  message: { raw: '0x68656c6c6f20776f726c64' },\n})\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Inline ABI Definition\nDESCRIPTION: Demonstrates TypeScript type inference when using an inline ABI definition with useReadContract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst result = useReadContract({\n  abi: [\n    {\n      type: 'function',\n      name: 'balanceOf',\n      stateMutability: 'view',\n      inputs: [{ name: 'account', type: 'address' }],\n      outputs: [{ type: 'uint256' }],\n    },\n    {\n      type: 'function',\n      name: 'totalSupply',\n      stateMutability: 'view',\n      inputs: [],\n      outputs: [{ name: 'supply', type: 'uint256' }],\n    },\n  ],\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'balanceOf',\n  // ^?\n\n\n  args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],\n  // ^?\n\n\n\n})\n\nresult.data\n//     ^?\n```\n\n----------------------------------------\n\nTITLE: SendCalls with Capabilities\nDESCRIPTION: Demonstrates using sendCalls with wallet capabilities configuration like paymaster services.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { sendCalls } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst id = await sendCalls(config, {\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      data: '0xdeadbeef',\n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    },\n  ],\n  capabilities: {\n    paymasterService: {\n      url: 'https://...'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: WagmiProvider with InitialState Parameter\nDESCRIPTION: Shows how to use the initialState parameter for state hydration, which is useful for server-side rendering.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './config' \n\nfunction App() {\n  return (\n    <WagmiProvider\n      config={config}\n      initialState={/* ... /*} // [!code focus]\n    >\n      {/** ... */}\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useSignMessage\nDESCRIPTION: Demonstrates how to provide a custom configuration to the useSignMessage composable instead of using the default configuration from WagmiPlugin.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignMessage.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSignMessage } from '@wagmi/vue'\nimport { config } from './config' // [!code focus]\n\nconst { signMessage } = useSignMessage({\n  config // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useCapabilities with an Account Parameter - TSX\nDESCRIPTION: This snippet illustrates how to provide an account parameter to the useCapabilities hook to fetch capabilities for a specific account address. It is important for targeting the capabilities of different wallets.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst status = await useCapabilities({\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Chain Definition with defineChain\nDESCRIPTION: Complete example of Ethereum mainnet chain configuration using defineChain function, including all required properties like ID, name, native currency, RPC URLs, block explorers, and contract addresses.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/create-chain.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from 'viem'\n\nexport const mainnet = defineChain({\n  id: 1,\n  name: 'Ethereum',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: { http: ['https://eth.merkle.io'] },\n  },\n  blockExplorers: {\n    default: { name: 'Etherscan', url: 'https://etherscan.io' },\n  },\n  contracts: {\n    ensRegistry: {\n      address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n    },\n    ensUniversalResolver: {\n      address: '0xE4Acdd618deED4e6d2f03b9bf62dc6118FC9A4da',\n      blockCreated: 16773775,\n    },\n    multicall3: {\n      address: '0xca11bde05977b3631167028862be2a173976ca11',\n      blockCreated: 14353601,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up TanStack Query with Wagmi\nDESCRIPTION: Example of setting up TanStack Query by attaching the VueQueryPlugin to the Vue app and passing a new QueryClient instance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryClient, VueQueryPlugin } from '@tanstack/vue-query'\nimport { WagmiPlugin } from '@wagmi/vue'\nimport { createApp } from 'vue'\nimport { config } from './config'\nimport App from './App.vue'\n\nconst queryClient = new QueryClient()\n\ncreateApp(App)\n  .use(WagmiPlugin, { config })\n  .use(VueQueryPlugin, { queryClient })\n  .mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Custom Gateway URLs Configuration\nDESCRIPTION: Example showing how to configure custom gateway URLs for CCIP-Read resolution\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAvatar } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAvatar = await getEnsAvatar(config, {\n  gatewayUrls: ['https://cloudflare-ipfs.com'],\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Polling with watchBlockNumber\nDESCRIPTION: Shows how to use polling instead of WebSocket subscriptions for watching block number changes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlockNumber(config, {\n  onBlockNumber(blockNumber) { \n    console.log('Block number changed!', blockNumber) \n  }, \n  poll: true,\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Query Provider\nDESCRIPTION: Setting up TanStack Query provider with Wagmi v2, showing the required wrapper components and configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './config'\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        {/** ... */}\n      </QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating useBalance for Manual Formatting (TypeScript)\nDESCRIPTION: Demonstrates how to update the useBalance hook to manually format the balance using Viem's formatUnits function instead of relying on the deprecated unit parameter and formatted return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatUnits } from 'viem' // [!code ++]\nimport { useBalance } from 'wagmi'\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  unit: 'ether', // [!code --]\n})\nresult.data!.formatted // [!code --]\nformatUnits(result.data!.value, result.data!.decimals) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Using type Parameter with useEstimateFeesPerGas\nDESCRIPTION: Demonstrates setting the transaction type parameter when using the useEstimateFeesPerGas hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEstimateFeesPerGas } from 'wagmi'\n\nfunction App() {\n  const result = useEstimateFeesPerGas({\n    type: 'legacy', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useChains in a React Component\nDESCRIPTION: This snippet shows the usage of the useChains hook within a functional React component. It retrieves the configured blockchain chains, making them available for use within the component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChains.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChains } from 'wagmi'\n\nfunction App() {\n  const chains = useChains()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useTransaction with Transaction Hash\nDESCRIPTION: A basic example of using the useTransaction composable to fetch a transaction by its hash.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransaction } from '@wagmi/vue'\n\nconst result = useTransaction({\n  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using watchPublicClient to Monitor Public Client Changes\nDESCRIPTION: Demonstrates how to use the watchPublicClient function to subscribe to Public Client changes and implement a cleanup function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPublicClient.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchPublicClient } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchPublicClient(config, {\n  onChange(client) {\n    console.log('Public Client changed!', client)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using useSendCalls Hook\nDESCRIPTION: Demonstrates how to use the `useSendCalls` hook to send a batch of calls (transactions) to the network.  It defines a React component with a button that triggers the `sendCalls` function with an array of calls, each specifying the recipient address, value, and/or data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendCalls.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"import { useSendCalls } from 'wagmi/experimental'\\nimport { parseEther } from 'viem'\\n\\nfunction App() {\\n  const { sendCalls } = useSendCalls()\\n\\n  return (\\n    <button\\n      onClick={() =>\\n        sendCalls({\\n          calls: [\\n            {\\n              to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n              value: parseEther('1')\\n            },\\n            {\\n              data: '0xdeadbeef',\\n              to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\\n            },\\n          ]\\n        })\\n      }\\n    >\\n      Send calls\\n    </button>\\n  )\\n}\"\n```\n\n----------------------------------------\n\nTITLE: useFeeHistory with blockCount parameter\nDESCRIPTION: This snippet focuses on the `blockCount` parameter of the `useFeeHistory` hook, specifying the number of blocks to include in the historical gas information retrieval.  The `blockCount` parameter determines the range of blocks for which the gas history is fetched, and the valid range is between 1 and 1024.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFeeHistory } from 'wagmi'\n\nfunction App() {\n  const result = useFeeHistory({\n    blockCount: 4, // [!code focus]\n    rewardPercentiles: [25, 75]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: GetBytecode with Block Tag\nDESCRIPTION: Demonstrates using getBytecode with a block tag parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBytecode } from '@wagmi/core'\nimport { config } from './config'\n\nawait getBytecode(config, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  blockTag: 'safe',\n})\n```\n\n----------------------------------------\n\nTITLE: ReadContracts Parameters Type Definition\nDESCRIPTION: Type import for ReadContracts parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ReadContractsParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Storage Persistence\nDESCRIPTION: Example of setting up Wagmi with TanStack Query using asynchronous storage persistence (IndexedDB/AsyncStorage).\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { createAsyncStoragePersister } from '@tanstack/query-async-storage-persister'\nimport { QueryClient } from '@tanstack/react-query'\nimport { PersistQueryClientProvider } from '@tanstack/react-query-persist-client'\nimport { WagmiProvider, deserialize, serialize } from 'wagmi'\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      gcTime: 1_000 * 60 * 60 * 24, // 24 hours\n    },\n  },\n})\n\nconst persister = createAsyncStoragePersister({\n  serialize,\n  storage: AsyncStorage,\n  deserialize,\n})\n\nfunction App() {\n  return (\n    <WagmiProvider config={config}>\n      <PersistQueryClientProvider\n        client={queryClient}\n        persistOptions={{ persister }}\n      >\n        {/* ... */}\n      </PersistQueryClientProvider>\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of watchConnections\nDESCRIPTION: Demonstrates how to use watchConnections to subscribe to connection changes with a config object and onChange handler. The function returns an unwatch callback for cleanup.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnections.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchConnections } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchConnections(config, {\n  onChange(data) {\n    console.log('Connections changed!', data)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using Asset Gateway URLs with useEnsAvatar\nDESCRIPTION: Configuring the useEnsAvatar hook with custom gateway URLs for resolving IPFS or Arweave assets in ENS avatars.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { getEnsAvatar } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEnsAvatar({\n    assetGatewayUrls: {\n      ipfs: 'https://cloudflare-ipfs.com',\n    },\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing createConfig in TypeScript\nDESCRIPTION: Shows how to import the createConfig function from the Wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Contract Function Calls\nDESCRIPTION: Shows how to fetch multiple contract functions with a custom limit parameter using infinite scroll mechanism\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useInfiniteReadContracts.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useInfiniteReadContracts } from 'wagmi'\nimport { abi } from './abi'\n\nfunction Example({ limit = 10 }: { limit?: number } = {}) {\n  const result = useInfiniteReadContracts({\n    cacheKey: 'mlootAttributes',\n    contracts(pageParam) {\n      return [...new Array(limit)].map(\n        (_, i) =>\n          ({\n            address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n            abi,\n            functionName: 'getHand',\n            args: [BigInt(pageParam + i)],\n          }) as const,\n      )\n    },\n    query: {\n      initialPageParam: 1,\n      getNextPageParam(_lastPage, _allPages, lastPageParam) {\n        return lastPageParam + limit\n      },\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Renamed Wagmi Configuration Types\nDESCRIPTION: Configuration and context type renames for better clarity. WagmiConfigProps is now WagmiProviderProps, and Context is now WagmiContext.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nWagmiConfigProps -> WagmiProviderProps\nContext -> WagmiContext\n```\n\n----------------------------------------\n\nTITLE: Fetching Twitter Handle with useEnsText\nDESCRIPTION: Example focusing on the key parameter to fetch a Twitter handle for an ENS name.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsText } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsText({\n    name: normalize('wevm.eth'),\n    key: 'com.twitter', \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useConnect\nDESCRIPTION: Demonstrates how to use a custom configuration with the useConnect composable instead of the global configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnect } from '@wagmi/vue'\nimport { config } from './config' // [!code focus]\n\nconst result = useConnect({\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectErrorType from Wagmi Core\nDESCRIPTION: Demonstrates how to import the ConnectErrorType type from the @wagmi/core package for handling potential errors in the 'connect' function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/connect.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ConnectErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with specific connector\nDESCRIPTION: Shows how to use a specific connector when sending a transaction using sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections, sendTransaction } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst connections = getConnections(config)\nconst result = await sendTransaction(config, {\n  connector: connections[0]?.connector,\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Confirmations with useWaitForTransactionReceipt\nDESCRIPTION: Example showing how to specify the number of block confirmations to wait for before resolving the transaction receipt.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\n\nconst result = useWaitForTransactionReceipt({\n  confirmations: 2, \n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useConnections with Custom Config in Vue\nDESCRIPTION: Demonstrates how to use the useConnections composable with a custom configuration object in a Vue component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnections.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnections } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nconst connections = useConnections({\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: useCall with MaxFeePerGas Parameter\nDESCRIPTION: Illustrates the usage of the `maxFeePerGas` parameter within the `useCall` hook to specify total fee per gas (in wei), inclusive of `maxPriorityFeePerGas`. The `maxFeePerGas` parameter accepts a `bigint | undefined` value and only applies to EIP-1559 Transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    maxFeePerGas: parseGwei('20'), // [!code focus]\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useCall with Config Parameter\nDESCRIPTION: Illustrates the usage of the `config` parameter within the `useCall` hook to specify the config to use instead of retrieving from the nearest `WagmiProvider`. The `config` parameter accepts a `Config | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useCall({\n    config, // [!code focus]\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Account Parameter\nDESCRIPTION: Illustrates the use of the `account` parameter in the `useEstimateGas` hook, allowing users to specify which account to consider when estimating the gas required for the transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e', // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using emitMissed Parameter with watchBlockNumber\nDESCRIPTION: Shows how to use the emitMissed parameter to emit missed block numbers to the callback.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlockNumber(config, {\n  emitMissed: true,\n  onBlockNumber(blockNumber) {\n    console.log('Block number changed!', blockNumber)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useEnsAddress\nDESCRIPTION: This example demonstrates how to use a custom wagmi configuration with the useEnsAddress hook instead of using the nearest WagmiProvider's config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\nimport { normalize } from 'viem/ens'\nimport { config } from './config' \n\nfunction App() {\n  const result = useEnsAddress({\n    config, \n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Address Parameter for useProof Hook\nDESCRIPTION: This snippet demonstrates how to specify the 'address' parameter for the useProof hook. The address parameter determines which account's proof is retrieved, enabling targeted queries.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useProof } from 'wagmi'\n\nfunction App() {\n  const result = useProof({\n    address: '0x4200000000000000000000000000000000000016', // [!code focus]\n    storageKeys: [\n      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n    ],\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using useConnectorClient with a Specific Account\nDESCRIPTION: Shows how to configure the useConnectorClient hook with a specific Ethereum account address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnectorClient } from 'wagmi'\n\nfunction App() {\n  const result = useConnectorClient({\n    account: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Config for useChains\nDESCRIPTION: This snippet illustrates how to specify a custom configuration when using the useChains hook. It demonstrates the import of a configuration object and passing it to the hook to override the default provider behavior.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChains.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChains } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const chains = useChains({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing getContract with Viem's getContract\nDESCRIPTION: Shows the transition from using Wagmi's getContract method to utilizing Viem's equivalent. This is part of the process of cleaning up the API and guiding users towards the more efficient Viem library methods.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from '@wagmi/core' // [!code --]\nimport { getContract } from 'viem' // [!code ++]\n\nconst contract = getContract() // [!code --]\nconst contract = getContract() // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Custom Chain Parameters Example\nDESCRIPTION: Demonstrates using addEthereumChainParameter to provide custom chain configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { switchChain } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst result = await switchChain(config, {\n  addEthereumChainParameter: {\n    iconUrls: ['https://example.com/icon.png'],\n  },\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Block-Specific Avatar Retrieval\nDESCRIPTION: Examples showing how to fetch ENS avatar at specific block numbers and block tags\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAvatar } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAvatar = await getEnsAvatar(config, {\n  blockNumber: 17829139n,\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Timeout Configuration\nDESCRIPTION: Demonstrates setting a timeout for the waitForCallsStatus polling operation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForCallsStatus } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst status = await waitForCallsStatus(config, {\n  id: '0x1234567890abcdef',\n  timeout: 10_000,\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionCount with Custom Config\nDESCRIPTION: This example demonstrates how to use the useTransactionCount hook with a custom configuration instead of the default one from WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionCount } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useTransactionCount({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionCount Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useTransactionCount hook in a React component to fetch the transaction count for a specific address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionCount } from 'wagmi'\n\nfunction App() {\n  const result = useTransactionCount({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract with Block Tag\nDESCRIPTION: This example shows how to use the useSimulateContract composable with a specific block tag parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f', \n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  blockTag: 'safe',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Integrating a Custom Viem Client with createConfig\nDESCRIPTION: Shows how to use the client parameter to provide a function that returns a Viem Client for more fine-grained control over client creation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\nimport { createClient } from 'viem'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  client({ chain }) {\n    return createClient({ chain, transport: http() })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Narrowing Chain Properties with ChainId Parameter\nDESCRIPTION: Shows how to narrow down chain-specific properties by specifying chainId parameter for better type safety and autocomplete functionality.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/chain-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { useSimulateContract } from '@wagmi/vue'\nimport { celo } from '@wagmi/vue/chains'\n\nconst result = useSimulateContract({\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n  chainId: celo.id,\n  feeCurrency: '0xâ€¦'\n})\n```\n\n----------------------------------------\n\nTITLE: Using getConnectorClient with Account Parameter\nDESCRIPTION: Demonstrates using getConnectorClient with a specific account address parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnectorClient } from '@wagmi/core'\nimport { config } from './config'\n\nconst client = await getConnectorClient(config, {\n  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using emitOnBegin Parameter with watchBlockNumber\nDESCRIPTION: Demonstrates how to use the emitOnBegin parameter to emit the latest block number when the subscription opens.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlockNumber(config, {\n  emitOnBegin: true,\n  onBlockNumber(blockNumber) {\n    console.log('Block number changed!', blockNumber)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using useCall hook in a React component\nDESCRIPTION: This snippet shows how to use the `useCall` hook within a React component to execute a message call. The `useCall` hook takes a configuration object with parameters like `account`, `data`, and `to` to specify the call details.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Connectors with useDisconnect\nDESCRIPTION: Demonstrates how to use the connectors returned by useDisconnect to create disconnect buttons for each connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useDisconnect.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useDisconnect } from '@wagmi/vue'\nimport { mainnet } from 'wagmi/chains'\n\nconst { connectors, disconnect } = useDisconnect()\n</script>\n\n<template>\n  <div>\n    <button v-for=\"connector in connectors\" :key=\"connector.id\" @click=\"disconnect({ connector })\">\n      {{ connector.name }}\n    </button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with accessList parameter\nDESCRIPTION: Demonstrates how to use the sendTransaction function with an accessList parameter for optimized gas usage.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  accessList: [{\n    address: '0x1',\n    storageKeys: ['0x1'],\n  }],\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with blockNumber Parameter\nDESCRIPTION: Example of fetching a transaction using a block number and index.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransaction } from '@wagmi/vue'\n\nconst result = useTransaction({\n  blockNumber: 17829139n, // [!code focus]\n  index: 0,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Contract Deployment with Custom Account\nDESCRIPTION: Example demonstrating contract deployment using a specific account address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/deployContract.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deployContract } from '@wagmi/core'\nimport { wagmiAbi } from './abi'\nimport { config } from './config'\n\nconst result = await deployContract(config, {\n  abi: wagmiAbi,\n  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  args: [69420],\n  bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useBlock from wagmi in TypeScript\nDESCRIPTION: This snippet imports the `useBlock` hook from the wagmi library, which allows fetching information about blockchain blocks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useBlock } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useDisconnect\nDESCRIPTION: Demonstrates how to use a custom config object with the useDisconnect composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useDisconnect.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useDisconnect } from '@wagmi/vue'\nimport { config } from './config'\n\nconst result = useDisconnect({\n  config,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForTransactionReceipt with Chain ID\nDESCRIPTION: Demonstrates how to use the useWaitForTransactionReceipt hook with a specific chain ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useWaitForTransactionReceipt({\n    chainId: mainnet.id,\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing return type for useCapabilities - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the return type associated with the useCapabilities hook. This is useful for TypeScript users who want to ensure type safety when handling the results of the hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseCapabilitiesReturnType } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useSendTransaction\nDESCRIPTION: Demonstrates how to use a custom configuration with the useSendTransaction composable by importing and passing a config object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSendTransaction.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSendTransaction } from '@wagmi/vue'\nimport { config } from './config'\n\nconst result = useSendTransaction({\n  config,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using blockNumber parameter with useEnsName\nDESCRIPTION: Shows how to use the blockNumber parameter to get an ENS name at a specific block height.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsName } from 'wagmi'\n\nfunction App() {\n  const result = useEnsName({\n    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    blockNumber: 17829139n, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using chainId Parameter in useVerifyMessage\nDESCRIPTION: Example of using the chainId parameter when verifying a message signed by a Smart Contract Account.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVerifyMessage } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useVerifyMessage({\n    chainId: mainnet.id,\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    message: 'hello world',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry Plugin Deployments in TypeScript\nDESCRIPTION: Shows how to configure deployments for different chain IDs in the Foundry plugin for Wagmi CLI.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { foundry } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    foundry({\n      deployments: {\n        Counter: {\n          1: '0x314159265dd8dbb310642f98f50c066173c1259b',\n          5: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n        },\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Token Formatting for Manual Handling (TypeScript)\nDESCRIPTION: Demonstrates how to update token-related hooks to manually format values using Viem's formatUnits function instead of relying on deprecated formatting parameters and return values.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatUnits } from 'viem' // [!code ++]\n\nconst result = useToken({\n  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  formatUnits: 'ether',\n})\nresult.data!.totalSupply.formatted  // [!code --]\nformatUnits(result.data!.totalSupply.value, 18)  // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Import useAccount Hook\nDESCRIPTION: Shows how to import the `useAccount` hook from the `wagmi` library to be used in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccount } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Configuring blockExplorer Plugin in Wagmi CLI\nDESCRIPTION: Demonstrates how to configure the blockExplorer plugin in the Wagmi CLI configuration file. It includes setting the baseUrl and defining contracts to fetch ABIs for.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { blockExplorer } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    blockExplorer({\n      baseUrl: 'https://api.etherscan.io/v2/api',\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAvatar with Custom Configuration\nDESCRIPTION: Shows how to use the useEnsAvatar composable with a custom configuration instead of using the default from WagmiPlugin.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAvatar } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst result = useEnsAvatar({\n  config,\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Fetch Options in HTTP Transport\nDESCRIPTION: Configures fetch options for the HTTP transport, useful for authentication headers and other fetch-related settings.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...', {\n  fetchOptions: { // [!code focus:5]\n    headers: {\n      'Authorization': 'Bearer ...'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Contract Deployments\nDESCRIPTION: Example showing how to configure contract deployment addresses for different chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { hardhat } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    hardhat({\n      project: '../hello_hardhat',\n      deployments: {\n        Counter: {\n          1: '0x314159265dd8dbb310642f98f50c066173c1259b',\n          5: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n        },\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Including Transaction Nonce in Gas Estimation\nDESCRIPTION: Shows how to include a transaction nonce when estimating gas requirements.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  nonce: 123,\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using getEnsText with chainId parameter\nDESCRIPTION: Shows how to specify a chain ID when using the getEnsText function to fetch data from a specific chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsText } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensText = await getEnsText(config, {\n  chainId: mainnet.id,\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config for ENS Address Lookup\nDESCRIPTION: Shows how to use a custom configuration when fetching an ENS address using useEnsAddress.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAddress } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst result = useEnsAddress({\n  config,\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useWaitForTransactionReceipt\nDESCRIPTION: Example demonstrating how to use a custom Config object with useWaitForTransactionReceipt instead of the default from WagmiPlugin.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\nimport { config } from './config' \n\nconst result = useWaitForTransactionReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  config, \n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useClient with Specific Chain ID\nDESCRIPTION: Demonstrates how to use the useClient hook with a specific chain ID parameter to get a client for a particular blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useClient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useClient } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' // [!code focus]\nimport { config } from './config'\n\nfunction App() {\n  const client = useClient({\n    chainId: mainnet.id, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using onReplaced Callback with waitForTransactionReceipt\nDESCRIPTION: Shows how to use the onReplaced callback to handle cases where the transaction has been replaced, repriced, or cancelled.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForTransactionReceipt } from '@wagmi/core'\nimport { config } from './config'\n\nconst transactionReceipt = await waitForTransactionReceipt(config, {\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  onReplaced: replacement => console.log(replacement),\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing watchNetwork with watchAccount\nDESCRIPTION: Demonstrates the updated method for monitoring account changes with the watchAccount function while passing the config object. It emphasizes improved patterns for managing blockchain state by focusing on accounts over networks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchNetwork } from '@wagmi/core' // [!code --]\nimport { watchAccount } from '@wagmi/core' // [!code ++]\nimport { config } from './config' // [!code ++]\n\nconst unwatch = watchNetwork((data) => console.log('Changed!', data)) // [!code --]\nconst unwatch = watchAccount(config, { // [!code ++]\n  onChange(data) { // [!code ++]\n    const chains = config.chains // [!code ++]\n    const chain = chains.find(chain => chain.id === data.chainId) // [!code ++]\n  }, // [!code ++]\n}) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionConfirmations with Transaction Receipt\nDESCRIPTION: Shows how to use the getTransactionConfirmations function with a transaction receipt object instead of a hash.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionConfirmations.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTransactionConfirmations } from '@wagmi/core'\nimport { config } from './config'\n\nconst transaction = getTransactionConfirmations(config, {\n  transactionReceipt: { ... },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Scope Key for Cache Management\nDESCRIPTION: Shows how to use a scopeKey to manage cache context and prevent cache conflicts between different hook invocations\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCallsStatus.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallsStatus } from 'wagmi/experimental'\nimport { config } from './config'\n\nfunction App() {\n  const result = useCallsStatus({\n    id: '0x...',\n    scopeKey: 'foo',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using chainId Parameter with useWaitForTransactionReceipt\nDESCRIPTION: Example showing how to specify a chainId when waiting for a transaction receipt, targeting a specific blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\nimport { mainnet } from '@wagmi/vue/chains'\n\nconst result = useWaitForTransactionReceipt({\n  chainId: mainnet.id, \n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useBytecode with Custom Config\nDESCRIPTION: Demonstrates how to use the useBytecode composable with a custom configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBytecode } from '@wagmi/vue'\nimport { config } from './config'\n\nconst { data: byteCode } = useBytecode({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  config,\n})\n</script>\n\n<template>\n  Byte Code: {{ byteCode }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Block Watching Implementation\nDESCRIPTION: Demonstrates basic usage of useWatchBlocks hook to monitor new blocks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchBlocks } from 'wagmi'\n\nfunction App() {\n  useWatchBlocks({\n    onBlock(block) {\n      console.log('New block', block.number)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useReadContract\nDESCRIPTION: Shows how to use a custom Config instance with useReadContract instead of retrieving from the WagmiPlugin.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi'\nimport { config } from './config' // [!code focus]\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'totalSupply',\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForCallsStatus with Scope Key\nDESCRIPTION: Shows how to use the useWaitForCallsStatus hook with a scope key for cache scoping.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWaitForCallsStatus } from 'wagmi/experimental'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useWaitForCallsStatus({\n    id: '0x...',\n    scopeKey: 'foo', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting with Specific Connector in Wagmi Core\nDESCRIPTION: Illustrates how to disconnect using a specific connector obtained from the getAccount function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/disconnect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { disconnect, getAccount } from '@wagmi/core'\nimport { config } from './config'\n\nconst { connector } = getAccount(config)\nconst result = await disconnect(config, {\n  connector, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForTransactionReceipt with Confirmations\nDESCRIPTION: Demonstrates how to use the useWaitForTransactionReceipt hook with a specified number of confirmations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from 'wagmi'\n\nfunction App() {\n  const result = useWaitForTransactionReceipt({\n    confirmations: 2,\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Transport with URL Parameter\nDESCRIPTION: Shows how to create a webSocket Transport instance with a URL parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://foo-bar-baz.quiknode.pro/...')\n```\n\n----------------------------------------\n\nTITLE: Using useEstimateMaxPriorityFeePerGas Hook in a React Component\nDESCRIPTION: This code example shows how to use the useEstimateMaxPriorityFeePerGas hook within a React component to fetch an estimate for the max priority fee per gas (in wei). The result can be used to make transaction decisions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateMaxPriorityFeePerGas.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateMaxPriorityFeePerGas } from 'wagmi'\n\nfunction App() {\n  const result = useEstimateMaxPriorityFeePerGas()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Sourcify Plugin with Wagmi CLI\nDESCRIPTION: Demonstrates how to configure the Sourcify plugin in a Wagmi CLI configuration file to fetch an ABI for a specific contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { sourcify } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    sourcify({\n      contracts: [\n        {\n          name: 'deposit',\n          address: '0x00000000219ab540356cbb839cbe05303d7705fa',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Config State Changes in wagmi\nDESCRIPTION: Demonstrates how to listen for state changes in the Config object using the subscribe method. The example shows subscribing to chainId changes and logging when the chain ID changes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config'\n\nconst unsubscribe = config.subscribe(\n  (state) => state.chainId,\n  (chainId) => console.log(`Chain ID changed to ${chainId}`),\n)\nunsubscribe()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '{{packageName}}'\nimport { mainnet, sepolia } from '{{packageName}}/chains'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEnsResolver with blockTag Parameter\nDESCRIPTION: Shows how to use the blockTag parameter to specify at which blockchain state to retrieve the ENS resolver information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsResolver } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsResolver({\n    name: normalize('wevm.eth'),\n    blockTag: 'latest', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getEnsAddress with chainId parameter\nDESCRIPTION: This snippet shows how to use the getEnsAddress function with the chainId parameter to specify the chain for fetching the ENS address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAddress } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAddress = await getEnsAddress(config, {\n  chainId: mainnet.id,\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract with Gas Price Parameter\nDESCRIPTION: Demonstrates how to use the simulateContract function with a specific gas price for legacy transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  gasPrice: parseGwei('20'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract with Chain ID Parameter\nDESCRIPTION: Demonstrates how to use the simulateContract function with a specific chain ID for validation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { mainnet } from 'wagmi/chains'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain ID in useProof Hook\nDESCRIPTION: This code snippet illustrates the use of the 'chainId' parameter in the useProof hook. A chain ID signifies the blockchain network from which to acquire proofs, necessary for multi-chain operations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useProof } from 'wagmi'\nimport { optimism } from 'wagmi/chains'\n\nfunction App() {\n  const result = useProof({\n    chainId: optimism.id, // [!code focus]\n    address: '0x4200000000000000000000000000000000000016',\n    storageKeys: [\n      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n    ],\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic watchClient Implementation\nDESCRIPTION: Demonstrates the basic usage of watchClient to monitor client changes, including setup and cleanup.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchClient.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchClient } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchClient(config, {\n  onChange(client) {\n    console.log('Client changed!', client)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Importing UseSwitchAccountParameters Type\nDESCRIPTION: Import statement for the UseSwitchAccountParameters type, which defines the available parameters for the useSwitchAccount composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchAccount.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSwitchAccountParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Custom Config Usage Example\nDESCRIPTION: Example showing how to use useSignTypedData with a custom configuration\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignTypedData.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSignTypedData } from '@wagmi/vue'\nimport { config } from './config'\n\nconst result = useSignTypedData({\n  config,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic signTypedData Usage\nDESCRIPTION: Example showing basic usage of signTypedData with types and message definition\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signTypedData } from '@wagmi/core'\nimport { config } from './config'\n\nconst result = await signTypedData(config, {\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail',\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Block Number Watching in useBlockNumber\nDESCRIPTION: Shows how to enable watching for block number changes using the watch parameter in useBlockNumber.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBlockNumber } from '@wagmi/vue'\n\nconst { data: blockNumber } = useBlockNumber({\n  watch: true,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Viem Transports in TypeScript\nDESCRIPTION: Shows how to use Viem transports with RPC provider URLs instead of the removed @wagmi/core/providers/* entrypoints in v2.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'viem'\n\nconst transport = http('https://mainnet.example.com')\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAvatar with Scope Key for Cache Control\nDESCRIPTION: Demonstrates how to use the scopeKey parameter to scope the cache to a given context, allowing composables with identical context to share the same cache.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAvatar } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAvatar({\n  name: normalize('wevm.eth'),\n  scopeKey: 'foo',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Specifying chainId in useWatchPendingTransactions\nDESCRIPTION: Shows how to specify a chainId when using the useWatchPendingTransactions hook to watch transactions on a specific chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchPendingTransactions } from 'wagmi'\n\nfunction App() {\n  useWatchPendingTransactions({\n    chainId: 1\n    onTransactions(transactions) {\n      console.log('New transactions!', transactions)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching balance with specific unit\nDESCRIPTION: Shows how to use the getBalance function with a specific unit for formatting the result.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBalance } from '@wagmi/core'\nimport { config } from './config'\n\nconst balance = getBalance(config, {\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  unit: 'ether',\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain ID for Gas Estimation\nDESCRIPTION: Demonstrates how to target a specific blockchain network by chainId when estimating gas.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { mainnet } from '@wagmi/vue/chains'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  chainId: mainnet.id,\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Polling Interval for waitForTransactionReceipt\nDESCRIPTION: Demonstrates how to set a custom polling interval when waiting for a transaction receipt. This determines how frequently the function checks for updates.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForTransactionReceipt } from '@wagmi/core'\nimport { config } from './config'\n\nconst transactionReceipt = await waitForTransactionReceipt(config, {\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  pollingInterval: 1_000,\n})\n```\n\n----------------------------------------\n\nTITLE: GetBytecode with Chain ID\nDESCRIPTION: Shows how to specify a chain ID when using getBytecode.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBytecode } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nawait getBytecode(config, {\n  chainId: mainnet.id,\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n})\n```\n\n----------------------------------------\n\nTITLE: useCall with BlockNumber Parameter\nDESCRIPTION: Illustrates the usage of the `blockNumber` parameter within the `useCall` hook to specify the block number to perform the call against. The `blockNumber` parameter accepts a `number | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    blockNumber: 15121123n, // [!code focus]\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useChains with Custom Config\nDESCRIPTION: Demonstrates how to use useChains with a custom configuration instead of the default one from WagmiPlugin.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChains.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useChains } from '@wagmi/vue'\nimport { config } from './config' // [!code focus]\n\nconst chains = useChains({\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using pollingInterval Parameter with watchBlocks\nDESCRIPTION: Demonstrates how to set a custom polling interval in milliseconds, which determines how frequently the client checks for new blocks when using polling mode.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  pollingInterval: 1_000, // [!code focus]\n  onBlock(block) {\n    console.log('Block changed!', block)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Specifying chainId Parameter\nDESCRIPTION: Example showing how to specify a chainId when using the useTransactionReceipt composable to fetch a transaction receipt from a specific blockchain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransactionReceipt } from '@wagmi/vue'\nimport { mainnet } from 'wagmi/chains'\n\nconst result = useTransactionReceipt({\n  chainId: mainnet.id, // [!code focus]\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: useCall with ChainId Parameter\nDESCRIPTION: Illustrates the usage of the `chainId` parameter within the `useCall` hook to specify the chain ID. The `chainId` parameter accepts a `config['chains'][number]['id'] | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\nimport { mainnet } from '@wagmi/core/chains'\n\nfunction App() {\n  const result = useCall({\n    chainId: mainnet.id, // [!code focus]\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useGasPrice Hook\nDESCRIPTION: Demonstrates a basic usage of the useGasPrice hook within a React functional component.  The hook returns the result of fetching the current gas price, and this snippet shows how to call the hook to obtain the gas price data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useGasPrice.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useGasPrice } from 'wagmi'\n\nfunction App() {\n  const result = useGasPrice()\n}\n```\n\n----------------------------------------\n\nTITLE: useAccountEffect with Config parameter\nDESCRIPTION: This snippet demonstrates how to use the `config` parameter with `useAccountEffect` to provide a custom Wagmi config. This allows using a specific configuration instead of relying on the nearest `WagmiProvider`.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccountEffect.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccountEffect } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  useAccountEffect({\n    config, // [!code focus]\n    onConnect(data) {\n      console.log('Connected!', data)\n    },\n    onDisconnect() {\n      console.log('Disconnected!')\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using custom config in useWatchPendingTransactions\nDESCRIPTION: Demonstrates how to use a custom config object with the useWatchPendingTransactions hook instead of the default WagmiProvider config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchPendingTransactions } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  useWatchPendingTransactions({\n    config\n    onTransactions(transactions) {\n      console.log('New transactions!', transactions)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Chain-Specific Block Watching\nDESCRIPTION: Shows how to watch blocks for a specific chain ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchBlocks } from 'wagmi'\n\nfunction App() {\n  useWatchBlocks({\n    chainId: 1,\n    onBlock(block) {\n      console.log('New block', block.number)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Prefix Configuration\nDESCRIPTION: Example of configuring WalletConnect with a custom storage prefix for persisting provider state.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nconst connector = walletConnect({\n  customStoragePrefix: 'wagmi',\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Settings\nDESCRIPTION: Shows how to configure batch settings for transaction batching using multicall.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  batch: { multicall: true }, // [!code focus]\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using WagmiPlugin in Vue.js Application\nDESCRIPTION: Demonstrates how to use the WagmiPlugin in a Vue.js application's main.ts file. It shows the setup process including importing necessary components, creating the app, and using the plugin with a config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { WagmiPlugin } from '@wagmi/vue'\n\nimport App from './App.vue'\nimport { config } from './config' \n\ncreateApp(App)\n  .use(WagmiPlugin, { config })\n  .mount('#app')\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Project ID Configuration\nDESCRIPTION: Shows how to configure WalletConnect with a project ID from WalletConnect Cloud.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nconst connector = walletConnect({\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n})\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract with Data Suffix Parameter\nDESCRIPTION: Demonstrates how to use the simulateContract function with a data suffix for appending additional data to the calldata.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  dataSuffix: '0xdeadbeef',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting maxFeePerGas for EIP-1559 Transactions\nDESCRIPTION: Shows how to set the maximum fee per gas for EIP-1559 transactions when estimating gas.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  maxFeePerGas: parseGwei('20'),\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useCapabilities with a Config Parameter - TSX\nDESCRIPTION: This snippet shows how to use the config parameter to provide a custom configuration to the useCapabilities hook, instead of using the nearest WagmiProvider configuration. This allows for more tailored calls in different contexts.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const result = useCapabilities({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using address parameter with useEnsName\nDESCRIPTION: Demonstrates using the address parameter to specify which Ethereum address to lookup an ENS name for.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsName } from 'wagmi'\n\nfunction App() {\n  const result = useEnsName({\n    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getBlockNumber\nDESCRIPTION: Example of how to use the getBlockNumber function to fetch the latest block number using a configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\nconst blockNumber = await getBlockNumber(config)\n```\n\n----------------------------------------\n\nTITLE: Using accessList Parameter with useEstimateGas\nDESCRIPTION: Example of how to use the accessList parameter when estimating gas for a transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  accessList: [{\n    address: '0x1',\n    storageKeys: ['0x1'],\n  }],\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using getBlockNumber with cacheTime Parameter\nDESCRIPTION: Example showing how to specify a custom cache time when fetching the block number, which controls how long the result is cached in memory.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\nconst blockNumber = await getBlockNumber(config, {\n  cacheTime: 4_000, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useSwitchAccount\nDESCRIPTION: Example showing how to use a custom configuration with the useSwitchAccount composable instead of the default WagmiPlugin config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchAccount.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSwitchAccount } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nconst result = useSwitchAccount({\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting value in Contract Write Operations with Wagmi in TypeScript\nDESCRIPTION: Example of using the value parameter when writing to a contract with the @wagmi/core library. This parameter specifies the amount of ether (in wei) to be sent with the transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeContract } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await writeContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  value: parseEther('0.01'), // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Value\nDESCRIPTION: Shows how to include an ETH value with the transaction. The value is specified in ETH and converted to wei using parseEther utility.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSimulateContract } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSimulateContract({\n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'transferFrom',\n    args: [\n      '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n      123n,\n    ],\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ENS Name with Block Number in Vue.js\nDESCRIPTION: This snippet shows how to use the useEnsName composable with a specific block number to fetch the ENS name at that block.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsName } from '@wagmi/vue'\n\nconst result = useEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  blockNumber: 17829139n,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest in a React Component - TypeScript\nDESCRIPTION: This example shows how to use the `usePrepareTransactionRequest` hook within a React function component, initializing a transaction request with a specific recipient and value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Connector with Feature Flags\nDESCRIPTION: Shows how to set up a mock connector with custom feature flags for error simulation and reconnection behavior.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/mock.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mock } from '{{connectorsPackageName}}'\nimport { UserRejectedRequestError } from 'viem'\n\nconst connector = mock({\n  accounts: [\n    '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',\n  ],\n  features: {\n    connectError: new UserRejectedRequestError(new Error('Failed to connect.')),\n    reconnect: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Nonce Parameter - TypeScript\nDESCRIPTION: This example shows how to set the nonce of the transaction, which uniquely identifies it among others pending in the network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n    nonce: 5,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useBalance with address parameter\nDESCRIPTION: This snippet demonstrates how to use the `useBalance` hook with the `address` parameter. The `address` parameter specifies the Ethereum address for which to fetch the balance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBalance } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useBalance({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useCall with Nonce Parameter\nDESCRIPTION: Illustrates the usage of the `nonce` parameter within the `useCall` hook to specify the unique number identifying this transaction. The `nonce` parameter accepts a `number | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    nonce: 420, // [!code focus]\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VueQueryDevtools in Vue.js\nDESCRIPTION: This snippet shows how to import and use VueQueryDevtools in a Vue component. It demonstrates the basic setup required to include the devtools in a Vue application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueQueryDevtools } from '@tanstack/vue-query-devtools'\n</script>\n\n<template>\n  <VueQueryDevtools />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAvatar with Gateway URLs for CCIP-Read Requests\nDESCRIPTION: Example showing how to specify Universal Resolver gateways for resolving CCIP-Read requests through the ENS Universal Resolver Contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAvatar } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAvatar({\n  gatewayUrls: ['https://cloudflare-ipfs.com'],\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Number in useStorageAt Hook\nDESCRIPTION: Demonstrates how to specify a block number when using the useStorageAt hook to retrieve storage data from a specific block.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStorageAt } from 'wagmi'\n\nfunction App() {\n  const result = useStorageAt({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    blockNumber: 16280770n,\n    slot: '0x0',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Relay URL Configuration\nDESCRIPTION: Shows how to configure a custom relay URL for WalletConnect communications.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nconst connector = walletConnect({\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n  relayUrl: 'wss://relay.walletconnect.org',\n})\n```\n\n----------------------------------------\n\nTITLE: Using connectors with useReconnect\nDESCRIPTION: Demonstrates how to access and use the globally configured connectors with the useReconnect composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReconnect.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReconnect } from '@wagmi/vue'\nimport { mainnet } from '@wagmi/vue/chains'\n\nconst { reconnect, connectors } = useReconnect()\n\nreconnect({ connectors })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useEnsResolver with blockNumber Parameter\nDESCRIPTION: Example showing how to specify a blockNumber when fetching an ENS resolver, allowing retrieval of resolver information at a specific blockchain state.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsResolver } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsResolver({\n    blockNumber: 17829139n, // [!code focus]\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Name for HTTP Transport\nDESCRIPTION: Assigns a custom display name to the HTTP transport.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...', {\n  name: 'Alchemy HTTP Provider', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing InjectedParameters Type\nDESCRIPTION: Shows how to import the TypeScript type definition for injected connector parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/injected.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type InjectedParameters } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: Custom Asset Gateway Configuration\nDESCRIPTION: Example demonstrating getEnsAvatar usage with custom IPFS gateway URL configuration\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAvatar } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAvatar = await getEnsAvatar(config, {\n  assetGatewayUrls: {\n    ipfs: 'https://cloudflare-ipfs.com',\n  },\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Scope Key in useProof Hook\nDESCRIPTION: This example elucidates how to use the 'scopeKey' parameter in the useProof hook. Scope keys define caching contexts so that hooks sharing a context can utilize the same cache, reducing redundant API calls.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useProof } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useProof({\n    scopeKey: 'foo' // [!code focus]\n    address: '0x4200000000000000000000000000000000000016',\n    storageKeys: [\n      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n    ],\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using ethers.js Provider with wagmi chains\nDESCRIPTION: When using an ethers.js Provider with wagmi, you now need to provide your chains on the Provider instance. This example shows how to update the configuration to include defaultChains with the ethers provider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  createClient,\n+ defaultChains\n} from 'wagmi'\nimport ethers from 'ethers'\n\nconst client = createClient({\n- provider: getDefaultProvider()\n+ provider: Object.assign(getDefaultProvider(), { chains: defaultChains })\n})\n```\n\n----------------------------------------\n\nTITLE: Using useClient with Chain ID Parameter\nDESCRIPTION: Demonstrates how to use useClient with a specific chain ID parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useClient } from '@wagmi/vue'\nimport { mainnet } from '@wagmi/vue/chains'\nimport { config } from './config'\n\nconst client = useClient({\n  chainId: mainnet.id,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using getConnectorClient with ChainId Parameter\nDESCRIPTION: Shows how to specify a particular chain ID when using getConnectorClient.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnectorClient } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst client = await getConnectorClient(config, {\n  chainId: mainnet.id, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: OnConnect Callback Implementation\nDESCRIPTION: Demonstrates implementing the onConnect callback function with useAccountEffect.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccountEffect } from '@wagmi/vue'\n\nfunction App() {\n  useAccountEffect({\n    onConnect(data) {\n      console.log('Connected!', data)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Contract Interaction Code With and Without Wagmi CLI\nDESCRIPTION: Three code examples showing the evolution of contract interaction code: the diff view, the original implementation using basic wagmi hooks, and the simplified version using Wagmi CLI generated hooks. Demonstrates how Wagmi CLI reduces boilerplate and simplifies smart contract interactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/why.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useReadContract, useWriteContract } from 'wagmi'\nimport { froggyFriendsAbi, froggyFriendsAddress } from './generated'\n\nfunction App() {\n  const { data } = useReadContract({\n    abi: froggyFriendsAbi,\n    address: froggyFriendsAddress,\n    functionName: 'tokenURI',\n    args: [123n],\n  })\n\n  const { write } = useWriteContract()\n  const onClick = React.useCallback(() => {\n    write({\n      abi: froggyFriendsAbi,\n      address: froggyFriendsAddress,\n      functionName: 'mint',\n      args: ['foo', 123n],\n    })\n  }, [write])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useReadFroggyFriends, useWriteFroggyFriends } from './generated'\n\nfunction App() {\n  const { data } = useReadFroggyFriends({\n    functionName: 'tokenURI',\n    args: [123n],\n  })\n\n  const { write } = useWriteFroggyFriends()\n  const onClick = React.useCallback(() => {\n    write({\n      functionName: 'mint',\n      args: ['foo', 123n],\n    })\n  }, [write])\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Connection Status Flags from useConnect to useAccount in React\nDESCRIPTION: The connection status flags (isConnected, isConnecting, isReconnecting, isDisconnected) have been moved from useConnect to the useAccount hook. This snippet shows how to update your imports and hook usage to accommodate this breaking change.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n-import { useConnect } from 'wagmi'\n+import { useAccount } from 'wagmi'\n\nfunction App() {\n  const {\n    isConnected,\n    isConnecting,\n    isConnecting,\n    isDisconnected\n- } = useConnect()\n+ } = useAccount()\n}\n```\n\n----------------------------------------\n\nTITLE: Using scopeKey Parameter with useEnsAddress\nDESCRIPTION: This example shows how to use the scopeKey parameter to scope the cache to a specific context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAddress({\n    name: normalize('wevm.eth'),\n    scopeKey: 'foo', \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Experimental EIP-5792 Features in wagmi 2.14.14\nDESCRIPTION: Introduces waitForCallsStatus and useWaitForCallsStatus functions for EIP-5792 support.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.14.14\n\n### Patch Changes\n\n- [#4586](https://github.com/wevm/wagmi/pull/4586) [`edf47477b2f6385a1c3ae01d36a8498c47f30a0b`](https://github.com/wevm/wagmi/commit/edf47477b2f6385a1c3ae01d36a8498c47f30a0b) Thanks [@jxom](https://github.com/jxom)! - **Experimental (EIP-5792):** Added `waitForCallsStatus` + `useWaitForCallsStatus`.\n\n- Updated dependencies [[`edf47477b2f6385a1c3ae01d36a8498c47f30a0b`](https://github.com/wevm/wagmi/commit/edf47477b2f6385a1c3ae01d36a8498c47f30a0b), [`e944812ebc234a72c1417b77cff341166f5e0fef`](https://github.com/wevm/wagmi/commit/e944812ebc234a72c1417b77cff341166f5e0fef)]:\n  - @wagmi/core@2.16.6\n  - @wagmi/connectors@5.7.10\n```\n\n----------------------------------------\n\nTITLE: Using useWalletClient with Specific Connector\nDESCRIPTION: This example demonstrates how to use the useWalletClient hook with a specific connector, utilizing the useConnections hook to get available connections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnections, useWalletClient } from 'wagmi'\n\nfunction App() {\n  const connections = useConnections(config)\n  const result = useWalletClient({\n    connector: connections[0]?.connector,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useChainId with Config Parameter\nDESCRIPTION: Demonstrates how to use the `useChainId` hook with an optional `config` parameter. This allows to specify a custom `Config` object instead of relying on the nearest `WagmiProvider`.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChainId.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChainId } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const chainId = useChainId({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Block Tag with useReadContract\nDESCRIPTION: Shows how to specify a block tag like 'latest' or 'safe' for the contract function call.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'totalSupply',\n  blockTag: 'safe', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Connectors in TypeScript\nDESCRIPTION: Shows how to import connectors from the new @wagmi/connectors package in v2, replacing the old import method from individual entrypoints.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injected } from '@wagmi/connectors'\n```\n\n----------------------------------------\n\nTITLE: Using useCapabilities with a Connector Parameter - TSX\nDESCRIPTION: This snippet demonstrates using a connector parameter in the useCapabilities hook to get the call statuses for specific connections, providing more control over the connections being used.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst connections = useConnections()\nconst result = useCapabilities({\n  connector: connections[0]?.connector, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Data Parameter\nDESCRIPTION: This snippet illustrates using the `data` parameter to pass a contract method call with encoded function data that needs gas estimation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getCallsStatus Action in TypeScript\nDESCRIPTION: Demonstrates how to use the getCallsStatus action to fetch the status of a call batch. It requires a configuration object and an id parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCallsStatus.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCallsStatus } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst status = await getCallsStatus(config, {\n  id: '0x1234567890abcdef',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing the useBytecode Hook - TypeScript\nDESCRIPTION: This snippet imports the `useBytecode` hook from the Wagmi library, which is used to retrieve bytecode at a specific address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBytecode } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi v2 Dependencies\nDESCRIPTION: Commands for installing Wagmi v2 and its peer dependencies using different package managers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add wagmi viem@{{viemVersion}} @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Configuring MetaMask Dapp Metadata\nDESCRIPTION: Example of configuring the MetaMask connector with dapp metadata including name, URL, and icon URL.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { metaMask } from '{{connectorsPackageName}}'\n\nconst connector = metaMask({\n  dappMetadata: {\n    name: 'My Wagmi App',\n    url: 'https://example.com',\n    iconUrl: 'https://example.com/favicon.ico',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Token Retrieval with Chain ID\nDESCRIPTION: Example of getting token information while specifying a particular chain ID using mainnet.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getToken } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst token = await getToken(config, {\n  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Using chainId Parameter with useEstimateFeesPerGas\nDESCRIPTION: Demonstrates how to specify a specific blockchain chainId when using the useEstimateFeesPerGas hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEstimateFeesPerGas } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' // [!code focus]\n\nfunction App() {\n  const result = useEstimateFeesPerGas({\n    chainId: mainnet.id, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with watchBlockNumber\nDESCRIPTION: Demonstrates how to handle errors that may occur when watching for block number changes using the onError callback.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlockNumber } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlockNumber(config, {\n  onBlockNumber(blockNumber) { \n    console.log('Block number changed!', blockNumber) \n  }, \n  onError(error) {\n    console.error('Block number error', error)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Verifying Raw Message Data with useVerifyMessage\nDESCRIPTION: Example of using useVerifyMessage hook with raw message data instead of UTF-8 representation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useVerifyMessage } from 'wagmi'\n\nfunction App() {\n  const result = useVerifyMessage({\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    message: { raw: '0x68656c6c6f20776f726c64' }\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry Plugin Exclusions in TypeScript\nDESCRIPTION: Demonstrates how to exclude specific artifact files or patterns in the Foundry plugin configuration for Wagmi CLI.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { foundry } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    foundry({\n      exclude: [\n        'Common.sol/**',\n        'Components.sol/**',\n        'Script.sol/**',\n        'StdAssertions.sol/**',\n        'StdInvariant.sol/**',\n        'StdError.sol/**',\n        'StdCheats.sol/**',\n        'StdMath.sol/**',\n        'StdJson.sol/**',\n        'StdStorage.sol/**',\n        'StdUtils.sol/**',\n        'Vm.sol/**',\n        'console.sol/**',\n        'console2.sol/**',\n        'test.sol/**',\n        '**.s.sol/*.json',\n        '**.t.sol/*.json',\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getBlockTransactionCount\nDESCRIPTION: Basic implementation example of getting block transaction count using the config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockTransactionCount } from '@wagmi/core'\nimport { config } from './config'\n\nconst blockTransactionCount = await getBlockTransactionCount(config)\n```\n\n----------------------------------------\n\nTITLE: Using Block Tag with useStorageAt Hook\nDESCRIPTION: Shows how to use a block tag instead of a block number when retrieving storage data with the useStorageAt hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStorageAt } from 'wagmi'\n\nfunction App() {\n  const result = useStorageAt({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    blockTag: 'safe',\n    slot: '0x0',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAvatar with Specific Block Number\nDESCRIPTION: Example demonstrating how to fetch an ENS avatar at a specific blockchain block number.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAvatar } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAvatar({\n  blockNumber: 17829139n,\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Count for unstable_connector Transport\nDESCRIPTION: This example demonstrates how to set a custom retry count for the unstable_connector Transport when using the injected Connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_connector } from 'wagmi'\nimport { injected } from 'wagmi/connectors'\n\nconst transport = unstable_connector(injected, {\n  retryCount: 5, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: ChainId Configuration\nDESCRIPTION: This code snippet demonstrates how to specify the `chainId` to use when fetching data with the `useReadContracts` hook. The chain ID is important for ensuring the contract interaction happens on the correct blockchain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI,\n        functionName: 'getChest',\n        args: [69],\n        chainId: 1  // [!code hl]\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Chain-Specific Avatar Retrieval\nDESCRIPTION: Example showing how to fetch ENS avatar for a specific chain using chainId\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAvatar } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAvatar = await getEnsAvatar(config, {\n  chainId: mainnet.id,\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: BlockTag Configuration\nDESCRIPTION: This example showcases how to configure the `blockTag` to read against with the `useReadContracts` hook. The `blockTag` allows specifying a symbolic name for a block (e.g., 'safe', 'finalized', 'latest').\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    blockTag: 'safe', // [!code hl]\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI,\n        functionName: 'getChest',\n        args: [69]\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring wagmi with unstable_connector Transport\nDESCRIPTION: This example demonstrates how to set up a wagmi configuration using the unstable_connector Transport within a fallback Transport for the mainnet chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  createConfig, \n  fallback,\n  unstable_connector, // [!code hl]\n} from '{{packageName}}'\nimport { mainnet } from '{{packageName}}/chains'\n\nexport const config = createConfig({\n  chains: [mainnet],\n  connectors: [injected()],\n  transports: {\n    [mainnet.id]: fallback([\n      unstable_connector(injected), // [!code hl]\n      http('https://foo-bar-baz.quiknode.pro/...')\n    ])\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing watchBlockNumber from @wagmi/core\nDESCRIPTION: Shows how to import the watchBlockNumber function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlockNumber } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using chainId Parameter with useVerifyTypedData\nDESCRIPTION: Example showing how to use the chainId parameter when verifying a typed data signature, which is particularly useful for Smart Contract Accounts. The chain ID specifies which network to check for contract deployment.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { domain, types } from './data'\nimport { useVerifyTypedData } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useVerifyTypedData({\n    chainId: mainnet.id,\n    domain,\n    types,\n    message: {\n      from: {\n        name: 'Cow',\n        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n      },\n      to: {\n        name: 'Bob',\n        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n      },\n      contents: 'Hello, Bob!',\n    },\n    primaryType: 'Mail',\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Using getFeeHistory with blockNumber Parameter in TypeScript\nDESCRIPTION: This example demonstrates how to use the getFeeHistory function with the optional blockNumber parameter to specify the highest block number of the requested range.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFeeHistory } from '@wagmi/core'\nimport { config } from './config'\n\nconst feeHistory = await getFeeHistory(config, {\n  blockCount: 4,\n  blockNumber: 1551231n,\n  rewardPercentiles: [25, 75],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useConnectorClient with Custom Configuration\nDESCRIPTION: Shows how to use the useConnectorClient hook with a custom configuration imported from another file.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnectorClient } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useConnectorClient({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useReconnect Hook in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `useReconnect` hook from the Wagmi library for use in a React component. It illustrates both the import statement and the component structure.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReconnect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useReconnect } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using address Parameter with useBalance\nDESCRIPTION: Demonstrates how to specify the address parameter when using the useBalance composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\nimport { mainnet } from '@wagmi/vue/chains'\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing EstimateFeesPerGasReturnType\nDESCRIPTION: Shows how to import the return type definition for the estimateFeesPerGas function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EstimateFeesPerGasReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Customizing Address Retrieval for Block Explorer in Wagmi CLI\nDESCRIPTION: Shows how to customize the function for retrieving addresses from contract configurations in the blockExplorer plugin. This allows for flexible address handling across different chain IDs.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { blockExplorer } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    blockExplorer({\n      baseUrl: 'https://api.etherscan.io/v2/api',\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n      getAddress({ address }) {\n        if (typeof address === 'string') return address\n        return Object.values(address)[0]\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Block Tag in useProof Hook\nDESCRIPTION: This example demonstrates how to use the 'blockTag' parameter in the useProof hook. Block tags enable users to specify conditions like 'latest', 'earliest', or 'pending' for proof retrieval.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useProof } from 'wagmi'\n\nfunction App() {\n  const result = useProof({\n    address: '0x4200000000000000000000000000000000000016',\n    blockTag: 'latest', // [!code focus]\n    storageKeys: [\n      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n    ],\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Connectors with useSwitchAccount\nDESCRIPTION: A complete Vue component example demonstrating how to access the connectors array and use the switchAccount function to enable account switching.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchAccount.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSwitchAccount } from 'wagmi'\n\nconst { connectors, switchAccount } = useSwitchAccount()\n</script>\n\n<template>\n  <div>\n    <button \n      v-for=\"connector in connectors\" \n      :key=\"connector.id\" \n      @click=\"switchAccount({ connector })\"\n    >\n      {{ connector.name }}\n    </button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Connect Return Type in TypeScript\nDESCRIPTION: Shows the change in return type for the `connect` action from v1 to v2. The new type better reflects multiple accounts per connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetAccountParameters, GetAccountReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Running Wagmi CLI with Custom Config File\nDESCRIPTION: Shows how to run the Wagmi CLI tool with a custom configuration file using the --config or -c option in the command line.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwagmi --config my-config.js\n```\n\n----------------------------------------\n\nTITLE: OnDisconnect Callback Implementation\nDESCRIPTION: Shows how to implement the onDisconnect callback function with useAccountEffect.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccountEffect } from '@wagmi/vue'\n\nfunction App() {\n  useAccountEffect({\n    onDisconnect() {\n      console.log('Disconnected!')\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Keys with Hooks\nDESCRIPTION: Example of accessing query keys using Wagmi hooks in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBlock } from 'wagmi'\n\nfunction App() {\n  const { queryKey } = useBlock()\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain ID for useEnsResolver Hook\nDESCRIPTION: Demonstrates how to specify a chainId when using useEnsResolver to fetch from a particular blockchain network, specifically mainnet in this example.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsResolver } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' // [!code focus]\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsResolver({\n    chainId: mainnet.id, // [!code focus]\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with blockTag Parameter\nDESCRIPTION: Example of fetching a transaction using a block tag and index.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransaction } from '@wagmi/vue'\n\nconst result = useTransaction({\n  blockTag: 'safe', // [!code focus]\n  index: 0,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Query Keys with Imports\nDESCRIPTION: Example of accessing query keys using direct imports in vanilla JavaScript context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockQueryOptions } from 'wagmi/query'\nimport { config } from './config'\n\nfunction perform() {\n  const { queryKey } = getBlockQueryOptions(config, {\n    chainId: config.state.chainId\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using blockTag parameter with useEnsName\nDESCRIPTION: Demonstrates using the blockTag parameter to specify at which block state to fetch the ENS name.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsName } from 'wagmi'\n\nfunction App() {\n  const result = useEnsName({\n    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    blockTag: 'latest', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: getStorageAt with Block Number\nDESCRIPTION: Example showing how to specify a block number when retrieving storage data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getStorageAt } from '@wagmi/core'\nimport { config } from './config'\n\nawait getStorageAt(config, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  blockNumber: 16280770n,\n  slot: '0x0',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Domains\nDESCRIPTION: Example of configuring allowed domains for Safe connector using regular expressions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/safe.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safe } from '{{connectorsPackageName}}'\n\nconst connector = safe({\n  allowedDomains: [/app.safe.global$/],\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Typed Data with Chain ID in Wagmi Core\nDESCRIPTION: This example demonstrates how to verify typed data signatures by specifying a chain ID. It's particularly useful when working with Smart Contract Accounts where verification needs to check if the contract was deployed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyTypedData } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { domain, types } from './data'\nimport { config } from './config'\n\nconst valid = await verifyTypedData(config, {\n  chainId: mainnet.id, // [!code focus]\n  domain,\n  types,\n  message: {\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n  primaryType: 'Mail',\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n// true\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Interaction with Nonce in Vue\nDESCRIPTION: This snippet shows how to use the useSimulateContract composable with a nonce parameter. It simulates a transferFrom function call on an ERC20 token contract with a specific transaction nonce.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  nonce: 123, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Reconnection Behavior in WagmiPlugin\nDESCRIPTION: Demonstrates how to set the 'reconnectOnMount' parameter when using WagmiPlugin. This controls whether previously connected connectors should reconnect on mount.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { WagmiPlugin } from '@wagmi/vue'\n\nimport App from './App.vue'\nimport { config } from './config' \n\ncreateApp(App)\n  .use(WagmiPlugin, { \n    config,\n    reconnectOnMount: false // [!code focus]\n  })\n  .mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Using emitMissed Parameter with watchBlocks\nDESCRIPTION: Shows how to enable the emitMissed option, which allows the watcher to emit notifications for blocks that may have been missed due to connection issues or timing.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  emitMissed: true, // [!code focus]\n  onBlock(block) {\n    console.log('Block changed!', block)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: useCall with Account Parameter\nDESCRIPTION: Illustrates the usage of the `account` parameter within the `useCall` hook to specify the account for the call. The `account` parameter can accept an `Account`, `Address`, or `undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using blockTag Parameter with useBalance\nDESCRIPTION: Demonstrates how to specify a block tag when fetching a balance using the useBalance composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  blockTag: 'latest', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Gas Parameter\nDESCRIPTION: Describes how to set a predefined amount of gas for the transaction using the `gas` parameter in the `useEstimateGas` function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    gas: parseGwei('20'), // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic getStorageAt Usage\nDESCRIPTION: Demonstrates basic usage of getStorageAt to retrieve storage value from a contract address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getStorageAt } from '@wagmi/core'\nimport { config } from './config'\n\nawait getStorageAt(config, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  slot: '0x0',\n})\n```\n\n----------------------------------------\n\nTITLE: Using useBlockTransactionCount with config Parameter\nDESCRIPTION: Example of providing a custom config to the useBlockTransactionCount hook instead of using the nearest WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlockTransactionCount } from 'wagmi'\nimport { config } from './config' \n\nfunction App() {\n  const result = useBlockTransactionCount({\n    config, \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Scoping Cache with scopeKey in useBlockNumber (TSX)\nDESCRIPTION: This example shows how to use 'scopeKey' to provide a contextual scope for caching, so similar hooks share the same cache.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-21_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useBlockNumber } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useBlockNumber({\n    scopeKey: 'foo', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForCallsStatus with Custom Config\nDESCRIPTION: Demonstrates how to use the useWaitForCallsStatus hook with a custom configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWaitForCallsStatus } from 'wagmi/experimental'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useWaitForCallsStatus({\n    config, // [!code focus]\n    id: '0x...',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Transaction Recipient Address\nDESCRIPTION: Shows how to specify a recipient address when estimating gas for a transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using IndexedDB as Storage\nDESCRIPTION: Shows how to use IndexedDB as the storage interface when creating a Storage object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage } from '{{packageName}}'\n// Using IndexedDB via https://github.com/jakearchibald/idb-keyval\nimport { del, get, set } from 'idb-keyval'\n\nconst storage = createStorage({\n  storage: {\n    async getItem(name) {\n      return get(name)\n    },\n    async setItem(name, value) {\n      await set(name, value)\n    },\n    async removeItem(name) {\n      await del(name)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Raw Message Verification Example\nDESCRIPTION: Example demonstrating how to verify a message using raw hexadecimal data\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyMessage.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyMessage } from '@wagmi/core'\nimport { config } from './config'\n\nawait verifyMessage(config, {\n  address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n  message: { raw: '0x68656c6c6f20776f726c64' }\n  signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n})\n```\n\n----------------------------------------\n\nTITLE: watchClient with onChange Handler\nDESCRIPTION: Illustrates implementation of the onChange callback function for handling client state changes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchClient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchClient } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchClient(config, {\n  onChange(client) {\n    console.log('Client changed!', client)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useSwitchChain\nDESCRIPTION: Example showing how to use useSwitchChain with a custom configuration instead of the default WagmiProvider config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchChain.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSwitchChain } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSwitchChain({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBlock to fetch block data by block number\nDESCRIPTION: This snippet shows how to use the `useBlock` hook with a specific block number to retrieve block information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\n\nfunction App() {\n  const result = useBlock({\n    blockNumber: 42069n // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using scopeKey parameter with useEnsName\nDESCRIPTION: Shows how to use the scopeKey parameter to scope the cache to a specific context for sharing between hooks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsName } from 'wagmi'\n\nfunction App() {\n  const result = useEnsName({\n    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    scopeKey: 'foo', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useAccountEffect with onConnect callback\nDESCRIPTION: This example highlights the `onConnect` callback within the `useAccountEffect` hook. The callback receives data about the connected account(s) and executes custom logic upon connection.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccountEffect.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAccountEffect } from 'wagmi'\n\nfunction App() {\n  useAccountEffect({\n    onConnect(data) { // [!code focus]\n      console.log('Connected!', data) // [!code focus]\n    }, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chain Property Usage in Vue Contract Simulation\nDESCRIPTION: Demonstrates basic usage of chain-specific properties like Celo's feeCurrency in a contract simulation using Wagmi Vue.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/chain-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { useSimulateContract } from '@wagmi/vue'\n\nconst result = useSimulateContract({\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n  feeCurrency: '0xâ€¦'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for WebSocket Transport\nDESCRIPTION: Demonstrates setting a custom timeout for async WebSocket requests in the Transport.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://foo-bar-baz.quiknode.pro/...', {\n  timeout: 60_000,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring useSendTransaction with Prepared Request in TypeScript\nDESCRIPTION: Shows how to use the new usePrepareSendTransaction hook to prepare the configuration for useSendTransaction, improving UX and reducing potential pitfalls.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nimport { usePrepareSendTransaction, useSendTransaction } from 'wagmi'\n\n+const { config } = usePrepareSendTransaction({\n+  request: {\n+    to: 'moxey.eth',\n+    value: parseEther('1'),\n+  }\n+})\n\nconst { data } = useSendTransaction({\n- request: {\n-   to: 'moxey.eth',\n-   value: parseEther('1')\n- }\n+ ...config\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring Config Interface in Wagmi\nDESCRIPTION: This snippet demonstrates how to extend the Wagmi module in TypeScript to include a custom configuration interface. It establishes the types for the mainnet and sepolia chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConfig.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Config } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: Config<readonly [typeof mainnet, typeof sepolia]>\n  }\n}\n// ---cut---\nimport { useConfig } from 'wagmi'\n\nfunction App() {\n  const config = useConfig()\n  //    ^?\n}\n\n```\n\n----------------------------------------\n\nTITLE: getStorageAt with Chain ID\nDESCRIPTION: Example demonstrating how to specify a chain ID when retrieving storage data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getStorageAt } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nawait getStorageAt(config, {\n  chainId: mainnet.id,\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  slot: '0x0',\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Contracts in Etherscan Plugin Configuration\nDESCRIPTION: Shows how to specify contracts for ABI fetching in the Etherscan plugin. Each contract requires a name and an address, which can be a single address or an object with chain-specific addresses.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { etherscan } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    etherscan({\n      apiKey: process.env.ETHERSCAN_API_KEY,\n      chainId: 1,\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Response Parsing Configuration - TypeScript\nDESCRIPTION: Shows how to implement custom response parsing logic for the fetched ABI data, including error handling for the API response.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/fetch.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { fetch } from '@wagmi/cli/plugins'\n \nexport default defineConfig({\n  plugins: [\n    fetch({\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n      async parse({ response }) {\n        const json = await response.json()\n        if (json.status === '0') throw new Error(json.message)\n        return json.result\n      },\n      request(contract) {\n        if (!contract.address) throw new Error('address is required')\n        const address =\n          typeof contract.address === 'string'\n            ? contract.address\n            : Object.values(contract.address)[0]\n        return {\n          url: `https://api.etherscan.io/api?module=contract&action=getabi&address=${address}`,\n        }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Wagmi and Dependencies\nDESCRIPTION: Commands for manually installing Wagmi and its dependencies (viem and @tanstack/vue-query) using different package managers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query\n```\n\n----------------------------------------\n\nTITLE: Using fetchTransaction in TypeScript\nDESCRIPTION: Example showing how to use the new fetchTransaction action to retrieve transaction details by providing a transaction hash. This action fetches and returns the transaction data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetchTransaction } from \"@wagmi/core\";\n\nconst transaction = await fetchTransaction({\n  hash: \"0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060\",\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Hardhat Plugin Configuration\nDESCRIPTION: Example of basic plugin configuration in Wagmi CLI config file.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { hardhat } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    hardhat({\n      project: '../hello_hardhat',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionCount with Block Tag Parameter\nDESCRIPTION: This example demonstrates using the useTransactionCount hook with a block tag to get the transaction count at a specific state of the blockchain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionCount } from 'wagmi'\n\nfunction App() {\n  const result = useTransactionCount({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    blockTag: 'latest',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using polling in useWatchPendingTransactions\nDESCRIPTION: Demonstrates how to enable polling for checking new pending transactions instead of using WebSocket subscriptions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchPendingTransactions } from 'wagmi'\n\nfunction App() {\n  useWatchPendingTransactions({\n    onTransactions(transactions) {\n      console.log('New transactions!', transactions)\n    },\n    poll: true,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Preference\nDESCRIPTION: Shows how to set wallet preferences for Coinbase Wallet connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinbaseWallet } from '{{connectorsPackageName}}'\n\nconst connector = coinbaseWallet({\n  appName: 'My Wagmi App',\n  preference: 'smartWalletOnly',\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching ENS Name with Chain ID in Vue.js\nDESCRIPTION: This snippet shows how to use the useEnsName composable with a specific chain ID to fetch the ENS name from a particular network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsName } from '@wagmi/vue'\nimport { mainnet } from 'wagmi/chains'\n\nconst result = useEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  chainId: mainnet.id,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useConnectorClient with ChainId Parameter\nDESCRIPTION: Shows how to specify a chainId when using the useConnectorClient composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnectorClient } from '@wagmi/vue'\n\nconst result = useConnectorClient({\n  chainId: mainnet.id, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Cache Key Configuration - TypeScript\nDESCRIPTION: Demonstrates how to customize the cache key generation for contract data storage. The cache is stored at ~/.wagmi-cli/plugins/fetch/cache/.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/fetch.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { fetch } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    fetch({\n      contracts: [\n        {\n          name: 'wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n      getCacheKey({ contract }) {\n        if (typeof contract.address === 'string')\n          return `${name}:${contract.address}`\n        return `${name}:${JSON.stringify(contract.address)}`\n      },\n      request(contract) {\n        if (!contract.address) throw new Error('address is required')\n        const address =\n          typeof contract.address === 'string'\n            ? contract.address\n            : Object.values(contract.address)[0]\n        return {\n          url: `https://api.etherscan.io/api?module=contract&action=getabi&address=${address}`,\n        }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Coin Type for ENS Address Lookup\nDESCRIPTION: Demonstrates how to set a coin type when fetching an ENS address using useEnsAddress.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAddress } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAddress({\n  coinType: 60,\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using cookieToInitialState in a server handler\nDESCRIPTION: Example of using cookieToInitialState in a server-side handler to convert request cookies into initial state.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/cookieToInitialState.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookieToInitialState } from 'wagmi'\nimport config from './config'\n\nfunction handler(req: Request) {\n  const initialState = cookieToInitialState(config, req.headers.cookie)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useTransactionReceipt\nDESCRIPTION: Demonstrates basic implementation of useTransactionReceipt hook with a transaction hash parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionReceipt.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionReceipt } from 'wagmi'\n\nfunction App() {\n  const result = useTransactionReceipt({\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using the chainId Parameter - TSX\nDESCRIPTION: This snippet demonstrates how to use the `chainId` parameter in the `useBytecode` hook to specify the network's chain ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBytecode } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useBytecode({\n    chainId: mainnet.id, // [!code focus]\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chain ID Parameter\nDESCRIPTION: Example showing how to watch blocks for a specific chain ID using the chainId parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchBlockNumber } from 'wagmi'\n\nfunction App() {\n  useWatchBlockNumber({\n    chainId: 1,\n    onBlockNumber(blockNumber) {\n      console.log('New block number', blockNumber)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Config Implementation\nDESCRIPTION: Shows how to use a custom config with the useWatchBlockNumber hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchBlockNumber } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  useWatchBlockNumber({\n    config,\n    onBlockNumber(blockNumber) {\n      console.log('New block number', blockNumber)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Wagmi Client Configuration in TypeScript\nDESCRIPTION: Example of adding a custom logger to the wagmi client configuration. Shows how to pass in a custom logging function or disable logging.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n+ import { logWarn } from './logger';\n\nconst client = createClient({\n  ...\n+ logger: {\n+   warn: message => logWarn(message)\n+ }\n  ...\n})\n\n// Disabling logging\nconst client = createClient({\n  ...\n+ logger: {\n+   warn: null\n+ }\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForCallsStatus with Polling Interval\nDESCRIPTION: Demonstrates how to use the useWaitForCallsStatus hook with a custom polling interval.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForCallsStatus } from '@wagmi/core'\nimport { config } from './config'\n\nconst status = await useWaitForCallsStatus({\n  id: '0x1234567890abcdef',\n  pollingInterval: 1_000, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Handling errors in useWatchPendingTransactions\nDESCRIPTION: Shows how to use the onError callback to handle errors that occur while watching pending transactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchPendingTransactions } from 'wagmi'\n\nfunction App() {\n  useWatchPendingTransactions({\n    onError(error) {\n      console.log('Error', error)\n    },\n    onTransactions(transactions) {\n      console.log('New transactions!', transactions)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Including Contract Data in Gas Estimation\nDESCRIPTION: Example of including contract method call data when estimating gas for a transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Options for watchAsset\nDESCRIPTION: Shows how to configure the token options including address, symbol, and decimals when using the watchAsset action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchAsset } from '@wagmi/core'\nimport { config } from './config'\n\nconst result = await watchAsset(config, {\n  options: { // [!code focus]\n    address: '0x0000000000000000000000000000000000000000', // [!code focus]\n    symbol: 'WAGMI', // [!code focus]\n    decimals: 18, // [!code focus]\n  }, // [!code focus]\n  type: 'ERC20',\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Transaction Hash Parameter\nDESCRIPTION: Example showing how to specify the transaction hash, which is a required parameter for the useWaitForTransactionReceipt composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\n\nconst result = useWaitForTransactionReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d', \n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain ID for Block Explorer in Wagmi CLI\nDESCRIPTION: Demonstrates how to set the chain ID for the block explorer in the Wagmi CLI configuration. The chain ID is appended to the request URL as a query parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { blockExplorer } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    blockExplorer({\n      apiKey: process.env.ETHERSCAN_API_KEY,\n      baseUrl: 'https://api.etherscan.io/v2/api',\n      chainId: 1,\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Inline ABI Configuration TypeScript\nDESCRIPTION: Illustrates how to define the ABI inline within a function call to leverage TypeScript type inference. By defining the ABI inline, developers can benefit from auto-completion and error detection, ensuring smooth integration with TypeScript advanced typing features.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst result = await readContract({\n  abi: [â€¦], // <--- defined inline\n})\n```\n\n----------------------------------------\n\nTITLE: Error Type Import\nDESCRIPTION: Shows how to import the SwitchChainErrorType type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SwitchChainErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout in HTTP Transport\nDESCRIPTION: Sets the timeout duration in milliseconds for HTTP requests.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...', {\n  timeout: 60_000, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Duration in Etherscan Plugin\nDESCRIPTION: Shows how to set the cache duration for ABIs in the Etherscan plugin. The duration is specified in milliseconds, with a default of 30 minutes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { etherscan } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    etherscan({\n      apiKey: process.env.ETHERSCAN_API_KEY,\n      cacheDuration: 300_000,\n      chainId: 1,\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Universal Resolver Configuration\nDESCRIPTION: Example demonstrating how to use a custom Universal Resolver Contract address\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAvatar } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAvatar = await getEnsAvatar(config, {\n  name: normalize('wevm.eth'),\n  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Number for Contract Call\nDESCRIPTION: Shows how to call a contract function at a specific historical block number using the blockNumber parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'totalSupply',\n  blockNumber: 17829139n, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the useBytecode Hook in a React Component - TSX\nDESCRIPTION: This snippet shows how to use the `useBytecode` hook in a React component to fetch bytecode using a hardcoded address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBytecode } from 'wagmi'\n\nfunction App() {\n  const result = useBytecode({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Count for WebSocket Transport\nDESCRIPTION: Demonstrates setting a custom retry count for failed requests in the WebSocket Transport.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://foo-bar-baz.quiknode.pro/...', {\n  retryCount: 5,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Duration for Block Explorer in Wagmi CLI\nDESCRIPTION: Shows how to set the cache duration for ABIs fetched from the block explorer. The duration is specified in milliseconds, with a default of 30 minutes if not set.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { blockExplorer } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    blockExplorer({\n      baseUrl: 'https://api.etherscan.io/v2/api',\n      cacheDuration: 300_000,\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAvatar with Specific Chain ID\nDESCRIPTION: Demonstrates how to specify a chain ID when fetching an ENS avatar, allowing queries on a specific blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAvatar } from '@wagmi/vue'\nimport { mainnet } from 'wagmi/chains'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAvatar({\n  chainId: mainnet.id,\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Basic HTTP Transport with URL\nDESCRIPTION: Initializes an HTTP transport with just the URL parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...')\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain ID for Contract Call\nDESCRIPTION: Demonstrates how to specify a specific blockchain network for the contract call using the chainId parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { mainnet } from 'wagmi/chains' // [!code focus]\nimport { abi } from './abi'\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'totalSupply',\n  chainId: mainnet.id, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing UseConfigReturnType from Wagmi\nDESCRIPTION: This snippet shows how to import the UseConfigReturnType type from wagmi. This type can be used to enforce type checking for the value returned by the useConfig hook when using TypeScript.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConfig.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConfigReturnType } from 'wagmi'\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useEnsName in Vue.js\nDESCRIPTION: This example demonstrates how to use a custom configuration with the useEnsName composable in a Vue component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsName } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst result = useEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  config,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using config Parameter in useVerifyMessage\nDESCRIPTION: Example of using a custom config with the useVerifyMessage hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVerifyMessage } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useVerifyMessage({\n    config,\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    message: 'hello world',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getPublicClient with a specific chainId\nDESCRIPTION: Demonstrates how to use the getPublicClient function with a specific chainId parameter to retrieve a Viem PublicClient for a particular chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getPublicClient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getPublicClient } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst client = getPublicClient(config, {\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Using the config Parameter - TSX\nDESCRIPTION: This snippet shows how to customize the configuration by passing a `config` object to the `useBytecode` hook instead of relying on the default provider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBytecode } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useBytecode({\n    config, // [!code focus]\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Running Wagmi Code Generation Command\nDESCRIPTION: Commands for executing the code generation process using different package managers after configuring contracts and plugins.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm wagmi generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx wagmi generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn wagmi generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun wagmi generate\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Connector for Call Status\nDESCRIPTION: Illustrates how to use a specific blockchain connector when retrieving call batch status, useful for multi-wallet or multi-chain applications\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCallsStatus.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallsStatus, useConnections } from 'wagmi/experimental'\nimport { config } from './config'\n\nfunction App() {\n  const connections = useConnections()\n  const result = useCallsStatus({\n    connector: connections[0]?.connector,\n    id: '0x...',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Prefetching Query Data on User Events with wagmi\nDESCRIPTION: Shows how to prefetch block data when a user hovers over or focuses on a link, improving perceived performance. This technique populates the query cache before data is actually needed, providing immediate access when the user navigates.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'next/link'\nimport { getBlockQueryOptions } from 'wagmi'\n\nfunction App() {\n  const config = useConfig()\n  const chainId = useChainId()\n\n  // 1. Set up a function to prefetch the block data. \n  const prefetch = () => \n    queryClient.prefetchQuery(getBlockQueryOptions(config, { chainId })) \n  \n\n  return (\n    <Link\n      // 2. Add event handlers to prefetch the block data \n      // when user hovers over or focuses on the button. \n      onMouseEnter={prefetch} \n      onFocus={prefetch} \n      to=\"/block-details\"\n    >\n      Block details\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEnsText with Custom Config\nDESCRIPTION: Shows how to use useEnsText with a custom configuration object instead of the default from WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsText } from 'wagmi'\nimport { normalize } from 'viem/ens'\nimport { config } from './config' \n\nfunction App() {\n  const result = useEnsText({\n    config, \n    name: normalize('wevm.eth'),\n    key: 'com.twitter',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Return Type of useChains\nDESCRIPTION: This snippet specifies the type of the data returned by the useChains hook, detailing that it returns a read-only array of Chain objects derived from the provided configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChains.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseChainsReturnType } from 'wagmi'\n\n`readonly [Chain, ...Chain[]]`\n\nChains from [`config.chains`](/react/api/createConfig#chains).\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useEnsResolver Hook\nDESCRIPTION: Shows how to provide a custom config to the useEnsResolver hook instead of using the nearest WagmiProvider's configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsResolver } from 'wagmi'\nimport { normalize } from 'viem/ens'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useEnsResolver({\n    config, // [!code focus]\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Vue Composables\nDESCRIPTION: Example showing how to import a composable from the @wagmi/vue package. Demonstrates the standard import pattern for accessing Wagmi's Vue composables.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccount } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Adding API Key to alchemyProvider in wagmi\nDESCRIPTION: The snippet shows the modification required to include an 'apiKey' parameter when configuring alchemyProvider within the wagmi library. Makes the parameter mandatory to work with Alchemy's API services.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nimport { configureChains } from 'wagmi'\\n\\nconst config = configureChains(defaultChains, [\\n- alchemyProvider(),\\n+ alchemyProvider({ apiKey: process.env.ALCHEMY_API_KEY })\\n])\n```\n\n----------------------------------------\n\nTITLE: watchAccount onChange Handler Example\nDESCRIPTION: Demonstrates implementation of the onChange callback function for handling account changes with type information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAccount.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchAccount } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchAccount(config, {\n  onChange(account) {\n    console.log('Account changed!', account)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Price for Legacy Transactions\nDESCRIPTION: Shows how to set the gasPrice parameter for legacy transactions. The price is specified in Gwei using parseGwei and applies only to legacy transaction types.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSimulateContract } from 'wagmi'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSimulateContract({\n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'transferFrom',\n    args: [\n      '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n      123n,\n    ],\n    gasPrice: parseGwei('20'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Token Retrieval with Format Units\nDESCRIPTION: Example showing how to specify format units when retrieving token information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getToken } from '@wagmi/core'\nimport { config } from './config'\n\nconst token = getToken(config, {\n  address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  formatUnits: 'ether',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Wagmi Composables in Vue Component\nDESCRIPTION: Example Vue component demonstrating auto-imported Wagmi composables usage. Shows how to access account information without explicit imports.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/Nuxt.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// No need to import `useAccount`!\nconst account = useAccount()\n</script>\n\n<template>\n  Address: {{ account.address }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useEnsAvatar with ENS Name Normalization\nDESCRIPTION: Shows how to use the useEnsAvatar composable with a normalized ENS name. Normalization is important as ENS names prohibit certain characters and have validation rules.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAvatar } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAvatar({\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing RPC URLs from Chain Objects\nDESCRIPTION: Update pattern for accessing RPC URLs directly from chain objects after the removal of separate RPC URL exports for providers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n- import { alchemyRpcUrls, infuraRpcUrls, publicRpcUrls } from '@wagmi/core'\n+ import { mainnet } from '@wagmi/core/chains'\n\n-const mainnetAlchemyRpcUrl = alchemyRpcUrls.mainnet\n-const mainnetInfuraRpcUrl = infuraRpcUrls.mainnet\n-const mainnetOptimismRpcUrl = publicRpcUrls.mainnet\n+const mainnetAlchemyRpcUrl = mainnet.rpcUrls.alchemy\n+const mainnetInfuraRpcUrl = mainnet.rpcUrls.infura\n+const mainnetOptimismRpcUrl = mainnet.rpcUrls.optimism\n```\n\n----------------------------------------\n\nTITLE: Consolidating writeContract Parameters in wagmi\nDESCRIPTION: The writeContract function parameters have been consolidated into a singular config parameter, similar to the readContract change. This provides a more consistent API across the library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nwriteContract(\n  {\n    addressOrName: \"0xecb504d39723b0be0e3a9aa33d646642d1051ee1\",\n    contractInterface: wagmigotchiABI,\n  },\n  \"feed\",\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadContract({\n  addressOrName: \"0xecb504d39723b0be0e3a9aa33d646642d1051ee1\",\n  contractInterface: wagmigotchiABI,\n  functionName: \"feed\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using useConnectorClient with a Specific Chain ID\nDESCRIPTION: Demonstrates how to specify a chain ID when using the useConnectorClient hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnectorClient } from 'wagmi'\n\nfunction App() {\n  const result = useConnectorClient({\n    chainId: mainnet.id, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useFeeHistory with blockTag parameter\nDESCRIPTION: This code illustrates the usage of the `blockTag` parameter in the `useFeeHistory` hook.  The `blockTag` parameter defines the block tag of the highest number block of the requested range, influencing which block is used as the end of the range for fetching gas history.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFeeHistory } from 'wagmi'\n\nfunction App() {\n  const result = useFeeHistory({\n    blockCount: 4,\n    blockTag: 'safe', // [!code focus]\n    rewardPercentiles: [25, 75]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Usage with Cache Time Parameter\nDESCRIPTION: Example showing how to use getBlockTransactionCount with a custom cache time parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockTransactionCount } from '@wagmi/core'\nimport { config } from './config'\n\nconst blockTransactionCount = await getBlockTransactionCount(config, {\n  cacheTime: 4_000,\n})\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction to send Ethereum\nDESCRIPTION: Demonstrates how to use the sendTransaction function to send 0.01 ETH to a specific address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Using scopeKey Parameter in useVerifyMessage\nDESCRIPTION: Example of using the scopeKey parameter to scope the cache in useVerifyMessage hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVerifyMessage } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useVerifyMessage({\n    scopeKey: 'foo'\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    message: 'hello world',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deserialize Function with bigint Support\nDESCRIPTION: Demonstrates how to use the deserialize function to parse a JSON string containing a bigint value, which would normally not be supported by standard JSON.parse().\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/deserialize.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deserialize } from '{{packageName}}'\n\nconst result = deserialize('{\"foo\":\"wagmi\",\"bar\":{\"__type\":\"bigint\",\"value\":\"123\"}}')\n```\n\n----------------------------------------\n\nTITLE: watchConnections with onChange Handler\nDESCRIPTION: Example showing the onChange callback implementation in watchConnections with focused lines highlighting the handler function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnections.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchConnections } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchConnections(config, {\n  onChange(data) {\n    console.log('Connections changed!', data)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using config parameter with useEnsName\nDESCRIPTION: Demonstrates passing a custom configuration to the useEnsName hook instead of using the nearest WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsName } from 'wagmi'\nimport { normalize } from 'viem/ens'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useEnsName({\n    address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Config\nDESCRIPTION: Example demonstrating how to provide a custom config to the useTransactionReceipt composable instead of using the default from WagmiPlugin.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransactionReceipt } from '@wagmi/vue'\nimport { config } from './config' // [!code focus]\n\nconst result = useTransactionReceipt({\n  config, // [!code focus]\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Polling Interval Configuration\nDESCRIPTION: Shows how to configure the polling interval for waitForCallsStatus.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForCallsStatus } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst status = await waitForCallsStatus(config, {\n  id: '0x1234567890abcdef',\n  pollingInterval: 1_000,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useShowCallsStatus Hook in React\nDESCRIPTION: Illustrates how to use a custom configuration with the useShowCallsStatus hook in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useShowCallsStatus.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShowCallsStatus } from 'wagmi/experimental'\nimport { config } from './config'\n\nfunction App() {\n  const result = useShowCallsStatus({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: QR Modal Options Configuration\nDESCRIPTION: Example of configuring the QR modal display options for WalletConnect.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nconst connector = walletConnect({\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n  qrModalOptions: {\n    themeMode: 'dark',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionReceipt with Scope Key\nDESCRIPTION: Shows how to use useTransactionReceipt hook with a scope key for cache control.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionReceipt.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionReceipt } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useTransactionReceipt({\n    scopeKey: 'foo'\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useCallsStatus Hook\nDESCRIPTION: Shows a basic implementation of the useCallsStatus hook with a call batch identifier, used to fetch the status of a previously sent batch of calls\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCallsStatus.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const result = useCallsStatus({\n    id: '0x...', // Call batch identifier\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useConnections with Custom Configuration\nDESCRIPTION: Shows how to pass a custom configuration object to the useConnections hook\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnections.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnections } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const connections = useConnections({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Chain ID Configuration\nDESCRIPTION: Demonstrates how to specify a specific chain ID for transaction monitoring\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchPendingTransactions } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst unwatch = watchPendingTransactions(config, {\n  chainId: mainnet.id,\n  onTransactions(transactions) {\n    console.log('New transactions!', transactions)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Provider Injection\nDESCRIPTION: Demonstrates how to configure the shimAsyncInject parameter for handling asynchronously injected providers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/injected.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injected } from '{{connectorsPackageName}}'\n\nconst connector = injected({\n  unstable_shimAsyncInject: 2_000,\n})\n```\n\n----------------------------------------\n\nTITLE: Using getFeeHistory with chainId Parameter in TypeScript\nDESCRIPTION: This example demonstrates how to use the getFeeHistory function with the optional chainId parameter to specify the chain ID for fetching data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFeeHistory } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst feeHistory = await getFeeHistory(config, {\n  blockCount: 4,\n  chainId: mainnet.id,\n  rewardPercentiles: [25, 75],\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Data with wagmi Query Options\nDESCRIPTION: Shows how to fetch block data imperatively using TanStack Query's fetchQuery method with wagmi's getBlockQueryOptions. This approach allows retrieving blockchain data outside of React components while leveraging the query cache.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBlockQueryOptions } from 'wagmi'\nimport { queryClient } from './app'\nimport { config } from './config'\n\nexport async function fetchBlockData() {\n  return queryClient.fetchQuery( \n    getBlockQueryOptions(config, { \n      chainId: config.state.chainId, \n    } \n  )) \n}\n```\n\n----------------------------------------\n\nTITLE: useFeeHistory with chainId parameter\nDESCRIPTION: This example demonstrates how to use the `chainId` parameter with the `useFeeHistory` hook. The `chainId` parameter specifies the ID of the chain to use when fetching gas data, allowing the hook to target a specific blockchain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFeeHistory } from 'wagmi'\nimport { mainnet } from '@wagmi/core/chains'\n\nfunction App() {\n  const result = useFeeHistory({\n    blockCount: 4,\n    chainId: mainnet.id, // [!code focus]\n    rewardPercentiles: [25, 75]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForCallsStatus with Timeout\nDESCRIPTION: Demonstrates how to use the useWaitForCallsStatus hook with a custom timeout value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForCallsStatus } from '@wagmi/core'\nimport { config } from './config'\n\nconst status = await useWaitForCallsStatus({\n  id: '0x1234567890abcdef',\n  timeout: 10_000, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing readContract Function\nDESCRIPTION: Example showing how to import the readContract function from @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readContract } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Explorers from Chain Objects\nDESCRIPTION: Method for extracting block explorer information directly from chain objects after the removal of the etherscanBlockExplorers export.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n- import { etherscanBlockExplorers } from '@wagmi/core'\n+ import { mainnet, polygon, optimism } from '@wagmi/core/chains'\n\n-const mainnetEtherscanBlockExplorer = etherscanBlockExplorers.mainnet\n-const polygonEtherscanBlockExplorer = etherscanBlockExplorers.polygon\n-const optimismEtherscanBlockExplorer = etherscanBlockExplorers.optimism\n+const mainnetEtherscanBlockExplorer = mainnet.blockExplorer\n+const polygonEtherscanBlockExplorer = polygon.blockExplorer\n+const optimismEtherscanBlockExplorer = optimism.blockExplorer\n```\n\n----------------------------------------\n\nTITLE: Basic Import Example\nDESCRIPTION: Shows how to import the watchPendingTransactions function\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchPendingTransactions } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using scopeKey Parameter with useBalance\nDESCRIPTION: Shows how to use the scopeKey parameter to scope the cache to a specific context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  scopeKey: 'foo', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAddress in Vue Component\nDESCRIPTION: Demonstrates how to use the useEnsAddress composable within a Vue component to fetch an ENS address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAddress } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAddress({\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: SendCalls with Connector\nDESCRIPTION: Example showing how to use sendCalls with a specific connector configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { getConnections } from '@wagmi/core'\nimport { sendCalls } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst connections = getConnections(config)\nconst id = await sendCalls(config, {\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      data: '0xdeadbeef',\n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    },\n  ],\n  connector: connections[0]?.connector,\n})\n```\n\n----------------------------------------\n\nTITLE: useBalance with chainId parameter\nDESCRIPTION: This snippet demonstrates how to use the `useBalance` hook with the `chainId` parameter. The `chainId` parameter specifies the chain to use when fetching data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBalance } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' // [!code focus]\n\nfunction App() {\n  const result = useBalance({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    chainId: mainnet.id, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json for wagmi\nDESCRIPTION: This snippet shows an update to the dependencies in the package.json file, adding 'abitype' to ensure correct type shipping.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"abitype\": \"<version>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Gas Price Parameter\nDESCRIPTION: Illustrates the implementation of the `gasPrice` parameter to set the price per gas for legacy transactions within the `useEstimateGas` hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    gasPrice: parseGwei('20'), // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using the scopeKey Parameter\nDESCRIPTION: Example of using the scopeKey parameter to scope the cache context when using the useTransactionReceipt composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransactionReceipt } from '@wagmi/vue'\nimport { config } from './config'\n\nconst result = useTransactionReceipt({\n  scopeKey: 'foo' // [!code focus]\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Type Parameter\nDESCRIPTION: This snippet demonstrates how to specify the transaction request type using the `type` parameter in the `useEstimateGas` hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    type: 'eip1559', // [!code focus]\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionReceipt with Chain ID\nDESCRIPTION: Shows how to use useTransactionReceipt hook with a specific chain ID parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionReceipt.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionReceipt } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useTransactionReceipt({\n    chainId: mainnet.id,\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useClient Parameters Type\nDESCRIPTION: Shows how to import the type definition for useClient hook parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseClientParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using useEnsText with Custom Universal Resolver Address\nDESCRIPTION: Shows how to specify a custom ENS Universal Resolver Contract address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsText } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsText({\n    name: normalize('wevm.eth'),\n    key: 'com.twitter',\n    universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376', \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Chain ID Usage in Contract Write\nDESCRIPTION: Demonstrates moving chainId configuration from usePrepareContractWrite to useContractWrite to defer network validation until execution.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nimport { usePrepareContractWrite, useContractWrite } from 'wagmi'\nimport { optimism } from 'wagmi/chains'\n\n// ...\n\nconst { config } = usePrepareContractWrite({\n  addressOrName: '0xaf0326d92b97df1221759476b072abfd8084f9be',\n  contractInterface: ['function mint()'],\n  functionName: 'mint',\n})\nconst { write } = useContractWrite({\n  ...config,\n+ chainId: optimism.id\n})\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Account Parameter - TypeScript\nDESCRIPTION: This snippet demonstrates how to specify the 'account' parameter in the `usePrepareTransactionRequest` hook to set the sender's account for the transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using coinType Parameter for Multi-chain Resolution\nDESCRIPTION: This example shows how to use the coinType parameter for ENSIP-9 multi-chain address resolution.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAddress({\n    coinType: 60, \n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Time for useBlockNumber (TSX)\nDESCRIPTION: Demonstrates how to configure the cache time parameter for 'useBlockNumber'. This parameter sets the duration for which the block number will be cached in memory.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-21_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useBlockNumber } from 'wagmi'\n\nfunction App() {\n  const result = useBlockNumber({\n    cacheTime: 4_000, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using syncConnectedChain Parameter with watchBlocks\nDESCRIPTION: Shows how to disable chain synchronization, which controls whether the watcher should automatically adjust to changes in the connected blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  onBlock(block) {\n    console.log('Block changed!', block)\n  },\n  syncConnectedChain: false, // [!code focus]\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: useBalance with token parameter\nDESCRIPTION: This snippet demonstrates how to use the `useBalance` hook with the deprecated `token` parameter. The `token` parameter specifies the ERC-20 token address for which to get the balance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { useBalance } from 'wagmi'\n\nfunction App() {\n  const result = useBalance({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    token: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using scopeKey for Cache Scoping\nDESCRIPTION: Example of using the scopeKey parameter to scope the cache to a specific context for gas estimations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  scopeKey: 'foo',\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using chainId Parameter with watchBlockNumber\nDESCRIPTION: Shows how to specify a chain ID when using watchBlockNumber to watch for block number changes on a specific chain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlockNumber.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlockNumber } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst unwatch = watchBlockNumber(config, {\n  chainId: mainnet.id,\n  onBlockNumber(blockNumber) {\n    console.log('Block number changed!', blockNumber)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useReconnect in Vue\nDESCRIPTION: Demonstrates how to use the useReconnect composable in a Vue component to reconnect wallet connectors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReconnect.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReconnect } from '@wagmi/vue'\nimport { useEffect } from 'react'\n\nconst { reconnect } = useReconnect()\n\nreconnect()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Chain Objects in Wagmi\nDESCRIPTION: Demonstrates how to import chain definitions like 'mainnet' from the 'wagmi/chains' entrypoint, which proxies all chains from 'viem/chains'.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/chains.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mainnet } from 'wagmi/chains'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useDeployContract in React TypeScript\nDESCRIPTION: Demonstrates how to use a custom configuration with the useDeployContract hook in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDeployContract } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useDeployContract({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CreateConnectorFn Type\nDESCRIPTION: Shows how to import the CreateConnectorFn type definition from @wagmi/core for type safety when creating connectors\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/createConnector.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateConnectorFn } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using chainId Parameter with useBalance\nDESCRIPTION: Shows how to specify a specific chain ID when fetching a balance using the useBalance composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\nimport { mainnet } from '@wagmi/vue/chains' // [!code focus]\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  chainId: mainnet.id, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi and Vue Query in Vue.js Application Entry Point\nDESCRIPTION: This snippet demonstrates the setup of Wagmi and Vue Query in the main entry point of a Vue.js application. It includes creating a QueryClient with custom options, and using the WagmiPlugin and VueQueryPlugin in the Vue app instance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { createApp } from 'vue'\nimport { WagmiPlugin } from '@wagmi/vue'\nimport { QueryClient, VueQueryPlugin } from '@tanstack/vue-query'\n\nimport App from './App.vue'\nimport { config } from './config' \n\nconst queryClient = new QueryClient({ // [!code hl]\n  defaultOptions: { // [!code hl]\n    queries: { // [!code hl]\n      queryKeyHashFn: hashFn, // [!code hl]\n    }, // [!code hl]\n  }, // [!code hl]\n}); // [!code hl]\n\ncreateApp(App)\n  .use(WagmiPlugin, { config })\n  .use(VueQueryPlugin, { queryClient }) // [!code hl]\n  .mount('#app')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry Plugin Artifacts Directory in TypeScript\nDESCRIPTION: Demonstrates how to set the artifacts directory for the Foundry plugin in the Wagmi CLI configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { foundry } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    foundry({\n      artifacts: 'out/',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Vue Package with PNPM\nDESCRIPTION: Command to install the Wagmi Vue package and its dependencies using PNPM. It includes the core package, Viem with a specific version, and TanStack Query.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query\n```\n\n----------------------------------------\n\nTITLE: Detecting Errors with TypeScript\nDESCRIPTION: This snippet is used to demonstrate error handling and prevention with TypeScript in the Wagmi context. By introducing intentional errors, it helps in verifying whether the TypeScript setup is correctly configured to catch discrepancies, ensuring robust API interaction and contract reading procedures.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/typescript.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @errors: 2820\nimport { createConfig, http } from '@wagmi/core'\nimport { mainnet, sepolia } from '@wagmi/core/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\nconst erc721Abi = [\n  {\n    name: 'balanceOf',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'address', name: 'owner' }],\n    outputs: [{ type: 'uint256' }],\n  },\n  {\n    name: 'isApprovedForAll',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [\n      { type: 'address', name: 'owner' },\n      { type: 'address', name: 'operator' },\n    ],\n    outputs: [{ type: 'bool' }],\n  },\n  {\n    name: 'getApproved',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'uint256', name: 'tokenId' }],\n    outputs: [{ type: 'address' }],\n  },\n  {\n    name: 'ownerOf',\n    type: 'function',\n    stateMutability: 'view',\n    inputs: [{ type: 'uint256', name: 'tokenId' }],\n    outputs: [{ type: 'address' }],\n  },\n  {\n    name: 'tokenURI',\n    type: 'function',\n    stateMutability: 'pure',\n    inputs: [{ type: 'uint256', name: 'tokenId' }],\n    outputs: [{ type: 'string' }],\n  },\n] as const\n// ---cut---\nimport { readContract } from '@wagmi/core'\n\nreadContract(config, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: erc721Abi,\n  functionName: 'balanecOf',\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing the useProof Hook in Wagmi with TSX\nDESCRIPTION: This snippet illustrates how to initialize the useProof hook from the Wagmi library in a React application using TSX. It demonstrates the basic import and usage pattern for accessing account and storage proofs.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useProof } from 'wagmi'\n\nfunction App() {\n  const result = useProof({\n    address: '0x4200000000000000000000000000000000000016',\n    storageKeys: [\n      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n    ],\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useDisconnect Hook\nDESCRIPTION: Illustrates how to use a custom configuration with the useDisconnect hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDisconnect.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDisconnect } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useDisconnect({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Import useBalance from wagmi\nDESCRIPTION: This snippet shows how to import the `useBalance` hook from the `wagmi` library. The `useBalance` hook is used to fetch the balance of an address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useBalance } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using emitOnBegin Parameter with watchBlocks\nDESCRIPTION: Demonstrates how to enable the emitOnBegin option, which triggers the callback immediately when the subscription starts rather than waiting for the next block.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  emitOnBegin: true, // [!code focus]\n  onBlock(block) {\n    console.log('Block changed!', block)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Building and Linking Wagmi CLI from Source\nDESCRIPTION: Commands to clone, build, and globally link the Wagmi CLI from source code for development purposes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/wevm/wagmi.git\ncd wagmi\npnpm install\npnpm build\ncd packages/cli\npnpm link --global\n```\n\n----------------------------------------\n\nTITLE: Building defaultChains Manually\nDESCRIPTION: Instructions for recreating the defaultChains export by importing and combining specific chains after its removal from the library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n- import { defaultChains } from '@wagmi/core'\n+ import { mainnet, goerli } from '@wagmi/core/chains'\n\n+ const defaultChains = [mainnet, goerli]\n```\n\n----------------------------------------\n\nTITLE: Using config Parameter with useEstimateFeesPerGas\nDESCRIPTION: Shows how to provide a custom configuration object when using the useEstimateFeesPerGas hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEstimateFeesPerGas } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useEstimateFeesPerGas({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionConfirmations with Custom Config\nDESCRIPTION: Demonstrates how to use a custom configuration with the useTransactionConfirmations hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionConfirmations } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useTransactionConfirmations({\n    config,\n    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsAvatar Hook in React\nDESCRIPTION: Example of importing the useEnsAvatar hook from the wagmi library for use in React components.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Accessing Config via Dependency Injection in Vue\nDESCRIPTION: Shows how to access the Wagmi Config object using Vue's dependency injection system with the configKey.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configKey, type Config } from '@wagmi/vue'\nimport { inject } from 'vue'\n\ninject<Config | undefined>(configKey)\n```\n\n----------------------------------------\n\nTITLE: Basic Reconnect Usage\nDESCRIPTION: Demonstrates basic usage of the reconnect action with injected connector. Shows how to reconnect to specific connectors using the config instance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/reconnect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reconnect } from '@wagmi/core'\nimport { injected } from '@wagmi/connectors'\nimport { config } from './config'\n\nconst result = await reconnect(config, { connectors: [injected()] })\n```\n\n----------------------------------------\n\nTITLE: Migrating from allChains Export\nDESCRIPTION: Method for replacing the allChains export with imports from the chains entrypoint to access all available chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n- import { allChains } from '@wagmi/core'\n+ import * as allChains from '@wagmi/core/chains'\n\nconst { ... } = configureChains(allChains, ...)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of estimateMaxPriorityFeePerGas\nDESCRIPTION: Basic implementation example showing how to use the estimateMaxPriorityFeePerGas function with a configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateMaxPriorityFeePerGas.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateMaxPriorityFeePerGas } from '@wagmi/core'\nimport { config } from './config'\n\nconst result = await estimateMaxPriorityFeePerGas(config)\n```\n\n----------------------------------------\n\nTITLE: Using useReadContract with ABI\nDESCRIPTION: Shows how to use the abi parameter with useReadContract. The ABI defines the contract interface for proper type inference.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi' // [!code focus]\n\nconst result = useReadContract({\n  abi, // [!code focus]\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'totalSupply',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionCount with Block Number Parameter\nDESCRIPTION: This snippet shows how to use the useTransactionCount hook with a specific block number to get the transaction count at that block.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionCount } from 'wagmi'\n\nfunction App() {\n  const result = useTransactionCount({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    blockNumber: 17829139n,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with Index Parameter\nDESCRIPTION: Example of using the index parameter with a block identifier to fetch a transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransaction } from '@wagmi/vue'\n\nconst result = useTransaction({\n  blockTag: 'safe',\n  index: 0  // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useAccountEffect\nDESCRIPTION: Example showing how to use useAccountEffect with a custom configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useAccountEffect } from '@wagmi/vue'\nimport { config } from './config'\n\nuseAccountEffect({\n  config,\n  onConnect(data) {\n    console.log('Connected!', data)\n  },\n  onDisconnect() {\n    console.log('Disconnected!')\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting ENS Name for Avatar Lookup\nDESCRIPTION: Basic configuration focusing on setting the ENS name parameter for avatar lookup with proper normalization.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAvatar({\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain ID for waitForTransactionReceipt\nDESCRIPTION: Shows how to specify a chain ID when using waitForTransactionReceipt. This is useful for targeting a specific blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForTransactionReceipt } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst transactionReceipt = await waitForTransactionReceipt(config, {\n  chainId: mainnet.id,\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n```\n\n----------------------------------------\n\nTITLE: Error Type Import\nDESCRIPTION: Import statement for the GetBlockTransactionCountErrorType type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBlockTransactionCountErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Selecting Chain ID for useBlockNumber (TSX)\nDESCRIPTION: Illustrates how to specify a chainId while using 'useBlockNumber' to fetch data for a particular blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-21_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useBlockNumber } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' // [!code focus]\n\nfunction App() {\n  const result = useBlockNumber({\n    chainId: mainnet.id, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Block Tag for ENS Avatar Lookup\nDESCRIPTION: Setting a block tag (like 'latest' or 'pending') when fetching an ENS avatar to specify which chain state to query.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAvatar({\n    name: normalize('wevm.eth'),\n    blockTag: 'latest',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAvatar with ENS Name Parameter\nDESCRIPTION: Basic example showing how to use the name parameter with the useEnsAvatar composable. If name is undefined, the enabled property is set to false.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAvatar } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAvatar({\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing GetAccountReturnType from @wagmi/core\nDESCRIPTION: This snippet shows how to import the GetAccountReturnType type from the @wagmi/core library, which represents the return type of the getAccount function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getAccount.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetAccountReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Usage with Chain ID Parameter\nDESCRIPTION: Example demonstrating how to specify a chain ID when fetching block transaction count.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockTransactionCount } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst blockTransactionCount = await getBlockTransactionCount(config, {\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useBlockNumber\nDESCRIPTION: Shows how to use a custom configuration with the useBlockNumber composable instead of the default WagmiPlugin configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBlockNumber } from '@wagmi/vue'\nimport { config } from './config'\n\nconst { data: blockNumber } = useBlockNumber({\n  config,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Config with useEstimateMaxPriorityFeePerGas\nDESCRIPTION: Illustrates how to pass a custom configuration object to the useEstimateMaxPriorityFeePerGas hook to override default settings.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateMaxPriorityFeePerGas.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateMaxPriorityFeePerGas } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateMaxPriorityFeePerGas({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting scopeKey in useBlockNumber\nDESCRIPTION: Demonstrates how to use the scopeKey parameter to scope the cache to a specific context when using useBlockNumber.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBlockNumber } from '@wagmi/vue'\n\nconst { data: blockNumber } = useBlockNumber({\n  scopeKey: 'foo',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Contract Read Function Parameters\nDESCRIPTION: Demonstrates the renaming of contract interaction parameters from addressOrName/contractInterface to address/abi respectively.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\nimport { readContract } from '@wagmi/core'\n\nconst result = await readContract({\n- addressOrName: '0xâ€¦',\n+ address: '0xâ€¦',\n- contractInterface: [â€¦] as const,\n+ abi: [â€¦] as const,\n  functionName: 'balanceOf',\n  args: ['0xâ€¦'],\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from chain Export to Imports\nDESCRIPTION: Migration example for replacing the chain export with direct imports from @wagmi/core/chains, providing more explicit chain selections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n- chain\n  configureChains\n} from '@wagmi/core'\n+ import { mainnet, polygon, optimism } from '@wagmi/core/chains'\n\nconst { ... } = configureChains(\n- [chain.mainnet, chain.polygon, chain.optimism],\n+ [mainnet, polygon, optimism],\n  {\n    ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAvatar with Block Tag Parameter\nDESCRIPTION: Shows how to use the useEnsAvatar composable with a specific block tag to determine which blockchain state to query.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAvatar } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAvatar({\n  name: normalize('wevm.eth'),\n  blockTag: 'latest',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useBlock with scope key\nDESCRIPTION: This snippet demonstrates the use of a scope key when using the `useBlock` hook, which helps in caching block data in a specific context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useBlock({\n    scopeKey: 'foo' // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Key in Etherscan Plugin Configuration\nDESCRIPTION: Illustrates how to set the Etherscan API key in the plugin configuration. The API key is specific to each network, including testnets.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { etherscan } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    etherscan({\n      apiKey: process.env.ETHERSCAN_API_KEY,\n      chainId: 1,\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Connector List in Vue\nDESCRIPTION: A Vue setup script that dynamically generates a sorted list of connectors from the sidebar configuration. It filters for connectors under the 'Configuration' section.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/connectors.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getSidebar } from '../../.vitepress/sidebar'\n\nconst connectors = getSidebar()['/react']\n  .find(x => x.text.includes('Configuration')).items\n  .find(x => x.text.includes('Connectors')).items\n  .sort((a, b) => a.text.localeCompare(b.text))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi CLI with Different Package Managers\nDESCRIPTION: Commands for installing the Wagmi CLI as a development dependency using pnpm, npm, yarn, or bun package managers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @wagmi/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @wagmi/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @wagmi/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @wagmi/cli\n```\n\n----------------------------------------\n\nTITLE: QR Modal Display Configuration\nDESCRIPTION: Shows how to configure the visibility of the QR code modal in WalletConnect.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nconst connector = walletConnect({\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n  showQrModal: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using getChainId Function\nDESCRIPTION: Demonstrates how to use the getChainId function with a Wagmi configuration to retrieve the current chain ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getChainId.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getChainId } from '@wagmi/core'\nimport { config } from './config'\n\nconst chainId = getChainId(config)\n```\n\n----------------------------------------\n\nTITLE: Setting Polling Interval\nDESCRIPTION: Shows how to configure the polling interval for real-time data updates.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  pollingInterval: 4_000, // [!code focus]\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Disconnect Simulation\nDESCRIPTION: Demonstrates how to enable shimDisconnect feature to simulate disconnect behavior by tracking connection status in storage.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/safe.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safe } from '{{connectorsPackageName}}'\n\nconst connector = safe({\n  shimDisconnect: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionReceipt with Custom Config\nDESCRIPTION: Demonstrates how to use useTransactionReceipt hook with a custom configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionReceipt.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionReceipt } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useTransactionReceipt({\n    config,\n    hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Canary Version with Package Managers\nDESCRIPTION: Commands for installing the canary version of Wagmi using different package managers. The canary version tracks the main branch and includes the latest features.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add {{packageName}}@canary\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install {{packageName}}@canary\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add {{packageName}}@canary\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add {{packageName}}@canary\n```\n\n----------------------------------------\n\nTITLE: useCall with Gas Parameter\nDESCRIPTION: Illustrates the usage of the `gas` parameter within the `useCall` hook to specify the gas provided for transaction execution. The `gas` parameter accepts a `bigint | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    gas: 1_000_000n, // [!code focus]\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Connector Parameter with getCallsStatus in TypeScript\nDESCRIPTION: Demonstrates how to use the connector parameter with getCallsStatus action. It shows getting connections and using the first available connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCallsStatus.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections, getCallsStatus } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst connections = getConnections(config)\nconst status = await getCallsStatus(config, {\n  connector: connections[0]?.connector,\n  id: '0x1234567890abcdef',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing WalletConnect Connector\nDESCRIPTION: Shows how to import the WalletConnect connector from the wagmi connectors package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: Basic signTypedData Import\nDESCRIPTION: How to import the signTypedData function from @wagmi/core\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signTypedData } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Registering Wagmi config globally with TypeScript using declaration merging\nDESCRIPTION: Using TypeScript declaration merging to register a Wagmi configuration globally for type inference across the application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '@wagmi/vue'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\ndeclare module '@wagmi/vue' {\n  interface Register {\n    config: typeof config\n  }\n}\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing EstimateFeesPerGasParameters Type\nDESCRIPTION: Shows how to import the type definition for the parameters of the estimateFeesPerGas function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EstimateFeesPerGasParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Type Import for useEnsAvatar Return Type\nDESCRIPTION: Shows how to import the type definition for the return type of the useEnsAvatar composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseEnsAvatarReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Setting formatUnits Parameter in estimateFeesPerGas\nDESCRIPTION: Shows how to specify the unit format (ether, gwei, wei) for the returned fee values.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateFeesPerGas } from '@wagmi/core'\nimport { config } from './config'\n\nconst feesPerGas = estimateFeesPerGas(config, {\n  formatUnits: 'ether', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Error Handling in Vue\nDESCRIPTION: Adding error handling to display user-friendly error messages when transactions fail due to rejection or insufficient funds.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  import { \n    useSendTransaction,\n    useWaitForTransactionReceipt,\n  } from 'wagmi'\n  import { parseEther } from 'viem'\n\n  const { \n    data: hash, \n    error,\n    isPending,\n    sendTransaction \n  } = useSendTransaction()\n\n  function submit(event: Event) {\n    const formData = new FormData(event.target as HTMLFormElement)\n    const to = formData.get('address') as `0x${string}`\n    const value = formData.get('value') as string\n    sendTransaction({ to, value: parseEther(value) })\n  }\n\n  const { isLoading: isConfirming, isSuccess: isConfirmed } = \n    useWaitForTransactionReceipt({ \n      hash, \n    }) \n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input name=\"address\" placeholder=\"0xA0Cfâ€¦251e\" required />\n    <input name=\"value\" placeholder=\"0.05\" required />\n    <button :disabled=\"isPending\" type=\"submit\">\n      <span v-if=\"isPending\">Sending...</span>\n      <span v-else>Send</span>\n    </button>\n    <div v-if=\"hash\">Transaction Hash: {{ hash }}</div>\n    <div v-if=\"isConfirming\">Waiting for confirmation...</div> \n    <div v-if=\"isConfirmed\">Transaction Confirmed!</div> \n    <div v-if=\"error\">\n      Error: {{ (error as BaseError).shortMessage || error.message }}\n    </div>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Implementation Fetching in Etherscan Plugin\nDESCRIPTION: Demonstrates how to enable fetching of proxy implementation addresses for contracts in the Etherscan plugin. This is useful for contracts that use proxy patterns.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { blockExplorer } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    etherscan({\n      apiKey: process.env.ETHERSCAN_API_KEY,\n      chainId: 1, \n      contracts: [\n        {\n          name: 'FiatToken',\n          address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n        },\n      ],\n      tryFetchProxyImplementation: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Narrowing Parameters with chainId in simulateContract\nDESCRIPTION: This example shows how to narrow parameters to a specific chain by explicitly setting the chainId. By using Celo's ID, the TypeScript autocomplete will only suggest parameters relevant to the Celo blockchain.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/chain-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { simulateContract } from '@wagmi/core'\nimport { celo } from 'wagmi/chains'\n\nconst result = await simulateContract({\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n  chainId: celo.id, // [!code focus]\n  feeCurrency: '0xâ€¦', // [!code focus]\n  // ^? (property) feeCurrency?: `0x${string}` | undefined // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Configuration in Bash\nDESCRIPTION: Basic usage of the 'wagmi init' command to create a configuration file. It automatically detects TypeScript and creates either 'wagmi.config.ts' or 'wagmi.config.js'.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/init.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwagmi init\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Delay for unstable_connector Transport\nDESCRIPTION: This snippet shows how to set a custom retry delay for the unstable_connector Transport when using the injected Connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_connector } from 'wagmi'\nimport { injected } from 'wagmi/connectors'\n\nconst transport = unstable_connector(injected, {\n  retryDelay: 100, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using useBytecode with Block Number Parameter\nDESCRIPTION: Shows how to use the useBytecode composable with a specific block number parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBytecode } from '@wagmi/vue'\n\nconst { data: byteCode } = useBytecode({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  blockNumber: 16280770n,\n})\n</script>\n\n<template>\n  Byte Code: {{ byteCode }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Start Documentation Site in Dev Mode\nDESCRIPTION: Command to start the documentation site in development mode using VitePress, facilitating updates and previews of documentation changes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Using the scopeKey Parameter - TSX\nDESCRIPTION: This snippet demonstrates how to use the `scopeKey` parameter to scope the cache of the `useBytecode` hook in a given context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBytecode } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useBytecode({\n    scopeKey: 'foo' // [!code focus]\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Connect to Specific Chain with Button Click\nDESCRIPTION: Example demonstrating how to trigger connection to Optimism network when a button is clicked using useConnect hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect, chain } from \"wagmi\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\n\nfunction App() {\n  const connect = useConnect();\n\n  return (\n    <button onClick={() => connect({ chainId: chain.optimism.id })}>\n      Connect to Optimism\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useClient Return Type\nDESCRIPTION: Shows how to import the type definition for the return value of the useClient hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useClient.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseClientReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Block Watching with Custom Config\nDESCRIPTION: Example of using useWatchBlocks with a custom configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchBlocks } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  useWatchBlocks({\n    config,\n    onBlock(block) {\n      console.log('New block', block.number)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Configuration\nDESCRIPTION: Demonstrates how to provide a custom storage implementation for persisting state between sessions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, createStorage, http } from 'wagmi' // [!code focus]\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  storage: createStorage({ storage: window.localStorage }), // [!code focus]\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionCount with Chain ID Parameter\nDESCRIPTION: This snippet shows how to use the useTransactionCount hook with a specific chain ID to fetch data from a particular blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionCount } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useTransactionCount({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    chainId: mainnet.id,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry Plugin Inclusions in TypeScript\nDESCRIPTION: Demonstrates how to include specific artifact files or patterns in the Foundry plugin configuration for Wagmi CLI.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { foundry } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    foundry({\n      include: [\n        '*.json',\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useEnsResolver Hook with Name Normalization\nDESCRIPTION: Demonstrates basic usage of the useEnsResolver hook with an ENS name that has been normalized using viem's normalize function. This ensures the ENS name follows formatting rules.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsResolver } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsResolver({\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useConnectorClient with a Specific Connector\nDESCRIPTION: Demonstrates how to use the useConnectorClient hook with a specific connector from connections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnections, useConnectorClient } from 'wagmi'\n\nfunction App() {\n  const connections = useConnections(config)\n  const result = useConnectorClient({\n    connector: connections[0]?.connector, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Connector Parameter Usage\nDESCRIPTION: Shows how to use waitForCallsStatus with a specific connector from connections list.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections, waitForCallsStatus } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst connections = getConnections(config)\nconst status = await waitForCallsStatus(config, {\n  connector: connections[0]?.connector,\n  id: '0x1234567890abcdef',\n})\n```\n\n----------------------------------------\n\nTITLE: useToken with Chain ID Configuration\nDESCRIPTION: Example showing useToken implementation with specific chain ID configuration using mainnet.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useToken } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useToken({\n    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n    chainId: mainnet.id,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBlock to fetch block data by block tag\nDESCRIPTION: This code snippet illustrates the use of the `useBlock` hook with a specified block tag, defaulting to 'latest'.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlock.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\n\nfunction App() {\n  const result = useBlock({\n    blockTag: 'pending' // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Mutation Parameters in Vue\nDESCRIPTION: This Vue setup script defines TypeScript types for mutation function parameters. It includes types for the mutation function, data, error, and variables.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/mutation-options.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n<script setup>\nconst mutate = 'mutationFn'\nconst TData = 'TData'\nconst TError = 'TError'\nconst TVariables = 'TVariables'\n</script>\n-->\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Vue Package with Yarn\nDESCRIPTION: Command to install the Wagmi Vue package and its dependencies using Yarn. It includes the core package, Viem with a specific version, and TanStack Query.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query\n```\n\n----------------------------------------\n\nTITLE: Configuring Contract ABI in Wagmi CLI\nDESCRIPTION: Example showing how to configure a contract's ABI in Wagmi CLI, which is used by plugins to generate code based on ABI properties.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/options.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  out: 'src/generated.ts',\n  contracts: [\n    {\n      abi: [â€¦],\n      name: 'MyCoolContract'\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring shimDisconnect Parameter\nDESCRIPTION: Example of configuring the shimDisconnect parameter which simulates disconnect behavior for providers that don't support it natively.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/injected.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injected } from '{{connectorsPackageName}}'\n\nconst connector = injected({\n  shimDisconnect: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ShowCallsStatusParameters Type in TypeScript\nDESCRIPTION: This snippet shows how to import the ShowCallsStatusParameters type for type checking and autocompletion.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/showCallsStatus.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ShowCallsStatusParameters } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Configuring Alchemy Provider with API Key in JavaScript\nDESCRIPTION: Updated configuration for the Alchemy provider, now requiring an API key to be specified.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureChains } from 'wagmi'\n\nconst config = configureChains(defaultChains, [\n alchemyProvider({ apiKey: process.env.ALCHEMY_API_KEY })\n])\n```\n\n----------------------------------------\n\nTITLE: Basic useChainId Hook Implementation in Vue.js\nDESCRIPTION: Shows a basic implementation of the useChainId hook in a Vue.js component. The hook provides access to the current blockchain network's chain ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChainId.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useChainId } from '@wagmi/vue'\n\nconst chainId = useChainId()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi CLI Canary Version\nDESCRIPTION: Commands to install the unreleased canary version of Wagmi CLI that tracks the main branch.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/cli@canary\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/cli@canary\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @wagmi/cli@canary\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @wagmi/cli@canary\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Chain ID Parameter - TypeScript\nDESCRIPTION: This snippet shows the inclusion of the chain ID in the transaction request, specifying which blockchain network the transaction is for.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    chainId: mainnet.id,\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Name for unstable_connector Transport\nDESCRIPTION: This snippet shows how to set a custom name for the unstable_connector Transport when using the injected Connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_connector } from 'wagmi'\nimport { injected } from 'wagmi/connectors'\n\nconst transport = unstable_connector(injected, { \n  name: 'Injected',  // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: useToken with Scope Key\nDESCRIPTION: Example showing useToken implementation with scope key for cache context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToken } from 'wagmi'\n\nfunction App() {\n  const result = useToken({\n    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n    scopeKey: 'foo',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useConnect Hook\nDESCRIPTION: Basic import statement for the useConnect hook from the wagmi library\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnect } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using getEnsAddress with universalResolverAddress parameter\nDESCRIPTION: This snippet shows how to use the getEnsAddress function with the universalResolverAddress parameter to specify a custom ENS Universal Resolver Contract address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAddress } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAddress = await getEnsAddress(config, {\n  name: normalize('wevm.eth'),\n  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Max Priority Fee Per Gas Parameter\nDESCRIPTION: Explains how to use the `maxPriorityFeePerGas` parameter which specifies the highest priority fee per gas for transactions requiring EIP-1559 processes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    maxFeePerGas: parseGwei('20'),\n    maxPriorityFeePerGas: parseGwei('2'), // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with Block Tag\nDESCRIPTION: This snippet shows how to use the useTransaction hook with a block tag and index parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransaction } from 'wagmi'\n\nfunction App() {\n  const result = useTransaction({\n    blockTag: 'safe',\n    index: 0,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying blockNumber for Smart Contract Account Verification\nDESCRIPTION: Example demonstrating how to use the blockNumber parameter when verifying typed data signatures from Smart Contract Accounts. This parameter specifies which block to check for contract deployment status.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { domain, types } from './data'\nimport { useVerifyTypedData } from 'wagmi'\n\nfunction App() {\n  const result = useVerifyTypedData({\n    blockNumber: 12345678n,\n    domain,\n    types,\n    message: {\n      from: {\n        name: 'Cow',\n        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n      },\n      to: {\n        name: 'Bob',\n        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n      },\n      contents: 'Hello, Bob!',\n    },\n    primaryType: 'Mail',\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Renaming Parameter for fetchBalance in wagmi\nDESCRIPTION: This change updates the parameter name in the fetchBalance function from 'addressOrName' to 'address' in the wagmi library. It addresses modern JavaScript practices and requires users to ensure ENS names are resolved to addresses before calling the function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nconst result = await fetchBalance({\\n- addressOrName: '0xâ€¦',\\n+ address: '0xâ€¦',\\n})\n```\n\n----------------------------------------\n\nTITLE: Watching Block Number Changes in React with Wagmi\nDESCRIPTION: This snippet shows how to utilize the 'watchBlockNumber' action from Wagmi to monitor for changes in the blockchain's block number. It demonstrates importing necessary functions from 'wagmi', setting up the effect trigger in a functional React component, and handling block number updates using a callback function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/actions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConfig } from 'wagmi'\nimport { watchBlockNumber } from 'wagmi/actions'\nimport { useEffect } from 'react'\n\nfunction App() {\n  const config = useConfig()\n\n  useEffect(() => {\n    return watchBlockNumber(config, {\n      onBlockNumber(blockNumber) {\n        console.log('Block number changed!', blockNumber)\n      },\n    })\n  }, [])\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using recklesslyUnprepared mode with writeContract in TypeScript\nDESCRIPTION: Example demonstrating how to use writeContract without preparation by using the 'recklesslyUnprepared' mode, which maintains the previous functionality for backward compatibility.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\nimport { writeContract } from '@wagmi/core'\n\nconst tokenId = 69\n\nconst result = await writeContract({\n+ mode: 'recklesslyUnprepared',\n  addressOrName: '0x...',\n  contractInterface: wagmiAbi,\n  functionName: 'mint',\n  args: [tokenId],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing GetGasPriceErrorType\nDESCRIPTION: Demonstrates how to import the GetGasPriceErrorType for handling potential errors in TypeScript.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getGasPrice.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetGasPriceErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using getEnsAddress with blockTag parameter\nDESCRIPTION: This example demonstrates using the getEnsAddress function with the blockTag parameter to fetch an ENS address at a specific block tag.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAddress } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAddress = getEnsAddress(config, {\n  blockTag: 'latest',\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Commands\nDESCRIPTION: Example showing how to configure custom build, clean, and rebuild commands.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { hardhat } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    hardhat({\n      commands: {\n        clean: 'pnpm hardhat clean',\n        build: 'pnpm hardhat compile',\n        rebuild: 'pnpm hardhat compile',\n      },\n      project: '../hello_hardhat',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionConfirmations with Custom Chain ID\nDESCRIPTION: Shows how to specify a custom chain ID when using the useTransactionConfirmations hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionConfirmations } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useTransactionConfirmations({\n    chainId: mainnet.id,\n    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating sendTransaction Configuration for Reckless Mode in TypeScript\nDESCRIPTION: Changes the sendTransaction configuration to use recklesslySetUnpreparedRequest for unprepared requests, highlighting potential UX pitfalls.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n<button\n  onClick={() => {\n    sendTransaction({\n-     request: {\n+     recklesslySetUnpreparedRequest:\n        to: 'moxey.eth',\n        value: parseEther('1')\n      }\n    })\n  }}\n>\n  Send\n</button>\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Name to Address for useBalance Hook in JavaScript\nDESCRIPTION: Example of resolving an ENS name to an address before using it with the useBalance hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data: address } = useEnsAddress({ name: 'example.eth' })\nconst result = useBalance({\n address,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing WatchPublicClientParameters Type\nDESCRIPTION: Shows how to import the TypeScript type definition for watchPublicClient parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPublicClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchPublicClientParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: WagmiProvider with ReconnectOnMount Parameter\nDESCRIPTION: Demonstrates how to use the reconnectOnMount parameter to control whether previously connected connectors should reconnect on component mount.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WagmiProvider } from 'wagmi'\nimport { config } from './config' \n\nfunction App() {\n  return (\n    <WagmiProvider\n      config={config}\n      reconnectOnMount={false} // [!code focus]\n    >\n      {/** ... */}\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using onChange callback in watchConnectors\nDESCRIPTION: Demonstrates how to use the onChange callback function in watchConnectors. The callback receives the current and previous connectors as parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnectors.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchConnectors } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchConnectors(config, {\n  onChange(connectors) { // [!code focus:3]\n    console.log('Connectors changed!', connectors)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using getEnsAddress with coinType parameter\nDESCRIPTION: This example demonstrates using the getEnsAddress function with the coinType parameter to fetch the address for a specific ENSIP-9 coin type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAddress } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensAddress = await getEnsAddress(config, {\n  coinType: 60,\n  name: normalize('wevm.eth'),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Type for Gas Estimation\nDESCRIPTION: Demonstrates specifying the transaction type (legacy, EIP-1559, or EIP-2930) when estimating gas.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  type: 'eip1559',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using showCallsStatus with Connector Parameter in TypeScript\nDESCRIPTION: This example demonstrates how to use the showCallsStatus action with a specific connector from the config connections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/showCallsStatus.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections, showCallsStatus } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst connections = getConnections(config)\nawait showCallsStatus(config, {\n  connector: connections[0]?.connector,\n  id: '0x1234567890abcdef',\n})\n```\n\n----------------------------------------\n\nTITLE: Experimental EIP-5792 Update in wagmi 2.14.15\nDESCRIPTION: Makes the 'id' parameter optional on useWaitForCallsStatus and updates dependencies.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.14.15\n\n### Patch Changes\n\n- [`a4bd0623eed28e3761a27295831a60ad835f0ee0`](https://github.com/wevm/wagmi/commit/a4bd0623eed28e3761a27295831a60ad835f0ee0) Thanks [@jxom](https://github.com/jxom)! - **Experimental (EIP-5792):** Updated `id` parameter to be optional on `useWaitForCallsStatus`.\n\n- Updated dependencies [[`a4bd0623eed28e3761a27295831a60ad835f0ee0`](https://github.com/wevm/wagmi/commit/a4bd0623eed28e3761a27295831a60ad835f0ee0)]:\n  - @wagmi/core@2.16.7\n  - @wagmi/connectors@5.7.11\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Core with pnpm\nDESCRIPTION: Install the Wagmi Core library and its peer dependency, Viem, via pnpm. Ensure you're using the version specified in the peerDependencies.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/core viem@{{viemVersion}}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial State in WagmiPlugin\nDESCRIPTION: Shows how to set the 'initialState' parameter when using WagmiPlugin. This is useful for server-side rendering (SSR) scenarios.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { WagmiPlugin } from '@wagmi/vue'\n\nimport App from './App.vue'\nimport { config } from './config' \n\ncreateApp(App)\n  .use(WagmiPlugin, { \n    config,\n    initialState: /* ... */ // [!code focus]\n  })\n  .mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Importing UseEstimateFeesPerGas Type\nDESCRIPTION: Shows how to import the UseEstimateFeesPerGas type for TypeScript type definitions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { type UseEstimateFeesPerGas } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useConfig Hook from Wagmi\nDESCRIPTION: This snippet demonstrates how to import the useConfig hook from the wagmi library. The hook is used to retrieve the current configuration from the nearest WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConfig } from 'wagmi'\n\n```\n\n----------------------------------------\n\nTITLE: Using chainId Parameter with watchBlocks\nDESCRIPTION: Shows how to specify a particular chain ID when watching for blocks, which restricts the watcher to that specific blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst unwatch = watchBlocks(config, {\n  chainId: mainnet.id, // [!code focus]\n  onBlock(block) {\n    console.log('Block changed!', block)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Importing UseSignMessageReturnType in TypeScript\nDESCRIPTION: Demonstrates how to import the UseSignMessageReturnType for type checking the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignMessage.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSignMessageReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Universal Resolver Address with useEnsName in Vue.js\nDESCRIPTION: This example demonstrates how to use a custom Universal Resolver Contract address with the useEnsName composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsName } from '@wagmi/vue'\n\nconst result = useEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useReadContract in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the useReadContract hook from the 'wagmi' package to read data from a smart contract using its ABI.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContract.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useReadContract } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Transport with Custom Key\nDESCRIPTION: Demonstrates setting a custom key for the WebSocket Transport.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://foo-bar-baz.quiknode.pro/...', { \n  key: 'alchemy',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useTransactionReceipt from @wagmi/vue\nDESCRIPTION: Example of importing the useTransactionReceipt composable from the @wagmi/vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionReceipt } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useSendTransaction in Vue.js\nDESCRIPTION: Shows how to import the useSendTransaction composable from the @wagmi/vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSendTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSendTransaction } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Using switchAccount with specific connector\nDESCRIPTION: Illustrates how to use switchAccount with a specific connector from the connections array.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchAccount.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections, switchAccount } from '@wagmi/core'\nimport { config } from './config'\n\nconst connections = getConnections(config)\nconst result = await switchAccount(config, {\n  connector: connections[0]?.connector, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useEstimateFeesPerGas from wagmi\nDESCRIPTION: Shows how to import the useEstimateFeesPerGas hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEstimateFeesPerGas } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Scope Key Parameter - TypeScript\nDESCRIPTION: This example demonstrates how to scope the cache for `usePrepareTransactionRequest`, allowing hooks with identical context to share cache data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    scopeKey: 'foo',\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Contract Event Watching Configuration\nDESCRIPTION: Shows the change in watchContractEvent function signature to use a configuration object instead of positional arguments.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\nimport { watchContractEvent } from '@wagmi/core'\n\n- const unsubscribe = watchContractEvent(\n-   {\n-     address: '0xâ€¦',\n-     abi: [â€¦],\n-   },\n-   'Transfer',\n-   (from, to, tokenId) => {\n-     // ...\n-   },\n-   { once: true },\n- )\n+ const unsubscribe = watchContractEvent(\n+   {\n+     address: '0xâ€¦',\n+     abi: [â€¦],\n+     eventName: 'Transfer',\n+     once: true,\n+   },\n+   (from, to, tokenId) => {\n+     // ...\n+   },\n+ )\n```\n\n----------------------------------------\n\nTITLE: Using normalizeChainId with String Input in TypeScript\nDESCRIPTION: Shows how to use the normalizeChainId function with a string input representing a hexadecimal chain ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/normalizeChainId.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalizeChainId } from '{{packageName}}'\n\nconst result = normalizeChainId('0x1')\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Tag for ENS Address Lookup\nDESCRIPTION: Demonstrates how to set a block tag when fetching an ENS address using useEnsAddress.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAddress } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAddress({\n  name: normalize('wevm.eth'),\n  blockTag: 'latest',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Core Actions\nDESCRIPTION: Example of how to import an action from the @wagmi/core package. This demonstrates importing the getAccount action, which is one of many available actions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Setting Wallet Version\nDESCRIPTION: Demonstrates how to specify the Coinbase Wallet SDK version.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinbaseWallet } from '{{connectorsPackageName}}'\n\nconst connector = coinbaseWallet({\n  appName: 'My Wagmi App',\n  version: '4',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Scope Key with useEnsName in Vue.js\nDESCRIPTION: This snippet shows how to use a scope key with the useEnsName composable to scope the cache to a specific context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsName } from '@wagmi/vue'\n\nconst result = useEnsName({\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  scopeKey: 'foo',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Scope Key for Cache Context\nDESCRIPTION: Demonstrates how to use the scopeKey parameter to scope the cache to a specific context. Hooks with matching scope keys will share the same cache.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSimulateContract } from 'wagmi'\nimport { abi } from './abi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSimulateContract({\n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'transferFrom',\n    args: [\n      '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n      123n,\n    ],\n    scopeKey: 'foo',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing estimateFeesPerGas from @wagmi/core\nDESCRIPTION: Shows how to import the estimateFeesPerGas function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateFeesPerGas } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using Wagmi Core via a CDN\nDESCRIPTION: For environments not using a package manager, load the Wagmi Core library through a CDN by adding a script tag to your HTML. This method uses the esm.sh CDN service to import necessary modules directly.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { createClient } from 'https://esm.sh/viem'\n  import { createConfig } from 'https://esm.sh/@wagmi/core@{{viemVersion}}'\n  import { injected } from 'https://esm.sh/@wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Coinbase Wallet Connector in JavaScript\nDESCRIPTION: Example of updating the coinbaseWallet connector configuration to specify SDK version. This allows targeting v3 or v4 of the Coinbase SDK.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/connectors/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncoinbaseWallet({\n  version: '3' | '4',\n})\n```\n\n----------------------------------------\n\nTITLE: GetEnsName with Universal Resolver Address\nDESCRIPTION: Example demonstrating how to fetch an ENS name using a custom Universal Resolver Contract address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsName } from '@wagmi/core'\nimport { config } from './config'\n\nconst ensName = await getEnsName(config, {\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  universalResolverName: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n})\n```\n\n----------------------------------------\n\nTITLE: Narrowing Chain Parameters with ChainId in TypeScript\nDESCRIPTION: Demonstrates how to narrow chain-specific parameters by setting the chainId property to a specific chain value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/chain-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { useSimulateContract } from 'wagmi'\nimport { celo } from 'wagmi/chains'\n\nconst result = useSimulateContract({\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n  chainId: celo.id,\n  feeCurrency: '0xâ€¦',\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Contract Usage Pattern\nDESCRIPTION: Example of how to update code to access contract information through the new contracts object structure instead of directly from the chain object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n- const multicallContract = mainnet.multicall\n+ const multicallContract = mainnet.contracts.multicall3\n```\n\n----------------------------------------\n\nTITLE: Setting up TypeScript strict mode for Wagmi in tsconfig.json\nDESCRIPTION: Configuration for tsconfig.json to enable strict mode, which is required for Wagmi to function properly with TypeScript.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using signMessage with Specific Account in TypeScript\nDESCRIPTION: Demonstrates how to use the signMessage action with a specific Ethereum account address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signMessage } from '@wagmi/core'\nimport { config } from './config'\n\nconst result = await signMessage(config, {\n  account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  message: 'hello world',\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEnsText with Specific Chain ID\nDESCRIPTION: Shows how to specify a chain ID when fetching ENS text records using the chainId parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsText } from 'wagmi'\nimport { mainnet } from 'wagmi/chains' \nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsText({\n    chainId: mainnet.id, \n    name: normalize('wevm.eth'),\n    key: 'com.twitter',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with Block Number\nDESCRIPTION: This example demonstrates using the useTransaction hook with a block number and index parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransaction } from 'wagmi'\n\nfunction App() {\n  const result = useTransaction({\n    blockNumber: 17829139n,\n    index: 0,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Nonce in Contract Simulation\nDESCRIPTION: Demonstrates how to specify a unique nonce for a contract transaction simulation using Wagmi's simulateContract method. The nonce ensures transaction ordering and prevents replay attacks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  nonce: 123, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined write in Prepared Mode for useContractWrite in TypeScript\nDESCRIPTION: Demonstrates how to handle cases where write is undefined when useContractWrite is used in prepare mode with usePrepareContractWrite.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nconst { config } = usePrepareContractWrite({ ... })\nconst { write } = useContractWrite(config)\n\n<button\n  disabled={!write}\n  onClick={() => write?.()}\n>\n  Send\n</button>\n```\n\n----------------------------------------\n\nTITLE: Importing Storage Type\nDESCRIPTION: Shows how to import the Storage type from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Storage } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Delay in HTTP Transport\nDESCRIPTION: Configures the base delay in milliseconds between retry attempts, which will be used in exponential backoff calculations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...', {\n  retryDelay: 100, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ActionsConfig Type in TypeScript\nDESCRIPTION: Shows how to import the ActionsConfig type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/actions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ActionsConfig } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Key for unstable_connector Transport\nDESCRIPTION: This example demonstrates how to set a custom key for the unstable_connector Transport when using the injected Connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_connector } from 'wagmi'\nimport { injected } from 'wagmi/connectors'\n\nconst transport = unstable_connector(injected, { \n  key: 'injected',  // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing WriteContractsErrorType Type\nDESCRIPTION: Shows how to import the WriteContractsErrorType type for type safety when handling errors from the writeContracts function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WriteContractsErrorType } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useReconnect\nDESCRIPTION: Shows how to use a custom configuration with the useReconnect composable instead of the default one from WagmiPlugin.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReconnect.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReconnect } from '@wagmi/vue'\nimport { config } from './config' // [!code focus]\n\nconst result = useReconnect({\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionCount with Scope Key\nDESCRIPTION: This snippet shows how to use the useTransactionCount hook with a scope key to share cache between hooks with the same context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransactionCount } from 'wagmi'\n\nfunction App() {\n  const result = useTransactionCount({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    scopeKey: 'foo',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectorAccountNotFoundError\nDESCRIPTION: Error class for when an account does not exist on the connector or cannot be used\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectorAccountNotFoundError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Specifying Universal Resolver Address for ENS Lookup\nDESCRIPTION: Shows how to set a custom universal resolver address when fetching an ENS address using useEnsAddress.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAddress } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAddress({\n  name: normalize('wevm.eth'),\n  universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: GetBytecode Type Imports\nDESCRIPTION: Shows the available type imports for getBytecode parameters, return type, and error type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBytecodeParameters } from '@wagmi/core'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBytecodeReturnType } from '@wagmi/core'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBytecodeErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Connectors in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the injected connector from the Wagmi library, allowing it to be utilized for wallet connection in a React application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/connectors.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injected } from 'wagmi/connectors'\n```\n\n----------------------------------------\n\nTITLE: Storage Options Configuration\nDESCRIPTION: Example of configuring storage options for WalletConnect.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nconst connector = walletConnect({\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n  storageOptions: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEnsAvatar with Custom Asset Gateway URLs\nDESCRIPTION: Example showing how to use the useEnsAvatar composable with custom gateway URLs for resolving IPFS assets.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { getEnsAvatar } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst result = useEnsAvatar({\n  assetGatewayUrls: {\n    ipfs: 'https://cloudflare-ipfs.com',\n  },\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using getClient with Chain ID Parameter\nDESCRIPTION: Demonstrates using getClient with a specific chain ID parameter for the Ethereum mainnet.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getClient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getClient } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst client = await getClient(config, {\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Delay for WebSocket Transport\nDESCRIPTION: Shows how to set a custom retry delay for the WebSocket Transport.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://foo-bar-baz.quiknode.pro/...', {\n  retryDelay: 100,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useAccountEffect\nDESCRIPTION: Demonstrates basic implementation of useAccountEffect with connect and disconnect handlers in a Vue component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useAccountEffect } from '@wagmi/vue'\n\nuseAccountEffect({\n  onConnect(data) {\n    console.log('Connected!', data)\n  },\n  onDisconnect() {\n    console.log('Disconnected!')\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Consolidating readContract Parameters in wagmi\nDESCRIPTION: The readContract and watchReadContract function parameters have been consolidated into a singular config parameter. This simplifies the API and provides a more consistent interface.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\nreadContract(\n  {\n    addressOrName: \"0xecb504d39723b0be0e3a9aa33d646642d1051ee1\",\n    contractInterface: wagmigotchiABI,\n  },\n  \"getHunger\",\n  { args: [0] },\n);\n\nwatchReadContract(\n  {\n    addressOrName: \"0xecb504d39723b0be0e3a9aa33d646642d1051ee1\",\n    contractInterface: wagmigotchiABI,\n  },\n  \"getHunger\",\n  { args: [0] },\n  (result) => {},\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadContract({\n  addressOrName: \"0xecb504d39723b0be0e3a9aa33d646642d1051ee1\",\n  contractInterface: wagmigotchiABI,\n  functionName: \"getHunger\",\n  args: [0],\n});\n\nwatchReadContract(\n  {\n    addressOrName: \"0xecb504d39723b0be0e3a9aa33d646642d1051ee1\",\n    contractInterface: wagmigotchiABI,\n    functionName: \"getHunger\",\n    args: [0],\n  },\n  (result) => {},\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Core and Viem dependencies\nDESCRIPTION: Shows the commands to install Wagmi Core and its required peer dependencies using different package managers (pnpm, npm, yarn, bun). Ensure to specify the appropriate version of Viem based on the peer dependencies defined in the package.json being imported.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/core viem@{{viemVersion}} @wagmi/connectors\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/core viem@{{viemVersion}} @wagmi/connectors\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @wagmi/core viem@{{viemVersion}} @wagmi/connectors\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @wagmi/core viem@{{viemVersion}} @wagmi/connectors\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Nonce Parameter\nDESCRIPTION: Demonstrates the inclusion of the `nonce` parameter that uniquely identifies a transaction, as used in the `useEstimateGas` hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    nonce: 123, // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WriteContractsReturnType Type\nDESCRIPTION: Shows how to import the WriteContractsReturnType type for type safety when handling the return value of the writeContracts function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WriteContractsReturnType } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Name for WebSocket Transport\nDESCRIPTION: Shows how to set a custom name for the WebSocket Transport.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = webSocket('wss://foo-bar-baz.quiknode.pro/...', { \n  name: 'Alchemy WebSocket Provider',\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Asset Type with watchAsset\nDESCRIPTION: Demonstrates how to specify the asset type (currently only 'ERC20' is supported) when using the watchAsset action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchAsset } from '@wagmi/core'\nimport { config } from './config'\n\nconst result = await watchAsset(config, {\n  options: {\n    address: '0x0000000000000000000000000000000000000000',\n    symbol: 'WAGMI',\n    decimals: 18,\n  },\n  type: 'ERC20', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using JSDoc for Wagmi CLI Config Intellisense\nDESCRIPTION: Demonstrates how to use JSDoc type hints to enable editor intellisense for Wagmi CLI configuration in JavaScript.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@wagmi/cli').Config} */\nexport default {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing getGasPrice from @wagmi/core\nDESCRIPTION: Shows how to import the getGasPrice function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getGasPrice.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGasPrice } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Accessing Chain IDs from Chain Objects\nDESCRIPTION: Migration strategy for accessing chain IDs directly from chain objects rather than using the removed chainId export.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n- import { chainId } from '@wagmi/core'\n+ import { mainnet, polygon, optimism } from '@wagmi/core/chains'\n\n-const mainnetChainId = chainId.mainnet\n-const polygonChainId = chainId.polygon\n-const optimismChainId = chainId.optimism\n+const mainnetChainId = mainnet.chainId\n+const polygonChainId = polygon.chainId\n+const optimismChainId = optimism.chainId\n```\n\n----------------------------------------\n\nTITLE: Block Watching Implementation\nDESCRIPTION: Two approaches for implementing block watching functionality using useEffect with useBlockNumber.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQueryClient } from '@tanstack/react-query'\nimport { useEffect } from 'react'\nimport { useBlockNumber, useBalance } from 'wagmi'\n\nconst queryClient = useQueryClient()\nconst { data: blockNumber } = useBlockNumber({ watch: true })\nconst { data: balance, queryKey } = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n})\n\nuseEffect(() => {\n  if (blockNumber % 5 === 0)\n    queryClient.invalidateQueries({ queryKey })\n}, [blockNumber, queryClient])\n```\n\n----------------------------------------\n\nTITLE: Using unit Parameter with useBalance\nDESCRIPTION: Shows how to specify the unit for formatting the balance result.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  unit: 'ether', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined sendTransaction in Prepared Mode with TypeScript\nDESCRIPTION: Shows how to handle the case where sendTransaction is undefined when useSendTransaction is in prepare mode, ensuring proper UI updates.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst { config } = usePrepareSendTransaction({ ... })\nconst { sendTransaction } = useSendTransaction(config)\n\n<button\n  disabled={!sendTransaction}\n  onClick={() => sendTransaction?.()}\n>\n  Send\n</button>\n```\n\n----------------------------------------\n\nTITLE: Consolidating useContractRead Parameters into Single Config Object\nDESCRIPTION: The useContractRead hook has been refactored to accept a single configuration object instead of multiple parameters. This includes moving the function name into the config object and restructuring how arguments are passed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nuseContractRead(\n  {\n    addressOrName: wagmigotchiContractAddress,\n    contractInterface: wagmigotchiABI,\n  },\n  \"love\",\n  { args: \"0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c\" },\n);\n\n// After\nuseContractRead({\n  addressOrName: wagmigotchiContractAddress,\n  contractInterface: wagmigotchiABI,\n  functionName: \"love\",\n  args: \"0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing watchAsset from @wagmi/core\nDESCRIPTION: Shows how to import the watchAsset action from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchAsset } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Array-based Wagmi CLI Configuration\nDESCRIPTION: Shows how to represent Wagmi CLI configuration as an array, allowing multiple configuration objects to be defined.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig([\n  {\n  // config 1\n  },\n  {\n  // config 2\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Transport from wagmi/core\nDESCRIPTION: Shows how to import the HTTP transport from the wagmi core package for use in configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/transports.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing ReactConfig Type in Typescript\nDESCRIPTION: Shows how to import the ReactConfig type from the Wagmi CLI plugins for type-safe configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/react.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ReactConfig } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionConfirmations with Scope Key\nDESCRIPTION: Shows how to use a scope key with the useTransactionConfirmations hook for cache management.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useTransactionConfirmations({\n    scopeKey: 'foo'\n    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Wagmi Generate with Root Path\nDESCRIPTION: Sets a custom root path for resolving the configuration using the --root option.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/generate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwagmi generate --root path/to/root\n```\n\n----------------------------------------\n\nTITLE: Implementing usePrepareSendTransaction Hook in TypeScript\nDESCRIPTION: Demonstrates the usage of the new usePrepareSendTransaction hook for eagerly fetching transaction parameters and preparing config for useSendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareSendTransaction, useSendTransaction } from \"@wagmi/core\";\n\nconst { config } = usePrepareSendTransaction({\n  request: {\n    to: \"moxey.eth\",\n    value: parseEther(\"1\"),\n  },\n});\nconst { sendTransaction } = useSendTransaction(config);\n```\n\n----------------------------------------\n\nTITLE: Parameters Type Import\nDESCRIPTION: Shows how to import the type definition for useAccountEffect parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type useAccountEffectParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Setting Block Number for ENS Address Lookup\nDESCRIPTION: Shows how to specify a block number when fetching an ENS address using useEnsAddress.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAddress } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAddress({\n  blockNumber: 17829139n,\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing ChainNotConfiguredError\nDESCRIPTION: Error class for when a chain is not properly configured in the Config['chains']\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChainNotConfiguredError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useStorageAt Hook\nDESCRIPTION: Shows how to use a custom configuration with the useStorageAt hook instead of the default configuration from WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStorageAt } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useStorageAt({\n    config,\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    slot: '0x0',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCallsStatus with Custom Config\nDESCRIPTION: Demonstrates how to use the hook with a custom configuration, allowing more granular control over the call status retrieval process\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCallsStatus.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallsStatus } from 'wagmi/experimental'\nimport { config } from './config'\n\nfunction App() {\n  const result = useCallsStatus({\n    config,\n    id: '0x...',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Provider Selection for InjectedConnector\nDESCRIPTION: Example of how to specify a custom Ethereum provider when using the InjectedConnector, useful for targeting specific wallets beyond the default window.ethereum.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectedConnector } from \"@wagmi/core/connectors/injected\";\n\nconst connector = new InjectedConnector({\n  options: {\n    name: \"My Injected Wallet\",\n    getProvider: () =>\n      typeof window !== \"undefined\" ? window.myInjectedWallet : undefined,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using useClient with Custom Config\nDESCRIPTION: Shows how to use the useClient hook with a custom configuration instead of using the one from WagmiProvider context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useClient.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useClient } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const client = useClient({\n    config, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useTransaction Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the useTransaction hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransaction } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing UseConnectReturnType\nDESCRIPTION: Shows how to import the type definition for useConnect return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseBalanceParameters Type\nDESCRIPTION: Shows how to import the UseBalanceParameters type definition from the @wagmi/vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { type UseBalanceParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi and Dependencies via CDN\nDESCRIPTION: This HTML script tag demonstrates how to import Wagmi and its dependencies using an ESM-compatible CDN for projects not using a package manager.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import React from 'https://esm.sh/react@18.2.0'\n  import { QueryClient } from 'https://esm.sh/@tanstack/react-query'\n  import { createClient } from 'https://esm.sh/viem@{{viemVersion}}'\n  import { createConfig } from 'https://esm.sh/wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Specifying Legacy Transaction Type in estimateFeesPerGas\nDESCRIPTION: Demonstrates setting the type parameter to 'legacy' for pre-EIP1559 transaction fee estimation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateFeesPerGas } from '@wagmi/core'\nimport { config } from './config'\n\nconst result = estimateFeesPerGas(config, {\n  type: 'legacy', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useSignTypedData from Wagmi Vue\nDESCRIPTION: Basic import statement for the useSignTypedData composable\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignTypedData.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignTypedData } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Updating watchSigner Function Call in TypeScript\nDESCRIPTION: Shows the change in watchSigner function signature which now requires an arguments object as its first parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nimport { watchSigner } from `@wagmi/core`\n\n-watchSigner(signer => {\n+watchSigner({}, signer => {\n  console.log('new signer!', signer)\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with Chain ID\nDESCRIPTION: This example demonstrates using the useTransaction hook with a specific chain ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransaction } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useTransaction({\n    chainId: mainnet.id,\n    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Building defaultL2Chains Manually\nDESCRIPTION: Approach for recreating the defaultL2Chains export by importing and combining specific L2 chains after the export was removed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n- import { defaultL2Chains } from '@wagmi/core'\n+ import {\n+   arbitrum,\n+   arbitrumGoerli,\n+   polygon,\n+   polygonMumbai,\n+   optimism,\n+   optimismGoerli\n+ } from '@wagmi/core/chains'\n\n+ const defaultL2Chains = [\n+  arbitrum,\n+  arbitrumGoerli,\n+  polygon,\n+  polygonMumbai,\n+  optimism\n+  optimismGoerli\n+ ]\n```\n\n----------------------------------------\n\nTITLE: Importing Connect Function from Wagmi Core\nDESCRIPTION: Shows how to import the 'connect' function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/connect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useWriteContracts Hook in React\nDESCRIPTION: Demonstrates how to use a custom configuration with the useWriteContracts hook in a React component, instead of using the default configuration from WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContracts.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWriteContracts } from 'wagmi/experimental'\nimport { config } from './config'\n\nfunction App() {\n  const result = useWriteContracts({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Core with bun\nDESCRIPTION: Install the Wagmi Core library using bun, alongside Viem, by specifying the necessary Viem version as listed in peerDependencies.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @wagmi/core viem@{{viemVersion}}\n```\n\n----------------------------------------\n\nTITLE: Polling Configuration\nDESCRIPTION: Demonstrates how to configure polling settings for transaction monitoring\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchPendingTransactions } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchPendingTransactions(config, {\n  onTransactions(transactions) {\n    console.log('New transactions!', transactions)\n  },\n  poll: false,\n})\n```\n\n----------------------------------------\n\nTITLE: normalizeChainId with Various Input Types in TypeScript\nDESCRIPTION: Demonstrates using normalizeChainId with different input types: bigint, number, and string.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/normalizeChainId.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalizeChainId } from '{{packageName}}'\n\nnormalizeChainId(1n)\nnormalizeChainId(1)\nnormalizeChainId('0x1')\n```\n\n----------------------------------------\n\nTITLE: Setting Chain ID for ENS Address Lookup\nDESCRIPTION: Shows how to specify a chain ID when fetching an ENS address using useEnsAddress.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAddress } from '@wagmi/vue'\nimport { mainnet } from '@wagmi/vue/chains'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAddress({\n  chainId: mainnet.id,\n  name: normalize('wevm.eth'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Lossy BigInt Serialization with JSON Replacer in TypeScript\nDESCRIPTION: Shows how to implement a custom replacer function for JSON.stringify to handle BigInt values in a lossy manner. This approach converts BigInt values to strings but doesn't provide a way to deserialize them back to BigInt.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst replacer = (key, value) =>\n  typeof value === 'bigint' ? value.toString() : value\n\nJSON.stringify({ value: 69420n }, replacer)\n// '{\"value\":\"69420\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi CLI with Foundry Plugin in TypeScript\nDESCRIPTION: Demonstrates how to use the Foundry plugin in the Wagmi CLI configuration, specifying the Foundry project path.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { foundry } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    foundry({\n      project: '../hello_foundry',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Inline Types for useSignTypedData\nDESCRIPTION: Demonstrates type inference for the useSignTypedData hook with inline type definitions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignTypedData.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignTypedData } from 'wagmi'\n// ---cut---\nconst { signTypedData } = useSignTypedData()\n\nsignTypedData({\n  types: {\n    Person: [\n      { name: 'name', type: 'string' },\n      { name: 'wallet', type: 'address' },\n    ],\n    Mail: [\n      { name: 'from', type: 'Person' },\n      { name: 'to', type: 'Person' },\n      { name: 'contents', type: 'string' },\n    ],\n  },\n  primaryType: 'Mail',\n  // ^?\n\n\n  message: {\n  // ^?\n\n\n\n\n\n\n\n\n\n\n\n\n    from: {\n      name: 'Cow',\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n    },\n    to: {\n      name: 'Bob',\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n    },\n    contents: 'Hello, Bob!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useConnectorClient with Specific Connector\nDESCRIPTION: Shows how to specify a connector when using the useConnectorClient composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnections, useConnectorClient } from '@wagmi/vue'\n\nconst connections = useConnections(config)\nconst result = useConnectorClient({\n  connector: connections[0]?.connector, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using scopeKey with useEnsResolver Hook\nDESCRIPTION: Demonstrates how to use the scopeKey parameter to scope the cache to a specific context, allowing for controlled cache sharing between hooks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsResolver } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsResolver({\n    name: normalize('wevm.eth'),\n    scopeKey: 'foo', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Usage with Chain ID Parameter\nDESCRIPTION: Example showing how to use estimateMaxPriorityFeePerGas with a specific chain ID parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateMaxPriorityFeePerGas.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateMaxPriorityFeePerGas } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst result = await estimateMaxPriorityFeePerGas(config, {\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getBytecode Function\nDESCRIPTION: Shows how to import the getBytecode function from @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBytecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBytecode } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Root Path for Wagmi Initialization in Bash\nDESCRIPTION: Using the '--root' option to specify a custom root path from which to resolve the configuration. This is useful when the configuration needs to be created in a specific directory.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/init.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwagmi init --root path/to/root\n```\n\n----------------------------------------\n\nTITLE: Importing UseWatchContractEventReturnType\nDESCRIPTION: Shows how to import the return type definition for the useWatchContractEvent composable for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchContractEvent.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchContractEventReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Checking Wagmi CLI Version\nDESCRIPTION: Displays the version number of the installed Wagmi CLI using different package managers. The -v or --version flag shows the current version of the tool.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm wagmi --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx wagmi --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn wagmi --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun wagmi --version\n```\n\n----------------------------------------\n\nTITLE: Using useTransactionConfirmations with Transaction Receipt\nDESCRIPTION: Demonstrates how to use the useTransactionConfirmations hook with a transaction receipt parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionConfirmations } from 'wagmi'\n\nfunction App() {\n  const result = useTransactionConfirmations({\n    transactionReceipt: { ... },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Key for HTTP Transport\nDESCRIPTION: Assigns a custom key identifier to the HTTP transport.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...', {\n  key: 'alchemy', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing TanStack Query Parameters\nDESCRIPTION: Example showing how to properly structure TanStack Query parameters within the query property in Wagmi v2.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nuseReadContract({\n  query: {\n    enabled: false,\n    staleTime: 1_000,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsResolver Hook in TypeScript\nDESCRIPTION: Shows how to import the useEnsResolver hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsResolver.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsResolver } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using useWalletClient with Custom Config\nDESCRIPTION: This snippet shows how to use the useWalletClient hook with a custom configuration object imported from a separate file.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWalletClient } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useWalletClient({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Plugin in Typescript\nDESCRIPTION: Shows how to import the React plugin from the Wagmi CLI plugins.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/react.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { react } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Setting Scope Key for ENS Address Lookup\nDESCRIPTION: Demonstrates how to set a scope key when fetching an ENS address using useEnsAddress.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEnsAddress } from '@wagmi/vue'\nimport { normalize } from 'viem/ens'\n\nconst result = useEnsAddress({\n  name: normalize('wevm.eth'),\n  scopeKey: 'foo',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing getChainId Function\nDESCRIPTION: Shows how to import the getChainId function from the Wagmi Core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getChainId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getChainId } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Defining Package Name in Vue Component\nDESCRIPTION: A Vue script setup block that defines a constant 'packageName' with the value '@wagmi/core'. This is likely used as a configuration variable for documentation or examples.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/utilities/deserialize.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry Plugin Name Prefix in TypeScript\nDESCRIPTION: Shows how to set a name prefix for artifacts in the Foundry plugin configuration for Wagmi CLI, useful for preventing name collisions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { foundry } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    foundry({\n      namePrefix: 'HelloFoundry',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Wagmi CLI Config\nDESCRIPTION: Demonstrates how to load environment variables in a Wagmi CLI configuration using the loadEnv utility function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/configuring-cli.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, loadEnv } from '@wagmi/cli'\n\nexport default defineConfig(() => {\n  const env = loadEnv({\n    mode: process.env.NODE_ENV,\n    envDir: process.cwd(),\n  })\n  return {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useTransaction hook in a React component to fetch transaction data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransaction.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransaction } from 'wagmi'\n\nfunction App() {\n  const result = useTransaction({\n    hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Import UseChainIdReturnType Type\nDESCRIPTION: Imports the `UseChainIdReturnType` type from the wagmi library. This type defines the return type of the `useChainId` hook, which is a number representing the chain ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChainId.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseChainIdReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Customizing Transport key\nDESCRIPTION: Shows how to set a custom key for the Transport, which can be used for identification purposes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = custom(\n  provider,\n  { \n    key: 'windowProvider', // [!code focus]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing useWatchPendingTransactions Hook in TypeScript\nDESCRIPTION: Shows how to import the useWatchPendingTransactions hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchPendingTransactions } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useBlockNumber Hook (TypeScript)\nDESCRIPTION: Demonstrates the simple import statement required to use the 'useBlockNumber' hook from 'wagmi'. This is a prerequisite for utilizing the hook's functionality.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockNumber.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useBlockNumber } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract with Data Suffix\nDESCRIPTION: This example shows how to use the useSimulateContract composable with a data suffix parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  dataSuffix: '0xdeadbeef',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useWalletClient Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the useWalletClient hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWalletClient } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing ProviderNotFoundError\nDESCRIPTION: Error class for when a connector's provider cannot be found or used\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProviderNotFoundError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSendTransactionReturnType\nDESCRIPTION: Shows how to import the UseSendTransactionReturnType type from the @wagmi/vue library for type checking the return value of useSendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSendTransaction.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSendTransactionReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useWatchContractEvent in Vue\nDESCRIPTION: Shows how to import the useWatchContractEvent composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchContractEvent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchContractEvent } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Converting Viem Client to Ethers Signer (v6)\nDESCRIPTION: Utility functions for converting a Viem client to an Ethers.js v6 signer, using the newer BrowserProvider and JsonRpcSigner classes. Includes a React hook implementation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/ethers.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserProvider, JsonRpcSigner } from 'ethers'\nimport { useMemo } from 'react'\nimport type { Account, Chain, Client, Transport } from 'viem'\nimport { type Config, useConnectorClient } from 'wagmi'\n\nexport function clientToSigner(client: Client<Transport, Chain, Account>) {\n  const { account, chain, transport } = client\n  const network = {\n    chainId: chain.id,\n    name: chain.name,\n    ensAddress: chain.contracts?.ensRegistry?.address,\n  }\n  const provider = new BrowserProvider(transport, network)\n  const signer = new JsonRpcSigner(provider, account.address)\n  return signer\n}\n\n/** Hook to convert a viem Wallet Client to an ethers.js Signer. */\nexport function useEthersSigner({ chainId }: { chainId?: number } = {}) {\n  const { data: client } = useConnectorClient<Config>({ chainId })\n  return useMemo(() => (client ? clientToSigner(client) : undefined), [client])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi CLI with React Plugin in Typescript\nDESCRIPTION: Demonstrates how to use the React plugin in the Wagmi CLI configuration. The plugin is added to the plugins array in the configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/react.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { react } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectorAlreadyConnectedError\nDESCRIPTION: Error class for when a connector is already in a connected state\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectorAlreadyConnectedError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Max Fee Per Gas Parameter - TypeScript\nDESCRIPTION: This example shows how to specify the maximum fee per gas in an EIP-1559 transaction using the usePrepareTransactionRequest hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther, parseGwei } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    maxFeePerGas: parseGwei('20'),\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing watchConnectors from @wagmi/core\nDESCRIPTION: Shows how to import the watchConnectors function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnectors.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchConnectors } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifacts Directory\nDESCRIPTION: Example showing how to configure the artifacts directory path.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { hardhat } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    hardhat({\n      artifacts: 'out/',\n      project: '../hello_hardhat',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing webSocket Transport in TypeScript\nDESCRIPTION: Shows how to import the webSocket Transport from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/webSocket.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { webSocket } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing Config Type\nDESCRIPTION: Shows how to import the Config type for TypeScript type annotations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Config } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Serialize Function\nDESCRIPTION: Demonstrates how to use a custom serialize function when creating a Storage object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage, serialize } from '{{packageName}}'\n\nconst storage = createStorage({\n  serialize,\n  storage: localStorage,\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script Setup for Chain Documentation\nDESCRIPTION: Sets up a Vue component that imports package.json to extract the Viem dependency version and imports a SearchChains component for the UI.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/chains.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport packageJson from '../../../package.json'\nimport SearchChains from '../../components/SearchChains.vue'\n\nconst viemVersion = packageJson.devDependencies.viem\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updated Chain Type Structure in TypeScript\nDESCRIPTION: Breaking change to the Chain type structure, modifying how RPC URLs are defined to include HTTP and WebSocket transport methods as arrays rather than individual string values.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Chain = {\n  ...\n  rpcUrls: {\n-   [key: string]: string\n+   [key: string]: {\n+     http: string[]\n+     webSocket: string[]\n+   }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GetClientParameters Type\nDESCRIPTION: Shows how to import the GetClientParameters type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetClientParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using useBlockTransactionCount with scopeKey Parameter\nDESCRIPTION: Example of using the scopeKey parameter to isolate cache contexts between different instances of the hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlockTransactionCount } from 'wagmi'\nimport { config } from './config' \n\nfunction App() {\n  const result = useBlockTransactionCount({\n    scopeKey: 'foo', \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi CLI Plugins\nDESCRIPTION: Demonstrates how to import plugins from the @wagmi/cli/plugins entrypoint\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { etherscan } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi HTTP Transport\nDESCRIPTION: Example showing how to import the HTTP transport from the Wagmi library for making RPC requests.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/transports.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useSwitchAccount in TypeScript\nDESCRIPTION: Basic import statement for the useSwitchAccount composable from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSwitchAccount } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing showCallsStatus Action in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the showCallsStatus action from the @wagmi/core/experimental package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/showCallsStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { showCallsStatus } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Wagmi Generate with Config Path\nDESCRIPTION: Specifies a custom path to the configuration file using the --config option.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/generate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwagmi generate --config wagmi.config.ts\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsAvatar in Vue\nDESCRIPTION: Demonstrates how to import the useEnsAvatar composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsAvatar } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Disabling Multi-Injected Provider Discovery\nDESCRIPTION: Shows how to disable the automatic discovery of injected providers via EIP-6963.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  multiInjectedProviderDiscovery: false, // [!code focus]\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Core Documentation Variables in Vue\nDESCRIPTION: Sets up constant variables for Wagmi Core documentation configuration using Vue's script setup syntax. Defines the documentation path and package name reference.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/transports/unstable_connector.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'core'\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using usePrepareTransactionRequest with Gas Price Parameter - TypeScript\nDESCRIPTION: This snippet includes the gas price parameter in the transaction request, demonstrating how to specify the cost per unit of gas for the transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\nimport { parseEther, parseGwei } from 'viem'\n\nfunction App() {\n  const result = usePrepareTransactionRequest({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    gasPrice: parseGwei('20'),\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n    value: parseEther('1'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsName Composable in Vue.js\nDESCRIPTION: This snippet shows how to import the useEnsName composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsName.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsName } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing GetBlockNumberReturnType\nDESCRIPTION: Shows how to import the return type for the getBlockNumber function, which is a bigint representing the most recent block number.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBlockNumberReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Setting Chain ID in Etherscan Plugin Configuration\nDESCRIPTION: Demonstrates how to set the chain ID for fetching ABIs in the Etherscan plugin. The chain ID is used to select the appropriate address when multiple chain-specific addresses are provided.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { blockExplorer } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    etherscan({\n      apiKey: process.env.ETHERSCAN_API_KEY,\n      chainId: 1,\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n        {\n          name: 'EnsRegistry',\n          address: {\n            1: '0x314159265dd8dbb310642f98f50c066173c1259b',\n            5: '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n          },\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useBlock with blockNumber Parameter\nDESCRIPTION: Example of using the useBlock hook with a blockNumber parameter to get transaction count for a specific block number.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlock } from 'wagmi'\n\nfunction App() {\n  const result = useBlock({\n    blockNumber: 42069n \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UseTransactionReceiptReturnType\nDESCRIPTION: Example of importing the TypeScript return type for the useTransactionReceipt composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseTransactionReceiptReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Custom Config Usage with useSwitchChain\nDESCRIPTION: Shows how to use useSwitchChain with a custom configuration object imported from a separate config file.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchChain.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSwitchChain } from '@wagmi/vue'\nimport { config } from './config'\n\nconst result = useSwitchChain({\n  config,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useConnectors from wagmi\nDESCRIPTION: Shows how to import the useConnectors hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectors.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useConnectors } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Configuring Name Prefix\nDESCRIPTION: Example showing how to configure a prefix for artifact names to prevent naming collisions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { hardhat } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    hardhat({\n      namePrefix: 'HelloHardhat',\n      project: '../hello_hardhat',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Vue Package with Bun\nDESCRIPTION: Command to install the Wagmi Vue package and its dependencies using Bun. It includes the core package, Viem with a specific version, and TanStack Query.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun add @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Vue Package with NPM\nDESCRIPTION: Command to install the Wagmi Vue package and its dependencies using NPM. It includes the core package, Viem with a specific version, and TanStack Query.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/vue viem@{{viemVersion}} @tanstack/vue-query\n```\n\n----------------------------------------\n\nTITLE: Using the onChange Callback with watchPublicClient\nDESCRIPTION: Demonstrates how to implement the onChange callback function that gets called when the Public Client changes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPublicClient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchPublicClient } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchPublicClient(config, {\n  onChange(client) { // [!code focus:3]\n    console.log('Public Client changed!', client)\n  },\n})\nunwatch()\n```\n\n----------------------------------------\n\nTITLE: Using Scope Key with useStorageAt Hook\nDESCRIPTION: Demonstrates how to use a scope key with the useStorageAt hook to scope the cache to a specific context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStorageAt } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useStorageAt({\n    scopeKey: 'foo'\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    slot: '0x0',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnected Account Type Narrowing Example\nDESCRIPTION: TypeScript example demonstrating type narrowing when account status is 'disconnected', showing how the type system handles undefined properties.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/getAccount-return-type.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (account.status === 'disconnected') {\n  account\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring retry count for custom Transport\nDESCRIPTION: Shows how to adjust the maximum number of retry attempts when a request fails. The default is 3 retries.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = custom(provider, {\n  retryCount: 5, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using useWalletClient with Account Parameter\nDESCRIPTION: This snippet shows how to use the useWalletClient hook with a specific account address as a parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWalletClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWalletClient } from 'wagmi'\n\nfunction App() {\n  const result = useWalletClient({\n    account: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Scope Key for Cache Control\nDESCRIPTION: Shows how to use the scopeKey parameter to control caching behavior for useReadContract calls.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useReadContract } from '@wagmi/vue'\nimport { abi } from './abi'\n\nconst result = useReadContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'balanceOf',\n  args: ['0x6b175474e89094c44da98b954eedeac495271d0f'],\n  scopeKey: 'foo', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsAddress Parameter Types in TypeScript\nDESCRIPTION: This snippet shows how to import the type definition for useEnsAddress parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseEnsAddressParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing Foundry Configuration Type in TypeScript\nDESCRIPTION: Shows how to import the FoundryConfig type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type FoundryConfig } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Wagmi Initialization in Bash\nDESCRIPTION: Using the '--help' option to display the help message for the 'wagmi init' command. This provides information about available options and usage.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/init.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwagmi init --help\n```\n\n----------------------------------------\n\nTITLE: Using Recklessly Unprepared Mode in useContractWrite with TypeScript\nDESCRIPTION: Shows how to use useContractWrite without preparation by setting mode to 'recklesslyUnprepared', maintaining previous functionality for users not ready to upgrade.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\nimport { useContractWrite } from 'wagmi'\n\nconst { data } = useContractWrite({\n+ mode: 'recklesslyUnprepared',\n  addressOrName: '0x...',\n  contractInterface: wagmiAbi,\n  functionName: 'mint',\n  args: [tokenId],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing GetCallsStatusErrorType in TypeScript\nDESCRIPTION: Demonstrates how to import the GetCallsStatusErrorType for handling potential errors from the action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCallsStatus.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetCallsStatusErrorType } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Run Development Playgrounds with pnpm\nDESCRIPTION: Commands to run various development playgrounds for different parts of the Wagmi project, allowing developers to test changes in a local environment.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\npnpm dev              # `wagmi` playground\\npnpm dev:core         # `@wagmi/core` playground\\npnpm dev:create-wagmi # `create-wagmi` cli tool\\npnpm dev:cli          # `@wagmi/cli` tool\\npnpm dev:next         # `wagmi` playground with Next.js\\npnpm dev:nuxt         # `@wagmi/vue` playground with Nuxt.js\\npnpm dev:react        # `wagmi` playground (same as `pnpm dev`)\\npnpm dev:vue          # `@wagmi/vue` playground\n```\n\n----------------------------------------\n\nTITLE: Importing useSwitchAccount Hook in TypeScript\nDESCRIPTION: Shows how to import the useSwitchAccount hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSwitchAccount } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsText Hook in TypeScript\nDESCRIPTION: Shows how to import the useEnsText hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsText } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Block Retrieval by Tag\nDESCRIPTION: Example of retrieving block information using a block tag\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlock } from '@wagmi/core'\nimport { config } from './config'\n\nconst blockNumber = await getBlock(config, {\n  blockTag: 'pending'\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Configuration\nDESCRIPTION: Initial Vue script setup defining package and action names for contract writing functionality.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'writeContract'\nconst typeName = 'WriteContract'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing WagmiProviderNotFoundError in React\nDESCRIPTION: Error class thrown when Wagmi hooks are used outside of a WagmiProvider context. This indicates improper setup of the Wagmi provider in a React application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WagmiProviderNotFoundError } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing SwitchAccountReturnType\nDESCRIPTION: Shows how to import the SwitchAccountReturnType for TypeScript type checking of the function's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchAccount.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SwitchAccountReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connectors from Sidebar in Vue\nDESCRIPTION: This snippet imports and retrieves the wallet connectors from the sidebar configuration for the React route, sorting them alphabetically. It makes use of the VitePress sidebar functionality to ensure connectors are displayed correctly based on the current context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/connectors.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getSidebar } from '../../.vitepress/sidebar'\n\nconst connectors = getSidebar()['/react']\n  .find(x => x.text.includes('Configuration')).items\n  .find(x => x.text.includes('Connectors')).items\n  .sort((a, b) => a.text.localeCompare(b.text))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing WaitForTransactionReceiptParameters Type\nDESCRIPTION: Example of importing the WaitForTransactionReceiptParameters type from @wagmi/core for TypeScript type safety.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WaitForTransactionReceiptParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useCapabilities Hook - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the useCapabilities hook from the wagmi/experimental package, which is essential for leveraging the library's functionality in React components.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCapabilities } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing useDisconnect Hook in TypeScript\nDESCRIPTION: Shows how to import the useDisconnect hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDisconnect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDisconnect } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using setItem Method of Storage\nDESCRIPTION: Shows how to use the setItem method of the Storage object to store data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage } from '{{packageName}}'\n\nconst storage = createStorage({ storage: localStorage })\nstorage.setItem('recentConnectorId', 'foo')\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Time\nDESCRIPTION: Shows how to configure the cache time for polling-enabled features.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  cacheTime: 4_000, // [!code focus]\n  transports: {\n    [mainnet.id]: http('https://mainnet.example.com'),\n    [sepolia.id]: http('https://sepolia.example.com'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing watchBlocks from @wagmi/core\nDESCRIPTION: Shows how to import the watchBlocks function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchBlocks } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing getConnectors from Wagmi Core\nDESCRIPTION: Shows how to import the getConnectors function from the Wagmi Core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectors.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnectors } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using useCapabilities with a ScopeKey Parameter - TSX\nDESCRIPTION: This snippet shows how to apply a scopeKey to the useCapabilities hook, allowing for caching and context-scoped data consistency across multiple hook usages within the same context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCapabilities.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst result = useCapabilities({\n  scopeKey: 'foo', // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Using simulateContract with Gas Parameter\nDESCRIPTION: Shows how to use the simulateContract function with a specific gas limit for the simulation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateContract } from '@wagmi/core'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = await simulateContract(config, {\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  gas: parseGwei('20'),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing WatchPublicClientReturnType Type\nDESCRIPTION: Shows how to import the TypeScript type definition for the watchPublicClient return type, which is a cleanup function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPublicClient.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchPublicClientReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useBalance Composable in Vue\nDESCRIPTION: Shows how to import the useBalance composable from the @wagmi/vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useBalance } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing getConnections from wagmi core\nDESCRIPTION: Shows how to import the getConnections function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnections.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Updating Alchemy and Infura Provider Configuration in TypeScript\nDESCRIPTION: Changes the configuration for Alchemy and Infura providers to use a generic 'apiKey' option instead of specific ID fields.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\nimport { alchemyProvider } from '@wagmi/core/providers/alchemy'\nimport { infuraProvider } from '@wagmi/core/providers/infura'\n\nalchemyProvider({\n-  alchemyId: 'yourAlchemyApiKey',\n+  apiKey: 'yourAlchemyApiKey',\n})\n\ninfuraProvider({\n-  infuraId: 'yourInfuraApiKey',\n+  apiKey: 'yourInfuraApiKey',\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode\nDESCRIPTION: Shows how to enable debug mode in Safe connector configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/safe.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safe } from '{{connectorsPackageName}}'\n\nconst connector = safe({\n  debug: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing GetCallsStatusReturnType in TypeScript\nDESCRIPTION: Shows how to import the GetCallsStatusReturnType for type checking the action's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCallsStatus.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetCallsStatusReturnType } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Deprecated Usage of normalizeChainId in TypeScript\nDESCRIPTION: Demonstrates the deprecated usage of normalizeChainId and recommends using Number instead.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/normalizeChainId.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalizeChainId } from '{{packageName}}' // [!code --]\nconst chainId = normalizeChainId(123n) // [!code --]\nconst chainId = Number(123n) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Patch Change Notes and Version History\nDESCRIPTION: Markdown formatted changelog entries documenting updates to the Wagmi library, including new connectors, chain support, bug fixes and dependency updates.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#1621](https://github.com/wevm/wagmi/pull/1621) [`5812b590`](https://github.com/wevm/wagmi/commit/5812b5909277bf2862cb57a31d52465b47291410) Thanks [@tmm](https://github.com/tmm)! - Bumped @wagmi/connectors\n\n## 0.8.10\n\n### Patch Changes\n\n- [#1598](https://github.com/wevm/wagmi/pull/1598) [`fc10ebe6`](https://github.com/wevm/wagmi/commit/fc10ebe659dd5f3b7a8e00581f094652280a779b) Thanks [@jxom](https://github.com/jxom)! - Fixed CJS dependency version range\n\n## 0.8.9\n\n### Patch Changes\n\n- [#1593](https://github.com/wevm/wagmi/pull/1593) [`216d555c`](https://github.com/wevm/wagmi/commit/216d555c62bd95c3c7c8f8e20f7269f6c8504610) Thanks [@jxom](https://github.com/jxom)! - Added CJS escape hatch bundle under the \"cjs\" tag.\n\n## 0.8.8\n\n### Patch Changes\n\n- [#1573](https://github.com/wevm/wagmi/pull/1573) [`ef380d9c`](https://github.com/wevm/wagmi/commit/ef380d9c6d51ae0495b9c35925d2843c75d97fd4) Thanks [@tmm](https://github.com/tmm)! - Updated internal types.\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi Module in Nuxt Config\nDESCRIPTION: Configuration setup for enabling Wagmi Vue module in Nuxt.js application. Adds the module to Nuxt's module system for auto-importing Wagmi composables.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/Nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from 'nuxt/config'\n\nexport default defineNuxtConfig({\n  modules: ['@wagmi/vue/nuxt'],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing usePrepareContractWrite Hook in TypeScript\nDESCRIPTION: Introduces the new usePrepareContractWrite hook for fetching parameters required for contract write transactions, returning config for useContractWrite.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst { config } = usePrepareContractWrite({\n  addressOrName: \"0xecb504d39723b0be0e3a9aa33d646642d1051ee1\",\n  contractInterface: wagmigotchiABI,\n  functionName: \"feed\",\n});\nconst { write } = useContractWrite(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Core with yarn\nDESCRIPTION: Use yarn to add the Wagmi Core library along with its peer dependency, Viem, ensuring the correct Viem version is installed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @wagmi/core viem@{{viemVersion}}\n```\n\n----------------------------------------\n\nTITLE: Importing WagmiProvider in TypeScript\nDESCRIPTION: Shows how to import the WagmiProvider component from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { WagmiProvider } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Setting retry delay for custom Transport\nDESCRIPTION: Demonstrates how to configure the base delay between retry attempts in milliseconds. The transport uses exponential backoff for the actual delay calculation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = custom(provider, {\n  retryDelay: 100, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Coinbase Wallet Connector\nDESCRIPTION: Shows how to import the Coinbase Wallet connector from wagmi connectors package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinbaseWallet } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: Using blockNumber Parameter in useVerifyMessage\nDESCRIPTION: Example of using the blockNumber parameter when verifying a message signed by a Smart Contract Account.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVerifyMessage } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\n\nfunction App() {\n  const result = useVerifyMessage({\n    blockNumber: 12345678n,\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    message: 'hello world',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Script Variables\nDESCRIPTION: Vue script setup defining package, action and type names for ENS avatar functionality\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'getEnsAvatar'\nconst typeName = 'GetEnsAvatar'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting cacheTime Parameter in useBlockNumber\nDESCRIPTION: Shows how to set the cacheTime parameter when using the useBlockNumber composable to control how long the block number remains in memory.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBlockNumber } from '@wagmi/vue'\n\nconst { data: blockNumber } = useBlockNumber({\n  cacheTime: 4_000\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing GetBlockNumberErrorType\nDESCRIPTION: Shows how to import the error type for the getBlockNumber function for handling potential errors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBlockNumberErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for Transport Documentation\nDESCRIPTION: Vue component script that processes sidebar configuration to extract and sort transport-related documentation items.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/transports.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getSidebar } from '../../.vitepress/sidebar'\n\nconst transports = getSidebar()['/core']\n  .find(x => x.text.includes('Configuration')).items\n  .find(x => x.text.includes('Transports')).items\n  .sort((a, b) => a.text.localeCompare(b.text))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Wagmi Package Names in Vue Script Setup\nDESCRIPTION: Script setup block that declares constant variables for Wagmi package names, including the main Vue package and connectors package. These constants are likely used for importing and configuring Wagmi functionality within the Vue application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/connectors/safe.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\nconst connectorsPackageName = '@wagmi/vue/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useConnections in React Component\nDESCRIPTION: Demonstrates how to use the useConnections hook within a React functional component to retrieve active connections\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnections.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const connections = useConnections()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Chain in TypeScript\nDESCRIPTION: Example of how to manually define a deprecated chain (Rinkeby) after its removal from the library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Chain } from 'wagmi'\n\nexport const rinkeby: Chain = {\n id: 4,\n name: 'Rinkeby',\n network: 'rinkeby',\n nativeCurrency: { name: 'Rinkeby Ether', symbol: 'ETH', decimals: 18 },\n rpcUrls: {\n   alchemy: 'https://eth-rinkeby.alchemyapi.io/v2',\n   default: 'https://rpc.ankr.com/eth_rinkeby',\n   infura: 'https://rinkeby.infura.io/v3',\n   public: 'https://rpc.ankr.com/eth_rinkeby',\n  },\n blockExplorers: {\n   etherscan: 'https://rinkeby.etherscan.io',\n   default: 'https://rinkeby.etherscan.io',\n },\n ens: {\n   address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n },\n multicall: {\n   address: '0xca11bde05977b3631167028862be2a173976ca11',\n   blockCreated: 10299530,\n },\n testnet: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Import UseSendCallsParameters\nDESCRIPTION: Imports the `UseSendCallsParameters` type from the `wagmi/experimental` package. This type is used to define the parameters that can be passed to the `useSendCalls` hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendCalls.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n\"import { type UseSendCallsParameters } from 'wagmi/experimental'\"\n```\n\n----------------------------------------\n\nTITLE: Using fetchEnsAddress for ENS Name Resolution\nDESCRIPTION: This snippet illustrates how to resolve an ENS name to an address before using it in the fetchBalance function. It handles scenarios where the user previously relied on the deprecated 'addressOrName' parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n+ const { data: address } = await fetchEnsAddress({ name: 'example.eth' })\\nconst result = await fetchBalance({\\n- addressOrName: 'example.eth',\\n+ address,\\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useBlockNumber in Vue\nDESCRIPTION: Shows how to import the useBlockNumber composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBlockNumber } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing WriteContractsParameters Type\nDESCRIPTION: Shows how to import the WriteContractsParameters type from the experimental package for type safety when using the writeContracts function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WriteContractsParameters } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Updating useSendTransaction Return Type in TypeScript\nDESCRIPTION: Changes the return type of useSendTransaction to only include hash and wait properties, removing the full TransactionResponse. Demonstrates how to use useTransaction for full response.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nimport { useSendTransaction, useTransaction } from 'wagmi'\n\nconst {\n  data: {\n    hash,\n    wait,\n-   ...transaction\n  }\n} = useSendTransaction(...)\n\n+const { data: transaction } = useTransaction({ hash })\n```\n\n----------------------------------------\n\nTITLE: Importing SendTransactionReturnType\nDESCRIPTION: Shows how to import the SendTransactionReturnType for TypeScript type checking of the return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SendTransactionReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseBlockTransactionCountParameters Type\nDESCRIPTION: Shows how to import the parameter type definition for the useBlockTransactionCount hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseBlockTransactionCountParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useEstimateMaxPriorityFeePerGas from wagmi\nDESCRIPTION: This snippet demonstrates how to import the useEstimateMaxPriorityFeePerGas hook from the wagmi package, which is necessary to use the hook within a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateMaxPriorityFeePerGas.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateMaxPriorityFeePerGas } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Run Test Suite with pnpm\nDESCRIPTION: Commands to run the test suite using pnpm, ensuring code is tested for quality and functionality through multiple options, including test coverage.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\npnpm test [package?] # runs tests in watch mode\\npnpm test:cov        # runs tests and reports coverage\\npnpm test:core       # runs `@wagmi/core` tests\\npnpm test:react      # runs `wagmi` tests\\npnpm test:vue        # runs `@wagmi/vue` tests\n```\n\n----------------------------------------\n\nTITLE: WatchConnectionsParameters Type Import\nDESCRIPTION: Shows how to import the TypeScript type definition for watchConnections parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnections.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchConnectionsParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Updating WalletConnectConnector Logic\nDESCRIPTION: Updates the WalletConnectConnector to handle individual namespaces. This change is part of the patch updates for version 2.6.5.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/connectors/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- 51e346e: Updated WalletConnectConnector logic to handle individual namespaces like eip155:\\*\n```\n\n----------------------------------------\n\nTITLE: Setting Batch Wait Time in HTTP Transport\nDESCRIPTION: Sets the maximum number of milliseconds to wait before sending a batch of JSON-RPC requests.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...', {\n  batch: {\n    wait: 16 // [!code focus]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring unstable_connector with Safe Connector\nDESCRIPTION: This snippet shows how to create an unstable_connector Transport using the Safe Connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_connector } from 'wagmi'\nimport { safe } from 'wagmi/connectors'\n\nconst transport = unstable_connector(safe) // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: useBalance with blockTag parameter\nDESCRIPTION: This snippet demonstrates how to use the `useBalance` hook with the `blockTag` parameter. The `blockTag` parameter specifies the block tag at which to fetch the balance.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { useBalance } from 'wagmi'\n\nfunction App() {\n  const result = useBalance({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    blockTag: 'latest', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Number Watching in useBlockNumber\nDESCRIPTION: Demonstrates how to configure the block number watching behavior by passing parameters to the watch option in useBlockNumber.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBlockNumber.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBlockNumber } from '@wagmi/vue'\n\nconst { data: blockNumber } = useBlockNumber({\n  watch: {\n    pollingInterval: 4_000\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Duration for Sourcify Plugin\nDESCRIPTION: Demonstrates how to set a custom cache duration for the Sourcify plugin. The duration is specified in milliseconds and defaults to 30 minutes if not set.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { sourcify } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    sourcify({\n      cacheDuration: 300_000, // [!code focus]\n      chainId: 100,\n      contracts: [\n        {\n          name: 'Deposit',\n          address: '0x00000000219ab540356cbb839cbe05303d7705fa',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Gateway URLs for CCIP-Read Requests\nDESCRIPTION: Configuring gateway URLs for resolving CCIP-Read requests through the ENS Universal Resolver Contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAvatar({\n    gatewayUrls: ['https://cloudflare-ipfs.com'] {\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UseVerifyMessageReturnType\nDESCRIPTION: Import statement for the UseVerifyMessageReturnType for TypeScript type checking of the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseVerifyMessageReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing UseWaitForTransactionReceiptReturnType\nDESCRIPTION: Example showing how to import the return type definition for useWaitForTransactionReceipt for TypeScript type safety.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWaitForTransactionReceiptReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI in TypeScript\nDESCRIPTION: Shows how to define the ABI (Application Binary Interface) for a smart contract in TypeScript.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wagmiAbi = [\n  ...\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  ...\n] as const\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifact Inclusions\nDESCRIPTION: Example showing how to include specific artifact files using glob patterns.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { hardhat } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    hardhat({\n      include: [\n        '*.json',\n      ],\n      project: '../hello_hardhat',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Configuration in TypeScript\nDESCRIPTION: Changes the configuration for alchemyProvider and infuraProvider to use a generic apiKey option instead of specific provider IDs.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nimport { alchemyProvider } from '@wagmi/core/providers/alchemy'\nimport { infuraProvider } from '@wagmi/core/providers/infura'\n\nalchemyProvider({\n-  alchemyId: 'yourAlchemyApiKey',\n+  apiKey: 'yourAlchemyApiKey',\n})\n\ninfuraProvider({\n-  infuraId: 'yourInfuraApiKey',\n+  apiKey: 'yourInfuraApiKey',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Serialize Function in TypeScript with Vue\nDESCRIPTION: Demonstrates how to use the serialize function to stringify an object containing a string and a bigint value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/serialize.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serialize } from '{{packageName}}'\n\nconst result = serialize({ foo: 'wagmi', bar: 123n })\n```\n\n----------------------------------------\n\nTITLE: Importing unstable_connector Transport in TypeScript\nDESCRIPTION: This snippet shows how to import the unstable_connector Transport from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/unstable_connector.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unstable_connector } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing Chain Objects in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import chain objects from the '@wagmi/vue/chains' entrypoint. It uses the mainnet chain as an example.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/chains.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mainnet } from '@wagmi/vue/chains'\n```\n\n----------------------------------------\n\nTITLE: Importing GetClientReturnType\nDESCRIPTION: Shows how to import the GetClientReturnType type definition for the return value of getClient.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getClient.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetClientReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Core with npm\nDESCRIPTION: Install the Wagmi Core library and its peer dependency, Viem, using npm, specifying the version of Viem according to the peerDependencies.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/core viem@{{viemVersion}}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup\nDESCRIPTION: Initial setup of Vue component defining package and function names.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateMaxPriorityFeePerGas.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'estimateMaxPriorityFeePerGas'\nconst typeName = 'EstimateFeesPerGas'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating ABI Import Source (TypeScript)\nDESCRIPTION: Demonstrates how to update the import source for ABI constants from Wagmi to Viem in v2.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { erc20ABI } from 'wagmi' // [!code --]\nimport { erc20Abi } from 'viem' // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Reconnect Parameters Type Import\nDESCRIPTION: Shows how to import the ReconnectParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/reconnect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ReconnectParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Wagmi Generate Watch Mode\nDESCRIPTION: Enables watch mode for supported plugins to automatically regenerate code on changes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/generate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwagmi generate --watch\n```\n\n----------------------------------------\n\nTITLE: Initializing Constants in Vite Script for React and Wagmi\nDESCRIPTION: This snippet initializes constants for a Vite project setup. The constants include paths and package names for React and Wagmi, along with connectors that are vital for managing dependencies in the project. These variables are presumably used for module imports elsewhere in the application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/connectors/injected.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\\nconst docsPath = 'react'\\nconst packageName = 'wagmi'\\nconst connectorsPackageName = 'wagmi/connectors'\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using config Parameter with useBalance\nDESCRIPTION: Demonstrates how to provide a custom configuration when using the useBalance composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\nimport { config } from './config' // [!code focus]\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Confirmations for waitForTransactionReceipt\nDESCRIPTION: Demonstrates how to set the number of confirmations to wait for before resolving the transaction receipt.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForTransactionReceipt.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForTransactionReceipt } from '@wagmi/core'\nimport { config } from './config'\n\nconst transactionReceipt = await waitForTransactionReceipt(config, {\n  confirmations: 2,\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n```\n\n----------------------------------------\n\nTITLE: FunctionName Configuration\nDESCRIPTION: This snippet demonstrates the configuration of the `functionName` parameter within the `useReadContracts` hook. This parameter specifies the function to be called on the contract and can be inferred from the ABI.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\n\nfunction App() {\n  const result = useReadContracts({\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI,\n        functionName: 'getChest', // [!code hl]\n        args: [69],\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating useAccount Hook Return Value in TypeScript\nDESCRIPTION: The useAccount hook return value has been restructured. The data value is now address & connector, and global connection status values have been added.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n{\n- data?: {\n-   address: string\n-   connector: Connector\n- }\n+ address?: string\n+ connector?: Connector\n- error?: Error\n- isIdle: boolean\n- isLoading: boolean\n- isFetching: boolean\n- isSuccess: boolean\n- isError: boolean\n- isFetched: boolean\n- isRefetching: boolean\n+ isConnecting: boolean\n+ isReconnecting: boolean\n+ isConnected: boolean\n+ isDisconnected: boolean\n- refetch: (options: {\n-   throwOnError: boolean\n-   cancelRefetch: boolean\n- }) => Promise<{\n-   address: string\n-   connector: Connector\n- }>\n- status: 'idle' | 'error' | 'loading' | 'success'\n+ status: 'connecting' | 'reconnecting' | 'connected' | 'disconnected'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UseWatchPendingTransactionsReturnType\nDESCRIPTION: Shows how to import the UseWatchPendingTransactionsReturnType for type checking the return value of the useWatchPendingTransactions hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchPendingTransactionsReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: UseWriteContractReturnType Import\nDESCRIPTION: Shows how to import the UseWriteContractReturnType type definition for TypeScript return type support.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContract.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWriteContractReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: useSwitchChain Parameters Type Definition\nDESCRIPTION: Type definition import for the useSwitchChain hook parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchChain.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSwitchChainParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing ShowCallsStatusReturnType in TypeScript\nDESCRIPTION: This snippet shows how to import the ShowCallsStatusReturnType for type checking the return value of the showCallsStatus action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/showCallsStatus.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ShowCallsStatusReturnType } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing GetGasPriceParameters Type\nDESCRIPTION: Shows how to import the GetGasPriceParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getGasPrice.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetGasPriceParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useTransactionConfirmations Hook in TypeScript\nDESCRIPTION: Shows how to import the useTransactionConfirmations hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionConfirmations } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Hook Example\nDESCRIPTION: Demonstrates how to import a React hook from the wagmi library using the useAccount hook as an example.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccount } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing verifyTypedData Return Type in Wagmi Core\nDESCRIPTION: This snippet shows how to import the return type for the verifyTypedData function. The function returns a boolean indicating whether the signature is valid for the given address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type VerifyTypedDataReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Component Setup Variables in Vue\nDESCRIPTION: Vue script setup block defining package and action name constants.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'getBlockTransactionCount'\nconst typeName = 'GetBlockTransactionCount'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Size in HTTP Transport\nDESCRIPTION: Configures the maximum number of JSON-RPC requests to send in a batch.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...', {\n  batch: {\n    batchSize: 2_000 // [!code focus]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining UseChainsParameters Type\nDESCRIPTION: This snippet defines the type for the parameters accepted by the useChains hook. It specifies that a configuration object or undefined can be used to customize the hook's behavior.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChains.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseChainsParameters } from 'wagmi'\n\n### config\n\n`Config | undefined`\n\n[`Config`](/react/api/createConfig#config) to use instead of retrieving from the nearest [`WagmiProvider`](/react/api/WagmiProvider).\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Config Path for Wagmi Initialization in Bash\nDESCRIPTION: Using the '--config' option to specify a custom path for the configuration file. This example creates a TypeScript configuration file named 'wagmi.config.ts'.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/init.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwagmi init --config wagmi.config.ts\n```\n\n----------------------------------------\n\nTITLE: Importing getAccount Function from @wagmi/core\nDESCRIPTION: This snippet shows how to import the getAccount function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAccount } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Updating waitForTransaction API Usage\nDESCRIPTION: Breaking change to waitForTransaction function, removing the wait argument in favor of using the transaction hash, simplifying the API.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await waitForTransaction({\n- wait: transaction.wait\n+ hash: transaction.hash\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Viem Version in Vue Setup Script\nDESCRIPTION: This Vue setup script imports the package.json file and extracts the Viem version from devDependencies. It's used to display the current Viem version in the documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/chains.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport packageJson from '../../../package.json'\nimport SearchChains from '../../components/SearchChains.vue'\n\nconst viemVersion = packageJson.devDependencies.viem\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useWaitForTransactionReceipt\nDESCRIPTION: Basic example of using the useWaitForTransactionReceipt composable in a Vue component to wait for a transaction receipt by providing a transaction hash.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\n\nconst result = useWaitForTransactionReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing UseAccountParameters Type\nDESCRIPTION: Shows how to import the TypeScript type for useAccount parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccount.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseAccountParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: getConnectors Return Type Declaration\nDESCRIPTION: Shows the TypeScript type import for getConnectors return type which is an array of Connector objects.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectors.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetConnectorsReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSendTransactionParameters Type\nDESCRIPTION: Shows how to import the UseSendTransactionParameters type from the @wagmi/vue library for type checking and autocompletion.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSendTransaction.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSendTransactionParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Setting App Logo URL\nDESCRIPTION: Demonstrates how to configure the application logo URL for Coinbase Wallet connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinbaseWallet } from '{{connectorsPackageName}}'\n\nconst connector = coinbaseWallet({\n  appName: 'My Wagmi App',\n  appLogoUrl: 'https://example.com/myLogoUrl.png',\n})\n```\n\n----------------------------------------\n\nTITLE: Return Type Import for useConfig\nDESCRIPTION: Shows how to import the TypeScript type definition for the useConfig return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConfig.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConfigReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing WatchAssetErrorType\nDESCRIPTION: Shows how to import the error type definition for handling errors from the watchAsset action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchAssetErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useDeployContractParameters Type in TypeScript\nDESCRIPTION: Shows how to import the type definition for useDeployContractParameters from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type useDeployContractParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Enable Corepack\nDESCRIPTION: Command to enable Corepack, a utility to download and execute package managers, ensuring the correct version of the package manager is used.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Vue Connectors\nDESCRIPTION: Example of how to import connectors from the Wagmi Vue library. This snippet demonstrates importing the 'injected' connector, which is typically used for browser wallet extensions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/connectors.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injected } from '@wagmi/vue/connectors'\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForCallsStatus Hook in React Component\nDESCRIPTION: Demonstrates how to use the useWaitForCallsStatus hook within a React component, passing an id parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWaitForCallsStatus } from 'wagmi/experimental'\n\nfunction App() {\n  const result = useWaitForCallsStatus({\n    id: '0x...', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Read Contract Without Const Assertions\nDESCRIPTION: Shows how to read a contract without using const assertions on the ABI. This approach uses a declared ABI without constant assertion, which may not leverage all the type inference strength offered by TypeScript. It demonstrates how to call readContract when the ABI cannot be const-asserted, requiring careful manual type management.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createConfig, http } from '@wagmi/core'\nimport { mainnet, sepolia } from '@wagmi/core/chains'\n\nconst config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n\ndeclare const erc721Abi: {\n  name: string;\n  type: string;\n  stateMutability: string;\n  inputs: {\n    type: string;\n    name: string;\n  }[];\n  outputs: {\n    type: string;\n  }[];\n}[]\n// ---cut---\nimport { readContract } from '@wagmi/core'\n\nconst result = await readContract(config, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  abi: erc721Abi,\n  functionName: 'balanceOf',\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n})\n\nresult\n```\n\n----------------------------------------\n\nTITLE: Importing useSwitchChain in Vue\nDESCRIPTION: Shows how to import the useSwitchChain composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchChain.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSwitchChain } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Updating Chain ID Usage in Send Transaction\nDESCRIPTION: Shows how to move chainId configuration from usePrepareSendTransaction to useSendTransaction for deferred network validation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nimport { usePrepareSendTransaction, useContractWrite } from 'wagmi'\nimport { optimism } from 'wagmi/chains'\n\n// ...\n\nconst { config } = usePrepareSendTransaction({\n  request: {\n    to: 'moxey.eth',\n    value: parseEther('1'),\n  },\n})\nconst { sendTransaction } = useSendTransaction({\n  ...config,\n+ chainId: optimism.id\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useChains Parameter Types\nDESCRIPTION: Shows how to import the TypeScript type definition for useChains parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChains.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseChainsParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing Parameters Type for useConnectorClient\nDESCRIPTION: Shows how to import the type definition for the parameters of the useConnectorClient function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectorClientParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using useWaitForCallsStatus with Custom Connector\nDESCRIPTION: Shows how to use the useWaitForCallsStatus hook with a custom connector from useConnections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWaitForCallsStatus, useConnections } from 'wagmi/experimental'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const connections = useConnections()\n  const result = useWaitForCallsStatus({\n    connector: connections[0]?.connector, // [!code focus]\n    id: '0x...',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Core Connect Variables\nDESCRIPTION: Sets up constants for the package name, action name, and type name used in the Wagmi Core connect functionality.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/connect.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'connect'\nconst typeName = 'Connect'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing watchChainId from Wagmi Core\nDESCRIPTION: Shows how to import the watchChainId function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchChainId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchChainId } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: useReconnect Parameters Type Definition\nDESCRIPTION: Defines the type for useReconnect parameters that can be imported from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReconnect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseReconnectParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Comparison Table in Markdown\nDESCRIPTION: A markdown table comparing key features and metrics of wagmi, web3-react, and useDApp libraries, including GitHub stars, issues, downloads, and various technical capabilities\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/comparisons.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                      | [wagmi](https://github.com/wagmi-dev/wagmi)                                                     | [web3-react](https://github.com/NoahZinsmeister/web3-react)                                             | [useDApp](https://github.com/EthWorks/useDApp)                                                     |\n| -------------------- | :---------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------ | :------------------------------------------------------------------------------------------------- |\n| GitHub Stars         | ![wagmi star count](https://img.shields.io/github/stars/wagmi-dev/wagmi?colorB=27292E&label=)   | ![web3-react star count](https://img.shields.io/github/stars/Uniswap/web3-react?colorB=27292E&label=)   | ![useDApp star count](https://img.shields.io/github/stars/EthWorks/useDApp?colorB=27292E&label=)   |\n| Open Issues          | ![wagmi issue count](https://img.shields.io/github/issues/wagmi-dev/wagmi?colorB=27292E&label=) | ![web3-react issue count](https://img.shields.io/github/issues/Uniswap/web3-react?colorB=27292E&label=) | ![useDApp issue count](https://img.shields.io/github/issues/EthWorks/useDApp?colorB=27292E&label=) |\n| Downloads            | ![wagmi downloads](https://img.shields.io/npm/dw/wagmi?colorB=27292E&label=)                    | ![web3-react downloads](https://img.shields.io/npm/dw/@web3-react/core?colorB=27292E&label=)            | ![useDApp downloads](https://img.shields.io/npm/dw/@usedapp/core?colorB=27292E&label=)             |\n| License              | ![wagmi license](https://img.shields.io/github/license/wagmi-dev/wagmi?colorB=27292E&label=)    | ![web3-react license](https://img.shields.io/github/license/Uniswap/web3-react?colorB=27292E&label=)    | ![useDApp license](https://img.shields.io/github/license/EthWorks/useDApp?colorB=27292E&label=)    |\n| Their Comparison     | â€“                                                                                               | none                                                                                                    | none                                                                                               |\n| Supported Frameworks | React, Vanilla JS                                                                               | React                                                                                                   | React                                                                                              |\n| Documentation        | âœ…                                                                                              | ðŸ›‘                                                                                                      | âœ…                                                                                                 |\n| TypeScript           | âœ…                                                                                              | ðŸ”¶                                                                                                      | ðŸ”¶                                                                                                 |\n| EIP-6963 Support     | âœ…                                                                                              | ðŸ”´                                                                                                      | ðŸ”´                                                                                                 |\n| Test Suite           | âœ…                                                                                              | ðŸ”¶                                                                                                      | ðŸ”¶                                                                                                 |\n| Examples             | âœ…                                                                                              | ðŸ”¶                                                                                                      | âœ…                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: useTransaction Parameters Type Definition\nDESCRIPTION: Type import statement for the useTransaction parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseTransactionParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useBlockTransactionCount in React\nDESCRIPTION: Shows how to import the useBlockTransactionCount hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBlockTransactionCount } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Names for Wagmi in Vue\nDESCRIPTION: Vue setup script that declares constants for Wagmi package names. Defines packageName for the core Wagmi package and connectorsPackageName for the connectors package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors/mock.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst connectorsPackageName = '@wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Block Retrieval by Number\nDESCRIPTION: Example of retrieving block information using a specific block number\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlock } from '@wagmi/core'\nimport { config } from './config'\n\nconst blockNumber = await getBlock(config, {\n  blockNumber: 42069n\n})\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with blockHash Parameter\nDESCRIPTION: Example of fetching a transaction using a block hash and index.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransaction } from '@wagmi/vue'\n\nconst result = useTransaction({\n  blockHash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d', // [!code focus]\n  index: 0,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: useFeeHistory with rewardPercentiles parameter\nDESCRIPTION: This code shows the usage of the `rewardPercentiles` parameter within the `useFeeHistory` hook. `rewardPercentiles` is an array of numbers representing percentile values to sample from each block's effective priority fees, weighted by gas used.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFeeHistory } from 'wagmi'\n\nfunction App() {\n  const result = useFeeHistory({\n    blockCount: 4,\n    rewardPercentiles: [25, 75] // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Max Fee Per Gas Parameter\nDESCRIPTION: Here, the `maxFeePerGas` parameter is used to define the overall total fee per gas for transactions that fall under EIP-1559 requirements.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    maxFeePerGas: parseGwei('20'), // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: GetEnsName with Chain ID Parameter\nDESCRIPTION: Example showing how to fetch an ENS name while specifying a particular chain ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsName } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst ensName = await getEnsName(config, {\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  chainId: mainnet.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Error Handling Configuration\nDESCRIPTION: Shows how to implement error handling in the watchPendingTransactions function\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchPendingTransactions } from '@wagmi/core'\nimport { config } from './config'\n\nconst unwatch = watchPendingTransactions(config, {\n  onError(error) {\n    console.log('Error', error)\n  },\n  onTransactions(transactions) {\n    console.log('New transactions!', transactions)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Configuration\nDESCRIPTION: Initial Vue script setup defining package and action names for the getStorageAt functionality.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'getStorageAt'\nconst typeName = 'getStorageAt'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing normalizeChainId from wagmi in TypeScript\nDESCRIPTION: Shows how to import the normalizeChainId function from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/normalizeChainId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { normalizeChainId } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Legacy Chain Configuration Example\nDESCRIPTION: Previous approach to configuring chains and connectors before the configureChains API, showing manual RPC URL handling.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nimport { providers } from \"ethers\";\nimport { chain, createClient, defaultChains } from \"wagmi\";\nimport { CoinbaseWalletConnector } from \"wagmi/connectors/coinbaseWallet\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\nimport { WalletConnectConnector } from \"wagmi/connectors/walletConnect\";\n\nconst alchemyId = process.env.ALCHEMY_ID;\n\nconst chains = defaultChains;\nconst defaultChain = chain.mainnet;\n\nconst client = createClient({\n  autoConnect: true,\n  connectors({ chainId }) {\n    const chain = chains.find((x) => x.id === chainId) ?? defaultChain;\n    const rpcUrl = chain.rpcUrls.alchemy\n      ? `${chain.rpcUrls.alchemy}/${alchemyId}`\n      : chain.rpcUrls.default;\n    return [\n      new MetaMaskConnector({ chains }),\n      new CoinbaseWalletConnector({\n        chains,\n        options: {\n          appName: \"wagmi\",\n          chainId: chain.id,\n          jsonRpcUrl: rpcUrl,\n        },\n      }),\n      new WalletConnectConnector({\n        chains,\n        options: {\n          qrcode: true,\n          rpc: { [chain.id]: rpcUrl },\n        },\n      }),\n      new InjectedConnector({\n        chains,\n        options: {\n          name: \"Injected\",\n          shimDisconnect: true,\n        },\n      }),\n    ];\n  },\n  provider: ({ chainId }) =>\n    new providers.AlchemyProvider(chainId, alchemyId),\n});\n```\n\n----------------------------------------\n\nTITLE: Narrowing Return Types with ChainId Data Property\nDESCRIPTION: Demonstrates type narrowing using the chainId property from return data to access chain-specific properties.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/chain-properties.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from 'wagmi'\nimport { zkSync } from 'wagmi/chains'\n\nconst { data } = useWaitForTransactionReceipt({\n  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',\n})\n\nif (data?.chainId === zkSync.id) {\n  data?.logs\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UseWatchBlockNumberParameters Type\nDESCRIPTION: Shows how to import the UseWatchBlockNumberParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchBlockNumber.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchBlockNumberParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Script Parameters for Wagmi Core\nDESCRIPTION: Sets up constants for documentation path and package name using Vue's script setup syntax. Defines docsPath as 'core' and packageName as '@wagmi/core' for use in the documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/createStorage.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = \"core\"\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing getChains from @wagmi/core\nDESCRIPTION: Shows how to import the getChains function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getChains.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getChains } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: useWatchAsset Return Type Definition\nDESCRIPTION: Type import for the useWatchAsset hook return type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchAsset.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchAssetReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Configuring App Name\nDESCRIPTION: Shows how to set the application name for Coinbase Wallet connector.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/coinbaseWallet.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinbaseWallet } from '{{connectorsPackageName}}'\n\nconst connector = coinbaseWallet({\n  appName: 'My Wagmi App',\n})\n```\n\n----------------------------------------\n\nTITLE: Return Type Import for useChainId\nDESCRIPTION: Demonstrates how to import the TypeScript return type definition for the useChainId hook for type safety and documentation purposes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChainId.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseChainIdReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useSignMessage Hook in TypeScript\nDESCRIPTION: Shows how to import the useSignMessage hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignMessage } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useVerifyTypedData Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the useVerifyTypedData hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useVerifyTypedData } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Exporting EventListener Type in TypeScript\nDESCRIPTION: This snippet indicates the export of the 'EventListener' type, likely in a TypeScript file within the wagmi project.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EventListener;\n```\n\n----------------------------------------\n\nTITLE: Importing sendTransaction from @wagmi/core\nDESCRIPTION: Shows how to import the sendTransaction function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using useSigner Hook with Chain ID in TypeScript\nDESCRIPTION: The useSigner hook now accepts an optional chainId parameter to specify which network to use for signer initialization.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSigner } from \"wagmi\";\nimport { optimism } from \"wagmi/core\";\n\n// ...\n\nuseSigner({ chainId: optimism.id });\n```\n\n----------------------------------------\n\nTITLE: Specifying Transaction Type\nDESCRIPTION: Demonstrates how to explicitly set the transaction type. Supports 'legacy', 'eip1559', or 'eip2930' transaction types.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSimulateContract } from 'wagmi'\nimport { abi } from './abi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSimulateContract({\n    abi,\n    address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    functionName: 'transferFrom',\n    args: [\n      '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n      '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n      123n,\n    ],\n    type: 'eip1559',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing getConnectorClient from @wagmi/core\nDESCRIPTION: Shows how to import the getConnectorClient action from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnectorClient } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing watchClient from Wagmi Core\nDESCRIPTION: Shows how to import the watchClient function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchClient } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useSwitchChain\nDESCRIPTION: Type definitions for the parameters and return type of useSwitchChain composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchChain.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSwitchChainParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Setting up package and action names in Vue\nDESCRIPTION: Defines constants for package name, action name, and type name in a Vue setup script.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchAccount.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'switchAccount'\nconst typeName = 'SwitchAccount'\n</script>\n```\n\n----------------------------------------\n\nTITLE: ReadContracts Basic Import\nDESCRIPTION: Shows how to import the readContracts function from @wagmi/core.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readContracts } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useWaitForCallsStatus Hook in TypeScript\nDESCRIPTION: Shows how to import the useWaitForCallsStatus hook from the wagmi/experimental module.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForCallsStatus } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Return Type Definition\nDESCRIPTION: Type definition import for useSignTypedData return type\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignTypedData.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSignTypedDataReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Installing wagmi CLI package\nDESCRIPTION: Command to install the @wagmi/cli package using the pnpm package manager\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/cli\n```\n\n----------------------------------------\n\nTITLE: Importing getEnsName from wagmi/core\nDESCRIPTION: Basic import statement for the getEnsName action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsName.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsName } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useConnectors in TypeScript\nDESCRIPTION: Shows how to import the useConnectors composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectors.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnectors } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing Connectors in TypeScript\nDESCRIPTION: Example showing the new modular import syntax for wagmi connectors to reduce bundle size by importing connectors from their own entrypoints.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// old - WalletLinkConnector unused, but still in final bundle\nimport { InjectedConnector, WalletConnectConnector } from \"wagmi\";\n\n// new - WalletLinkConnector not in final bundle\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\nimport { WalletConnectConnector } from \"wagmi/connectors/walletConnect\";\n```\n\n----------------------------------------\n\nTITLE: Importing switchChain\nDESCRIPTION: Shows how to import the switchChain function from @wagmi/core.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { switchChain } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing SendTransactionParameters type\nDESCRIPTION: Shows how to import the SendTransactionParameters type from @wagmi/core for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SendTransactionParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Moving Polling Interval Configuration in TypeScript\nDESCRIPTION: Relocates the pollingInterval configuration from individual provider configs to the configureChains function for centralized management.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon],\n  [\n-   alchemyProvider({ apiKey, pollingInterval: 5000 }),\n-   publicProvider({ pollingInterval: 5000 })\n+   alchemyProvider({ apiKey }),\n+   publicProvider()\n  ],\n+ { pollingInterval: 5000 }\n)\n```\n\n----------------------------------------\n\nTITLE: Return Type Import\nDESCRIPTION: Import statement for the GetBlockTransactionCountReturnType type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBlockTransactionCountReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseWaitForTransactionReceiptParameters Type\nDESCRIPTION: Shows how to import the UseWaitForTransactionReceiptParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWaitForTransactionReceiptParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing UseEnsNameParameters type\nDESCRIPTION: Shows how to import the UseEnsNameParameters type definition for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseEnsNameParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: SwitchChain Parameters Type Import\nDESCRIPTION: Shows how to import the SwitchChainParameters type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SwitchChainParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSignTypedDataParameters Type\nDESCRIPTION: Shows how to import the UseSignTypedDataParameters type for type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignTypedData.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSignTypedDataParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useConnect in Vue\nDESCRIPTION: Shows how to import the useConnect composable from @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnect } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseTransactionReceiptParameters Type\nDESCRIPTION: Example of importing the TypeScript type for useTransactionReceipt parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseTransactionReceiptParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSignMessageParameters Type in TypeScript\nDESCRIPTION: Shows how to import the UseSignMessageParameters type for type checking the hook parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignMessage.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSignMessageParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing GetFeeHistoryReturnType in TypeScript\nDESCRIPTION: This snippet shows how to import the GetFeeHistoryReturnType for type checking the return value of getFeeHistory function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFeeHistoryReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Script for Connector Navigation\nDESCRIPTION: Vue script that processes the sidebar configuration to extract and sort connector documentation links.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getSidebar } from '../../.vitepress/sidebar'\n\nconst connectors = getSidebar()['/core']\n  .find(x => x.text.includes('Configuration')).items\n  .find(x => x.text.includes('Connectors')).items\n  .sort((a, b) => a.text.localeCompare(b.text))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useWatchAsset Hook in TypeScript\nDESCRIPTION: Shows how to import the useWatchAsset hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchAsset.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchAsset } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing getEnsAvatar Function\nDESCRIPTION: Basic import statement for the getEnsAvatar function from @wagmi/core\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAvatar.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAvatar } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Basic Block Retrieval\nDESCRIPTION: Basic usage example of getBlock function with configuration\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlock } from '@wagmi/core'\nimport { config } from './config'\n\nconst blockNumber = await getBlock(config)\n```\n\n----------------------------------------\n\nTITLE: Importing UseSimulateContractParameters Type\nDESCRIPTION: This snippet shows how to import the UseSimulateContractParameters type from the @wagmi/vue package for TypeScript usage.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSimulateContractParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Return Type of useEstimateGas Hook\nDESCRIPTION: Specifies the return type of the `useEstimateGas` hook, which encompasses gas estimation results and any associated data required for further computation or transaction management.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseEstimateGasReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing WatchBlocksReturnType\nDESCRIPTION: Shows how to import the type definition for the return value of the watchBlocks function, which is a cleanup function for removing the watcher.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchBlocksReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing CreateConfigParameters Type\nDESCRIPTION: Shows how to import the CreateConfigParameters type for use in TypeScript projects.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createConfig.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateConfigParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Type Imports for useConnections\nDESCRIPTION: Demonstrates importing type definitions for UseConnectionsParameters and UseConnectionsReturnType\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnections.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectionsParameters } from 'wagmi'\nimport { type UseConnectionsReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using useAccount with Custom Config\nDESCRIPTION: Demonstrates how to use useAccount with a custom configuration object instead of the default from WagmiPlugin.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccount.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useAccount } from '@wagmi/vue'\nimport { config } from './config' // [!code focus]\n\nconst account = useAccount({\n  config, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing WagmiPluginProps Type in TypeScript\nDESCRIPTION: Shows how to import the WagmiPluginProps type from the @wagmi/vue package for type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WagmiPluginProps } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Parameter Type Definition\nDESCRIPTION: Type definition import for useSignTypedData parameters\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignTypedData.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSignTypedDataParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSwitchAccountReturnType\nDESCRIPTION: Import statement for the UseSwitchAccountReturnType type, which defines the return type structure of the useSwitchAccount composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSwitchAccount.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSwitchAccountReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional for WalletConnectConnector\nDESCRIPTION: Adds a conditional for WalletConnectConnector optionalChains. This change is part of the patch updates for version 2.6.4.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/connectors/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- 0a57de2: Added conditional for WalletConnectConnector optionalChains\n```\n\n----------------------------------------\n\nTITLE: Importing Serialize Function from Wagmi in TypeScript\nDESCRIPTION: Shows how to import the serialize function from the Wagmi package. The package name is dynamically set using a Vue script.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/serialize.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serialize } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing UseDisconnectReturnType\nDESCRIPTION: Shows how to import the UseDisconnectReturnType for TypeScript type checking of the return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useDisconnect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseDisconnectReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Config to useVerifyTypedData\nDESCRIPTION: Example demonstrating how to provide a custom configuration to the useVerifyTypedData hook instead of using the nearest WagmiProvider. This allows for isolated or specialized configurations for specific verification needs.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyTypedData.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { domain, types } from './data'\nimport { useVerifyTypedData } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useVerifyTypedData({\n    config,\n    domain,\n    types,\n    message: {\n      from: {\n        name: 'Cow',\n        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n      },\n      to: {\n        name: 'Bob',\n        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n      },\n      contents: 'Hello, Bob!',\n    },\n    primaryType: 'Mail',\n    address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    signature: '0x66edc32e2ab001213321ab7d959a2207fcef5190cc9abb6da5b0d2a8a9af2d4d2b0700e2c317c4106f337fd934fbbb0bf62efc8811a78603b33a8265d3b8f8cb1c',\n  })\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// All properties on a domain are optional\nexport const domain = {\n  name: 'Ether Mail',\n  version: '1',\n  chainId: 1,\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n} as const\n\n// The named list of all type definitions\nexport const types = {\n  Person: [\n    { name: 'name', type: 'string' },\n    { name: 'wallet', type: 'address' },\n  ],\n  Mail: [\n    { name: 'from', type: 'Person' },\n    { name: 'to', type: 'Person' },\n    { name: 'contents', type: 'string' },\n  ],\n} as const\n```\n\n----------------------------------------\n\nTITLE: Importing watchAccount from wagmi Core\nDESCRIPTION: Shows how to import the watchAccount function from the wagmi Core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchAccount } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Universal Resolver Address with useEnsAddress\nDESCRIPTION: This example demonstrates how to specify a custom ENS Universal Resolver Contract address when fetching ENS address data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAddress({\n    name: normalize('wevm.eth'),\n    universalResolverAddress: '0x74E20Bd2A1fE0cdbe45b9A1d89cb7e0a45b36376', \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with chainId Parameter\nDESCRIPTION: Example of fetching a transaction with a specific chainId.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransaction } from '@wagmi/vue'\nimport { mainnet } from 'wagmi/chains'\n\nconst result = useTransaction({\n  chainId: mainnet.id, // [!code focus]\n  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Scope Key for Cache Control\nDESCRIPTION: Adding a scope key to the useEnsAvatar hook to control cache sharing between hook instances.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAvatar({\n    name: normalize('wevm.eth'),\n    scopeKey: 'foo',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using the hash Parameter\nDESCRIPTION: Example showing how to specify a transaction hash when using the useTransactionReceipt composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransactionReceipt.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransactionReceipt } from '@wagmi/vue'\n\nconst result = useTransactionReceipt({\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing SignMessageErrorType in TypeScript\nDESCRIPTION: Demonstrates how to import the SignMessageErrorType for handling errors from the signMessage action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SignMessageErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing BlockExplorerConfig Type in TypeScript\nDESCRIPTION: Shows how to import the BlockExplorerConfig type for type checking and autocompletion in TypeScript.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type BlockExplorerConfig } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: useSwitchChain Return Type Definition\nDESCRIPTION: Type definition import for the useSwitchChain hook return type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchChain.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSwitchChainReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Replacing getBalance unit parameter with direct formatUnits usage\nDESCRIPTION: Shows how to replace the deprecated 'unit' parameter and 'formatted' return value from 'getBalance' with direct usage of Viem's 'formatUnits' function. This gives more control over number formatting with explicit decimals specification.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatUnits } from 'viem' // [!code ++]\nimport { getBalance } from '@wagmi/core'\n\nconst result = await getBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  unit: 'ether', // [!code --]\n})\nresult.formatted // [!code --]\nformatUnits(result.value, result.decimals) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Importing UseConnectParameters Type\nDESCRIPTION: Shows how to import the type definition for useConnect parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Setting up packageName reference in Vue component\nDESCRIPTION: A Vue script setup block that defines a constant 'packageName' with the value '@wagmi/core'. This is likely used to customize documentation or examples for the wagmi core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/utilities/cookieToInitialState.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup Script\nDESCRIPTION: Vue setup script that imports package.json and a SearchChains component, extracting the Viem version from dependencies.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/chains.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport packageJson from '../../../package.json'\nimport SearchChains from '../../components/SearchChains.vue'\n\nconst viemVersion = packageJson.devDependencies.viem\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue component variables\nDESCRIPTION: Defines constants for package name, action name, and type name in a Vue component setup script.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'sendTransaction'\nconst typeName = 'SendTransaction'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing getEnsAddress from @wagmi/core\nDESCRIPTION: This snippet shows how to import the getEnsAddress function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsAddress.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsAddress } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using the blockTag Parameter - TSX\nDESCRIPTION: This snippet shows how to specify a block tag when using the `useBytecode` hook to define which block context to check the bytecode.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBytecode } from 'wagmi'\n\nfunction App() {\n  const result = useBytecode({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    blockTag: 'safe', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Chain Configuration in TypeScript\nDESCRIPTION: Moves the pollingInterval config option from individual chain provider configs to the main configureChains config.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\nconst { chains, provider } = configureChains(\n  [chain.mainnet, chain.polygon],\n  [\n-   alchemyProvider({ apiKey, pollingInterval: 5000 }),\n-   publicProvider({ pollingInterval: 5000 })\n+   alchemyProvider({ apiKey }),\n+   publicProvider()\n  ],\n+ { pollingInterval: 5000 }\n)\n```\n\n----------------------------------------\n\nTITLE: useToken Return Type Declaration\nDESCRIPTION: Type import for useToken return type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseTokenReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Updating Transaction Handling in TypeScript\nDESCRIPTION: Changes the return type of sendTransaction and shows how to fetch full transaction details if needed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\nimport { sendTransaction, fetchTransaction } from '@wagmi/core'\n\nconst {\n  hash,\n  wait,\n- ...transaction\n} = sendTransaction(...)\n\n+const transaction = fetchTransaction({ hash })\n```\n\n----------------------------------------\n\nTITLE: Create a New Changeset\nDESCRIPTION: Run Changesets CLI to create a new changeset, defining changes to packages for release notes and version updates. Necessary for managing project versioning.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Importing useWriteContracts Hook in TypeScript\nDESCRIPTION: Shows how to import the useWriteContracts hook from the wagmi/experimental package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContracts.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWriteContracts } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing useVerifyMessage Hook in TypeScript\nDESCRIPTION: Import statement for the useVerifyMessage hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useVerifyMessage } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using batch Parameter in useWatchPendingTransactions\nDESCRIPTION: Demonstrates how to use the batch parameter to control transaction batching in the useWatchPendingTransactions hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchPendingTransactions } from 'wagmi'\n\nfunction App() {\n  useWatchPendingTransactions({\n    batch: true\n    onTransactions(transactions) {\n      console.log('New transactions!', transactions)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using sendTransaction with maxFeePerGas parameter\nDESCRIPTION: Shows how to set the maximum fee per gas for an EIP-1559 transaction using sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from '@wagmi/core'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nconst result = await sendTransaction(config, {\n  maxFeePerGas: parseGwei('20'),\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getCallsStatus Action in TypeScript\nDESCRIPTION: Shows how to import the getCallsStatus action from the @wagmi/core/experimental package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCallsStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCallsStatus } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing useChains Return Type\nDESCRIPTION: Shows how to import the TypeScript type definition for useChains return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChains.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseChainsReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectorNotConnectedError\nDESCRIPTION: Error class for when attempting to use a connector that is not in a connected state\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectorNotConnectedError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing UseEnsNameReturnType\nDESCRIPTION: Shows how to import the type definition for the return value of the useEnsName hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseEnsNameReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing the Sourcify Plugin in TypeScript\nDESCRIPTION: Shows how to import the Sourcify plugin from the Wagmi CLI packages.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sourcify } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Importing useWaitForTransactionReceipt in TypeScript\nDESCRIPTION: Shows how to import the useWaitForTransactionReceipt hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: WatchConnectionsReturnType Import\nDESCRIPTION: Shows how to import the TypeScript return type definition for watchConnections function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnections.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchConnectionsReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing custom Transport in wagmi\nDESCRIPTION: Demonstrates how to import the custom Transport from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/custom.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { custom } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing UseShowCallsStatusReturnType in TypeScript\nDESCRIPTION: Demonstrates how to import the UseShowCallsStatusReturnType for type-checking the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useShowCallsStatus.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseShowCallsStatusReturnType } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSwitchAccountReturnType in TypeScript\nDESCRIPTION: Shows how to import the UseSwitchAccountReturnType for TypeScript type checking of the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchAccount.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSwitchAccountReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing GetConnectorClientErrorType\nDESCRIPTION: Shows how to import the error type for the getConnectorClient function for error handling.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetConnectorClientErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing Foundry Plugin in TypeScript\nDESCRIPTION: Shows how to import the Foundry plugin from the Wagmi CLI package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { foundry } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Importing ShowCallsStatusErrorType in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the ShowCallsStatusErrorType for handling errors from the showCallsStatus action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/showCallsStatus.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ShowCallsStatusErrorType } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing Safe Connector\nDESCRIPTION: Shows how to import the Safe connector from wagmi connectors package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/safe.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safe } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Constants for Wagmi Documentation\nDESCRIPTION: A Vue setup script that defines two constants: docsPath set to 'react' and packageName set to 'wagmi'. These constants are likely used for documentation routing and package reference.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/transports/unstable_connector.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'react'\nconst packageName = 'wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Import UseAccountReturnType Type\nDESCRIPTION: Imports the `UseAccountReturnType` type from the `wagmi` library. This type represents the structure of the data returned by the `useAccount` hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccount.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseAccountReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useSwitchChain Hook - TypeScript\nDESCRIPTION: Shows how to import the useSwitchChain hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchChain.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSwitchChain } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Import Node.js Version and Package Manager in Vue\nDESCRIPTION: This snippet uses Vue's script setup to import the Node.js version and package manager from the project's package.json file. This ensures that the correct environment settings are used based on the project's requirements.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\\nimport packageJson from '../../package.json'\\n\\nconst nodeVersion = packageJson.engines.node\\nconst packageManager = packageJson.packageManager\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing GetChainsReturnType for type information\nDESCRIPTION: Shows how to import the GetChainsReturnType type for TypeScript type information about the getChains return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getChains.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetChainsReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Vue Package Variables\nDESCRIPTION: Sets up variables for the Wagmi Vue package, including paths, package name, and Viem version. This script is likely used to dynamically populate information throughout the documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport packageJson from '../../packages/vue/package.json'\nimport Browsers from '../components/Browsers.vue'\n\nconst docsPath = 'vue'\nconst packageDir = 'vue'\nconst packageName = '@wagmi/vue'\nconst viemVersion = packageJson.peerDependencies.viem\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Count in HTTP Transport\nDESCRIPTION: Sets the maximum number of retry attempts for failed requests.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst transport = http('https://foo-bar-baz.quiknode.pro/...', {\n  retryCount: 5, // [!code focus]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing UseWatchBlockNumberReturnType\nDESCRIPTION: Demonstrates how to import the UseWatchBlockNumberReturnType for TypeScript type checking of the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchBlockNumber.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchBlockNumberReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useEstimateGas Hook with TypeScript\nDESCRIPTION: Imports the `useEstimateGas` hook from the wagmi library for use in estimating gas for transactions. This import is necessary to utilize the functionality provided by the hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Updating Send Transaction Preparation in TypeScript\nDESCRIPTION: Shows how to use the new prepareSendTransaction action before calling sendTransaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\nimport { prepareSendTransaction, sendTransaction } from '@wagmi/core'\n\n+const config = await prepareSendTransaction({\n+  request: {\n+    to: 'moxey.eth',\n+    value: parseEther('1'),\n+  }\n+})\n\nconst result = await sendTransaction({\n- request: {\n-   to: 'moxey.eth',\n-   value: parseEther('1')\n- }\n+ ...config\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Documentation Path in Vue Component\nDESCRIPTION: A Vue script setup block that defines the documentation path as 'core'. This variable is likely used to determine which section of documentation to load or reference.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useWatchBlockNumber in TypeScript\nDESCRIPTION: Shows how to import the useWatchBlockNumber hook from the @wagmi/vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchBlockNumber.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchBlockNumber } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Using removeItem Method of Storage\nDESCRIPTION: Demonstrates how to use the removeItem method of the Storage object to delete data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage } from '{{packageName}}'\n\nconst storage = createStorage({ storage: localStorage })\nstorage.removeItem('recentConnectorId')\n```\n\n----------------------------------------\n\nTITLE: useReconnect Return Type Definition\nDESCRIPTION: Defines the return type for useReconnect that can be imported from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReconnect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseReconnectReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Integrating SendTransaction Component into App.vue\nDESCRIPTION: Adding the SendTransaction component to the main application file, conditionally rendering it when a wallet is connected.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/send-transaction.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useAccount } from '@wagmi/vue';\nimport Account from './Account.vue';\nimport Connect from './Connect.vue';\nimport SendTransaction from './SendTransaction.vue';\n\nconst { isConnected } = useAccount();\n</script>\n\n<template>\n  <Account v-if=\"isConnected\" />\n  <Connect v-else />\n  <SendTransaction v-if=\"isConnected\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing estimateMaxPriorityFeePerGas Function\nDESCRIPTION: Example of importing the estimateMaxPriorityFeePerGas function from @wagmi/core.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateMaxPriorityFeePerGas.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateMaxPriorityFeePerGas } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsAddress Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the useEnsAddress hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Documentation Variables for Wagmi\nDESCRIPTION: Sets up constants for the Vue implementation of Wagmi, including the documentation path and package name. These variables are likely used throughout documentation generation or within the application to reference the correct package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/createStorage.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = \"vue\"\nconst packageName = '@wagmi/vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Sourcify Configuration Type\nDESCRIPTION: Shows how to import the TypeScript type definition for the Sourcify plugin configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SourcifyConfig } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Name for Block Explorer in Wagmi CLI\nDESCRIPTION: Demonstrates how to set a custom name for the block explorer source in the Wagmi CLI configuration. This name is used to identify the source of the ABIs.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { blockExplorer } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    blockExplorer({\n      baseUrl: 'https://api.etherscan.io/v2/api',\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n      name: 'Etherscan',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup\nDESCRIPTION: Defines package and action name constants for the documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'switchChain'\nconst typeName = 'SwitchChain'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useTransactionReceipt Hook\nDESCRIPTION: Shows how to import the useTransactionReceipt hook from wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionReceipt.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionReceipt } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useDisconnect in TypeScript\nDESCRIPTION: Shows how to import the useDisconnect composable from the @wagmi/vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useDisconnect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDisconnect } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup\nDESCRIPTION: Initial setup of Vue component defining package and action names\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'getBlock'\nconst typeName = 'GetBlock'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing UseSignMessageReturnType\nDESCRIPTION: Shows how to import the UseSignMessageReturnType type for TypeScript type checking of the values returned by the useSignMessage composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignMessage.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSignMessageReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: getStorageAt Return Type Import\nDESCRIPTION: Shows how to import the GetStorageAtReturnType type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetStorageAtReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useAccount from @wagmi/vue\nDESCRIPTION: Shows how to import the useAccount composable from the @wagmi/vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccount } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Using getBalance to fetch balance\nDESCRIPTION: Demonstrates how to use the getBalance function to fetch the balance for a specific address. It requires a config object and an options object with the address.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBalance } from '@wagmi/core'\nimport { config } from './config'\n\nconst balance = getBalance(config, {\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEnsText with Specific Block Number\nDESCRIPTION: Shows how to fetch ENS text records at a specific block number using the blockNumber parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsText } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsText({\n    blockNumber: 17829139n, \n    name: normalize('wevm.eth'),\n    key: 'com.twitter',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Config Configuration\nDESCRIPTION: This snippet shows how to provide a custom Wagmi `Config` object to the `useReadContracts` hook. This allows overriding the default configuration obtained from the `WagmiProvider`.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useReadContracts.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContracts } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useReadContracts({\n    config, // [!code hl]\n    contracts: [\n      {\n        address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\n        abi: mlootABI,\n        functionName: 'getChest',\n        args: [69]\n      },\n      // ...\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi CLI v2 with Legacy Naming Conventions\nDESCRIPTION: TypeScript configuration for Wagmi CLI v2 to maintain v1 naming conventions for generated actions and hooks using 'getActionName' and 'getHookName' options.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { actions, react } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    actions({\n      getActionName: 'legacy',\n    }),\n    react({\n      getHookName: 'legacy',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: getStorageAt with Block Tag\nDESCRIPTION: Example showing how to use block tags when retrieving storage data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getStorageAt } from '@wagmi/core'\nimport { config } from './config'\n\nawait getStorageAt(config, {\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  blockTag: 'safe',\n  slot: '0x0',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Safe Parameters Type\nDESCRIPTION: Shows how to import Safe connector parameter types for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/safe.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SafeParameters } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: watchChainId Return Type Definition\nDESCRIPTION: Shows the type import for watchChainId return type, which is a cleanup function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchChainId.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchChainIdReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useBytecode in Vue\nDESCRIPTION: Shows how to import the useBytecode composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useBytecode } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Package Constants in Vue\nDESCRIPTION: Sets up constant variables for Wagmi package imports including the main package name and connectors package path. Used for managing package references in a Vue component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/connectors/coinbaseWallet.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\nconst connectorsPackageName = '@wagmi/vue/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing SwitchChainNotSupportedError\nDESCRIPTION: Error class for when chain switching functionality is not supported by connectors\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SwitchChainNotSupportedError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Path\nDESCRIPTION: Example showing how to configure the Hardhat project path.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { hardhat } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    hardhat({\n      project: '../hello_hardhat',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing UseBlockTransactionCountReturnType\nDESCRIPTION: Shows how to import the return type definition for the useBlockTransactionCount hook for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBlockTransactionCount.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseBlockTransactionCountReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing getEnsText from @wagmi/core\nDESCRIPTION: Shows how to import the getEnsText function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsText } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Vue Constants\nDESCRIPTION: Sets up essential configuration constants for Wagmi Vue integration including documentation path and package names for core and connector imports.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/connectors/metaMask.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'vue'\nconst packageName = '@wagmi/vue'\nconst connectorsPackageName = '@wagmi/vue/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Key Prefix\nDESCRIPTION: Shows how to set a custom key prefix when creating a Storage object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage } from '{{packageName}}'\n\nconst storage = createStorage({\n  key: 'my-app',\n  storage: localStorage,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing UseWriteContractParameters Type\nDESCRIPTION: Example of importing the UseWriteContractParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWriteContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWriteContractParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useWatchBlocks Hook\nDESCRIPTION: Shows how to import the useWatchBlocks hook from wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchBlocks } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Core Constants in Vue\nDESCRIPTION: Sets up constant variables for Wagmi documentation paths and package names, including core and connector packages. Used for configuration and import references throughout the application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors/metaMask.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'core'\nconst packageName = '@wagmi/core'\nconst connectorsPackageName = '@wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Path in Wagmi CLI\nDESCRIPTION: Example showing how to set the output path for generated code in Wagmi CLI, which must be unique per configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/options.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  out: 'src/generated.ts',\n  contracts: [\n    {\n      abi: [â€¦],\n      name: 'MyCoolContract'\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DisconnectParameters Type from Wagmi Core\nDESCRIPTION: Shows how to import the DisconnectParameters type for type-safe usage of the disconnect action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/disconnect.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type DisconnectParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using getItem Method of Storage\nDESCRIPTION: Demonstrates how to use the getItem method of the Storage object to retrieve data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage } from '{{packageName}}'\n\nconst storage = createStorage({ storage: localStorage })\nconst recentConnectorId = storage.getItem('recentConnectorId')\n```\n\n----------------------------------------\n\nTITLE: Importing waitForCallsStatus\nDESCRIPTION: Example showing how to import the waitForCallsStatus function from the experimental wagmi core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForCallsStatus } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript\nDESCRIPTION: This snippet sets the TypeScript configuration with strict mode enabled to ensure the highest level of type safety. It ensures that all TypeScript code adheres to strict type-checking rules to prevent potential errors.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing getFeeHistory from @wagmi/core in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the getFeeHistory function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFeeHistory } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Import useChainId Hook\nDESCRIPTION: Imports the `useChainId` hook from the wagmi library. This hook is used to retrieve the current chain ID in a React application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChainId.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChainId } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing EtherscanConfig Type in TypeScript\nDESCRIPTION: Shows how to import the EtherscanConfig type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EtherscanConfig } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Importing UseEstimateGasParameters Type\nDESCRIPTION: Shows how to import the UseEstimateGasParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseEstimateGasParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseWaitForTransactionReceiptReturnType\nDESCRIPTION: Shows how to import the UseWaitForTransactionReceiptReturnType for TypeScript type checking of the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForTransactionReceipt.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWaitForTransactionReceiptReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing UseWriteContractsParameters Type in TypeScript\nDESCRIPTION: Shows how to import the UseWriteContractsParameters type from the wagmi/experimental package for type checking and autocompletion.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContracts.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWriteContractsParameters } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing useReadContract in Vue\nDESCRIPTION: Shows how to import the useReadContract composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReadContract.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useReadContract } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Core Package in Vue Component\nDESCRIPTION: Sets up a constant variable for the Wagmi core package name using Vue's script setup syntax. This is typically used at the component level for managing Wagmi core dependencies.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/transports/http.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing UseStorageAtReturnType in TypeScript\nDESCRIPTION: Shows how to import the UseStorageAtReturnType for TypeScript type checking of the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseStorageAtReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Reconnect Error Type Import\nDESCRIPTION: Shows how to import the ReconnectErrorType for error handling.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/reconnect.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ReconnectErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Package Names in Vue\nDESCRIPTION: Sets up constants for Wagmi core and connectors package names in a Vue.js script setup block. These constants are likely used for package imports and configuration throughout the application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors/coinbaseWallet.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst connectorsPackageName = '@wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain ID for ENS Avatar Lookup\nDESCRIPTION: Setting a specific chain ID when fetching an ENS avatar to query from a particular network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\nimport { mainnet } from 'wagmi/chains'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAvatar({\n    chainId: mainnet.id,\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Import useCall hook from wagmi\nDESCRIPTION: This code snippet demonstrates how to import the `useCall` hook from the `wagmi` library in a TypeScript environment. It is necessary for using the hook in React components to perform Ethereum calls.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { useCall } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Including Shared Serialization Utility in Vue Component\nDESCRIPTION: This HTML comment includes a reference to a shared utility file for serialization. The actual content of the utility is not present in this snippet, but it's being included in the component, likely for use in data handling or API interactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/utilities/serialize.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--@include: @shared/utilities/serialize.md-->\n```\n\n----------------------------------------\n\nTITLE: Importing DisconnectErrorType from Wagmi Core\nDESCRIPTION: Shows how to import the DisconnectErrorType for handling errors specific to the disconnect action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/disconnect.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type DisconnectErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Basic Wagmi Generate Command\nDESCRIPTION: The basic command to generate code using wagmi CLI without any additional options.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/generate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwagmi generate \n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Block\nDESCRIPTION: Initial setup script defining package and action name constants for the documentation page.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContract.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'readContract'\nconst typeName = 'ReadContract'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Import UseChainIdParameters Type\nDESCRIPTION: Imports the `UseChainIdParameters` type from the wagmi library. This type defines the structure for parameters that can be passed to the `useChainId` hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useChainId.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseChainIdParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup for Transport Navigation\nDESCRIPTION: Vue script that processes the sidebar configuration to extract and sort transport-related navigation items.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/transports.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getSidebar } from '../../.vitepress/sidebar'\n\nconst transports = getSidebar()['/core']\n  .find(x => x.text.includes('Configuration')).items\n  .find(x => x.text.includes('Transports')).items\n  .sort((a, b) => a.text.localeCompare(b.text))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing BaseError from Wagmi\nDESCRIPTION: Base error class that all other wagmi errors extend from\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Variables for wagmi Vue.js Documentation\nDESCRIPTION: This Vue.js script setup block initializes constants for documentation path and package names related to wagmi library integration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/connectors/injected.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'vue'\nconst packageName = '@wagmi/vue'\nconst connectorsPackageName = '@wagmi/vue/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Import useGasPrice from wagmi\nDESCRIPTION: Imports the useGasPrice hook from the wagmi library. This hook is used to fetch the current gas price.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useGasPrice.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useGasPrice } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Vue Package Configuration\nDESCRIPTION: Sets up the package name constant for the Wagmi Vue integration module. This configuration is used to define the package reference for the Vue.js implementation of Wagmi.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/transports/webSocket.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\n</script>\n\n<!-- @include: @shared/transports/webSocket.md -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Package Name in Vue\nDESCRIPTION: Sets up a constant variable 'packageName' with the value 'wagmi' using Vue's script setup syntax. This establishes the package identifier for use within the component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/utilities/serialize.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Return Type for useConnectorClient\nDESCRIPTION: Shows how to import the type definition for the return value of the useConnectorClient function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectorClientReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi CLI with Package Managers\nDESCRIPTION: Basic installation commands for Wagmi CLI using different package managers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wagmi/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @wagmi/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @wagmi/cli\n```\n\n----------------------------------------\n\nTITLE: Installing @wagmi/vue Package Dependencies\nDESCRIPTION: Command to install @wagmi/vue and its required dependencies (viem and @tanstack/vue-query) using pnpm package manager.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/vue/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/vue viem @tanstack/vue-query\n```\n\n----------------------------------------\n\nTITLE: Importing GetChainIdReturnType\nDESCRIPTION: Shows how to import the return type for the getConnectorClient function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetChainIdReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSimulateContractParameters Type\nDESCRIPTION: This snippet shows how to import the UseSimulateContractParameters type for type checking and intellisense.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSimulateContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSimulateContractParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing ABI from Viem in TypeScript\nDESCRIPTION: Demonstrates how to import ABI from Viem instead of Wagmi in v2.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { erc20Abi } from 'viem'\n```\n\n----------------------------------------\n\nTITLE: Importing Etherscan Plugin in TypeScript\nDESCRIPTION: Shows how to import the Etherscan plugin from the Wagmi CLI package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/etherscan.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { etherscan } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Importing useDeployContract Hook in TypeScript\nDESCRIPTION: Shows how to import the useDeployContract hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDeployContract } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Updating Patch Version and Dependencies for wagmi\nDESCRIPTION: Updates the patch version of wagmi to 2.5.14 and adds a deprecation notice for normalizeChainId function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.5.14\n\n### Patch Changes\n\n- [`e1ca4e63`](https://github.com/wevm/wagmi/commit/e1ca4e637ae6cec7f5902b0a2c0e0efc3b751a1d) Thanks [@tmm](https://github.com/tmm)! - Deprecated `normalizeChainId`. Use `Number` instead.\n\n- Updated dependencies [[`e1ca4e63`](https://github.com/wevm/wagmi/commit/e1ca4e637ae6cec7f5902b0a2c0e0efc3b751a1d)]:\n  - @wagmi/connectors@4.1.20\n  - @wagmi/core@2.6.11\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Configuration\nDESCRIPTION: Initial Vue setup script defining package and action names for the documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core/experimental'\nconst actionName = 'sendCalls'\nconst typeName = 'SendCalls'\n</script>\n```\n\n----------------------------------------\n\nTITLE: watchClient Parameters Type Import\nDESCRIPTION: Shows how to import the type definition for watchClient parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchClientParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useSignTypedData Hook in TypeScript\nDESCRIPTION: Shows how to import the useSignTypedData hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignTypedData.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignTypedData } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing MetaMask Parameters Type\nDESCRIPTION: Shows how to import the MetaMask parameters type definition for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MetaMaskParameters } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing UseEstimateFeesPerGasReturnType\nDESCRIPTION: Shows how to import the return type definition for the useEstimateFeesPerGas hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { type UseEstimateFeesPerGasReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSendTransactionReturnType in TypeScript\nDESCRIPTION: Demonstrates how to import the UseSendTransactionReturnType type from the wagmi library for use with the return value of the useSendTransaction hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendTransaction.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSendTransactionReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing WagmiPlugin in TypeScript\nDESCRIPTION: Shows how to import the WagmiPlugin from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/WagmiPlugin.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WagmiPlugin } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: getConnections Return Type Import\nDESCRIPTION: Shows how to import the TypeScript type definition for the getConnections return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnections.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetConnectionsReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Block Watching with Custom Block Tag\nDESCRIPTION: Example showing how to watch blocks with a specific block tag configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlocks.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchBlocks } from 'wagmi'\n\nfunction App() {\n  useWatchBlocks({\n    blockTag: 'latest',\n    onBlock(block) {\n      console.log('New block', block.number)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using blockNumber Parameter with useBalance\nDESCRIPTION: Shows how to specify a specific block number when fetching a balance using the useBalance composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\n\nconst result = useBalance({\n  address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n  blockNumber: 17829139n, // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Overriding Package Name in Wagmi CLI Actions Plugin\nDESCRIPTION: Shows how to override the detected import source using the overridePackageName option in the actions plugin configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/actions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { actions } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    actions({\n      overridePackageName: 'wagmi',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEnsText with Scope Key for Cache Control\nDESCRIPTION: Demonstrates using the scopeKey parameter to scope the cache to a specific context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsText.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsText } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsText({\n    scopeKey: 'foo', \n    name: normalize('wevm.eth'),\n    key: 'com.twitter',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Vue Package Constants\nDESCRIPTION: Sets up constant variables for Wagmi Vue package imports and connector references. Defines the main package name and a separate path for connectors package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/connectors/walletConnect.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\nconst connectorsPackageName = '@wagmi/vue/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing verifyTypedData Error Type in Wagmi Core\nDESCRIPTION: This snippet demonstrates how to import the error type for the verifyTypedData function, which can be used for error handling and type-checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyTypedData.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type VerifyTypedDataErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useConnections Hook from Wagmi\nDESCRIPTION: Basic import statement for the useConnections hook from the wagmi library\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnections.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnections } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Updating Patch Version for wagmi\nDESCRIPTION: Updates the patch version of wagmi to 2.5.13 without any specific changes mentioned.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.5.13\n```\n\n----------------------------------------\n\nTITLE: Importing Experimental Hook from Wagmi\nDESCRIPTION: Demonstrates how to import the useCallsStatus hook from the experimental wagmi package for retrieving call batch statuses\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCallsStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCallsStatus } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing UseConnectorClientParameters Type\nDESCRIPTION: Shows how to import the type definition for useConnectorClient parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectorClientParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: WatchAccountReturnType Import\nDESCRIPTION: Shows how to import the TypeScript return type definition for the watchAccount function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAccount.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchAccountReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Documentation for Wagmi Errors\nDESCRIPTION: Sets up Vue component variables for the documentation path and package name for the Wagmi Vue package errors documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = \"vue\"\nconst packageName = '@wagmi/vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useClient in TypeScript\nDESCRIPTION: Shows how to import the useClient composable from @wagmi/vue.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useClient } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Import useFeeHistory from wagmi\nDESCRIPTION: This code snippet shows how to import the `useFeeHistory` hook from the `wagmi` library. This import statement is necessary to use the hook in a React component for fetching historical gas information.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFeeHistory } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing GetConnectorClientParameters Type\nDESCRIPTION: Shows how to import the GetConnectorClientParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnectorClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetConnectorClientParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Documentation Path for Wagmi\nDESCRIPTION: Sets up the documentation path variable for the Vue implementation of Wagmi. This script defines 'docsPath' as 'vue' to correctly reference Vue-specific documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: getStorageAt Error Type Import\nDESCRIPTION: Shows how to import the GetStorageAtErrorType type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetStorageAtErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: useFeeHistory with blockNumber parameter\nDESCRIPTION: This snippet highlights the `blockNumber` parameter in the `useFeeHistory` hook, allowing the user to specify the highest number block of the requested range. This parameter, of type `bigint`, determines the end of the range for fetching gas history.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFeeHistory } from 'wagmi'\n\nfunction App() {\n  const result = useFeeHistory({\n    blockCount: 4,\n    blockNumber: 1551231n, // [!code focus]\n    rewardPercentiles: [25, 75]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variables for Development\nDESCRIPTION: Environment variable definitions required for running development playgrounds and test suite, which should be placed in a .env file for local configurations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nVITE_MAINNET_FORK_URL=https://eth.merkle.io\\nVITE_OPTIMISM_FORK_URL=https://mainnet.optimism.io\\n\\nNEXT_PUBLIC_WC_PROJECT_ID=3fbb6bba6f1de962d911bb5b5c9dba88\\nNUXT_PUBLIC_WC_PROJECT_ID=3fbb6bba6f1de962d911bb5b5c9dba88\\nVITE_WC_PROJECT_ID=3fbb6bba6f1de962d911bb5b5c9dba88\\n\\nNEXT_TELEMETRY_DISABLED=1\\nNUXT_TELEMETRY_DISABLED=1\n```\n\n----------------------------------------\n\nTITLE: Importing MockParameters Type\nDESCRIPTION: Shows how to import the MockParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/mock.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MockParameters } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: useConnectors Return Type Definition\nDESCRIPTION: Shows the TypeScript type definition for the return value of the useConnectors hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectors.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { type UseConnectorsReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing Mock Connector in TypeScript\nDESCRIPTION: Shows how to import the mock connector from the Wagmi connectors package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/mock.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mock } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: Narrowing Return Types with ChainId Parameter\nDESCRIPTION: Shows how to use chainId parameter to narrow return types for chain-specific properties.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/chain-properties.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from 'wagmi'\nimport { zkSync } from 'wagmi/chains'\n\nconst { data } = useWaitForTransactionReceipt({\n  chainId: zkSync.id,\n  hash: '0x16854fcdd0219cacf5aec5e4eb2154dac9e406578a1510a6fc48bd0b67e69ea9',\n})\n\ndata?.logs\n```\n\n----------------------------------------\n\nTITLE: Importing UseDisconnectParameters Type in TypeScript\nDESCRIPTION: Shows how to import the UseDisconnectParameters type for type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDisconnect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseDisconnectParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing cookieToInitialState from wagmi\nDESCRIPTION: Shows how to import the cookieToInitialState function from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/cookieToInitialState.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookieToInitialState } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Name in Vue Script Setup\nDESCRIPTION: Defines a constant 'packageName' with the value 'wagmi' using Vue's script setup syntax. This establishes the package identifier for use within the component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/transports/fallback.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Package Name in Vue Setup Script\nDESCRIPTION: Vue setup script that declares a constant for the wagmi package name. This is used to configure the Vue integration with the wagmi library for web3 functionality.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/utilities/deserialize.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing UseEstimateGasReturnType\nDESCRIPTION: Shows how to import the UseEstimateGasReturnType for TypeScript type checking of the return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseEstimateGasReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectReturnType from Wagmi Core\nDESCRIPTION: Shows how to import the ConnectReturnType type from the @wagmi/core package for type checking the return value of the 'connect' function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/connect.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ConnectReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useToken Hook in TypeScript\nDESCRIPTION: Basic import statement for the useToken hook from wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useToken } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing SimulateContractParameters Type\nDESCRIPTION: Shows how to import the SimulateContractParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/simulateContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SimulateContractParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Setting a Scope Key to Manage Cache\nDESCRIPTION: Demonstrates how to use the scopeKey parameter to manage the cache defined context for useEstimateMaxPriorityFeePerGas hooks with identical context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateMaxPriorityFeePerGas.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateMaxPriorityFeePerGas } from 'wagmi'\n\nfunction App() {\n  const result = useEstimateMaxPriorityFeePerGas({\n    scopeKey: 'foo',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UseShowCallsStatusParameters Type in TypeScript\nDESCRIPTION: Shows how to import the UseShowCallsStatusParameters type for type-checking the hook parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useShowCallsStatus.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseShowCallsStatusParameters } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: Updates the @wagmi/chains dependency to version 1.7.0. This change is part of the patch updates for the current version.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/connectors/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [8fdacd8]\n- Updated dependencies [2e9283a]\n- Updated dependencies [a432a2b]\n- Updated dependencies [408740a]\n- Updated dependencies [6794a61]\n- Updated dependencies [0c5a32b]\n- Updated dependencies [ebc85ec]\n- Updated dependencies [5683df2]\n- Updated dependencies [414ff36]\n- Updated dependencies [4f514c6]\n- Updated dependencies [1cf72bc]\n- Updated dependencies [cd68471]\n- Updated dependencies [baf3143]\n- Updated dependencies [9737f24]\n- Updated dependencies [7797238]\n- Updated dependencies [3846811]\n- Updated dependencies [0ea344c]\n  - @wagmi/chains@1.7.0\n```\n\n----------------------------------------\n\nTITLE: Defining Rinkeby Chain in wagmi\nDESCRIPTION: This snippet demonstrates how to manually define the Rinkeby testnet chain configuration in the wagmi project after its removal as a deprecated feature. Dependencies include the wagmi library and a JavaScript/TypeScript environment. Key properties of the Rinkeby chain such as id, name, network, nativeCurrency details, rpcUrls, blockExplorers, ens, multicall, and testnet status are outlined.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n-import { rinkeby } from 'wagmi'\\n+import { Chain } from 'wagmi'\\n\\n+export const rinkeby: Chain = {\\n+ id: 4,\\n+ name: 'Rinkeby',\\n+ network: 'rinkeby',\\n+ nativeCurrency: { name: 'Rinkeby Ether', symbol: 'ETH', decimals: 18 },\\n+ rpcUrls: {\\n+   alchemy: 'https://eth-rinkeby.alchemyapi.io/v2',\\n+   default: 'https://rpc.ankr.com/eth_rinkeby',\\n+   infura: 'https://rinkeby.infura.io/v3',\\n+   public: 'https://rpc.ankr.com/eth_rinkeby',\\n+  },\\n+ blockExplorers: {\\n+   etherscan: 'https://rinkeby.etherscan.io',\\n+   default: 'https://rinkeby.etherscan.io',\\n+ },\\n+ ens: {\\n+   address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\\n+ },\\n+ multicall: {\\n+   address: '0xca11bde05977b3631167028862be2a173976ca11',\\n+   blockCreated: 10299530,\\n+ },\\n+ testnet: true,\\n }\n```\n\n----------------------------------------\n\nTITLE: watchClient Return Type Import\nDESCRIPTION: Shows how to import the type definition for watchClient return type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchClient.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchClientReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Connected Account Type Narrowing Example\nDESCRIPTION: TypeScript example demonstrating type narrowing when account status is 'connected', showing how the type system handles defined properties.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/getAccount-return-type.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (account.status === 'connected') {\n  account\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Names for Wagmi Vue in Vue.js\nDESCRIPTION: This script sets up constants for the main Wagmi Vue package name and its connectors package. These constants can be used throughout the Vue application for consistent package referencing.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/connectors/mock.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\nconst connectorsPackageName = '@wagmi/vue/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Contracts Restructuring in Chain Type\nDESCRIPTION: Breaking change moving multicall and ENS attributes into a dedicated contracts object within the Chain type, providing a more organized structure for blockchain contract references.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Contract = {\n  address: Address\n  blockCreated?: number\n}\n\ntype Chain = {\n  ...\n- multicall: Contract\n- ens: Contract\n+ contracts: {\n+   multicall3: Contract\n+   ensRegistry: Contract\n+ }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Constants for Wagmi in Vue\nDESCRIPTION: Sets up constant variables for Wagmi package names that will be used throughout the application. Defines the main package name and the connectors package path.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/connectors/safe.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\nconst connectorsPackageName = 'wagmi/connectors'\n</script>\n\n<!-- @include: @shared/connectors/safe.md -->\n```\n\n----------------------------------------\n\nTITLE: Importing useTransactionCount Hook in TypeScript\nDESCRIPTION: This snippet shows how to import the useTransactionCount hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionCount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransactionCount } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Package Name for Wagmi\nDESCRIPTION: Sets up the package name constant for the Wagmi Vue integration package. This script defines the package name as '@wagmi/vue' for use in Vue components.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/transports/custom.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Wagmi CLI Help Information\nDESCRIPTION: Shows help information for the Wagmi CLI tool using different package managers. The -h or --help flag displays available commands and usage instructions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm wagmi --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx wagmi --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn wagmi --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun wagmi --help\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup\nDESCRIPTION: Initial Vue component setup defining package and action names\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signTypedData.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'signTypedData'\nconst typeName = 'SignTypedData'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Declaration Merging Config Setup\nDESCRIPTION: Example of using TypeScript declaration merging to register Wagmi config globally for type inference.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from 'wagmi'\nimport { mainnet, sepolia } from 'wagmi/chains'\n\ndeclare module 'wagmi' {\n  interface Register {\n    config: typeof config\n  }\n}\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing UseWriteContractReturnType\nDESCRIPTION: Example of importing the UseWriteContractReturnType for TypeScript type checking of the return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWriteContract.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWriteContractReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useEstimateGas Composable in Vue\nDESCRIPTION: Shows how to import the useEstimateGas composable from the @wagmi/vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEstimateGas } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Import getBlockTransactionCount Function\nDESCRIPTION: Example showing how to import the getBlockTransactionCount function from @wagmi/core.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlockTransactionCount } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: useCall with AccessList Parameter\nDESCRIPTION: Illustrates the usage of the `accessList` parameter within the `useCall` hook to specify the access list. The `accessList` parameter accepts an `AccessList | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    accessList: [ // [!code focus:6] \n      {\n        address: '0x1',\n        storageKeys: ['0x1'],\n      },\n    ],\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Parameters Type Import\nDESCRIPTION: Import statement for the EstimateFeesPerGasParameters type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateMaxPriorityFeePerGas.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EstimateFeesPerGasParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useSignMessage in Vue\nDESCRIPTION: Shows how to import the useSignMessage composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignMessage } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Configuration in Vue\nDESCRIPTION: This snippet sets up configuration variables for the Wagmi package, including version information and package details.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport packageJson from '../../packages/react/package.json'\nimport Browsers from '../components/Browsers.vue'\n\nconst docsPath = 'react'\nconst packageDir = 'react'\nconst packageName = 'wagmi'\nconst viemVersion = packageJson.peerDependencies.viem\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Name for Wagmi in Vue.js\nDESCRIPTION: This Vue.js setup script defines the package name for the Wagmi project. It uses the <script setup> syntax to declare a constant 'packageName' with the value 'wagmi'.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/transports/http.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing GetCallsStatusParameters Type in TypeScript\nDESCRIPTION: Shows how to import the GetCallsStatusParameters type for type checking the action parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getCallsStatus.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetCallsStatusParameters } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Using getEnsText with blockNumber parameter\nDESCRIPTION: Shows how to use the getEnsText function with a specific block number to fetch the text record at that block.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getEnsText.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEnsText } from '@wagmi/core'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nconst ensText = getEnsText(config, {\n  blockNumber: 17829139n,\n  name: normalize('wevm.eth'),\n  key: 'com.twitter',\n})\n```\n\n----------------------------------------\n\nTITLE: Using the blockNumber Parameter - TSX\nDESCRIPTION: This snippet demonstrates how to pass a block number to the `useBytecode` hook to specify the block at which to retrieve bytecode.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBytecode.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBytecode } from 'wagmi'\n\nfunction App() {\n  const result = useBytecode({\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    blockNumber: 16280770n, // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing getClient Action in TypeScript\nDESCRIPTION: Shows how to import the getClient action from the wagmi core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getClient } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: ID Parameter Example\nDESCRIPTION: Demonstrates using waitForCallsStatus with a specific call batch ID.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { waitForCallsStatus } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst status = await waitForCallsStatus(config, {\n  id: '0x1234567890abcdef',\n})\n```\n\n----------------------------------------\n\nTITLE: Using useBytecode with Chain ID Parameter\nDESCRIPTION: Shows how to use the useBytecode composable with a specific chain ID parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBytecode } from '@wagmi/vue'\nimport { mainnet } from '@wagmi/vue/chains'\n\nconst { data: byteCode } = useBytecode({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  chainId: mainnet.id,\n})\n</script>\n\n<template>\n  Byte Code: {{ byteCode }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup\nDESCRIPTION: Vue setup script defining TVariables constant.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/getAccount-return-type.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst TVariables = 'TVariables'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Wagmi Package Constants in Vue\nDESCRIPTION: Vue script setup block that defines constant variables for the main wagmi core package and connectors package names. These constants are likely used for importing or referencing wagmi packages throughout the application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors/walletConnect.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst connectorsPackageName = '@wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Error Type Import\nDESCRIPTION: Import statement for the EstimateFeesPerGasErrorType type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateMaxPriorityFeePerGas.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EstimateFeesPerGasErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useChains from Wagmi Vue\nDESCRIPTION: Shows how to import the useChains composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChains.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChains } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseClientReturnType\nDESCRIPTION: Demonstrates how to import the UseClientReturnType for TypeScript type checking of the return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseClientReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Basic getStorageAt Import\nDESCRIPTION: Shows how to import the getStorageAt function from @wagmi/core.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getStorageAt } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseConnectionsReturnType TypeScript Type\nDESCRIPTION: Shows how to import the TypeScript type definition for the return type of the useConnections composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnections.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectionsReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Parameters Type Import\nDESCRIPTION: Shows how to import WalletConnect parameter types for TypeScript support.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WalletConnectParameters } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Configuration\nDESCRIPTION: Initial setup configuration defining package and function names for the documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/waitForCallsStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core/experimental'\nconst actionName = 'waitForCallsStatus'\nconst typeName = 'WaitForCallsStatus'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Storage Persisters\nDESCRIPTION: Command-line instructions for installing TanStack Query storage persister packages using different package managers.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @tanstack/query-sync-storage-persister @tanstack/react-query-persist-client\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup for Hook Navigation\nDESCRIPTION: Sets up the sidebar navigation for React hooks documentation by filtering and sorting hook items from the VitePress sidebar configuration.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getSidebar } from '../../.vitepress/sidebar'\n\nconst hooks = getSidebar()['/react']\n  .find(x => x.text === 'Hooks').items\n  .sort((a, b) => a.text.localeCompare(b.text))\n</script>\n```\n\n----------------------------------------\n\nTITLE: useChainId Type Definition Import\nDESCRIPTION: Shows how to import the TypeScript type definitions for the useChainId hook, enabling proper type checking and IDE support.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useChainId.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseChainIdParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSignMessageParameters Type\nDESCRIPTION: Shows how to import the UseSignMessageParameters type for TypeScript type checking when using the useSignMessage composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSignMessage.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSignMessageParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Setting up Wagmi Documentation Variables in Vue\nDESCRIPTION: This script defines the core path and package name variables used throughout the Wagmi Vue documentation. It establishes the documentation path and package references that would be imported in documentation examples.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/createConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'vue'\nconst packageName = '@wagmi/vue'\nconst connectorsPackageName = '@wagmi/vue/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Hardhat Config Type\nDESCRIPTION: Type import for Hardhat configuration options.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type HardhatConfig } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Updating useBalance Hook Parameter in JavaScript\nDESCRIPTION: Example of updating the useBalance hook to use 'address' instead of 'addressOrName' parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = useBalance({\n address: '0xâ€¦',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Package Name in Vue\nDESCRIPTION: A Vue script setup that defines the packageName constant with the value '@wagmi/core', likely used for documentation or reference purposes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/utilities/normalizeChainId.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Variables in Vue\nDESCRIPTION: Setup script defining package and action names for wagmi core transaction preparation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/prepareTransactionRequest.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'prepareTransactionRequest'\nconst typeName = 'prepareTransactionRequest'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue setup script accessing package version information\nDESCRIPTION: Vue setup script that imports package.json to access the required TypeScript version from peer dependencies.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/typescript.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport packageJson from '../../packages/vue/package.json'\n\nconst typescriptVersion = packageJson.peerDependencies.typescript\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Package Name in Vue Component for Wagmi Core\nDESCRIPTION: This Vue component setup defines the package name as '@wagmi/core' which is used for Wagmi functionality. This is likely part of a documentation or configuration page.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/transports/webSocket.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Reconnect Action\nDESCRIPTION: Shows how to import the reconnect action from @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/reconnect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reconnect } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Defining Package Name in Vue Component\nDESCRIPTION: A Vue.js script setup block that defines a constant 'packageName' with the value '@wagmi/vue', which specifies the package name for Vue integration with wagmi.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/transports/fallback.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Name in Vue Script\nDESCRIPTION: Vue script setup block that declares a constant 'packageName' with the value 'wagmi'. Uses the script setup syntax which is part of Vue's Composition API.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/utilities/deserialize.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating WalletConnect Dependencies\nDESCRIPTION: Updates WalletConnect-related dependencies. This change is part of the patch updates for version 2.6.6.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/connectors/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- 56c127d: Updated WalletConnect dependencies.\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Connectors\nDESCRIPTION: Example showing how to import connectors from the wagmi library's connectors module.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injected } from 'wagmi/connectors'\n```\n\n----------------------------------------\n\nTITLE: Importing UseWriteContractsReturnType in TypeScript\nDESCRIPTION: Shows how to import the UseWriteContractsReturnType type from the wagmi/experimental package for type checking the return value of the useWriteContracts hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContracts.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWriteContractsReturnType } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing UseWaitForCallsStatusParameters Type\nDESCRIPTION: Shows how to import the UseWaitForCallsStatusParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWaitForCallsStatusParameters } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Package Constants in Vue\nDESCRIPTION: Defines constant variables for Wagmi core and connectors package names using Vue's script setup syntax. These constants can be used throughout the component for consistent package references.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors/safe.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst connectorsPackageName = '@wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: getStorageAt Parameters Type Import\nDESCRIPTION: Shows how to import the GetStorageAtParameters type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getStorageAt.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetStorageAtParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in JavaScript\nDESCRIPTION: Example of updating dependencies in a JavaScript project's package.json file.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@wagmi/core\": \"2.6.10\",\n    \"@wagmi/connectors\": \"4.1.19\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsName from wagmi\nDESCRIPTION: Shows how to import the useEnsName hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsName.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsName } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Import UseSendCallsReturnType\nDESCRIPTION: Imports the `UseSendCallsReturnType` type from `wagmi/experimental`.  This type defines the structure of the object returned by the `useSendCalls` hook, providing information about the status and results of the sendCalls operation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendCalls.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n\"import { type UseSendCallsReturnType } from 'wagmi/experimental'\"\n```\n\n----------------------------------------\n\nTITLE: Using useClient with Custom Config\nDESCRIPTION: Shows how to use useClient with a custom configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useClient } from '@wagmi/vue'\nimport { config } from './config'\n\nconst client = useClient({\n  config,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using showCallsStatus Action in TypeScript\nDESCRIPTION: This example shows how to use the showCallsStatus action with a configuration object and an ID parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/showCallsStatus.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { showCallsStatus } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nawait showCallsStatus(config, {\n  id: '0x1234567890abcdef',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi Connectors and Dependencies\nDESCRIPTION: Command to install @wagmi/connectors package along with its dependencies @wagmi/core and viem using pnpm package manager.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/connectors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/connectors @wagmi/core viem\n```\n\n----------------------------------------\n\nTITLE: Batch Configuration Example\nDESCRIPTION: Shows how to configure the batch parameter for transaction processing\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchPendingTransactions } from '@wagmi/core'\n\nconst unwatch = watchPendingTransactions(config, {\n  batch: false,\n  onTransactions(transactions) {\n    console.log('New transactions!', transactions)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useWriteContract from Wagmi\nDESCRIPTION: Shows how to import the useWriteContract hook from the Wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContract.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWriteContract } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing Connect Types from Wagmi for TanStack Query\nDESCRIPTION: This snippet shows how to import various types and options needed to use the connect functionality from Wagmi with TanStack Query. The imports include data types, variables, mutation functions, and options required for connect operations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/mutation-imports.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type {{typeName}}Data,\n  type {{typeName}}Variables,\n  type {{typeName}}Mutate,\n  type {{typeName}}MutateAsync,\n  {{actionName}}MutationOptions,\n} from '{{packageName}}/query'\n```\n\n----------------------------------------\n\nTITLE: Importing GetFeeHistoryParameters Type in TypeScript\nDESCRIPTION: This snippet shows how to import the GetFeeHistoryParameters type for type checking and autocompletion purposes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFeeHistoryParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing SendTransactionErrorType\nDESCRIPTION: Demonstrates how to import the SendTransactionErrorType for handling errors in TypeScript.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendTransaction.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SendTransactionErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies with pnpm\nDESCRIPTION: Command to install the project's dependencies using pnpm, a fast and disk space efficient package manager.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Check Node.js Version\nDESCRIPTION: Command to verify the currently installed version of Node.js, essential for ensuring compatibility with the Wagmi project's requirements.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Using useBytecode with Scope Key\nDESCRIPTION: Shows how to use the useBytecode composable with a scope key for caching purposes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBytecode } from '@wagmi/vue'\nimport { config } from './config'\n\nconst { data: byteCode } = useBytecode({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  scopeKey: 'foo',\n})\n</script>\n\n<template>\n  Byte Code: {{ byteCode }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Name in Vue Component\nDESCRIPTION: Sets up a constant variable to store the Wagmi package name using Vue's script setup syntax.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/utilities/cookieToInitialState.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: TanStack Query Configuration with Vue Script Setup\nDESCRIPTION: A Vue script setup block that defines type variables (TData, TError) and configuration flags for documentation generation. This script appears to be used for templating or documentation generation purposes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/query-result.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n<script setup>\nconst TData = 'TData'\nconst TError = 'TError'\nconst includeInfiniteQueryResult = false\n</script>\n-->\n```\n\n----------------------------------------\n\nTITLE: Importing GetFeeHistoryErrorType in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the GetFeeHistoryErrorType for handling potential errors from the getFeeHistory function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFeeHistoryErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing Injected Connector in TypeScript\nDESCRIPTION: Shows how to import the injected connector from the wagmi connectors package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/injected.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injected } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing useReconnect in Vue\nDESCRIPTION: Shows how to import the useReconnect composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useReconnect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useReconnect } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Setting up documentation variables with Vue.js\nDESCRIPTION: Defines constants for documentation paths and package names using Vue's script setup syntax. These variables are likely used for generating documentation or import examples for the wagmi React hooks library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/connectors/metaMask.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'react'\nconst packageName = 'wagmi'\nconst connectorsPackageName = 'wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing WatchConnectorsParameters type from @wagmi/core\nDESCRIPTION: Shows how to import the WatchConnectorsParameters type from the @wagmi/core library for type checking and autocompletion.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnectors.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchConnectorsParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseWatchContractEventParameters Type\nDESCRIPTION: Shows how to import the type definition for the parameters of the useWatchContractEvent composable for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWatchContractEvent.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchContractEventParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useAccountEffect in Vue\nDESCRIPTION: Shows how to import the useAccountEffect composable from the Wagmi Vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccountEffect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccountEffect } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseTransactionConfirmationsParameters Type\nDESCRIPTION: Shows how to import the UseTransactionConfirmationsParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseTransactionConfirmationsParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Wagmi Package Name\nDESCRIPTION: Vue script setup block that defines a constant 'packageName' with the value 'wagmi'. Uses the script setup syntax for composition API.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/utilities/normalizeChainId.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Package and Action Names in Vue\nDESCRIPTION: Sets up constants for the package name, action name, and type name using Vue's script setup.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getGasPrice.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'getGasPrice'\nconst typeName = 'GetGasPrice'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Deserialize Function in wagmi\nDESCRIPTION: Shows how to import the deserialize function from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/utilities/deserialize.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deserialize } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Chain ID for Multi-Chain Contract Addresses\nDESCRIPTION: Shows how to specify a chain ID when working with contracts that exist on multiple chains. The chainId parameter selects which address to use when address is provided as an object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/sourcify.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { sourcify } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    sourcify({\n      chainId: 100, // [!code focus]\n      contracts: [\n        {\n          name: 'Community',\n          address: {\n            100: '0xC4c622862a8F548997699bE24EA4bc504e5cA865',\n            137: '0xC4c622862a8F548997699bE24EA4bc504e5cA865',\n          },\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: SendCalls with Chain ID\nDESCRIPTION: Shows how to specify target chain ID when using sendCalls function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseEther } from 'viem'\nimport { sendCalls } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst id = await sendCalls(config, {\n  calls: [\n    {\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n      value: parseEther('1')\n    },\n    {\n      data: '0xdeadbeef',\n      to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n    },\n  ],\n  chainId: 10,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing useConfig from wagmi in TypeScript\nDESCRIPTION: Shows how to import the useConfig composable function from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConfig } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using multiple Wagmi configs with the config property\nDESCRIPTION: Creating and using multiple Wagmi configurations by passing them directly to composables through the config property.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, http } from '@wagmi/vue'\nimport { mainnet, optimism } from '@wagmi/vue/chains'\n\nexport const configA = createConfig({\n  chains: [mainnet],\n  transports: {\n    [mainnet.id]: http(),\n  },\n})\n\nexport const configB = createConfig({\n  chains: [optimism],\n  transports: {\n    [optimism.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing TanStack Query Types and Functions for Wagmi getBalance\nDESCRIPTION: This code snippet demonstrates how to import various types and functions related to the getBalance action from the Wagmi library for use with TanStack Query. It includes types for query data, options, and key, as well as specific query key and options functions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/query-imports.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  type GetBalanceData,\n  type GetBalanceOptions,\n  type GetBalanceQueryFnData,\n  type GetBalanceQueryKey,\n  getBalanceQueryKey,\n  getBalanceQueryOptions,\n} from 'wagmi/query'\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Config for useEnsAvatar\nDESCRIPTION: Using a custom wagmi configuration with the useEnsAvatar hook instead of using the nearest WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAvatar.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEnsAvatar } from 'wagmi'\nimport { normalize } from 'viem/ens'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEnsAvatar({\n    config,\n    name: normalize('wevm.eth'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WriteContractErrorType from @wagmi/core in TypeScript\nDESCRIPTION: Example of importing the WriteContractErrorType type from @wagmi/core library. This type represents possible error types that can occur during contract write operations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WriteContractErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Configuration\nDESCRIPTION: Initial Vue setup script defining package and action details for the documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/deployContract.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'deployContract'\nconst typeName = 'DeployContract'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing SignMessageReturnType in TypeScript\nDESCRIPTION: Shows how to import the SignMessageReturnType for type checking the return value of signMessage action.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SignMessageReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useClient Hook in TypeScript\nDESCRIPTION: Demonstrates how to import the useClient hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useClient } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing getPublicClient from @wagmi/core\nDESCRIPTION: Shows how to import the getPublicClient function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getPublicClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getPublicClient } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Import useSendCalls Hook\nDESCRIPTION: Imports the `useSendCalls` hook from the `wagmi/experimental` package. This import is necessary to use the hook in React components.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendCalls.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n\"import { useSendCalls } from 'wagmi/experimental'\"\n```\n\n----------------------------------------\n\nTITLE: Updating createClient Connectors in TypeScript\nDESCRIPTION: The chainId parameter has been removed from the connectors function on createClient. RPC URLs are now handled internally when used with configureChains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  chain,\n+  configureChains,\n  createClient\n} from 'wagmi';\n\n+import { publicProvider } from 'wagmi/providers/public'\n\nimport { CoinbaseWalletConnector } from 'wagmi/connectors/coinbaseWallet'\nimport { InjectedConnector } from 'wagmi/connectors/injected'\nimport { MetaMaskConnector } from 'wagmi/connectors/metaMask'\nimport { WalletConnectConnector } from 'wagmi/connectors/walletConnect'\n\n+const { chains } = configureChains(\n+  [chain.mainnet],\n+  [publicProvider()]\n+);\n\nconst client = createClient({\n-  connectors({ chainId }) {\n-    const chain = chains.find((x) => x.id === chainId) ?? defaultChain\n-    const rpcUrl = chain.rpcUrls.alchemy\n-      ? `${chain.rpcUrls.alchemy}/${alchemyId}`\n-      : chain.rpcUrls.default\n-    return [\n+  connectors: [\n    new MetaMaskConnector({ chains }),\n    new CoinbaseWalletConnector({\n      chains,\n      options: {\n        appName: 'wagmi',\n-       chainId: chain.id,\n-       jsonRpcUrl: rpcUrl,\n      },\n    }),\n    new WalletConnectConnector({\n      chains,\n      options: {\n        qrcode: true,\n-       rpc: { [chain.id]: rpcUrl },\n      },\n    }),\n    new InjectedConnector({\n      chains,\n      options: { name: 'Injected' },\n    }),\n  ]\n-  },\n})\n```\n\n----------------------------------------\n\nTITLE: Removing chainId Parameter from connectors Function\nDESCRIPTION: The chainId parameter has been removed from the connectors function on createClient. If you previously derived RPC URLs from the chainId, this is now handled internally by wagmi when used with configureChains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\nconst client = createClient({\n- connectors({ chainId }) {\n+ connectors() {\n    ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Wagmi Core Package Name in Vue Script\nDESCRIPTION: A Vue script setup block that initializes the packageName constant with the value '@wagmi/core'. This is likely used for importing or referencing the core wagmi package throughout the application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/utilities/serialize.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing SwitchAccountParameters type\nDESCRIPTION: Shows how to import the SwitchAccountParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchAccount.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SwitchAccountParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing WatchAssetParameters Type\nDESCRIPTION: Shows how to import the type definition for watchAsset parameters for type safety.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchAssetParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing GetGasPriceReturnType\nDESCRIPTION: Shows how to import the GetGasPriceReturnType for TypeScript type checking of the return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getGasPrice.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetGasPriceReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing GetPublicClientReturnType from @wagmi/core\nDESCRIPTION: Shows how to import the GetPublicClientReturnType type, which represents the return type of the getPublicClient function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getPublicClient.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetPublicClientReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in wagmi 2.14.16\nDESCRIPTION: Updates the @wagmi/connectors dependency to version 5.7.12.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.14.16\n\n### Patch Changes\n\n- Updated dependencies [[`b59c024b23c69f5459b17390531207cfdf126ce4`](https://github.com/wevm/wagmi/commit/b59c024b23c69f5459b17390531207cfdf126ce4)]:\n  - @wagmi/connectors@5.7.12\n```\n\n----------------------------------------\n\nTITLE: Importing watchConnections from wagmi/core\nDESCRIPTION: Shows how to import the watchConnections function from the wagmi core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnections.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchConnections } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key for Block Explorer in Wagmi CLI\nDESCRIPTION: Demonstrates how to set the API key for the block explorer in the Wagmi CLI configuration. The API key is appended to the request URL as a query parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { blockExplorer } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    blockExplorer({\n      apiKey: process.env.ETHERSCAN_API_KEY,\n      baseUrl: 'https://api.etherscan.io/v2/api',\n      contracts: [\n        {\n          name: 'Wagmigotchi',\n          address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\n        },\n      ],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Names in Wagmi CLI Configuration\nDESCRIPTION: Illustrates how to customize action names using the getActionName configuration option in the actions plugin.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/actions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { actions } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    actions({\n      getActionName({ contractName, type }) {\n        return `${contractName}__${type}`\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing WagmiContext Type\nDESCRIPTION: Shows how to import the TypeScript type definition for the Wagmi Context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { type WagmiContext } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using blockTag Parameter with useEnsAddress\nDESCRIPTION: This example shows how to use the blockTag parameter to specify at which block state to fetch ENS address data.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsAddress } from 'wagmi'\nimport { normalize } from 'viem/ens'\n\nfunction App() {\n  const result = useEnsAddress({\n    name: normalize('wevm.eth'),\n    blockTag: 'latest', \n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating useAccount Configuration in React/TypeScript\nDESCRIPTION: The useAccount hook configuration has been updated with new onConnect and onDisconnect callbacks, and removal of suspense, onError, onSettled, and onSuccess options.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nconst account = useAccount({\n  onConnect({ address, connector, isReconnected }) {\n    console.log(\"Connected\");\n  },\n  onDisconnect() {\n    console.log(\"Disconnected\");\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing switchAccount from @wagmi/core\nDESCRIPTION: Shows how to import the switchAccount function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchAccount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { switchAccount } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: GetToken Types Import\nDESCRIPTION: Import statement for GetToken parameter types.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetTokenParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Provider Ping Configuration\nDESCRIPTION: Example of configuring the provider ping behavior for WalletConnect.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/walletConnect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { walletConnect } from '{{connectorsPackageName}}'\n\nconst connector = walletConnect({\n  disableProviderPing: false,\n  projectId: '3fcc6bba6f1de962d911bb5b5c3dba68',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Hardhat Plugin\nDESCRIPTION: Basic import statement for the Hardhat plugin from Wagmi CLI.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hardhat } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Defining Package Name in Vue.js Setup for Wagmi\nDESCRIPTION: This Vue.js script setup defines a constant 'packageName' with the value 'wagmi'. It's likely used to configure or reference the Wagmi library throughout the component or application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/transports/custom.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Import SendCalls Function\nDESCRIPTION: Shows how to import the sendCalls function from the experimental package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/sendCalls.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendCalls } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing UseWaitForCallsStatusReturnType\nDESCRIPTION: Shows how to import the UseWaitForCallsStatusReturnType for TypeScript type checking of the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWaitForCallsStatus.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWaitForCallsStatusReturnType } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing signMessage Action in TypeScript\nDESCRIPTION: Shows how to import the signMessage action from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signMessage } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useConnectorClient in TypeScript\nDESCRIPTION: Shows how to import the useConnectorClient hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useConnectorClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnectorClient } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing useConnections in TypeScript\nDESCRIPTION: Shows how to import the useConnections composable from the Wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnections.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnections } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Specifying chainId in writeContracts\nDESCRIPTION: Shows how to target a specific blockchain by providing the chainId parameter when using writeContracts.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAbi } from 'viem'\nimport { writeContracts } from '@wagmi/core/experimental'\nimport { config } from './config'\n\nconst abi = parseAbi([\n  'function approve(address, uint256) returns (bool)',\n  'function transferFrom(address, address, uint256) returns (bool)',\n])\n\nconst id = await writeContracts(config, {\n  contracts: [\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'approve',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', \n        100n\n      ],\n    },\n    {\n      address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n      abi,\n      functionName: 'transferFrom',\n      args: [\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n        '0x0000000000000000000000000000000000000000',\n        100n\n      ],\n    },\n  ],\n  chainId: 10, \n})\n```\n\n----------------------------------------\n\nTITLE: UseWriteContractParameters Type Import\nDESCRIPTION: Shows how to import the UseWriteContractParameters type definition for TypeScript support.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContract.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWriteContractParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Hook in TypeScript\nDESCRIPTION: Example showing usage of the new useTransaction hook for retrieving transaction details by hash.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransaction } from \"wagmi\";\n\nconst result = useTransaction({\n  hash: \"0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060\",\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Configuration\nDESCRIPTION: Initial Vue setup script defining package and action name constants\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/verifyMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'verifyMessage'\nconst typeName = 'VerifyMessage'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useWriteContract in TypeScript\nDESCRIPTION: Example of importing the useWriteContract composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWriteContract.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWriteContract } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Utilizing Block Number in useProof Hook\nDESCRIPTION: This snippet explains how to incorporate the 'blockNumber' parameter in the useProof hook. The blockNumber specifies a particular blockchain height to acquire the proof from, essential for time-specific queries.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useProof.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useProof } from 'wagmi'\n\nfunction App() {\n  const result = useProof({\n    address: '0x4200000000000000000000000000000000000016',\n    blockNumber: 42069n, // [!code focus]\n    storageKeys: [\n      '0x4a932049252365b3eedbc5190e18949f2ec11f39d3bef2d259764799a1b27d99',\n    ],\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing SwitchAccountErrorType\nDESCRIPTION: Demonstrates how to import the SwitchAccountErrorType for handling potential errors from the switchAccount function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchAccount.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SwitchAccountErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Customizing Hook Names in Wagmi React Plugin Configuration\nDESCRIPTION: Illustrates how to customize hook names using the getHookName option in the React plugin configuration. This example sets a custom naming pattern for generated hooks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/react.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { react } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    react({\n      getHookName({ contractName, type }) {\n        return `use${contractName}__${type}`\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing MetaMask Connector in TypeScript\nDESCRIPTION: Shows how to import the MetaMask connector from the Wagmi connectors package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { metaMask } from '{{connectorsPackageName}}'\n```\n\n----------------------------------------\n\nTITLE: Disabling syncConnectedChain in useWatchPendingTransactions\nDESCRIPTION: Demonstrates how to disable syncing with the connected chain when using the useWatchPendingTransactions hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWatchPendingTransactions } from 'wagmi'\n\nfunction App() {\n  useWatchPendingTransactions({\n    onTransactions(transactions) {\n      console.log('New transactions!', transactions)\n    },\n    syncConnectedChain: false,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: WatchAccountParameters Type Import\nDESCRIPTION: Shows how to import the TypeScript type definition for watchAccount parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAccount.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchAccountParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Devtools for wagmi\nDESCRIPTION: Shows how to install the TanStack Query Devtools package using different package managers (pnpm, npm, yarn, bun). These devtools help visualize and debug queries and their cache states.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/tanstack-query.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @tanstack/react-query-devtools\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tanstack/react-query-devtools\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tanstack/react-query-devtools\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun i @tanstack/react-query-devtools\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Script\nDESCRIPTION: Initial setup script defining package, action and type names for the documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'getToken'\nconst typeName = 'GetToken'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useWatchBlockNumber Hook\nDESCRIPTION: Shows how to import the useWatchBlockNumber hook from wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchBlockNumber.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchBlockNumber } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useSwitchAccount Hook\nDESCRIPTION: Illustrates how to use a custom configuration with the useSwitchAccount hook instead of the default from WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSwitchAccount.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSwitchAccount } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSwitchAccount({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package and Action Names in Vue\nDESCRIPTION: This Vue script setup defines constants for the package name, action name, and type name related to the getFeeHistory function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getFeeHistory.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'getFeeHistory'\nconst typeName = 'GetFeeHistory'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useTransaction in Vue\nDESCRIPTION: Import statement for the useTransaction composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransaction } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing Query Key in Vanilla JavaScript\nDESCRIPTION: Shows how to import and use a query key outside of a Vue component, typically in utility functions. This method doesn't handle reactivity automatically.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBalanceQueryOptions } from '@wagmi/vue/query'\nimport { config } from './config'\n\nfunction perform() {\n  const { queryKey } = getBalanceQueryOptions(config, {\n    chainId: config.state.chainId\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: useToken Parameters Type Declaration\nDESCRIPTION: Type import for useToken parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useToken.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseTokenParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Conditional Vue Rendering Block for Infinite Query Options\nDESCRIPTION: A Vue conditional rendering block (v-if directive) that controls whether to display infinite query-specific options in the documentation. This is toggled by the includeInfiniteQueryResult flag.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/query-result.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div v-if=\"includeInfiniteQueryOptions\">\n\n### fetchNextPage\n\n`(options?: FetchNextPageOptions) => Promise<InfiniteQueryObserverResult<{{TData}}, {{TError}}>>`\n\nThis function allows you to fetch the next \"page\" of results.\n\n### fetchPreviousPage\n\n`(options?: FetchPreviousPageOptions) => Promise<InfiniteQueryObserverResult<TData, TError>>`\n\nThis function allows you to fetch the previous \"page\" of results.\n\n### hasNextPage\n\n`boolean`\n\nThis will be `true` if there is a next page to be fetched (known via the `getNextPageParam` option).\n\n### hasPreviousPage\n\n`boolean`\n\nThis will be `true` if there is a previous page to be fetched (known via the `getPreviousPageParam` option).\n\n### isFetchingNextPage\n\n`boolean`\n\nWill be `true` while fetching the next page with `fetchNextPage`.\n\n### isFetchingPreviousPage\n\n`boolean`\n\nWill be `true` while fetching the previous page with `fetchPreviousPage`.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing WatchBlocksParameters Type\nDESCRIPTION: Shows how to import the type definition for the watchBlocks parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchBlocks.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchBlocksParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script Setup for TanStack Query Documentation\nDESCRIPTION: A Vue script setup block defining type variables and configuration options for the TanStack Query documentation. It sets up type placeholders and configuration flags that control which query options are displayed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/query-options.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n<script setup>\nconst TData = 'TData'\nconst TError = 'TError'\nconst TPageParam = number\nconst hideQueryOptions = []\nconst includeInfiniteQueryOptions = false\n</script>\n-->\n```\n\n----------------------------------------\n\nTITLE: Using useTransaction with Transaction Hash\nDESCRIPTION: Example showing how to get a transaction using its hash.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useTransaction } from '@wagmi/vue'\n\nconst result = useTransaction({\n  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5', // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing EstimateFeesPerGasErrorType\nDESCRIPTION: Shows how to import the error type definition for handling errors from the estimateFeesPerGas function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateFeesPerGas.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EstimateFeesPerGasErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseStorageAtParameters Type in TypeScript\nDESCRIPTION: Shows how to import the UseStorageAtParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseStorageAtParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSignTypedDataReturnType\nDESCRIPTION: Shows how to import the UseSignTypedDataReturnType for type checking the return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignTypedData.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSignTypedDataReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing blockExplorer Plugin in TypeScript\nDESCRIPTION: Shows how to import the blockExplorer plugin from the Wagmi CLI plugins.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/blockExplorer.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { blockExplorer } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Simulating Contract Interaction with Max Fee Per Gas in Vue\nDESCRIPTION: This snippet illustrates the use of the useSimulateContract composable with a maxFeePerGas parameter for EIP-1559 transactions. It simulates a transferFrom function call on an ERC20 token contract.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { parseGwei } from 'viem'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  maxFeePerGas: parseGwei('20'), // [!code focus]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Composables List\nDESCRIPTION: Vue script setup block that processes the sidebar navigation to extract and sort composable items alphabetically.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getSidebar } from '../../.vitepress/sidebar'\n\nconst composables = getSidebar()['/vue']\n  .find(x => x.text === 'Composables').items\n  .sort((a, b) => a.text.localeCompare(b.text))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing WatchConnectorsReturnType from @wagmi/core\nDESCRIPTION: Shows how to import the WatchConnectorsReturnType type from the @wagmi/core library, which represents the return type of the watchConnectors function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchConnectors.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchConnectorsReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Name in Vue Setup Script\nDESCRIPTION: Vue script setup block that defines a constant variable for the wagmi package name. Uses the script setup syntax which is part of Vue's Composition API.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/transports/webSocket.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing UseWatchContractEventParameters Type\nDESCRIPTION: Shows how to import the UseWatchContractEventParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchContractEvent.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchContractEventParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing writeContracts from Wagmi Core Experimental Package\nDESCRIPTION: Demonstrates how to import the writeContracts action from @wagmi/core's experimental package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContracts.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeContracts } from '@wagmi/core/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing getToken Function\nDESCRIPTION: Example of importing the getToken function from @wagmi/core.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getToken } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing watchPublicClient in TypeScript\nDESCRIPTION: Shows how to import the watchPublicClient function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPublicClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watchPublicClient } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Import useAccountEffect from wagmi\nDESCRIPTION: This code snippet demonstrates how to import the `useAccountEffect` hook from the `wagmi` library. It is a prerequisite for using the hook in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccountEffect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAccountEffect } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies with Taze\nDESCRIPTION: Commands to manage and update project dependencies using Taze, highlighting outdated dependencies and updating them while ensuring security through additional checks.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\npnpm deps       # prints outdated deps\\npnpm deps patch # print outdated deps with new patch versions\\npnpm deps -w    # updates deps (best done with clean working tree)\n```\n\n----------------------------------------\n\nTITLE: Importing UseWatchPendingTransactionsParameters Type\nDESCRIPTION: Shows how to import the UseWatchPendingTransactionsParameters type for type checking and autocompletion.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchPendingTransactions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchPendingTransactionsParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: useWatchAsset Parameters Type Definition\nDESCRIPTION: Type import for the useWatchAsset hook parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchAsset.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseWatchAssetParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Defining Package and Action Names in Vue\nDESCRIPTION: Sets up constants for the package name, action name, and type name using Vue's script setup.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/disconnect.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'disconnect'\nconst typeName = 'Disconnect'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas with Access List\nDESCRIPTION: Shows how to pass an access list to the `useEstimateGas` hook. The access list can improve transaction efficiency in certain situations by specifying which addresses and their respective storage keys will be accessed.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateGas.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEstimateGas } from 'wagmi'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nfunction App() {\n  const result = useEstimateGas({\n    accessList: [{ // [!code focus]\n      address: '0x1', // [!code focus]\n      storageKeys: ['0x1'], // [!code focus]\n    }], // [!code focus]\n    to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    value: parseEther('0.01'),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry Plugin Project Path in TypeScript\nDESCRIPTION: Demonstrates how to set the Foundry project path in the plugin configuration for Wagmi CLI.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/foundry.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { foundry } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    foundry({\n      project: '../hello_foundry',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionConfirmations with Specific Chain ID\nDESCRIPTION: Demonstrates how to use the getTransactionConfirmations function with a specific chain ID, in this case, the mainnet.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionConfirmations.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTransactionConfirmations } from '@wagmi/core'\nimport { mainnet } from '@wagmi/core/chains'\nimport { config } from './config'\n\nconst transaction = await getTransactionConfirmations(config, {\n  chainId: mainnet.id,\n  hash: '0x0fa64daeae54e207aa98613e308c2ba8abfe274f75507e741508cc4db82c8cb5',\n})\n```\n\n----------------------------------------\n\nTITLE: Type Import for useEnsAvatar Parameters\nDESCRIPTION: Shows how to import the type definition for the parameters of the useEnsAvatar composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAvatar.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseEnsAvatarParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseConnectionsParameters TypeScript Type\nDESCRIPTION: Shows how to import the TypeScript type definition for the parameters of the useConnections composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnections.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectionsParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing WriteContractReturnType from @wagmi/core in TypeScript\nDESCRIPTION: Example of importing the WriteContractReturnType type from @wagmi/core library. This type represents the transaction hash returned from contract write operations.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/writeContract.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WriteContractReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Transport from wagmi\nDESCRIPTION: Example showing how to import the HTTP transport from the wagmi Vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/transports.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseDisconnectParameters Type\nDESCRIPTION: Shows how to import the UseDisconnectParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useDisconnect.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseDisconnectParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useSendTransaction Hook in TypeScript\nDESCRIPTION: Shows how to import the useSendTransaction hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendTransaction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSendTransaction } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Basic Import Example - TypeScript\nDESCRIPTION: Shows how to import the fetch plugin from the Wagmi CLI package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/fetch.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetch } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Importing UseConnectorClientReturnType Type\nDESCRIPTION: Shows how to import the type definition for useConnectorClient return type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectorClientReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Reconnect Return Type Import\nDESCRIPTION: Shows how to import the ReconnectReturnType type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/reconnect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ReconnectReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectorChainMismatchError\nDESCRIPTION: Error class for when the Wagmi Config is not synchronized with the connector's active chain ID\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectorChainMismatchError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing GetClientParameters type from @wagmi/core\nDESCRIPTION: Shows how to import the GetClientParameters type for use with the getPublicClient function.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getPublicClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetClientParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Import UseAccountParameters Type\nDESCRIPTION: Imports the `UseAccountParameters` type from the `wagmi` library. This type is used to define the parameters that can be passed to the `useAccount` hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useAccount.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseAccountParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Reconnect with Specific Connectors\nDESCRIPTION: Example showing reconnect action with explicitly specified connectors parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/reconnect.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reconnect } from '@wagmi/core'\nimport { injected } from '@wagmi/connectors'\nimport { config } from './config'\n\nconst result = await reconnect(config, {\n    connectors: [injected()],\n})\n```\n\n----------------------------------------\n\nTITLE: GetToken Return Type Import\nDESCRIPTION: Import statement for GetToken return type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetTokenReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing CreateStorageParameters Type\nDESCRIPTION: Shows how to import the CreateStorageParameters type from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateStorageParameters } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing WagmiProviderProps Type\nDESCRIPTION: Shows how to import the TypeScript type definition for WagmiProvider props.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/WagmiProvider.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { type WagmiProviderProps } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Enabling MetaMask SDK Logging\nDESCRIPTION: Shows how to enable SDK-side logging for debugging and monitoring RPC methods and events.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/connectors/metaMask.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { metaMask } from '{{connectorsPackageName}}'\n\nconst connector = metaMask({\n  logging: { developerMode: true, sdk: true }\n})\n```\n\n----------------------------------------\n\nTITLE: Return Type Import\nDESCRIPTION: Shows how to import the SwitchChainReturnType type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/switchChain.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SwitchChainReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Defining Package Name in Vue Script Setup\nDESCRIPTION: Defines the packageName constant with the value '@wagmi/core' within a Vue script setup block. This is likely used for reference elsewhere in the application or documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/transports/custom.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: GetToken Error Type Import\nDESCRIPTION: Import statement for GetToken error type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getToken.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetTokenErrorType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration for Wagmi Core\nDESCRIPTION: This code snippet shows how to configure Wagmi Core using the necessary imports and setup. It's referenced by the error handling example as it provides the required configuration object.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/error-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createConfig } from '@wagmi/core'\nimport { mainnet, sepolia } from '@wagmi/core/chains'\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract with Access List\nDESCRIPTION: This example demonstrates how to use the useSimulateContract composable with an access list parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  accessList: [{\n    address: '0x1',\n    storageKeys: ['0x1'],\n  }],\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Migrating activeConnector to connector in Wagmi React Hooks\nDESCRIPTION: The activeConnector property has been removed from useConnect and replaced with connector in useAccount. This snippet shows how to update your code to use the new property from the correct hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n-import { useConnect } from 'wagmi'\n+import { useAccount } from 'wagmi'\n\nfunction App() {\n- const { activeConnector } = useConnect()\n+ const { connector } = useAccount()\n}\n```\n\n----------------------------------------\n\nTITLE: useFeeHistory with scopeKey parameter\nDESCRIPTION: This code demonstrates using the `scopeKey` parameter with the `useFeeHistory` hook. This parameter scopes the cache to a given context, allowing hooks with identical contexts to share the same cache.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useFeeHistory.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFeeHistory } from 'wagmi'\nimport { config } from './config' // [!code focus]\n\nfunction App() {\n  const result = useFeeHistory({\n    blockCount: 4,\n    rewardPercentiles: [25, 75]\n    scopeKey: 'foo', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: GetBlockTransactionCountParameters Type Import\nDESCRIPTION: Import statement for the GetBlockTransactionCountParameters type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockTransactionCount.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBlockTransactionCountParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Updating connect Function Parameter Structure in useConnect\nDESCRIPTION: The connector parameter to connect & connectAsync now has to be provided in a config object parameter shape instead of directly as an argument. This snippet demonstrates the new required format.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\nimport { useConnect } from 'wagmi'\n\nfunction App() {\n  const { connect, connectors } = useConnect()\n\n  return (\n    <button\n-     onClick={() => connect(connectors[0])}\n+     onClick={() => connect({ connector: connectors[0] })}\n    >\n      Connect\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract with Custom Config\nDESCRIPTION: This example shows how to use the useSimulateContract composable with a custom configuration parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { abi } from './abi'\nimport { config } from './config'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f', \n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  config,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: useBalance with unit parameter\nDESCRIPTION: This snippet demonstrates how to use the `useBalance` hook with the deprecated `unit` parameter. The `unit` parameter specifies the units to use when formatting the result.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useBalance.md#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { useBalance } from 'wagmi'\n\nfunction App() {\n  const result = useBalance({\n    address: '0x4557B18E779944BFE9d78A672452331C186a9f48',\n    unit: 'ether', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the fallback Transport in Wagmi\nDESCRIPTION: Shows how to import the fallback Transport from the Wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/fallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fallback } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Key in Vue Component\nDESCRIPTION: Demonstrates how to retrieve a query key from a Wagmi Composable within a Vue component, which handles reactivity automatically.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/guides/tanstack-query.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBalance } from '@wagmi/vue'\n\nconst { data: balance } = useBalance()\n</script>\n\n<template>\n  <div>{{ balance }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Wagmi from Source\nDESCRIPTION: Steps to clone the Wagmi repository, build it locally, and link it globally for development use. This allows testing of the very latest changes before they are released.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone wevm/wagmi\ncd wagmi\npnpm install\npnpm build\ncd packages/{{packageDir}}\npnpm link --global\n```\n\n----------------------------------------\n\nTITLE: Wagmi Generate Help Command\nDESCRIPTION: Displays the help message showing all available options and their usage.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/commands/generate.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwagmi generate --help\n```\n\n----------------------------------------\n\nTITLE: Importing UseBalanceReturnType\nDESCRIPTION: Shows how to import the return type definition for the useBalance composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBalance.md#2025-04-21_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { type UseBalanceReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: useTransaction Return Type Definition\nDESCRIPTION: Type import statement for the useTransaction return type.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useTransaction.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseTransactionReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Configuration\nDESCRIPTION: Initial Vue script setup defining package and action names for documentation.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchContractEvent.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'watchContractEvent'\nconst typeName = 'WatchContractEvent'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Script Setup for Wagmi Documentation\nDESCRIPTION: Sets up constant variables for documentation paths and package names that will be used in the documentation page. These variables define the core package name, connectors package name, and the documentation path.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/connectors/injected.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'core'\nconst packageName = '@wagmi/core'\nconst connectorsPackageName = '@wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Package Name in Vue Component\nDESCRIPTION: This snippet sets up a constant 'packageName' with the value '@wagmi/vue' in a Vue component using the script setup syntax. This is likely used for referencing the Wagmi Vue integration package throughout the component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/utilities/serialize.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Package Name for Wagmi Vue in Vue.js\nDESCRIPTION: This code snippet defines the package name '@wagmi/vue' as a constant. It's likely used for configuration or import purposes in a Vue.js project using the Wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/transports/http.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: ENS Resolution for Contract Interactions\nDESCRIPTION: Shows how to handle ENS names by resolving them to addresses before passing to contract interactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- import { readContract } from '@wagmi/core'\n+ import { fetchEnsAddress, readContract } from '@wagmi/core'\n\n+ const address = await fetchEnsAddress('example.eth')\nconst result = await readContract({\n- addressOrName: 'example.eth',\n+ address,\n  abi: [â€¦] as const,\n  functionName: 'balanceOf',\n  args: ['0xâ€¦'],\n})\n```\n\n----------------------------------------\n\nTITLE: Updating RPC URL Usage Pattern\nDESCRIPTION: Example showing how to migrate usage of RPC URLs to the new format, accessing the first URL in the HTTP array instead of directly accessing the string.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n- const rpcUrl = mainnet.rpcUrls.alchemy\n+ const rpcUrl = mainnet.rpcUrls.alchemy.http[0]\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectorNotFoundError\nDESCRIPTION: Error class for when a connector cannot be found or is not available for use\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectorNotFoundError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain ID in useStorageAt Hook\nDESCRIPTION: Demonstrates how to specify a chain ID when using the useStorageAt hook to retrieve storage data from a specific blockchain network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useStorageAt.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStorageAt } from 'wagmi'\nimport { mainnet } from '@wagmi/core/chains'\n\nfunction App() {\n  const result = useStorageAt({\n    chainId: mainnet.id,\n    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n    slot: '0x0',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useWatchContractEvent in TypeScript\nDESCRIPTION: Shows how to import the useWatchContractEvent hook from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWatchContractEvent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWatchContractEvent } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: useCall with To Parameter\nDESCRIPTION: Illustrates the usage of the `to` parameter within the `useCall` hook to specify the contract address or recipient. The `to` parameter accepts an `Address | undefined` value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useCall.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCall } from 'wagmi'\n\nfunction App() {\n  const result = useCall({\n    account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n    data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Value for Gas Estimation\nDESCRIPTION: Shows how to specify the transaction value in wei when estimating gas requirements.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B', \n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi Package Name in Vue\nDESCRIPTION: A Vue script setup block that declares a constant 'packageName' with the value '@wagmi/core'. This is used to reference the Wagmi core package throughout the application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/transports/fallback.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Limit for Estimation\nDESCRIPTION: Shows how to set a gas limit when estimating gas for a transaction.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEstimateGas.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useEstimateGas } from '@wagmi/vue'\nimport { parseEther, parseGwei } from 'viem'\nimport { config } from './config'\n\nconst result = useEstimateGas({\n  gas: parseGwei('20'),\n  to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n  value: parseEther('0.01'),\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Wagmi and Dependencies via PNPM\nDESCRIPTION: Command to install wagmi library and its required dependencies (viem and @tanstack/react-query) using the pnpm package manager.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add wagmi viem @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Install Anvil for Chain Fork Testing\nDESCRIPTION: Shell command to install Anvil, a tool required for testing with local chain forks, ensuring the local test environment is correctly set up.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\\nfoundryup\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifact Exclusions\nDESCRIPTION: Example showing how to exclude specific artifact files using glob patterns.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/hardhat.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@wagmi/cli'\nimport { hardhat } from '@wagmi/cli/plugins'\n\nexport default defineConfig({\n  plugins: [\n    hardhat({\n      exclude: [\n        'build-info/**',\n        '*.dbg.json',\n      ],\n      project: '../hello_hardhat',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Sidebar Navigation with Vue Script\nDESCRIPTION: A Vue script that fetches and processes the sidebar data to display a sorted list of action items. It finds the 'Actions' section and sorts the items alphabetically.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getSidebar } from '../../.vitepress/sidebar'\n\nconst actions = getSidebar()['/core']\n  .find(x => x.text.includes('Actions')).items\n  .sort((a, b) => a.text.localeCompare(b.text))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Clone Git Repository\nDESCRIPTION: Command to clone the Wagmi repository to the local machine using Git, enabling contributors to work on the project locally.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/wevm/wagmi.git\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useWriteContract\nDESCRIPTION: Example showing how to use a custom configuration with the useWriteContract hook instead of using the nearest WagmiProvider.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useWriteContract.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWriteContract } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useWriteContract({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useConnectorClient in Vue with TypeScript\nDESCRIPTION: Shows how to import the useConnectorClient composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectorClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConnectorClient } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Using useBytecode with Block Tag Parameter\nDESCRIPTION: Demonstrates how to use the useBytecode composable with a specific block tag parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useBytecode.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useBytecode } from '@wagmi/vue'\n\nconst { data: byteCode } = useBytecode({\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n  blockTag: 'safe',\n})\n</script>\n\n<template>\n  Byte Code: {{ byteCode }}\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Chains in TypeScript\nDESCRIPTION: Shows the updated method for importing chains in v2, which now uses the @wagmi/core/chains entrypoint that proxies from viem/chains.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/guides/migrate-from-v1-to-v2.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mainnet, sepolia } from '@wagmi/core/chains'\n```\n\n----------------------------------------\n\nTITLE: Using Chain ID with useConnect Hook in React\nDESCRIPTION: Example showing how to configure useConnect hook with a specific chain ID for connecting to Polygon network.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect, chain } from \"wagmi\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\n\nfunction App() {\n  const connect = useConnect({\n    chainId: chain.polygon.id,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @wagmi/core Dependencies\nDESCRIPTION: Command to install @wagmi/core and its peer dependency viem using pnpm package manager\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/core/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @wagmi/core viem\n```\n\n----------------------------------------\n\nTITLE: Importing getTransactionConfirmations from @wagmi/core\nDESCRIPTION: Shows how to import the getTransactionConfirmations function from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getTransactionConfirmations.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTransactionConfirmations } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseTransactionConfirmationsReturnType\nDESCRIPTION: Shows how to import the UseTransactionConfirmationsReturnType for TypeScript type checking of the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useTransactionConfirmations.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseTransactionConfirmationsReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Defining UseConnectorsReturnType in TypeScript\nDESCRIPTION: Shows the import statement for the UseConnectorsReturnType, which represents the return type of the useConnectors composable.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectors.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseConnectorsReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing UseSendTransactionParameters Type in TypeScript\nDESCRIPTION: Shows how to import the UseSendTransactionParameters type from the wagmi library for use with the useSendTransaction hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSendTransaction.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseSendTransactionParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Clone Git Repository using GitHub CLI\nDESCRIPTION: Command to clone the Wagmi repository using GitHub CLI, an alternative approach for developers using the CLI for GitHub interactions.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/dev/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngh repo clone wevm/wagmi\n```\n\n----------------------------------------\n\nTITLE: Importing UseAccountReturnType\nDESCRIPTION: Shows how to import the TypeScript type for useAccount return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useAccount.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseAccountReturnType } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsAddress in TypeScript\nDESCRIPTION: Shows how to import the useEnsAddress composable from the @wagmi/vue library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useEnsAddress.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEnsAddress } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config with useSignMessage Hook in React\nDESCRIPTION: Illustrates how to use a custom configuration with the useSignMessage hook in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useSignMessage.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignMessage } from 'wagmi'\nimport { config } from './config'\n\nfunction App() {\n  const result = useSignMessage({\n    config,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useDeployContractReturnType in TypeScript\nDESCRIPTION: Shows how to import the type definition for useDeployContractReturnType from the wagmi library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDeployContract.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type useDeployContractReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Using getConnections with wagmi config\nDESCRIPTION: Demonstrates how to use getConnections by passing a wagmi configuration to retrieve active connections.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getConnections.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnections } from '@wagmi/core'\nimport { config } from './config'\n\nconst connections = getConnections(config)\n```\n\n----------------------------------------\n\nTITLE: Using useConnectors in a Vue Component\nDESCRIPTION: Demonstrates how to use the useConnectors composable within a Vue component's setup script.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useConnectors.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useConnectors } from '@wagmi/vue'\n\nconst connectors = useConnectors()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useEnsAddress Return Type\nDESCRIPTION: This snippet shows how to import the type definition for the return value of the useEnsAddress hook.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEnsAddress.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseEnsAddressReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Defining Package and Action Names in Vue\nDESCRIPTION: Sets up constants for package name, action name, and type name in a Vue component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'signMessage'\nconst typeName = 'SignMessage'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup\nDESCRIPTION: Initial Vue component setup defining package and action names\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchPendingTransactions.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'watchPendingTransactions'\nconst typeName = 'WatchPendingTransactions'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup Configuration\nDESCRIPTION: Initial Vue script setup defining package and action name constants.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/readContracts.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = '@wagmi/core'\nconst actionName = 'readContracts'\nconst typeName = 'ReadContracts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing SignMessageParameters Type in TypeScript\nDESCRIPTION: Shows how to import the SignMessageParameters type for type checking and autocompletion.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/signMessage.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SignMessageParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Return Type Import\nDESCRIPTION: Import statement for the EstimateFeesPerGasReturnType type definition.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/estimateMaxPriorityFeePerGas.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type EstimateFeesPerGasReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Name in Wagmi CLI\nDESCRIPTION: Example showing how to set a unique contract name in Wagmi CLI, which is used by plugins to name generated code.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/config/options.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  out: 'src/generated.ts',\n  contracts: [\n    {\n      abi: [â€¦],\n      name: 'MyCoolContract'\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing getBlock Function\nDESCRIPTION: Basic import statement for the getBlock function from @wagmi/core\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlock.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBlock } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing createStorage from Wagmi\nDESCRIPTION: Shows how to import the createStorage function from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/createStorage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing UseVerifyMessageParameters Type\nDESCRIPTION: Import statement for the UseVerifyMessageParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useVerifyMessage.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseVerifyMessageParameters } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing disconnect Action from Wagmi Core\nDESCRIPTION: Shows how to import the disconnect action from the @wagmi/core package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/disconnect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { disconnect } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Variables for Wagmi Documentation\nDESCRIPTION: Sets up essential configuration variables for Wagmi's Vue integration, including the documentation path and the package name reference.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/transports/unstable_connector.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'vue'\nconst packageName = '@wagmi/vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing UseDisconnectReturnType in TypeScript\nDESCRIPTION: Shows how to import the UseDisconnectReturnType for type checking the hook's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useDisconnect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseDisconnectReturnType } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing getBalance from @wagmi/core\nDESCRIPTION: Shows how to import the getBalance function from the @wagmi/core library.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBalance.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBalance } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing useWaitForTransactionReceipt in Vue\nDESCRIPTION: Example of importing the useWaitForTransactionReceipt composable from the @wagmi/vue package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useWaitForTransactionReceipt.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWaitForTransactionReceipt } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: Defining Package Names in Vue\nDESCRIPTION: This snippet defines two constant strings: `packageName` and `connectorsPackageName`. `packageName` is set to 'wagmi', representing the core wagmi package. `connectorsPackageName` is set to 'wagmi/connectors', indicating the location of connector-related code. This allows for easy referencing of these package names throughout the component or application.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/connectors/coinbaseWallet.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst packageName = 'wagmi'\nconst connectorsPackageName = 'wagmi/connectors'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing useShowCallsStatus Hook in TypeScript\nDESCRIPTION: Shows how to import the useShowCallsStatus hook from the wagmi/experimental package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useShowCallsStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useShowCallsStatus } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Importing the usePrepareTransactionRequest Hook - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `usePrepareTransactionRequest` hook from the 'wagmi' package for use in a React component.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/usePrepareTransactionRequest.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrepareTransactionRequest } from 'wagmi'\n```\n\n----------------------------------------\n\nTITLE: Importing WatchAssetReturnType\nDESCRIPTION: Shows how to import the return type definition for the watchAsset action, which is a boolean indicating success.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchAsset.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchAssetReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectorUnavailableReconnectingError\nDESCRIPTION: Error class for when certain connector methods are unavailable during reconnection phase\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/errors.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectorUnavailableReconnectingError } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Importing Actions Plugin in TypeScript\nDESCRIPTION: Shows how to import the actions plugin from the Wagmi CLI package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/cli/api/plugins/actions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { actions } from '@wagmi/cli/plugins'\n```\n\n----------------------------------------\n\nTITLE: Setting Docs Path in Vue Component\nDESCRIPTION: This Vue script sets up a constant 'docsPath' with the value 'react'. This is likely used for documentation routing or configuration purposes.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/guides/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = 'react'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Recklessly Unprepared Mode in useSendTransaction with TypeScript\nDESCRIPTION: Demonstrates how to use useSendTransaction without preparation by setting mode to 'recklesslyUnprepared', maintaining previous functionality.\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/react/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nimport { useSendTransaction } from 'wagmi'\n\nconst { data } = useSendTransaction({\n+ mode: 'recklesslyUnprepared',\n  request: {\n    to: 'moxey.eth',\n    value: parseEther('1'),\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useSimulateContract with Chain ID\nDESCRIPTION: This example demonstrates how to use the useSimulateContract composable with a specific chain ID parameter.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useSimulateContract.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSimulateContract } from '@wagmi/vue'\nimport { mainnet } from 'wagmi/chains'\nimport { abi } from './abi'\n\nconst result = useSimulateContract({\n  abi,\n  address: '0x6b175474e89094c44da98b954eedeac495271d0f', \n  functionName: 'transferFrom',\n  args: [\n    '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n    '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n    123n,\n  ],\n  chainId: mainnet.id,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Transport in wagmi\nDESCRIPTION: How to import the http Transport from the wagmi package.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/shared/transports/http.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http } from '{{packageName}}'\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Script for Transport Navigation\nDESCRIPTION: Vue component setup script that processes the sidebar configuration to extract and sort transport-related navigation items.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/transports.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { getSidebar } from '../../.vitepress/sidebar'\n\nconst transports = getSidebar()['/core']\n  .find(x => x.text.includes('Configuration')).items\n  .find(x => x.text.includes('Transports')).items\n  .sort((a, b) => a.text.localeCompare(b.text))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Script Variables for Wagmi Core Documentation\nDESCRIPTION: A Vue script setup block that defines variables for documentation paths and package names. These variables are likely used for templating or navigation within the Wagmi documentation system.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst docsPath = \"core\"\nconst packageName = '@wagmi/core'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing GetBlockNumberParameters Type\nDESCRIPTION: Shows how to import the type definition for getBlockNumber parameters for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getBlockNumber.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetBlockNumberParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Importing UseClientParameters Type\nDESCRIPTION: Shows how to import the UseClientParameters type for TypeScript type checking.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/vue/api/composables/useClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseClientParameters } from '@wagmi/vue'\n```\n\n----------------------------------------\n\nTITLE: GetChainId Return Type Declaration\nDESCRIPTION: Shows how to import the TypeScript type definition for the getChainId function's return value.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/getChainId.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetChainIdReturnType } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: watchChainId Parameters Type Definition\nDESCRIPTION: Shows the type import for watchChainId parameters.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/actions/watchChainId.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type WatchChainIdParameters } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Using scopeKey Parameter with useEstimateFeesPerGas\nDESCRIPTION: Shows how to use the scopeKey parameter to scope the cache to a specific context.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/hooks/useEstimateFeesPerGas.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { useEstimateFeesPerGas } from 'wagmi'\n\nfunction App() {\n  const result = useEstimateFeesPerGas({\n    scopeKey: 'foo', // [!code focus]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing createConnector from wagmi/core\nDESCRIPTION: Shows how to import the createConnector function from the @wagmi/core package\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/core/api/createConnector.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConnector } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entry Example\nDESCRIPTION: Standard format for documenting version changes with patch number, GitHub PR reference, commit hash and description of changes\nSOURCE: https://github.com/wevm/wagmi/blob/main/packages/connectors/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.7.12\n\n### Patch Changes\n\n- [#4608](https://github.com/wevm/wagmi/pull/4608) [`b59c024b23c69f5459b17390531207cfdf126ce4`](https://github.com/wevm/wagmi/commit/b59c024b23c69f5459b17390531207cfdf126ce4) Thanks [@jxom](https://github.com/jxom)! - Updated `@walletconnect/ethereum-provider`.\n```\n\n----------------------------------------\n\nTITLE: Initializing Constants in Vue 3 Script Setup\nDESCRIPTION: This snippet initializes the constants 'docsPath' and 'packageName' within a Vue 3 setup script. 'docsPath' specifies the documentation path related to React, while 'packageName' indicates the name of the package being utilized, 'wagmi'. There are no external dependencies, and both constants are essential for referencing within the component's template.\nSOURCE: https://github.com/wevm/wagmi/blob/main/site/react/api/createStorage.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script setup>\nconst docsPath = \"react\"\nconst packageName = 'wagmi'\n</script>\n```"
  }
]