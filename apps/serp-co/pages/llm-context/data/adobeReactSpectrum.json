[
  {
    "owner": "adobe",
    "repo": "react-spectrum",
    "content": "TITLE: Implementing Droppable ListBox with React Aria Hooks\nDESCRIPTION: This example demonstrates how to create a droppable ListBox component using React Aria hooks. It includes the implementation of the ListBox container and individual Option items, showcasing the integration of drag and drop functionality with existing listbox behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListBox, useOption} from '@react-aria/listbox';\nimport {useListState} from '@react-stately/list';\nimport {Item} from '@react-stately/collections';\nimport {useFocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport {useDroppableCollectionState} from '@react-stately/dnd';\nimport {useDroppableCollection, useDroppableItem, ListDropTargetDelegate} from '@react-aria/dnd';\nimport {ListKeyboardDelegate} from '@react-aria/selection';\n\nfunction ListBox(props) {\n  // Setup listbox as normal. See the useListBox docs for more details.\n  let state = useListState(props);\n  let ref = React.useRef(null);\n  let {listBoxProps} = useListBox(props, state, ref);\n\n  // Setup react-stately and react-aria hooks for drag and drop.\n  let dropState = useDroppableCollectionState({\n    ...props,\n    // Collection and selection manager come from list state.\n    collection: state.collection,\n    selectionManager: state.selectionManager\n  });\n\n  let {collectionProps} = useDroppableCollection({\n    ...props,\n    // Provide drop targets for keyboard and pointer-based drag and drop.\n    keyboardDelegate: new ListKeyboardDelegate(state.collection, state.disabledKeys, ref),\n    dropTargetDelegate: new ListDropTargetDelegate(state.collection, ref)\n  }, dropState, ref);\n\n  // Merge listbox props and dnd props, and render the items as normal.\n  return (\n    <ul {...mergeProps(listBoxProps, collectionProps)} ref={ref}>\n      {[...state.collection].map((item) => (\n        <Option\n          key={item.key}\n          item={item}\n          state={state}\n          dropState={dropState}\n        />\n      ))}\n    </ul>\n  );\n}\n\nfunction Option({ item, state, dropState }) {\n  // Setup listbox option as normal. See useListBox docs for details.\n  let ref = React.useRef(null);\n  let {optionProps} = useOption({key: item.key}, state, ref);\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  // Register the item as a drop target.\n  let {dropProps, isDropTarget} = useDroppableItem({\n    target: {type: 'item', key: item.key, dropPosition: 'on'}\n  }, dropState, ref);\n\n  // Merge option props and dnd props, and render the item.\n  return (\n    <li\n      {...mergeProps(optionProps, dropProps, focusProps)}\n      ref={ref}\n      // Apply a class when the item is the active drop target.\n      className={`option ${isFocusVisible ? 'focus-visible' : ''} ${isDropTarget ? 'drop-target' : ''}`}\n    >\n      {item.rendered}\n    </li>\n  );\n}\n\n<Draggable>Octopus</Draggable>\n<ListBox aria-label=\"Categories\" selectionMode=\"single\" onItemDrop={e => alert(`Dropped on ${e.target.key}`)}>\n  <Item key=\"animals\">Animals</Item>\n  <Item key=\"people\">People</Item>\n  <Item key=\"plants\">Plants</Item>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Radio Group in React\nDESCRIPTION: This snippet demonstrates how to create a basic radio group component using useRadioGroup and useRadio hooks from @react-aria/radio, along with useRadioGroupState from @react-stately/radio.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRadioGroup, useRadio} from '@react-aria/radio';\nimport {useRadioGroupState} from '@react-stately/radio';\n\nlet RadioContext = React.createContext(null);\n\nfunction RadioGroup(props) {\n  let {children, label, description, errorMessage} = props;\n  let state = useRadioGroupState(props);\n  let {radioGroupProps, labelProps, descriptionProps, errorMessageProps} = useRadioGroup(props, state);\n\n  return (\n    <div {...radioGroupProps}>\n      <span {...labelProps}>{label}</span>\n      <RadioContext.Provider value={state}>\n        {children}\n      </RadioContext.Provider>\n      {description && <div {...descriptionProps} style={{fontSize: 12}}>{description}</div>}\n      {errorMessage && state.isInvalid &&\n        <div {...errorMessageProps} style={{color: 'red', fontSize: 12}}>{errorMessage}</div>\n      }\n    </div>\n  )\n}\n\nfunction Radio(props) {\n  let {children} = props;\n  let state = React.useContext(RadioContext);\n  let ref = React.useRef(null);\n  let {inputProps} = useRadio(props, state, ref);\n\n  return (\n    <label style={{display: 'block'}}>\n      <input {...inputProps} ref={ref} />\n      {children}\n    </label>\n  );\n}\n\n<RadioGroup label=\"Favorite pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Building HSLA Color Picker with React Spectrum in TypeScript\nDESCRIPTION: This example builds an HSLA color picker using four ColorSlider controls mapped to hue, saturation, lightness, and alpha. The component uses React state initialized with a parsed 'hsl' color string, and updates all sliders synchronously on state change. No external dependencies beyond parseColor, ColorSlider, and React are required; input is an initial HSLA color, output is the selected color as updated by user interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSlider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));\\n  return (\\n    <>\\n      <ColorSlider channel=\"hue\" value={color} onChange={setColor} />\\n      <ColorSlider channel=\"saturation\" value={color} onChange={setColor} />\\n      <ColorSlider channel=\"lightness\" value={color} onChange={setColor} />\\n      <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Notifications Popover with React Aria Components and Tailwind CSS\nDESCRIPTION: Creates a complete notifications popover UI component with a bell icon trigger, custom popover styling, animation effects, and notification cards. Uses React Aria Components for accessibility and Tailwind CSS for styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/notifications-popover.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DialogTrigger, Button, Popover, OverlayArrow, Dialog, Link} from 'react-aria-components';\nimport type {PopoverProps} from 'react-aria-components';\nimport BellIcon from '@spectrum-icons/workflow/Bell';\nimport ChatIcon from '@spectrum-icons/workflow/Chat';\n\nfunction PopoverExample() {\n  return (\n    <div className=\"bg-linear-to-r from-orange-400 to-pink-600 p-8 rounded-lg sm:h-[300px] flex items-start justify-center\">\n      <DialogTrigger>\n        <Button aria-label=\"Notifications\" className=\"inline-flex items-center justify-center rounded-md bg-black/20 bg-clip-padding border border-white/20 px-3.5 py-2 font-medium text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75\">\n          <BellIcon size=\"S\" />\n        </Button>\n        <MyPopover>\n          <OverlayArrow>\n            <svg viewBox=\"0 0 12 12\" className=\"block fill-white group-placement-bottom:rotate-180 w-4 h-4\">\n              <path d=\"M0 0L6 6L12 0\" />\n            </svg>\n          </OverlayArrow>\n          <Dialog className=\"p-2 outline-hidden text-gray-700\">\n            <div className=\"flex flex-col\">\n              <Notification avatar=\"https://images.unsplash.com/photo-1569913486515-b74bf7751574?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" name=\"Sonja Balmann\" time=\"2h\" text=\"This looks great! Let's ship it.\" />\n              <Notification avatar=\"https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" name=\"Maia Pettegree\" time=\"4h\" text=\"Can you add a bit more pizzazz?\" />\n              <Notification avatar=\"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80\" name=\"Charles Webb\" time=\"1d\" text=\"Here's a first pass. What do you think?\" />\n            </div>\n          </Dialog>\n        </MyPopover>\n      </DialogTrigger>\n    </div>\n  );\n}\n\nfunction MyPopover(props: PopoverProps) {\n  return (\n    <Popover\n      {...props}\n      className={({isEntering, isExiting}) => `\n        w-[280px] placement-bottom:mt-2 placement-top:mb-2 group rounded-lg drop-shadow-lg ring-1 ring-black/10 bg-white\n        ${isEntering ? 'animate-in fade-in placement-bottom:slide-in-from-top-1 placement-top:slide-in-from-bottom-1 ease-out duration-200' : ''}\n        ${isExiting ? 'animate-out fade-out placement-bottom:slide-out-to-top-1 placement-top:slide-out-to-bottom-1 ease-in duration-150' : ''}\n      `} />\n  );\n}\n\nfunction Notification({avatar, name, time, text}) {\n  return (\n    <Link href=\"#\" className=\"p-2 rounded-lg hover:bg-gray-100 grid grid-cols-[theme(width.5)_1fr_theme(width.4)] gap-x-2 text-[inherit] no-underline outline-hidden focus-visible:ring-2 ring-pink-800\">\n      <img src={avatar} className=\"rounded-full w-5 h-5 row-span-3\" />\n      <div className=\"text-gray-800 font-semibold leading-5\">{name}</div>\n      <div className=\"text-gray-400\"><ChatIcon size=\"XS\" /></div>\n      <div className=\"text-sm text-gray-500 col-span-2\">Commented {time} ago</div>\n      <p className=\"text-sm overflow-hidden text-ellipsis line-clamp-2 mt-1 mb-0 col-span-2\">{text}</p>\n    </Link>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation for ComboBox\nDESCRIPTION: This example shows how to add form validation to a ComboBox, including required field validation and custom error messages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  <ComboBox name=\"animal\" isRequired>\n    <Label>Favorite Animal</Label>\n    <div>\n      <Input />\n      <Button>▼</Button>\n    </div>\n    <FieldError />\n    <Popover>\n      <ListBox>\n        <ListBoxItem>Aardvark</ListBoxItem>\n        <ListBoxItem>Cat</ListBoxItem>\n        <ListBoxItem>Dog</ListBoxItem>\n        <ListBoxItem>Kangaroo</ListBoxItem>\n        <ListBoxItem>Panda</ListBoxItem>\n        <ListBoxItem>Snake</ListBoxItem>\n      </ListBox>\n    </Popover>\n  </ComboBox>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filtering with SearchAutocomplete in React Spectrum\nDESCRIPTION: This example demonstrates how to implement custom filtering logic with the SearchAutocomplete component. It uses the useFilter hook to apply a 'startsWith' filtering strategy instead of the default 'contains' approach.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, email: 'fake@email.com'},\n    {id: 2, email: 'anotherfake@email.com'},\n    {id: 3, email: 'bob@email.com'},\n    {id: 4, email: 'joe@email.com'},\n    {id: 5, email: 'yourEmail@email.com'},\n    {id: 6, email: 'valid@email.com'},\n    {id: 7, email: 'spam@email.com'},\n    {id: 8, email: 'newsletter@email.com'},\n    {id: 9, email: 'subscribe@email.com'}\n  ];\n\n  let [showAll, setShowAll] = React.useState(false);\n  let [filterValue, setFilterValue] = React.useState('');\n  let {startsWith} = useFilter({sensitivity: 'base'});\n  let filteredItems = React.useMemo(() => options.filter(item => startsWith(item.email, filterValue)), [options, filterValue]);\n\n  return (\n    <SearchAutocomplete\n      onOpenChange={(isOpen, menuTrigger) => {\n        // Show all items if menu is opened manually\n        // i.e. by the arrow keys or trigger button\n        if (menuTrigger === 'manual' && isOpen) {\n          setShowAll(true);\n        }\n      }}\n      width=\"size-3000\"\n      label=\"Search Email Addresses\"\n      items={showAll ? options : filteredItems}\n      inputValue={filterValue}\n      onInputChange={(value) => {\n        setShowAll(false);\n        setFilterValue(value);\n      }}>\n      {item => <Item>{item.email}</Item>}\n    </SearchAutocomplete>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping ComboBox Items by Section - React Spectrum - TypeScript\nDESCRIPTION: This code shows how to use <ListBoxSection> and <Header> components from react-aria-components to group ComboBox options by category, such as 'Fruit' and 'Vegetable'. All items and headers are statically defined, illustrating accessible grouping. Required dependencies are React, react-aria-components, and the ComboBox implementation. Inputs are statically-written list items; output is a ComboBox UI with labeled sections. Extensible for further grouping needs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\nimport {ListBoxSection, Header} from 'react-aria-components';\n\n<MyComboBox label=\"Preferred fruit or vegetable\">\n  <ListBoxSection>\n    <Header>Fruit</Header>\n    <ListBoxItem id=\"Apple\">Apple</ListBoxItem>\n    <ListBoxItem id=\"Banana\">Banana</ListBoxItem>\n    <ListBoxItem id=\"Orange\">Orange</ListBoxItem>\n    <ListBoxItem id=\"Honeydew\">Honeydew</ListBoxItem>\n    <ListBoxItem id=\"Grapes\">Grapes</ListBoxItem>\n    <ListBoxItem id=\"Watermelon\">Watermelon</ListBoxItem>\n    <ListBoxItem id=\"Cantaloupe\">Cantaloupe</ListBoxItem>\n    <ListBoxItem id=\"Pear\">Pear</ListBoxItem>\n  </ListBoxSection>\n  <ListBoxSection>\n    <Header>Vegetable</Header>\n    <ListBoxItem id=\"Cabbage\">Cabbage</ListBoxItem>\n    <ListBoxItem id=\"Broccoli\">Broccoli</ListBoxItem>\n    <ListBoxItem id=\"Carrots\">Carrots</ListBoxItem>\n    <ListBoxItem id=\"Lettuce\">Lettuce</ListBoxItem>\n    <ListBoxItem id=\"Spinach\">Spinach</ListBoxItem>\n    <ListBoxItem id=\"Bok Choy\">Bok Choy</ListBoxItem>\n    <ListBoxItem id=\"Cauliflower\">Cauliflower</ListBoxItem>\n    <ListBoxItem id=\"Potatoes\">Potatoes</ListBoxItem>\n  </ListBoxSection>\n</MyComboBox>\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Heading Component with Context\nDESCRIPTION: Example of creating a custom heading component that works with React Aria Components using HeadingContext\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {HeadingProps} from 'react-aria-components';\nimport {HeadingContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomHeading = React.forwardRef((props: HeadingProps, ref: React.ForwardedRef<HTMLHeadingElement>) => {\n  [props, ref] = useContextProps(props, ref, HeadingContext);\n\n  return <h2 {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Tooltip Component Wrapper in React (TypeScript/TSX)\nDESCRIPTION: Defines a custom MyTooltip wrapper component which encapsulates the Tooltip, OverlayArrow, and content for reuse. Dependencies include react-aria-components and React. The MyTooltipProps interface extends TooltipProps while requiring children for content. This wrapper improves maintainability by centralizing tooltip structure and default behavior. Demo usage shows integration with TooltipTrigger and Button for consistent tooltips across an app.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TooltipProps} from 'react-aria-components';\\n\\ninterface MyTooltipProps extends Omit<TooltipProps, 'children'> {\\n  children: React.ReactNode\\n}\\n\\nfunction MyTooltip({children, ...props}: MyTooltipProps) {\\n  return (\\n    <Tooltip {...props}>\\n      <OverlayArrow>\\n        <svg width={8} height={8} viewBox=\\\"0 0 8 8\\\"><path d=\\\"M0 0 L4 4 L8 0\\\" /></svg>\\n      </OverlayArrow>\\n      {children}\\n    </Tooltip>\\n  );\\n}\\n\\n<TooltipTrigger>\\n  <Button>\\uD83D\\uDCBE</Button>\\n  <MyTooltip>Save</MyTooltip>\\n</TooltipTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Granularity and Placeholder Values in DateRangePicker without Default Values (TypeScript/React)\nDESCRIPTION: This snippet demonstrates using the granularity and placeholderValue props when rendering the DateRangePicker without an explicit value or defaultValue prop. If a placeholderValue is supplied (such as now for a selected time zone), emitted values take its time zone into account. Dependency: @internationalized/date. Inputs: none or placeholderValue; output: range based on user input and configured granularity.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {now} from '@internationalized/date';\\n\\n<DateRangePicker\\n  label=\\\"Date range\\\"\\n  granularity=\\\"second\\\" />\\n<DateRangePicker\\n  label=\\\"Date range\\\"\\n  placeholderValue={now('America/New_York')}\\n  granularity=\\\"second\\\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Field Validation with FieldError in React Aria DatePicker\nDESCRIPTION: This TSX snippet demonstrates basic form validation using React Aria Components. A `DatePicker` inside a `Form` is marked with the `isRequired` prop. A `FieldError` component is included within the `DatePicker` structure to automatically display validation error messages when the required field is left empty. The example shows the necessary structure using `Label`, `Group`, `DateInput`, `Popover`, `Dialog`, `Calendar`, etc.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <DatePicker name=\"date\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Appointment date</Label>\n    <Group>\n      <DateInput>\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      <Button>▼</Button>\n    </Group>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n    <Popover>\n      <Dialog>\n        <Calendar>\n          <header>\n            <Button slot=\"previous\">◀</Button>\n            <Heading />\n            <Button slot=\"next\">▶</Button>\n          </header>\n          <CalendarGrid>\n            {date => <CalendarCell date={date} />}\n          </CalendarGrid>\n        </Calendar>\n      </Dialog>\n    </Popover>\n  </DatePicker>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling entire Select component via isDisabled prop - React Spectrum - TypeScript\nDESCRIPTION: Shows how to disable the entire Select component by passing the isDisabled prop, making all contained ListBoxItems inaccessible and visually distinct. No external dependencies beyond Select and ListBoxItem components. Inputs are static options; output is a disabled select UI per the prop. Constraint: All options are disabled, not selectable or focusable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<MySelect label=\\\"Choose frequency\\\" isDisabled>\\n  <ListBoxItem id=\\\"rarely\\\">Rarely</ListBoxItem>\\n  <ListBoxItem id=\\\"sometimes\\\">Sometimes</ListBoxItem>\\n  <ListBoxItem id=\\\"always\\\">Always</ListBoxItem>\\n</MySelect>\\n\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Async Lists with useAsyncList and Picker in React Spectrum (TypeScript)\nDESCRIPTION: Demonstrates using useAsyncList to asynchronously fetch items from the Pokemon API and render them in a Picker component. The load function utilizes the fetch API and propagates an abort signal while the returned state drives item display and loading indicators. Requires React Spectrum's useAsyncList and Picker components; key parameters include the async load function and the list object returned by the hook. The input is API response data, and the output is a rendered Picker UI bound to fetched items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useAsyncList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useAsyncList({\n  async load({signal}) {\n    let res = await fetch('https://pokeapi.co/api/v2/pokemon', {signal});\n    let json = await res.json();\n    return {items: json.results};\n  }\n});\n\n<Picker\n  label=\"Pick a Pokemon\"\n  items={list.items}\n  isLoading={list.isLoading}>\n  {item => <Item key={item.name}>{item.name}</Item>}\n</Picker>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic ToggleButtonGroup with React Aria (TypeScript/JSX)\nDESCRIPTION: Demonstrates initializing a basic ToggleButtonGroup with three ToggleButton items using the React Aria library. Requires installation of 'react-aria-components'. Each ToggleButton declares an id and label. The ToggleButtonGroup manages selection, and is accessible by default. Input is React elements; output is the rendered button group with managed state. Make sure to import the correct components and wrap in a React environment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ToggleButtonGroup, ToggleButton} from 'react-aria-components';\n\n<ToggleButtonGroup>\n  <ToggleButton id=\"left\">Left</ToggleButton>\n  <ToggleButton id=\"center\">Center</ToggleButton>\n  <ToggleButton id=\"right\">Right</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting up a basic React Spectrum application\nDESCRIPTION: This example demonstrates how to set up a basic React Spectrum application using the Provider component and a Button. It shows how to import necessary components, apply a theme, and create a simple interactive button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider} from '@react-spectrum/provider';\nimport {theme} from '@react-spectrum/theme-default';\nimport {Button} from '@react-spectrum/button';\n\nfunction App() {\n  return (\n    <Provider theme={theme}>\n      <Button\n        variant=\"accent\"\n        onPress={() => alert('Hey there!')}>\n        Hello React Spectrum!\n      </Button>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Accessible Toolbar with useToolbar (React/TypeScript)\nDESCRIPTION: This snippet demonstrates how to implement a flexible toolbar component in React using the useToolbar hook from @react-aria/toolbar. The toolbar supports ARIA roles, keyboard navigation, and reference forwarding via useRef, and expects an aria-label or aria-labelledby prop. It is composed to contain interactive child components, such as custom Buttons. Dependencies include React, @react-aria/toolbar, and your component library for interactive children. The expected input is props with accessibility labels and children; output is a toolbar container supporting assistive technology and keyboard navigation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toolbar/docs/useToolbar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useToolbar} from '@react-aria/toolbar';\\nimport {useRef} from 'react';\\n\\n// Reuse the Button from your component library. See below for details.\\nimport {Button} from 'your-component-library';\\n\\nfunction Toolbar(props) {\\n  let ref = useRef<HTMLDivElement | null>(null);\\n  // Get props for the toolbar element\\n  let {toolbarProps} = useToolbar(props, ref);\\n\\n  return (\\n    <div {...toolbarProps} ref={ref}>\\n      {props.children}\\n    </div>\\n  );\\n}\\n\\n<Toolbar aria-label=\"Actions\">\\n  <Button>Copy</Button>\\n  <Button>Cut</Button>\\n  <Button>Paste</Button>\\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Items in ActionBar with React Spectrum\nDESCRIPTION: This example demonstrates how to disable specific items in an ActionBar using the disabledKeys property. It shows a complete implementation with a ListView for selection and an ActionBar with disabled actions. The example uses the 'edit' action as the disabled item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actionbar/docs/ActionBar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['photoshop']));\n\n  return (\n    <ActionBarContainer height={300} width=\"size-5000\">\n      <ListView aria-label=\"ListView with action bar\" selectionMode=\"multiple\" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        /*- begin highlight -*/\n        disabledKeys={['edit']}\n        /*- end highlight -*/\n        isEmphasized={true}\n        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}\n        onAction={(key) => alert(`Performing ${key} action...`)}\n        onClearSelection={() => setSelectedKeys(new Set())}>\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"copy\">\n          <Copy />\n          <Text>Copy</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Example />\n```\n\n----------------------------------------\n\nTITLE: Importing React Aria Components and Assets\nDESCRIPTION: Imports various components from React Aria Components, documentation utilities, and assets needed for the example. Sets up the example layout and metadata for the user search ComboBox component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/user-combobox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {ExampleLayout} from '@react-spectrum/docs';\nexport default ExampleLayout;\n\nimport docs from 'docs:react-aria-components';\nimport {TypeLink} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport ComboBox from '@react-spectrum/docs/pages/assets/component-illustrations/ComboBox.svg';\nimport Button from '@react-spectrum/docs/pages/assets/component-illustrations/ActionButton.svg';\nimport Popover from '@react-spectrum/docs/pages/assets/component-illustrations/Popover.svg';\nimport ListBox from '@react-spectrum/docs/pages/assets/component-illustrations/ListBox.svg';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\n```\n\n----------------------------------------\n\nTITLE: Styling Tabs Component with CSS\nDESCRIPTION: Provides CSS styles for the Tabs component, including styles for TabList, Tab, and TabPanel. The styles cover various states like hover, focus, selected, and disabled, as well as layout and orientation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Tabs {\n  display: flex;\n  color: var(--text-color);\n\n  &[data-orientation=horizontal] {\n    flex-direction: column;\n  }\n}\n\n.react-aria-TabList {\n  display: flex;\n\n  &[data-orientation=horizontal] {\n    border-bottom: 1px solid var(--border-color);\n\n    .react-aria-Tab {\n      border-bottom: 3px solid var(--border-color);\n    }\n  }\n}\n\n.react-aria-Tab {\n  padding: 10px;\n  cursor: default;\n  outline: none;\n  position: relative;\n  color: var(--text-color-base);\n  transition: color 200ms;\n  --border-color: transparent;\n  forced-color-adjust: none;\n\n  &[data-hovered],\n  &[data-focused] {\n    color: var(--text-color-hover);\n  }\n\n  &[data-selected] {\n    --border-color: var(--highlight-background);\n    color: var(--text-color);\n  }\n\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n    &[data-selected] {\n      --border-color: var(--text-color-disabled);\n    }\n  }\n\n  &[data-focus-visible]:after {\n    content: '';\n    position: absolute;\n    inset: 4px;\n    border-radius: 4px;\n    border: 2px solid var(--focus-ring-color);\n  }\n}\n\n.react-aria-TabPanel {\n  margin-top: 4px;\n  padding: 10px;\n  border-radius: 4px;\n  outline: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Drag and Drop Between ListViews (TSX)\nDESCRIPTION: Defines two React components: `BidirectionalDnDListView` and `DragBetweenListsExample`. `BidirectionalDnDListView` is a reusable component that takes a list managed by `useListData` and configures drag and drop using `useDragAndDrop`. It supports internal reordering (`onReorder`), inserting items from another list (`onInsert`, `onRootDrop`), and removing items when moved to another list (`onDragEnd`). `DragBetweenListsExample` sets up two instances of `BidirectionalDnDListView` with separate data, allowing items to be dragged between them. It uses a custom drag type 'custom-app-type-bidirectional' and restricts drops to 'move' operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true render=false\nfunction BidirectionalDnDListView(props: DndListViewProps) {\n  let {list} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-bidirectional'],\n    // Only allow move operations\n    getAllowedDropOperations: () => ['move'],\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-bidirectional': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-bidirectional')))\n      );\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onReorder: async (e) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async item => JSON.parse(await (item as TextDropItem).getText('custom-app-type-bidirectional')))\n      );\n      list.append(...processedItems);\n    },\n    /*- begin highlight -*/\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys,\n        isInternal\n      } = e;\n      // Only remove the dragged items if they aren't dropped inside the source list\n      if (dropOperation === 'move' && !isInternal) {\n        list.remove(...keys);\n      }\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <ListView\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}>\n      {item => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragBetweenListsExample() {\n  let list1 = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop'},\n      {id: '2', type: 'file', name: 'Adobe XD'},\n      {id: '3', type: 'folder', name: 'Documents'},\n      {id: '4', type: 'file', name: 'Adobe InDesign'},\n      {id: '5', type: 'folder', name: 'Utilities'},\n      {id: '6', type: 'file', name: 'Adobe AfterEffects'}\n    ]\n  });\n\n  let list2 = useListData({\n    initialItems: [\n      {id: '7', type: 'folder', name: 'Pictures'},\n      {id: '8', type: 'file', name: 'Adobe Fresco'},\n      {id: '9', type: 'folder', name: 'Apps'},\n      {id: '10', type: 'file', name: 'Adobe Illustrator'},\n      {id: '11', type: 'file', name: 'Adobe Lightroom'},\n      {id: '12', type: 'file', name: 'Adobe Dreamweaver'}\n    ]\n  });\n\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <BidirectionalDnDListView list={list1} aria-label=\"First ListView in drag between list example\" />\n      <BidirectionalDnDListView list={list2} aria-label=\"Second ListView in drag between list example\" />\n    </Flex>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Replace Selection Behavior - React Spectrum - TypeScript/JSX\nDESCRIPTION: Illustrates switching the selectionBehavior prop to 'replace', so that clicking a row replaces all previous selections with the currently focused row. Modifier keys may be used to select multiple. This demonstrates how to customize selection logic to fit different UI needs using React Spectrum's List-based components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n<PokemonList aria-label=\"List with replace selection behavior\" selectionMode=\"multiple\" selectionBehavior=\"replace\" />\n```\n\n----------------------------------------\n\nTITLE: Building a Single-Thumb Slider with React Aria Hooks (TypeScript)\nDESCRIPTION: This snippet implements a single-thumb slider component in React using @react-aria/slider, @react-stately/slider, and related hooks. It manages state and formatting, wires accessibility props, and features a thumb that is keyboard and screen-reader accessible. Dependencies include @react-aria/slider, @react-stately/slider, @react-aria/focus, @react-aria/visually-hidden, @react-aria/utils, and @react-aria/i18n. The 'Slider' component accepts props such as label, formatOptions, and name, expects string/numeric min/max/step values, and emits the current value through an output. Limitations include reliance on external CSS for visuals and React refs for dom focus management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useSlider, useSliderThumb} from '@react-aria/slider';\\nimport {useSliderState} from '@react-stately/slider';\\nimport {useFocusRing} from '@react-aria/focus';\\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\\nimport {mergeProps} from '@react-aria/utils';\\nimport {useNumberFormatter} from '@react-aria/i18n';\\n\\nfunction Slider(props) {\\n  let trackRef = React.useRef(null);\\n  let numberFormatter = useNumberFormatter(props.formatOptions);\\n  let state = useSliderState({...props, numberFormatter});\\n  let {\\n    groupProps,\\n    trackProps,\\n    labelProps,\\n    outputProps\\n  } = useSlider(props, state, trackRef);\\n\\n  return (\\n    <div {...groupProps} className={`slider ${state.orientation}`}>\\n      {/* Create a container for the label and output element. */}\\n      {props.label &&\\n        <div className=\"label-container\">\\n          <label {...labelProps}>{props.label}</label>\\n          <output {...outputProps}>\\n            {state.getThumbValueLabel(0)}\\n          </output>\\n        </div>\\n      }\\n      {/* The track element holds the visible track line and the thumb. */}\\n      <div {...trackProps} ref={trackRef} className={`track ${state.isDisabled ? 'disabled' : ''}`}>\\n        <Thumb index={0} state={state} trackRef={trackRef} name={props.name} />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction Thumb(props) {\\n  let {state, trackRef, index, name} = props;\\n  let inputRef = React.useRef(null);\\n  let {thumbProps, inputProps, isDragging} = useSliderThumb({\\n    index,\\n    trackRef,\\n    inputRef,\\n    name\\n  }, state);\\n\\n  let {focusProps, isFocusVisible} = useFocusRing();\\n  return (\\n    <div\\n      {...thumbProps}\\n      className={`thumb ${isFocusVisible ? 'focus' : ''} ${isDragging ? 'dragging' : ''}`}>\\n      <VisuallyHidden>\\n        <input ref={inputRef} {...mergeProps(inputProps, focusProps)} />\\n      </VisuallyHidden>\\n    </div>\\n  );\\n}\\n\\n<Slider label=\"Opacity\" />\n```\n\n----------------------------------------\n\nTITLE: Managing Uncontrolled and Controlled DatePicker Values (TypeScript/TSX)\nDESCRIPTION: Demonstrates usage of MyDatePicker with both uncontrolled (defaultValue) and controlled (value + onChange) approaches using React useState. Relies on @internationalized/date for robust date parsing and supports both approaches for flexible state management in TypeScript React apps. Inputs include date strings, parsed into CalendarDate values; outputs are form fields handling date selection in either local or parent-controlled state. Implementation assumes proper configuration of MyDatePicker as a controlled component and the ability to parse/format date values as required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <>\n      <MyDatePicker\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <MyDatePicker\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text and Error Messages to DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Demonstrates DatePicker components within a Flex layout where one displays a description and validation state, and the other shows an error message for invalid input. Utilizes validationState, description, and errorMessage props. Requires Flex from React Spectrum, and can be extended for real forms. Displays both valid and invalid states side by side.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_21\n\nLANGUAGE: TSX\nCODE:\n```\n<Flex gap=\\\"size-100\\\" wrap>\\n  <DatePicker label=\\\"Date\\\" defaultValue={today(getLocalTimeZone())} validationState=\\\"valid\\\" description=\\\"Select a meeting date.\\\" />\\n  <DatePicker label=\\\"Date\\\" validationState=\\\"invalid\\\" errorMessage=\\\"Empty input is not allowed.\\\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Time Validation in React Spectrum\nDESCRIPTION: Shows how to create custom validation logic for TimeField to ensure selected times are on 15-minute increments.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TimeField\n    label=\"Meeting time\"\n    validate={time => time?.minute % 15 !== 0 ? 'Meetings start every 15 minutes.' : null}\n    defaultValue={new Time(9, 25)} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Primary Variant Buttons with Fill and Outline Styles in Spectrum (TypeScript)\nDESCRIPTION: This snippet demonstrates Spectrum's primary button styles, including both 'fill' and 'outline' options, using the Flex layout for arrangement. The example reinforces how to switch between visual variants for consistency with design requirements. Requires '@react-spectrum/button' and '@react-spectrum/layout'. Key props are 'variant' ('primary') and 'style' ('fill'/'outline').\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\\\"size-250\\\">\\n  <Button variant=\\\"primary\\\" style=\\\"fill\\\">Save</Button>\\n  <Button variant=\\\"primary\\\" style=\\\"outline\\\">Save</Button>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Composing a Select Component with React Aria Components in TypeScript\nDESCRIPTION: This React/TypeScript code snippet demonstrates rendering an accessible Select dropdown using unstyled React Aria Components. Key components include Select, SelectValue, Label, Button, Popover, ListBox, and ListBoxItem, imported from 'react-aria-components'. Components can be customized or styled externally. The Select displays a label, a button opening the popover, and a list of items to choose from. Dependencies: react-aria-components, React, and a build pipeline supporting JSX/TSX.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Select, SelectValue, Label, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';\\n\\n<Select>\\n  <Label>Favorite Animal</Label>\\n  <Button>\\n    <SelectValue />\\n    <span aria-hidden=\\\"true\\\">▼</span>\\n  </Button>\\n  <Popover>\\n    <ListBox>\\n      <ListBoxItem>Cat</ListBoxItem>\\n      <ListBoxItem>Dog</ListBoxItem>\\n      <ListBoxItem>Kangaroo</ListBoxItem>\\n    </ListBox>\\n  </Popover>\\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom TextField with useTextField in React (TypeScript)\nDESCRIPTION: Demonstrates creating a custom TextField component leveraging the useTextField hook from @react-aria/textfield for building accessible input fields. Dependencies include React, TypeScript, @react-aria/textfield, and prop types conforming to AriaTextFieldProps. The key parameters are 'label', 'description', and error handling features; the code shows returning proper props objects for label, input, description, and error elements. Input and output are through component props and user interaction. Limitations: requires correct props and ref management, assumes React functional component conventions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport type {AriaTextFieldProps} from '@react-aria/textfield';\\nimport {useTextField} from '@react-aria/textfield';\\n\\nfunction TextField(props: AriaTextFieldProps) {\\n  let {label} = props;\\n  let ref = React.useRef(null);\\n  let {labelProps, inputProps, descriptionProps, errorMessageProps, isInvalid, validationErrors} = useTextField(props, ref);\\n\\n  return (\\n    <div style={{display: 'flex', flexDirection: 'column', width: 200}}>\\n      <label {...labelProps}>{label}</label>\\n      <input {...inputProps} ref={ref} />\\n      {props.description && <div {...descriptionProps} style={{fontSize: 12}}>{props.description}</div>}\\n      {isInvalid && <div {...errorMessageProps} style={{color: 'red', fontSize: 12}}>{validationErrors.join(' ')}</div>}\\n    </div>\\n  );\\n}\\n\\n<TextField label=\"Email\" />\n```\n\n----------------------------------------\n\nTITLE: Styling TagGroup Description and Error Message Text using CSS\nDESCRIPTION: Provides CSS rules for styling the description and error message text elements within a `.react-aria-TagGroup`. It targets elements with `slot=\"description\"` and `slot=\"errorMessage\"` attributes, setting a common font size and applying a distinct color (using `--invalid-color` variable) to the error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-TagGroup {\n  [slot=description] {\n    font-size: 12px;\n  }\n\n  [slot=errorMessage] {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Managing Controlled Color Picker State with React Spectrum (TypeScript)\nDESCRIPTION: This snippet shows how to maintain a controlled color value using React's useState hook and the parseColor utility from react-aria-components. It sets an initial HSL color string, ensures consistent color value types, and updates the color using the ColorPicker's onChange event. Requires react, react-aria-components, and a MyColorPicker component that accepts label, value, and onChange props. Input is an HSL string, and output is a controlled picker synchronized with local state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\\n\\nfunction Example() {\\n  let [value, setValue] = React.useState(parseColor('hsl(25, 100%, 50%)'));\\n  return (\\n    <MyColorPicker\\n      label=\\\"Color\\\"\\n      value={value}\\n      onChange={setValue} />\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms and Handling Validation Errors with React Server Actions in Next.js - TypeScript/TSX\nDESCRIPTION: Provides an example for handling form submission and error state using React Server Actions and the useFormState hook in a Next.js app. The AddForm component passes server-returned errors directly to the validationErrors prop, while createTodo implements asynchronous action handling and returns errors in the expected format. Dependencies include react-dom's useFormState and @adobe/react-spectrum components, requiring server-side logic for mutation or validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\n// app/add-form.tsx\n'use client';\n\nimport {useFormState} from 'react-dom';\nimport {Form, TextField, ActionButton} from '@adobe/react-spectrum';\nimport {createTodo} from '@/app/actions';\n\nexport function AddForm() {\n  /*- begin highlight -*/\n  let [{errors}, formAction] = useFormState(createTodo, {errors: {}});\n  /*- end highlight -*/\n\n  return (\n    /*- begin highlight -*/\n    <Form action={formAction} validationErrors={errors}>\n    {/*- end highlight -*/}\n      <TextField label=\"Task\" name=\"todo\" />\n      <ActionButton type=\"submit\">Add</ActionButton>\n    </Form>\n  );\n}\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// app/actions.ts\n'use server';\n\nexport async function createTodo(prevState: any, formData: FormData) {\n  try {\n    // Create the todo...\n  } catch (err) {\n    return {\n      errors: {\n        /*- begin highlight -*/\n        todo: 'Invalid todo.'\n        /*- end highlight -*/\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Component CSS Layers for Select Appearance - CSS\nDESCRIPTION: This CSS snippet imports modular CSS for different core components that make up the Select, such as ListBox, Popover, Button, and Form. All referenced files are expected to define CSS layers for composable styling. Ensure the appropriate build setup is in place for handling CSS imports and layering. This import block does not style directly but composes base component styles for further customization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@import './ListBox.mdx' layer(listbox);\\n@import './Popover.mdx' layer(popover);\\n@import './Button.mdx' layer(button);\\n@import './Form.mdx' layer(form);\n```\n\n----------------------------------------\n\nTITLE: Composing a Custom Select Component - React Aria - TypeScript\nDESCRIPTION: This snippet demonstrates how to compose an accessible select dropdown using React Aria's component primitives. Dependencies include 'react-aria-components', and the key parameters are the nested components like Select, Label, Button, SelectValue, Popover, ListBox, and ListBoxItem. The component expects a list of selectable items and proper label structure; its output is a visually customized, keyboard-accessible select element. Limitations include the need for custom styling and potential integration with a broader theme.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Select, SelectValue, Label, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';\\n\\n<Select>\\n  <Label>Favorite Animal</Label>\\n  <Button>\\n    <SelectValue />\\n    <span aria-hidden=\\\"true\\\">▼</span>\\n  </Button>\\n  <Popover>\\n    <ListBox>\\n      <ListBoxItem>Aardvark</ListBoxItem>\\n      <ListBoxItem>Cat</ListBoxItem>\\n      <ListBoxItem>Dog</ListBoxItem>\\n      <ListBoxItem>Kangaroo</ListBoxItem>\\n      <ListBoxItem>Panda</ListBoxItem>\\n      <ListBoxItem>Snake</ListBoxItem>\\n    </ListBox>\\n  </Popover>\\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Implementing File System Tree Component with Tailwind CSS\nDESCRIPTION: Creates a file system tree component with multiple selection and custom styling using Tailwind CSS. The component uses recursive rendering to handle nested items and includes proper accessibility attributes and visuals for item states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/file-system.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Button, Collection, Tree, TreeItem, TreeItemContent} from 'react-aria-components';\nimport ChevronIcon from '@spectrum-icons/ui/ChevronRightMedium';\n\nfunction FileSystemExample() {\n  return (\n    <div className=\"bg-linear-to-r from-indigo-500 to-violet-500 p-8 rounded-lg flex items-center justify-center\">\n      <Tree aria-label=\"File system\" selectionMode=\"multiple\" selectionBehavior=\"replace\" items={filesystem} defaultExpandedKeys={['documents']} className={`\n        border-separate border-spacing-0 w-60 h-100 bg-slate-900\n        overflow-auto rounded-lg shadow-lg`}>\n          {function renderItem(item) {\n            return (\n              <TreeItem\n                textValue={item.name}\n                className={`selected:bg-slate-500 text-white\n                  cursor-default group outline-hidden focus-visible:outline focus-visible:outline-2\n                  focus-visible:outline-slate-600 focus-visible:-outline-offset-4\n                  selected:focus-visible:outline-white`}>\n                <TreeItemContent>\n                  {({hasChildItems}) => (\n                    <div className=\"flex items-center space-x-2 py-2 ps-[calc(calc(var(--tree-item-level)_-_1)_*_calc(var(--spacing)_*_3))]\">\n                      {hasChildItems ? <Button slot=\"chevron\" className={`shrink-0 w-8 h-8\n                        group-data-[expanded=true]:rotate-90 transition-rotate duration-200\n                        inline-flex items-center justify-center bg-transparent border-0 me-0\n                        cursor-default outline-hidden text-white`}><ChevronIcon /></Button> : <div className=\"shrink-0 w-8 h-8\" />}\n                      <div>{item.name}</div>\n                    </div>\n                  )}\n                </TreeItemContent>\n                <Collection items={item.children}>\n                  {renderItem}\n                </Collection>\n              </TreeItem>\n            )\n          }}\n        </Tree>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TableView Components and Dependencies - React Spectrum (JSX)\nDESCRIPTION: Imports the ActionButton, Add icon, and the key TableView elements from React Spectrum. Also pulls in the Flex layout component. These imports are essential prerequisites for constructing a Spectrum-styled table. Each imported package provides UI elements or layouts for building consistent, accessible UI tables.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionButton} from '@react-spectrum/button';\nimport Add from '@spectrum-icons/workflow/Add';\nimport {Cell, Column, Row, TableView, TableBody, TableHeader} from '@react-spectrum/table';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Items in ComboBox with Icons and Descriptions\nDESCRIPTION: This example demonstrates how to create rich ComboBox items with icons, primary text, and descriptions. It shows how to use the slot prop to distinguish between different text elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox label=\"Select action\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>Add to queue</Text>\n    <Text slot=\"description\">Add to current watch queue.</Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>Add review</Text>\n    <Text slot=\"description\">Post a review for the episode.</Text>\n  </Item>\n    <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>Subscribe to series</Text>\n    <Text slot=\"description\">Add series to your subscription list and be notified when a new episode airs.</Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">Report an issue/violation.</Text>\n  </Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Implementation in React Aria Components\nDESCRIPTION: Demonstrates a simple menu implementation using MenuTrigger, Button, Popover, Menu, and MenuItem components. The menu displays multiple action options that trigger alerts when selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem} from 'react-aria-components';\n\n<MenuTrigger>\n  <Button aria-label=\"Menu\">☰</Button>\n  <Popover>\n    <Menu>\n      <MenuItem onAction={() => alert('open')}>Open</MenuItem>\n      <MenuItem onAction={() => alert('rename')}>Rename…</MenuItem>\n      <MenuItem onAction={() => alert('duplicate')}>Duplicate</MenuItem>\n      <MenuItem onAction={() => alert('share')}>Share…</MenuItem>\n      <MenuItem onAction={() => alert('delete')}>Delete…</MenuItem>\n    </Menu>\n  </Popover>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating a Fully Controlled React Spectrum ComboBox (TSX)\nDESCRIPTION: Illustrates a fully controlled ComboBox where `selectedKey`, `inputValue`, and `items` are managed via React state (`fieldState`). Custom logic is implemented in `onSelectionChange`, `onInputChange`, and `onOpenChange` handlers to update the state and control the filtering (using `useFilter`) and item list based on user interaction. This provides complete control over the component's behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction ControlledComboBox() {\n  let optionList = [\n    {name: 'Red Panda', id: '1'},\n    {name: 'Cat', id: '2'},\n    {name: 'Dog', id: '3'},\n    {name: 'Aardvark', id: '4'},\n    {name: 'Kangaroo', id: '5'},\n    {name: 'Snake', id: '6'}\n  ];\n\n  // Store ComboBox input value, selected option, open state, and items\n  // in a state tracker\n  let [fieldState, setFieldState] = React.useState({\n    selectedKey: '',\n    inputValue: '',\n    items: optionList\n  });\n\n  // Implement custom filtering logic and control what items are\n  // available to the ComboBox.\n  let {startsWith} = useFilter({sensitivity: 'base'});\n\n  // Specify how each of the ComboBox values should change when an\n  // option is selected from the list box\n  let onSelectionChange = (key) => {\n    setFieldState(prevState => {\n      let selectedItem = prevState.items.find(option => option.id === key);\n      return ({\n        inputValue: selectedItem?.name ?? '',\n        selectedKey: key,\n        items: optionList.filter(item => startsWith(item.name, selectedItem?.name ?? ''))\n      })\n    });\n  };\n\n  // Specify how each of the ComboBox values should change when the input\n  // field is altered by the user\n  let onInputChange = (value) => {\n    setFieldState(prevState => ({\n      inputValue: value,\n      selectedKey: value === '' ? null : prevState.selectedKey,\n      items: optionList.filter(item => startsWith(item.name, value))\n    }));\n  };\n\n  // Show entire list if user opens the menu manually\n  let onOpenChange = (isOpen, menuTrigger) => {\n    if (menuTrigger === 'manual' && isOpen) {\n      setFieldState(prevState => ({\n        inputValue: prevState.inputValue,\n        selectedKey: prevState.selectedKey,\n        items: optionList\n      }));\n    }\n  };\n\n  // Pass each controlled prop to useComboBox along with their\n  // change handlers\n  return (\n    <ComboBox\n      label=\"Favorite Animal\"\n      items={fieldState.items}\n      selectedKey={fieldState.selectedKey}\n      inputValue={fieldState.inputValue}\n      onOpenChange={onOpenChange}\n      onSelectionChange={onSelectionChange}\n      onInputChange={onInputChange}>\n      {item => <Item>{item.name}</Item>}\n    </ComboBox>\n  )\n}\n\n<ControlledComboBox />\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ColorPicker with React Aria Components\nDESCRIPTION: Example of a basic ColorPicker implementation that includes a button trigger with color swatch, and a popover containing color area, slider, and field components for color selection. Uses a default hex color value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorPicker, Button, Popover, Dialog, DialogTrigger} from 'react-aria-components';\nimport {MyColorSwatch} from './ColorSwatch';\nimport {MyColorSlider} from './ColorSlider';\nimport {MyColorArea} from './ColorArea';\nimport {MyColorField} from './ColorField';\n\n<ColorPicker defaultValue=\"#5100FF\">\n  <DialogTrigger>\n    <Button className=\"color-picker\">\n      <MyColorSwatch />\n      <span>Fill color</span>\n    </Button>\n    <Popover placement=\"bottom start\">\n      <Dialog className=\"color-picker-dialog\">\n        <MyColorArea colorSpace=\"hsb\" xChannel=\"saturation\" yChannel=\"brightness\" />\n        <MyColorSlider colorSpace=\"hsb\" channel=\"hue\" />\n        <MyColorField label=\"Hex\" />\n      </Dialog>\n    </Popover>\n  </DialogTrigger>\n</ColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic NumberField with Label, Buttons, and Input in React Spectrum (TypeScript/JSX)\nDESCRIPTION: This example demonstrates how to use the NumberField component from React Spectrum along with its child components (Label, Group, Input, Button) to create an accessible and stylable number input with stepper buttons. It relies on the 'react-aria-components' package and expects React environment with TypeScript support. The primary parameters include the defaultValue, minValue for restricting the input, and the slot prop for customizing button placement. The NumberField displays the current value and allows increment/decrement via buttons or keyboard input.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NumberField, Label, Group, Input, Button} from 'react-aria-components';\\n\\n<NumberField defaultValue={1024} minValue={0}>\\n  <Label>Width</Label>\\n  <Group>\\n    <Button slot=\\\"decrement\\\">-</Button>\\n    <Input />\\n    <Button slot=\\\"increment\\\">+</Button>\\n  </Group>\\n</NumberField>\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Layout with Grid in React Spectrum\nDESCRIPTION: This example shows how to use the Grid component to create a complex application layout with header, sidebar, content, and footer areas. It demonstrates the use of areas, columns, and rows props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/layout.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Grid\n  areas={[\n    'header  header',\n    'sidebar content',\n    'footer  footer'\n  ]}\n  columns={['1fr', '3fr']}\n  rows={['size-1000', 'auto', 'size-1000']}\n  height=\"size-6000\"\n  gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" gridArea=\"header\" />\n  <View backgroundColor=\"blue-600\" gridArea=\"sidebar\" />\n  <View backgroundColor=\"purple-600\" gridArea=\"content\" />\n  <View backgroundColor=\"magenta-600\" gridArea=\"footer\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Tabs Component with React Aria/Stately Hooks (TSX)\nDESCRIPTION: Provides a complete example of creating a reusable `Tabs` component using `useTabList`, `useTab`, `useTabPanel` hooks from React Aria and `useTabListState` from React Stately. It shows how to manage state, render individual tabs and panels using `Item` from `@react-stately/collections`, and handle ARIA attributes for accessibility. Includes a usage example demonstrating how to pass items to the `Tabs` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Item} from '@react-stately/collections';\nimport {useTab, useTabList, useTabPanel} from '@react-aria/tabs';\nimport {useTabListState} from '@react-stately/tabs';\n\nfunction Tabs(props) {\n  let state = useTabListState(props);\n  let ref = React.useRef(null);\n  let {tabListProps} = useTabList(props, state, ref);\n  return (\n    <div className={`tabs ${props.orientation || ''}`}>\n      <div {...tabListProps} ref={ref}>\n        {[...state.collection].map((item) => (\n          <Tab key={item.key} item={item} state={state} />\n        ))}\n      </div>\n      <TabPanel key={state.selectedItem?.key} state={state} />\n    </div>\n  );\n}\n\nfunction Tab({item, state}) {\n  let {key, rendered} = item;\n  let ref = React.useRef(null);\n  let {tabProps} = useTab({key}, state, ref);\n  return (\n    <div {...tabProps} ref={ref}>\n      {rendered}\n    </div>\n  );\n}\n\nfunction TabPanel({state, ...props}) {\n  let ref = React.useRef(null);\n  let {tabPanelProps} = useTabPanel(props, state, ref);\n  return (\n    <div {...tabPanelProps} ref={ref}>\n      {state.selectedItem?.props.children}\n    </div>\n  );\n}\n\n<Tabs aria-label=\"History of Ancient Rome\">\n  <Item key=\"FoR\" title=\"Founding of Rome\">Arma virumque cano, Troiae qui primus ab oris.</Item>\n  <Item key=\"MaR\" title=\"Monarchy and Republic\">Senatus Populusque Romanus.</Item>\n  <Item key=\"Emp\" title=\"Empire\">Alea jacta est.</Item>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Value in React Spectrum NumberField (TSX)\nDESCRIPTION: Demonstrates setting a minimum value constraint on a React Spectrum `NumberField` using the `minValue` prop. This clamps the value on blur and disables the decrement button when the value is at the minimum. Setting `minValue` to 0 or greater can enable a numeric keyboard on iOS for a better user experience.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<NumberField\n  label=\"Enter your age\"\n  minValue={0} />\n```\n```\n\n----------------------------------------\n\nTITLE: Building a Custom ListBox with useListBox and useOption – React Aria – TypeScript\nDESCRIPTION: This TypeScript React example demonstrates how to build a fully accessible listbox component using the useListBox and useOption hooks from @react-aria/listbox, along with useListState for internal state management and useFocusRing for focus handling. The ListBox component handles rendering static collections passed as children, supports sections via type checking, and applies relevant ARIA props for assistive technology. Required dependencies include @react-aria/listbox, @react-stately/list, @react-stately/collections, @react-aria/focus, and @react-aria/utils. Parameters include label, selectionMode, and option definitions; output is a fully accessible listbox where items can be focused, selected, and styled. This example expects that items follow the Collection Components API, and does not cover asynchronous (dynamic) item loading.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {AriaListBoxProps} from '@react-aria/listbox';\\nimport {useListBox, useOption} from '@react-aria/listbox';\\nimport {useListState} from '@react-stately/list';\\nimport {Item} from '@react-stately/collections';\\nimport {useFocusRing} from '@react-aria/focus';\\nimport {mergeProps} from '@react-aria/utils';\\n\\nfunction ListBox<T extends object>(props: AriaListBoxProps<T>) {\\n  // Create state based on the incoming props\\n  let state = useListState(props);\\n\\n  // Get props for the listbox element\\n  let ref = React.useRef(null);\\n  let {listBoxProps, labelProps} = useListBox(props, state, ref);\\n\\n  return (\\n    <>\\n      <div {...labelProps}>{props.label}</div>\\n      <ul {...listBoxProps} ref={ref}>\\n        {[...state.collection].map(item => (\\n          item.type === 'section'\\n            ? <ListBoxSection key={item.key} section={item} state={state} />\\n            : <Option key={item.key} item={item} state={state} />\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\n\\nfunction Option({item, state}) {\\n  // Get props for the option element\\n  let ref = React.useRef(null);\\n  let {optionProps} = useOption({key: item.key}, state, ref);\\n\\n  // Determine whether we should show a keyboard\\n  // focus ring for accessibility\\n  let {isFocusVisible, focusProps} = useFocusRing();\\n\\n  return (\\n    <li\\n      {...mergeProps(optionProps, focusProps)}\\n      ref={ref}\\n      data-focus-visible={isFocusVisible}>\\n      {item.rendered}\\n    </li>\\n  );\\n}\\n\\n<ListBox label=\"Alignment\" selectionMode=\"single\">\\n  <Item>Left</Item>\\n  <Item>Middle</Item>\\n  <Item>Right</Item>\\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Constructing a Full NumberField with Label, Stepper Buttons, Description, and Error Messaging (TypeScript/JSX)\nDESCRIPTION: This example outlines the complete structure for an advanced NumberField using React Spectrum's components, including support for labels, a grouped input with increment/decrement buttons, a description, and error handling. It uses react-aria-components and shows slot usage to arrange labeling and error fields for accessibility. Requires a React environment and proper installation of the related packages. Inputs include all child components and optional slots; the output is an accessible number input with enhanced context and validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NumberField, Label, Group, Input, Button, Text, FieldError} from 'react-aria-components';\\n\\n<NumberField>\\n  <Label />\\n  <Group>\\n    <Input />\\n    <Button slot=\\\"increment\\\" />\\n    <Button slot=\\\"decrement\\\" />\\n  </Group>\\n  <Text slot=\\\"description\\\" />\\n  <FieldError />\\n</NumberField>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ComboBox in React Aria Components\nDESCRIPTION: A basic implementation of a ComboBox component with a Label, Input, Button, Popover, and ListBox with selectable items. This example demonstrates the fundamental structure needed to create a ComboBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ComboBox, Label, Input, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';\n\n<ComboBox>\n  <Label>Favorite Animal</Label>\n  <div>\n    <Input />\n    <Button>▼</Button>\n  </div>\n  <Popover>\n    <ListBox>\n      <ListBoxItem>Aardvark</ListBoxItem>\n      <ListBoxItem>Cat</ListBoxItem>\n      <ListBoxItem>Dog</ListBoxItem>\n      <ListBoxItem>Kangaroo</ListBoxItem>\n      <ListBoxItem>Panda</ListBoxItem>\n      <ListBoxItem>Snake</ListBoxItem>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Table Components with Built-in Selection\nDESCRIPTION: Example showing how to use the custom MyTableHeader and MyRow components to create a table with multiple selection support without having to manually add selection checkboxes to each row.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Files\" selectionMode=\"multiple\">\n  <MyTableHeader>\n    <MyColumn isRowHeader>Name</MyColumn>\n    <MyColumn>Type</MyColumn>\n    <MyColumn>Date Modified</MyColumn>\n  </MyTableHeader>\n  <TableBody>\n    <MyRow>\n      <Cell>Games</Cell>\n      <Cell>File folder</Cell>\n      <Cell>6/7/2020</Cell>\n    </MyRow>\n    <MyRow>\n      <Cell>Program Files</Cell>\n      <Cell>File folder</Cell>\n      <Cell>4/7/2021</Cell>\n    </MyRow>\n    <MyRow>\n      <Cell>bootmgr</Cell>\n      <Cell>System file</Cell>\n      <Cell>11/20/2010</Cell>\n    </MyRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Basic RadioGroup Example in React\nDESCRIPTION: This example demonstrates how to create a basic RadioGroup with three options for selecting a favorite pet.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup>\n  <Label>Favorite pet</Label>\n  <Radio value=\"dogs\">Dog</Radio>\n  <Radio value=\"cats\">Cat</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ColorPicker Component in React\nDESCRIPTION: Simple pattern for using the ColorPicker component, showing the basic import and component structure. The component acts as a container for various color components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorPicker} from 'react-aria-components';\n\n<ColorPicker>\n  {/* Color components here */}\n</ColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Controlled and Uncontrolled Values in ColorPicker (TypeScript/TSX)\nDESCRIPTION: This snippet illustrates both controlled and uncontrolled ColorPicker usage. It uses React's useState to manage color state via parseColor, showing a controlled ColorPicker (with `value` and `onChange`) and an uncontrolled ColorPicker (using `defaultValue`). ColorPicker and ColorEditor must be imported from @react-spectrum/color; Flex is required for layout. parseColor should be imported to initialize color objects as required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorPicker} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {parseColor} from '@react-spectrum/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(25, 100%, 50%)'));\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <ColorPicker\n        label=\"Color Picker (uncontrolled)\"\n        /*- begin highlight -*/\n        defaultValue=\"hsl(25, 100%, 50%)\">\n        {/*- end highlight -*/}\n        <ColorEditor />\n      </ColorPicker>\n      <ColorPicker\n        label=\"Color Picker (controlled)\"\n        /*- begin highlight -*/\n        value={value}\n        onChange={setValue}>\n        {/*- end highlight -*/}\n        <ColorEditor />\n      </ColorPicker>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Shipping Options Radio Group with React Aria Components and Tailwind CSS\nDESCRIPTION: Creates a fully styled shipping options selection component using React Aria Components with Tailwind CSS for styling. Demonstrates conditional styling based on component states like selection and focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/shipping-radio.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RadioGroup, Radio, Label} from 'react-aria-components';\nimport CheckCircleIcon from '@spectrum-icons/workflow/CheckmarkCircle';\n\nfunction RadioGroupExample() {\n  return (\n    <div className=\"bg-linear-to-r from-blue-300 to-indigo-300 p-2 sm:p-8 rounded-lg flex justify-center\">\n      <RadioGroup className=\"flex flex-col gap-2 w-full max-w-[300px]\" defaultValue=\"Standard\">\n        <Label className=\"text-xl text-slate-900 font-semibold font-serif\">Shipping</Label>\n        <ShippingOption name=\"Standard\" time=\"4-10 business days\" price=\"$4.99\" />\n        <ShippingOption name=\"Express\" time=\"2-5 business days\" price=\"$15.99\" />\n        <ShippingOption name=\"Lightning\" time=\"1 business day\" price=\"$24.99\" />\n      </RadioGroup>\n    </div>\n  );\n}\n\nfunction ShippingOption({name, time, price}) {\n  return (\n    <Radio value={name} className={({isFocusVisible, isSelected, isPressed}) => `\n      group relative flex cursor-default rounded-lg px-4 py-3 shadow-lg outline-hidden bg-clip-padding border border-solid\n      ${isFocusVisible ? 'ring-2 ring-blue-600 ring-offset-1 ring-offset-white/80' : ''}\n      ${isSelected ? 'bg-blue-600 border-white/30 text-white' : 'border-transparent'}\n      ${isPressed && !isSelected ? 'bg-blue-50' : ''}\n      ${!isSelected && !isPressed ? 'bg-white' : ''}\n    `}>\n      <div className=\"flex w-full items-center justify-between gap-3\">\n        <div className=\"flex items-center shrink-0 text-blue-100 group-selected:text-white\">\n          <CheckCircleIcon size=\"M\" />\n        </div>\n        <div className=\"flex flex-1 flex-col\">\n          <div className=\"text-lg font-serif font-semibold text-gray-900 group-selected:text-white\">{name}</div>\n          <div className=\"inline text-gray-500 group-selected:text-sky-100\">\n            {time}\n          </div>\n        </div>\n        <div className=\"font-medium font-mono text-gray-900 group-selected:text-white\">{price}</div>\n      </div>\n    </Radio>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TextField Validation State and FieldError Styling - CSS\nDESCRIPTION: CSS styles for indicating the invalid state on input fields and styling error messages via .react-aria-FieldError. Relies on CSS variables like --invalid-color for error coloring. Helps visually distinguish validation errors in the UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-TextField {\\n  .react-aria-Input,\\n  .react-aria-TextArea {\\n    &[data-invalid] {\\n      border-color: var(--invalid-color);\\n    }\\n  }\\n\\n  .react-aria-FieldError {\\n    font-size: 12px;\\n    color: var(--invalid-color);\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Horizontal Layout for Virtualizer in React (TSX)\nDESCRIPTION: This TSX snippet demonstrates how to create a custom layout for the `Virtualizer` by extending the `Layout` abstract base class. It implements `HorizontalLayout` with fixed-size items (100x100px) scrolling horizontally. Key methods like `getVisibleLayoutInfos`, `getLayoutInfo`, and `getContentSize` are implemented to define the layout logic. The example uses this custom layout with a `Virtualizer` wrapping a horizontal `ListBox`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Layout, LayoutInfo, Rect, Size, Key} from 'react-aria-components';\n\nclass HorizontalLayout extends Layout {\n  // Determine which items are visible within the given rectangle.\n  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {\n    let virtualizer = this.virtualizer!;\n    let keys = Array.from(virtualizer.collection.getKeys());\n    let startIndex = Math.max(0, Math.floor(rect.x / 100));\n    let endIndex = Math.min(keys.length - 1, Math.ceil(rect.maxX / 100));\n    let layoutInfos = [];\n    for (let i = startIndex; i <= endIndex; i++) {\n      layoutInfos.push(this.getLayoutInfo(keys[i]));\n    }\n\n    // Always add persisted keys (e.g. the focused item), even when out of view.\n    for (let key of virtualizer.persistedKeys) {\n      let item = virtualizer.collection.getItem(key);\n      if (item?.index < startIndex) {\n        layoutInfos.unshift(this.getLayoutInfo(key));\n      } else if (item?.index > endIndex) {\n        layoutInfos.push(this.getLayoutInfo(key));\n      }\n    }\n    \n    return layoutInfos;\n  }\n\n  // Provide a LayoutInfo for a specific item.\n  getLayoutInfo(key: Key): LayoutInfo | null {\n    let node = this.virtualizer!.collection.getItem(key);\n    if (!node) {\n      return null;\n    }\n\n    let rect = new Rect(node.index * 100, 0, 100, 100);\n    return new LayoutInfo(node.type, node.key, rect);\n  }\n\n  // Provide the total size of all items.\n  getContentSize(): Size {\n    let numItems = this.virtualizer!.collection.size;\n    return new Size(numItems * 100, 100);\n  }\n}\n\nfunction Example() {\n  let items = [];\n  for (let i = 0; i < 200; i++) {\n    items.push({id: i, name: `Item ${i}`});\n  }\n\n  return (\n    <Virtualizer layout={HorizontalLayout}>\n      <ListBox aria-label=\"Favorite animal\" items={items} orientation=\"horizontal\" style={{height: 'fit-content'}}>\n        {item => <ListBoxItem className=\"item\">{item.name}</ListBoxItem>}\n      </ListBox>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Select Component with Dynamic Collections in TSX\nDESCRIPTION: This example demonstrates how to populate a `Select` component (assumed to be built using the previously defined components) with dynamic data. It passes an array of objects (`options`) to the `items` prop and uses a render function as a child to render each item using the `Item` component. The `key` prop is implicitly derived from the `id` property of the items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  return (\n    <>\n      <Select label=\"Pick an engineering major\" items={options}>\n        {(item) => <Item>{item.name}</Item>}\n      </Select>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic DateRangePicker Implementation in React Aria\nDESCRIPTION: Example showing the basic implementation of a DateRangePicker component with start and end date inputs, calendar popup, and navigation controls.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateRangePicker, Label, Group, Popover, Dialog, RangeCalendar, CalendarGrid, CalendarCell, Button, Heading, DateInput, DateSegment} from 'react-aria-components';\n\n<DateRangePicker>\n  <Label>Trip dates</Label>\n  <Group>\n    <DateInput slot=\"start\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <span aria-hidden=\"true\">–</span>\n    <DateInput slot=\"end\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button>▼</Button>\n  </Group>\n  <Popover>\n    <Dialog>\n      <RangeCalendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </RangeCalendar>\n    </Dialog>\n  </Popover>\n</DateRangePicker>\n```\n\n----------------------------------------\n\nTITLE: Testing ListBox with React Aria Test Utils\nDESCRIPTION: This snippet demonstrates how to test a ListBox component using the @react-aria/test-utils package. It shows setting up a User instance, rendering a ListBox component, creating a ListBoxTester, and testing selection functionality with keyboard interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_61\n\nLANGUAGE: ts\nCODE:\n```\n// ListBox.test.ts\nimport {render} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('ListBox can select an option via keyboard', async function () {\n  // Render your test component/app and initialize the listbox tester\n  let {getByTestId} = render(\n     <ListBox selectionMode=\"single\" data-testid=\"test-listbox\">\n      ...\n    </ListBox>\n  );\n  let listboxTester = testUtilUser.createTester('ListBox', {root: getByTestId('test-listbox'), interactionType: 'keyboard'});\n\n  await listboxTester.toggleOptionSelection({option: 4});\n  expect(listboxTester.options()[4]).toHaveAttribute('aria-selected', 'true');\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Months in DateRangePicker\nDESCRIPTION: Example showing how to display multiple months at once in the DateRangePicker calendar popover using the maxVisibleMonths prop, which allows showing up to 3 months if screen space permits.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" maxVisibleMonths={3} />\n```\n\n----------------------------------------\n\nTITLE: Composing a NumberField with Standard Components in React Aria (TSX)\nDESCRIPTION: Demonstrates the compositional API of React Aria Components by building a `NumberField` using standard `Label`, `Group`, `Input`, and `Button` components. The `Button` components use the `slot` prop to specify their role ('increment' or 'decrement'), receiving behavior automatically via context from the parent `NumberField`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField>\n  <Label>Width</Label>\n  <Group>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n    <Button slot=\"decrement\">-</Button>\n  </Group>\n</NumberField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Palette Component in React (TSX)\nDESCRIPTION: Defines the `CommandPaletteExample` React component which renders a button to trigger a modal dialog containing an Autocomplete input and a Menu of commands. It utilizes React Aria Components for accessibility and interaction, React hooks for state management (opening/closing the modal) and side effects (keyboard shortcut listeners for Cmd/Ctrl+K and Escape), and Tailwind CSS classes for styling. It also includes a helper component `CommandItem` for styling menu items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/command-palette.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Autocomplete,\n  TextField,\n  Menu,\n  MenuItem,\n  useFilter,\n  Input,\n  Dialog,\n  DialogTrigger,\n  Modal,\n  ModalOverlay,\n  Button\n} from 'react-aria-components';\nimport {useEffect, useMemo, useState} from 'react';\n\nfunction CommandPaletteExample() {\n  let commands = [\n    {id: 'new-file', label: 'Create new file…'},\n    {id: 'new-folder', label: 'Create new folder…'},\n    {id: 'assign', label: 'Assign to…'},\n    {id: 'assign-me', label: 'Assign to me'},\n    {id: 'status', label: 'Change status…'},\n    {id: 'priority', label: 'Change priority…'},\n    {id: 'label-add', label: 'Add label…'},\n    {id: 'label-remove', label: 'Remove label…'}\n  ];\n\n  let [isOpen, setOpen] = useState(false);\n  let {contains} = useFilter({sensitivity: 'base'});\n  let isMac = useMemo(() => /Mac/.test(navigator.platform), []);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'k' && (isMac ? e.metaKey : e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((prev) => !prev);\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        setOpen(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  })\n\n  return (\n    <div className=\"bg-linear-to-r from-indigo-500 to-violet-500 p-4 sm:p-8 h-[340px] rounded-lg flex items-center justify-center\">\n      <DialogTrigger isOpen={isOpen} onOpenChange={setOpen}>\n        <Button className=\"inline-flex items-center justify-center rounded-xl bg-black/20 bg-clip-padding border border-white/20 px-3 py-2 font-medium font-[inherit] text-sm sm:text-base text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75\">\n          <span className=\"block sm:hidden\">Tap to open</span>\n          <span className=\"hidden sm:block\">\n            Type <kbd className=\"px-2 py-1 m-1 text-xs font-semibold border border-gray-200 rounded-lg\">{isMac ? '⌘' : 'Ctrl'}</kbd> + <kbd className=\"px-2 py-1 m-1 text-xs font-semibold border border-gray-200 rounded-lg\">K</kbd> or press here to open\n          </span>\n        </Button>\n        <ModalOverlay\n          isDismissable\n          className={({ isEntering, isExiting }) => `\n          fixed inset-0 z-10 overflow-y-auto bg-black/25 flex min-h-full items-start sm:items-center justify-center p-4 text-center\n          ${isEntering ? 'animate-in fade-in duration-300 ease-out' : ''}\n          ${isExiting ? 'animate-out fade-out duration-200 ease-in' : ''}\n        `}\n        >\n          <Modal\n            className={({ isEntering, isExiting }) => `\n            ${isEntering ? 'animate-in zoom-in-95 ease-out duration-300' : ''}\n            ${isExiting ? 'animate-out zoom-out-95 ease-in duration-200' : ''}\n          `}\n          >\n            <Dialog className=\"outline-hidden relative\">\n              <div className=\"flex flex-col gap-1 w-[95vw] sm:w-[500px] max-w-full rounded-xl bg-white shadow-lg p-2\">\n                <Autocomplete filter={contains}>\n                  <TextField\n                    aria-label=\"Search commands\"\n                    className=\"flex flex-col px-3 py-2 rounded-md outline-none placeholder-white/70\"\n                  >\n                    <Input\n                      autoFocus\n                      placeholder=\"Search commands…\"\n                      className=\"border-none py-2 px-3 leading-5 text-gray-900 bg-transparent outline-hidden text-base focus-visible:ring-2 focus-visible:ring-violet-500 rounded-lg\"\n                    />\n                  </TextField>\n                  <Menu\n                    items={commands}\n                    className=\"mt-2 p-1 max-h-44 overflow-auto\"\n                  >\n                    {({ label }) => <CommandItem>{label}</CommandItem>}\n                  </Menu>\n                </Autocomplete>\n              </div>\n            </Dialog>\n          </Modal>\n        </ModalOverlay>\n      </DialogTrigger>\n    </div>\n  );\n}\n\nfunction CommandItem(props) {\n  return (\n    <MenuItem\n      {...props}\n      className=\"group flex w-full items-center rounded-md px-3 py-2 box-border outline-none cursor-default text-gray-900 hover:bg-violet-100 pressed:bg-violet-200 focus:bg-violet-500 focus:text-white\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gesture Driven Modal Sheet with Framer Motion\nDESCRIPTION: Creates a complete implementation of an iOS-style modal sheet with drag gestures using React Aria Components and Framer Motion. Includes animations for opening/closing, drag handling, and visual effects like background scaling and opacity transitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AnimatePresence,\n  motion,\n  animate,\n  useMotionTemplate,\n  useMotionValue,\n  useTransform,\n  useMotionValueEvent\n} from 'framer-motion';\nimport {\n  Dialog,\n  ModalOverlay,\n  Modal,\n  Button,\n  Heading\n} from 'react-aria-components';\nimport { useState } from 'react';\n\n// Wrap React Aria modal components so they support framer-motion values.\nconst MotionModal = motion(Modal);\nconst MotionModalOverlay = motion(ModalOverlay);\n\nconst inertiaTransition = {\n  type: \"inertia\" as const,\n  bounceStiffness: 300,\n  bounceDamping: 40,\n  timeConstant: 300\n};\n\nconst staticTransition = {\n  duration: 0.5,\n  ease: [0.32, 0.72, 0, 1]\n};\n\nconst SHEET_MARGIN = 34;\nconst SHEET_RADIUS = 12;\n\nconst root = document.body.firstChild as HTMLElement;\n\nfunction Sheet() {\n  let [isOpen, setOpen] = useState(false);\n  let h = window.innerHeight - SHEET_MARGIN;\n  let y = useMotionValue(h);\n  let bgOpacity = useTransform(y, [0, h], [0.4, 0]);\n  let bg = useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`;\n\n  // Scale the body down and adjust the border radius when the sheet is open.\n  let bodyScale = useTransform(\n    y,\n    [0, h],\n    [(window.innerWidth - SHEET_MARGIN) / window.innerWidth, 1]\n  );\n  let bodyTranslate = useTransform(y, [0, h], [SHEET_MARGIN - SHEET_RADIUS, 0]);\n  let bodyBorderRadius = useTransform(y, [0, h], [SHEET_RADIUS, 0]);\n\n  useMotionValueEvent(bodyScale, 'change', v => root.style.scale = `${v}`);\n  useMotionValueEvent(bodyTranslate, 'change', v => root.style.translate = `0 ${v}px`);\n  useMotionValueEvent(bodyBorderRadius, 'change', v => root.style.borderRadius = `${v}px`);\n\n  return (\n    <>\n      <Button\n        className=\"text-blue-600 text-lg font-semibold outline-hidden rounded-sm bg-transparent border-none pressed:text-blue-700 focus-visible:ring-3\"\n        onPress={() => setOpen(true)}>\n        Open sheet\n      </Button>\n      <AnimatePresence>\n        {isOpen && (\n          <MotionModalOverlay\n            // Force the modal to be open when AnimatePresence renders it.\n            isOpen\n            onOpenChange={setOpen}\n            className=\"fixed inset-0 z-10\"\n            style={{ backgroundColor: bg as any }}>\n            <MotionModal\n              className=\"bg-(--page-background) absolute bottom-0 w-full rounded-t-xl shadow-lg will-change-transform\"\n              initial={{ y: h }}\n              animate={{ y: 0 }}\n              exit={{ y: h }}\n              transition={staticTransition}\n              style={{\n                y,\n                top: SHEET_MARGIN,\n                // Extra padding at the bottom to account for rubber band scrolling.\n                paddingBottom: window.screen.height\n              }}\n              drag=\"y\"\n              dragConstraints={{ top: 0 }}\n              onDragEnd={(e, { offset, velocity }) => {\n                if (offset.y > window.innerHeight * 0.75 || velocity.y > 10) {\n                  setOpen(false);\n                } else {\n                  animate(y, 0, { ...inertiaTransition, min: 0, max: 0 });\n                }\n              }}>\n              {/* drag affordance */}\n              <div className=\"mx-auto w-12 mt-2 h-1.5 rounded-full bg-gray-400\" />\n              <Dialog className=\"px-4 pb-4 outline-hidden\">\n                <div className=\"flex justify-end\">\n                  <Button\n                    className=\"text-blue-600 text-lg font-semibold mb-8 outline-hidden rounded-sm bg-transparent border-none pressed:text-blue-700 focus-visible:ring-3\"\n                    onPress={() => setOpen(false)}>\n                    Done\n                  </Button>\n                </div>\n                <Heading slot=\"title\" className=\"text-3xl font-semibold mb-4\">\n                  Modal sheet\n                </Heading>\n                <p className=\"text-lg mb-4\">\n                  This is a dialog with a custom modal overlay built with React Aria Components and Framer Motion.\n                </p>\n                <p className=\"text-lg\">\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sit amet nisl blandit, pellentesque eros eu, scelerisque eros. Sed cursus urna at nunc lacinia dapibus.\n                </p>\n              </Dialog>\n            </MotionModal>\n          </MotionModalOverlay>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Labels and Help Text with React Aria TextField\nDESCRIPTION: Demonstrates how to use the `Label` and `Text` (with `slot=\"description\"`) components within a `TextField` component from `react-aria-components` to provide accessible labeling and supplementary information for a form field. This enhances accessibility by associating the label and description with the input.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField, Label, Input, Text} from 'react-aria-components';\n\n<TextField type=\"password\">\n  {/*- begin highlight -*/}\n  <Label>Password</Label>\n  {/*- end highlight -*/}\n  <Input />\n  {/*- begin highlight -*/}\n  <Text slot=\"description\">Password must be at least 8 characters.</Text>\n  {/*- end highlight -*/}\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria TextField - CSS\nDESCRIPTION: Defines the main CSS theme for the .react-aria-TextField container and its input elements. It includes styles for padding, border, color, background, and focus ring. The code expects an example theme to be imported and variables like --text-color and --field-background to be defined.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"@react-aria/example-theme\";\\n\\n.react-aria-TextField {\\n  display: flex;\\n  flex-direction: column;\\n  width: fit-content;\\n  color: var(--text-color);\\n\\n  .react-aria-Input,\\n  .react-aria-TextArea {\\n    padding: 0.286rem;\\n    margin: 0;\\n    border: 1px solid var(--border-color);\\n    border-radius: 6px;\\n    background: var(--field-background);\\n    font-size: 1.143rem;\\n    color: var(--field-text-color);\\n\\n    &[data-focused] {\\n      outline: 2px solid var(--focus-ring-color);\\n      outline-offset: -1px;\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Account Menu with Dialog, Popover, and Custom Menu Items in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to build an accessible account menu with a custom header using React, combining Menu, Dialog, and Popover from react-aria-components. The AccountMenuExample component triggers a popover containing profile details, a mode switch, separators, and menu items, styled with Tailwind CSS. Custom components MyMenuItem and MySwitch illustrate how to compose render-props and augment accessibility while maintaining design consistency; all props and ARIA attributes are passed through. Key inputs include user info, menu action IDs, and styling classnames; outputs are interactive UI elements. Dependencies: react-aria-components, Tailwind CSS, and plugins.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/account-menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem, Separator, Switch, composeRenderProps} from 'react-aria-components';\nimport type {MenuItemProps, SwitchProps} from 'react-aria-components';\n\nfunction AccountMenuExample() {\n  return (\n    <div className=\"p-8 bg-gray-50 dark:bg-zinc-900 rounded-lg flex items-start justify-center\">\n      <MenuTrigger>\n        <Button aria-label=\"Account\" className=\"inline-flex items-center justify-center rounded-md p-1.5 text-white bg-transparent border-none hover:bg-gray-200 pressed:bg-gray-300 dark:hover:bg-zinc-800 dark:pressed:bg-zinc-700 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-blue-600\">\n          <img alt=\"\" src=\"https://i.imgur.com/xIe7Wlb.png\" className=\"w-7 h-7 rounded-full\" />\n        </Button>\n        <Popover className=\"p-2 overflow-auto outline-hidden rounded-lg bg-white dark:bg-zinc-950 shadow-lg ring-1 ring-black/10 dark:ring-white/15 entering:animate-in entering:fade-in entering:placement-bottom:slide-in-from-top-1 entering:placement-top:slide-in-from-bottom-1 exiting:animate-out exiting:fade-out exiting:placement-bottom:slide-out-to-top-1 exiting:placement-top:slide-out-to-bottom-1 fill-mode-forwards origin-top-left\">\n          <div className=\"flex gap-2 items-center mx-3 mt-2\">\n            <img alt=\"\" src=\"https://i.imgur.com/xIe7Wlb.png\" className=\"w-16 h-16 rounded-full\" />\n            <div className=\"flex flex-col gap-1\">\n              <div className=\"text-[15px] font-bold text-gray-900 dark:text-gray-100 leading-none\">Marissa Whitaker</div>\n              <div className=\"text-base text-gray-900 dark:text-gray-100 leading-none mb-1\">user@example.com</div>\n              <MySwitch>Dark Mode</MySwitch>\n            </div>\n          </div>\n          <Separator className=\"border-none bg-gray-300 dark:bg-zinc-600 h-[1px] mx-3 mt-4 mb-2\" />\n          <Menu className=\"outline-hidden\">\n            <MyMenuItem id=\"new\">Account Settings</MyMenuItem>\n            <MyMenuItem id=\"open\">Support</MyMenuItem>\n            <Separator className=\"bg-gray-300 dark:bg-zinc-600 h-[1px] mx-3 my-2\" />\n            <MyMenuItem id=\"save\">Legal notices</MyMenuItem>\n            <MyMenuItem id=\"save-as\">About</MyMenuItem>\n            <Separator className=\"bg-gray-300 dark:bg-zinc-600 h-[1px] mx-3 my-2\" />\n            <MyMenuItem id=\"print\">Sign out</MyMenuItem>\n          </Menu>\n        </Popover>\n      </MenuTrigger>\n    </div>\n  );\n}\n\nfunction MyMenuItem(props: MenuItemProps) {\n  return <MenuItem {...props} className=\"group flex w-full items-center rounded-md px-3 py-2 box-border outline-hidden cursor-default text-gray-900 dark:text-gray-100 focus:bg-blue-500 focus:text-white\" />;\n}\n\nfunction MySwitch(props: SwitchProps) {\n  return (\n    <Switch className=\"group flex gap-2 items-center text-gray-800 dark:text-zinc-200 text-base transition\">\n      {composeRenderProps(props.children, children => <>\n        <div className=\"flex h-3 w-6 p-[2px] items-center shrink-0 cursor-default rounded-full transition duration-200 ease-in-out shadow-inner border border-transparent bg-gray-400 dark:bg-zinc-400 group-pressed:bg-gray-500 dark:group-pressed:bg-zinc-300 group-selected:bg-gray-700 group-selected:dark:bg-zinc-300 group-selected:forced-colors:bg-[Highlight]! group-selected:group-pressed:bg-gray-800 group-selected:dark:group-pressed:bg-zinc-200 outline outline-0 outline-blue-600 dark:outline-blue-500 forced-colors:outline-[Highlight] outline-offset-2 group-focus-visible:outline-2\">\n          <div className=\"h-3 w-3 transform rounded-full bg-white dark:bg-zinc-900 outline outline-1 -outline-offset-1 outline-transparent shadow-sm transition duration-200 ease-in-out translate-x-0 group-selected:translate-x-[100%]\" />\n        </div>\n        {children}\n      </>)}\n    </Switch>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Loading in ComboBox\nDESCRIPTION: This example uses the useAsyncList hook to handle asynchronous loading and filtering of data from a server for a ComboBox component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Character>({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <MyComboBox\n      label=\"Star Wars Character Lookup\"\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={list.setFilterText}>\n      {(item) => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n    </MyComboBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling React Spectrum SSR Support for React < 18 (tsx)\nDESCRIPTION: Illustrates wrapping the application root with `SSRProvider` from `@adobe/react-spectrum` when using React version 16 or 17. This component signals an SSR context to nested React Spectrum components, ensuring consistent rendering and hydration between the server and client. This step is unnecessary for React 18+. Requires the `SSRProvider`, `Provider`, and `defaultTheme` from `@adobe/react-spectrum`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SSRProvider, Provider, defaultTheme} from '@adobe/react-spectrum';\n\n// SSRProvider is only needed if you are using React 16 or 17.\n<SSRProvider>\n  <Provider theme={defaultTheme} locale={yourLocaleHere}>\n    <App />\n  </Provider>\n</SSRProvider>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic React Spectrum Application with Button Component\nDESCRIPTION: Demonstrates the basic setup of a React Spectrum application using the Provider component with a themed Button implementation. Shows how to structure the basic application wrapper and implement an interactive button with press handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@adobe/react-spectrum/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Provider, defaultTheme, Button} from '@adobe/react-spectrum';\n\n// Render it in your app!\nfunction App() {\n  return (\n    <Provider theme={theme}>\n      <Button\n        variant=\"cta\"\n        onPress={() => alert('Hey there!')}>\n        Hello React Spectrum!\n      </Button>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ripple Button Component in React\nDESCRIPTION: This code defines a RippleButton component using React Aria Components and Tailwind CSS. It includes state management for the ripple effect and uses the Button component from react-aria-components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ripple-button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button} from 'react-aria-components';\nimport {useEffect, useRef, useState} from 'react';\nimport Airplane from '@spectrum-icons/workflow/Airplane';\n\nfunction RippleButton(props) {\n  const [coords, setCoords] = useState(null);\n\n  let timeout = useRef<ReturnType<typeof setTimeout> | null>(null);\n  let onPress = (e) => {\n    setCoords({x: e.x, y: e.y});\n    if (e.x !== -1 && e.y !== -1) {\n      clearTimeout(timeout.current);\n      timeout.current = setTimeout(() => setCoords(null), 600);\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(timeout.current);\n    };\n  }, []);\n\n  return (\n    <div className=\"bg-linear-to-r from-teal-300 to-cyan-500 p-12 rounded-lg flex justify-center\">\n      <Button\n        onPress={onPress}\n        className={`\n      relative overflow-hidden\n      inline-flex items-center justify-center rounded-md bg-black/50 bg-clip-padding border border-white/20 px-6 py-4 text-white text-lg\n      hover:bg-black/60 pressed:bg-black/70 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75`}>\n      {coords && (\n        <div\n          key={`${coords.x},${coords.y}`}\n          className=\"absolute h-8 w-8 rounded-full opacity-100 bg-white/60\"\n          style={{\n            animation: 'ripple 600ms linear',\n            left: coords.x - 15,\n            top: coords.y - 15\n          }} />)}\n        <span className=\"flex items-center gap-4\">{props.children}</span>\n      </Button>\n    </div>\n  )\n}\n\n<RippleButton><Airplane size=\"S\" /> Book flight</RippleButton>\n```\n\n----------------------------------------\n\nTITLE: Querying Elements by Role using React Testing Library\nDESCRIPTION: Demonstrates how to use React Testing Library to render a component and query for an element by its ARIA role.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {render} from '@testing-library/react';\n\nlet tree = render(<MyComponent />);\nlet option = tree.getByRole('button');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fully Controlled ComboBox in React\nDESCRIPTION: This example demonstrates how to create a fully controlled ComboBox component. It manages state for selected key and input value, and handles selection and input changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ControlledComboBox() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  let [fieldState, setFieldState] = React.useState({\n    selectedKey: null,\n    inputValue: ''\n  });\n\n  let onSelectionChange = (id: Key) => {\n    setFieldState({\n      inputValue: options.find(o => o.id === id)?.name ?? '',\n      selectedKey: id\n    });\n  };\n\n  let onInputChange = (value: string) => {\n    setFieldState(prevState => ({\n      inputValue: value,\n      selectedKey: value === '' ? null : prevState.selectedKey\n    }));\n  };\n\n  return (\n     <>\n      <p>Current selected major id: {fieldState.selectedKey}</p>\n      <p>Current input text: {fieldState.inputValue}</p>\n       <MyComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={options}\n        selectedKey={fieldState.selectedKey}\n        inputValue={fieldState.inputValue}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </MyComboBox>\n     </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Uncontrolled Form Submission with FormData in React Aria\nDESCRIPTION: Demonstrates capturing form data from an uncontrolled form using the native `FormData` API within the `onSubmit` handler. It prevents the default form submission, extracts data using `Object.fromEntries(new FormData(e.currentTarget))`, and updates the component's state to display the submitted data. Requires `React.useState` and `react-aria-components` (`Form`, `TextField`, `Label`, `Input`, `Button`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, TextField, Label, Input, Button} from 'react-aria-components';\n\nfunction Example() {\n  let [submitted, setSubmitted] = React.useState(null);\n\n  /*- begin highlight -*/\n  let onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    // Prevent default browser page refresh.\n    e.preventDefault();\n\n    // Get form data as an object.\n    let data = Object.fromEntries(new FormData(e.currentTarget));\n\n    // Submit to your backend API...\n    setSubmitted(data);\n  };\n  /*- end highlight -*/\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <TextField name=\"name\">\n        <Label>Name</Label>\n        <Input />\n      </TextField>\n      <Button type=\"submit\">Submit</Button>\n      {submitted && <div>You submitted: <code>{JSON.stringify(submitted)}</code></div>}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable MyTextField Component - React Aria - TypeScript/TSX\nDESCRIPTION: Defines a reusable MyTextField wrapper around react-aria-components TextField, aggregating label, input, description, and error handling, customizable via props. Intended for consistent usage across projects. Requires react-aria-components and TypeScript types. Accepts label, description, errorMessage, all passed to the right children, as well as standard TextFieldProps.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport type {TextFieldProps, ValidationResult} from 'react-aria-components';\\nimport {Text, FieldError} from 'react-aria-components';\\n\\ninterface MyTextFieldProps extends TextFieldProps {\\n  label?: string,\\n  description?: string,\\n  errorMessage?: string | ((validation: ValidationResult) => string)\\n}\\n\\nfunction MyTextField({label, description, errorMessage, ...props}: MyTextFieldProps) {\\n  return (\\n    <TextField {...props}>\\n      <Label>{label}</Label>\\n      <Input />\\n      {description && <Text slot=\"description\">{description}</Text>}\\n      <FieldError>{errorMessage}</FieldError>\\n    </TextField>\\n  );\\n}\\n\\n<MyTextField label=\"Name\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filtering Logic in React Spectrum ComboBox (TSX)\nDESCRIPTION: Shows how to override the default 'contains' filtering behavior of the `ComboBox`. This example implements a 'startsWith' filter using the `useFilter` hook and manages the filtered item list with React state (`useState`, `useMemo`). It also uses the `menuTrigger` parameter from `onOpenChange` to display all options when the menu is opened manually (e.g., via arrow keys).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let options = [\n    {id: 1, email: 'fake@email.com'},\n    {id: 2, email: 'anotherfake@email.com'},\n    {id: 3, email: 'bob@email.com'},\n    {id: 4, email: 'joe@email.com'},\n    {id: 5, email: 'yourEmail@email.com'},\n    {id: 6, email: 'valid@email.com'},\n    {id: 7, email: 'spam@email.com'},\n    {id: 8, email: 'newsletter@email.com'},\n    {id: 9, email: 'subscribe@email.com'}\n  ];\n\n  let [showAll, setShowAll] = React.useState(false);\n  let [filterValue, setFilterValue] = React.useState('');\n  let {startsWith} = useFilter({sensitivity: 'base'});\n  let filteredItems = React.useMemo(() => options.filter(item => startsWith(item.email, filterValue)), [options, filterValue]);\n\n  return (\n    <ComboBox\n      onOpenChange={(isOpen, menuTrigger) => {\n        // Show all items if menu is opened manually\n        // i.e. by the arrow keys or trigger button\n        if (menuTrigger === 'manual' && isOpen) {\n          setShowAll(true);\n        }\n      }}\n      width=\"size-3000\"\n      label=\"To:\"\n      items={showAll ? options : filteredItems}\n      inputValue={filterValue}\n      onInputChange={(value) => {\n        setShowAll(false);\n        setFilterValue(value);\n      }}\n      allowsCustomValue>\n      {item => <Item>{item.email}</Item>}\n    </ComboBox>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Two DateRangePickers with Different Granularities (React Spectrum, TypeScript/JSX)\nDESCRIPTION: This snippet illustrates synchronizing two DateRangePickers to the same value while displaying different granularities ('second' and 'day'). It uses React useState for state control and parseAbsoluteToLocal for ISO string parsing. Dependencies are React and @internationalized/date. Both pickers update upon change, but one shows precise times while the other displays only dates.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [date, setDate] = React.useState({\\n    start: parseAbsoluteToLocal('2021-04-07T18:45:22Z'),\\n    end: parseAbsoluteToLocal('2021-04-08T20:00:00Z')\\n  });\\n\\n  return (\\n    <>\\n      <MyDateRangePicker\\n        label=\\\"Date and time range\\\"\\n        /*- begin highlight -*/\\n        granularity=\\\"second\\\"\\n        /*- end highlight -*/\\n        value={date}\\n        onChange={setDate} />\\n      <MyDateRangePicker\\n        label=\\\"Date range\\\"\\n        /*- begin highlight -*/\\n        granularity=\\\"day\\\"\\n        /*- end highlight -*/\\n        value={date}\\n        onChange={setDate} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ColorSwatchPicker Events with onChange\nDESCRIPTION: Example showing how to handle color selection events using the onChange prop and display the selected color value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('#A00'));\n\n  return (\n    <div>\n      <MyColorSwatchPicker value={value} onChange={setValue}>\n        <MyColorSwatchPickerItem color=\"#A00\" />\n        <MyColorSwatchPickerItem color=\"#f80\" />\n        <MyColorSwatchPickerItem color=\"#080\" />\n        <MyColorSwatchPickerItem color=\"#08f\" />\n        <MyColorSwatchPickerItem color=\"#088\" />\n        <MyColorSwatchPickerItem color=\"#008\" />\n      </MyColorSwatchPicker>\n      <p>Selected color: {value.toString('rgb')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Text Overflow Handling in TableView\nDESCRIPTION: This example demonstrates how to change the text overflow behavior in a TableView from the default truncation to wrapping using the overflowMode=\"wrap\" prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n// Using same setup as hide header example\n<TableExample overflowMode=\"wrap\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating Schema Validation with Zod for Server-Side Validation - TypeScript/TSX\nDESCRIPTION: Demonstrates server-side form validation using the Zod schema validation library, extracting structured error maps for React Spectrum forms via the Zod 'flatten' method. It shows schema definition, validation logic with safeParse, and the proper formatting of error outputs. Requires the Zod library and FormData as input, returning an object mapping field names to error lists or empty error objects.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\n// In your server...\nimport {z} from 'zod';\n\nconst schema = z.object({\n  name: z.string().min(1),\n  age: z.coerce.number().positive()\n});\n\nfunction handleRequest(formData: FormData) {\n  let result = schema.safeParse(Object.fromEntries(formData));\n  if (!result.success) {\n    return {\n      /*- begin highlight -*/\n      errors: result.error.flatten().fieldErrors\n      /*- end highlight -*/\n    };\n  }\n\n  // Do stuff...\n\n  return {\n    errors: {}\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing International Calendars in React\nDESCRIPTION: This example demonstrates how to use the I18nProvider to render a Calendar component with the Indian calendar system in Hindi language, while still emitting Gregorian dates.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n      <Calendar aria-label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pending Button with Accessible ProgressCircle in React Aria (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a React function component ‘PendingDelayed’ that manages a pending state using useState, showing a ProgressCircle spinner conditionally while preserving accessibility for screen readers. Key parameters include isPending (the state), handlePress (triggers the pending state for 5 seconds on press), and a render prop for customizing button children based on isPending. This requires React, React Aria Button, and a custom MyProgressCircle component. The button remains in the accessibility tree even when visually hidden, complying with ARIA best practices.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction PendingDelayed(props) {\n  let [isPending, setPending] = useState(false);\n\n  let handlePress = (e) => {\n    setPending(true);\n    setTimeout(() => {\n      setPending(false);\n    }, 5000);\n  };\n\n  return (\n    <Button\n      {...props}\n      isPending={isPending}\n      onPress={handlePress}\n      style={{position: 'relative'}}>\n        {({isPending}) => (\n          <>\n            <span className={isPending ? 'pending' : undefined}>Save</span>\n            {isPending && (\n              <MyProgressCircle aria-label=\"in progress\" isIndeterminate className=\"spinner\" />\n            )}\n          </>\n        )}\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Async Image Grid with React Aria Components and Tailwind\nDESCRIPTION: Defines a React functional component `ImageGridExample` that fetches images asynchronously from the Unsplash API using `useAsyncList` from `react-stately`. It renders the images in a selectable grid layout using `ListBox` and `ListBoxItem` from `react-aria-components`, styled extensively with Tailwind CSS utility classes for layout, appearance, and state handling (e.g., `group-selected`, `group-focus-visible`). A custom `ProgressCircle` component, built with `ProgressBar` and custom SVG, indicates the loading state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/image-grid.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBox, ListBoxItem, Text, ProgressBar} from 'react-aria-components';\nimport {useAsyncList} from 'react-stately';\nimport CheckCircleIcon from '@spectrum-icons/workflow/CheckmarkCircle';\n\ntype Item = {\n  user: { name: string },\n  urls: { regular: string },\n  alt_description: string\n};\n\nfunction ImageGridExample() {\n  let list = useAsyncList<Item, number>({\n    async load({ signal, cursor }) {\n      let page = cursor || 1;\n      let res = await fetch(\n        `https://api.unsplash.com/photos?page=${page}&per_page=25&client_id=AJuU-FPh11hn7RuumUllp4ppT8kgiLS7LtOHp_sp4nc`,\n        { signal }\n      );\n      let items = await res.json();\n      return { items, cursor: page + 1 };\n    }\n  });\n\n  let renderEmptyState = () => {\n    if (list.isLoading) {\n      return <ProgressCircle />;\n    }\n  };\n\n  return (\n    <div className=\"bg-linear-to-r from-sky-500 to-teal-500 p-2 sm:p-8 rounded-lg flex justify-center\">\n      <ListBox aria-label=\"Images\" items={list.items} selectionMode=\"multiple\" layout=\"grid\" renderEmptyState={renderEmptyState} className=\"overflow-auto outline-hidden bg-white rounded-lg shadow-sm p-2 h-[350px] w-full max-w-[372px] grid grid-cols-3 gap-3 empty:flex\">\n        {item => (\n          <ListBoxItem textValue={item.user.name} className=\"relative rounded-sm outline-hidden group cursor-default\">\n            <img src={item.urls.regular} alt={item.alt_description} className=\"h-[80px] w-full object-cover rounded-sm group-selected:ring-2 group-focus-visible:ring-4 group-selected:group-focus-visible:ring-4 ring-offset-2 ring-sky-600\" />\n            <Text slot=\"label\" className=\"text-[11px] text-gray-700 font-semibold overflow-hidden text-ellipsis whitespace-nowrap max-w-full block mt-1\">{item.user.name}</Text>\n            <div className=\"absolute top-2 left-2 text-sky-800 rounded-full leading-0 bg-white border border-white border-solid hidden group-selected:block\">\n              <CheckCircleIcon size=\"S\" />\n            </div>\n          </ListBoxItem>\n        )}\n      </ListBox>\n    </div>\n  );\n}\n\nfunction ProgressCircle() {\n  return (\n    <ProgressBar aria-label=\"Loading…\" isIndeterminate className=\"flex items-center justify-center w-full\">\n      <svg className=\"animate-spin h-5 w-5 text-sky-800\" fill=\"none\" viewBox=\"0 0 24 24\">\n        <circle className=\"opacity-25 stroke-current stroke-[4px]\" cx=\"12\" cy=\"12\" r=\"10\" />\n        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n      </svg>\n    </ProgressBar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Modal Dialog with react-aria-components in TSX\nDESCRIPTION: This example demonstrates how to create a simple modal dialog using `DialogTrigger`, `Modal`, and `Dialog` components from `react-aria-components`. It includes a button to trigger the modal, which contains a basic sign-up form with input fields and a submit button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DialogTrigger, Modal, Dialog, Button, Heading, TextField, Label, Input} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button>Sign up…</Button>\n  <Modal>\n    <Dialog>\n      <form>\n        <Heading slot=\"title\">Sign up</Heading>\n        <TextField autoFocus>\n          <Label>First Name: </Label>\n          <Input />\n        </TextField>\n        <TextField>\n          <Label>Last Name: </Label>\n          <Input />\n        </TextField>\n        <Button slot=\"close\">\n          Submit\n        </Button>\n      </form>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Drag Between ListBoxes in React Spectrum\nDESCRIPTION: A comprehensive example showing how to implement drag and drop functionality between two ListBox components. It handles item reordering within lists, moving items between lists, custom drag previews, and empty state handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_52\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface FileItem {\n  id: string,\n  name: string,\n  type: string\n}\n\ninterface DndListBoxProps {\n  initialItems: FileItem[],\n  'aria-label': string\n}\n\nfunction DndListBox(props: DndListBoxProps) {\n  let list = useListData({\n    initialItems: props.initialItems\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    ///- begin collapse -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    ///- end collapse -///\n    // Provide drag data in a custom format as well as plain text.\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n\n    // Accept drops with the custom format.\n    acceptedDragTypes: ['custom-app-type'],\n\n    // Ensure items are always moved rather than copied.\n    getDropOperation: () => 'move',\n\n    // Handle drops between items from other lists.\n    async onInsert(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...processedItems);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...processedItems);\n      }\n    },\n\n    // Handle drops on the collection when empty.\n    async onRootDrop(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      list.append(...processedItems);\n    },\n\n    // Handle reordering items within the same list.\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    },\n\n    // Remove the items from the source list on drop\n    // if they were moved to a different list.\n    onDragEnd(e) {\n      if (e.dropOperation === 'move' && !e.isInternal) {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <ListBox\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      selectedKeys={list.selectedKeys}\n      onSelectionChange={list.setSelectedKeys}\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n      renderEmptyState={() => 'Drop items here'}>\n      {item => <ListBoxItem>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  <DndListBox\n    initialItems={[\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'folder', name: 'Documents' },\n      { id: '4', type: 'file', name: 'Adobe InDesign' },\n      { id: '5', type: 'folder', name: 'Utilities' },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n    ]}\n    aria-label=\"First ListBox\"\n  />\n  <DndListBox\n    initialItems={[\n      { id: '7', type: 'folder', name: 'Pictures' },\n      { id: '8', type: 'file', name: 'Adobe Fresco' },\n      { id: '9', type: 'folder', name: 'Apps' },\n      { id: '10', type: 'file', name: 'Adobe Illustrator' },\n      { id: '11', type: 'file', name: 'Adobe Lightroom' },\n      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n    ]}\n    aria-label=\"Second ListBox\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering a React Spectrum ToastRegion Component\nDESCRIPTION: Renders a `<ToastRegion>` component, which acts as a container for displaying a group of toasts within a React Spectrum application. Properties and usage details are likely available via the associated `<PropTable>`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ToastRegion>\n```\n\n----------------------------------------\n\nTITLE: Defining Base Interfaces for Input Components in TypeScript\nDESCRIPTION: This snippet defines several TypeScript interfaces (`InputBase`, `ValueBase`, `TextInputBase`, `RangeValue`, `RangeInputBase`, `Labelable`) and types (`LabelPosition`, `Alignment`, `NecessityIndicator`) that establish a common structure for input-related component props. They cover aspects like disabled/required/readonly states, validation, value handling (controlled and uncontrolled), placeholders, numeric ranges (min, max, step), and label configurations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Shared.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InputBase {\n  isDisabled?: boolean,\n  isRequired?: boolean,\n  validationState?: 'valid' | 'invalid',\n  isReadOnly?: boolean,\n  autoFocus?: boolean\n}\n\ninterface ValueBase<T> {\n  value?: T,\n  defaultValue?: T,\n  onChange?: (value: T, e?: Event) => void,\n}\n\ninterface TextInputBase {\n  placeholder?: string\n}\n\ninterface RangeValue<T> {\n  start: T,\n  end: T\n}\n\ninterface RangeInputBase<T> {\n  minValue?: T,\n  maxValue?: T,\n  step?: T // ??\n}\n\ntype LabelPosition = 'top' | 'side';\ntype Alignment = 'start' | 'end';\ntype NecessityIndicator = 'icon' | 'label';\n\ninterface Labelable {\n  label?: ReactNode,\n  isRequired?: boolean,\n  labelPosition?: LabelPosition,\n  labelAlign?: Alignment,\n  necessityIndicator?: NecessityIndicator\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling an Individual ToggleButton in a Group (JSX)\nDESCRIPTION: Shows how to disable a single toggle button within a ToggleButtonGroup by passing isDisabled to that button. Other buttons remain interactive. ARIA and UI state are managed by react-aria-components. Input: JSX with props; output: group with one disabled item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButtonGroup>\n  <ToggleButton id=\"grid\">Grid view</ToggleButton>\n  <ToggleButton id=\"list\" isDisabled>List view</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery view</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Basic Warning AlertDialog Example in React Spectrum\nDESCRIPTION: Example of a basic warning AlertDialog triggered by an ActionButton. The dialog includes a title, warning variant, and primary action button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Save</ActionButton>\n  <AlertDialog\n    title=\"Low Disk Space\"\n    variant=\"warning\"\n    primaryActionLabel=\"Confirm\">\n    You are running low on disk space.\n    Delete unnecessary files to free up space.\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Disabling an Entire React Aria CheckboxGroup (TSX)\nDESCRIPTION: This TSX snippet shows how to disable all checkboxes within a `CheckboxGroup` by setting the `isDisabled` prop on the `CheckboxGroup` component itself. Requires `CheckboxGroup` and `Checkbox` components (presumably custom `MyCheckboxGroup` and `MyCheckbox` wrapping React Aria components).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckboxGroup label=\"Favorite sports\" isDisabled>\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Support in Menu Items\nDESCRIPTION: This example shows how to enhance the MenuItem component to support links by conditionally rendering an anchor tag instead of a div when an href prop is provided. This allows menu items to navigate to other pages while maintaining accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MenuItem({item, state}) {\n  // Get props for the menu item element and child elements\n  let ref = React.useRef(null);\n  let {menuItemProps} = useMenuItem({key: item.key}, state, ref);\n  let ElementType: React.ElementType = item.props.href ? 'a' : 'div';\n\n  return (\n    <ElementType {...menuItemProps} ref={ref}>\n      {item.rendered}\n    </ElementType>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building an Animated Action Menu UI with React Aria and Tailwind (TypeScript)\nDESCRIPTION: This snippet provides a complete example of an animated, accessible menu using React Aria components with custom Tailwind CSS classes, including menu items, separators, button triggers, and popover presentation. It depends on the 'react-aria-components' library, spectrum icons, and configured Tailwind CSS plugins for styling and animation effects. Components, such as MenuTrigger, Button, Menu, MenuItem, and Popover, are composed to create an interactive experience, while custom classes ensure theming and responsiveness; the MenuExample and ActionItem components serve as core building blocks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/action-menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem, Separator} from 'react-aria-components';\nimport type {MenuItemProps} from 'react-aria-components';\nimport RailIcon from '@spectrum-icons/workflow/Rail';\n\nfunction MenuExample() {\n  return (\n    <div className=\"bg-linear-to-r to-blue-500 from-violet-500 p-8 h-[250px] rounded-lg\">\n      <MenuTrigger>\n        <Button aria-label=\"Menu\" className=\"inline-flex items-center justify-center rounded-md bg-black/20 bg-clip-padding border border-white/20 px-3 py-2 text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75\"><RailIcon size=\"S\" /></Button>\n        <Popover className=\"p-1 w-56 overflow-auto rounded-md bg-white shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in entering:zoom-in-95 exiting:animate-out exiting:fade-out exiting:zoom-out-95 fill-mode-forwards origin-top-left\">\n          <Menu className=\"outline-hidden\">\n            <ActionItem id=\"new\">New…</ActionItem>\n            <ActionItem id=\"open\">Open…</ActionItem>\n            <Separator className=\"bg-gray-300 h-[1px] mx-3 my-1\" />\n            <ActionItem id=\"save\">Save</ActionItem>\n            <ActionItem id=\"save-as\">Save as…</ActionItem>\n            <Separator className=\"bg-gray-300 h-[1px] mx-3 my-1\" />\n            <ActionItem id=\"print\">Print…</ActionItem>\n          </Menu>\n        </Popover>\n      </MenuTrigger>\n    </div>\n  );\n}\n\nfunction ActionItem(props: MenuItemProps) {\n  return <MenuItem {...props} className=\"group flex w-full items-center rounded-md px-3 py-2 box-border outline-hidden cursor-default text-gray-900 focus:bg-violet-500 focus:text-white\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Grid Layout in React Spectrum using TSX\nDESCRIPTION: This TSX example demonstrates building a responsive page layout using the React Spectrum `Grid` component. It defines different `areas` and `columns` for base, medium (M), and large (L) breakpoints. The example also conditionally hides an element (`View` with gridArea 'toc') on smaller screens using the `isHidden` prop with object syntax and uses a nested `Flex` component with responsive direction for the navigation area. Dependencies include `Grid`, `View`, and `Flex` components from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/layout.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Grid\n  areas={{\n    base: [\n      'header',\n      'nav',\n      'content',\n      'footer'\n    ],\n    M: [\n      'header   header',\n      'nav      content',\n      'nav      content',\n      'footer   footer'\n    ],\n    L: [\n      'header header  header',\n      'nav    content toc',\n      'nav    content toc',\n      'footer footer  footer'\n    ],\n  }}\n  columns={{\n    M: ['size-2000', '1fr'],\n    L: ['size-2000', '1fr', 'size-2000']\n  }}\n  gap=\"size-100\">\n  <View\n    backgroundColor=\"celery-600\"\n    gridArea=\"header\"\n    height=\"size-1000\" />\n  <View\n    backgroundColor=\"blue-600\"\n    gridArea=\"nav\">\n    <Flex direction={{base: 'row', M: 'column'}} gap=\"size-100\" margin=\"size-100\">\n      <View backgroundColor=\"static-gray-50\" height=\"size-250\" minWidth=\"size-900\" />\n      <View backgroundColor=\"static-gray-50\" height=\"size-250\" minWidth=\"size-900\" />\n      <View backgroundColor=\"static-gray-50\" height=\"size-250\" minWidth=\"size-900\" />\n    </Flex>\n  </View>\n  <View\n    backgroundColor=\"purple-600\"\n    gridArea=\"content\"\n    height=\"size-4600\" />\n  <View\n    backgroundColor=\"magenta-600\"\n    gridArea=\"toc\"\n    minHeight=\"size-1000\"\n    isHidden={{base: true, L: false}} />\n  <View\n    backgroundColor=\"seafoam-600\"\n    gridArea=\"footer\"\n    height=\"size-1000\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Class Application Based on Selection State - React JSX\nDESCRIPTION: Uses a function for the className prop on ListBoxItem to apply conditional utility classes based on selection state. Requires React and React Aria. Parameter: isSelected boolean; Outputs: ListBoxItem styled with either 'bg-blue-400' or 'bg-gray-100', ideal when using libraries like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Implementing Searchable Select Component in React\nDESCRIPTION: Defines the SelectExample component, which combines Select, Autocomplete, and SearchField to create a filterable dropdown. It uses React Aria Components and custom styling with Tailwind CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/searchable-select.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction SelectExample() {\n  let {contains} = useFilter({sensitivity: 'base'});\n\n  return (\n    <div className=\"bg-linear-to-br from-cyan-200 to-blue-400 p-8 sm:h-[350px] rounded-lg flex justify-center\">\n      <Select className=\"flex flex-col gap-1 w-[200px]\">\n        <Label className=\"text-black cursor-default\">Language</Label>\n        <Button className=\"flex items-center cursor-default rounded-lg border-0 bg-white/90 pressed:bg-white transition py-2 pl-5 pr-2 text-base text-left leading-normal ring-1 ring-black/5 shadow-md text-gray-700 focus:outline-hidden focus-visible:outline-2 outline-black outline-offset-3 focus-visible:ring-black/25\">\n          <SelectValue className=\"flex-1 truncate\" />\n          <ChevronsUpDownIcon className=\"w-4 h-4\" />\n        </Button>\n        <Popover className=\"!max-h-80 w-(--trigger-width) flex flex-col rounded-md bg-white text-base shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out\">\n          <Autocomplete filter={contains}>\n            <SearchField aria-label=\"Search\" autoFocus className=\"group flex items-center bg-white forced-colors:bg-[Field] border-2 border-gray-300 has-focus:border-sky-600 rounded-full m-1\">\n              <SearchIcon aria-hidden className=\"w-4 h-4 ml-2 text-gray-600 forced-colors:text-[ButtonText]\" />\n              <Input placeholder=\"Search languages\" className=\"px-2 py-1 flex-1 min-w-0 border-none outline outline-0 bg-white text-base text-gray-800 placeholder-gray-500 font-[inherit] [&::-webkit-search-cancel-button]:hidden\" />\n              <Button className=\"text-sm text-center transition rounded-full border-0 p-1 flex items-center justify-center text-gray-600 bg-transparent hover:bg-black/[5%] pressed:bg-black/10 mr-1 w-6 group-empty:invisible\">\n                <XIcon aria-hidden className=\"w-4 h-4\" />\n              </Button>\n            </SearchField>\n            <ListBox items={languages} className=\"outline-hidden p-1 overflow-auto flex-1 scroll-pb-1\">\n              {item => <SelectItem>{item.name}</SelectItem>}\n            </ListBox>\n          </Autocomplete>\n        </Popover>\n      </Select>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipe-to-Delete List Items with Framer Motion in React - JavaScript\nDESCRIPTION: This snippet shows how to build a swipe-to-delete list item in React using Framer Motion for drag/animation and Tailwind CSS for visual styling. A MotionItem component controls the item's position, and button reveal logic is handled via drag gestures. The delete button is dynamically sized and animated based on swipe position, with keyboard accessibility through focus/blur handlers. The solution requires React, Framer Motion, and Tailwind CSS as dependencies. Main props include event handlers such as onRemove, drag state, and alignment configuration. Inputs are user interactions (drag or key events), and the output is an animated, interactive list item supporting swipe to delete and keyboard operation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ios-list.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Take item out of the flow if it is being removed.\nstyle={{ position: isPresent ? \"relative\" : \"absolute\" }}\n>\n  {/* @ts-ignore - Framer Motion's types don't handle functions properly. */}\n  {({ selectionMode, isSelected }) => (\n    // Content of the item can be swiped to reveal the delete button, or fully swiped to delete.\n    <motion.div\n      ref={ref}\n      style={{ x, \"--x\": xPx } as CSSProperties}\n      className=\"flex items-center\"\n      drag={selectionMode === \"none\" ? \"x\" : undefined}\n      dragConstraints={{ right: 0 }}\n      onDragEnd={(e, { offset }) => {\n        // If the user dragged past 80% of the width, remove the item\n        // otherwise animate back to the nearest snap point.\n        let v = offset.x > -20 ? 0 : -100;\n        if (x.get() < -ref.current.offsetWidth * 0.8) {\n          v = -ref.current.offsetWidth;\n          onRemove();\n        }\n        animate(x, v, { ...inertiaTransition, min: v, max: v });\n      }}\n      onDragStart={() => {\n        // Cancel react-aria press event when dragging starts.\n        document.dispatchEvent(new PointerEvent(\"pointercancel\"));\n      }}\n    >\n      {selectionMode === \"multiple\" && (\n        <SelectionCheckmark isSelected={isSelected} />\n      )}\n      <motion.div\n        layout\n        layoutDependency={selectionMode}\n        transition={{ duration: 0.25 }}\n        className=\"relative flex items-center px-4 py-2 z-10\"\n      >\n        {children}\n      </motion.div>\n      {selectionMode === \"none\" && (\n        <Button\n          className=\"bg-red-600 pressed:bg-red-700 cursor-default text-lg outline-hidden border-none transition-colors text-white flex items-center absolute top-0 left-[100%] py-2 h-full z-0 isolate focus-visible:outline focus-visible:outline-blue-600 focus-visible:-outline-offset-2\"\n          style={{\n            // Calculate the size of the button based on the drag position,\n            // which is stored in a CSS variable above.\n            width: \"max(100px, calc(-1 * var(--x)))\",\n            justifyContent: align\n          }}\n          onPress={onRemove}\n          // Move the button into view when it is focused with the keyboard\n          // (e.g. via the arrow keys).\n          onFocus={() => x.set(-100)}\n          onBlur={() => x.set(0)}\n        >\n          <motion.span\n            initial={false}\n            className=\"px-4\"\n            animate={{\n              // Whenever the alignment changes, perform a keyframe animation\n              // between the previous position and new position. This is done\n              // by calculating a transform for the previous alignment and\n              // animating it back to zero.\n              transform:\n                align === \"start\"\n                  ? [\"translateX(calc(-100% - var(--x)))\", \"translateX(0)\"]\n                  : [\"translateX(calc(100% + var(--x)))\", \"translateX(0)\"]\n            }}\n          >\n            Delete\n          </motion.span>\n        </Button>\n      )}\n    </motion.div>\n  )}\n</MotionItem>\n);\n\nfunction SelectionCheckmark({ isSelected }) {\n  return (\n    <motion.svg\n      aria-hidden=\"true\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      className=\"w-6 h-6 shrink-0 ml-4\"\n      initial={{ x: -40 }}\n      animate={{ x: 0 }}\n      transition={{ duration: 0.25 }}\n    >\n      {!isSelected && (\n        <circle\n          r={9}\n          cx={12}\n          cy={12}\n          stroke=\"currentColor\"\n          fill=\"none\"\n          strokeWidth={1}\n          className=\"text-gray-400\"\n        />\n      )}\n      {isSelected && (\n        <path\n          className=\"text-blue-600\"\n          fillRule=\"evenodd\"\n          d=\"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z\"\n          clipRule=\"evenodd\"\n        />\n      )}\n    </motion.svg>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Dictionary to LocalizedStringProvider (TSX)\nDESCRIPTION: Shows how to pass a custom `LocalizedStringDictionary` (created using `createLocalizedStringDictionary`) to the `LocalizedStringProvider` component alongside the `locale` prop. This optimizes the application by ensuring only the localization strings for the specified components are loaded, reducing bundle size.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<LocalizedStringProvider locale={locale} dictionary={dictionary} />\n```\n```\n\n----------------------------------------\n\nTITLE: Handling TableView Selection with ActionBar for Bulk Actions (TypeScript, React Spectrum)\nDESCRIPTION: This code provides an example of integrating ActionBar with a TableView, managing selection state and triggering actions based on user interaction. It sets up columns, rows, and handlers for both ActionBar actions and the clear selection event. It depends on '@adobe/react-spectrum', '@react-spectrum/actionbar', '@react-spectrum/table', and icon libraries. The main inputs are row data and selectedKeys; output feedback is via alert dialogs. Props like onClearSelection and onAction allow for custom side-effect handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actionbar/docs/ActionBar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction ActionBarActions(props) {\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));\n  let rows = [\n    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n  ];\n\n  return (\n    <ActionBarContainer height=\"size-5000\">\n      <TableView aria-label=\"Table with action bar and controlled selection\" selectionMode=\"multiple\" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>\n        <TableHeader>\n          <Column key=\"name\">Name</Column>\n          <Column key=\"type\">Type</Column>\n          <Column key=\"level\" align=\"end\">Level</Column>\n        </TableHeader>\n        <TableBody items={rows}>\n          {item => (\n            <Row>\n              {columnKey => <Cell>{item[columnKey]}</Cell>}\n            </Row>\n          )}\n        </TableBody>\n      </TableView>\n      <ActionBar\n        isEmphasized\n        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}\n        /*- begin highlight -*/\n        onClearSelection={() => {\n          setSelectedKeys(new Set());\n        }}\n        onAction={key => alert(`Performing ${key} action...`)}\n        /*- end highlight -*/>\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Button with Icon and Label using Spectrum and JSX (TypeScript)\nDESCRIPTION: This snippet shows how to compose a Button with both an icon (Bell) and a label, using the Spectrum 'Button' and 'Text' components. It demonstrates typical icon and label pairing, which improves user interface clarity and accessibility. Requires '@react-spectrum/button', '@spectrum-icons/workflow/Bell', and '@react-spectrum/text' as dependencies, and accepts both icon and text as children.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from '@react-spectrum/text';\\n\\n<Button variant=\\\"primary\\\">\\n  <Bell />\\n  <Text>Icon + Label</Text>\\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Tree Using Reusable Components in React Aria\nDESCRIPTION: This example demonstrates how to use the reusable MyTreeItem component to render a tree structure with less code. It includes default expanded keys and nested items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Tree aria-label=\"Files\" style={{height: '300px'}} defaultExpandedKeys={['documents', 'photos', 'project']}>\n  <MyTreeItem title=\"Documents\">\n    <MyTreeItem title=\"Project\">\n      <MyTreeItem title=\"Weekly Report\" />\n    </MyTreeItem>\n  </MyTreeItem>\n  <MyTreeItem title=\"Photos\">\n    <MyTreeItem title=\"Image 1\" />\n    <MyTreeItem title=\"Image 2\" />\n  </MyTreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Validating TimeField with FieldError Integration in React Forms (TypeScript)\nDESCRIPTION: Demonstrates how to use FieldError with TimeField as part of an accessible form built with react-aria-components components. Requires Form, FieldError, and Button from react-aria-components. Validation errors (e.g., missing required time) are displayed in a consistent manner below the input, short-circuiting on browser or custom validation. The validation style may be customized via CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\\n\\n<Form>\\n  {/*- begin highlight -*/}\\n  <TimeField name=\"time\" isRequired>\\n  {/*- end highlight -*/}\\n    <Label>Meeting time</Label>\\n    <DateInput>\\n      {segment => <DateSegment segment={segment} />}\\n    </DateInput>\\n    {/*- begin highlight -*/}\\n    <FieldError />\\n    {/*- end highlight -*/}\\n  </TimeField>\\n  <Button type=\"submit\">Submit</Button>\\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Using Zod for Server-Side Schema Validation (TSX)\nDESCRIPTION: Server-side TypeScript code demonstrating schema validation using the Zod library. It defines a schema, parses incoming `FormData`, and uses Zod's `safeParse` and `flatten` methods to generate a structured error object suitable for the React Aria `Form` component's `validationErrors` prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// In your server...\nimport {z} from 'zod';\n\nconst schema = z.object({\n  name: z.string().min(1),\n  age: z.coerce.number().positive()\n});\n\nfunction handleRequest(formData: FormData) {\n  let result = schema.safeParse(Object.fromEntries(formData));\n  if (!result.success) {\n    return {\n      /*- begin highlight -*/\n      errors: result.error.flatten().fieldErrors\n      /*- end highlight -*/\n    };\n  }\n\n  // Do stuff...\n\n  return {\n    errors: {}\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Widths in React Spectrum TableView (TSX)\nDESCRIPTION: Demonstrates configuring column widths in a React Spectrum `TableView` using various props on the `<Column>` component. It showcases `defaultWidth` with fractional units (`1fr`) for flexible space distribution, `maxWidth` for limiting width, fixed pixel `width`, and `minWidth` to set a minimum size. These props control the initial layout and constraints for column sizing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<TableView aria-label=\"Example table for column widths\" maxWidth={320}>\n  <TableHeader>\n    <Column defaultWidth=\"1fr\" align=\"start\">Name</Column>\n    <Column maxWidth={80}>Type</Column>\n    <Column width={80}>Size</Column>\n    <Column minWidth={100} align=\"end\">Date Modified</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2021406_Proposal</Cell>\n      <Cell>PDF</Cell>\n      <Cell>86 KB</Cell>\n      <Cell>April 12</Cell>\n    </Row>\n    <Row>\n      <Cell>Budget Template</Cell>\n      <Cell>XLS</Cell>\n      <Cell>120 KB</Cell>\n      <Cell>November 27</Cell>\n    </Row>\n    <Row>\n      <Cell>Onboarding</Cell>\n      <Cell>PPT</Cell>\n      <Cell>472 KB</Cell>\n      <Cell>January 7</Cell>\n    </Row>\n    <Row>\n      <Cell>Welcome</Cell>\n      <Cell>TXT</Cell>\n      <Cell>24 KB</Cell>\n      <Cell>February 11</Cell>\n    </Row>\n  </TableBody>\n</TableView>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Drag and Drop Between React Tables\nDESCRIPTION: This comprehensive example demonstrates how to implement bidirectional drag and drop functionality between two React tables. It includes features such as reordering items within the same table, handling empty states, and ensuring items are moved rather than copied.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface FileItem {\n  id: string,\n  name: string,\n  type: string\n}\n\ninterface DndTableProps {\n  initialItems: FileItem[],\n  'aria-label': string\n}\n\nfunction DndTable(props: DndTableProps) {\n  let list = useListData({\n    initialItems: props.initialItems\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type'],\n    getDropOperation: () => 'move',\n    async onInsert(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...processedItems);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...processedItems);\n      }\n    },\n    async onRootDrop(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      list.append(...processedItems);\n    },\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    },\n    onDragEnd(e) {\n      if (e.dropOperation === 'move' && !e.isInternal) {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <Table\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      selectedKeys={list.selectedKeys}\n      onSelectionChange={list.setSelectedKeys}\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader>\n        <Column />\n        <Column><MyCheckbox slot=\"selection\" /></Column>\n        <Column>ID</Column>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n      </TableHeader>\n      <TableBody items={list.items} renderEmptyState={() => 'Drop items here'}>\n        {item => (\n          <Row>\n            <Cell><Button slot=\"drag\">≡</Button></Cell>\n            <Cell><MyCheckbox slot=\"selection\" /></Cell>\n            <Cell>{item.id}</Cell>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Destructive Alert Dialog Component\nDESCRIPTION: Creates a modal dialog component with animation effects using React Aria Components and Tailwind CSS. The dialog includes a delete confirmation message, warning icon, and action buttons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/destructive-dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DialogTrigger, Button, ModalOverlay, Modal, Dialog, Heading} from 'react-aria-components';\nimport AlertIcon from '@spectrum-icons/workflow/Alert';\n\nfunction ModalExample() {\n  return (\n    <div className=\"bg-linear-to-r from-sky-400 to-indigo-500 p-12 rounded-lg flex justify-center\">\n      <DialogTrigger>\n        <Button className=\"inline-flex items-center justify-center rounded-md bg-black/20 bg-clip-padding border border-white/20 px-3.5 py-2 font-medium font-[inherit] text-base text-white hover:bg-black/30 pressed:bg-black/40 transition-colors cursor-default outline-hidden focus-visible:ring-2 focus-visible:ring-white/75\">Delete…</Button>\n        <ModalOverlay className={({isEntering, isExiting}) => `\n          fixed inset-0 z-10 overflow-y-auto bg-black/25 flex min-h-full items-center justify-center p-4 text-center backdrop-blur\n          ${isEntering ? 'animate-in fade-in duration-300 ease-out' : ''}\n          ${isExiting ? 'animate-out fade-out duration-200 ease-in' : ''}\n        `}>\n          <Modal className={({isEntering, isExiting}) => `\n            w-full max-w-md overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl\n            ${isEntering ? 'animate-in zoom-in-95 ease-out duration-300' : ''}\n            ${isExiting ? 'animate-out zoom-out-95 ease-in duration-200' : ''}\n          `}>\n            <Dialog role=\"alertdialog\" className=\"outline-hidden relative\">\n              {({ close }) => (<>\n                <Heading slot=\"title\" className=\"text-xxl font-semibold leading-6 my-0 text-slate-700\">Delete folder</Heading>\n                <div className=\"w-6 h-6 text-red-500 absolute right-0 top-0 stroke-2\"><AlertIcon size=\"M\" /></div>\n                <p className=\"mt-3 text-slate-500\">\n                  Are you sure you want to delete \"Documents\"? All contents will be permanently destroyed.\n                </p>\n                <div className=\"mt-6 flex justify-end gap-2\">\n                  <DialogButton\n                    className=\"bg-slate-200 text-slate-800 hover:border-slate-300 pressed:bg-slate-300\"\n                    onPress={close}>\n                    Cancel\n                  </DialogButton>\n                  <DialogButton\n                    className=\"bg-red-500 text-white hover:border-red-600 pressed:bg-red-600\"\n                    onPress={close}>\n                    Delete\n                  </DialogButton>\n                </div>\n              </>)}\n            </Dialog>\n          </Modal>\n        </ModalOverlay>\n      </DialogTrigger>\n    </div>\n  );\n}\n\nfunction DialogButton({className, ...props}) {\n  return <Button {...props} className={`inline-flex justify-center rounded-md border border-solid border-transparent px-5 py-2 font-semibold font-[inherit] text-base transition-colors cursor-default outline-hidden focus-visible:ring-2 ring-blue-500 ring-offset-2 ${className}`} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CalendarCell Component in React\nDESCRIPTION: This snippet demonstrates how to create a CalendarCell component using the useCalendarCell hook from React Aria. It renders an individual cell in a calendar, handling selection, disabled states, and date formatting.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCalendarCell} from '@react-aria/calendar';\n\nfunction CalendarCell({state, date}) {\n  let ref = React.useRef(null);\n  let {\n    cellProps,\n    buttonProps,\n    isSelected,\n    isOutsideVisibleRange,\n    isDisabled,\n    isUnavailable,\n    formattedDate\n  } = useCalendarCell({date}, state, ref);\n\n  return (\n    <td {...cellProps}>\n      <div\n        {...buttonProps}\n        ref={ref}\n        hidden={isOutsideVisibleRange}\n        className={`cell ${isSelected ? 'selected' : ''} ${isDisabled ? 'disabled' : ''} ${isUnavailable ? 'unavailable' : ''}`}>\n        {formattedDate}\n      </div>\n    </td>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Read-only Calendar Implementation\nDESCRIPTION: Demonstrates creating a read-only Calendar using the isReadOnly prop, which maintains focusability while making the value immutable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar aria-label=\"Event date\" value={today(getLocalTimeZone())} isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Menu Components with CSS\nDESCRIPTION: This CSS snippet provides basic styling for menu components built using React Aria hooks. It targets elements with specific ARIA roles (`menu`, `menuitem`, `menuitemradio`, `menuitemcheckbox`) to style the menu container and individual items. Styles include resetting list defaults, setting width, padding, cursor, focus appearance, and styling for disabled items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n[role=menu] {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  width: 200px;\n}\n\n[role=menuitem],\n[role=menuitemradio],\n[role=menuitemcheckbox] {\n  padding: 2px 5px;\n  outline: none;\n  cursor: default;\n  display: flex;\n  justify-content: space-between;\n  color: black;\n\n  &:focus {\n    background: gray;\n    color: white;\n  }\n\n  &[aria-disabled] {\n    color: gray;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Row Actions with Selection Modes - React Spectrum - TypeScript/JSX\nDESCRIPTION: This example renders two ExampleList components side by side, each illustrating different selectionBehaviors ('toggle' vs 'replace') and hooking into the onAction callback to trigger alerts when rows are acted upon. It uses inline styling for layout and demonstrates both checkbox-style and highlight-style selection UI. Useful for showcasing actionable rows, and requires ExampleList component and React/React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n<div style={{ display: 'flex', flexWrap: 'wrap', gap: 24 }}>\n  <ExampleList aria-label=\"Checkbox selection list with row actions\" selectionMode=\"multiple\" selectionBehavior=\"toggle\" onAction={key => alert(`Opening item ${key}...`)} />\n  <ExampleList aria-label=\"Highlight selection list with row actions\" selectionMode=\"multiple\" selectionBehavior=\"replace\" onAction={key => alert(`Opening item ${key}...`)} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a DatePicker Component with React Aria\nDESCRIPTION: A complete example of creating a DatePicker component using the useDatePicker hook from React Aria. This component combines a date field, button, and calendar popup to create an accessible date picker experience.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useDatePickerState} from '@react-stately/datepicker';\nimport {useDatePicker} from '@react-aria/datepicker';\n\n// Reuse the DateField, Popover, Dialog, Calendar, and Button from your component library.\nimport {DateField, Popover, Dialog, Calendar, Button} from 'your-component-library';\n\nfunction DatePicker(props) {\n  let state = useDatePickerState(props);\n  let ref = React.useRef(null);\n  let {groupProps, labelProps, fieldProps, buttonProps, dialogProps, calendarProps} = useDatePicker(props, state, ref);\n\n  return (\n    <div style={{display: 'inline-flex', flexDirection: 'column'}}>\n      <div {...labelProps}>{props.label}</div>\n      <div {...groupProps} ref={ref} style={{display: 'flex'}}>\n        <DateField {...fieldProps} />\n        <Button {...buttonProps}>🗓</Button>\n      </div>\n      {state.isOpen &&\n        <Popover state={state} triggerRef={ref} placement=\"bottom start\">\n          <Dialog {...dialogProps}>\n            <Calendar {...calendarProps} firstDayOfWeek={props.firstDayOfWeek} />\n          </Dialog>\n        </Popover>\n      }\n    </div>\n  );\n}\n\n<DatePicker label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Complete Draggable ListView Implementation with React Spectrum\nDESCRIPTION: Combines useListData, useDragAndDrop, and ListView to create a fully functional draggable list component. The component allows users to drag items from the list and removes them on successful drop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Item, ListView, useListData} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@react-spectrum/dnd';\n\nfunction DraggableList() {\n  let list = useListData({\n    initialItems: [\n      {id: 'a', type: 'file', name: 'Adobe Photoshop'},\n      {id: 'b', type: 'file', name: 'Adobe XD'},\n      {id: 'c', type: 'file', name: 'Adobe Dreamweaver'},\n      {id: 'd', type: 'file', name: 'Adobe InDesign'},\n      {id: 'e', type: 'file', name: 'Adobe Connect'}\n    ]\n  });\n\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems: (keys) => [...keys].map(key => {\n      let item = list.getItem(key);\n      return {\n        'adobe-app': JSON.stringify(item)\n      };\n    }),\n    onDragEnd: (e) => {\n      if (e.dropOperation === 'move') {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable list view example\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      selectionMode=\"multiple\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}>\n      {item => (\n        <Item textValue={item.name}>\n          {item.name}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Aria Components README Documentation\nDESCRIPTION: Markdown documentation describing the main features and capabilities of React Aria Components library, including styleability, adaptive behavior, accessibility support, internationalization, and customization options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [React Aria Components](https://react-spectrum.adobe.com/react-aria/index.html)\n\nOver 50 components with built-in behavior, adaptive interactions, top-tier accessibility, and internationalization out of the box, ready for your styles.\n\n## Features\n\n* 🎨 **Styleable** – React Aria is style-free out of the box, allowing you to build custom designs to fit your application or design system using any styling and animation solution. Each component is broken down into individual parts with built-in states, render props, and slots that make styling a breeze.\n* 📱 **Adaptive** – React Aria ensures a great experience for users, no matter their device. All components are optimized for mouse, touch, keyboard, and screen reader interactions, with a meticulous attention to detail that makes your app feel responsive and natural on every platform.\n* ♿️ **Accessible** – React Aria is designed with accessibility as a top priority, and battle tested in production applications. All components are built to work across a wide variety of devices and assistive technologies to ensure the best experience possible for all users.\n* 🌍 **International** – React Aria is engineered for internationalization out of the box, including translations in over 30 languages, localized date and number formatting and parsing, support for 13 calendar systems, 5 numbering systems, right-to-left layout, and more.\n* ⚙️ **Customizable** – React Aria offers a flexible and scalable API that lets you dive as deep into the details as you like. Start with high-level components with a built-in DOM structure and simple styling API, compose custom patterns with contexts, and for the ultimate control, drop down to the low-level Hook-based API. Mix and match as needed.\n\n## Documentation\n\nYou can learn more about React Aria Components in our [documentation](https://react-spectrum.adobe.com/react-aria/index.html).\n```\n\n----------------------------------------\n\nTITLE: Importing RadioGroup Component in React\nDESCRIPTION: This snippet shows how to import the necessary components from react-aria-components to create a RadioGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RadioGroup, Radio, Label} from 'react-aria-components';\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Sections in ComboBox\nDESCRIPTION: This example shows how to create ComboBox sections from a hierarchical data structure. It uses the items prop on Section component to dynamically generate grouped options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {name: 'Fruit', children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Orange'},\n      {name: 'Honeydew'},\n      {name: 'Grapes'},\n      {name: 'Watermelon'},\n      {name: 'Cantaloupe'},\n      {name: 'Pear'}\n    ]},\n    {name: 'Vegetable', children: [\n      {name: 'Cabbage'},\n      {name: 'Broccoli'},\n      {name: 'Carrots'},\n      {name: 'Lettuce'},\n      {name: 'Spinach'},\n      {name: 'Bok Choy'},\n      {name: 'Cauliflower'},\n      {name: 'Potatoes'}\n    ]}\n  ];\n\n  return (\n    <ComboBox label=\"Preferred fruit or vegetable\" defaultItems={options}>\n      {item => (\n        <Section key={item.name} items={item.children} title={item.name}>\n          {item => <Item key={item.name}>{item.name}</Item>}\n        </Section>\n      )}\n    </ComboBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Static TableView with Hardcoded Data - React Spectrum (TSX)\nDESCRIPTION: Demonstrates how to implement a TableView with hardcoded (static) columns and rows. The TableView is rendered with three fixed columns (Name, Type, and Date Modified) and four rows of data. Requires prior import of the relevant TableView, TableHeader, TableBody, Row, Cell, and Column components. Inputs are directly embedded in the component tree; outputs are a rendered, selectable Spectrum-styled table. The 'selectionMode' prop enables user selection. No external data dependency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TableView aria-label=\"Example table with static contents\" selectionMode=\"multiple\">\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column align=\"end\">Date Modified</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>Games</Cell>\n      <Cell>File folder</Cell>\n      <Cell>6/7/2020</Cell>\n    </Row>\n    <Row>\n      <Cell>Program Files</Cell>\n      <Cell>File folder</Cell>\n      <Cell>4/7/2021</Cell>\n    </Row>\n    <Row>\n      <Cell>bootmgr</Cell>\n      <Cell>System file</Cell>\n      <Cell>11/20/2010</Cell>\n    </Row>\n    <Row>\n      <Cell>log.txt</Cell>\n      <Cell>Text Document</Cell>\n      <Cell>1/18/2016</Cell>\n    </Row>\n  </TableBody>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Component in React with TypeScript\nDESCRIPTION: This snippet shows how to create a Calendar component using React Aria and React Stately hooks. It includes a CalendarGrid and CalendarCell subcomponents for rendering the calendar structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCalendarState} from '@react-stately/calendar';\nimport {useCalendar, useCalendarGrid, useCalendarCell} from '@react-aria/calendar';\nimport {createCalendar, getWeeksInMonth} from '@internationalized/date';\n\nfunction Calendar(props) {\n  let {locale} = useLocale();\n  let state = useCalendarState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  let {calendarProps, prevButtonProps, nextButtonProps, title} = useCalendar(props, state);\n\n  return (\n    <div {...calendarProps} className=\"calendar\">\n      <div className=\"header\">\n        <h2>{title}</h2>\n        <Button {...prevButtonProps}>&lt;</Button>\n        <Button {...nextButtonProps}>&gt;</Button>\n      </div>\n      <CalendarGrid state={state} firstDayOfWeek={props.firstDayOfWeek} />\n    </div>\n  );\n}\n\nfunction CalendarGrid({state, ...props}) {\n  let {locale} = useLocale();\n  let {gridProps, headerProps, weekDays} = useCalendarGrid(props, state);\n\n  let weeksInMonth = getWeeksInMonth(state.visibleRange.start, locale);\n\n  return (\n    <table {...gridProps}>\n      <thead {...headerProps}>\n        <tr>\n          {weekDays.map((day, index) =>\n            <th key={index}>{day}</th>\n          )}\n        </tr>\n      </thead>\n      <tbody>\n        {[...new Array(weeksInMonth).keys()].map(weekIndex => (\n          <tr key={weekIndex}>\n            {state.getDatesInWeek(weekIndex).map((date, i) => (\n              date ? (\n                <CalendarCell\n                  key={i}\n                  state={state}\n                  date={date} />\n              ) : <td key={i} />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction CalendarCell({state, date}) {\n  let ref = React.useRef(null);\n  let {\n    cellProps,\n    buttonProps,\n    isSelected,\n    isOutsideVisibleRange,\n    isDisabled,\n    isUnavailable,\n    formattedDate\n  } = useCalendarCell({date}, state, ref);\n\n  return (\n    <td {...cellProps}>\n      <div\n        {...buttonProps}\n        ref={ref}\n        hidden={isOutsideVisibleRange}\n        className={`cell ${isSelected ? 'selected' : ''} ${isDisabled ? 'disabled' : ''} ${isUnavailable ? 'unavailable' : ''}`}>\n        {formattedDate}\n      </div>\n    </td>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Wrapper Components with React Aria\nDESCRIPTION: Shows how to create custom wrapper components that extend the functionality of built-in React Aria components, allowing for consistent styling and prop customization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_56\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyItem(props) {\n  return <ListBoxItem {...props} className=\"my-item\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection in React Spectrum Menu\nDESCRIPTION: Shows how to implement single selection mode in a React Spectrum Menu component. It uses the selectionMode prop and demonstrates controlled selection with state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['center']));\n\n  return (\n    <>\n      <MyMenuButton label=\"Align\" selectionMode=\"single\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <MenuItem id=\"left\">Left</MenuItem>\n        <MenuItem id=\"center\">Center</MenuItem>\n        <MenuItem id=\"right\">Right</MenuItem>\n      </MyMenuButton>\n      <p>Current selection (controlled): {[...selected].join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Plugins for React Aria with Tailwind v3 (JavaScript)\nDESCRIPTION: This code configures the required plugins for using react-aria-components in a Tailwind v3 project by listing them in the plugins array within tailwind.config.js. It requires the appropriate plugin versions and integrates them for use throughout the React project. Make sure to install the correct version of tailwindcss-react-aria-components (1.x) for compatibility; input is a module.exports object, and output is a configured Tailwind toolchain.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/account-menu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Making a TextField Read-Only (TypeScript/React)\nDESCRIPTION: Demonstrates rendering an immutable but focusable TextField using isReadOnly, allowing copying but not editing. Prerequisites: TextField implementation with isReadOnly logic, React, and TypeScript. Key prop: isReadOnly. Output: focusable input, text selectable but uneditable. Functionally distinct from disabled, as it remains interactive for selection and focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\n<TextField label=\"Email\" defaultValue=\"abc@adobe.com\" isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Usage in React Spectrum\nDESCRIPTION: Demonstrates the basic usage of the Slider component with a default value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider label=\"Cookies to buy\" defaultValue={12} />\n```\n\n----------------------------------------\n\nTITLE: Using SearchAutocomplete with Dynamic Collections in React (tsx)\nDESCRIPTION: This example shows how to populate a `SearchAutocomplete` component with options from a dynamic data source (an array) using the `defaultItems` prop. It also demonstrates handling the `onSubmit` event to capture the submitted value or the key of the selected item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n  let [major, setMajor] = React.useState(null);\n\n  let onSubmit = (value, key) => {\n    if (value) {\n      setMajor(value);\n    } else if (key) {\n      setMajor(options.find(o => o.id === key).name);\n    }\n  };\n\n  return (\n    <>\n      <SearchAutocomplete\n        label=\"Search engineering majors\"\n        defaultItems={options}\n        onSubmit={onSubmit}>\n        {(item) => <Item>{item.name}</Item>}\n      </SearchAutocomplete>\n      <p>Results for: {major}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Description Help Text to TextField (TypeScript/React)\nDESCRIPTION: Shows providing additional context to users by supplying a description prop to TextField, rendering extra help text. Assumes prior import of the TextField component, runs in React and TypeScript environments. Key parameter is description, with output being help text rendered below the input. Simple configuration, no new logic involved.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n<TextField\\n  label=\"Email\"\\n  description=\"Enter an email for us to contact you about your order.\" />\n```\n\n----------------------------------------\n\nTITLE: Composing Table Structure with React Spectrum - TypeScript/React\nDESCRIPTION: Defines the root Table component, orchestrating child table sections and cells by composing React Aria and React Stately hooks for accessibility and state. Uses state for selection and sorting, and renders rows for table headers and body with flexible cell rendering based on selection logic. Requires @react-aria/table, @react-stately/table, @react-aria/utils, @react-aria/focus, and React as dependencies. Expects table data via props and returns a full HTML table with accessible interactions, supporting both single and multiple selection modes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Cell, Column, Row, TableBody, TableHeader, useTableState} from '@react-stately/table';\\nimport {mergeProps} from '@react-aria/utils';\\nimport {useRef} from 'react';\\nimport {useFocusRing} from '@react-aria/focus';\\nimport {useTable} from '@react-aria/table';\\n\\nfunction Table(props) {\\n  let {selectionMode, selectionBehavior} = props;\\n  let state = useTableState({\\n    ...props,\\n    showSelectionCheckboxes: selectionMode === 'multiple' && selectionBehavior !== 'replace'\\n  });\\n\\n  let ref = useRef<HTMLTableElement | null>(null);\\n  let {collection} = state;\\n  let {gridProps} = useTable(props, state, ref);\\n\\n  return (\\n    <table {...gridProps} ref={ref} style={{borderCollapse: 'collapse'}}>\\n      <TableRowGroup type=\"thead\">\\n        {collection.headerRows.map(headerRow => (\\n          <TableHeaderRow key={headerRow.key} item={headerRow} state={state}>\\n            {[...headerRow.childNodes].map(column =>\\n              column.props.isSelectionCell\\n                ? <TableSelectAllCell key={column.key} column={column} state={state} />\\n                : <TableColumnHeader key={column.key} column={column} state={state} />\\n            )}\\n          </TableHeaderRow>\\n        ))}\\n      </TableRowGroup>\\n      <TableRowGroup type=\"tbody\">\\n        {[...collection.body.childNodes].map(row => (\\n          <TableRow key={row.key} item={row} state={state}>\\n            {[...row.childNodes].map(cell =>\\n              cell.props.isSelectionCell\\n                ? <TableCheckboxCell key={cell.key} cell={cell} state={state} />\\n                : <TableCell key={cell.key} cell={cell} state={state} />\\n            )}\\n          </TableRow>\\n        ))}\\n      </TableRowGroup>\\n    </table>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable DatePicker Wrapper in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Defines a generic, reusable MyDatePicker component wrapping React Spectrum's DatePicker and its child components. Accepts props for label, description, and error handling, and composes field, input, error, and popover/calendar elements according to the design requirement. Dependencies include react-aria-components, @internationalized/date types, and proper composition of subcomponents. Inputs include specialized props extending DatePickerProps as well as date value types; outputs are fully-composed, styled, and accessible date picker widgets with consistent DOM structure. Implementation constraints involve correct TypeScript typing and slot usage for advanced features like validation errors and help text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DatePickerProps, DateValue, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyDatePickerProps<T extends DateValue> extends DatePickerProps<T> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyDatePicker<T extends DateValue>({label, description, errorMessage, firstDayOfWeek, ...props}: MyDatePickerProps<T>) {\n  return (\n    <DatePicker {...props}>\n      <Label>{label}</Label>\n      <Group>\n        <DateInput>\n          {segment => <DateSegment segment={segment} />}\n        </DateInput>\n        <Button>▼</Button>\n      </Group>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>\n        <Dialog>\n          <Calendar firstDayOfWeek={firstDayOfWeek}>\n            <header>\n              <Button slot=\"previous\">◀</Button>\n              <Heading />\n              <Button slot=\"next\">▶</Button>\n            </header>\n            <CalendarGrid>\n              {date => <CalendarCell date={date} />}\n            </CalendarGrid>\n          </Calendar>\n        </Dialog>\n      </Popover>\n    </DatePicker>\n\n  );\n}\n\n<MyDatePicker label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering a ListBox from Dynamic Data – React Aria – TypeScript\nDESCRIPTION: This example demonstrates how to create a ListBox that renders options dynamically from an array of objects, supporting real-world scenarios where data may come from APIs. The ListBox component receives a label, an iterable list of options via the items prop, and selectionMode, rendering each item with a key (or id property) and custom label. Dependencies include the same set as previous React examples, and requirements are that each item has a unique id or key. This enables creation of adaptable, data-driven listboxes that rerender when the source data changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Example() {\\n  let options = [\\n    { id: 1, name: 'Aardvark' },\\n    { id: 2, name: 'Cat' },\\n    { id: 3, name: 'Dog' },\\n    { id: 4, name: 'Kangaroo' },\\n    { id: 5, name: 'Koala' },\\n    { id: 6, name: 'Penguin' },\\n    { id: 7, name: 'Snake' },\\n    { id: 8, name: 'Turtle' },\\n    { id: 9, name: 'Wombat' }\\n  ];\\n\\n  return (\\n    <ListBox label=\"Animals\" items={options} selectionMode=\"single\">\\n      {(item) => <Item>{item.name}</Item>}\\n    </ListBox>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ToggleButton Component with React Aria Hooks\nDESCRIPTION: Creates a reusable ToggleButton component using useToggleButton and useToggleState hooks. The component changes color based on selection state and provides proper accessibility support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRef} from 'react';\nimport {useToggleButton} from '@react-aria/button';\nimport {useToggleState} from '@react-stately/toggle';\n\nfunction ToggleButton(props) {\n  let ref = useRef<HTMLButtonElement | null>(null);\n  let state = useToggleState(props);\n  let {buttonProps, isPressed} = useToggleButton(props, state, ref);\n\n  return (\n    <button\n      {...buttonProps}\n      style={{\n        background: isPressed\n          ? state.isSelected ? 'darkgreen' : 'gray'\n          : state.isSelected ? 'green' : 'lightgray',\n        color: state.isSelected ? 'white' : 'black',\n        padding: 10,\n        fontSize: 16,\n        userSelect: 'none',\n        WebkitUserSelect: 'none',\n        border: 'none'\n      }}\n      ref={ref}>\n      {props.children}\n    </button>\n  );\n}\n\n<ToggleButton>Pin</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag and Drop with TableView in React Spectrum\nDESCRIPTION: A comprehensive example of implementing a draggable TableView that can transfer items to a droppable TableView. The code demonstrates setting up the useDragAndDrop hooks with proper item serialization, drop handling, and UI integration for both source and target tables.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DragAndDropOptions, TextDropItem} from '@react-spectrum/dnd';\nimport type {ListData} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@react-spectrum/dnd';\nimport {useListData} from '@adobe/react-spectrum';\n\ninterface Item {\n  name: string,\n  type?: string,\n  date?: string,\n  childNodes?: Item[]\n}\n\ninterface DndTableViewProps extends DragAndDropOptions {\n  list: ListData<Item>,\n  columns: { name: string; id: string; }[]\n}\n\nfunction DraggableTableView(props: DndTableViewProps) {\n  let {list, columns, ...otherProps} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    // Only allow move operations when dropping items from this table\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) => [...keys].map(key => {\n      let item = list.getItem(key);\n      // Setup the drag types and associated info for each dragged item.\n      return {\n        'custom-app-type': JSON.stringify(item),\n        'text/plain': item.name\n      };\n    }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in drag into table example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableView(props: DndTableViewProps) {\n  let {list, columns, ...otherProps} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type')))\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type')))\n      );\n      list.append(...processedItems);\n    },\n    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in drag into table example\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTable() {\n  let columns = [\n    {name: 'Name', id: 'name'},\n    {name: 'Type', id: 'type'},\n    {name: 'Date Modified', id: 'date'}\n  ];\n\n  let sourceList = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/7/2020'},\n      {id: '2', type: 'file', name: 'Adobe XD', date: '4/7/2021'},\n      {id: '3', type: 'file', name: 'Adobe InDesign', date: '11/20/2010'},\n      {id: '4', type: 'file', name: 'Adobe AfterEffects', date: '1/18/2016'}\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {id: '5', type: 'file', name: 'Adobe Dreamweaver', date: '1/18/2016'},\n      {id: '6', type: 'file', name: 'Adobe Fresco', date: '11/20/2010'},\n      {id: '7', type: 'file', name: 'Adobe Connect', date: '4/7/2021'},\n      {id: '8', type: 'file', name: 'Adobe Lightroom', date: '6/7/2020'}\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableTableView list={sourceList} columns={columns} />\n      <DroppableTableView list={targetList} columns={columns} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Drag Preview Rendering for ListBox Items - TypeScript\nDESCRIPTION: Shows how to override the default drag preview by implementing the renderDragPreview function in the useDragAndDrop hook. The custom preview displays the first item's name and a badge with the number of items being dragged, using a styled container. Integrates with ListBox and ListBoxItem from react-aria-components and supports multi-item selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useListData} from 'react-stately';\\nimport {useDragAndDrop} from 'react-aria-components';\\n\\nfunction Example() {\\n  let {dragAndDropHooks} = useDragAndDrop({\\n    // ...\\n    ///- begin collapse -///\\n    getItems: (keys) => [...keys].map(key => ({'text/plain': list.getItem(key).name})),\\n    onReorder(e) {\\n      if (e.target.dropPosition === 'before') {\\n        list.moveBefore(e.target.key, e.keys);\\n      } else if (e.target.dropPosition === 'after') {\\n        list.moveAfter(e.target.key, e.keys);\\n      }\\n    },\\n    ///- end collapse -///\\n    ///- begin highlight -///\\n    renderDragPreview(items) {\\n      return (\\n        <div className=\\\"drag-preview\\\">\\n          {items[0]['text/plain']}\\n          <span className=\\\"badge\\\">{items.length}</span>\\n        </div>\\n      );\\n    }\\n    ///- end highlight -///\\n  });\\n\\n  ///- begin collapse -///\\n  let list = useListData({\\n    initialItems: [\\n      {id: 1, name: 'Adobe Photoshop'},\\n      {id: 2, name: 'Adobe XD'},\\n      {id: 3, name: 'Adobe Dreamweaver'},\\n      {id: 4, name: 'Adobe InDesign'},\\n      {id: 5, name: 'Adobe Connect'}\\n    ]\\n  });\\n\\n  return (\\n    <ListBox aria-label=\\\"Reorderable list\\\" selectionMode=\\\"multiple\\\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\\n      {item => <ListBoxItem>{item.name}</ListBoxItem>}\\n    </ListBox>\\n  );\\n  ///- end collapse -///\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone DatePicker Example Using React Aria Components and Tailwind CSS (TypeScript)\nDESCRIPTION: This extended snippet shows an accessible DatePicker component built in React using React Aria components and styled with Tailwind CSS utility classes. It declares functional components for a fully interactive date picker, incorporating a popover calendar with custom buttons, and leverages several React Aria primitives (e.g., DatePicker, DateInput, Calendar, etc.). It requires React, react-aria-components, @spectrum-icons, and Tailwind CSS with specific plugins. Inputs are user actions and internal calendar state; output is a selectable date. All parameters and props follow the standard React props pattern.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/datepicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePicker, Label, Group, Heading, DateInput, DateSegment, Button, Popover, Dialog, Calendar, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell} from 'react-aria-components';\nimport type {ButtonProps, PopoverProps} from 'react-aria-components';\nimport ChevronUpDownIcon from '@spectrum-icons/workflow/ChevronUpDown';\nimport ChevronLeftIcon from '@spectrum-icons/workflow/ChevronLeft';\nimport ChevronRightIcon from '@spectrum-icons/workflow/ChevronRight';\n\nfunction DatePickerExample() {\n  return (\n    <div className=\"bg-linear-to-r from-violet-500 to-fuchsia-600 p-12 sm:h-[400px] rounded-lg flex items-start justify-center\">\n      <DatePicker className=\"group flex flex-col gap-1 w-[200px]\">\n        <Label className=\"text-white cursor-default\">Date</Label>\n        <Group className=\"flex rounded-lg bg-white/90 focus-within:bg-white group-open:bg-white transition pl-3 shadow-md text-gray-700 focus-visible:ring-2 ring-black\">\n          <DateInput className=\"flex flex-1 py-2\">\n            {(segment) => <DateSegment segment={segment} className=\"px-0.5 tabular-nums outline-hidden rounded-xs focus:bg-violet-700 focus:text-white caret-transparent placeholder-shown:italic\" />}\n          </DateInput>\n          <Button className=\"outline-hidden px-3 flex items-center text-gray-700 transition border-0 border-solid border-l border-l-purple-200 bg-transparent rounded-r-lg pressed:bg-purple-100 focus-visible:ring-2 ring-black\">\n            <ChevronUpDownIcon size=\"XS\" />\n          </Button>\n        </Group>\n        <MyPopover>\n          <Dialog className=\"p-6 text-gray-600\">\n            <Calendar>\n              <header className=\"flex items-center gap-1 pb-4 px-1 font-serif w-full\">\n                <Heading className=\"flex-1 font-semibold text-2xl ml-2\" />\n                <RoundButton slot=\"previous\"><ChevronLeftIcon /></RoundButton>\n                <RoundButton slot=\"next\"><ChevronRightIcon /></RoundButton>\n              </header>\n              <CalendarGrid className=\"border-spacing-1 border-separate\">\n                <CalendarGridHeader>\n                  {day => <CalendarHeaderCell className=\"text-xs text-gray-500 font-semibold\">{day}</CalendarHeaderCell>}\n                </CalendarGridHeader>\n                <CalendarGridBody>\n                  {date => <CalendarCell date={date} className=\"w-9 h-9 outline-hidden cursor-default rounded-full flex items-center justify-center outside-month:text-gray-300 hover:bg-gray-100 pressed:bg-gray-200 selected:bg-violet-700 selected:text-white focus-visible:ring-3 ring-violet-600/70 ring-offset-2\" />}\n                </CalendarGridBody>\n              </CalendarGrid>\n            </Calendar>\n          </Dialog>\n        </MyPopover>\n      </DatePicker>\n    </div>\n  );\n}\n\nfunction RoundButton(props: ButtonProps) {\n  return <Button {...props} className=\"w-9 h-9 outline-hidden cursor-default bg-transparent text-gray-600 border-0 rounded-full flex items-center justify-center hover:bg-gray-100 pressed:bg-gray-200 focus-visible:ring-3 ring-violet-600/70 ring-offset-2\" />;\n}\n\nfunction MyPopover(props: PopoverProps) {\n  return (\n    <Popover\n      {...props}\n      className={({isEntering, isExiting}) => `\n        overflow-auto rounded-lg drop-shadow-lg ring-1 ring-black/10 bg-white\n        ${isEntering ? 'animate-in fade-in placement-bottom:slide-in-from-top-1 placement-top:slide-in-from-bottom-1 ease-out duration-200' : ''}\n        ${isExiting ? 'animate-out fade-out placement-bottom:slide-out-to-top-1 placement-top:slide-out-to-bottom-1 ease-in duration-150' : ''}\n      `} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fully Controlled ComboBox with React Spectrum\nDESCRIPTION: This example shows how to implement a fully controlled ComboBox where all aspects (input value, selection, and items) are managed through React state. It uses useTreeData for item management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTreeData} from '@react-stately/data';\n\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  let [fieldState, setFieldState] = React.useState({\n    selectedKey: '',\n    inputValue: ''\n  });\n\n  let list = useTreeData({\n    initialItems: options\n  });\n\n  let onSelectionChange = (key) => {\n    setFieldState({\n      inputValue: list.getItem(key)?.value.name ?? '',\n      selectedKey: key\n    });\n  };\n\n  let onInputChange = (value) => {\n    setFieldState(prevState => ({\n      inputValue: value,\n      selectedKey: value === '' ? null : prevState.selectedKey\n    }));\n  };\n\n  return (\n     <>\n      <p>Current selected major id: {fieldState.selectedKey}</p>\n      <p>Current input text: {fieldState.inputValue}</p>\n       <ComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={list.items}\n        selectedKey={fieldState.selectedKey}\n        inputValue={fieldState.inputValue}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}>\n        {item => <Item>{item.value.name}</Item>}\n      </ComboBox>\n     </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a SearchAutocomplete Component with React Aria Hooks\nDESCRIPTION: This example demonstrates how to create a search autocomplete component using the useSearchAutocomplete hook with filtering functionality. It includes input handling, popup management, and accessibility features. The component leverages useComboBoxState for state management and useFilter for text filtering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Item} from '@react-stately/collections';\nimport {useButton} from '@react-aria/button';\nimport {useComboBoxState} from '@react-stately/combobox'\nimport {useSearchAutocomplete} from '@react-aria/autocomplete';\nimport {useFilter} from '@react-aria/i18n';\n\n// Reuse the ListBox and Popover from your component library. See below for details.\nimport {ListBox, Popover} from 'your-component-library';\n\nfunction SearchAutocomplete(props) {\n  // Setup filter function and state.\n  let {contains} = useFilter({sensitivity: 'base'});\n  let state = useComboBoxState({...props, defaultFilter: contains});\n\n  // Setup refs and get props for child elements.\n  let inputRef = React.useRef(null);\n  let listBoxRef = React.useRef(null);\n  let popoverRef = React.useRef(null);\n  let buttonRef = React.useRef(null);\n\n  let {inputProps, listBoxProps, labelProps, clearButtonProps} = useSearchAutocomplete(\n    {\n      ...props,\n      popoverRef,\n      listBoxRef,\n      inputRef,\n    },\n    state\n  );\n\n  let {buttonProps} = useButton(clearButtonProps, buttonRef);\n\n  return (\n    <div style={{display: 'inline-flex', flexDirection: 'column'}}>\n      <label {...labelProps}>{props.label}</label>\n      <div style={{position: 'relative', display: 'inline-block'}}>\n        <input\n          {...inputProps}\n          ref={inputRef}\n          style={{\n            height: 24,\n            boxSizing: 'border-box',\n            marginRight: 0,\n            fontSize: 16\n          }} />\n          {state.inputValue !== '' &&\n            <button {...buttonProps} ref={buttonRef}>❎</button>\n          }\n        {state.isOpen &&\n          <Popover state={state} triggerRef={inputRef} popoverRef={popoverRef} isNonModal placement=\"bottom start\">\n            <ListBox\n              {...listBoxProps}\n              listBoxRef={listBoxRef}\n              state={state} />\n          </Popover>\n        }\n      </div>\n    </div>\n  );\n}\n\n<SearchAutocomplete label=\"Search Animals\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Columns in React Spectrum Table\nDESCRIPTION: This example shows how to add resizable column support to a React Spectrum Table using the useTableColumnResizeState and useTableColumnResize hooks. It includes necessary modifications to the table implementation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCallback} from 'react';\nimport {useTableColumnResizeState} from '@react-stately/table';\n\nfunction ResizableColumnsTable(props) {\n  let state = useTableState(props);\n  let scrollRef = useRef<HTMLDivElement | null>(null);\n  let ref = useRef<HTMLTableElement | null>(null);\n  let {collection} = state;\n  let {gridProps} = useTable(\n    {\n      ...props,\n      scrollRef\n    },\n    state,\n    ref\n  );\n\n  let getDefaultMinWidth = useCallback(() => {\n    return 40;\n  }, []);\n\n  let layoutState = useTableColumnResizeState({\n    tableWidth: 300,\n    getDefaultMinWidth\n  }, state);\n\n  return (\n    <div className=\"aria-table-wrapper\" ref={scrollRef}>\n      <table\n        {...gridProps}\n        className=\"aria-table\"\n        ref={ref}>\n        <TableRowGroup type=\"thead\">\n          {collection.headerRows.map(headerRow => (\n            <TableHeaderRow key={headerRow.key} item={headerRow} state={state}>\n              {[...headerRow.childNodes].map(column => (\n                <ResizableTableColumnHeader\n                  key={column.key}\n                  column={column}\n                  state={state}\n                  layoutState={layoutState}\n                  onResizeStart={props.onResizeStart}\n                  onResize={props.onResize}\n                  onResizeEnd={props.onResizeEnd}\n                />\n              ))}\n            </TableHeaderRow>\n          ))}\n        </TableRowGroup>\n        <TableRowGroup type=\"tbody\">\n          {[...collection.body.childNodes].map(row => (\n            <TableRow key={row.key} item={row} state={state}>\n              {[...row.childNodes].map(cell => (\n                <TableCell key={cell.key} cell={cell} state={state} />\n              ))}\n            </TableRow>\n          ))}\n        </TableRowGroup>\n      </table>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Calendar Component with CSS\nDESCRIPTION: CSS styling for the Calendar component, including layout, colors, and interactive states. This covers styling for the calendar container, header, buttons, and cells.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Calendar {\n  width: fit-content;\n  max-width: 100%;\n  color: var(--text-color);\n\n  header {\n    display: flex;\n    align-items: center;\n    margin: 0 4px .5rem 4px;\n\n    .react-aria-Heading {\n      flex: 1;\n      margin: 0;\n      text-align: center;\n      font-size: 1.375rem;\n    }\n  }\n\n  .react-aria-Button {\n    width: 2rem;\n    height: 2rem;\n    padding: 0;\n  }\n\n  .react-aria-CalendarCell {\n    width: 2rem;\n    line-height: 2rem;\n    text-align: center;\n    border-radius: 6px;\n    cursor: default;\n    outline: none;\n    margin: 1px;\n    forced-color-adjust: none;\n\n    &[data-outside-month] {\n      display: none;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: 2px;\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Step Values in a React Spectrum Slider\nDESCRIPTION: Defines a slider with currency formatting that snaps to increments of 5 between 0 and 100. Step values are calculated from the minimum value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  label=\"Amount\"\n  formatOptions={{style: 'currency', currency: 'USD'}}\n  minValue={0}\n  maxValue={100}\n  step={5} />\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled ListBox Items with CSS\nDESCRIPTION: Simple CSS for styling disabled items in a ListBox component by changing their text color when they have the data-disabled attribute.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem {\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CalendarGrid Rendering with Header and Body Components (TypeScript JSX)\nDESCRIPTION: Shows how to manually compose CalendarGrid using CalendarGridHeader, CalendarHeaderCell, and CalendarGridBody by providing header and cell render functions. Depends on react-aria-components for all sub-components and Heading, Button for navigation. Inputs: user navigation; Outputs: a Calendar UI with custom header cell styling and date cell rendering. Useful for granular control over calendar grid layout and style.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CalendarGridHeader, CalendarHeaderCell, CalendarGridBody} from 'react-aria-components';\\n\\n<Calendar aria-label=\"Appointment date\">\\n  <header>\\n    <Button slot=\"previous\">\\u25C0</Button>\\n    <Heading />\\n    <Button slot=\"next\">\\u25B6</Button>\\n  </header>\\n  <CalendarGrid>\\n    <CalendarGridHeader>\\n      {day => <CalendarHeaderCell style={{color: 'var(--blue)'}}>{day}</CalendarHeaderCell>}\\n    </CalendarGridHeader>\\n    <CalendarGridBody>\\n      {date => <CalendarCell date={date} />}\\n    </CalendarGridBody>\\n  </CalendarGrid>\\n</Calendar>\\n\n```\n\n----------------------------------------\n\nTITLE: Using SelectAllListBox Component with Checkbox and ListBox in React\nDESCRIPTION: This example shows how to use the SelectAllListBox component to create a UI with a checkbox that toggles selection of all items in a ListBox. The checkbox state is linked to the ListBox selection through the contexts provided by SelectAllListBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_58\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Checkbox} from 'react-aria-components';\n\n<SelectAllListBox>\n  <Checkbox style={{marginBottom: '8px'}}>\n    <div className=\"checkbox\">\n      <svg viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n        <polyline points=\"1 9 7 14 15 4\" />\n      </svg>\n    </div>\n    Unsubscribe\n  </Checkbox>\n  <ListBox selectionMode=\"multiple\" aria-label=\"Ice cream flavors\">\n    <ListBoxItem>Chocolate</ListBoxItem>\n    <ListBoxItem>Mint</ListBoxItem>\n    <ListBoxItem>Strawberry</ListBoxItem>\n    <ListBoxItem>Vanilla</ListBoxItem>\n  </ListBox>\n</SelectAllListBox>\n```\n\n----------------------------------------\n\nTITLE: Managing Hierarchical Data with useTreeData for React Spectrum ListBox (tsx)\nDESCRIPTION: Shows how to use the `useTreeData` hook from `@react-stately/data` to manage a hierarchical data structure for collection components. It initializes the tree data, defines key retrieval (`getKey`), and child retrieval (`getChildren`) functions. The resulting tree structure (`tree.items`) is then rendered using a `ListBox` with nested `<Section>` and `<Item>` components mapped from the tree nodes. Includes an example function `addPerson` to append new items to a specific section.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTreeData} from '@react-stately/data';\n\nlet tree = useTreeData({\n  initialItems: [\n    {\n      name: 'People',\n      items: [\n        {name: 'David'},\n        {name: 'Sam'},\n        {name: 'Jane'}\n      ]\n    },\n    {\n      name: 'Animals',\n      items: [\n        {name: 'Aardvark'},\n        {name: 'Kangaroo'},\n        {name: 'Snake'}\n      ]\n    }\n  ],\n  getKey: item => item.name,\n  getChildren: item => item.items\n});\n\nfunction addPerson(name) {\n  tree.append('People', {name});\n}\n\n<ListBox items={tree.items}>\n  {node =>\n    <Section title={node.value.name} items={node.children}>\n      {node => <Item>{node.value.name}</Item>}\n    </Section>\n  }\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Building Custom Checkbox with React Aria Hooks and Context (TSX)\nDESCRIPTION: Illustrates creating a custom Checkbox component (`MyCheckbox`) using the lower-level React Aria hooks API. It leverages `useToggleState` for state management, `useCheckbox` for accessibility and interaction logic, and `useContextProps` to merge context-provided props with local props, ensuring the custom component integrates seamlessly within the React Aria component ecosystem.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\nimport {CheckboxContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n  ///- end highlight -///\n\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchAutocomplete with Focus Trigger in React Spectrum\nDESCRIPTION: This example shows how to configure a SearchAutocomplete component with the 'focus' menuTrigger option, where the dropdown menu opens when the input field receives focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Favorite Animal\" menuTrigger=\"focus\">\n  <Item>Red Panda</Item>\n  <Item>Cat</Item>\n  <Item>Dog</Item>\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Accessing Validation Information from React Aria Hooks\nDESCRIPTION: This snippet shows how to access validation information returned by React Aria hooks. The hook returns validation state that can be used to render custom error messages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nlet {isInvalid, validationErrors, validationDetails} = useTextField(props, ref);\n```\n\n----------------------------------------\n\nTITLE: Using the Toast Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'Toast' component. It is used to render a temporary notification message about an action, error, or other event, typically appearing briefly on screen. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_52\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Date Validation Logic with 'validate' Prop in React\nDESCRIPTION: This TSX example demonstrates custom validation using the `validate` prop on a DatePicker within a React Aria `Form`. A validation function is defined inline, which receives the current date value. It uses `isWeekend` from `@internationalized/date` and `useLocale` from `react-aria` to check if the selected date is a weekend in the current locale. If it is a weekend, the function returns the error message string \"We are closed on weekends.\"; otherwise, it returns `null`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from 'react-aria';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return (\n    <Form>\n      <MyDatePicker\n        label=\"Appointment date\"\n        /*- begin highlight -*/\n        validate={date => date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}\n        /*- end highlight -*/\n        defaultValue={parseDate('2023-10-28')} />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Drag and Drop Between Lists in React\nDESCRIPTION: A complete implementation of a draggable GridList component that supports dragging items between lists bidirectionally and reordering items within the same list. The component uses useListData and useDragAndDrop hooks to manage items and drag operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface FileItem {\n  id: string,\n  name: string,\n  type: string\n}\n\ninterface DndGridListProps {\n  initialItems: FileItem[],\n  'aria-label': string\n}\n\nfunction DndGridList(props: DndGridListProps) {\n  let list = useListData({\n    initialItems: props.initialItems\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    ///- begin collapse -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    ///- end collapse -///\n    // Provide drag data in a custom format as well as plain text.\n    getItems(keys) {\n      return [...keys].map((key) => {\n        let item = list.getItem(key);\n        return {\n          'custom-app-type': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n\n    // Accept drops with the custom format.\n    acceptedDragTypes: ['custom-app-type'],\n\n    // Ensure items are always moved rather than copied.\n    getDropOperation: () => 'move',\n\n    // Handle drops between items from other lists.\n    async onInsert(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...processedItems);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...processedItems);\n      }\n    },\n\n    // Handle drops on the collection when empty.\n    async onRootDrop(e) {\n      let processedItems = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      list.append(...processedItems);\n    },\n\n    // Handle reordering items within the same list.\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    },\n\n    // Remove the items from the source list on drop\n    // if they were moved to a different list.\n    onDragEnd(e) {\n      if (e.dropOperation === 'move' && !e.isInternal) {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <MyGridList\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      selectedKeys={list.selectedKeys}\n      onSelectionChange={list.setSelectedKeys}\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n      renderEmptyState={() => 'Drop items here'}>\n      {item => <MyItem>{item.name}</MyItem>}\n    </MyGridList>\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  <DndGridList\n    initialItems={[\n      { id: '1', type: 'file', name: 'Adobe Photoshop' },\n      { id: '2', type: 'file', name: 'Adobe XD' },\n      { id: '3', type: 'folder', name: 'Documents' },\n      { id: '4', type: 'file', name: 'Adobe InDesign' },\n      { id: '5', type: 'folder', name: 'Utilities' },\n      { id: '6', type: 'file', name: 'Adobe AfterEffects' }\n    ]}\n    aria-label=\"First GridList\"\n  />\n  <DndGridList\n    initialItems={[\n      { id: '7', type: 'folder', name: 'Pictures' },\n      { id: '8', type: 'file', name: 'Adobe Fresco' },\n      { id: '9', type: 'folder', name: 'Apps' },\n      { id: '10', type: 'file', name: 'Adobe Illustrator' },\n      { id: '11', type: 'file', name: 'Adobe Lightroom' },\n      { id: '12', type: 'file', name: 'Adobe Dreamweaver' }\n    ]}\n    aria-label=\"Second GridList\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Table with Selection in React\nDESCRIPTION: This example demonstrates how to create a Table component with multiple selection, headers, and rows containing various data types.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Files\" selectionMode=\"multiple\">\n  <TableHeader>\n    <Column><MyCheckbox slot=\"selection\" /></Column>\n    <Column isRowHeader>Name</Column>\n    <Column>Type</Column>\n    <Column>Date Modified</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell><MyCheckbox slot=\"selection\" /></Cell>\n      <Cell>Games</Cell>\n      <Cell>File folder</Cell>\n      <Cell>6/7/2020</Cell>\n    </Row>\n    <Row>\n      <Cell><MyCheckbox slot=\"selection\" /></Cell>\n      <Cell>Program Files</Cell>\n      <Cell>File folder</Cell>\n      <Cell>4/7/2021</Cell>\n    </Row>\n    <Row>\n      <Cell><MyCheckbox slot=\"selection\" /></Cell>\n      <Cell>bootmgr</Cell>\n      <Cell>System file</Cell>\n      <Cell>11/20/2010</Cell>\n    </Row>\n    <Row>\n      <Cell><MyCheckbox slot=\"selection\" /></Cell>\n      <Cell>log.txt</Cell>\n      <Cell>Text Document</Cell>\n      <Cell>1/18/2016</Cell>\n    </Row>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal and ModalTrigger Components\nDESCRIPTION: Implementation of Modal and ModalTrigger components using useModalOverlay and useOverlayTrigger hooks to create accessible modal dialogs with proper overlay behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dialog/docs/useDialog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useOverlayTriggerState} from '@react-stately/overlays';\nimport {Overlay, useModalOverlay, useOverlayTrigger} from '@react-aria/overlays';\n\nfunction Modal({state, children, ...props}) {\n  let ref = React.useRef(null);\n  let {modalProps, underlayProps} = useModalOverlay(props, state, ref);\n\n  return (\n    <Overlay>\n      <div\n        style={{\n          position: 'fixed',\n          zIndex: 100,\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: 'rgba(0, 0, 0, 0.5)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}\n        {...underlayProps}>\n        <div\n          {...modalProps}\n          ref={ref}\n          style={{\n            background: 'var(--page-background)',\n            border: '1px solid gray'\n          }}>\n          {children}\n        </div>\n      </div>\n    </Overlay>\n  );\n}\n\nfunction ModalTrigger({label, children, ...props}) {\n  let state = useOverlayTriggerState(props);\n  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'dialog'}, state);\n\n  return <>\n    <Button {...triggerProps}>{label}</Button>\n    {state.isOpen &&\n      <Modal state={state}>\n        {React.cloneElement(children(state.close), overlayProps)}\n      </Modal>\n    }\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ListBox for Accessible Selections - React Aria - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates a simple, accessible listbox component using React Aria's ListBox and ListBoxItem. It renders a selectable list of favorite animals, supporting selectionMode and proper ARIA labeling. Requires the react-aria-components library and TypeScript/React environment. Inputs include a string label and list items; output is a styled, accessible listbox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ListBox, ListBoxItem} from 'react-aria-components';\\n\\n<ListBox aria-label=\"Favorite animal\" selectionMode=\"single\">\\n  <ListBoxItem>Aardvark</ListBoxItem>\\n  <ListBoxItem>Cat</ListBoxItem>\\n  <ListBoxItem>Dog</ListBoxItem>\\n  <ListBoxItem>Kangaroo</ListBoxItem>\\n  <ListBoxItem>Panda</ListBoxItem>\\n  <ListBoxItem>Snake</ListBoxItem>\\n</ListBox>\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Popover Component Using React Aria (TypeScript)\nDESCRIPTION: Implements a reusable Popover component leveraging 'usePopover' from '@react-aria/overlays' for positioning and accessibility, and 'Overlay', 'DismissButton' for modal behavior. Requires React, react-aria, and react-stately. Accepts children and manages its open/close state via OverlayTriggerState. Returns a styled popover container with dismiss buttons before and after the children. The popover is rendered in a fixed position and styled with a border and background. The component is fully TypeScript typed and composable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaPopoverProps} from 'react-aria';\\nimport type {OverlayTriggerState} from 'react-stately';\\nimport {usePopover, Overlay, DismissButton} from '@react-aria/overlays';\\n\\ninterface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {\\n  children: React.ReactNode,\\n  state: OverlayTriggerState\\n}\\n\\nfunction Popover({children, state, ...props}: PopoverProps) {\\n  let popoverRef = React.useRef(null);\\n  let {popoverProps, underlayProps} = usePopover({\\n    ...props,\\n    popoverRef\\n  }, state);\\n\\n  return (\\n    <Overlay>\\n      <div {...underlayProps} style={{position: 'fixed', inset: 0}} />\\n      <div\\n        {...popoverProps}\\n        ref={popoverRef}\\n        style={{\\n          ...popoverProps.style,\\n          background: 'lightgray',\\n          border: '1px solid gray'\\n        }}>\\n        <DismissButton onDismiss={state.close} />\\n        {children}\\n        <DismissButton onDismiss={state.close} />\\n      </div>\\n    </Overlay>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a DateRangePicker Component with React Aria\nDESCRIPTION: Example implementation of a DateRangePicker component using React Aria hooks. The component allows users to select date ranges with keyboard inputs or through a calendar interface, with full accessibility support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDateRangePickerState} from '@react-stately/datepicker';\nimport {useDateRangePicker} from '@react-aria/datepicker';\n\n// Reuse the DateField, Popover, Dialog, RangeCalendar, and Button from your component library.\nimport {DateField, Popover, Dialog, RangeCalendar, Button} from 'your-component-library';\n\nfunction DateRangePicker(props) {\n  let state = useDateRangePickerState(props);\n  let ref = React.useRef(null);\n  let {labelProps, groupProps, startFieldProps, endFieldProps, buttonProps, dialogProps, calendarProps} = useDateRangePicker(props, state, ref);\n\n  return (\n    <div style={{display: 'inline-flex', flexDirection: 'column'}}>\n      <span {...labelProps}>{props.label}</span>\n      <div {...groupProps} ref={ref} style={{display: 'flex'}}>\n        <div className=\"field\">\n          <DateField {...startFieldProps} />\n          <span style={{padding: '0 4px'}}>–</span>\n          <DateField {...endFieldProps} />\n          {state.isInvalid &&\n            <span aria-hidden=\"true\">🚫</span>\n          }\n        </div>\n        <Button {...buttonProps}>🗓</Button>\n      </div>\n      {state.isOpen &&\n        <Popover state={state} triggerRef={ref} placement=\"bottom start\">\n          <Dialog {...dialogProps}>\n            <RangeCalendar {...calendarProps} firstDayOfWeek={props.firstDayOfWeek} />\n          </Dialog>\n        </Popover>\n      }\n    </div>\n  );\n}\n\n<DateRangePicker label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing ListBox with Dynamic Data in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a `ListBox` component using dynamic data. An array of objects (`options`) is passed to the `items` prop. The component iterates over this array, rendering a `ListBoxItem` for each object. The `id` property within each data object is automatically used for selection identification. `selectionMode=\"single\"` enables single item selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n\n  return (\n    <ListBox aria-label=\"Animals\" items={options} selectionMode=\"single\">\n      {(item) => <ListBoxItem>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example ListBox Handling Item Insertion on Drop (tsx)\nDESCRIPTION: Shows a functional example of a `ListBox` component using `useListData` from `@react-stately/data` to manage items. It defines an `onInsert` callback that adds a new item (extracted from the drop event's 'text/plain' data) based on the drop target position ('before' or 'after'). It renders a `Draggable` element alongside the `ListBox`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from '@react-stately/data';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Cat'},\n      {id: 2, name: 'Dog'},\n      {id: 3, name: 'Kangaroo'}\n    ]\n  });\n\n  let onInsert = async e => {\n    let name = await e.items[0].getText('text/plain');\n    let item = {id: list.items.length + 1, name};\n    if (e.target.dropPosition === 'before') {\n      list.insertBefore(e.target.key, item);\n    } else if (e.target.dropPosition === 'after') {\n      list.insertAfter(e.target.key, item);\n    }\n  };\n\n  return (\n    <>\n      <Draggable>Octopus</Draggable>\n      <ListBox\n        aria-label=\"Favorite animals\"\n        selectionMode=\"single\"\n        items={list.items}\n        acceptedDragTypes={['text/plain']}\n        ///- begin highlight -///\n        onInsert={onInsert}\n        ///- end highlight -///\n      >\n        {item => <Item>{item.name}</Item>}\n      </ListBox>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating NumberField with HTML Forms (name prop) - React Spectrum - TypeScript\nDESCRIPTION: Shows how to integrate NumberField with native HTML forms by using the name prop. The field submits a raw numerical value (not a formatted string) to the server when the form is submitted. Includes currency formatting with formatOptions and sets a default value for demonstration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<MyNumberField\n  label=\"Transaction amount\"\n  /*- begin highlight -*/\n  name=\"amount\"\n  /*- end highlight -*/\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Toast Queue and Region with React Spectrum (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a global ToastQueue for managing toast notifications and how to render a ToastRegion and Toast in the root of a React app using react-aria-components. Required dependencies include react-aria-components, Button, and Text from the same package. The MyToastContent interface specifies toast structure. The output is a JSX component that manages toast rendering, including title and description, and offers a close button. Toasts are displayed via the global queue, and formatting/slots determine content placement. Intended for integration at the app's root level with accessible ARIA patterns.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {UNSTABLE_ToastRegion as ToastRegion, UNSTABLE_Toast as Toast, UNSTABLE_ToastQueue as ToastQueue, UNSTABLE_ToastContent as ToastContent, Button, Text} from 'react-aria-components';\n\n// Define the type for your toast content.\ninterface MyToastContent {\n  title: string,\n  description?: string\n}\n\n// Create a global ToastQueue.\nexport const queue = new ToastQueue<MyToastContent>();\n\n// Render a <ToastRegion> in the root of your app.\nexport function App() {\n  return (\n    <>\n      <ToastRegion queue={queue}>\n        {({toast}) => (\n          <Toast toast={toast}>\n            <ToastContent>\n              <Text slot=\"title\">{toast.content.title}</Text>\n              <Text slot=\"description\">{toast.content.description}</Text>\n            </ToastContent>\n            <Button slot=\"close\">x</Button>\n          </Toast>\n        )}\n      </ToastRegion>\n      {/* Your app here */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Color Wheel Component with React Aria Hooks\nDESCRIPTION: A complete example of implementing a color wheel component using the useColorWheel and useColorWheelState hooks, with proper accessibility support and styling. The component includes a track and draggable thumb that responds to mouse, touch, and keyboard interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorWheel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useColorWheel} from '@react-aria/color';\nimport {useColorWheelState} from '@react-stately/color';\nimport {useFocusRing} from '@react-aria/focus';\n\nconst RADIUS = 100;\nconst TRACK_THICKNESS = 28;\nconst THUMB_SIZE = 20;\n\nfunction ColorWheel(props) {\n  let {isDisabled} = props;\n  let state = useColorWheelState(props);\n  let inputRef = React.useRef(null);\n  let {trackProps, inputProps, thumbProps} = useColorWheel({\n    ...props,\n    outerRadius: RADIUS,\n    innerRadius: RADIUS - TRACK_THICKNESS\n  }, state, inputRef);\n\n  let {focusProps, isFocusVisible} = useFocusRing();\n\n  return (\n    <div style={{position: 'relative', display: 'inline-block'}}>\n      <div\n        {...trackProps}\n        style={{\n          ...trackProps.style,\n          background: isDisabled ? 'rgb(142, 142, 142)' : trackProps.style.background\n        }} />\n      <div\n        {...thumbProps}\n        style={{\n          ...thumbProps.style,\n          background: isDisabled ? 'rgb(142, 142, 142)' : state.getDisplayColor().toString('css'),\n          border: `2px solid ${isDisabled ? 'rgb(142, 142, 142)' : 'white'}`,\n          boxShadow: '0 0 0 1px black, inset 0 0 0 1px black',\n          width: isFocusVisible ? TRACK_THICKNESS + 4 : THUMB_SIZE,\n          height: isFocusVisible ? TRACK_THICKNESS + 4 : THUMB_SIZE,\n          borderRadius: '50%',\n          boxSizing: 'border-box'\n        }}>\n        <input {...inputProps} {...focusProps} ref={inputRef} />\n      </div>\n    </div>\n  );\n}\n\n<ColorWheel />\n```\n\n----------------------------------------\n\nTITLE: Creating a Selectable Tree Component with Context in React Aria Components\nDESCRIPTION: This code demonstrates how to build a component that uses contexts to control a Tree's selection mode with a ToggleButton. It shows how to use TreeContext and ToggleButtonContext providers to share state between components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SelectionMode} from 'react-aria-components';\nimport {ToggleButtonContext, TreeContext} from 'react-aria-components';\n\nfunction Selectable({children}) {\n  let [isSelected, onChange] = React.useState(false);\n  let selectionMode: SelectionMode = isSelected ? 'multiple' : 'none';\n  return (\n    <ToggleButtonContext.Provider value={{isSelected, onChange}}>\n      <TreeContext.Provider value={{selectionMode}}>\n        {children}\n      </TreeContext.Provider>\n    </ToggleButtonContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable DateRangePicker Wrapper in React\nDESCRIPTION: This snippet demonstrates how to create a reusable wrapper component for DateRangePicker. It includes props for label, description, and error message, and composes various sub-components like DateInput, Button, and RangeCalendar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DateRangePickerProps, DateValue, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyDateRangePickerProps<T extends DateValue> extends DateRangePickerProps<T> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyDateRangePicker<T extends DateValue>({label, description, errorMessage, firstDayOfWeek, ...props}: MyDateRangePickerProps<T>) {\n  return (\n    <DateRangePicker {...props}>\n      <Label>{label}</Label>\n      <Group>\n        <DateInput slot=\"start\">\n          {segment => <DateSegment segment={segment} />}\n        </DateInput>\n        <span aria-hidden=\"true\">–</span>\n        <DateInput slot=\"end\">\n          {segment => <DateSegment segment={segment} />}\n        </DateInput>\n        <Button>▼</Button>\n      </Group>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>\n        <Dialog>\n          <RangeCalendar firstDayOfWeek={firstDayOfWeek}>\n            <header>\n              <Button slot=\"previous\">◀</Button>\n              <Heading />\n              <Button slot=\"next\">▶</Button>\n            </header>\n            <CalendarGrid>\n              {date => <CalendarCell date={date} />}\n            </CalendarGrid>\n          </RangeCalendar>\n        </Dialog>\n      </Popover>\n    </DateRangePicker>\n  );\n}\n\n<MyDateRangePicker label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation in React\nDESCRIPTION: Demonstrates how to create a basic slider component with label, output, track, and thumb using React Aria Components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Slider, Label, SliderOutput, SliderTrack, SliderThumb} from 'react-aria-components';\n\n<Slider defaultValue={30}>\n  <Label>Opacity</Label>\n  <SliderOutput />\n  <SliderTrack>\n    <SliderThumb />\n  </SliderTrack>\n</Slider>\n```\n\n----------------------------------------\n\nTITLE: Structuring a Complete Select with Slots and Validation - React Aria - TypeScript\nDESCRIPTION: Expanding on the basic composition, this TypeScript snippet shows a full Select structure including slots for description text, field errors, and section grouping. Dependencies are 'react-aria-components' and all listed subcomponents. Key configurable elements include slots for labels, errors, item labels, and descriptions, supporting advanced accessibility and form validation. The component is suitable for complex select needs with accessible structure and customizable content; make sure the required slot props are passed and corresponding children rendered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Select, SelectValue, Label, Button, Popover, ListBox, ListBoxItem, ListBoxSection, Header, Text, FieldError} from 'react-aria-components';\\n\\n<Select>\\n  <Label />\\n  <Button>\\n    <SelectValue />\\n  </Button>\\n  <Text slot=\\\"description\\\" />\\n  <FieldError />\\n  <Popover>\\n    <ListBox>\\n      <ListBoxItem>\\n        <Text slot=\\\"label\\\" />\\n        <Text slot=\\\"description\\\" />\\n      </ListBoxItem>\\n      <ListBoxSection>\\n        <Header />\\n        <ListBoxItem />\\n      </ListBoxSection>\\n    </ListBox>\\n  </Popover>\\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker with Label Prop (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates providing a visible label to the ColorPicker using the `label` prop, which is important for usability and accessibility. The ColorEditor is included as a child for editing color values. This approach is recommended unless alternative accessibility labels are used.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker label=\"Stroke color\" defaultValue=\"#345\">\n  <ColorEditor />\n</ColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Calendar Component in React Aria\nDESCRIPTION: Implementation of a reusable Calendar component that encapsulates the structure, styling, and logic, including support for error messages. This pattern helps ensure consistency across an application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CalendarProps, DateValue} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\ninterface MyCalendarProps<T extends DateValue> extends CalendarProps<T> {\n  errorMessage?: string\n}\n\nfunction MyCalendar<T extends DateValue>({errorMessage, ...props}: MyCalendarProps<T>) {\n  return (\n    <Calendar {...props}>\n      <header>\n        <Button slot=\"previous\">◀</Button>\n        <Heading />\n        <Button slot=\"next\">▶</Button>\n      </header>\n      <CalendarGrid>\n        {date => <CalendarCell date={date} />}\n      </CalendarGrid>\n      {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n    </Calendar>\n  );\n}\n\n<MyCalendar aria-label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Selection in Tabs Component (TSX)\nDESCRIPTION: Illustrates how to implement controlled selection for the `Tabs` component. It uses the `selectedKey` prop bound to React state and the `onSelectionChange` callback to update the state when a different tab is selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [timePeriod, setTimePeriod] = React.useState('triassic');\n\n  return (\n    <>\n      <p>Selected time period: {timePeriod}</p>\n      <Tabs aria-label=\"Mesozoic time periods\" selectedKey={timePeriod} onSelectionChange={setTimePeriod}>\n        <Item key=\"triassic\" title=\"Triassic\">\n          The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.\n        </Item>\n        <Item key=\"jurassic\" title=\"Jurassic\">\n          The Jurassic ranges from 200 million years to 145 million years ago.\n        </Item>\n        <Item key=\"cretaceous\" title=\"Cretaceous\">\n          The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.\n        </Item>\n      </Tabs>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Actions in Non-Selection Mode (TSX)\nDESCRIPTION: Demonstrates using the `onAction` prop to handle item clicks when `selectionMode` is implicitly `none` (the default). It captures the `key` of the clicked item and updates the state to display which action was triggered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [actionKey, setActionKey] = React.useState<Key>('');\n  return (\n    <>\n      <ActionGroup onAction={setActionKey}>\n        <Item key=\"add\">Add</Item>\n        <Item key=\"delete\">Delete</Item>\n        <Item key=\"edit\">Edit</Item>\n      </ActionGroup>\n      <p>Action: {actionKey}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Realtime Password Validation in React Aria (TSX)\nDESCRIPTION: Example of client-side realtime validation for a password field using React Aria components. It utilizes `React.useState` to control the input value and dynamically calculates validation errors based on length, uppercase letters, and symbols. The `isInvalid` prop on `TextField` and the content of `FieldError` are updated in real-time as the user types.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [password, setPassword] = React.useState('');\n  let errors = [];\n  if (password.length < 8) {\n    errors.push('Password must be 8 characters or more.');\n  }\n  if ((password.match(/[A-Z]/g) ?? []).length < 2) {\n    errors.push('Password must include at least 2 upper case letters');\n  }\n  if ((password.match(/[^a-z]/ig) ?? []).length < 2) {\n    errors.push('Password must include at least 2 symbols.');\n  }\n\n  return (\n    /*- begin highlight -*/\n    <TextField isInvalid={errors.length > 0} value={password} onChange={setPassword}>\n    {/*- end highlight -*/}\n      <Label>Name</Label>\n      <Input />\n      {/*- begin highlight -*/}\n      <FieldError>\n        <ul>{errors.map((error, i) => <li key={i}>{error}</li>)}</ul>\n      </FieldError>\n      {/*- end highlight -*/}\n    </TextField>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TimeField Example in TSX\nDESCRIPTION: Demonstrates the fundamental usage of the TimeField component from 'react-aria-components'. It shows how to compose a basic time input field using TimeField, Label, DateInput, and DateSegment components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TimeField, Label, DateInput, DateSegment} from 'react-aria-components';\n\n<TimeField>\n  <Label>Event time</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n</TimeField>\n```\n\n----------------------------------------\n\nTITLE: Implementing a TimeField Component with React Aria\nDESCRIPTION: A complete implementation of a TimeField component using React Aria hooks. The component renders time segments and handles internationalization via the useTimeFieldState and useTimeField hooks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useTimeFieldState} from '@react-stately/datepicker';\nimport {useTimeField, useDateSegment} from '@react-aria/datepicker';\nimport {useLocale} from '@react-aria/i18n';\n\nexport function TimeField(props) {\n  let {locale} = useLocale();\n  let state = useTimeFieldState({\n    ...props,\n    locale\n  });\n\n  let ref = React.useRef(null);\n  let {labelProps, fieldProps} = useTimeField(props, state, ref);\n\n  return (\n    <div className=\"wrapper\">\n      <span {...labelProps}>{props.label}</span>\n      <div {...fieldProps} ref={ref} className=\"field\">\n        {state.segments.map((segment, i) =>\n          <DateSegment key={i} segment={segment} state={state} />\n        )}\n        {state.isInvalid &&\n          <span aria-hidden=\"true\">🚫</span>\n        }\n      </div>\n    </div>\n  );\n}\n\n// Note: this component is the same as in the useDateField docs.\nfunction DateSegment({segment, state}) {\n  let ref = React.useRef(null);\n  let {segmentProps} = useDateSegment(segment, state, ref);\n\n  return (\n    <div\n      {...segmentProps}\n      ref={ref}\n      className={`segment ${segment.isPlaceholder ? 'placeholder' : ''}`}>\n      {segment.text}\n    </div>\n  );\n}\n\n<TimeField label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Events in ListBox with React State\nDESCRIPTION: This example demonstrates how to use the onSelectionChange handler to update the selection stored in React state for a static ListBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction StaticExample() {\n  let [frequency, setFrequency] = React.useState<Selection>(new Set());\n\n  return (\n    <>\n      <ListBox\n        aria-label=\"Choose frequency\"\n        selectionMode=\"single\"\n        onSelectionChange={selected => setFrequency(selected)}\n        width=\"size-2400\">\n        <Item key=\"Rarely\">Rarely</Item>\n        <Item key=\"Sometimes\">Sometimes</Item>\n        <Item key=\"Always\">Always</Item>\n      </ListBox>\n      <p>You selected: {[...frequency][0]}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Select Tree with react-aria-components in React\nDESCRIPTION: Demonstrates initializing a `Tree` component from `react-aria-components` with nested `TreeItem` elements to build a file browser-like structure. It configures default expanded keys (`defaultExpandedKeys`), default selected keys (`defaultSelectedKeys`), enables multiple selection mode (`selectionMode=\"multiple\"`), and includes placeholder `MyTreeItemContent` and `Button` components within each item. This example depends on `react-aria-components` and a custom `MyTreeItemContent` component defined elsewhere.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  Button,\n  Collection\n} from 'react-aria-components';\n\n<Tree aria-label=\"Files\" style={{height: '300px'}} defaultExpandedKeys={['documents', 'photos', 'project']} selectionMode=\"multiple\" defaultSelectedKeys={['photos']}>\n  <TreeItem id=\"documents\" textValue=\"Documents\">\n    <MyTreeItemContent>\n      Documents\n      <Button aria-label=\"Info\">ⓘ</Button>\n    </MyTreeItemContent>\n    <TreeItem id=\"project\" textValue=\"Project\">\n      <MyTreeItemContent>\n        Project\n        <Button aria-label=\"Info\">ⓘ</Button>\n      </MyTreeItemContent>\n      <TreeItem id=\"report\" textValue=\"Weekly Report\">\n        <MyTreeItemContent>\n          Weekly Report\n          <Button aria-label=\"Info\">ⓘ</Button>\n        </MyTreeItemContent>\n      </TreeItem>\n    </TreeItem>\n  </TreeItem>\n  <TreeItem id=\"photos\" textValue=\"Photos\">\n    <MyTreeItemContent>\n      Photos\n      <Button aria-label=\"Info\">ⓘ</Button>\n    </MyTreeItemContent>\n    <TreeItem id=\"one\" textValue=\"Image 1\">\n      <MyTreeItemContent>\n        Image 1\n        <Button aria-label=\"Info\">ⓘ</Button>\n      </MyTreeItemContent>\n    </TreeItem>\n    <TreeItem id=\"two\" textValue=\"Image 2\">\n      <MyTreeItemContent>\n        Image 2\n        <Button aria-label=\"Info\">ⓘ</Button>\n      </MyTreeItemContent>\n    </TreeItem>\n  </TreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ColorPicker Component in React\nDESCRIPTION: Implementation of a reusable ColorPicker wrapper component that combines all pieces into a single component. Includes customization options for label and children while providing sensible defaults.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorPickerProps} from 'react-aria-components';\nimport {Button, ColorPicker, Dialog, DialogTrigger, Popover} from 'react-aria-components';\nimport {MyColorSwatch} from './ColorSwatch';\nimport {MyColorArea} from './ColorArea';\nimport {MyColorSlider} from './ColorSlider';\nimport {MyColorField} from './ColorField';\n\ninterface MyColorPickerProps extends ColorPickerProps {\n  label?: string,\n  children?: React.ReactNode\n}\n\nfunction MyColorPicker({label, children, ...props}: MyColorPickerProps) {\n  return (\n    <ColorPicker {...props}>\n      <DialogTrigger>\n        <Button className=\"color-picker\">\n          <MyColorSwatch />\n          <span>{label}</span>\n        </Button>\n        <Popover placement=\"bottom start\">\n          <Dialog className=\"color-picker-dialog\">\n            {children || <>\n              <MyColorArea colorSpace=\"hsb\" xChannel=\"saturation\" yChannel=\"brightness\" />\n              <MyColorSlider colorSpace=\"hsb\" channel=\"hue\" />\n              <MyColorField label=\"Hex\" />\n            </>}\n          </Dialog>\n        </Popover>\n      </DialogTrigger>\n    </ColorPicker>\n  );\n}\n\n<MyColorPicker label=\"Fill color\" defaultValue=\"#f00\" />\n```\n\n----------------------------------------\n\nTITLE: Server Side Sorting with useAsyncList in React Spectrum (TypeScript)\nDESCRIPTION: Details how to perform server-side sorting by including the sortDescriptor parameters in an API request from the load function. The API must support query parameters for sorted column and direction. This pattern is suitable for large datasets and offloads sorting from the client. Depends on useAsyncList, fetch API, and server support for sort parameters; main inputs are signal and sortDescriptor; output is a list of sorted items from the API.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useAsyncList.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useAsyncList({\n  async load({signal, sortDescriptor}) {\n    let url = new URL('http://example.com/api');\n    if (sortDescriptor) {\n      url.searchParams.append('sort_key', sortDescriptor.column);\n      url.searchParams.append('sort_direction', sortDescriptor.direction);\n    }\n\n    let res = await fetch(url, {signal});\n    let json = await res.json();\n    return {\n      items: json.results\n    };\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Loading Data in React Spectrum ComboBox (TSX)\nDESCRIPTION: Demonstrates using the `useAsyncList` hook from `@react-stately/data` to fetch data asynchronously for the ComboBox. The `load` function fetches data from an API (`https://swapi.py4e.com/api/people/`) based on the `filterText`. The hook manages the loading state and provides `items`, `filterText`, and `setFilterText`, which are passed to the `ComboBox` props (`items`, `inputValue`, `onInputChange` respectively).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {useAsyncList} from '@react-stately/data';\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <ComboBox\n      label=\"Star Wars Character Lookup\"\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={list.setFilterText}>\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </ComboBox>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating React Hook Form with React Aria Components\nDESCRIPTION: This example shows how to use React Hook Form's Controller component to integrate with React Aria components. It demonstrates form setup, validation rules, and error handling while letting React Hook Form manage the form state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useForm, Controller} from 'react-hook-form'\nimport {Form, TextField, Label, Input, FieldError, Button} from 'react-aria-components';\n\nfunction App() {\n  let {handleSubmit, control} = useForm({\n    defaultValues: {\n      name: '',\n    },\n  });\n  let onSubmit = (data) => {\n    // Call your API here...\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        control={control}\n        name=\"name\"\n        rules={{ required: 'Name is required.' }}\n        render={({\n          field: { name, value, onChange, onBlur, ref },\n          fieldState: { invalid, error },\n        }) => (\n          <TextField\n            name={name}\n            value={value}\n            onChange={onChange}\n            onBlur={onBlur}\n            isRequired\n            // Let React Hook Form handle validation instead of the browser.\n            validationBehavior=\"aria\"\n            isInvalid={invalid}\n          >\n            <Label>Name</Label>\n            // Assign React Hook Form ref to Input so it can focus the Input after validation.\n            <Input ref={ref}/>\n            <FieldError>{error?.message}</FieldError>\n          </TextField>\n        )}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using label and description slots in ListBoxItem - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates how to use label and description slots within ListBoxItem elements in a Select component for improved accessibility and styling. Requires react-aria-components for the Text component and assumes the MySelect and ListBoxItem components from the React Spectrum ecosystem. Inputs are option labels and descriptions; outputs are a Select with accessibility-optimized markup. Constraints: only text, no interactive controls inside items per ARIA spec.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from 'react-aria-components';\\n\\n<MySelect label=\\\"Permissions\\\">\\n  <ListBoxItem textValue=\\\"Read\\\">\\n    <Text slot=\\\"label\\\">Read</Text>\\n    <Text slot=\\\"description\\\">Read only</Text>\\n  </ListBoxItem>\\n  <ListBoxItem textValue=\\\"Write\\\">\\n    <Text slot=\\\"label\\\">Write</Text>\\n    <Text slot=\\\"description\\\">Read and write only</Text>\\n  </ListBoxItem>\\n  <ListBoxItem textValue=\\\"Admin\\\">\\n    <Text slot=\\\"label\\\">Admin</Text>\\n    <Text slot=\\\"description\\\">Full access</Text>\\n  </ListBoxItem>\\n</MySelect>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Component with React Aria\nDESCRIPTION: Creates a main Calendar component using useCalendar and useCalendarState hooks. Handles calendar navigation and state management with support for internationalization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCalendarState} from '@react-stately/calendar';\nimport {useCalendar} from '@react-aria/calendar';\nimport {useLocale} from '@react-aria/i18n';\nimport {createCalendar} from '@internationalized/date';\n\n// Reuse the Button from your component library. See below for details.\nimport {Button} from 'your-component-library';\n\nfunction Calendar(props) {\n  let {locale} = useLocale();\n  let state = useCalendarState({\n    createCalendar,\n    ...props,\n    locale\n  });\n\n  let {calendarProps, prevButtonProps, nextButtonProps, title} = useCalendar(props, state);\n\n  return (\n    <div {...calendarProps} className=\"calendar\">\n      <div className=\"header\">\n        <h2>{title}</h2>\n        <Button {...prevButtonProps}>&lt;</Button>\n        <Button {...nextButtonProps}>&gt;</Button>\n      </div>\n      <CalendarGrid state={state} firstDayOfWeek={props.firstDayOfWeek} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Selection Pokemon Evolution Tree\nDESCRIPTION: This example demonstrates how to create a controlled selection Tree component for Pokemon evolutions. It uses React hooks for state management and custom rendering for each item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\n\ninterface Pokemon {\n  id: number,\n  name: string,\n  children?: Pokemon[]\n}\n\ninterface PokemonEvolutionTreeProps<T> extends TreeProps<T> {\n  items?: T[],\n  renderEmptyState?: () => string\n}\n\nfunction PokemonEvolutionTree(\n  props: PokemonEvolutionTreeProps<Pokemon>\n) {\n  let items: Pokemon[] = props.items ?? [\n    {id: 1, name: 'Bulbasaur', children: [\n      {id: 2, name: 'Ivysaur', children: [\n        {id: 3, name: 'Venusaur'}\n      ]}\n    ]},\n    {id: 4, name: 'Charmander', children: [\n      {id: 5, name: 'Charmeleon', children: [\n        {id: 6, name: 'Charizard'}\n      ]}\n    ]},\n    {id: 7, name: 'Squirtle', children: [\n      {id: 8, name: 'Wartortle', children: [\n        {id: 9, name: 'Blastoise'}\n      ]}\n    ]}\n  ];\n\n  let [selectedKeys, setSelectedKeys] =\n    React.useState<Selection>(new Set());\n\n  return (\n    <Tree\n      aria-label=\"Pokemon evolution tree\"\n      style={{height: '300px'}}\n      items={items}\n      defaultExpandedKeys={[1, 2]}\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n      {...props}\n    >\n      {function renderItem(item) {\n        return (\n          <MyTreeItem title={item.name}>\n            <Collection items={item.children}>\n              {renderItem}\n            </Collection>\n          </MyTreeItem>\n        );\n      }}\n    </Tree>\n  );\n}\n\n<PokemonEvolutionTree selectionMode=\"multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Multi-line TextField Implementation\nDESCRIPTION: Example showing how to create a multi-line TextField using TextArea component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField, Label, TextArea} from 'react-aria-components';\n\n<TextField>\n  <Label>Comment</Label>\n  <TextArea />\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact List UI with ListBox and Sticky Section Headers in React (TypeScript)\nDESCRIPTION: Implements a React component hierarchy (ContactListExample, ContactSection, Contact) rendering a visually styled ListBox with sections and custom item rendering for contact data. Key dependencies are react-aria-components (for ListBox, ListBoxSection, ListBoxItem, etc.), Tailwind CSS classes for styling, and the contact data arrays (favorites and people). The ListBox supports multiple selection, sticky headers, and descriptive text for each contact. Props are used for titles, data, and rendering logic; components expect data in the shape provided by the previous snippet. Output is a styled, interactive contact list UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/contact-list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ListBox, ListBoxItem, ListBoxSection, Header, Collection, Text} from 'react-aria-components';\n\nfunction ContactListExample() {\n  return (\n    <div className=\"bg-linear-to-r from-blue-500 to-sky-500 p-8 rounded-lg flex justify-center\">\n      <ListBox aria-label=\"Contacts\" selectionMode=\"multiple\" selectionBehavior=\"replace\" className=\"w-72 max-h-[290px] overflow-auto outline-hidden bg-white text-gray-700 p-2 flex flex-col gap-2 rounded-lg shadow-sm scroll-pb-2 scroll-pt-7\">\n        <ContactSection title=\"Favorites\" items={favorites}>\n          {item => <Contact item={item} />}\n        </ContactSection>\n        <ContactSection title=\"All Contacts\" items={people}>\n          {item => <Contact item={item} />}\n        </ContactSection>\n      </ListBox>\n    </div>\n  );\n}\n\nfunction ContactSection({title, children, items}) {\n  return (\n    <ListBoxSection>\n      <Header className=\"sticky -top-2 bg-white z-10 font-bold font-serif px-2 mb-1 text-slate-700\">{title}</Header>\n      <Collection items={items}>\n        {children}\n      </Collection>\n    </ListBoxSection>\n  );\n}\n\nfunction Contact({item}) {\n  return (\n    <ListBoxItem id={item.id} textValue={item.name} className=\"group relative py-1 px-2 outline-hidden cursor-default grid grid-rows-2 grid-flow-col auto-cols-max gap-x-3 rounded-sm selected:bg-blue-500 text-slate-700 selected:text-white [&:has(+[data-selected])]:selected:rounded-b-none [&[data-selected]+[data-selected]]:rounded-t-none focus-visible:ring-2 ring-offset-2 ring-blue-500\">\n      <img src={item.avatar} alt=\"\" className=\"row-span-2 place-self-center h-8 w-8 rounded-full\" />\n      <Text slot=\"label\" className=\"font-semibold truncate\">{item.name}</Text>\n      <Text slot=\"description\" className=\"truncate text-sm text-slate-600 group-selected:text-white\">{item.username}</Text>\n      <div className=\"absolute left-12 right-2 bottom-0 h-px bg-gray-200 group-selected:bg-blue-400 [.group[data-selected]:has(+:not([data-selected]))_&]:hidden [.group:not([data-selected]):has(+[data-selected])_&]:hidden [.group[data-selected]:last-child_&]:hidden\" />\n    </ListBoxItem>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing CheckboxGroup with Labels, Description, and FieldError in TypeScript\nDESCRIPTION: This TSX code demonstrates assembling a CheckboxGroup with children components: Label for the field, Checkbox for options, Text for the description slot, and FieldError for form validation feedback using react-aria-components. It highlights how inputs and error messages are linked via ARIA, and sets the foundation for accessible, form-integrated checkbox controls; all components are required from react-aria-components for proper rendering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {CheckboxGroup, Checkbox, Label, Text, FieldError} from 'react-aria-components';\n\n<CheckboxGroup>\n  <Label />\n  <Checkbox />\n  <Text slot=\"description\" />\n  <FieldError />\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling Row Actions via onRowAction Prop - TypeScript/React\nDESCRIPTION: This TypeScript/React snippet showcases two PokemonTable components with the onRowAction prop defined to display an alert when a row is acted upon, demonstrating both 'toggle' and 'replace' selection behaviors. It illustrates how tables can be configured for multiple selection modes and custom reactions to row activation, useful for actions like navigation or detail display. The implementation requires React, the PokemonTable component with correct prop handling, and ensures onRowAction is called with the appropriate row key.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', flexWrap: 'wrap', gap: '24px'}}>\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and toggle selection behavior\"\n    ///- begin highlight -///\n    onRowAction={key => alert(`Opening item ${key}...`)}\n    ///- end highlight -///\n    selectionMode=\"multiple\" />\n  <PokemonTable\n    aria-label=\"Pokemon table with row actions and replace selection behavior\"\n    ///- begin highlight -///\n    onRowAction={key => alert(`Opening item ${key}...`)}\n    selectionBehavior=\"replace\"\n    ///- end highlight -///\n    selectionMode=\"multiple\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value for DateField\nDESCRIPTION: This example demonstrates how to set a custom placeholder value for a DateField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\n<DateField label=\"Birth date\" placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Dialog with React Aria Components\nDESCRIPTION: Example of creating a basic sign-up dialog using DialogTrigger, Modal, Dialog, and form components from React Aria Components. The dialog includes form fields for first and last name.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DialogTrigger, Modal, Dialog, Button, Heading, TextField, Label, Input} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button>Sign up…</Button>\n  <Modal>\n    <Dialog>\n      <form>\n        <Heading slot=\"title\">Sign up</Heading>\n        <TextField autoFocus>\n          <Label>First Name</Label>\n          <Input />\n        </TextField>\n        <TextField>\n          <Label>Last Name</Label>\n          <Input />\n        </TextField>\n        <Button slot=\"close\" style={{marginTop: 8}}>\n          Submit\n        </Button>\n      </form>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Validation Errors via FormValidationContext in TSX\nDESCRIPTION: This snippet illustrates how to manually provide validation errors to React Aria form components using `FormValidationContext.Provider`. A standard HTML `<form>` wraps the provider, which passes an error object `{username: 'Sorry, this username is taken.'}`. The `TextField` component (containing `Label`, `Input`, `FieldError`) inside the provider will automatically receive and display the corresponding error based on its `name` prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormValidationContext} from 'react-aria-components';\n\n<form>\n  <FormValidationContext.Provider value={{username: 'Sorry, this username is taken.'}}>\n    <TextField name=\"username\">\n      <Label>Username</Label>\n      <Input />\n      <FieldError />\n    </TextField>\n  </FormValidationContext.Provider>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Controlling Select Component Selection State in TSX\nDESCRIPTION: This example shows how to implement controlled selection for a `Select` component. It uses `React.useState` to manage the selected key (`animal`). The `selectedKey` prop binds the Select's value to the state variable, and the `onSelectionChange` prop updates the state when the user selects a different option. Item keys are explicitly provided in this case.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let options = [\n    {name: 'Koala'},\n    {name: 'Kangaroo'},\n    {name: 'Platypus'},\n    {name: 'Bald Eagle'},\n    {name: 'Bison'},\n    {name: 'Skunk'}\n  ];\n  let [animal, setAnimal] = React.useState(\"Bison\");\n\n  return (\n    <Select\n      label=\"Pick an animal (controlled)\"\n      items={options}\n      selectedKey={animal}\n      onSelectionChange={selected => setAnimal(selected)}>\n      {item => <Item key={item.name}>{item.name}</Item>}\n    </Select>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateful Interaction with ActionButton - React Spectrum - TypeScript (TSX)\nDESCRIPTION: Shows how to add interactivity to ActionButton using the onPress event handler. React state tracks the count of button presses, updating the displayed count on each click or activation. This example demonstrates integration with React's useState hook and event handling. Input: User presses button. Output: Incremented counter displayed as button label. Dependencies: React, ActionButton.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ActionButton.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [count, setCount] = React.useState(0);\\n\\n  return (\\n   <ActionButton onPress={() => setCount(c => c + 1)}>{count} Edits</ActionButton>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Popover Dialog with React Aria Components\nDESCRIPTION: Example showing how to create a popover-style dialog with an arrow indicator. This implementation displays a help dialog that appears next to the trigger button with an arrow pointing to it.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Dialog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Popover, OverlayArrow} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button aria-label=\"Help\">ⓘ</Button>\n  <Popover>\n    <OverlayArrow>\n      <svg width={12} height={12} viewBox=\"0 0 12 12\"><path d=\"M0 0 L6 6 L12 0\" /></svg>\n    </OverlayArrow>\n    <Dialog>\n      <Heading slot=\"title\">Help</Heading>\n      <p>For help accessing your account, please contact support.</p>\n    </Dialog>\n  </Popover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Controlled Selection in Tabs\nDESCRIPTION: Demonstrates how to implement controlled selection in Tabs using the selectedKey prop and onSelectionChange event. This example shows a tab interface for Mesozoic time periods with controlled selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from 'react-aria-components';\n\nfunction Example() {\n  let [timePeriod, setTimePeriod] = React.useState<Key>('triassic');\n\n  return (\n    <>\n      <p>Selected time period: {timePeriod}</p>\n      <Tabs selectedKey={timePeriod} onSelectionChange={setTimePeriod}>\n        <TabList aria-label=\"Mesozoic time periods\">\n          <Tab id=\"triassic\">Triassic</Tab>\n          <Tab id=\"jurassic\">Jurassic</Tab>\n          <Tab id=\"cretaceous\">Cretaceous</Tab>\n        </TabList>\n        <TabPanel id=\"triassic\">\n          The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.\n        </TabPanel>\n        <TabPanel id=\"jurassic\">\n          The Jurassic ranges from 200 million years to 145 million years ago.\n        </TabPanel>\n        <TabPanel id=\"cretaceous\">\n          The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.\n        </TabPanel>\n      </Tabs>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Component Example in React Aria\nDESCRIPTION: A simple example demonstrating how to use the Form component with TextField, Label, Input, and Button components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, TextField, Label, Input, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  <TextField name=\"email\" type=\"email\" isRequired>\n    <Label>Email</Label>\n    <Input />\n    <FieldError />\n  </TextField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous data loading in Select using useAsyncList - React Spectrum - TypeScript\nDESCRIPTION: Implements a Select component that loads its options asynchronously from a remote API using the useAsyncList hook from @react-stately/data. Requires @react-stately/data and fetch API support. Inputs are loading events; outputs are dynamically fetched options rendered as ListBoxItems. Handles network asynchronicity and filtering constraints, if provided.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\\n\\ninterface Character {\\n  name: string\\n}\\n\\nfunction AsyncLoadingExample() {\\n  let list = useAsyncList<Character>({\\n    async load({signal, filterText}) {\\n      let res = await fetch(\\n        `https://pokeapi.co/api/v2/pokemon`,\\n        {signal}\\n      );\\n      let json = await res.json();\\n\\n      return {\\n        items: json.results\\n      };\\n    }\\n  });\\n\\n  return (\\n    <MySelect label=\\\"Pick a Pokemon\\\" items={list.items}>\\n      {(item) => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\\n    </MySelect>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Operations with onDragEnd in React Spectrum\nDESCRIPTION: This example shows how to implement the onDragEnd event handler to respond when a drag operation completes. It demonstrates removing items from the UI when a move operation is performed, while preserving them when a copy operation is used.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n      {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n      {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n      {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    // ...\n    ///- begin collapse -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        return {\n          'text/plain': item.name,\n          'pokemon': JSON.stringify(item)\n        };\n      });\n    },\n    ///- end collapse -///\n    /*- begin highlight -*/\n    onDragEnd(e) {\n      if (e.dropOperation === 'move') {\n        list.remove(...e.keys);\n      }\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <PokemonTable\n        items={list.items}\n        selectionMode=\"multiple\"\n        dragAndDropHooks={dragAndDropHooks} />\n      <DroppableTable />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Form Component\nDESCRIPTION: CSS code that styles the Form component by setting up its layout as a flex container with column direction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Form {\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Accessible Tooltip with useTooltipTrigger and useTooltip - React TypeScript\nDESCRIPTION: This example demonstrates how to use the useTooltipTrigger and useTooltip hooks from @react-aria/tooltip and @react-stately/tooltip, combined with custom styling and ARIA attributes, to create fully accessible tooltips that wrap a button. It showcases merging props, overlay positioning, state handling for open/close, and connecting tooltips to triggers following ARIA best practices. The implementation requires @react-aria/tooltip, @react-stately/tooltip, React, and @react-aria/utils, and accepts props such as tooltip content and standard tooltip options; the output is an interactive tooltip shown on hover/focus or as controlled by props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tooltip/docs/useTooltipTrigger.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTooltip, useTooltipTrigger} from '@react-aria/tooltip';\nimport {useTooltipTriggerState} from '@react-stately/tooltip';\nimport {mergeProps} from '@react-aria/utils';\n\nfunction Tooltip({state, ...props}) {\n  let {tooltipProps} = useTooltip(props, state);\n\n  return (\n    <span\n      style={{\n        position: 'absolute',\n        left: '5px',\n        top: '100%',\n        maxWidth: 150,\n        marginTop: '10px',\n        backgroundColor: 'white',\n        color: 'black',\n        padding: '5px',\n        border: '1px solid gray'\n      }}\n      {...mergeProps(props, tooltipProps)} >\n      {props.children}\n    </span>\n  );\n}\n\nfunction TooltipButton(props) {\n  let state = useTooltipTriggerState(props);\n  let ref = React.useRef(null);\n\n  // Get props for the trigger and its tooltip\n  let {triggerProps, tooltipProps} = useTooltipTrigger(props, state, ref);\n\n  return (\n    <span style={{position: 'relative'}}>\n      <button ref={ref} {...triggerProps} style={{fontSize: 18}} onClick={() => alert('Pressed button')}>{props.children}</button>\n      {state.isOpen && (\n        <Tooltip state={state} {...tooltipProps}>{props.tooltip}</Tooltip>\n      )}\n    </span>\n  );\n}\n\n<TooltipButton tooltip=\"Edit\">✏️</TooltipButton>\n<TooltipButton tooltip=\"Delete\">🚮</TooltipButton>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Loading with SearchAutocomplete in React Spectrum\nDESCRIPTION: This example demonstrates how to implement asynchronous data loading in a SearchAutocomplete component using the useAsyncList hook. It loads Star Wars character data from an API based on the input text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Character>({\n    async load({signal, cursor, filterText}) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      // If no cursor is available, then we're loading the first page,\n      // filtering the results returned via a query string that\n      // mirrors the SearchAutocomplete input text.\n      // Otherwise, the cursor is the next URL to load,\n      // as returned from the previous page.\n      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=${filterText}`, {signal});\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <SearchAutocomplete\n      label=\"Star Wars Character Lookup\"\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={list.setFilterText}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}>\n      {item => <Item key={item.name}>{item.name}</Item>}\n    </SearchAutocomplete>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering of ComboBox Items - React Spectrum - TypeScript\nDESCRIPTION: This example demonstrates creating a controlled ComboBox with custom filtering logic using useFilter from '@react-aria/i18n'. The inputValue is synchronized with a filter state, and filtering is performed via the items prop rather than defaultItems, allowing developers to fully control which items are displayed. Requires React, useFilter, and react-aria-components. Inputs are filtering text and an array of email-addressed options; output is a dynamically filtered list of emails shown in ComboBox. Useful for search/autocomplete implementations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\nimport {useFilter} from '@react-aria/i18n';\n\nfunction Example() {\n  let options = [\n    {id: 1, email: 'fake@email.com'},\n    {id: 2, email: 'anotherfake@email.com'},\n    {id: 3, email: 'bob@email.com'},\n    {id: 4, email: 'joe@email.com'},\n    {id: 5, email: 'yourEmail@email.com'},\n    {id: 6, email: 'valid@email.com'},\n    {id: 7, email: 'spam@email.com'},\n    {id: 8, email: 'newsletter@email.com'},\n    {id: 9, email: 'subscribe@email.com'}\n  ];\n\n  let {startsWith} = useFilter({sensitivity: 'base'});\n  let [filterValue, setFilterValue] = React.useState('');\n  let filteredItems = React.useMemo(\n    () => options.filter((item) => startsWith(item.email, filterValue)),\n    [options, filterValue]\n  );\n\n  return (\n    <MyComboBox\n      label=\"To:\"\n      /*- begin highlight -*/\n      items={filteredItems}\n      inputValue={filterValue}\n      onInputChange={setFilterValue}\n      /*- end highlight -*/\n      allowsCustomValue>\n      {(item) => <ListBoxItem>{item.email}</ListBoxItem>}\n    </MyComboBox>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Different Granularity Settings in React Spectrum\nDESCRIPTION: Example showing two synchronized DatePickers with different granularity settings: one showing date and time to seconds precision, and another showing only the date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DatePicker\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate} />\n      <DatePicker\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Loading Data with useAsyncList in React Spectrum (TSX)\nDESCRIPTION: Demonstrates using the `useAsyncList` hook from `@react-stately/data` to fetch data asynchronously from an API (e.g., PokeAPI) using `fetch`. The loaded items (`list.items`) are then used to populate a React Spectrum `Select` component rendered via a `ListBox`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\nlet list = useAsyncList({\n  async load({signal}) {\n    let res = await fetch('https://pokeapi.co/api/v2/pokemon', {signal});\n    let json = await res.json();\n    return {items: json.results};\n  }\n});\n\n<Select>\n  <Label>Pick a Pokemon</Label>\n  <Button>\n    <SelectValue />\n  </Button>\n  <Popover>\n    <ListBox items={list.items}>\n      {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n    </ListBox>\n  </Popover>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable DateField Component Wrapper\nDESCRIPTION: Example of creating a reusable DateField wrapper component that encapsulates the DOM structure, styling, and validation logic to ensure consistency across an application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DateFieldProps, DateValue, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyDateFieldProps<T extends DateValue> extends DateFieldProps<T> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyDateField<T extends DateValue>({label, description, errorMessage, ...props}: MyDateFieldProps<T>) {\n  return (\n    <DateField {...props}>\n      <Label>{label}</Label>\n      <DateInput>\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </DateField>\n  );\n}\n\n<MyDateField label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Table with Dynamic Data Collections\nDESCRIPTION: Creates a FileTable component that demonstrates how to work with dynamic collections for both columns and rows, mapping data from external sources to table cells using render functions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TableProps} from 'react-aria-components';\n\nfunction FileTable(props: TableProps) {\n  let columns = [\n    {name: 'Name', id: 'name', isRowHeader: true},\n    {name: 'Type', id: 'type'},\n    {name: 'Date Modified', id: 'date'}\n  ];\n\n  let rows = [\n    {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},\n    {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},\n    {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},\n    {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}\n  ];\n\n  return (\n    <Table aria-label=\"Files\" {...props}>\n      <MyTableHeader columns={columns}>\n        {column => (\n          <Column isRowHeader={column.isRowHeader}>\n            {column.name}\n          </Column>\n        )}\n      </MyTableHeader>\n      <TableBody items={rows}>\n        {item => (\n          <MyRow columns={columns}>\n            {column => <Cell>{item[column.id]}</Cell>}\n          </MyRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Menu Section Component with useMenuSection Hook (TypeScript)\nDESCRIPTION: Implements a custom MenuSection React component using 'useMenuSection' from '@react-aria/menu' and 'useSeparator' from '@react-aria/separator'. Required dependencies are React, @react-aria/menu, and @react-aria/separator. The section accepts a section object and menu state. Handles rendering section headings, separators between sections, and iteratively renders child MenuItems. Ensures correct HTML semantics with nested <li> and <ul> structures. This design is necessary for accessibility and grouped menu logic.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useMenuSection} from '@react-aria/menu';\\nimport {useSeparator} from '@react-aria/separator';\\n\\nfunction MenuSection({section, state}) {\\n  let {itemProps, headingProps, groupProps} = useMenuSection({\\n    heading: section.rendered,\\n    'aria-label': section['aria-label']\\n  });\\n\\n  let {separatorProps} = useSeparator({\\n    elementType: 'li'\\n  });\\n\\n  // If the section is not the first, add a separator element.\\n  // The heading is rendered inside an <li> element, which contains\\n  // a <ul> with the child items.\\n  return <>\\n    {section.key !== state.collection.getFirstKey() &&\\n      <li\\n        {...separatorProps}\\n        style={{\\n          borderTop: '1px solid gray',\\n          margin: '2px 5px'\\n        }} />\\n    }\\n    <li {...itemProps}>\\n      {section.rendered &&\\n        <span\\n          {...headingProps}\\n          style={{\\n            fontWeight: 'bold',\\n            fontSize: '1.1em',\\n            padding: '2px 5px',\\n          }}>\\n          {section.rendered}\\n        </span>\\n      }\\n      <ul\\n        {...groupProps}\\n        style={{\\n          padding: 0,\\n          listStyle: 'none'\\n        }}>\\n        {[...section.childNodes].map(node =>\\n          <MenuItem\\n            key={node.key}\\n            item={node}\\n            state={state} />\\n        )}\\n      </ul>\\n    </li>\\n  </>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Building an HSLA Color Picker with React Spectrum\nDESCRIPTION: This example demonstrates how to create an HSLA color picker using ColorArea, ColorWheel, and ColorSlider components. It uses a ColorWheel for the hue selection and a ColorArea for saturation and lightness, with an additional slider for alpha transparency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea, ColorSlider, ColorWheel} from '@react-spectrum/color';\nimport {Flex, Grid} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\nimport {View} from '@react-spectrum/view';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0.5)'));\n  let [, saturationChannel, lightnessChannel] = color.getColorChannels();\n  return (\n    <fieldset style={{border: 0}}>\n      <legend>HSLA Example</legend>\n      <Flex\n        direction=\"column\">\n        <View\n          position=\"relative\"\n          width=\"size-2400\">\n          <Grid\n            position=\"absolute\"\n            justifyContent=\"center\"\n            alignContent=\"center\"\n            width=\"100%\"\n            height=\"100%\">\n            <ColorArea\n              xChannel={saturationChannel}\n              yChannel={lightnessChannel}\n              value={color}\n              onChange={setColor}\n              size=\"size-1200\" />\n          </Grid>\n          <ColorWheel\n            value={color}\n            onChange={setColor}\n            size=\"size-2400\" />\n        </View>\n        <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n        <p>Current value: {color.toString('hsla')}</p>\n      </Flex>\n    </fieldset>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Operations in React Spectrum\nDESCRIPTION: This snippet demonstrates how to handle drop operations, specifically removing items when a move operation is completed. It uses the useListData hook to manage the list of items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from '@react-stately/data';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 'a', textValue: 'Photoshop'},\n      {id: 'b', textValue: 'XD'},\n      {id: 'c', textValue: 'Dreamweaver'},\n      {id: 'd', textValue: 'InDesign'},\n      {id: 'e', textValue: 'Connect'}\n    ]\n  });\n\n  let onDragEnd = e => {\n    if (e.dropOperation === 'move') {\n      list.remove(...e.keys);\n    }\n  };\n\n  return <>\n    <ListBox aria-label=\"Adobe apps\" items={list.items} onDragEnd={onDragEnd} selectionMode=\"multiple\">\n      {item => <Item>{item.textValue}</Item>}\n    </ListBox>\n    <DropTarget />\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Icon-Only Buttons with Accessibility Labels in Spectrum (TypeScript)\nDESCRIPTION: This snippet creates three icon-only Spectrum Buttons, ensuring accessibility by adding an 'aria-label' prop. Each button uses different variants (accent, primary, secondary) and displays a Bell icon. Arranged in a Flex row with spacing, they demonstrate best practice for non-text buttons. Dependencies: '@spectrum-icons/workflow/Bell', '@react-spectrum/button', '@react-spectrum/layout'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\\\"row\\\" gap={8}>\\n  <Button variant=\\\"accent\\\" aria-label=\\\"Ring for service\\\"><Bell /></Button>\\n  <Button variant=\\\"primary\\\" aria-label=\\\"Ring for service\\\"><Bell /></Button>\\n  <Button variant=\\\"secondary\\\" aria-label=\\\"Ring for service\\\"><Bell /></Button>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Managing Overlay Exit Animations and Animation State - TypeScript/TSX\nDESCRIPTION: This snippet offers a full example of controlling overlay entry/exit with Framer Motion, managing animation state using React's useState and event callbacks. The example preserves overlays in the DOM during exit animations by using the isExiting prop, updates the animation state via onOpenChange, and resets state on animation complete. Variants for 'hidden' and 'visible' states are defined for both overlay and modal for coordinated animation. Key dependencies: react, react-aria-components, framer-motion. Inputs include overlay open/close events; outputs are smooth, interruptible animations. Ensures overlays are not removed from DOM prematurely and provides proper animation sequencing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\ntype AnimationState = 'unmounted' | 'hidden' | 'visible';\n\nfunction Example() {\n  /*- begin highlight -*/\n  // Track animation state.\n  let [animation, setAnimation] = React.useState<AnimationState>('unmounted');\n  /*- end highlight -*/\n\n  return (\n    <DialogTrigger\n      /*- begin highlight -*/\n      // Start animation when open state changes.\n      onOpenChange={isOpen => setAnimation(isOpen ? 'visible' : 'hidden')}\n      /*- end highlight -*/\n    >\n      <Button>Open dialog</Button>\n      <MotionModalOverlay\n        /*- begin highlight -*/\n        // Prevent modal from unmounting during animation.\n        isExiting={animation === 'hidden'}\n        // Reset animation state once it is complete.\n        onAnimationComplete={animation => {\n          setAnimation(a => animation === 'hidden' && a === 'hidden' ? 'unmounted' : a)\n        }}\n        /*- end highlight -*/\n        variants={{\n          hidden: {opacity: 0},\n          visible: {opacity: 1}\n        }}\n        initial=\"hidden\"\n        animate={animation}>\n        <MotionModal\n          variants={{\n            hidden: {opacity: 0, y: 32},\n            visible: {opacity: 1, y: 0}\n          }}>\n          {/* ... */}\n        </MotionModal>\n      </MotionModalOverlay>\n    </DialogTrigger>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Table with Sortable and Resizable Columns via Menu\nDESCRIPTION: This example shows how to use the ResizableTableColumn component to create a table that supports both column resizing and sorting through a dropdown menu. It includes state management for sorting and demonstrates proper data sorting based on the sort descriptor.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SortDescriptor} from 'react-aria-components';\n\nfunction Example() {\n  let [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({\n    column: 'file',\n    direction: 'ascending'\n  });\n\n  let items = [\n    // ...\n    ///- begin collapse -////\n    {\n      id: 1,\n      file: '2022-Roadmap-Proposal-Revision-012822-Copy(2)',\n      size: '214 KB',\n      date: 'November 27, 2022 at 4:56PM'\n    },\n    {\n      id: 2,\n      file: '62259692_p0_master1200',\n      size: '120 KB',\n      date: 'January 27, 2021 at 1:56AM'\n    }\n    ///- end collapse -///\n  ].sort((a, b) => {\n    let d = a[sortDescriptor.column].localeCompare(b[sortDescriptor.column]);\n    return sortDescriptor.direction === 'descending' ? -d : d;\n  });\n\n  return (\n    <ResizableTableContainer>\n      <Table aria-label=\"Table with resizable columns\" sortDescriptor={sortDescriptor} onSortChange={setSortDescriptor}>\n        <TableHeader>\n          <ResizableTableColumn id=\"file\" isRowHeader allowsSorting>File Name</ResizableTableColumn>\n          <ResizableTableColumn id=\"size\" allowsSorting>Size</ResizableTableColumn>\n          <ResizableTableColumn id=\"date\" allowsSorting>Date Modified</ResizableTableColumn>\n        </TableHeader>\n        <TableBody items={items}>\n          {item => (\n            <Row>\n              <Cell>{item.file}</Cell>\n              <Cell>{item.size}</Cell>\n              <Cell>{item.date}</Cell>\n            </Row>\n          )}\n        </TableBody>\n      </Table>\n    </ResizableTableContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: FieldGroup Composition with Context for Validation - React Spectrum (TypeScript)\nDESCRIPTION: Illustrates creating a FieldGroup component that groups time fields and handles validation messaging using TimeFieldContext and the useId hook from React Aria. The error message is linked via aria-describedby, and all child TimeFields can be marked as invalid. This advanced pattern helps manage accessibility and error presentation in complex forms.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TimeFieldContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      {/*- begin highlight -*/}\n      <TimeFieldContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n      {/*- end highlight -*/}\n        {children}\n      </TimeFieldContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Schedule meeting time\" errorMessage=\"End time must be after start time.\">\n  <MyTimeField label=\"Start\" defaultValue={new Time(13)} />\n  <MyTimeField label=\"End\" defaultValue={new Time(9)} />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Form Validation Example\nDESCRIPTION: Shows how to implement form validation with custom error messages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/form/docs/Form.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationErrors={{username: 'Sorry, this username is taken.'}} maxWidth=\"size-3000\">\n  <TextField label=\"Username\" name=\"username\" />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Styling ListBox and ListBoxItem Components - CSS\nDESCRIPTION: This css block provides comprehensive styles for both .react-aria-ListBox and .react-aria-ListBoxItem. It defines layout, spacing, borders, background, focus-visible outlines, and selected-item appearance, using custom properties for theme variables. Requires these classes to be applied to the target components and environment support for CSS variables. Supports forced color adjustment and state-based styling with attribute selectors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\\n\\n.react-aria-ListBox {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 4px;\\n  max-height: inherit;\\n  overflow: auto;\\n  padding: 4px;\\n  border: 1px solid var(--border-color);\\n  border-radius: 6px;\\n  background: var(--overlay-background);\\n  forced-color-adjust: none;\\n  outline: none;\\n  width: 250px;\\n  max-height: 300px;\\n  min-height: 100px;\\n  box-sizing: border-box;\\n\\n  &[data-focus-visible] {\\n    outline: 2px solid var(--focus-ring-color);\\n    outline-offset: -1px;\\n  }\\n}\\n\\n.react-aria-ListBoxItem {\\n  padding: 0 0.571rem;\\n  border-radius: 6px;\\n  outline: none;\\n  cursor: default;\\n  color: var(--text-color);\\n  font-size: 1.072rem;\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  min-height: 32px;\\n\\n  &[data-focus-visible] {\\n    outline: 2px solid var(--focus-ring-color);\\n    outline-offset: -2px;\\n  }\\n\\n  &[data-selected] {\\n    background: var(--highlight-background);\\n    color: var(--highlight-foreground);\\n\\n    &[data-focus-visible] {\\n      outline-color: var(--highlight-foreground);\\n      outline-offset: -4px;\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Drop Target Component Implementation\nDESCRIPTION: Shows implementation of a drop target component that can accept dragged items and handle different text formats including custom types.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrag.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DropTarget() {\n  let [dropped, setDropped] = React.useState(null);\n  let ref = React.useRef(null);\n  let {dropProps, isDropTarget} = useDrop({\n    ref,\n    async onDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(item => item.kind === 'text' && (item.types.has('text/plain') || item.types.has('my-app-custom-type')))\n          .map(async (item: TextDropItem) => {\n            if (item.types.has('my-app-custom-type')) {\n              return JSON.parse(await item.getText('my-app-custom-type'));\n            } else {\n              return {message: await item.getText('text/plain')};\n            }\n          })\n      );\n      setDropped(items);\n    }\n  });\n\n  let message = ['Drop here'];\n  if (dropped) {\n    message = dropped.map(d => {\n      let message = d.message;\n      if (d.style === 'bold') {\n        message = <strong>{message}</strong>;\n      } else if (d.style === 'italic') {\n        message = <em>{message}</em>;\n      }\n      return <div>{message}</div>;\n    });\n  }\n\n  return (\n    <div {...dropProps} role=\"button\" tabIndex={0} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`}>\n      {message}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Drag and Drop Between Lists using React Spectrum\nDESCRIPTION: This React (TSX) snippet demonstrates how to implement drag and drop functionality between two `ListView` components. It utilizes the `useDragAndDrop` hook from `@react-spectrum/dnd` to handle drag events (reorder, insert, root drop, drag end) and the `useListData` hook to manage the state of the list items. The example defines a reusable `BidirectionalDnDListView` component and a parent `DragBetweenListsExample` component to set up two lists with initial data, allowing items to be moved between them and reordered within each list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/drag-and-drop.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nsnippet\nimport {Flex, ListView, Item, Text, useListData} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@react-spectrum/dnd';\nimport File from '@spectrum-icons/illustrations/File';\nimport Folder from '@spectrum-icons/illustrations/Folder';\n\nfunction BidirectionalDnDListView(props) {\n  let {list} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-bidirectional'],\n    // Only allow move operations\n    getAllowedDropOperations: () => ['move'],\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-bidirectional': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async item => JSON.parse(await item.getText('custom-app-type-bidirectional')))\n      );\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onReorder: async (e) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async item => JSON.parse(await item.getText('custom-app-type-bidirectional')))\n      );\n      list.append(...processedItems);\n    },\n    /*- begin highlight -*/\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys,\n        isInternal\n      } = e;\n      // Only remove the dragged items if they aren't dropped inside the source list\n      if (dropOperation === 'move' && !isInternal) {\n        list.remove(...keys);\n      }\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <ListView\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}>\n      {item => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' ? <Folder /> : <File />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragBetweenListsExample() {\n  let list1 = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop'},\n      {id: '2', type: 'file', name: 'Adobe XD'},\n      {id: '3', type: 'folder', name: 'Documents'},\n      {id: '4', type: 'file', name: 'Adobe InDesign'},\n      {id: '5', type: 'folder', name: 'Utilities'},\n      {id: '6', type: 'file', name: 'Adobe AfterEffects'}\n    ]\n  });\n\n  let list2 = useListData({\n    initialItems: [\n      {id: '7', type: 'folder', name: 'Pictures'},\n      {id: '8', type: 'file', name: 'Adobe Fresco'},\n      {id: '9', type: 'folder', name: 'Apps'},\n      {id: '10', type: 'file', name: 'Adobe Illustrator'},\n      {id: '11', type: 'file', name: 'Adobe Lightroom'},\n      {id: '12', type: 'file', name: 'Adobe Dreamweaver'}\n    ]\n  });\n\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <BidirectionalDnDListView list={list1} aria-label=\"First ListView in drag between list example\" />\n      <BidirectionalDnDListView list={list2} aria-label=\"Second ListView in drag between list example\" />\n    </Flex>\n  );\n}\n\n<DragBetweenListsExample />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Autocomplete with React Aria Components in TSX\nDESCRIPTION: Demonstrates a basic implementation of the Autocomplete component using `react-aria-components`. It includes a `SearchField` for input and a `Menu` with static `MenuItem`s for suggestions. It utilizes the `useFilter` hook for client-side filtering based on the `contains` strategy.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Autocomplete, Button, Input, Label, Menu, MenuItem, SearchField, useFilter} from 'react-aria-components';\n\nfunction Example() {\n  let {contains} = useFilter({sensitivity: 'base'});\n  return (\n    <div className=\"autocomplete\">\n      <Autocomplete filter={contains}>\n        <SearchField>\n          <Label>Commands</Label>\n          <Input placeholder=\"Search commands....\" />\n          <Button>✕</Button>\n        </SearchField>\n        <Menu>\n          <MenuItem>Create new file...</MenuItem>\n          <MenuItem>Create new folder...</MenuItem>\n          <MenuItem>Assign to...</MenuItem>\n          <MenuItem>Assign to me</MenuItem>\n          <MenuItem>Change status...</MenuItem>\n          <MenuItem>Change priority...</MenuItem>\n          <MenuItem>Add label...</MenuItem>\n          <MenuItem>Remove label...</MenuItem>\n        </Menu>\n      </Autocomplete>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Data Loading with SearchAutocomplete in React Spectrum\nDESCRIPTION: Demonstrates how to use the useAsyncList hook to handle asynchronous loading and filtering of data from an API. This example fetches Star Wars character data based on the input text and displays the results in a SearchAutocomplete component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <SearchAutocomplete\n      label=\"Search Star Wars Characters\"\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={list.setFilterText}>\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </SearchAutocomplete>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ListBox with Link Items in React Spectrum\nDESCRIPTION: Demonstrates how to create link items in a ListBox by passing the href prop to the Item component. Link items navigate to other pages and are not selectable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox aria-label=\"Links\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Customizing DatePicker Label Alignment and Position in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Modifies labelPosition and labelAlign props to position the label beside the DatePicker and align it to the end (right in LTR layouts). Aids in aligning with visual guidelines and handling both RTL and LTR languages. Accepts label, labelPosition, and labelAlign parameters, affecting layout but not functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_20\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker label=\\\"Birth date\\\" labelPosition=\\\"side\\\" labelAlign=\\\"end\\\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Menu Component with React Aria/Stately in TypeScript\nDESCRIPTION: This snippet defines a `Menu` component in TypeScript. It uses `useTreeState` from `@react-stately/tree` to manage the collection of menu items/sections and `useMenu` from `@react-aria/menu` to apply necessary ARIA props to the `<ul>` element representing the menu. It iterates through the collection managed by `useTreeState` and renders either a `MenuSection` or `MenuItem` component for each item based on its type.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaMenuProps} from '@react-aria/menu';\nimport {useMenu} from '@react-aria/menu';\nimport {useTreeState} from '@react-stately/tree';\n\nfunction Menu<T extends object>(props: AriaMenuProps<T>) {\n  // Create menu state based on the incoming props\n  let state = useTreeState(props);\n\n  // Get props for the menu element\n  let ref = React.useRef(null);\n  let {menuProps} = useMenu(props, state, ref);\n\n  return (\n    <ul {...menuProps} ref={ref}>\n      {[...state.collection].map(item => (\n        item.type === 'section'\n          ? <MenuSection key={item.key} section={item} state={state} />\n          : <MenuItem key={item.key} item={item} state={state} />\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: DialogContainer with Menu-Triggered Dialogs\nDESCRIPTION: This example shows how to use DialogContainer with a MenuTrigger to display different dialogs based on menu selection. It demonstrates the useDialogContainer hook for self-dismissal and separation of dialog content from trigger components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogContainer.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDialogContainer} from '@react-spectrum/dialog';\n\nfunction Example() {\n  let [dialog, setDialog] = React.useState(null);\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton aria-label=\"Actions\"><More /></ActionButton>\n        <Menu onAction={setDialog}>\n          <Item key=\"edit\">Edit...</Item>\n          <Item key=\"delete\">Delete...</Item>\n        </Menu>\n      </MenuTrigger>\n      <DialogContainer onDismiss={() => setDialog(null)}>\n        {dialog === 'edit' &&\n          <EditDialog />\n        }\n        {dialog === 'delete' &&\n          <AlertDialog\n            title=\"Delete\"\n            variant=\"destructive\"\n            primaryActionLabel=\"Delete\">\n            Are you sure you want to delete this item?\n          </AlertDialog>\n        }\n      </DialogContainer>\n    </>\n  );\n}\n\nfunction EditDialog() {\n  // This hook allows us to dismiss the dialog when the user\n  // presses one of the buttons (below).\n  let dialog = useDialogContainer();\n\n  return (\n    <Dialog>\n      <Heading>Edit</Heading>\n      <Divider />\n      <Content>\n        <Form labelPosition=\"side\" width=\"100%\">\n          <TextField autoFocus label=\"First Name\" defaultValue=\"John\" />\n          <TextField label=\"Last Name\" defaultValue=\"Smith\" />\n        </Form>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={dialog.dismiss}>Cancel</Button>\n        <Button variant=\"accent\" onPress={dialog.dismiss}>Save</Button>\n      </ButtonGroup>\n    </Dialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Loading in React Spectrum ComboBox (TSX)\nDESCRIPTION: Illustrates asynchronous data loading for a `ComboBox` using the `useAsyncList` hook from `@react-stately/data`. This example fetches Star Wars character data from an API, handles loading states via `loadingState`, implements filtering based on input (`filterText`), and supports infinite scrolling with `onLoadMore`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Character>({\n    async load({signal, cursor, filterText}) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      // If no cursor is available, then we're loading the first page,\n      // filtering the results returned via a query string that\n      // mirrors the ComboBox input text.\n      // Otherwise, the cursor is the next URL to load,\n      // as returned from the previous page.\n      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=${filterText}`, {signal});\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <ComboBox\n      label=\"Star Wars Character Lookup\"\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={list.setFilterText}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}>\n      {item => <Item key={item.name}>{item.name}</Item>}\n    </ComboBox>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Date Value in DatePicker\nDESCRIPTION: Configures a DatePicker to only accept dates after today by setting the minValue property to the current date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<DatePicker\n  label=\"Appointment date\"\n  minValue={today(getLocalTimeZone())}\n  defaultValue={parseDate('2022-02-03')} />\n```\n\n----------------------------------------\n\nTITLE: Styling the React Spectrum GridList and Its Children - CSS\nDESCRIPTION: Defines detailed theme and interaction styles for .react-aria-GridList and its child elements, supporting focus rings, selection states, keyboard and pointer interactivity, and high contrast modes. The CSS ensures accessibility (focus ring, forced color adjust), visually distinct selected/disabled/pressed/hover states, special handling for adjacent selected items (with :has selector), and custom checkbox appearance. Inputs are rendered grid list components with correct class names; output is a visually and accessibly enhanced UI. Limitations include requiring modern browsers for :has support, and all dependent CSS variables (e.g., --highlight-background) must be defined at a higher level.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-GridList {\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  max-height: inherit;\n  overflow: auto;\n  padding: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--overlay-background);\n  forced-color-adjust: none;\n  outline: none;\n  width: 250px;\n  max-height: 300px;\n  min-height: 100px;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n\n  .react-aria-GridListItem {\n    display: flex;\n    align-items: center;\n    gap: 0.571rem;\n    min-height: 28px;\n    padding: 0.286rem 0.286rem 0.286rem 0.571rem;\n    border-radius: 6px;\n    outline: none;\n    cursor: default;\n    color: var(--text-color);\n    font-size: 1.072rem;\n    position: relative;\n    transform: translateZ(0);\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n      --focus-ring-color: var(--highlight-foreground);\n\n      &[data-focus-visible] {\n        outline-color: var(--highlight-foreground);\n        outline-offset: -4px;\n      }\n\n      .react-aria-Button {\n        color: var(--highlight-foreground);\n        --highlight-hover: rgb(255 255 255 / 0.1);\n        --highlight-pressed: rgb(255 255 255 / 0.2);\n      }\n    }\n\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n\n    .react-aria-Button:not([slot]) {\n      margin-left: auto;\n    }\n\n    .react-aria-Button {\n      background: transparent;\n      border: none;\n      font-size: 1.2rem;\n      line-height: 1.2em;\n      padding: 0.286rem 0.429rem;\n      transition: background 200ms;\n\n      &[data-hovered] {\n        background: var(--highlight-hover);\n      }\n\n      &[data-pressed] {\n        background: var(--highlight-pressed);\n        box-shadow: none;\n      }\n    }\n  }\n\n  /* join selected items if :has selector is supported */\n  @supports selector(:has(.foo)) {\n    gap: 0;\n\n    .react-aria-GridListItem[data-selected]:has(+ [data-selected]),\n    .react-aria-GridListItem[data-selected]:has(+ .react-aria-DropIndicator + [data-selected]) {\n      border-end-start-radius: 0;\n      border-end-end-radius: 0;\n    }\n\n    .react-aria-GridListItem[data-selected] + [data-selected],\n    .react-aria-GridListItem[data-selected] + .react-aria-DropIndicator + [data-selected] {\n      border-start-start-radius: 0;\n      border-start-end-radius: 0;\n    }\n  }\n\n  :where(.react-aria-GridListItem) .react-aria-Checkbox {\n    --selected-color: var(--highlight-foreground);\n    --selected-color-pressed: var(--highlight-foreground-pressed);\n    --checkmark-color: var(--highlight-background);\n    --background-color: var(--highlight-background);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Side Filtering with useAsyncList and ComboBox in React Spectrum (TypeScript)\nDESCRIPTION: Illustrates server-side filtering by passing filterText from useAsyncList to the API search query and connecting list.filterText and list.setFilterText to a ComboBox component. This enables user-driven, debounced filtering via the ComboBox input. Depends on useAsyncList, ComboBox, and fetch-compatible APIs that support filtering via query. Input parameters are signal and filterText; output is a filtered list of items displayed in the ComboBox with appropriate loading indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useAsyncList.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useAsyncList({\n  async load({signal, filterText}) {\n    let res = await fetch(`https://swapi.py4e.com/api/people/?search=${filterText}`, {signal});\n    let json = await res.json();\n\n    return {\n      items: json.results\n    };\n  }\n});\n\n<ComboBox\n  label=\"Star Wars Character Lookup\"\n  items={list.items}\n  inputValue={list.filterText}\n  onInputChange={list.setFilterText}\n  loadingState={list.loadingState}>\n  {item => <Item key={item.name}>{item.name}</Item>}\n</ComboBox>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic List with React Aria\nDESCRIPTION: This example demonstrates how to create a List component with dynamic data using React Aria hooks and render functions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ExampleList(props) {\n  let rows = [\n    {id: 1, name: 'Games'},\n    {id: 2, name: 'Program Files'},\n    {id: 3, name: 'bootmgr'},\n    {id: 4, name: 'log.txt'}\n  ];\n\n  return (\n    <List aria-label=\"Example dynamic collection List\" selectionMode=\"multiple\" items={rows} {...props}>\n      {item => (\n        <Item textValue={item.name}>\n          {item.name}\n          <Button onPress={() => alert(`Info for ${item.name}...`)}>\n            Info\n          </Button>\n        </Item>\n      )}\n    </List>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Component CSS Styling\nDESCRIPTION: CSS styling for the Menu and MenuItem components. Defines layout, colors, spacing, and focus states. Includes styling for grid-based layout within menu items to support labels, descriptions, and keyboard shortcuts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Menu {\n  max-height: inherit;\n  box-sizing: border-box;\n  overflow: auto;\n  padding: 2px;\n  min-width: 150px;\n  box-sizing: border-box;\n  outline: none;\n}\n\n.react-aria-MenuItem {\n  margin: 2px;\n  padding: 0.286rem 0.571rem;\n  border-radius: 6px;\n  outline: none;\n  cursor: default;\n  color: var(--text-color);\n  font-size: 1.072rem;\n  position: relative;\n  display: grid;\n  grid-template-areas: \"label kbd\"\n                      \"desc  kbd\";\n  align-items: center;\n  column-gap: 20px;\n  forced-color-adjust: none;\n\n  &[data-focused] {\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Core Components - React Spectrum - JavaScript (JSX)\nDESCRIPTION: This snippet demonstrates how to import ActionButton from @react-spectrum/button, View from @react-spectrum/view, and Flex from @react-spectrum/layout. These imports are foundational to use ActionButton and layout components in a React application. No specific output is expected; it enables usage of these components throughout your codebase.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ActionButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionButton} from '@react-spectrum/button';\\nimport {View} from '@react-spectrum/view';\\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Custom Empty State Rendering in TableView\nDESCRIPTION: This example demonstrates how to customize the empty state display in a TableView using the renderEmptyState prop with an IllustratedMessage component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content} from '@react-spectrum/view';\nimport {IllustratedMessage} from '@react-spectrum/illustratedmessage';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\nimport {Heading} from '@react-spectrum/text';\n\nfunction renderEmptyState() {\n  return (\n    <IllustratedMessage>\n      <NotFound />\n      <Heading>No results</Heading>\n      <Content>No results found</Content>\n    </IllustratedMessage>\n  );\n}\n\n<TableView aria-label=\"Example table for empty state\" height=\"size-3000\" renderEmptyState={renderEmptyState}>\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column>Size</Column>\n  </TableHeader>\n  <TableBody>\n    {[]}\n  </TableBody>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Reloading List Data with useAsyncList in React Spectrum (TypeScript)\nDESCRIPTION: Illustrates how to explicitly reload data managed by useAsyncList by calling its reload method. This enables refreshing the list, typically after a data mutation or on-demand by user action. No dependencies beyond having an initialized useAsyncList instance are required. Accepts no parameters and triggers a data reload; no return value is expected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useAsyncList.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlist.reload();\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled ColorArea with React Spectrum\nDESCRIPTION: This example demonstrates how to create a controlled ColorArea component using React Spectrum. It includes state management for color values, integration with ColorSlider for additional color channels, and ColorSwatch for color preview.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [\n    color,\n    setColor\n  ] = React.useState(parseColor('hsba(219, 58%, 93%, 0.75)'));\n  let [\n    endColor,\n    setEndColor\n  ] = React.useState(color);\n  let [\n    xChannel,\n    yChannel,\n    zChannel\n  ] = color.getColorChannels();\n  return (\n    <>\n      <label id=\"hsb-label-id-1\">x: {color.getChannelName(xChannel, 'en-US')}, y: {color.getChannelName(yChannel, 'en-US')}</label>\n      <div\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '1rem'\n        }}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '1rem'\n          }}>\n          <ColorArea\n            aria-labelledby=\"hsb-label-id-1\"\n            value={color}\n            onChange={setColor}\n            onChangeEnd={setEndColor}\n            xChannel={xChannel}\n            yChannel={yChannel} />\n          <ColorSlider\n            channel={zChannel}\n            value={color}\n            onChange={setColor}\n            onChangeEnd={setEndColor} />\n          <ColorSlider\n            channel=\"alpha\"\n            value={color}\n            onChange={setColor}\n            onChangeEnd={setEndColor} />\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '1rem'\n          }}>\n          <div\n            style={{\n              display: 'flex',\n              gap: '6px'\n            }}>\n            <ColorSwatch\n              color={color.withChannelValue('alpha', 1)}\n              aria-label={`current color swatch: ${color.toString('hsl')}`} />\n            <ColorSwatch\n              color={color}\n              aria-label={`current color swatch with alpha channel: ${color.toString('hsla')}`} />\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              gap: '6px'\n            }}>\n            <ColorSwatch\n              color={endColor.withChannelValue('alpha', 1)}\n              aria-label={`end color swatch: ${endColor.toString('hsb')}`} />\n            <ColorSwatch\n              color={endColor}\n              aria-label={`end color swatch with alpha channel: ${endColor.toString('hsba')}`} />\n          </div>\n        </div>\n      </div>\n      <p>Current color value: {color.toString('hsba')}</p>\n      <p>End color value: {endColor.toString('hsba')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled NumberField in React\nDESCRIPTION: Shows how to use NumberField in both controlled and uncontrolled states with React hooks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(15);\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <NumberField\n        label=\"Cookies (Uncontrolled)\"\n        defaultValue={15}\n        minValue={0} />\n\n      <NumberField\n        label=\"Cookies (Controlled)\"\n        value={value}\n        onChange={setValue}\n        minValue={0} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Specific TreeItem (TSX)\nDESCRIPTION: Demonstrates disabling a single `TreeItem` using the `isDisabled` prop. By default, this prevents all interactions with the item, including selection and actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Tree aria-label=\"Tree with disabled items\" style={{height: '100px'}} defaultExpandedKeys={['bulbasaur']}>\n  <MyTreeItem id=\"bulbasaur\" title=\"Bulbasaur\">\n    {/*- begin highlight -*/}\n    <MyTreeItem id=\"ivysaur\" title=\"Ivysaur\" isDisabled>\n    {/*- end highlight -*/}\n      <MyTreeItem id=\"venusaur\" title=\"Venusaur\" />\n    </MyTreeItem>\n  </MyTreeItem>\n</Tree>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation with NumberField in React Spectrum\nDESCRIPTION: This snippet shows how to use NumberField within a Form component with native validation behavior. It demonstrates required field validation and form submission blocking.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <NumberField label=\"Width\" name=\"width\" isRequired />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Menu Items with ContextualHelpTrigger in React Spectrum\nDESCRIPTION: This example shows how to use ContextualHelpTrigger to create unavailable menu items with contextual help dialogs in React Spectrum. It demonstrates programmatic control of item availability and custom dialog content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, Dialog, Heading} from '@adobe/react-spectrum';\nimport {ContextualHelpTrigger} from '@react-spectrum/menu';\n\n<MenuTrigger>\n  <ActionButton>Edit</ActionButton>\n  <Menu>\n    <Item key=\"undo\">Undo</Item>\n    <Item key=\"redo\">Redo</Item>\n    <ContextualHelpTrigger isUnavailable>\n      <Item key=\"cut\">Cut</Item>\n      <Dialog>\n        <Heading>Cut</Heading>\n        <Content>Please select text for 'Cut' to be enabled.</Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n    <ContextualHelpTrigger isUnavailable>\n      <Item key=\"copy\">Copy</Item>\n      <Dialog>\n        <Heading>Copy</Heading>\n        <Content>Please select text for 'Copy' to be enabled.</Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n    <ContextualHelpTrigger>\n      <Item key=\"paste\">Paste</Item>\n      <Dialog>\n        <Heading>Paste</Heading>\n        <Content>You have nothing to 'Paste'.</Content>\n      </Dialog>\n    </ContextualHelpTrigger>\n  </Menu>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Requiring Individual Checkboxes in React Spectrum CheckboxGroup using TSX\nDESCRIPTION: Demonstrates how to make individual Checkbox components within a CheckboxGroup required using the `isRequired` prop on each Checkbox. This example enforces that all three policies (terms, privacy, cookies) must be checked within a form. The `validationBehavior=\"native\"` prop on the CheckboxGroup enables native browser form validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<form>\n  <CheckboxGroup label=\"Agree to the following\" validationBehavior=\"native\">\n    {/*- begin highlight -*/}\n    <Checkbox value=\"terms\" isRequired>Terms and conditions</Checkbox>\n    <Checkbox value=\"privacy\" isRequired>Privacy policy</Checkbox>\n    <Checkbox value=\"cookies\" isRequired>Cookie policy</Checkbox>\n    {/*- end highlight -*/}\n  </CheckboxGroup>\n  <input type=\"submit\" style={{marginTop: 8}} />\n</form>\n```\n```\n\n----------------------------------------\n\nTITLE: Property Groups with Provider\nDESCRIPTION: This example shows how to use Provider to set common properties (isDisabled) for a group of components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/provider/docs/Provider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-100\" alignItems=\"start\">\n  <Provider isDisabled>\n    <RadioGroup label=\"Favorite animal\">\n      <Radio value=\"dogs\">Dogs</Radio>\n      <Radio value=\"cats\">Cats</Radio>\n      <Radio value=\"horses\">Horses</Radio>\n    </RadioGroup>\n    <Checkbox>I agree</Checkbox>\n    <Button variant=\"primary\">Submit</Button>\n  </Provider>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Editing Color Channels with Channel Fields and Area Pickers in React Spectrum (TypeScript)\nDESCRIPTION: This code enables editing each color channel via numeric fields and sliders, along with an area picker and a selector for color spaces. It uses getColorChannels to render the appropriate number fields dynamically for the selected color space, maintaining state via useState and managing layout with flexbox. Dependencies include custom MyColorArea, MyColorSlider, MySelect, MyItem, and MyColorField components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSpace} from 'react-aria-components';\\nimport {getColorChannels} from 'react-aria-components';\\nimport {MyColorArea} from './ColorArea';\\nimport {MyColorSlider} from './ColorSlider';\\nimport {MySelect, MyItem} from './Select';\\nimport {MyColorField} from './ColorField';\\n\\nfunction Example() {\\n  let [space, setSpace] = React.useState<ColorSpace>('rgb');\\n\\n  return (\\n    <MyColorPicker label=\\\"Color\\\" defaultValue=\\\"#f80\\\">\\n      <MyColorArea colorSpace=\\\"hsb\\\" xChannel=\\\"saturation\\\" yChannel=\\\"brightness\\\" />\\n      <MyColorSlider colorSpace=\\\"hsb\\\" channel=\\\"hue\\\" />\\n      <MySelect aria-label=\\\"Color space\\\" selectedKey={space} onSelectionChange={s => setSpace(s as ColorSpace)}>\\n        <MyItem id=\\\"rgb\\\">RGB</MyItem>\\n        <MyItem id=\\\"hsl\\\">HSL</MyItem>\\n        <MyItem id=\\\"hsb\\\">HSB</MyItem>\\n      </MySelect>\\n      <div style={{display: 'flex', gap: 4, width: 192}}>\\n        {/*- begin highlight -*/}\\n        {getColorChannels(space).map(channel => (<MyColorField key={channel} colorSpace={space} channel={channel} style={{flex: 1}} />))}\\n        {/*- end highlight -*/}\\n      </div>\\n    </MyColorPicker>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessible Form Implementation\nDESCRIPTION: Demonstrates how to create an accessible form with proper ARIA labeling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/form/docs/Form.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<h3 id=\"label-3\">Personal Information</h3>\n<Form maxWidth=\"size-3600\" aria-labelledby=\"label-3\">\n  <TextField label=\"First Name\" />\n  <TextField label=\"Last Name\" />\n  <RadioGroup label=\"Favorite pet\">\n    <Radio value=\"dogs\">Dogs</Radio>\n    <Radio value=\"cats\">Cats</Radio>\n    <Radio value=\"dragons\">Dragons</Radio>\n  </RadioGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Styling .react-aria-ToggleButtonGroup and Its States (CSS)\nDESCRIPTION: Defines class-based CSS for controlling layout and state-based z-index layering for ToggleButtonGroup and its children. Uses data attributes to target disabled, selected, and focus-visible button states, adjusting border radii and stacking. Assumes parent className is correctly set (react-aria-ToggleButtonGroup). Designed for flexibility in button arrangement, and layering different UI states. No external dependencies except target classnames and data attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButtonGroup {\n  display: flex;\n\n  > button {\n    border-radius: 0;\n    z-index: 1;\n\n    &[data-disabled] {\n      z-index: 0;\n    }\n\n    &[data-selected],\n    &[data-focus-visible] {\n      z-index: 2;\n    }\n  }\n}\n\n.react-aria-ToggleButtonGroup[data-orientation=horizontal] {\n  flex-direction: row;\n\n  > button {\n    margin-inline-start: -1px;\n    \n    &:first-child {\n      border-radius: 4px 0 0 4px;\n      margin-inline-start: 0;\n    }\n\n    &:last-child {\n      border-radius: 0 4px 4px 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Slider Value Formatting in React Spectrum\nDESCRIPTION: Demonstrates various ways to customize the value label display in Slider.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <Slider\n    label=\"Cookies to buy\"\n    showValueLabel={false}\n    defaultValue={90} />\n  <Slider\n    label=\"Percent donus eaten\"\n    maxValue={1}\n    step={0.001}\n    formatOptions={{style: 'percent', minimumFractionDigits: 1}}\n    defaultValue={0.891} />\n  <Slider\n    label=\"Donuts to buy\"\n    maxValue={60}\n    getValueLabel={donuts => `${donuts} of 60 Donuts`} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Select Component in React Aria Components\nDESCRIPTION: Demonstrates how to wrap Select and its children into a reusable component with TypeScript. The wrapper accepts props for label, description, error handling, and items, while providing consistent styling and behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SelectProps, ListBoxItemProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MySelectProps<T extends object> extends Omit<SelectProps<T>, 'children'> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string),\n  items?: Iterable<T>,\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nexport function MySelect<T extends object>({label, description, errorMessage, children, items, ...props}: MySelectProps<T>) {\n  return (\n    <Select {...props}>\n      <Label>{label}</Label>\n      <Button>\n        <SelectValue />\n        <span aria-hidden=\"true\">▼</span>\n      </Button>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>\n        <ListBox items={items}>\n          {children}\n        </ListBox>\n      </Popover>\n    </Select>\n  );\n}\n\nexport function MyItem(props: ListBoxItemProps) {\n  return <ListBoxItem {...props} className={({isFocused, isSelected}) => `my-item ${isFocused ? 'focused' : ''} ${isSelected ? 'selected' : ''}`} />\n}\n\n<MySelect label=\"Ice cream flavor\">\n  <MyItem>Chocolate</MyItem>\n  <MyItem>Mint</MyItem>\n  <MyItem>Strawberry</MyItem>\n  <MyItem>Vanilla</MyItem>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Displaying Date Format Help Text in DateField\nDESCRIPTION: This snippet demonstrates how to display the expected date format for the user's locale in a DateField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField label=\"Birth date\" showFormatHelpText />\n```\n\n----------------------------------------\n\nTITLE: Building and Using a GridList with Interactive Items - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates how to construct a multi-select, interactive GridList using React Spectrum components in a TypeScript (TSX) environment. Dependencies required are 'react-aria-components' for core components and a custom MyCheckbox component for selection; all must be available in the project environment. The GridList showcases various list items, each supporting embedded interactive elements like checkboxes and info buttons, and handles selectionMode, accessibility, and content rendering. Inputs include the list items and their selection values; outputs are interactive UI components with selection tracking. Requires a React-compatible build system with TSX support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GridList, GridListItem, Button} from 'react-aria-components';\nimport {MyCheckbox} from './Checkbox';\n\n<GridList aria-label=\"Favorite pokemon\" selectionMode=\"multiple\">\n  <GridListItem textValue=\"Charizard\">\n    <MyCheckbox slot=\"selection\" />\n    Charizard\n    <Button aria-label=\"Info\">ⓘ</Button>\n  </GridListItem>\n  <GridListItem textValue=\"Blastoise\">\n    <MyCheckbox slot=\"selection\" />\n    Blastoise\n    <Button aria-label=\"Info\">ⓘ</Button>\n  </GridListItem>\n  <GridListItem textValue=\"Venusaur\">\n    <MyCheckbox slot=\"selection\" />\n    Venusaur\n    <Button aria-label=\"Info\">ⓘ</Button>\n  </GridListItem>\n  <GridListItem textValue=\"Pikachu\">\n    <MyCheckbox slot=\"selection\" />\n    Pikachu\n    <Button aria-label=\"Info\">ⓘ</Button>\n  </GridListItem>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Handling Column Resize Events in React Spectrum TableView (TSX)\nDESCRIPTION: Demonstrates managing controlled column resizing in a React Spectrum `TableView` and persisting the widths. It uses `React.useState` to manage column configuration, including widths. The `onResize` prop updates the state as the user drags the resizer, providing real-time feedback. The `onResizeEnd` prop saves the final column widths (as a Map) to `localStorage`, allowing the table layout to be preserved across page loads.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nlet items = [\n  {id: '1', file: '2022-Roadmap-Proposal-Revision-012822-Copy(2)', size: '214 KB', date: 'November 27, 2022 at 4:56PM'},\n  {id: '2', file: '62259692_p0_master1200', size: '120 KB', date: 'January 27, 2021 at 1:56AM'}\n];\n\nlet columnsData = [\n  {name: 'File Name', id: 'file', width: '1fr'},\n  {name: 'Size', id: 'size', width: 80},\n  {name: 'Date', id: 'date', width: 100}\n];\n\nfunction ResizableTable() {\n  /*- begin highlight -*/\n  let [columns, setColumns] = React.useState(() => {\n    let localStorageWidths = localStorage.getItem('RSPWidths');\n    if (localStorageWidths) {\n      let widths = JSON.parse(localStorageWidths);\n      return columnsData.map(col => ({...col, width: widths[col.id]}));\n    } else {\n      return columnsData;\n    }\n  });\n\n  let onResize = (widths) => {\n    setColumns(columns => columns.map(col => ({...col, width: widths.get(col.id)})));\n  };\n\n  let onResizeEnd = (widths) => {\n    localStorage.setItem('RSPWidths', JSON.stringify(Object.fromEntries(widths)));\n  };\n  /*- end highlight -*/\n\n  return (\n    <TableView\n      /*- begin highlight -*/\n      onResize={onResize}\n      onResizeEnd={onResizeEnd}\n      /*- end highlight -*/\n      aria-label=\"TableView with controlled, resizable columns saved in local storage\"\n      maxWidth={320}\n      height={200} >\n      <TableHeader columns={columns}>\n        {(column) => {\n          const {name, id, width} = column;\n          return <Column allowsResizing key={id} width={width}>{name}</Column>;\n        }}\n      </TableHeader>\n      <TableBody items={items}>\n        {(item) => (\n          <Row key={item.id}>{(key) => <Cell>{item[key]}</Cell>}</Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\n<ResizableTable />\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Selection in React Spectrum ListView\nDESCRIPTION: This snippet demonstrates how to implement controlled selection in a ListView component using the selectedKeys prop and onSelectionChange callback. It creates a PokemonList component that renders a ListView with selectable items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SpectrumListViewProps} from '@react-spectrum/list';\n\nfunction PokemonList<T>(props: Omit<SpectrumListViewProps<T>, 'children'>) {\n  let rows = [\n    {id: 1, name: 'Charizard'},\n    {id: 2, name: 'Blastoise'},\n    {id: 3, name: 'Venusaur'},\n    {id: 4, name: 'Pikachu'}\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState(props.defaultSelectedKeys || new Set([2]));\n\n  return (\n    <ListView maxWidth=\"size-6000\" aria-label=\"ListView with controlled selection\" selectionMode=\"multiple\" {...props} items={rows} selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>\n      {(item) => (\n        <Item>\n          {item.name}\n        </Item>\n      )}\n    </ListView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous ListView Loading\nDESCRIPTION: Implementation of ListView with asynchronous data loading and infinite scroll functionality using useAsyncList hook\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AsyncList() {\n  let list = useAsyncList<Character>({\n    async load({signal, cursor}) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=`, {signal});\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <ListView\n      selectionMode=\"multiple\"\n      aria-label=\"Async loading ListView example\"\n      maxWidth=\"size-6000\"\n      height=\"size-3000\"\n      items={list.items}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}>\n      {(item) => (\n        <Item key={item.name}>{item.name}</Item>\n      )}\n    </ListView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class Names to React Aria Components\nDESCRIPTION: Example showing how to override the default class name by providing a custom className prop to a Select component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Select className=\"my-select\">\n  {/* ... */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Styling Resizable Table Columns and Handles - React Spectrum (CSS)\nDESCRIPTION: This CSS code provides styling for the ResizableTableContainer, including layout, border, and background for the container, Table, and focusable/flexible columns. It defines the appearance and interaction of the column resizer handle (ColumnResizer), such as width, background, border, and cursor based on direction and interaction states (hovered, pressed, focus-visible, resizing). The snippet requires React Spectrum/Aria's class name conventions and uses CSS custom properties for consistent colors. It helps achieve a visually integrated, accessible, and responsive table resizing UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_25\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-ResizableTableContainer {\n  max-width: 400px;\n  overflow: auto;\n  position: relative;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--background-color);\n\n  .react-aria-Table {\n    border: none;\n  }\n\n  .flex-wrapper {\n    display: flex;\n    align-items: center;\n  }\n\n  .column-name,\n  .react-aria-Button {\n    --background-color: var(--overlay-background);\n    flex: 1;\n    font: inherit;\n    text-align: start;\n    color: inherit;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    border-color: transparent;\n    transition: background 200ms;\n    &[data-hovered] {\n      background: var(--highlight-hover);\n    }\n\n    &[data-pressed] {\n      background: var(--highlight-pressed);\n      box-shadow: none;\n    }\n\n    &:focus-visible {\n      outline: 2px solid var(--focus-ring-color);\n    }\n  }\n\n  .react-aria-ColumnResizer {\n    width: 15px;\n    background-color: grey;\n    height: 25px;\n    flex: 0 0 auto;\n    touch-action: none;\n    box-sizing: border-box;\n    border: 5px;\n    border-style: none solid;\n    border-color: transparent;\n    background-clip: content-box;\n\n    &[data-resizable-direction=both] {\n      cursor: ew-resize;\n    }\n\n    &[data-resizable-direction=left] {\n      cursor: e-resize;\n    }\n\n    &[data-resizable-direction=right] {\n      cursor: w-resize;\n    }\n\n    &[data-focus-visible] {\n      background-color: var(--focus-ring-color);\n    }\n\n    &[data-resizing] {\n      border-color: var(--focus-ring-color);\n      background-color: transparent;\n    }\n  }\n\n  .react-aria-Column,\n  .react-aria-Cell {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Tooltip Open State via React State in Function Component (TypeScript/TSX)\nDESCRIPTION: Demonstrates controlled open state of TooltipTrigger using a 'isOpen' state variable and an 'onOpenChange' handler. The example displays a button, a tooltip, and a sentence indicating whether the tooltip is currently visible. This approach enables fine-grained tooltip management in custom UI flows. Dependencies are React, react-aria-components, and MyTooltip. Suitable for advanced interactions or when syncing tooltip with application state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [isOpen, setOpen] = React.useState(false);\\n\\n  return (\\n    <>\\n      <TooltipTrigger isOpen={isOpen} onOpenChange={setOpen}>\\n        <Button>\\ud83d\\udce3</Button>\\n        <MyTooltip>Notifications</MyTooltip>\\n      </TooltipTrigger>\\n      <p>Tooltip is {isOpen ? 'showing' : 'not showing'}</p>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API Documentation using JSX Component\nDESCRIPTION: This JSX snippet renders the API documentation for the `useCalendarState` hook. It uses the `FunctionAPI` component, passing the specific function data (`docs.exports.useCalendarState`) and related type links (`docs.links`) as props to automatically generate the API signature and parameter descriptions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useCalendarState.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n## API\n\n<FunctionAPI function={docs.exports.useCalendarState} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Flexible TableView Layout with React Spectrum in TSX\nDESCRIPTION: This TSX code demonstrates how to structure a page layout using React Spectrum's Flex component to contain a TableView. It defines sample data for columns and rows, then renders an ActionButton followed by a TableView. The TableView uses the `flex` prop to dynamically fill the remaining vertical space within the Flex container. It maps column definitions to TableHeader and row data to TableBody, dynamically rendering Cells based on column keys. This setup ensures the TableView scrolls internally while headers remain fixed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n///- begin collapse -///\nlet columns = [\n  {name: 'First name', id: 'first_name'},\n  {name: 'Last name', id: 'last_name'},\n  {name: 'City', id: 'city'}\n];\n\nlet rows = [\n{\"id\":1,\"first_name\":\"Andras\",\"last_name\":\"Rodmell\",\"city\":\"Tilburg\"},\n{\"id\":2,\"first_name\":\"Hansiain\",\"last_name\":\"Muino\",\"city\":\"Hollola\"},\n{\"id\":3,\"first_name\":\"Northrop\",\"last_name\":\"Adnet\",\"city\":\"Lai Cách\"},\n{\"id\":4,\"first_name\":\"Giana\",\"last_name\":\"Phython\",\"city\":\"Laspezia\"},\n{\"id\":5,\"first_name\":\"Maud\",\"last_name\":\"Jaram\",\"city\":\"Tipaz\"},\n{\"id\":6,\"first_name\":\"Gasparo\",\"last_name\":\"Wiggin\",\"city\":\"Feuknoni\"},\n{\"id\":7,\"first_name\":\"Phillie\",\"last_name\":\"Lezemere\",\"city\":\"Krajan Sidodadi\"},\n{\"id\":8,\"first_name\":\"Kailey\",\"last_name\":\"Du Plantier\",\"city\":\"Shangping\"},\n{\"id\":9,\"first_name\":\"Brady\",\"last_name\":\"Oxtarby\",\"city\":\"Bang Mun Nak\"},\n{\"id\":10,\"first_name\":\"Ekaterina\",\"last_name\":\"Crennan\",\"city\":\"Santo Antônio do Amparo\"},\n{\"id\":11,\"first_name\":\"Jaine\",\"last_name\":\"Trembey\",\"city\":\"Manūjān\"},\n{\"id\":12,\"first_name\":\"Emmey\",\"last_name\":\"Dunguy\",\"city\":\"Garhi Yāsīn\"},\n{\"id\":13,\"first_name\":\"Camille\",\"last_name\":\"Millwall\",\"city\":\"Orion\"},\n{\"id\":14,\"first_name\":\"Staci\",\"last_name\":\"Glusby\",\"city\":\"Alofi\"},\n{\"id\":15,\"first_name\":\"Ned\",\"last_name\":\"Crumbleholme\",\"city\":\"Ban Bueng\"},\n{\"id\":16,\"first_name\":\"Tana\",\"last_name\":\"Beardsworth\",\"city\":\"Puerto Aisén\"},\n{\"id\":17,\"first_name\":\"Dewain\",\"last_name\":\"Fladgate\",\"city\":\"London\"},\n{\"id\":18,\"first_name\":\"Thurstan\",\"last_name\":\"Trembath\",\"city\":\"Orléans\"},\n{\"id\":19,\"first_name\":\"Vaclav\",\"last_name\":\"Fitzpayn\",\"city\":\"Huangchen\"},\n{\"id\":20,\"first_name\":\"Keven\",\"last_name\":\"Monkeman\",\"city\":\"Medenychi\"},\n{\"id\":21,\"first_name\":\"Talia\",\"last_name\":\"Ryman\",\"city\":\"Piteå\"},\n{\"id\":22,\"first_name\":\"Percy\",\"last_name\":\"Le Teve\",\"city\":\"Terny\"},\n{\"id\":23,\"first_name\":\"Jackson\",\"last_name\":\"Anten\",\"city\":\"Beiling\"},\n{\"id\":24,\"first_name\":\"Jakob\",\"last_name\":\"Goullee\",\"city\":\"Pelym\"},\n{\"id\":25,\"first_name\":\"Dru\",\"last_name\":\"Klainer\",\"city\":\"Zavrč\"},\n{\"id\":26,\"first_name\":\"Lucie\",\"last_name\":\"Donahue\",\"city\":\"Kiryū\"},\n{\"id\":27,\"first_name\":\"Marc\",\"last_name\":\"McPeck\",\"city\":\"Nong Muang Khai\"},\n{\"id\":28,\"first_name\":\"Vivianna\",\"last_name\":\"Allport\",\"city\":\"Kajatian\"},\n{\"id\":29,\"first_name\":\"Drud\",\"last_name\":\"Hurn\",\"city\":\"Bambuí\"},\n{\"id\":30,\"first_name\":\"Trever\",\"last_name\":\"Ambrodi\",\"city\":\"Xiangtan\"},\n{\"id\":31,\"first_name\":\"Gwennie\",\"last_name\":\"Kingswold\",\"city\":\"San Benito\"},\n{\"id\":32,\"first_name\":\"Karlan\",\"last_name\":\"Tilby\",\"city\":\"Patrída\"},\n{\"id\":33,\"first_name\":\"Heddie\",\"last_name\":\"Sneath\",\"city\":\"Esperanza\"},\n{\"id\":34,\"first_name\":\"Harlen\",\"last_name\":\"Sandells\",\"city\":\"Harrismith\"},\n{\"id\":35,\"first_name\":\"Gavan\",\"last_name\":\"Halward\",\"city\":\"Al Ḩayfah\"},\n{\"id\":36,\"first_name\":\"Andre\",\"last_name\":\"Everest\",\"city\":\"Bahui\"},\n{\"id\":37,\"first_name\":\"Merilyn\",\"last_name\":\"Rowbrey\",\"city\":\"Imishli\"},\n{\"id\":38,\"first_name\":\"Abe\",\"last_name\":\"Pecht\",\"city\":\"Pangkalan Kasai\"},\n{\"id\":39,\"first_name\":\"Britt\",\"last_name\":\"Collingridge\",\"city\":\"Érd\"},\n{\"id\":40,\"first_name\":\"Leticia\",\"last_name\":\"Thorndycraft\",\"city\":\"Paita\"},\n{\"id\":41,\"first_name\":\"Eward\",\"last_name\":\"Tigwell\",\"city\":\"Aral\"},\n{\"id\":42,\"first_name\":\"Torrie\",\"last_name\":\"Curzon\",\"city\":\"Stockholm\"},\n{\"id\":43,\"first_name\":\"Jenifer\",\"last_name\":\"Swalwel\",\"city\":\"Jinniu\"},\n{\"id\":44,\"first_name\":\"Marianna\",\"last_name\":\"Radley\",\"city\":\"Hedi\"},\n{\"id\":45,\"first_name\":\"Antoine\",\"last_name\":\"Tyers\",\"city\":\"Hewa\"},\n{\"id\":46,\"first_name\":\"Darline\",\"last_name\":\"Gallehawk\",\"city\":\"København\"},\n{\"id\":47,\"first_name\":\"Rikki\",\"last_name\":\"Rosenzveig\",\"city\":\"Affery\"},\n{\"id\":48,\"first_name\":\"Debera\",\"last_name\":\"Vedenichev\",\"city\":\"Żywiec\"},\n{\"id\":49,\"first_name\":\"Morena\",\"last_name\":\"Hewins\",\"city\":\"Las Lajas\"},\n{\"id\":50,\"first_name\":\"Cordy\",\"last_name\":\"Reimer\",\"city\":\"Derbent\"},\n{\"id\":51,\"first_name\":\"Quint\",\"last_name\":\"Thoresbie\",\"city\":\"Guyang\"},\n{\"id\":52,\"first_name\":\"Christean\",\"last_name\":\"Deere\",\"city\":\"Waegwan\"},\n{\"id\":53,\"first_name\":\"Moyra\",\"last_name\":\"Battelle\",\"city\":\"Villa Presidente Frei, Ñuñoa, Santiago, Chile\"},\n{\"id\":54,\"first_name\":\"Fayth\",\"last_name\":\"Gallafant\",\"city\":\"Kedungharjo\"},\n{\"id\":55,\"first_name\":\"Thedrick\",\"last_name\":\"Duddy\",\"city\":\"Thị Trấn Mường Lát\"},\n{\"id\":56,\"first_name\":\"George\",\"last_name\":\"Rickerd\",\"city\":\"Zarqa\"},\n{\"id\":57,\"first_name\":\"Nikos\",\"last_name\":\"Rideout\",\"city\":\"Yuanqiao\"},\n{\"id\":58,\"first_name\":\"Alejandra\",\"last_name\":\"Le Port\",\"city\":\"Il’ichëvo\"},\n{\"id\":59,\"first_name\":\"Eleonora\",\"last_name\":\"Gibberd\",\"city\":\"Sua\"},\n{\"id\":60,\"first_name\":\"Archibaldo\",\"last_name\":\"Place\",\"city\":\"Sidayu\"},\n{\"id\":61,\"first_name\":\"Helen\",\"last_name\":\"Brenton\",\"city\":\"Kuressaare\"},\n{\"id\":62,\"first_name\":\"Leyla\",\"last_name\":\"Armstead\",\"city\":\"Haifa\"},\n{\"id\":63,\"first_name\":\"Bridget\",\"last_name\":\"Strotone\",\"city\":\"Karasuk\"},\n{\"id\":64,\"first_name\":\"Jarid\",\"last_name\":\"Packer\",\"city\":\"Студеничани\"},\n{\"id\":65,\"first_name\":\"Christos\",\"last_name\":\"Natt\",\"city\":\"Nova Russas\"},\n{\"id\":66,\"first_name\":\"Alwyn\",\"last_name\":\"Mingaud\",\"city\":\"Conde\"},\n{\"id\":67,\"first_name\":\"Archy\",\"last_name\":\"Thorneywork\",\"city\":\"Gulu\"},\n{\"id\":68,\"first_name\":\"Iolanthe\",\"last_name\":\"Spurgeon\",\"city\":\"Ayrihuanca\"},\n{\"id\":69,\"first_name\":\"Rossy\",\"last_name\":\"Axford\",\"city\":\"Ledeč nad Sázavou\"},\n{\"id\":70,\"first_name\":\"Consuela\",\"last_name\":\"Lillegard\",\"city\":\"Finote Selam\"},\n{\"id\":71,\"first_name\":\"Salomon\",\"last_name\":\"Buckney\",\"city\":\"Kampokpok\"},\n{\"id\":72,\"first_name\":\"Celene\",\"last_name\":\"Espley\",\"city\":\"Sinubong\"},\n{\"id\":73,\"first_name\":\"Kristos\",\"last_name\":\"Denyukhin\",\"city\":\"Las Palmas\"},\n{\"id\":74,\"first_name\":\"Bertha\",\"last_name\":\"Mallabon\",\"city\":\"Vera\"},\n{\"id\":75,\"first_name\":\"Jorry\",\"last_name\":\"Yuryev\",\"city\":\"Carletonville\"},\n{\"id\":76,\"first_name\":\"Holly-anne\",\"last_name\":\"Wagstaffe\",\"city\":\"Sukadana\"},\n{\"id\":77,\"first_name\":\"Lara\",\"last_name\":\"Shears\",\"city\":\"Gambēla\"},\n{\"id\":78,\"first_name\":\"Romonda\",\"last_name\":\"Glanville\",\"city\":\"Donglu\"},\n{\"id\":79,\"first_name\":\"Felice\",\"last_name\":\"Pryde\",\"city\":\"Sapadun\"},\n{\"id\":80,\"first_name\":\"Nick\",\"last_name\":\"Kidney\",\"city\":\"Chernigovka\"},\n{\"id\":81,\"first_name\":\"Hermina\",\"last_name\":\"Dooley\",\"city\":\"New Agutaya\"},\n{\"id\":82,\"first_name\":\"Ketty\",\"last_name\":\"FitzGeorge\",\"city\":\"Abaza\"},\n{\"id\":83,\"first_name\":\"Patrizio\",\"last_name\":\"Bovingdon\",\"city\":\"‘Ayn al ‘Arab\"},\n{\"id\":84,\"first_name\":\"Caitrin\",\"last_name\":\"Braine\",\"city\":\"Il’inskiy\"},\n{\"id\":85,\"first_name\":\"Ian\",\"last_name\":\"De Few\",\"city\":\"Jatinagara\"},\n{\"id\":86,\"first_name\":\"Eben\",\"last_name\":\"Adan\",\"city\":\"Bolong\"},\n{\"id\":87,\"first_name\":\"Peder\",\"last_name\":\"Innott\",\"city\":\"Gampaha\"},\n{\"id\":88,\"first_name\":\"Selie\",\"last_name\":\"Cruise\",\"city\":\"Mariscala\"},\n{\"id\":89,\"first_name\":\"Melania\",\"last_name\":\"Meredyth\",\"city\":\"La’ershan\"},\n{\"id\":90,\"first_name\":\"Antonina\",\"last_name\":\"Proby\",\"city\":\"Shantoudian\"},\n{\"id\":91,\"first_name\":\"Sabra\",\"last_name\":\"Dreng\",\"city\":\"Dzhankoy\"},\n{\"id\":92,\"first_name\":\"Sibeal\",\"last_name\":\"Hall-Gough\",\"city\":\"Mengxi\"},\n{\"id\":93,\"first_name\":\"Fidel\",\"last_name\":\"Maisey\",\"city\":\"Gus’-Khrustal’nyy\"},\n{\"id\":94,\"first_name\":\"Alejandro\",\"last_name\":\"Devey\",\"city\":\"Charata\"},\n{\"id\":95,\"first_name\":\"Norina\",\"last_name\":\"Stoyle\",\"city\":\"Malaya Dubna\"},\n{\"id\":96,\"first_name\":\"Lari\",\"last_name\":\"Kiezler\",\"city\":\"Guaíba\"},\n{\"id\":97,\"first_name\":\"Percival\",\"last_name\":\"Geffinger\",\"city\":\"Ngeni\"},\n{\"id\":98,\"first_name\":\"Jo\",\"last_name\":\"Spoure\",\"city\":\"Karata\"},\n{\"id\":99,\"first_name\":\"Karlie\",\"last_name\":\"Gooddy\",\"city\":\"Pelem\"},\n{\"id\":100,\"first_name\":\"Edmon\",\"last_name\":\"Alsopp\",\"city\":\"Sandu\"}];\n///- end collapse -///\n\n<Flex height=\"size-5000\" width=\"100%\" direction=\"column\" gap=\"size-150\">\n  <ActionButton alignSelf=\"start\">Add</ActionButton>\n  <TableView\n    flex\n    aria-label=\"Example table with dynamic content\">\n    <TableHeader columns={columns}>\n      {column => (\n        <Column\n          key={column.id}>\n          {column.name}\n        </Column>\n      )}\n    </TableHeader>\n    <TableBody items={rows}>\n      {item => (\n        <Row>\n          {columnKey => <Cell>{item[columnKey]}</Cell>}\n        </Row>\n      )}\n    </TableBody>\n  </TableView>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Complete DateRangePicker Anatomy\nDESCRIPTION: Full component structure showing all possible elements including labels, inputs, calendar, and validation messages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateRangePicker, Label, Group, Popover, Dialog, RangeCalendar, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Button, Heading, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';\n\n<DateRangePicker>\n  <Label />\n  <Group>\n    <DateInput slot=\"start\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <DateInput slot=\"end\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button />\n  </Group>\n  <Text slot=\"description\" />\n  <FieldError />\n  <Popover>\n    <Dialog>\n      <RangeCalendar>\n        <Button slot=\"previous\" />\n        <Heading />\n        <Button slot=\"next\" />\n        <CalendarGrid>\n          <CalendarGridHeader>\n            {day => <CalendarHeaderCell />}\n          </CalendarGridHeader>\n          <CalendarGridBody>\n            {date => <CalendarCell date={date} />}\n          </CalendarGridBody>\n        </CalendarGrid>\n        <Text slot=\"errorMessage\" />\n      </RangeCalendar>\n    </Dialog>\n  </Popover>\n</DateRangePicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing International Calendar DateRangePicker in React\nDESCRIPTION: Example showing how to implement a DateRangePicker with Indian calendar system while maintaining Gregorian calendar output\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DateRangePicker label=\"Date range\" value={range} onChange={setRange} />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the React Aria DatePicker Example Components in CSS\nDESCRIPTION: This CSS code defines custom styles for the `DatePicker` example. It targets specific `react-aria` classes to adjust layout (`display: flex`), colors (`--text-color`, `--highlight-background`), borders, margins, padding, font sizes, and focus outlines (`--focus-ring-color`) for the DatePicker container, input group, button, date input, and popover. It also imports a base example theme.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-DatePicker {\n  color: var(--text-color);\n\n  .react-aria-Group {\n    display: flex;\n    width: fit-content;\n    align-items: center;\n  }\n\n  .react-aria-Button {\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n    border: 2px solid var(--field-background);\n    forced-color-adjust: none;\n    border-radius: 4px;\n    border: none;\n    margin-left: -1.929rem;\n    width: 1.429rem;\n    height: 1.429rem;\n    padding: 0;\n    font-size: 0.857rem;\n    box-sizing: content-box;\n\n    &[data-pressed] {\n      box-shadow: none;\n      background: var(--highlight-background);\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: 2px;\n    }\n  }\n\n  .react-aria-DateInput {\n    padding: 4px 2.5rem 4px 8px;\n  }\n}\n\n.react-aria-Popover[data-trigger=DatePicker] {\n  max-width: unset;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Row Selection in React Aria Table - TypeScript/React\nDESCRIPTION: This TypeScript/React snippet defines a strongly typed PokemonTable component that demonstrates programmatic row selection management by using the selectedKeys prop and onSelectionChange callback tied to state via React.useState. Dependencies include react, react-aria-components, and the Table/TableBody/Column/Cell components. The table accepts items, renders key columns, and updates the selection state as rows are pressed; selectionMode and other behaviors are configurable via props. All necessary types and sample data are included, and inputs are provided as props, while outputs include the interactive table with controlled selection state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\n\ninterface Pokemon {\n  id: number,\n  name: string,\n  type: string,\n  level: string\n}\n\ninterface PokemonTableProps extends TableProps {\n  items?: Pokemon[],\n  renderEmptyState?: () => string\n}\n\nfunction PokemonTable(props: PokemonTableProps) {\n  let items = props.items || [\n    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n  ];\n\n  ///- begin highlight -///\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set());\n  ///- end highlight -///\n\n  return (\n    <Table\n      aria-label=\"Pokemon table\"\n      {...props}\n      /*- begin highlight -*/\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n      /*- end highlight -*/\n    >\n      <MyTableHeader>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n        <Column>Level</Column>\n      </MyTableHeader>\n      <TableBody items={items} renderEmptyState={props.renderEmptyState}>\n        {item => (\n          <MyRow>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n            <Cell>{item.level}</Cell>\n          </MyRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\n<PokemonTable selectionMode=\"multiple\" />\n```\n\n----------------------------------------\n\nTITLE: Installing React Aria Monopackage using Yarn (Bash)\nDESCRIPTION: Installs the main `react-aria` package using the yarn package manager. This command downloads and adds the package to your project's dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/hooks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-aria\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox Component with React Aria\nDESCRIPTION: Example of creating a ComboBox component using React Aria's compositional API with Label, Group, Input, Button, Popover, and ListBox components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox>\n  <Label>Permissions</Label>\n  <Group>\n    <Input />\n    <Button>▼</Button>\n  </Group>\n  <Popover>\n    <ListBox>\n      <ListBoxItem>Read Only</ListBoxItem>\n      <ListBoxItem>Edit</ListBoxItem>\n      <ListBoxItem>Admin</ListBoxItem>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Selection Events with React Spectrum Tabs (TypeScript)\nDESCRIPTION: Demonstrates how to handle tab selection changes in React Spectrum Tabs by passing an onSelectionChange prop and syncing the selected tab with React state. Requires @adobe/react-spectrum library and React. The selectedKey, items, and callback update the displayed content dynamically by tab key. Inputs: tab item objects; Outputs: rendered selected tab content. React useState manages tab state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\\n  let tabs = [\\n    {name: 'Triassic', children: 'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'},\\n    {name: 'Jurassic', children: 'The Jurassic ranges from 200 million years to 145 million years ago.'},\\n    {name: 'Cretaceous', children: 'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'}\\n  ];\\n  type Tab = typeof tabs[0];\\n  let [timePeriod, setTimePeriod] = React.useState<Key>('Triassic');\\n\\n  return (\\n    <>\\n      <p>Selected time period: {timePeriod}</p>\\n      <Tabs aria-label=\"Mesozoic time periods\" items={tabs} selectedKey={timePeriod} onSelectionChange={setTimePeriod}>\\n        <TabList>\\n          {(item: Tab) => (\\n            <Item key={item.name}>\\n              {item.name}\\n            </Item>\\n          )}\\n        </TabList>\\n        <TabPanels>\\n          {(item: Tab) => (\\n            <Item key={item.name}>\\n              {item.children}\\n            </Item>\\n          )}\\n        </TabPanels>\\n      </Tabs>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a JPEG-only DropZone with Visual Feedback in React Spectrum\nDESCRIPTION: This code demonstrates how to create a DropZone component that only accepts JPEG images. It implements the getDropOperation function to provide visual feedback during drag operations, and handles file drops with appropriate validation. The component also includes a FileTrigger for traditional file browsing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dropzone/docs/DropZone.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FileTrigger} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [filledSrc, setFilledSrc] = React.useState(null);\n\n  return (\n    <>\n      <Draggable />\n      <DraggableImage />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={!!filledSrc}\n        getDropOperation={(types) => types.has('image/jpeg') ? 'copy' : 'cancel'}\n        onDrop={async (e) => {\n          e.items.find(async (item) => {\n            if (item.kind === 'file') {\n              if (item.type === 'image/jpeg') {\n                let file = await item.getFile();\n                setFilledSrc({\n                  type: file.type,\n                  name: file.name\n                })\n              }\n            } else if (item.kind === 'text') {\n              let file = await item.getText('image/jpeg');\n              setFilledSrc({\n                type: 'image/jpeg',\n                name: file\n              })\n            }\n          });\n        }}>\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            {filledSrc ? `${filledSrc.type} ${filledSrc.name}` : 'Drag and drop here'}\n          </Heading>\n          <Content>\n            <FileTrigger\n              acceptedFileTypes={['image/jpeg']}\n              onSelect={(e) => {\n                let file = (Array.from(e)).find((file) => file.type === \"image/jpeg\")\n                if (file) {\n                  setFilledSrc({\n                    type: file.type,\n                    name: file.name\n                  })\n                }\n              }}>\n              <Button variant=\"primary\">Browse</Button>\n            </FileTrigger>\n          </Content>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom className to ToggleButton (JSX)\nDESCRIPTION: This JSX snippet demonstrates assigning a custom className to the ToggleButton for advanced, user-defined styling. The custom class my-button replaces React Aria's default, enabling tailored styling using external or global CSS selectors. The code supports additional content as children (rendered between the button tags).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButton className=\"my-button\">\\n  {/* ... */}\\n</ToggleButton>\\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in JavaScript\nDESCRIPTION: This snippet imports the `Layout` component from `@react-spectrum/docs` and then exports it as the default export for the module. This likely sets up the main layout structure for the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/combobox/docs/useComboBoxState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing useFocusRing in React Component\nDESCRIPTION: Example showing how to use the useFocusRing hook to conditionally apply focus styling to a button when navigating with a keyboard. The hook provides isFocusVisible and focusProps which are used to control the outline styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/focus/docs/useFocusRing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useFocusRing} from '@react-aria/focus';\n\nfunction Example() {\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  return (\n    <button\n      {...focusProps}\n      style={{\n        WebkitAppearance: 'none',\n        appearance: 'none',\n        background: 'green',\n        border: 'none',\n        color: 'white',\n        fontSize: 14,\n        padding: '4px 8px',\n        outline: isFocusVisible ? '2px solid dodgerblue' : 'none',\n        outlineOffset: 2\n      }}>\n      Test\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Static Items with Sections in SearchAutocomplete (TSX)\nDESCRIPTION: Shows how to group static `<Item>` components within a `SearchAutocomplete` using the `<Section>` component. Each section ('Fruit', 'Vegetable') is defined with a `title` prop and contains related items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Preferred fruit or vegetable\">\n  <Section title=\"Fruit\">\n    <Item key=\"Apple\">Apple</Item>\n    <Item key=\"Banana\">Banana</Item>\n    <Item key=\"Orange\">Orange</Item>\n    <Item key=\"Honeydew\">Honeydew</Item>\n    <Item key=\"Grapes\">Grapes</Item>\n    <Item key=\"Watermelon\">Watermelon</Item>\n    <Item key=\"Cantaloupe\">Cantaloupe</Item>\n    <Item key=\"Pear\">Pear</Item>\n  </Section>\n  <Section title=\"Vegetable\">\n    <Item key=\"Cabbage\">Cabbage</Item>\n    <Item key=\"Broccoli\">Broccoli</Item>\n    <Item key=\"Carrots\">Carrots</Item>\n    <Item key=\"Lettuce\">Lettuce</Item>\n    <Item key=\"Spinach\">Spinach</Item>\n    <Item key=\"Bok Choy\">Bok Choy</Item>\n    <Item key=\"Cauliflower\">Cauliflower</Item>\n    <Item key=\"Potatoes\">Potatoes</Item>\n  </Section>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API for TableBody in JSX\nDESCRIPTION: Uses the `FunctionAPI` component to render the detailed API documentation for the `TableBody` type or component associated with the table state. It receives the specific API definition (`docs.exports.TableBody`) and related documentation links (`docs.links`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.TableBody} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Creating an Uncontrolled Form with FormData in React Spectrum\nDESCRIPTION: Shows how to implement an uncontrolled form using React Spectrum components and handle form submission using the FormData API.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, TextField, ButtonGroup, Button} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [submitted, setSubmitted] = React.useState(null);\n\n  let onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    // Prevent default browser page refresh.\n    e.preventDefault();\n\n    // Get form data as an object.\n    let data = Object.fromEntries(new FormData(e.currentTarget));\n\n    // Submit to your backend API...\n    setSubmitted(data);\n  };\n\n  return (\n    <Form onSubmit={onSubmit} maxWidth=\"size-3000\">\n      <TextField name=\"name\" label=\"Name\" />\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">Submit</Button>\n        <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n      </ButtonGroup>\n      {submitted && <div>You submitted: <code>{JSON.stringify(submitted)}</code></div>}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Folder Drop Between TableViews in React Spectrum (TSX)\nDESCRIPTION: Defines two components, `DraggableTableViewFolder` and `DroppableTableViewFolder`, using the `useDragAndDrop` hook to enable dragging items from one TableView and dropping them into folders within another. It uses a custom drag type 'custom-app-type-folder-drop' and defines handlers for `onDragEnd` in the source table and `shouldAcceptItemDrop`, `onInsert`, `onRootDrop`, and `onItemDrop` (specifically for folders) in the target table. The `DragIntoTableFolder` component sets up and renders both tables with initial data using `useListData`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DraggableTableViewFolder(props: DndTableViewProps) {\n  let {list, columns, ...otherProps} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    // Only allow move operations when dropping items from this table\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) => [...keys].map(key => {\n      let item = list.getItem(key);\n      // Setup the drag types and associated info for each dragged item.\n      return {\n        'custom-app-type-folder-drop': JSON.stringify(item),\n        'text/plain': item.name\n      };\n    }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n\n    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in drag onto folder example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableViewFolder(props: DndTableViewProps) {\n  let {list, columns, ...otherProps} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    /*- begin highlight -*/\n    // Only allow drops on items with childNodes aka folders\n    shouldAcceptItemDrop: (target) => !!list.getItem(target.key).childNodes,\n    /*- end highlight -*/\n    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type-folder-drop'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-folder-drop')))\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-folder-drop')))\n      );\n      list.append(...processedItems);\n    },\n    /*- begin highlight -*/\n    onItemDrop: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-folder-drop')))\n      );\n\n      let targetItem = list.getItem(target.key);\n      list.update(target.key, {...targetItem, childNodes: [...targetItem.childNodes, ...processedItems]});\n    },\n    /*- end highlight -*/\n    ...otherProps\n  });\n\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in drop into folder example\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            {columnKey => (\n              <Cell>\n                {item[columnKey]}\n                {columnKey === 'type' && item[columnKey] === 'folder' && item.childNodes.length > 0 &&\n                 ` (${item.childNodes?.length} dropped item(s)`\n                }\n              </Cell>\n            )}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTableFolder() {\n  let columns = [\n    {name: 'Name', id: 'name'},\n    {name: 'Type', id: 'type'},\n    {name: 'Date Modified', id: 'date'}\n  ];\n\n  let sourceList = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '2/1/2020'},\n      {id: '2', type: 'file', name: 'Adobe XD', date: '6/7/2020'},\n      {id: '3', type: 'folder', name: 'Documents', date: '6/13/2020', childNodes: []},\n      {id: '4', type: 'file', name: 'Adobe InDesign', date: '2/4/2020'},\n      {id: '5', type: 'folder', name: 'Utilities', date: '12/3/2020', childNodes: []},\n      {id: '6', type: 'file', name: 'Adobe AfterEffects', date: '3/12/2020'}\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {id: '7', type: 'folder', name: 'Pictures', date: '6/17/2020', childNodes: []},\n      {id: '8', type: 'file', name: 'Adobe Fresco', date: '1/27/2020'},\n      {id: '9', type: 'folder', name: 'Apps', date: '12/23/2020', childNodes: []}\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableTableViewFolder list={sourceList} columns={columns} />\n      <DroppableTableViewFolder list={targetList} columns={columns} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Button with useButton Hook in React JSX\nDESCRIPTION: This JSX snippet demonstrates creating a basic accessible button component using the `useButton` hook from `@react-aria/button`. It defines a `Button` component that takes props, utilizes `React.useRef` to get a reference to the DOM element, and calls `useButton` with the props and ref to get accessibility and interaction props (`buttonProps`). These props are then spread onto the native `<button>` element. The example also shows instantiating this `Button` component with an `onPress` event handler.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef();\n  let {buttonProps} = useButton(props, ref);\n\n  return (\n    <button {...buttonProps} ref={ref}>\n      {props.children}\n    </button>\n  );\n}\n\n<Button onPress={() => alert('Button pressed!')}>Press me</Button>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic DatePicker with React Aria Components in TSX\nDESCRIPTION: This example shows how to construct a functional `DatePicker` using core `react-aria-components`. It includes a label, an input group with date segments and a trigger button, and a popover containing a calendar dialog for date selection. Dependencies include various components imported from `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePicker, Label, Group, Popover, Dialog, Calendar, CalendarGrid, CalendarCell, Button, Heading, DateInput, DateSegment} from 'react-aria-components';\n\n<DatePicker>\n  <Label>Date</Label>\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button>▼</Button>\n  </Group>\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Controlling NumberField Value with React State - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates how to use a controlled NumberField component by managing its value with React's useState hook. The NumberField receives the value and onChange handler as props, syncing the user's input with local application state. Inputs are only updated via blur or step actions to avoid handling partial, non-parseable numbers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(6);\n\n  return (\n    <>\n      <MyNumberField\n        label=\"Controlled value\"\n        value={value}\n        onChange={setValue} />\n      <div>Current value prop: {value}</div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom 4-5-4 Calendar System for React Spectrum Calendar (TypeScript)\nDESCRIPTION: This advanced example implements a custom calendar system (4-5-4 fiscal format) by extending GregorianCalendar and passing it to the Calendar via the createCalendar prop. The Custom454 class overrides key calendar behavior, such as the number of days in each month and conversion to/from Julian days. It demonstrates designing business-specific calendar logic. Inputs: firstDayOfWeek, createCalendar function. Output: Calendar with custom date logic. Requires deep understanding of calendar systems and @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction Example() {\n  return <Calendar firstDayOfWeek=\"sun\" createCalendar={() => new Custom454()} />;\n}\n\nclass Custom454 extends GregorianCalendar {\n  // See @internationalized/date docs linked above...\n  ///- begin collapse -///\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n  getDaysInMonth(date) {\n    return this.weekPattern[date.month - 1] * 7;\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < this.weekPattern.length; months++) {\n      let weeksInMonth = this.weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  getFormattableMonth(date) {\n    let gregorian = toCalendar(date, new GregorianCalendar());\n    return gregorian.set({month: date.month, day: 1});\n  }\n\n  isEqual(other) {\n    return other instanceof Custom454;\n  }\n ///- end collapse -///\n}\n```\n\n----------------------------------------\n\nTITLE: Client Side Sorting with useAsyncList in React Spectrum (TypeScript)\nDESCRIPTION: Demonstrates implementing client-side sorting using a sort function provided to useAsyncList, leveraging a collator for locale-aware comparisons. The sort function receives items and a sortDescriptor, sorting appropriately for ascending or descending orders. Requires useCollator for string comparison and React Spectrum's useAsyncList; inputs include items and sortDescriptor, and output is a sorted items array.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useAsyncList.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet collator = useCollator();\n\nlet list = useAsyncList({\n  async load({signal}) {\n    // Same load function as before\n  },\n  sort({items, sortDescriptor}) {\n    return {\n      items: items.sort((a, b) => {\n        // Compare the items by the sorted column\n        let cmp = collator.compare(a[sortDescriptor.column], b[sortDescriptor.column]);\n\n        // Flip the direction if descending order is specified.\n        if (sortDescriptor.direction === 'descending') {\n          cmp *= -1;\n        }\n\n        return cmp;\n      })\n    };\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Paginated Infinite Loading of Async Data with useAsyncList and Picker in React Spectrum (TypeScript)\nDESCRIPTION: Shows how useAsyncList can handle paginated or infinite data loading from an API, where each page's cursor determines the next fetch position. The Picker component receives the list, its loading state, and an onLoadMore handler for seamless infinite scrolling. This example requires an API providing cursor-based pagination and uses React Spectrum's useAsyncList hook and Picker UI. Inputs are cursor and signal; output is an auto-extending Picker UI populated as the user scrolls.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useAsyncList.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useAsyncList({\n  async load({signal, cursor}) {\n    // If no cursor is available, then we're loading the first page.\n    // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n    let res = await fetch(cursor || 'https://pokeapi.co/api/v2/pokemon', {signal});\n    let json = await res.json();\n    return {\n      items: json.results,\n      cursor: json.next\n    };\n  }\n});\n\n<Picker\n  label=\"Pick a Pokemon\"\n  items={list.items}\n  isLoading={list.isLoading}\n  onLoadMore={list.loadMore}>\n  {item => <Item key={item.name}>{item.name}</Item>}\n</Picker>\n\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Radio Buttons with SVG in React\nDESCRIPTION: This example shows how to create custom-styled radio buttons using SVG and the VisuallyHidden component from @react-aria/visually-hidden. It also implements keyboard focus management using useFocusRing from @react-aria/focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\nimport {useFocusRing} from '@react-aria/focus';\n\n// RadioGroup is the same as in the previous example\nlet RadioContext = React.createContext(null);\n\nfunction RadioGroup(props) {\n  let {children, label, description} = props;\n  let state = useRadioGroupState(props);\n  let {radioGroupProps, labelProps, descriptionProps, errorMessageProps, isInvalid, validationErrors} = useRadioGroup(props, state);\n\n  return (\n    <div {...radioGroupProps}>\n      <span {...labelProps}>{label}</span>\n      <RadioContext.Provider value={state}>\n        {children}\n      </RadioContext.Provider>\n      {description && <div {...descriptionProps} style={{fontSize: 12}}>{description}</div>}\n      {isInvalid &&\n        <div {...errorMessageProps} style={{color: 'red', fontSize: 12}}>{validationErrors.join(' ')}</div>\n      }\n    </div>\n  )\n}\n\nfunction Radio(props) {\n  let {children} = props;\n  let state = React.useContext(RadioContext);\n  let ref = React.useRef(null);\n  let {inputProps, isSelected, isDisabled} = useRadio(props, state, ref);\n  let {isFocusVisible, focusProps} = useFocusRing();\n  let strokeWidth = isSelected ? 6 : 2;\n\n  return (\n    <label style={{display: 'flex', alignItems: 'center', opacity: isDisabled ? 0.4 : 1}}>\n      <VisuallyHidden>\n        <input {...inputProps} {...focusProps} ref={ref} />\n      </VisuallyHidden>\n      <svg\n        width={24}\n        height={24}\n        aria-hidden=\"true\"\n        style={{marginRight: 4}}>\n        <circle\n          cx={12}\n          cy={12}\n          r={8 - strokeWidth / 2}\n          fill=\"none\"\n          stroke={isSelected ? 'orange' : 'gray'}\n          strokeWidth={strokeWidth} />\n        {isFocusVisible &&\n          <circle\n            cx={12}\n            cy={12}\n            r={11}\n            fill=\"none\"\n            stroke=\"orange\"\n            strokeWidth={2} />\n        }\n      </svg>\n      {children}\n    </label>\n  );\n}\n\n<RadioGroup label=\"Favorite pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Pending State Button with Spinner using Spectrum React (TypeScript)\nDESCRIPTION: This snippet explains how to trigger and display a pending state on a Spectrum Button using the 'isPending' prop in combination with React state. When the button is pressed, 'isPending' is set to true, disabling the button and showing a spinner after a delay, then automatically re-enables it after three seconds. It requires '@react-spectrum/button' and React's useState and setTimeout functions. Used for indicating background operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [isLoading, setIsLoading] = React.useState(false);\\n\\n  let handlePress = () => {\\n    // Trigger button pending state\\n    setIsLoading(true);\\n\\n    setTimeout(() => {\\n      // Cancel button pending state\\n      setIsLoading(false);\\n    }, 3000);\\n  };\\n\\n  return (\\n    <Button variant=\\\"primary\\\" isPending={isLoading} onPress={handlePress}>Click me!</Button>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Reusable Dialog Component with useDialog in React\nDESCRIPTION: This code defines a reusable `Dialog` component utilizing the `useDialog` hook from `@react-aria/dialog`. It takes `title` and `children` as props, applies ARIA dialog roles and properties, and manages focus within the dialog content. This component is designed to be rendered inside overlay containers like modals or popovers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/useModalOverlay.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaDialogProps} from '@react-aria/dialog';\nimport {useDialog} from '@react-aria/dialog';\n\ninterface DialogProps extends AriaDialogProps {\n  title?: React.ReactNode,\n  children: React.ReactNode\n}\n\nfunction Dialog({title, children, ...props}: DialogProps) {\n  let ref = React.useRef(null);\n  let {dialogProps, titleProps} = useDialog(props, ref);\n\n  return (\n    <div {...dialogProps} ref={ref} style={{padding: 30}}>\n      {title &&\n        <h3 {...titleProps} style={{marginTop: 0}}>\n          {title}\n        </h3>\n      }\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Calendar Component in React Spectrum (TypeScript)\nDESCRIPTION: This code shows how to render the Calendar component with a required aria-label for accessibility. The component is used in its simplest uncontrolled form and does not take an initial value, letting the user pick any date. Expected input is the aria-label prop as a string; the output is the rendered calendar UI. No special dependencies beyond @react-spectrum/calendar are needed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar aria-label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Composing TextField with All Elements - React Aria - TypeScript/TSX\nDESCRIPTION: Shows how to construct a TextField component with Label, Input, optional description (Text with slot), and FieldError for validation. This pattern allows for maximum accessibility and validation support. Requires react-aria-components. Key props for enhanced accessibility include slot assignments and labeling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport {TextField, Label, Input, FieldError, Text} from 'react-aria-components';\\n\\n<TextField>\\n  <Label />\\n  <Input />\\n  <Text slot=\"description\" />\\n  <FieldError />\\n</TextField>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Landmark Regions with useLandmark in React (TSX)\nDESCRIPTION: This example demonstrates how to use the `useLandmark` hook from `@react-aria/landmark` to register HTML elements as ARIA landmark regions. It defines reusable components (`Navigation`, `Region`, `Search`) that accept props, create a ref using `useRef`, and apply the `useLandmark` hook with a specified `role`. The hook returns `landmarkProps` which are spread onto the respective HTML elements (`nav`, `article`, `form`). The example then uses these components to create a structure with navigation, search, and a generic region, enabling keyboard navigation between them.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/landmark/docs/useLandmark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLandmark} from '@react-aria/landmark';\nimport {useRef} from 'react';\n\nfunction Navigation(props) {\n  let ref = useRef<HTMLElement | null>(null);\n  let {landmarkProps} = useLandmark({...props, role: 'navigation'}, ref);\n  return (\n    <nav ref={ref} {...props} {...landmarkProps}>\n      {props.children}\n    </nav>\n  );\n}\n\nfunction Region(props) {\n  let ref = useRef<HTMLElement | null>(null);\n  let {landmarkProps} = useLandmark({...props, role: 'region'}, ref);\n  return (\n    <article ref={ref} {...props} {...landmarkProps}>\n      {props.children}\n    </article>\n  );\n}\n\nfunction Search(props) {\n  let ref = useRef<HTMLFormElement | null>(null);\n  let {landmarkProps} = useLandmark({...props, role: 'search'}, ref);\n  return (\n    <form ref={ref} {...props} {...landmarkProps}>\n      <h2 id=\"search-header\">Search</h2>\n      <input aria-labelledby=\"search-header\" type=\"search\" />\n    </form>\n  );\n}\n\n<div>\n  <Navigation>\n    <h2>Navigation</h2>\n    <ul>\n      <li><a href=\"#\">Link 1</a></li>\n      <li><a href=\"#\">Link 2</a></li>\n    </ul>\n  </Navigation>\n  <Search />\n  <Region aria-label=\"Example region\">\n    <h2>Region</h2>\n    <p>Example region with no focusable children.</p>\n  </Region>\n</div>\n```\n\n----------------------------------------\n\nTITLE: ComboBox Component Anatomy with Full Structure\nDESCRIPTION: The full component structure of a ComboBox, showing how to compose it with optional elements like description text and error messages. This example demonstrates the complete anatomy including sections and headers within the ListBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ComboBox, Label, Input, Button, Popover, ListBox, ListBoxItem, ListBoxSection, Header, Text, FieldError} from 'react-aria-components';\n\n<ComboBox>\n  <Label />\n  <Input />\n  <Button />\n  <Text slot=\"description\" />\n  <FieldError />\n  <Popover>\n    <ListBox>\n      <ListBoxItem>\n        <Text slot=\"label\" />\n        <Text slot=\"description\" />\n      </ListBoxItem>\n      <ListBoxSection>\n        <Header />\n        <ListBoxItem />\n      </ListBoxSection>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Data Loading in ListBox with React\nDESCRIPTION: Example of using useAsyncList hook to handle asynchronous data loading from an API. This implementation fetches Pokémon data and displays it in a single-selection ListBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Character>({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://pokeapi.co/api/v2/pokemon`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <ListBox aria-label=\"Pick a Pokemon\" items={list.items} selectionMode=\"single\">\n      {(item) => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using TextField Component - React Aria - TypeScript/TSX\nDESCRIPTION: Demonstrates basic usage of the `TextField` component from react-aria-components, showing how to compose it with Label and Input for an accessible form control. Dependencies include react-aria-components and React. The `TextField` receives label and input children. No props are required for this example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {TextField, Label, Input} from 'react-aria-components';\\n\\n<TextField>\\n  <Label>First name</Label>\\n  <Input />\\n</TextField>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled ColorWheel in TSX\nDESCRIPTION: Shows how to use the `ColorWheel` in both uncontrolled (using `defaultValue`) and controlled modes (using `value` and `onChange` props with React state). It utilizes the `parseColor` function from `@react-stately/color` to handle color parsing and maintain consistent state type. Labels are provided for accessibility using `aria-labelledby`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorWheel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(30, 100%, 50%)'));\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <Flex direction=\"column\" alignItems=\"center\">\n        <label id=\"label-1\">Hue (uncontrolled)</label>\n        <ColorWheel\n          defaultValue=\"hsl(30, 100%, 50%)\"\n          aria-labelledby=\"label-1\" />\n      </Flex>\n      <Flex direction=\"column\" alignItems=\"center\">\n        <label id=\"label-2\">Hue (controlled)</label>\n        <ColorWheel\n          value={value}\n          onChange={setValue}\n          aria-labelledby=\"label-1\" />\n      </Flex>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Drop in React Spectrum Tables\nDESCRIPTION: This example demonstrates how to enable dropping on items in a table using the onItemDrop event. When a valid drag hovers over an item, it receives the isDropTarget state and can be styled using CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    onItemDrop(e) {\n      alert(`Dropped on ${e.target.key}`);\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      {/* see above */}\n      <DraggableTable />\n      <FileTable dragAndDropHooks={dragAndDropHooks} />\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Row[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  background: var(--highlight-overlay)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RangeCalendar Component with React Aria Hooks\nDESCRIPTION: A complete implementation of a RangeCalendar component using useRangeCalendarState and useRangeCalendar hooks. The component supports localization, internationalized date handling, and provides navigation buttons for moving between months.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useRangeCalendarState} from '@react-stately/calendar';\nimport {useRangeCalendar} from '@react-aria/calendar';\nimport {useLocale} from '@react-aria/i18n';\nimport {createCalendar} from '@internationalized/date';\n\n// Reuse the Button from your component library. See below for details.\nimport {Button} from 'your-component-library';\n\nfunction RangeCalendar(props) {\n  let {locale} = useLocale();\n  let state = useRangeCalendarState({\n    createCalendar,\n    ...props,\n    locale\n  });\n\n  let ref = React.useRef(null);\n  let {calendarProps, prevButtonProps, nextButtonProps, title} = useRangeCalendar(props, state, ref);\n\n  return (\n    <div {...calendarProps} ref={ref} className=\"calendar\">\n      <div className=\"header\">\n        <h2>{title}</h2>\n        <Button {...prevButtonProps}>&lt;</Button>\n        <Button {...nextButtonProps}>&gt;</Button>\n      </div>\n      <CalendarGrid state={state} firstDayOfWeek={props.firstDayOfWeek} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onDragEnd for Drag Operation Handling\nDESCRIPTION: This example shows how to use the onDragEnd event to handle drag operation completion. When a move operation is performed, the dragged items are removed from the source list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_48\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Adobe Photoshop'},\n      {id: 2, name: 'Adobe XD'},\n      {id: 3, name: 'Adobe Dreamweaver'},\n      {id: 4, name: 'Adobe InDesign'},\n      {id: 5, name: 'Adobe Connect'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    ///- begin collapse -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        return {\n          'text/plain': item.name,\n          'custom-app-type': JSON.stringify(item)\n        };\n      });\n    },\n    ///- end collapse -///\n    // ...\n    /*- begin highlight -*/\n    onDragEnd(e) {\n      if (e.dropOperation === 'move') {\n        list.remove(...e.keys);\n      }\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <ListBox aria-label=\"Draggable list\" selectionMode=\"multiple\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </ListBox>\n      <DroppableListBox />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Implementation\nDESCRIPTION: Example demonstrating basic usage of the Link component with an external URL and target attribute.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Link} from 'react-aria-components';\n\n<Link href=\"https://www.imdb.com/title/tt6348138/\" target=\"_blank\">\n  The missing link\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty State in ListBox with renderEmptyState Prop\nDESCRIPTION: Example of customizing what a ListBox displays when it contains no items using the renderEmptyState prop, which accepts a function that returns the content to display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Search results\"\n  renderEmptyState={() => 'No results found.'}\n>\n  {[]}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Reactively Logging CheckboxGroup Selections with onChange Handler (TypeScript)\nDESCRIPTION: This example demonstrates a controlled CheckboxGroup where the current selection is managed via React useState and reflected live below the group. The onChange prop updates the selection array as the user interacts with the checkboxes. Meant for logging, debugging, or showing real-time feedback to users regarding their selections. Requires React and React Spectrum component imports.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [selected, setSelected] = React.useState([]);\\n\\n  return (\\n    <>\\n      <CheckboxGroup label=\\\"Favorite sports\\\" value={selected} onChange={setSelected}>\\n        <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n        <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n        <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n      </CheckboxGroup>\\n      <div>You have selected: {selected.join(', ')}</div>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Selection and Input Events in ComboBox - React Spectrum - TypeScript\nDESCRIPTION: This snippet showcases managing ComboBox selection and input value as controlled React state, using the onSelectionChange and onInputChange event handlers. It demonstrates updating local state and selecting items by id. Required dependencies: React (useState), a ComboBox implementation, and ListBoxItem. Inputs are user selections and text input; outputs are updated state and real-time UI labels. Highlights best practices for interactive, controlled components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  let [value, setValue] = React.useState('');\n  let [majorId, setMajorId] = React.useState('');\n\n  let onSelectionChange = (id) => {\n    setMajorId(id);\n  };\n\n  let onInputChange = (value) => {\n    setValue(value)\n  };\n\n  return (\n    <>\n      <p>Current selected major id: {majorId}</p>\n      <p>Current input text: {value}</p>\n      <MyComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={options}\n        selectedKey={majorId}\n        /*- begin highlight -*/\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}\n        /*- end highlight -*/\n      >\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </MyComboBox>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Uncontrolled Default Value in CheckboxGroup with TypeScript\nDESCRIPTION: This TSX code shows how to use the defaultValue prop on a custom MyCheckboxGroup component to provide an initial (uncontrolled) array of selected checkbox values. MyCheckboxGroup and MyCheckbox are custom wrappers that mimic CheckboxGroup and Checkbox from react-aria-components. The component expects an array mapped to child Checkbox values and renders them with the provided default selection. Inputs are React props; outputs are user selections tracked internally.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n<MyCheckboxGroup label=\"Favorite sports (uncontrolled)\" defaultValue={['soccer', 'baseball']}>\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Using End Alignment in Vertical ButtonGroup in React Spectrum (TSX)\nDESCRIPTION: Demonstrates the 'align' prop set to 'end' within a vertically oriented ButtonGroup, aligning all group buttons to the container's end edge (typically right-aligned in left-to-right layouts). Requires '@react-spectrum/buttongroup' and '@react-spectrum/button'. This pattern is commonly used for dialog footers or action bars where aligning buttons away from content is necessary.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/buttongroup/docs/ButtonGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ButtonGroup orientation=\\\"vertical\\\" align=\\\"end\\\">\\n  <Button variant=\\\"secondary\\\">No, thanks</Button>\\n  <Button variant=\\\"secondary\\\">Remind me later</Button>\\n  <Button variant=\\\"primary\\\">Rate Now</Button>\\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: TextField with Various Labeling Options in React\nDESCRIPTION: This example shows different labeling options for the TextField component, including required fields and necessity indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-150\" wrap>\n  <TextField label=\"Street address\" />\n  <TextField label=\"Street address\" isRequired necessityIndicator=\"icon\" />\n  <TextField label=\"Street address\" isRequired necessityIndicator=\"label\" />\n  <TextField label=\"Street address\" necessityIndicator=\"label\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating an Input Group with Button using React Aria Components in TypeScript/JSX\nDESCRIPTION: This TypeScript/JSX snippet illustrates how to compose an email input group using React Aria Components within a TextField. It demonstrates grouping of input and button elements semantically, leveraging accessible UI states, and structure. Required dependencies include 'react-aria-components', and main parameters involve component nesting for grouping related controls. The output is a React element structure with accessibility enhancements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField, Label, Group, Input, Button} from 'react-aria-components';\\n\\n<TextField>\\n  <Label>Email</Label>\\n  <Group>\\n    <Input />\\n    <Button aria-label=\\\"Add email\\\">+</Button>\\n  </Group>\\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: Defining a Popover Component in React (tsx)\nDESCRIPTION: This snippet defines a reusable `Popover` component using React Aria hooks (`usePopover`, `Overlay`, `DismissButton`) and React Stately (`OverlayTriggerState`). It wraps its children within an `Overlay` and applies styles and accessibility props obtained from `usePopover`. It's intended to contain popup elements like listboxes, taking the overlay state and popover props as input.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaPopoverProps} from 'react-aria';\nimport type {OverlayTriggerState} from 'react-stately';\nimport {usePopover, Overlay, DismissButton} from '@react-aria/overlays';\n\ninterface PopoverProps extends AriaPopoverProps {\n  children: React.ReactNode,\n  state: OverlayTriggerState\n}\n\nfunction Popover({children, state, ...props}: PopoverProps) {\n  let {popoverProps} = usePopover(props, state);\n\n  return (\n    <Overlay>\n      <div\n        {...popoverProps}\n        ref={props.popoverRef as React.RefObject<HTMLDivElement>}\n        style={{\n          ...popoverProps.style,\n          background: 'lightgray',\n          border: '1px solid gray'\n        }}>\n        {children}\n        <DismissButton onDismiss={state.close} />\n      </div>\n    </Overlay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Altering Button Render Based on isPressed State Using Render Props (JSX)\nDESCRIPTION: This JSX example shows a Button using a render prop child to display an extra PressHighlight element when the button is pressed. The isPressed state is passed by React Aria. Inputs: render prop function, button state. Output: conditionally rendered children. No dependencies aside from a compatible Button and PressHighlight component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Button>\n  {({isPressed}) => (\n    <>\n      {isPressed && <PressHighlight />}\n      Press me\n    </>\n  )}\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Virtualizer with GridList and Variable Heights (TSX)\nDESCRIPTION: This example demonstrates using the Virtualizer component with a GridList to handle items with variable heights. It utilizes a ListLayout configured with an `estimatedRowHeight`, `gap`, and `padding`. This configuration allows the Virtualizer to efficiently render a large list where item heights are not fixed, such as when text wrapping occurs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n example\nimport {Virtualizer, ListLayout} from 'react-aria-components';\nimport {MyGridList, MyItem} from './GridList';\n\nfunction Example() {\n  return (\n    <Virtualizer \n      /*- begin highlight -*/\n      layout={ListLayout}\n      layoutOptions={{\n        estimatedRowHeight: 75,\n        gap: 4,\n        padding: 4\n      }}\n      /*- end highlight -*/\n    >\n      <MyGridList aria-label=\"Virtualized GridList\" selectionMode=\"multiple\" items={items}>\n        {item => <MyItem>{item.name}</MyItem>}\n      </MyGridList>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Table with localStorage Persistence in React Spectrum\nDESCRIPTION: This example demonstrates creating a table with resizable columns where column widths are controlled and persisted in localStorage. It uses onResize to update column widths during resizing and onResizeEnd to save the final widths to localStorage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nlet initialColumns = [\n  {name: 'File Name', id: 'file', width: '1fr'},\n  {name: 'Size', id: 'size', width: 80},\n  {name: 'Date', id: 'date', width: 100}\n];\n\nfunction ResizableTable() {\n  /*- begin highlight -*/\n  let [columns, setColumns] = React.useState(() => {\n    let localStorageWidths = localStorage.getItem('table-widths');\n    if (localStorageWidths) {\n      let widths = JSON.parse(localStorageWidths);\n      return initialColumns.map(col => ({...col, width: widths[col.id]}));\n    } else {\n      return initialColumns;\n    }\n  });\n\n  let onResize = (widths) => {\n    setColumns(columns => columns.map(col => ({...col, width: widths.get(col.id)})));\n  };\n\n  let onResizeEnd = (widths) => {\n    localStorage.setItem('table-widths', JSON.stringify(Object.fromEntries(widths)));\n  };\n  /*- end highlight -*/\n\n  return (\n    <ResizableTableContainer\n      /*- begin highlight -*/\n      onResize={onResize}\n      onResizeEnd={onResizeEnd}\n      /*- end highlight -*/\n    >\n      <Table aria-label=\"Table with controlled, resizable columns saved in local storage\">\n        <TableHeader columns={columns}>\n          {(column) => (\n            <Column isRowHeader={column.id === 'file'} width={column.width}>\n              <div className=\"flex-wrapper\">\n                <span tabIndex={-1} className=\"column-name\">{column.name}</span>\n                <ColumnResizer />\n              </div>\n            </Column>\n          )}\n        </TableHeader>\n        <TableBody>\n          <Row>\n            <Cell>2022-Roadmap-Proposal-Revision-012822-Copy(2)</Cell>\n            <Cell>214 KB</Cell>\n            <Cell>November 27, 2022 at 4:56PM</Cell>\n          </Row>\n          <Row>\n            <Cell>62259692_p0_master1200</Cell>\n            <Cell>120 KB</Cell>\n            <Cell>January 27, 2021 at 1:56AM</Cell>\n          </Row>\n        </TableBody>\n      </Table>\n    </ResizableTableContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useIsSSR Hook in a React Component (TypeScript)\nDESCRIPTION: This example demonstrates importing the `useIsSSR` hook from `@react-aria/ssr` and using it within a functional React component (`MyComponent`). The hook returns a boolean value (`isSSR`) which is `true` during server-side rendering and initial hydration, and `false` once hydration is complete on the client. This allows conditional rendering of different content ('Server' or 'Client') based on the rendering environment. In React 16/17, this requires wrapping the application with `SSRProvider`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/ssr/docs/useIsSSR.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useIsSSR} from '@react-aria/ssr';\n\nfunction MyComponent() {\n  let isSSR = useIsSSR();\n  return <span>{isSSR ? 'Server' : 'Client'}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Toolbar and Separator Components with Custom CSS (CSS)\nDESCRIPTION: This CSS provides styling for the .react-aria-Toolbar and .react-aria-Separator components. The Toolbar is set up as a flex container with row/column direction based on orientation, proper wrapping, and spacing. Group and ToggleButton classes are styled for layout adjustment, and the Separator is styled with alignment, color, and dimension adjustments based on orientation. Requires the inclusion of @react-aria/example-theme for theming variables.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toolbar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \\\"@react-aria/example-theme\\\";\\n\\n.react-aria-Toolbar {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 5px;\\n\\n  &[data-orientation=horizontal] {\\n    flex-direction: row;\\n  }\\n\\n  .react-aria-Group {\\n    display: contents;\\n  }\\n\\n  .react-aria-ToggleButton {\\n    width: 32px;\\n  }\\n}\\n\\n.react-aria-Separator {\\n  align-self: stretch;\\n  background-color: var(--border-color);\\n\\n  &[aria-orientation=vertical] {\\n    width: 1px;\\n    margin: 0px 10px;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Logic with the validate Prop in React Aria\nDESCRIPTION: Shows how to provide a custom validation function to the `validate` prop of a `TextField`. The function receives the field's current value and returns an error message string if the custom validation logic (e.g., checking against 'admin') fails, or `null` if it passes. The error is displayed using the `FieldError` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  {/*- begin highlight -*/}\n  <TextField validate={value => value === 'admin' ? 'Nice try!' : null}>\n  {/*- end highlight -*/}\n    <Label>Username</Label>\n    <Input />\n    <FieldError />\n  </TextField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Calendar Component in React Aria\nDESCRIPTION: A basic implementation of the Calendar component with header, navigation buttons, and grid of calendar cells. This snippet shows the fundamental structure of the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Calendar, Heading, Button, CalendarGrid, CalendarCell} from 'react-aria-components';\n\n<Calendar aria-label=\"Appointment date\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <CalendarGrid>\n    {date => <CalendarCell date={date} />}\n  </CalendarGrid>\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: Styling SearchField Component with CSS\nDESCRIPTION: This CSS snippet provides custom styling for the SearchField component, including input and button styles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/searchfield/docs/useSearchField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n.search-field {\n  display: flex;\n  flex-direction: column;\n}\n\n.search-field div {\n  background: slategray;\n  padding: 4px 0 4px 4px;\n  border-radius: 4px;\n  width: 250px;\n  display: flex;\n}\n\n.search-field input {\n  flex: 1;\n  color: white;\n  font-size: 15px;\n  padding: 2px 0;\n}\n\n.search-field input, .search-field button {\n  -webkit-appearance: none;\n  border: none;\n  outline: none;\n  background: none;\n}\n\n.search-field input::-webkit-search-cancel-button,\n.search-field input::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable GridList Wrappers in React Spectrum (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create reusable wrapper components for GridList and GridListItem, allowing consistent application of DOM structure, styling, and logic such as selection and drag-and-drop. Dependencies include react-aria-components with type imports, and a custom MyCheckbox component for multi-select items. The reusable 'MyGridList' accepts children and props, while 'MyItem' handles selection and drag conditions, automatically inserting affordances. Inputs include label and child items, and outputs are consistently wrapped GridList UIs. Limitations may include the need to define the MyCheckbox component separately.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {GridListProps, GridListItemProps} from 'react-aria-components';\\n\\nexport function MyGridList<T extends object>({children, ...props}: GridListProps<T>) {\\n  return (\\n    <GridList {...props}>\\n      {children}\\n    </GridList>\\n  );\\n}\\n\\nexport function MyItem({children, ...props}: GridListItemProps) {\\n  let textValue = typeof children === 'string' ? children : undefined;\\n  return (\\n    <GridListItem textValue={textValue} {...props}>\\n      {({selectionMode, selectionBehavior, allowsDragging}) => <>\\n        {/* Add elements for drag and drop and selection. */}\\n        {allowsDragging && <Button slot=\"drag\">≡</Button>}\\n        {selectionMode === 'multiple' && selectionBehavior === 'toggle' && <MyCheckbox slot=\"selection\" />}\\n        {children}\\n      </>}\\n    </GridListItem>\\n  );\\n}\\n\\n<MyGridList aria-label=\"Ice cream flavors\" selectionMode=\"multiple\">\\n  <MyItem>Chocolate</MyItem>\\n  <MyItem>Mint</MyItem>\\n  <MyItem>Strawberry</MyItem>\\n  <MyItem>Vanilla</MyItem>\\n</MyGridList>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckboxGroup with Help Text and Validation in React Spectrum\nDESCRIPTION: Example demonstrating a CheckboxGroup with description and conditional error messages based on validation. It uses React state to track selections and validates that only specific options are selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [checked, setChecked] = React.useState(['dogs', 'dragons']);\n  let isValid = checked.length === 2 && checked.includes('dogs') && checked.includes('dragons');\n\n  return (\n    <CheckboxGroup\n      label=\"Pets\"\n      onChange={setChecked}\n      value={checked}\n      isInvalid={!isValid}\n      description=\"Select your pets.\"\n      errorMessage={\n        checked.includes('cats')\n          ? 'No cats allowed.'\n          : 'Select only dogs and dragons.'\n      }>\n      <Checkbox value=\"dogs\">Dogs</Checkbox>\n      <Checkbox value=\"cats\">Cats</Checkbox>\n      <Checkbox value=\"dragons\">Dragons</Checkbox>\n    </CheckboxGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Status Select Component with React Aria and Tailwind CSS\nDESCRIPTION: Implements a complete issue status select component with custom styling using React Aria Components and Tailwind CSS. The component includes a label, button, popover, and list of status options with colored indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/status-select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Select, Label, Button, SelectValue, Popover, ListBox, ListBoxItem} from 'react-aria-components';\nimport type {ListBoxItemProps} from 'react-aria-components';\nimport ChevronUpDownIcon from '@spectrum-icons/workflow/ChevronUpDown';\nimport CheckIcon from '@spectrum-icons/workflow/Checkmark';\n\nfunction SelectExample() {\n  return (\n    <div className=\"bg-linear-to-tl from-amber-500 to-rose-700 p-8 sm:h-[250px] rounded-lg flex justify-center\">\n      <Select className=\"flex flex-col gap-1 w-[200px]\">\n        <Label className=\"text-white cursor-default\">Status</Label>\n        <Button className=\"flex items-center cursor-default rounded-lg border-0 bg-white/90 pressed:bg-white transition py-2 pl-5 pr-2 text-base text-left leading-normal shadow-md text-gray-700 focus:outline-hidden focus-visible:ring-2 ring-white ring-offset-2 ring-offset-rose-700\">\n          <SelectValue className=\"flex-1 truncate placeholder-shown:italic\" />\n          <ChevronUpDownIcon size=\"XS\" />\n        </Button>\n        <Popover className=\"max-h-60 w-(--trigger-width) overflow-auto rounded-md bg-white text-base shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out\">\n          <ListBox className=\"outline-hidden p-1\">\n            <StatusItem textValue=\"Backlog\">\n              <Status className=\"bg-gray-500\" />\n              Backlog\n            </StatusItem>\n            <StatusItem textValue=\"In Progress\">\n              <Status className=\"bg-blue-500\" />\n              In Progress\n            </StatusItem>\n            <StatusItem textValue=\"In Review\">\n              <Status className=\"bg-yellow-500\" />\n              In Review\n            </StatusItem>\n            <StatusItem textValue=\"Done\">\n              <Status className=\"bg-green-500\" />\n              Done\n            </StatusItem>\n            <StatusItem textValue=\"Won't Do\">\n              <Status className=\"bg-red-500\" />\n              Won't Do\n            </StatusItem>\n          </ListBox>\n        </Popover>\n      </Select>\n    </div>\n  );\n}\n\nfunction StatusItem(props: ListBoxItemProps & {children: React.ReactNode}) {\n  return (\n    <ListBoxItem\n      {...props}\n      className=\"group flex items-center gap-2 cursor-default select-none py-2 px-4 outline-hidden rounded-sm text-gray-900 focus:bg-rose-600 focus:text-white\">\n      {({ isSelected }) => (\n        <>\n          <span className=\"flex-1 flex items-center gap-2 truncate font-normal group-selected:font-medium\">{props.children}</span>\n          <span className=\"w-5 flex items-center text-rose-600 group-focus:text-white\">\n            {isSelected && <CheckIcon size=\"S\" />}\n          </span>\n        </>\n      )}\n    </ListBoxItem>\n  );\n}\n\nfunction Status({className}: {className: string}) {\n  return <span className={`w-3 h-3 rounded-full border border-solid border-white ${className}`} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Controlled and Uncontrolled Date Ranges in React Spectrum DateRangePicker (TypeScript/React)\nDESCRIPTION: This snippet shows how to use the DateRangePicker component in both controlled and uncontrolled modes within a React functional component. The example demonstrates initializing state with date ranges using parseDate from @internationalized/date, passing value, defaultValue, and onChange props as appropriate. Dependencies include React and @internationalized/date. The component expects start/end date objects and emits updated values on change.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\\n\\nfunction Example() {\\n  let [value, setValue] = React.useState({\\n    start: parseDate('2020-02-03'),\\n    end: parseDate('2020-02-08')\\n  });\\n\\n  return (\\n    <>\\n      <DateRangePicker\\n        label=\\\"Date range (uncontrolled)\\\"\\n        defaultValue={{\\n          start: parseDate('2020-02-03'),\\n          end: parseDate('2020-02-08')\\n        }} />\\n      <DateRangePicker\\n        label=\\\"Date range (controlled)\\\"\\n        value={value}\\n        onChange={setValue} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DateField Component with React Aria Hooks\nDESCRIPTION: This example demonstrates how to create a DateField component using useDateFieldState, useDateField, and useDateSegment hooks from React Aria. It includes handling of segments, labels, and basic styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDateFieldState} from '@react-stately/datepicker';\nimport {useDateField, useDateSegment} from '@react-aria/datepicker';\nimport {createCalendar} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nexport function DateField(props) {\n  let {locale} = useLocale();\n  let state = useDateFieldState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  let ref = React.useRef(null);\n  let {labelProps, fieldProps} = useDateField(props, state, ref);\n\n  return (\n    <div className=\"wrapper\">\n      <span {...labelProps}>{props.label}</span>\n      <div {...fieldProps} ref={ref} className=\"field\">\n        {state.segments.map((segment, i) =>\n          <DateSegment key={i} segment={segment} state={state} />\n        )}\n        {state.isInvalid &&\n          <span aria-hidden=\"true\">🚫</span>\n        }\n      </div>\n    </div>\n  );\n}\n\nfunction DateSegment({segment, state}) {\n  let ref = React.useRef(null);\n  let {segmentProps} = useDateSegment(segment, state, ref);\n\n  return (\n    <span\n      {...segmentProps}\n      ref={ref}\n      className={`segment ${segment.isPlaceholder ? 'placeholder' : ''}`}>\n      {segment.text}\n    </span>\n  );\n}\n\n<DateField label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Constructing and Rendering a List with useListData - React Spectrum - TypeScript\nDESCRIPTION: This example demonstrates how to construct a list using the useListData hook by providing initial items, managing selected keys, and extracting a unique key for each item. The snippet shows integration with a ListBox component, passing relevant state and handlers, and rendering items dynamically. Dependencies include React, @react-stately/data, and ListBox/Item components. Inputs are an array of items, key extraction, and selected keys; outputs are the rendered ListBox with stateful item and selection management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useListData({\n  initialItems: [\n    {name: 'Aardvark'},\n    {name: 'Kangaroo'},\n    {name: 'Snake'}\n  ],\n  initialSelectedKeys: ['Kangaroo'],\n  getKey: item => item.name\n});\n\n<ListBox\n  items={list.items}\n  selectedKeys={list.selectedKeys}\n  onSelectionChange={list.setSelectedKeys}>\n  {item => <Item key={item.name}>{item.name}</Item>}\n</ListBox>\n\n```\n\n----------------------------------------\n\nTITLE: Handling onChangeEnd with a Controlled Slider in React Spectrum (TypeScript)\nDESCRIPTION: This example demonstrates how to use the \\\"onChangeEnd\\\" prop on a React Spectrum Slider to capture the value only after the user stops interacting with the slider. The slider uses React.useState to store its value, and \\\"defaultValue\\\" is set from state on initialization. This pattern is useful for expensive computations or network requests that should wait until the user finishes sliding.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\nfunction Example() {\n  let [value, setValue] = React.useState(25);\n  return (\n    <>\n      <Slider\n        label=\"Cookies to buy\"\n        defaultValue={value}\n        onChangeEnd={setValue} />\n      <p>Current value: {value}</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced FieldGroup Implementation\nDESCRIPTION: Example of creating a custom FieldGroup component with error handling using TextFieldContext.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextFieldContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <TextFieldContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n        {children}\n      </TextFieldContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Account details\" errorMessage=\"Invalid account details.\">\n  <MyTextField label=\"Name\" defaultValue=\"Devon\" />\n  <MyTextField label=\"Email\" defaultValue=\"devon@example.com\" />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapping in Flex Layouts with React Spectrum\nDESCRIPTION: Shows how to enable wrapping of items into multiple rows using the wrap prop, which allows content to reflow when the container size changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Flex.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"row\" gap=\"size-100\" wrap>\n  {colors.map(color =>\n    <View key={color} backgroundColor={color} width=\"size-800\" height=\"size-800\" />\n  )}\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Controlled Checkbox Component with State\nDESCRIPTION: Demonstrates how to create a controlled checkbox using React state with the isSelected and onChange props, also displaying the current selection state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <>\n      <MyCheckbox isSelected={selected} onChange={setSelection}>\n        Subscribe\n      </MyCheckbox>\n      <p>{`You are ${selected ? 'subscribed' : 'unsubscribed'}`}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Plugins in tailwind.config.js for Tailwind v3 (TypeScript)\nDESCRIPTION: This code shows how to configure the required Tailwind CSS plugins in a JavaScript (or TypeScript) configuration file for Tailwind v3 environments. The 'plugins' array includes 'tailwindcss-react-aria-components' and 'tailwindcss-animate', which should be installed via npm/yarn. Place this object in the appropriate tailwind.config.js file; no external inputs expected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/datepicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable Tabs with React Aria Components and Framer Motion\nDESCRIPTION: Complete implementation of an animated, swipeable tabs component using React Aria Components for accessibility, Framer Motion for animations, and scroll snapping for touch interactions. Includes tab selection indicators and smooth animations between panels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  Collection\n} from \"react-aria-components\";\nimport { motion, animate, useScroll, useTransform, useMotionValueEvent } from \"framer-motion\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nlet tabs = [\n  { id: \"world\", label: \"World\" },\n  { id: \"ny\", label: \"N.Y.\" },\n  { id: \"business\", label: \"Business\" },\n  { id: \"arts\", label: \"Arts\" },\n  { id: \"science\", label: \"Science\" }\n];\n\nfunction AnimatedTabs() {\n  let [selectedKey, setSelectedKey] = useState(tabs[0].id);\n\n  let tabListRef = useRef(null);\n  let tabPanelsRef = useRef(null);\n\n  // Track the scroll position of the tab panel container.\n  let { scrollXProgress } = useScroll({\n    container: tabPanelsRef\n  });\n\n  // Find all the tab elements so we can use their dimensions.\n  let [tabElements, setTabElements] = useState([]);\n  useEffect(() => {\n    if (tabElements.length === 0) {\n      let tabs = tabListRef.current.querySelectorAll(\"[role=tab]\");\n      setTabElements(tabs);\n    }\n  }, [tabElements]);\n\n  // This function determines which tab should be selected\n  // based on the scroll position.\n  let getIndex = useCallback(\n    (x) => Math.max(0, Math.floor((tabElements.length - 1) * x)),\n    [tabElements]\n  );\n\n  // This function transforms the scroll position into the X position\n  // or width of the selected tab indicator.\n  let transform = (x, property) => {\n    if (!tabElements.length) return 0;\n\n    // Find the tab index for the scroll X position.\n    let index = getIndex(x);\n\n    // Get the difference between this tab and the next one.\n    let difference =\n      index < tabElements.length - 1\n        ? tabElements[index + 1][property] - tabElements[index][property]\n        : tabElements[index].offsetWidth;\n\n    // Get the percentage between tabs.\n    // This is the difference between the integer index and fractional one.\n    let percent = (tabElements.length - 1) * x - index;\n\n    // Linearly interpolate to calculate the position of the selection indicator.\n    let value = tabElements[index][property] + difference * percent;\n\n    // iOS scrolls weird when translateX is 0 for some reason. 🤷‍♂️\n    return value || 0.1;\n  };\n\n  let x = useTransform(scrollXProgress, (x) => transform(x, \"offsetLeft\"));\n  let width = useTransform(scrollXProgress, (x) => transform(x, \"offsetWidth\"));\n\n  // When the user scrolls, update the selected key\n  // so that the correct tab panel becomes interactive.\n  useMotionValueEvent(scrollXProgress, \"change\", (x) => {\n    if (animationRef.current || !tabElements.length) return;\n    setSelectedKey(tabs[getIndex(x)].id);\n  });\n\n  // When the user clicks on a tab perform an animation of\n  // the scroll position to the newly selected tab panel.\n  let animationRef = useRef(null);\n  let onSelectionChange = (selectedKey) => {\n    setSelectedKey(selectedKey);\n\n    // If the scroll position is already moving but we aren't animating\n    // then the key changed as a result of a user scrolling. Ignore.\n    if (scrollXProgress.getVelocity() && !animationRef.current) {\n      return;\n    }\n\n    let tabPanel = tabPanelsRef.current;\n    let index = tabs.findIndex((tab) => tab.id === selectedKey);\n    animationRef.current?.stop();\n    animationRef.current = animate(\n      tabPanel.scrollLeft,\n      tabPanel.scrollWidth * (index / tabs.length),\n      {\n        type: \"spring\",\n        bounce: 0.2,\n        duration: 0.6,\n        onUpdate: (v) => {\n          tabPanel.scrollLeft = v;\n        },\n        onPlay: () => {\n          // Disable scroll snap while the animation is going or weird things happen.\n          tabPanel.style.scrollSnapType = \"none\";\n        },\n        onComplete: () => {\n          tabPanel.style.scrollSnapType = \"\";\n          animationRef.current = null;\n        }\n      }\n    );\n  };\n\n  return (\n    <Tabs\n      className=\"w-fit max-w-[min(100%,350px)]\"\n      selectedKey={selectedKey}\n      onSelectionChange={onSelectionChange}>\n      <div className=\"relative\">\n        <TabList ref={tabListRef} className=\"flex -mx-1\" items={tabs}>\n          {(tab) =>\n            <Tab className=\"cursor-default px-3 py-1.5 text-md transition outline-hidden touch-none\">\n              {({ isSelected, isFocusVisible }) => <>\n                {tab.label}\n                {isFocusVisible && isSelected && (\n                  // Focus ring.\n                  <motion.span\n                    className=\"absolute inset-0 z-10 rounded-full ring-2 ring-black ring-offset-2\"\n                    style={{ x, width }}\n                  />\n                )}\n              </>}\n            </Tab>\n          }\n        </TabList>\n        {/* Selection indicator. */}\n        <motion.span\n          className=\"absolute inset-0 z-10 bg-white rounded-full mix-blend-difference\"\n          style={{ x, width }} />\n      </div>\n      <div\n        ref={tabPanelsRef}\n        className=\"my-4 overflow-auto snap-x snap-mandatory no-scrollbar flex\">\n        <Collection items={tabs}>\n          {(tab) => (\n            <TabPanel\n              shouldForceMount\n              className=\"shrink-0 w-full px-2 box-border snap-start outline-hidden -outline-offset-2 rounded-sm focus-visible:outline-black\">\n              <h2>{tab.label} contents...</h2>\n              <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean sit amet nisl blandit, pellentesque eros eu, scelerisque eros. Sed cursus urna at nunc lacinia dapibus.</p>\n            </TabPanel>\n          )}\n        </Collection>\n      </div>\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reorderable ListBox Component in React\nDESCRIPTION: Shows how to create a reorderable listbox component using React Spectrum hooks for drag and drop functionality. Uses useDraggableCollection and useDraggableItem hooks to enable item reordering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDraggableCollectionState} from '@react-stately/dnd';\nimport {useDraggableCollection, useDraggableItem} from '@react-aria/dnd';\n\nfunction ReorderableListBox(props) {\n  let state = useListState(props);\n  let ref = React.useRef(null);\n  let { listBoxProps } = useListBox({\n    ...props,\n    shouldSelectOnPressUp: true\n  }, state, ref);\n\n  let dropState = useDroppableCollectionState({\n    ...props,\n    collection: state.collection,\n    selectionManager: state.selectionManager\n  });\n\n  let {collectionProps} = useDroppableCollection({\n    ...props,\n    keyboardDelegate: new ListKeyboardDelegate(state.collection, state.disabledKeys, ref),\n    dropTargetDelegate: new ListDropTargetDelegate(state.collection, ref)\n  }, dropState, ref);\n\n  let dragState = useDraggableCollectionState({\n    ...props,\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    getItems: props.getItems || ((keys) => {\n      return [...keys].map(key => {\n        let item = state.collection.getItem(key);\n\n        return {\n          'text/plain': item.textValue\n        };\n      });\n    }),\n  });\n\n  useDraggableCollection(props, dragState, ref);\n\n  return (\n    <ul\n      {...mergeProps(listBoxProps, collectionProps)}\n      ref={ref}>\n      {[...state.collection].map((item) => (\n        <ReorderableOption\n          key={item.key}\n          item={item}\n          state={state}\n          dragState={dragState}\n          dropState={dropState}\n        />\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying International Calendar using React Spectrum and I18nProvider in TSX\nDESCRIPTION: This TSX snippet shows how to render a React Spectrum Calendar component (`MyCalendar`) localized for Hindi (India) using the Indian calendar system via `I18nProvider`. It uses React state (`React.useState`) to manage the selected date and demonstrates that although the UI uses the Indian calendar, the `onChange` handler receives dates in the Gregorian calendar system for consistency. Requires `@react-aria/i18n`, `React`, and a `MyCalendar` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState<DateValue | null>(null);\n  return (\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n      <MyCalendar aria-label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Overlay Entry and Exit Transitions - CSS\nDESCRIPTION: This snippet enables distinct entry and exit animations by using different transition durations and properties for each state. Entry uses transform and opacity over 300ms, starting from scale(0.8) and opacity 0. Exit uses a 150ms opacity transition. Use it in situations requiring custom timing/easing for opening and closing overlays. No dependencies beyond CSS; works with overlay components using [data-entering]/[data-exiting]. Inputs are the component's open/close state via data attributes; outputs are tailored open/close animations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\n  /* entry transition */\n  transition: transform 300ms, opacity 300ms;\n\n  /* starting state of the entry transition */\n  &[data-entering] {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n\n  &[data-exiting] {\n    /* exit transition */\n    transition: opacity 150ms;\n    /* ending state of the exit transition */\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToastProvider to Add Toasts in React (TSX)\nDESCRIPTION: This example shows how to utilize the `ToastProvider` component. It renders a `Button` component within the `ToastProvider`. The button's `onPress` handler accesses the `state` object (provided by `ToastProvider` via its render prop) and calls `state.add()` to enqueue and display a new toast message with the content \"Toast is done!\".\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastProvider>\n  {state => (\n    <Button onPress={() => state.add('Toast is done!')}>Show toast</Button>\n  )}\n</ToastProvider>\n```\n\n----------------------------------------\n\nTITLE: Styling the react-aria-components Tree and TreeItem with CSS\nDESCRIPTION: Provides detailed CSS rules for styling the `Tree` (`.react-aria-Tree`) and `TreeItem` (`.react-aria-TreeItem`) elements from `react-aria-components`. It covers layout (flexbox), dimensions, overflow, padding, borders, background, focus visibility (`data-focus-visible`), selection states (`data-selected`, `data-pressed`), disabled state (`data-disabled`), expansion chevron styling (`[slot=chevron]`, `data-expanded`), nested button styling, and uses `@supports selector(:has(...))` for enhanced styling of adjacent selected items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tree {\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  overflow: auto;\n  padding: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--overlay-background);\n  forced-color-adjust: none;\n  outline: none;\n  width: 250px;\n  max-height: 300px;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n\n  .react-aria-TreeItem {\n    display: flex;\n    align-items: center;\n    gap: 0.571rem;\n    min-height: 28px;\n    padding: 0.286rem 0.286rem 0.286rem 0.571rem;\n    --padding: 8px;\n    border-radius: 6px;\n    outline: none;\n    cursor: default;\n    color: var(--text-color);\n    font-size: 1.072rem;\n    position: relative;\n    transform: translateZ(0);\n\n    .react-aria-Button[slot=chevron] {\n      all: unset;\n      display: flex;\n      visibility: hidden;\n      align-items: center;\n      justify-content: center;\n      width: 1.3rem;\n      height: 100%;\n      padding-left: calc((var(--tree-item-level) - 1) * var(--padding));\n\n      svg {\n        rotate: 0deg;\n        transition: rotate 200ms;\n        width: 12px;\n        height: 12px;\n        fill: none;\n        stroke: currentColor;\n        stroke-width: 3px;\n      }\n    }\n\n    &[data-has-child-items] .react-aria-Button[slot=chevron] {\n      visibility: visible;\n    }\n\n    &[data-expanded] .react-aria-Button[slot=chevron] svg {\n      rotate: 90deg;\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n      --focus-ring-color: var(--highlight-foreground);\n\n      &[data-focus-visible] {\n        outline-color: var(--highlight-foreground);\n        outline-offset: -4px;\n      }\n\n      .react-aria-Button {\n        color: var(--highlight-foreground);\n        --highlight-hover: rgb(255 255 255 / 0.1);\n        --highlight-pressed: rgb(255 255 255 / 0.2);\n      }\n    }\n\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n\n    .react-aria-Button:not([slot]) {\n      margin-left: auto;\n      background: transparent;\n      border: none;\n      font-size: 1.2rem;\n      line-height: 1.2em;\n      padding: 0.286rem 0.429rem;\n      transition: background 200ms;\n\n      &[data-hovered] {\n        background: var(--highlight-hover);\n      }\n\n      &[data-pressed] {\n        background: var(--highlight-pressed);\n        box-shadow: none;\n      }\n    }\n  }\n\n  /* join selected items if :has selector is supported */\n  @supports selector(:has(.foo)) {\n    gap: 0;\n\n    .react-aria-TreeItem[data-selected]:has(+ [data-selected]) {\n      border-end-start-radius: 0;\n      border-end-end-radius: 0;\n    }\n\n    .react-aria-TreeItem[data-selected] + [data-selected] {\n      border-start-start-radius: 0;\n      border-start-end-radius: 0;\n    }\n  }\n\n  :where(.react-aria-TreeItem) .react-aria-Checkbox {\n    --selected-color: var(--highlight-foreground);\n    --selected-color-pressed: var(--highlight-foreground-pressed);\n    --checkmark-color: var(--highlight-background);\n    --background-color: var(--highlight-background);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required RadioGroup Validation in React (TSX)\nDESCRIPTION: Demonstrates how to make a RadioGroup required using the `isRequired` prop within a React Aria Form. It also shows the placement of the `FieldError` component to display validation messages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <RadioGroup name=\"pet\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Favorite pet</Label>\n    <Radio value=\"dogs\">Dog</Radio>\n    <Radio value=\"cats\">Cat</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n  </RadioGroup>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Focus Management for Form Validation in React Aria\nDESCRIPTION: Example showing how to manage focus when form validation fails by overriding the default behavior and focusing on an alert element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isInvalid, setInvalid] = React.useState(false);\n\n  return (\n    <Form\n      /*- begin highlight -*/\n      onInvalid={e => {\n        e.preventDefault();\n        setInvalid(true);\n      }}\n      /*- end highlight -*/\n      onSubmit={e => {\n        e.preventDefault();\n        setInvalid(false);\n      }}\n      onReset={() => setInvalid(false)}>\n      {isInvalid &&\n        /*- begin highlight -*/\n        <div role=\"alert\" tabIndex={-1} ref={e => e?.focus()}>\n        {/*- end highlight -*/}\n          <h3>Unable to submit</h3>\n          <p>Please fix the validation errors below, and re-submit the form.</p>\n        </div>\n      }\n      <TextField name=\"firstName\" isRequired>\n        <Label>First Name</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <TextField name=\"lastName\" isRequired>\n        <Label>Last Name</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <div style={{display: 'flex', gap: 8}}>\n        <Button type=\"submit\">Submit</Button>\n        <Button type=\"reset\">Reset</Button>\n      </div>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Select Options Asynchronously using useAsyncList in TSX\nDESCRIPTION: This example demonstrates asynchronous data loading for a `Select` component using the `useAsyncList` hook from `@react-stately/data`. The `load` function within `useAsyncList` fetches data from the PokeAPI. The fetched items (`list.items`) are then passed to the `Select` component's `items` prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {useAsyncList} from '@react-stately/data';\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://pokeapi.co/api/v2/pokemon`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <Select label=\"Pick a Pokemon\" items={list.items} selectionMode=\"single\">\n      {(item) => <Item key={item.name}>{item.name}</Item>}\n    </Select>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Combining ColorEditor with ColorSwatchPicker and Swatches (TypeScript/TSX)\nDESCRIPTION: This snippet combines a ColorEditor with a ColorSwatchPicker, which provides a palette of pre-defined colors via ColorSwatch children. Flex is used for column layout with spacing. Swatch colors are specified via the color prop. Useful for applications where users need to pick from a branded color palette.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatchPicker, ColorSwatch} from '@react-spectrum/color';\n\n<ColorPicker label=\"Color\" defaultValue=\"#A00\">\n  <Flex direction=\"column\" gap=\"size-300\">\n    <ColorEditor />\n    <ColorSwatchPicker>\n      <ColorSwatch color=\"#A00\" />\n      <ColorSwatch color=\"#f80\" />\n      <ColorSwatch color=\"#080\" />\n      <ColorSwatch color=\"#08f\" />\n      <ColorSwatch color=\"#088\" />\n      <ColorSwatch color=\"#008\" />\n    </ColorSwatchPicker>\n  </Flex>\n</ColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable NumberField Wrapper with Label, Description, and Error Handling (TypeScript/JSX)\nDESCRIPTION: This TypeScript React example provides a pattern for wrapping a NumberField and related subcomponents into a reusable MyNumberField component. The wrapper accepts label, description, errorMessage, and all other NumberFieldProps, allowing for consistent rendering of fields with accessibility and validation baked in. It demonstrates generic type extension, custom prop passing, and slot usage. Assumes react-aria-components is installed and used within a React project; outputs a standardized NumberField ready for repeated use.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {NumberFieldProps, ValidationResult} from 'react-aria-components';\\nimport {Text, FieldError} from 'react-aria-components';\\n\\ninterface MyNumberFieldProps extends NumberFieldProps {\\n  label?: string,\\n  description?: string,\\n  errorMessage?: string | ((validation: ValidationResult) => string)\\n}\\n\\nfunction MyNumberField({label, description, errorMessage, ...props}: MyNumberFieldProps) {\\n  return (\\n    <NumberField {...props}>\\n      <Label>{label}</Label>\\n      <Group>\\n        <Button slot=\\\"decrement\\\">-</Button>\\n        <Input />\\n        <Button slot=\\\"increment\\\">+</Button>\\n      </Group>\\n      {description && <Text slot=\\\"description\\\">{description}</Text>}\\n      <FieldError>{errorMessage}</FieldError>\\n    </NumberField>\\n  );\\n}\\n\\n<MyNumberField label=\\\"Cookies\\\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ColorField Wrapper Component\nDESCRIPTION: Demonstrates how to create a reusable wrapper component for ColorField that encapsulates the DOM structure, styling, and logic in one place for consistent reuse.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport type {ColorFieldProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyColorFieldProps extends ColorFieldProps {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nexport function MyColorField({label, description, errorMessage, ...props}: MyColorFieldProps) {\n  return (\n    <ColorField {...props}>\n      {label && <Label>{label}</Label>}\n      <Input />\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </ColorField>\n  );\n}\n\n<MyColorField label=\"Color\" />\n```\n\n----------------------------------------\n\nTITLE: Testing React Spectrum TableView Row Selection with Test Utils (ts)\nDESCRIPTION: This TypeScript snippet demonstrates how to test interactions within a React Spectrum TableView component using `@react-spectrum/test-utils`. It shows the setup required, including importing necessary functions from testing libraries, creating a test `User` instance, rendering the `TableView` within a `Provider`, and using the `TableTester` utility to simulate and assert row selection behavior (toggle all, toggle individual row). Requires Jest or a similar testing framework for mocks and assertions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_38\n\nLANGUAGE: ts\nCODE:\n```\n// TableView.test.ts\nimport {render, within} from '@testing-library/react';\nimport {theme} from '@react-spectrum/theme-default';\nimport {User} from '@react-spectrum/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse', advanceTimer: jest.advanceTimersByTime});\n// Other setup, be sure to check out the suggested mocks mentioned above in https://react-spectrum.adobe.com/react-spectrum/TableView.html#testing\n\nit('TableView can toggle row selection', async function () {\n  // Render your test component/app and initialize the table tester\n  let {getByTestId} = render(\n    <Provider theme={defaultTheme}>\n      <TableView data-testid=\"test-table\" selectionMode=\"multiple\">\n      ...\n      </TableView>\n    </Provider>\n  );\n  let tableTester = testUtilUser.createTester('Table', {root: getByTestId('test-table')});\n  expect(tableTester.selectedRows).toHaveLength(0);\n\n  await tableTester.toggleSelectAll();\n  expect(tableTester.selectedRows).toHaveLength(10);\n\n  await tableTester.toggleRowSelection({row: 2});\n  expect(tableTester.selectedRows).toHaveLength(9);\n  let checkbox = within(tableTester.rows[2]).getByRole('checkbox');\n  expect(checkbox).not.toBeChecked();\n\n  await tableTester.toggleSelectAll();\n  expect(tableTester.selectedRows).toHaveLength(10);\n  expect(checkbox).toBeChecked();\n\n  await tableTester.toggleSelectAll();\n  expect(tableTester.selectedRows).toHaveLength(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API for TableHeader in JSX\nDESCRIPTION: Uses the `FunctionAPI` component to render the detailed API documentation for the `TableHeader` type or component associated with the table state. It receives the specific API definition (`docs.exports.TableHeader`) and related documentation links (`docs.links`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.TableHeader} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Tabs with React Router via RouterProvider (TypeScript)\nDESCRIPTION: Shows how to sync selectedKey of Tabs to the current URL using React Router, and how to render tab content based on routing. Key dependencies: react-router-dom, @adobe/react-spectrum. The Tabs component uses pathname as its selectedKey, and Item elements have corresponding paths as keys and hrefs. Inputs: BrowserRouter+Routes data; Outputs: routed tab panels and synchronized tab state. Limitations: expects all paths to be managed by the router.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useLocation, useNavigate, BrowserRouter, Routes, Route, Outlet} from 'react-router-dom';\\nimport {RouterProvider} from '@adobe/react-spectrum';\\n\\nfunction AppTabs() {\\n  let {pathname} = useLocation();\\n\\n  return (\\n    <Tabs selectedKey={pathname}>\\n      <TabList aria-label=\"Tabs\">\\n        <Item key=\"/\" href=\"/\">Home</Item>\\n        <Item key=\"/shared\" href=\"/shared\">Shared</Item>\\n        <Item key=\"/deleted\" href=\"/deleted\">Deleted</Item>\\n      </TabList>\\n      <TabPanels>\\n        <Item key=\"/\">\\u003COutlet /></Item>\\n        <Item key=\"/shared\">\\u003COutlet /></Item>\\n        <Item key=\"/deleted\">\\u003COutlet /></Item>\\n      </TabPanels>\\n    </Tabs>\\n  );\\n}\\n\\nfunction App() {\\n  let navigate = useNavigate();\\n  return (\\n    <RouterProvider navigate={navigate}>\\n      <Routes>\\n        <Route path=\"/\" element={<AppTabs />}>\\n          <Route index element={<HomePage />} />\\n          <Route path=\"/shared\" element={<SharedPage />} />\\n          <Route path=\"/deleted\" element={<DeletedPage />} />\\n        </Route>\\n      </Routes>\\n    </RouterProvider>\\n  );\\n}\\n\\n<BrowserRouter>\\n  <App />\\n</BrowserRouter>\\n\n```\n\n----------------------------------------\n\nTITLE: Using Icons and Text in ActionGroup Items (TSX)\nDESCRIPTION: Illustrates adding icons alongside text labels within ActionGroup items. Each `Item` contains a Spectrum icon component (e.g., `<Draw />`) and a `<Text>` component wrapping the label. This enhances the visual representation of actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Draw from '@spectrum-icons/workflow/Draw';\nimport Copy from '@spectrum-icons/workflow/Copy';\nimport Delete from '@spectrum-icons/workflow/Delete';\nimport {Text} from '@react-spectrum/text';\n\n<ActionGroup>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Column Resizer Component with React Aria\nDESCRIPTION: A Resizer component that handles column resizing interactions using the useTableColumnResize hook. It supports mouse drag, keyboard, and screen reader interactions for resizing table columns.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTableColumnResize} from '@react-aria/table';\n\nfunction Resizer(props) {\n  let {column, layoutState, onResizeStart, onResize, onResizeEnd} = props;\n  let ref = useRef<HTMLInputElement | null>(null);\n  let {resizerProps, inputProps, isResizing} = useTableColumnResize({\n    column,\n    'aria-label': 'Resizer',\n    onResizeStart,\n    onResize,\n    onResizeEnd\n  }, layoutState, ref);\n  let {focusProps, isFocusVisible} = useFocusRing();\n\n  return (\n    <div\n      role=\"presentation\"\n      className={`aria-table-resizer ${isFocusVisible ? 'focus' : ''} ${isResizing ? 'resizing' : ''}`}\n      {...resizerProps}>\n      <input\n        ref={ref}\n        {...mergeProps(inputProps, focusProps)} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Form Dialog in React Spectrum\nDESCRIPTION: Example of a complex dialog with a form, custom header with an icon, a link, and a footer with a checkbox. Demonstrates how Dialog components can contain rich content beyond simple text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Register</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>\n        <Flex alignItems=\"center\" gap=\"size-100\">\n          <Book size=\"S\" />\n          <Text>\n            Register for newsletter\n          </Text>\n        </Flex>\n      </Heading>\n      <Header>\n        <Link>\n          <a href=\"//example.com\" target=\"_blank\">What is this?</a>\n        </Link>\n      </Header>\n      <Divider />\n      <Content>\n        <Form>\n          <TextField label=\"First Name\" autoFocus />\n          <TextField label=\"Last Name\" />\n          <TextField label=\"Street Address\" />\n          <TextField label=\"City\" />\n        </Form>\n      </Content>\n      <Footer>\n        <Checkbox>\n          I want to receive updates for exclusive offers in my area.\n        </Checkbox>\n      </Footer>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close}>Register</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Side Validation Errors in React Aria Form (TSX)\nDESCRIPTION: Illustrates integrating server-side validation with a React Aria `Form`. It uses `React.useState` to store validation errors received from a server (simulated by `callServer`). The `validationErrors` prop on the `Form` component is populated with these errors, which are displayed using `FieldError` components within each `TextField`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  /*- begin highlight -*/\n  let [errors, setErrors] = React.useState({});\n  /*- end highlight -*/\n  let onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    let data = Object.fromEntries(new FormData(e.currentTarget));\n    let result = await callServer(data)\n    /*- begin highlight -*/\n    setErrors(result.errors);\n    /*- end highlight -*/\n  };\n\n  return (\n    /*- begin highlight -*/\n    <Form validationErrors={errors} onSubmit={onSubmit}>\n    {/*- end highlight -*/}\n      <TextField name=\"username\" isRequired>\n        <Label>Username</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <TextField name=\"password\" type=\"password\" isRequired>\n        <Label>Password</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n\n// Fake server used in this example.\nfunction callServer(data) {\n  return {\n    errors: {\n      username: 'Sorry, this username is taken.'\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a SelectAllListBox Component with Context Providers in React\nDESCRIPTION: This snippet demonstrates how to create a SelectAllListBox component that manages selection state and passes it to child components using CheckboxContext and ListBoxContext providers. It enables selecting or deselecting all items in a ListBox through a checkbox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_57\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CheckboxContext, ListBoxContext} from 'react-aria-components';\n\nfunction SelectAllListBox({children}) {\n  let [selectedKeys, onSelectionChange] = React.useState<Selection>(new Set());\n  let isSelected = selectedKeys === 'all';\n  let onChange = (isSelected: boolean) => {\n    onSelectionChange(isSelected ? 'all' : new Set());\n  };\n\n  return (\n    <CheckboxContext.Provider value={{isSelected, onChange}}>\n      <ListBoxContext.Provider value={{selectedKeys, onSelectionChange}}>\n        {children}\n      </ListBoxContext.Provider>\n    </CheckboxContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Column Component with Menu for Sorting and Resizing\nDESCRIPTION: This code defines a reusable ResizableTableColumn component that wraps the Column component to include a dropdown menu with sorting and resizing functionality. It uses render props to access startResize and sort functions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem} from 'react-aria-components';\n\ninterface ResizableTableColumnProps<T> extends Omit<ColumnProps, 'children'> {\n  children: React.ReactNode\n}\n\nfunction ResizableTableColumn<T extends object>(props: ResizableTableColumnProps<T>) {\n  return (\n    <Column {...props}>\n      {({startResize, sort, allowsSorting, sortDirection}) => (\n        <div className=\"flex-wrapper\">\n          <MenuTrigger>\n            <Button>{props.children}</Button>\n            <Popover>\n              <Menu onAction={(action) => {\n                if (action === 'sortAscending') {\n                  sort('ascending');\n                } else if (action === 'sortDescending') {\n                  sort('descending');\n                } else if (action === 'resize') {\n                  startResize();\n                }\n              }}>\n                <MenuItem id=\"sortAscending\">Sort Ascending</MenuItem>\n                <MenuItem id=\"sortDescending\">Sort Descending</MenuItem>\n                <MenuItem id=\"resize\">Resize</MenuItem>\n              </Menu>\n            </Popover>\n          </MenuTrigger>\n          {allowsSorting && (\n            <span aria-hidden=\"true\" className=\"sort-indicator\">\n              {sortDirection === 'ascending' ? '▲' : '▼'}\n            </span>\n          )}\n          <ColumnResizer />\n        </div>\n      )}\n    </Column>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Sorting in React Spectrum TableView (TSX)\nDESCRIPTION: Implements asynchronous data loading and client-side sorting for a React Spectrum `TableView`. It utilizes the `useAsyncList` hook from `@adobe/react-stately` to manage data fetching and sorting logic, and `useCollator` from `@adobe/react-spectrum` for locale-aware comparison. Columns are marked sortable with `allowsSorting`, and user interactions trigger the `onSortChange` callback, updating the `sortDescriptor` prop to apply the sort.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {useCollator} from '@adobe/react-spectrum';\n\ninterface Character {\n  name: string,\n  height: number,\n  mass: number,\n  birth_year: number\n}\n\nfunction AsyncSortTable() {\n  let collator = useCollator({numeric: true});\n\n  let list = useAsyncList<Character>({\n    async load({signal}) {\n      let res = await fetch(`https://swapi.py4e.com/api/people/?search`, {signal});\n      let json = await res.json();\n      return {\n        items: json.results\n      };\n    },\n    async sort({items, sortDescriptor}) {\n      return {\n        items: items.sort((a, b) => {\n          let first = a[sortDescriptor.column];\n          let second = b[sortDescriptor.column];\n          let cmp = collator.compare(first, second);\n          if (sortDescriptor.direction === 'descending') {\n            cmp *= -1;\n          }\n          return cmp;\n        })\n      };\n    }\n  });\n\n  return (\n    <TableView aria-label=\"Example table with client side sorting\" sortDescriptor={list.sortDescriptor} onSortChange={list.sort} height=\"size-3000\">\n      <TableHeader>\n        <Column key=\"name\" allowsSorting>Name</Column>\n        <Column key=\"height\" allowsSorting>Height</Column>\n        <Column key=\"mass\" allowsSorting>Mass</Column>\n        <Column key=\"birth_year\" allowsSorting>Birth Year</Column>\n      </TableHeader>\n      <TableBody\n        items={list.items}\n        loadingState={list.loadingState}>\n        {item => (\n          <Row key={item.name}>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Calendar State with Context in React Aria Components\nDESCRIPTION: This snippet demonstrates how to create a custom CalendarValue component that accesses state from a parent Calendar component via context. It uses the CalendarStateContext to obtain the current selected date and format it as a string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarStateContext} from 'react-aria-components';\nimport {useDateFormatter} from 'react-aria';\nimport {getLocalTimeZone} from '@internationalized/date';\n\nfunction CalendarValue() {\n  /*- begin highlight -*/\n  let state = React.useContext(CalendarStateContext)!;\n  /*- end highlight -*/\n  let date = state.value?.toDate(getLocalTimeZone());\n  let {format} = useDateFormatter();\n  let formatted = date ? format(date) : 'None';\n  return `Selected date: ${formatted}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 4-5-4 Calendar System in TSX\nDESCRIPTION: Demonstrates creating a custom fiscal calendar (4-5-4 format) by extending `GregorianCalendar` and passing a factory function to the `createCalendar` prop of `RangeCalendar`. The `Custom454` class overrides methods like `getDaysInMonth`, `fromJulianDay`, and `toJulianDay` to implement the custom date logic. The `firstDayOfWeek` is set to Sunday.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction Example() {\n  return <RangeCalendar firstDayOfWeek=\"sun\" createCalendar={() => new Custom454()} />;\n}\n\nclass Custom454 extends GregorianCalendar {\n  // See @internationalized/date docs linked above...\n  ///- begin collapse -///\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n  getDaysInMonth(date) {\n    return this.weekPattern[date.month - 1] * 7;\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < this.weekPattern.length; months++) {\n      let weeksInMonth = this.weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  getFormattableMonth(date) {\n    let gregorian = toCalendar(date, new GregorianCalendar());\n    return gregorian.set({month: date.month, day: 1});\n  }\n\n  isEqual(other) {\n    return other instanceof Custom454;\n  }\n ///- end collapse -///\n}\n```\n\n----------------------------------------\n\nTITLE: Negative Variant Buttons with Fill and Outline Styles in Spectrum (TypeScript)\nDESCRIPTION: This block provides negative-style Spectrum buttons, rendered as both 'fill' and 'outline', grouped in a flex layout. These variants indicate destructive or cautionary actions. Requires '@react-spectrum/button' and '@react-spectrum/layout'. The 'variant' prop is 'negative', with style options for visual feedback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\\\"size-250\\\">\\n  <Button variant=\\\"negative\\\" style=\\\"fill\\\">Save</Button>\\n  <Button variant=\\\"negative\\\" style=\\\"outline\\\">Save</Button>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing UI Display with Color Picker Events in React Spectrum (TypeScript)\nDESCRIPTION: This example demonstrates how to use the onChange event on a MyColorPicker to update both color state and external textual display of the selected color using HSL format. It relies on React useState for state, parseColor for initial color parsing, and passes the selected color to both the picker and a display element. It expects Color objects with toString method and demonstrates bidirectional UI-to-state synchronization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [value, setValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\\n\\n  return (\\n    <div>\\n      <MyColorPicker\\n        label=\\\"Color\\\"\\n        value={value}\\n        onChange={setValue} />\\n      <p>Selected color: {value.toString('hsl')}</p>\\n    </div>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sections in a ListBox Component\nDESCRIPTION: Shows how to construct sections or groups of items in a ListBox component using the Section component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox>\n  <Section title=\"People\">\n    <Item>David</Item>\n    <Item>Sam</Item>\n    <Item>Jane</Item>\n  </Section>\n  <Section title=\"Animals\">\n    <Item>Aardvark</Item>\n    <Item>Kangaroo</Item>\n    <Item>Snake</Item>\n  </Section>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Form in React Spectrum\nDESCRIPTION: Demonstrates how to create a controlled form using React Spectrum components and React's useState hook for real-time access to form values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, TextField, ButtonGroup, Button} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [name, setName] = React.useState('');\n\n  let onSubmit = (e) => {\n    e.preventDefault();\n\n    // Submit data to your backend API...\n    alert(name);\n  };\n\n  return (\n    <Form onSubmit={onSubmit} maxWidth=\"size-3000\">\n      <TextField label=\"Name\" value={name} onChange={setName} />\n      <div>You entered: {name}</div>\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">Submit</Button>\n        <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting NumberField for Currency in React Spectrum (TSX)\nDESCRIPTION: Illustrates configuring a React Spectrum `NumberField` to display currency values using `formatOptions`. It requires `style: 'currency'`, a `currency` code (e.g., 'EUR'), and allows customization via `currencyDisplay` ('code', 'symbol', 'name') and `currencySign` ('standard', 'accounting'). This example uses EUR currency, displays the code, and uses accounting sign notation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<NumberField\n  label=\"Transaction amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'EUR',\n    currencyDisplay: 'code',\n    currencySign: 'accounting'\n  }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing useFocusWithin Hook in a React Component\nDESCRIPTION: This example demonstrates how to use the useFocusWithin hook in a React component to handle focus within events for a group of input fields. It updates the component's state based on focus changes and logs events.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useFocusWithin.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [events, setEvents] = React.useState([]);\n  let [isFocusWithin, setFocusWithin] = React.useState(false);\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: e => setEvents(\n      events => [...events, 'focus within']\n    ),\n    onBlurWithin: e => setEvents(\n      events => [...events, 'blur within']\n    ),\n    onFocusWithinChange: isFocusWithin => setFocusWithin(isFocusWithin)\n  });\n\n  return (\n    <>\n      <div\n        {...focusWithinProps}\n        style={{\n          display: 'inline-block',\n          border: '1px solid gray',\n          padding: 10,\n          background: isFocusWithin ? 'goldenrod' : '',\n          color: isFocusWithin ? 'black' : ''\n        }}>\n        <label style={{display: 'block'}}>\n          First Name: <input />\n        </label>\n        <label style={{display: 'block'}}>\n          Last Name: <input />\n        </label>\n      </div>\n      <ul\n        style={{\n          maxHeight: '200px',\n          overflow: 'auto'\n        }}>\n        {events.map((e, i) => <li key={i}>{e}</li>)}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Submenus in React Spectrum\nDESCRIPTION: This example demonstrates how to create dynamic submenus using a recursive function in React Spectrum. It allows for flexible and scalable menu structures based on a nested data structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SubmenuTrigger} from '@react-spectrum/menu';\n\nlet items = [\n  {name: 'Copy'},\n  {name: 'Cut'},\n  {name: 'Paste'},\n  {name: 'Share', children: [\n    {name: 'Copy Link'},\n    {name: 'Email', children: [\n      {name: 'Email as Attachment'},\n      {name: 'Email as Link'},\n    ]},\n    {name: 'SMS'},\n  ]},\n  {name: 'Delete'}\n];\n\n<MenuTrigger>\n  <ActionButton>Actions</ActionButton>\n  <Menu items={items}>\n    {function renderSubmenu(item) {\n      if (item.children) {\n        return (\n          <SubmenuTrigger>\n            <Item key={item.name}>{item.name}</Item>\n            <Menu items={item.children}>\n              {(item) => renderSubmenu(item)}\n            </Menu>\n          </SubmenuTrigger>\n        );\n      } else {\n        return <Item key={item.name}>{item.name}</Item>;\n      }\n    }}\n  </Menu>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Requiring Selection of All Items with Individual Checkbox Validation (TypeScript)\nDESCRIPTION: This snippet enforces validation at the individual Checkbox level within a CheckboxGroup by setting the isRequired prop on each Checkbox. The CheckboxGroup is labeled and rendered in a Form with validationBehavior set to 'native', causing the form to require all checkboxes to be selected for successful submission. Suitable for agreements or acceptance scenarios.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationBehavior=\\\"native\\\">\\n  <CheckboxGroup label=\\\"Agree to the following\\\" isRequired>\\n    {/*- begin highlight -*/}\\n    <Checkbox value=\\\"terms\\\" isRequired>Terms and conditions</Checkbox>\\n    <Checkbox value=\\\"privacy\\\" isRequired>Privacy policy</Checkbox>\\n    <Checkbox value=\\\"cookies\\\" isRequired>Cookie policy</Checkbox>\\n    {/*- end highlight -*/}\\n  </CheckboxGroup>\\n  <ButtonGroup>\\n    <Button type=\\\"submit\\\" variant=\\\"primary\\\">Submit</Button>\\n    <Button type=\\\"reset\\\" variant=\\\"secondary\\\">Reset</Button>\\n  </ButtonGroup>\\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Multi-thumb Controlled Slider in React\nDESCRIPTION: Shows how to implement a controlled slider with multiple thumbs using an array of values in React state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState([25, 75]);\n  return (\n    <>\n      <MySlider<number[]>\n        label=\"Range\"\n        thumbLabels={['start', 'end']}\n        value={value}\n        onChange={setValue} />\n      <p>Current value: {value.join(' – ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Resizable Columns in React Spectrum TableView (TSX)\nDESCRIPTION: Illustrates how to enable column resizing functionality in a React Spectrum `TableView`. The `allowsResizing` prop is added to specific `<Column>` components, which makes them user-resizable via a draggable handle. The example also shows how `width`, `minWidth`, and `maxWidth` props interact with resizing by setting initial sizes and defining resize limits.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<TableView\n  aria-label=\"TableView with resizable columns\"\n  maxWidth={320}\n  height={210} >\n  <TableHeader>\n    {/*- begin highlight -*/}\n    <Column key=\"file\" allowsResizing maxWidth={500}>File Name</Column>\n    <Column key=\"size\" width={80}>Size</Column>\n    <Column key=\"date\" allowsResizing minWidth={100}>Date Modified</Column>\n    {/*- end highlight -*/}\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2022-Roadmap-Proposal-Revision-012822-Copy(2)</Cell>\n      <Cell>214 KB</Cell>\n      <Cell>November 27, 2022 at 4:56PM</Cell>\n    </Row>\n    <Row>\n      <Cell>62259692_p0_master1200</Cell>\n      <Cell>120 KB</Cell>\n      <Cell>January 27, 2021 at 1:56AM</Cell>\n    </Row>\n    <Row>\n      <Cell colSpan={3}>Total space: 334 KB</Cell>\n    </Row>\n  </TableBody>\n</TableView>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring React Spectrum ButtonGroup for Single Selection (RadioGroup)\nDESCRIPTION: This JSX snippet demonstrates how to configure a React Spectrum `ButtonGroup` for single selection behavior, akin to a radio group. It sets `selectionMode=\"single\"` and provides an `aria-label` for the group. Each `Button` within the group has a `value` and an `aria-label`. This configuration implements the WAI-ARIA RadioGroup design pattern, ensuring only one button can be selected at a time.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup\n  aria-label=\"Text Alignment\"\n  selectionMode=\"single\">\n  <Button\n    value=\"TextAlignLeft\"\n    aria-label=\"Left\"\n    icon={<TextAlignLeft />} />\n  <Button\n    value=\"TextAlignCenter\"\n    aria-label=\"Center\"\n    icon={<TextAlignCenter />} />\n  <Button\n    value=\"TextAlignRight\"\n    aria-label=\"Right\"\n    icon={<TextAlignRight />} />\n  <Button\n    value=\"TextAlignJustify\"\n    aria-label=\"Justify\"\n    icon={<TextAlignJustify />} />\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Overriding ToggleButtonGroup Styles with Custom className (JSX)\nDESCRIPTION: Demonstrates passing a custom className string to ToggleButtonGroup. Overrides the default className assigned by React Aria and allows the developer to attach custom CSS rules under .my-toggle-group. Input: JSX; requires manual CSS for 'my-toggle-group' and usual React/React Aria setup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButtonGroup className=\"my-toggle-group\">\n  {/* ... */}\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flipping Behavior for Popover Dialogs in React Spectrum\nDESCRIPTION: This example demonstrates the default flipping behavior of DialogTrigger and how to disable it using the 'shouldFlip' prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\" wrap>\n  <DialogTrigger type=\"popover\" placement=\"bottom\">\n    <ActionButton>Default DialogTrigger</ActionButton>\n    <Dialog>\n      <Heading>The Heading</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This is a popover that will flip if it can't fully render below the button.\n        </Text>\n      </Content>\n    </Dialog>\n  </DialogTrigger>\n\n  <DialogTrigger type=\"popover\" placement=\"bottom\" shouldFlip={false}>\n    <ActionButton>DialogTrigger with shouldFlip=false</ActionButton>\n    <Dialog>\n      <Heading>The Heading</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This is a popover that won't flip if it can't fully render below the button.\n        </Text>\n      </Content>\n    </Dialog>\n  </DialogTrigger>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Behavior with ModalContext in React\nDESCRIPTION: Demonstrates creating a custom `KeyboardModalTrigger` component that uses `ModalContext.Provider` to control the visibility (`isOpen`, `onOpenChange`) of a nested `Modal`. It listens for a specific keydown event on the document to trigger the modal, showcasing advanced context-based customization. Depends on `react` and `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ModalContext} from 'react-aria-components';\n\ninterface KeyboardModalTriggerProps {\n  keyboardShortcut: string,\n  children: React.ReactNode\n}\n\nfunction KeyboardModalTrigger(props: KeyboardModalTriggerProps) {\n  let [isOpen, setOpen] = React.useState(false);\n  React.useEffect(() => {\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key === props.keyboardShortcut) {\n        setOpen(true);\n      }\n    };\n\n    document.addEventListener('keydown', onKeyDown);\n    return () => document.removeEventListener('keydown', onKeyDown);\n  }, [props.keyboardShortcut]);\n\n  return (\n    /*- begin highlight -*/\n    <ModalContext.Provider value={{isOpen, onOpenChange: setOpen}}>\n    {/*- end highlight -*/}\n      {props.children}\n    </ModalContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Dialog Component with CSS\nDESCRIPTION: CSS styling for the Dialog component, setting up padding, max-height, overflow behavior, and heading styling. This creates a clean, scrollable dialog with properly formatted title headings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Dialog {\n  outline: none;\n  padding: 30px;\n  max-height: inherit;\n  box-sizing: border-box;\n  overflow: auto;\n\n  .react-aria-Heading[slot=title] {\n    line-height: 1em;\n    margin-top: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Category Tabs Example (tsx)\nDESCRIPTION: This React component demonstrates a complete Tabs implementation using `Tabs`, `TabList`, `Tab`, and `TabPanel` from `react-aria-components`. It defines custom `MyTab` and `MyTabPanel` components for styling with Tailwind CSS utility classes, and an `Article` component to display content within the panels. The example wraps the tabs in a styled container and provides sample content for different tabs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/category-tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Tabs, TabList, Tab, TabPanel, Link} from 'react-aria-components';\nimport type {TabProps, TabPanelProps} from 'react-aria-components';\n\nfunction TabsExample() {\n  return (\n    <div className=\"bg-linear-to-r from-lime-600 to-emerald-600 py-8 px-2 sm:px-8 rounded-lg flex justify-center\">\n      <Tabs className=\"w-full max-w-[300px]\">\n        <TabList aria-label=\"Feeds\" className=\"flex space-x-1 rounded-full bg-green-900/40 bg-clip-padding p-1 border border-solid border-white/30\">\n          <MyTab id=\"blog\">Blog</MyTab>\n          <MyTab id=\"releases\">Releases</MyTab>\n          <MyTab id=\"docs\">Docs</MyTab>\n        </TabList>\n        <MyTabPanel id=\"blog\">\n          <div className=\"flex flex-col\">\n            <Article title=\"Taming the dragon: Accessible drag and drop\" summary=\"We are excited to announce the release of drag and drop support in React Aria and React Spectrum! This includes a suite of hooks for implementing drag and drop interactions, with support for both mouse and touch, as well as full parity for keyboard and screen reader input.\" />\n            <Article title=\"Date and Time Pickers for All\" summary=\"We are very excited to announce the release of the React Aria and React Spectrum date and time picker components! This includes a full suite of fully featured components and hooks including calendars, date and time fields, and range pickers, all with a focus on internationalization and accessibility. It also includes @internationalized/date, a brand new framework-agnostic library for locale-aware date and time manipulation.\" />\n            <Article title=\"Creating an accessible autocomplete experience\" summary=\"After many months of research, development, and testing, we’re excited to announce that the React Spectrum ComboBox component and React Aria useComboBox hook are now available! In this post we'll take a deeper look into some of the challenges we faced when building an accessible and mobile friendly ComboBox.\" />\n          </div>\n        </MyTabPanel>\n        <MyTabPanel id=\"releases\">\n          <div className=\"flex flex-col\">\n            <Article title=\"February 23, 2023 Release\" summary=\"In this release, we have added support for Node ESM to all of our packages. We have also been busy at work on our pre-releases and improving our focus management in collections.\" />\n            <Article title=\"December 16, 2022 Release\" summary=\"It is our last release of the year and we are happy to share a new TableView feature, now in beta. Using the new allowsResizing prop on a Column in TableView gives users the ability to dynamically adjust the width of that column. TableView column resizing supports mouse, keyboard, touch, and screen reader interactions to allow all users to take advantage of a customizable table.\" />\n            <Article title=\"November 15, 2022 Release\" summary=\"We are excited to announce the release of drag and drop support in React Aria and React Spectrum! This includes a suite of hooks for implementing drag and drop interactions. There is also an update to all Spectrum colors, aligning React Spectrum with the latest Spectrum designs. Finally, React Aria includes a new simplified API for overlays such as popovers and modals.\" />\n          </div>\n        </MyTabPanel>\n        <MyTabPanel id=\"docs\">\n          <div className=\"flex flex-col\">\n            <Article title=\"React Stately\" summary=\"A library of React Hooks that provides cross-platform state management for your design system.\" />\n            <Article title=\"React Aria\" summary=\"A library of React Hooks that provides accessible UI primitives for your design system.\" />\n            <Article title=\"React Spectrum\" summary=\"A React implementation of Spectrum, Adobe’s design system.\" />\n          </div>\n        </MyTabPanel>\n      </Tabs>\n    </div>\n  );\n}\n\nfunction MyTab(props: TabProps) {\n  return (\n    <Tab\n      {...props}\n      className={({isSelected}) => `\n        w-full rounded-full py-2.5 font-medium text-[1.1em] text-center cursor-default ring-black outline-hidden transition-colors focus-visible:ring-2\n        ${isSelected ? 'text-emerald-700 bg-white shadow-sm' : 'text-white hover:bg-white/10 pressed:bg-white/10'}\n      `} />\n  );\n}\n\nfunction MyTabPanel(props: TabPanelProps) {\n  return <TabPanel {...props} className=\"mt-2 text-gray-700 font-serif rounded-2xl bg-white p-2 shadow-sm ring-black outline-hidden focus-visible:ring-2\" />;\n}\n\nfunction Article({title, summary}: {title: string, summary: string}) {\n  return (\n    <Link href=\"#\" className=\"p-2 rounded-lg hover:bg-gray-100 pressed:bg-gray-100 text-[inherit] no-underline outline-hidden focus-visible:ring-2 ring-emerald-500\">\n      <h3 className=\"text-base mt-0 mb-0.5 font-semibold overflow-hidden text-ellipsis whitespace-nowrap\">{title}</h3>\n      <p className=\"text-sm m-0 overflow-hidden text-ellipsis line-clamp-2\">{summary}</p>\n    </Link>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Multi-Thumb Range Slider with React Aria Hooks (TypeScript)\nDESCRIPTION: This TypeScript React snippet demonstrates a multi-thumb range slider where two thumbs define a selectable range. It utilizes the same Thumb component and accessibility hooks as the single-thumb version, with differences in state management and output label formatting. Required props include label, maxValue, defaultValue (an array), step, and formatOptions for number formatting. It outputs formatted values for both thumbs and supports formatting as currency when passed style and currency props. Dependencies and accessibility constraints are the same as for the single-thumb slider.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction RangeSlider(props) {\\n  let trackRef = React.useRef(null);\\n\\n  let numberFormatter = useNumberFormatter(props.formatOptions);\\n  let state = useSliderState({...props, numberFormatter});\\n  let {\\n    groupProps,\\n    trackProps,\\n    labelProps,\\n    outputProps\\n  } = useSlider(props, state, trackRef);\\n\\n  return (\\n    <div {...groupProps} className={`slider ${state.orientation}`}>\\n      {props.label &&\\n        <div className=\"label-container\">\\n          <label {...labelProps}>{props.label}</label>\\n          <output {...outputProps}>\\n            {`${state.getThumbValueLabel(0)} - ${state.getThumbValueLabel(1)}`}\\n          </output>\\n        </div>\\n      }\\n      <div {...trackProps} ref={trackRef} className={`track ${state.isDisabled ? 'disabled' : ''}`}>\\n        <Thumb index={0} state={state} trackRef={trackRef} />\\n        <Thumb index={1} state={state} trackRef={trackRef} />\\n      </div>\\n    </div>\\n  );\\n}\\n\\n<RangeSlider\\n  label=\"Price Range\"\\n  formatOptions={{style: 'currency', currency: 'USD'}}\\n  maxValue={500}\\n  defaultValue={[100, 350]}\\n  step={10} />\n```\n\n----------------------------------------\n\nTITLE: Handling onChange and onChangeEnd Events in ColorWheel (TSX)\nDESCRIPTION: Provides an example of capturing color changes using the `onChange` event (triggered continuously during drag) and the `onChangeEnd` event (triggered when dragging stops). Both events receive the current color value as a `Color` object. The example updates separate state variables (`currentValue`, `finalValue`) and displays their HSL string representations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorWheel.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n  let [finalValue, setFinalValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n\n  return (\n    <div>\n      <ColorWheel\n        value={currentValue}\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue}\n      />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Columns Dynamically in React Spectrum TableView (tsx)\nDESCRIPTION: This snippet illustrates how to define nested columns dynamically in a React Spectrum TableView. It uses a `columns` array containing nested objects to define the header structure and a `rows` array for the data. The `TableHeader` maps over the `columns` array using the `columns` prop and a render function, utilizing the `childColumns` prop for nesting. The `TableBody` uses the `items` prop and a render function to generate rows and cells based on the `rows` data and column keys.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ColumnDefinition {\n  name: string,\n  key: string,\n  children?: ColumnDefinition[],\n  isRowHeader?: boolean\n}\n\nlet columns: ColumnDefinition[] = [\n  {name: 'Name', key: 'name', children: [\n    {name: 'First Name', key: 'first', isRowHeader: true},\n    {name: 'Last Name', key: 'last', isRowHeader: true}\n  ]},\n  {name: 'Information', key: 'info', children: [\n    {name: 'Age', key: 'age'},\n    {name: 'Birthday', key: 'birthday'}\n  ]}\n];\n\nlet rows = [\n  {id: 1, first: 'Sam', last: 'Smith', age: 36, birthday: 'May 3'},\n  {id: 2, first: 'Julia', last: 'Jones', age: 24, birthday: 'February 10'},\n  {id: 3, first: 'Peter', last: 'Parker', age: 28, birthday: 'September 7'},\n  {id: 4, first: 'Bruce', last: 'Wayne', age: 32, birthday: 'December 18'}\n];\n\n<TableView aria-label=\"Example table for nested columns\">\n  <TableHeader columns={columns}>\n    {column => (\n      <Column isRowHeader={column.isRowHeader} childColumns={column.children}>\n        {column.name}\n      </Column>\n    )}\n  </TableHeader>\n  <TableBody items={rows}>\n    {item => (\n      <Row>\n        {columnKey => <Cell>{item[columnKey]}</Cell>}\n      </Row>\n    )}\n  </TableBody>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Styling Description Slot in DatePicker - React Aria - CSS\nDESCRIPTION: This CSS snippet targets the description slot within the DatePicker component using the .react-aria-DatePicker selector, reducing the font size for concise help text display. No additional dependencies are required beyond default CSS. This style is specifically intended for adjusting the presentation of help text associated with the DatePicker component and does not alter its functional behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-DatePicker {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Columns Statically in React Spectrum TableView (tsx)\nDESCRIPTION: This snippet demonstrates how to create nested columns (column groups) in a React Spectrum TableView by nesting `<Column>` components within other `<Column>` components inside the `<TableHeader>`. Static `<Row>` and `<Cell>` components populate the `<TableBody>`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n<TableView aria-label=\"Example table for nested columns\">\n  <TableHeader>\n    <Column title=\"Name\">\n      <Column isRowHeader>First Name</Column>\n      <Column isRowHeader>Last Name</Column>\n    </Column>\n    <Column title=\"Information\">\n      <Column>Age</Column>\n      <Column>Birthday</Column>\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>Sam</Cell>\n      <Cell>Smith</Cell>\n      <Cell>36</Cell>\n      <Cell>May 3</Cell>\n    </Row>\n    <Row>\n      <Cell>Julia</Cell>\n      <Cell>Jones</Cell>\n      <Cell>24</Cell>\n      <Cell>February 10</Cell>\n    </Row>\n    <Row>\n      <Cell>Peter</Cell>\n      <Cell>Parker</Cell>\n      <Cell>28</Cell>\n      <Cell>September 7</Cell>\n    </Row>\n    <Row>\n      <Cell>Bruce</Cell>\n      <Cell>Wayne</Cell>\n      <Cell>32</Cell>\n      <Cell>December 18</Cell>\n    </Row>\n  </TableBody>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Implementing Move Operation in React Drag and Drop\nDESCRIPTION: This snippet demonstrates how to handle a move operation in a drag and drop interaction. It uses the useDrag hook and updates the UI based on the dropOperation in the onDragEnd event.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrag.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Draggable() {\n  let [moved, setMoved] = React.useState(false);\n  let {dragProps, isDragging} = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world'\n      }];\n    },\n    onDragEnd(e) {\n      if (e.dropOperation === 'move') {\n        setMoved(true);\n      }\n    }\n  });\n\n  if (moved) {\n    return null;\n  }\n\n  // ...\n  return (\n    <div {...dragProps} role=\"button\" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n      Drag me\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled ColorField with Initial Values React Spectrum TypeScript\nDESCRIPTION: Demonstrates both controlled and uncontrolled usages of ColorField using React state. Uses parseColor from @react-stately/color to parse an initial hex value for the controlled field. Controlled ColorField manages value and onChange via state; uncontrolled field uses defaultValue. Requires React, @react-stately/color, and @react-spectrum/color. Input can be a color string or a Color object; output is the current color value as managed in state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\\n\\nfunction Example() {\\n  let [value, setValue] = React.useState(parseColor('#e73623'));\\n\\n  return (\\n    <Flex gap=\\\"size-150\\\" wrap>\\n      <ColorField\\n        label=\\\"Primary Color (Uncontrolled)\\\"\\n        defaultValue=\\\"#e21\\\" />\\n\\n      <ColorField\\n        label=\\\"Primary Color (Controlled)\\\"\\n        value={value}\\n        onChange={setValue} />\\n    </Flex>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Link Usage Example\nDESCRIPTION: Example of using Link component with an external URL target\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/link/docs/Link.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Link href=\"https://www.imdb.com/title/tt6348138/\" target=\"_blank\">The missing link.</Link>\n```\n\n----------------------------------------\n\nTITLE: Styling TreeItem States with CSS Data Attributes\nDESCRIPTION: Demonstrates how to style different states of a `TreeItem` (e.g., expanded, selected) using CSS selectors targeting data attributes like `[data-expanded]` and `[data-selected]`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-TreeItem[data-expanded] {\n  /* ... */\n}\n\n.react-aria-TreeItem[data-selected] {\n  /* ... */\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing DateRangePicker with ZonedDateTime Value (React Spectrum, TypeScript/JSX)\nDESCRIPTION: This snippet demonstrates how to initialize the DateRangePicker using ZonedDateTime objects as value, parsed via parseZonedDateTime from the @internationalized/date package. This setup ensures that the selected date range explicitly includes time zone information, accommodating daylight saving time and local rules. Required dependencies are React, parseZonedDateTime, and the custom MyDateRangePicker component; the component receives start and end dates in the America/Los_Angeles time zone.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\\n\\n<MyDateRangePicker\\n  label=\\\"Date range\\\"\\n  defaultValue={{\\n    start: parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]'),\\n    end: parseZonedDateTime('2022-11-08T11:15[America/Los_Angeles]')\\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Reorderable ListBox with Drag-and-Drop - React Spectrum - TypeScript\nDESCRIPTION: Implements a reorderable ListBox with full drag-and-drop support using React Spectrum hooks such as useDroppableCollection and useDraggableCollection. The component configures state management for both dragging and dropping, establishes delegates for keyboard and pointer input, and renders a list with reorderable options and drop indicators. Required dependencies include React, @react-stately/dnd, @react-aria/dnd, @react-aria/selection, and supporting hooks such as useListState and useListBox. Core parameters cover item collections, selection behaviors, drag state, and drop state. Outputs a ListBox UI that allows users to reorder items by drag-and-drop; requires a containing application to manage the items, provide getItems callback or items prop, and handle events like onReorder.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useDroppableCollectionState} from '@react-stately/dnd';\\nimport {useDroppableCollection, useDropIndicator, ListDropTargetDelegate} from '@react-aria/dnd';\\nimport {ListKeyboardDelegate} from '@react-aria/selection';\\n\\nfunction ReorderableListBox(props) {\\n  ///- begin collapse -///\\n  // See useListBox docs for more details.\\n  let state = useListState(props);\\n  let ref = React.useRef(null);\\n  let { listBoxProps } = useListBox({\\n    ...props,\\n    shouldSelectOnPressUp: true\\n  }, state, ref);\\n\\n  // Setup drag state for the collection.\\n  let dragState = useDraggableCollectionState({\\n    ...props,\\n    // Collection and selection manager come from list state.\\n    collection: state.collection,\\n    selectionManager: state.selectionManager,\\n    // Provide data for each dragged item. This function could\\n    // also be provided by the user of the component.\\n    getItems: props.getItems || ((keys) => {\\n      return [...keys].map(key => {\\n        let item = state.collection.getItem(key);\\n\\n        return {\\n          'text/plain': item.textValue\\n        };\\n      });\\n    }),\\n  });\\n\\n  useDraggableCollection(props, dragState, ref);\\n  ///- end collapse -///\\n  // ...\\n\\n  ///- begin highlight -///\\n   // Setup react-stately and react-aria hooks for dropping.\\n  let dropState = useDroppableCollectionState({\\n    ...props,\\n    collection: state.collection,\\n    selectionManager: state.selectionManager\\n  });\\n\\n  let {collectionProps} = useDroppableCollection({\\n    ...props,\\n    // Provide drop targets for keyboard and pointer-based drag and drop.\\n    keyboardDelegate: new ListKeyboardDelegate(state.collection, state.disabledKeys, ref),\\n    dropTargetDelegate: new ListDropTargetDelegate(state.collection, ref)\\n  }, dropState, ref);\\n  ///- end highlight -///\\n\\n  return (\\n    /*- begin highlight -*/\\n    <ul\\n      {...mergeProps(listBoxProps, collectionProps)}\\n      /*- end highlight -*/\\n      ref={ref}>\\n      {[...state.collection].map((item) => (\\n        <ReorderableOption\\n          key={item.key}\\n          item={item}\\n          state={state}\\n          dragState={dragState}\\n          /*- begin highlight -*/\\n          dropState={dropState}\\n          /*- end highlight -*/\\n        />\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction ReorderableOption({ item, state, dragState, dropState }) {\\n  ///- begin collapse -///\\n  let ref = React.useRef(null);\\n  let { optionProps } = useOption({key: item.key}, state, ref);\\n  let { isFocusVisible, focusProps } = useFocusRing();\\n\\n  // Register the item as a drag source.\\n  let {dragProps} = useDraggableItem({\\n    key: item.key\\n  }, dragState);\\n  ///- end collapse -///\\n  // ...\\n\\n  return (\\n    <>\\n      {/*- begin highlight -*/}\\n      <DropIndicator\\n        target={{type: 'item', key: item.key, dropPosition: 'before'}}\\n        dropState={dropState} />\\n      {/*- end highlight -*/}\\n      <li\\n        {...mergeProps(optionProps, dragProps, focusProps)}\\n        ref={ref}\\n        className={`option ${isFocusVisible ? 'focus-visible' : ''}`}>\\n        {item.rendered}\\n      </li>\\n      {/*- begin highlight -*/}\\n      {state.collection.getKeyAfter(item.key) == null &&\\n        <DropIndicator\\n          target={{type: 'item', key: item.key, dropPosition: 'after'}}\\n          dropState={dropState} />\\n      }\\n      {/*- end highlight -*/}\\n    </>\\n  );\\n}\\n\\n///- begin highlight -///\\nfunction DropIndicator(props) {\\n  let ref = React.useRef(null);\\n  let {dropIndicatorProps, isHidden, isDropTarget} = useDropIndicator(props, props.dropState, ref);\\n  if (isHidden) {\\n    return null;\\n  }\\n\\n  return (\\n    <li\\n      {...dropIndicatorProps}\\n      role=\"option\"\\n      ref={ref}\\n      className={`drop-indicator ${isDropTarget ? 'drop-target' : ''}`} />\\n  );\\n}\\n///- end highlight -///\n```\n\n----------------------------------------\n\nTITLE: Handling Button Press Events with useButton\nDESCRIPTION: This example demonstrates how to handle various press events (onPressStart, onPressEnd) and display the current pointer type used for interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useButton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [pointerType, setPointerType] = React.useState(null);\n\n  return (\n    <>\n      <Button\n        onPressStart={e => setPointerType(e.pointerType)}\n        onPressEnd={e => setPointerType(null)}>\n        Press me\n      </Button>\n      <p>{pointerType ? `You are pressing the button with a ${pointerType}!` : 'Ready to be pressed.'}</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Root Context and Overflow Truncation - React Spectrum - TypeScript\nDESCRIPTION: This snippet shows how to combine the showRoot prop for keeping the root breadcrumb always visible and demonstrate automatic item overflow/truncation by wrapping Breadcrumbs in a fixed-width View. Several Item elements are included for overflow testing. Dependencies are @react-spectrum/view and @react-spectrum/breadcrumbs. Key parameters are showRoot for root visibility and View's width constraint. Output displays an overflowing Breadcrumbs bar with a persistent root item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n<View overflow=\"hidden\" width=\"200px\">\n  <Breadcrumbs showRoot>\n    <Item key=\"home\">Home</Item>\n    <Item key=\"trendy\">Trendy</Item>\n    <Item key=\"2020 assets\">March 2020 Assets</Item>\n    <Item key=\"winter\">Winter</Item>\n    <Item key=\"holiday\">Holiday</Item>\n  </Breadcrumbs>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Accepting Only Specific File Types with FileTrigger - React Spectrum (TypeScript)\nDESCRIPTION: This example demonstrates restricting file input types by passing the acceptedFileTypes prop to FileTrigger. Only files matching 'image/png' mime type will be selectable. This prop is passed as an array of mime type strings. Dependencies are react-aria-components. Key parameters: acceptedFileTypes (string[]). Inputs are limited to allowed mime types. The output behavior is that only files of specified types can be picked from the native file dialog.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/FileTrigger.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTrigger acceptedFileTypes={[\"image/png\"]}>\n  <Button>Select files</Button>\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Integration with React Tabs\nDESCRIPTION: This example shows how to use tabs as links to different routes in an application using React Router. It demonstrates synchronizing the selected tab with the URL using RouterProvider and selectedKey prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLocation, useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';\nimport {RouterProvider} from 'react-aria-components';\n\nfunction AppTabs() {\n  let {pathname} = useLocation();\n\n  return (\n    <Tabs selectedKey={pathname}>\n      <TabList aria-label=\"Tabs\">\n        <Tab id=\"/\" href=\"/\">Home</Tab>\n        <Tab id=\"/shared\" href=\"/shared\">Shared</Tab>\n        <Tab id=\"/deleted\" href=\"/deleted\">Deleted</Tab>\n      </TabList>\n      <TabPanel id={pathname}>\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/shared\" element={<SharedPage />} />\n          <Route path=\"/deleted\" element={<DeletedPage />} />\n        </Routes>\n      </TabPanel>\n    </Tabs>\n  );\n}\n\nfunction App() {\n  let navigate = useNavigate();\n  return (\n    <RouterProvider navigate={navigate}>\n      <Routes>\n        <Route path=\"/*\" element={<AppTabs />} />\n      </Routes>\n    </RouterProvider>\n  );\n}\n\n<BrowserRouter>\n  <App />\n</BrowserRouter>\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tab[href] {\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Breadcrumbs Class Name in React Aria - JSX\nDESCRIPTION: Shows how to apply a custom class name to the Breadcrumbs component. This overrides the default class name and enables personalized styling directly via the className prop. To use this, React, React Aria, and a stylesheet targeting .my-breadcrumbs should be available. The component accepts all other Breadcrumbs props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumbs className=\"my-breadcrumbs\">\n  {/* ... */}\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Implementing a MenuItem Component with React Aria in TypeScript\nDESCRIPTION: This snippet defines a `MenuItem` component in TypeScript. It utilizes the `useMenuItem` hook from `@react-aria/menu` to get the necessary ARIA props and interaction handling for an individual menu item within a `Menu`. It accepts the `item` data and the shared `state` object (from `useTreeState` in the parent `Menu`) as props. It renders the item content and conditionally displays a checkmark symbol if the item is selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useMenuItem} from '@react-aria/menu';\n\nfunction MenuItem({item, state}) {\n  // Get props for the menu item element\n  let ref = React.useRef(null);\n  let {menuItemProps, isSelected} = useMenuItem({key: item.key}, state, ref);\n\n  return (\n    <li {...menuItemProps} ref={ref}>\n      {item.rendered}\n      {isSelected && <span aria-hidden=\"true\">✅</span>}\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Spectrum ToastContent Component\nDESCRIPTION: Renders the `<ToastContent>` component, which holds the main content (typically title and description) of a `<Toast>`. It accepts standard HTML attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ToastContent>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Reorderable ListBox Example with Data and onReorder - React Spectrum - TypeScript\nDESCRIPTION: Provides an example implementation for rendering a reorderable ListBox by managing its data via useListData and handling item moves with an onReorder callback. Demonstrates how application state can synchronize with drag-and-drop events emitted by ReorderableListBox. Dependencies include @react-stately/data and access to the ReorderableListBox component, and the Item child as a rendering function. Parameters set initial items, define how to move items before/after a target, and bind event handlers. Output is a fully interactive ListBox with reorder functionality; the pattern expects the consumer to persist and update selection and item order.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useListData} from '@react-stately/data';\\n\\nfunction Example() {\\n  let list = useListData({\\n    initialItems: [\\n      {id: 1, name: 'Cat'},\\n      {id: 2, name: 'Dog'},\\n      {id: 3, name: 'Kangaroo'},\\n      {id: 4, name: 'Panda'},\\n      {id: 5, name: 'Snake'}\\n    ]\\n  });\\n\\n  let onReorder = e => {\\n    if (e.target.dropPosition === 'before') {\\n      list.moveBefore(e.target.key, e.keys);\\n    } else if (e.target.dropPosition === 'after') {\\n      list.moveAfter(e.target.key, e.keys);\\n    }\\n  };\\n\\n  return (\\n    <ReorderableListBox\\n      aria-label=\"Favorite animals\"\\n      selectionMode=\"multiple\"\\n      selectionBehavior=\"replace\"\\n      items={list.items}\\n      ///- begin highlight -///\\n      onReorder={onReorder}\\n      ///- end highlight -///\\n    >\\n      {item => <Item>{item.name}</Item>}\\n    </ReorderableListBox>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Spectrum ComboBox using State and Behavior Hooks in JSX\nDESCRIPTION: This JSX snippet shows an example `ComboBox` component built using the proposed React Spectrum architecture. It imports and utilizes `useAutocomplete` for state management and `useComboBox` for behavior and accessibility logic. It then renders the necessary Spectrum UI elements (`Textfield`, `Button`, `AutocompleteMenu`) by spreading the props returned by the hooks onto them. This approach keeps the component itself lean and focused on presentation, relying on hooks for state and behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-architecture.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useAutocomplete} from '@react-state/autocomplete';\nimport {useComboBox} from '@react-aria/combo-box';\nimport {Textfield} from '@react-spectrum/textfield';\nimport {Button} from '@react-spectrum/button';\nimport {AutocompleteMenu} from '@react-spectrum/autocomplete';\n\nfunction ComboBox(props) {\n  let autocomplete = useAutocomplete(props);\n  let {\n    wrapperProps,\n    textfieldProps,\n    buttonProps,\n    menuProps\n  } = useComboBox(props, autocomplete);\n  \n  return (\n    <div {...wrapperProps} className=\"spectrum-InputGroup\">\n      <Textfield\n        {...textfieldProps}\n        className=\"spectrum-InputGroup-field\" />\n      <Button\n        {...buttonProps}\n        variant=\"field\" />\n      <AutocompleteMenu\n        {...menuProps} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the Removable Wrapper for Toggleable TagGroup Edit Mode in TSX\nDESCRIPTION: This example demonstrates how to use the `Removable` component. It wraps a `MyTagGroup` (presumably containing `MyTag` components) and a `ToggleButton`. The `onRemove` prop passed to `Removable` defines the action to take when tags are removed (here, an alert). Clicking the `ToggleButton` will toggle the ability to remove tags within the `MyTagGroup` via the context mechanism established in the `Removable` component. Assumes existence of `Removable`, `MyTagGroup`, and `MyTag` components, depends on `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\n\n<Removable onRemove={ids => alert(`Remove ${[...ids]}`)}>\n  <MyTagGroup label=\"Ice cream flavor\">\n    <MyTag id=\"chocolate\">Chocolate</MyTag>\n    <MyTag id=\"mint\">Mint</MyTag>\n    <MyTag id=\"strawberry\">Strawberry</MyTag>\n    <MyTag id=\"vanilla\">Vanilla</MyTag>\n  </MyTagGroup>\n  <ToggleButton style={{marginTop: '8px'}}>Edit</ToggleButton>\n</Removable>\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker Styling\nDESCRIPTION: CSS styles for the DateRangePicker component including layout, colors, spacing, and interactive states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-DateRangePicker {\n  color: var(--text-color);\n\n  .react-aria-Group {\n    display: flex;\n    align-items: center;\n    width: fit-content;\n    min-width: 220px;\n    max-width: 100%;\n    box-sizing: border-box;\n    overflow: auto;\n    position: relative;\n    padding: 4px 4px 4px 8px;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    background: var(--field-background);\n    white-space: nowrap;\n\n    &[data-pressed] {\n      box-shadow: none;\n      background: var(--highlight-background);\n    }\n\n    &[data-focus-within] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n\n  [slot=start] + span {\n    padding: 0 4px;\n  }\n\n  [slot=end] {\n    margin-right: 2rem;\n    flex: 1;\n  }\n\n  .react-aria-Button {\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n    border: 2px solid var(--field-background);\n    forced-color-adjust: none;\n    border-radius: 4px;\n    border: none;\n    margin-left: auto;\n    width: 1.429rem;\n    height: 1.429rem;\n    padding: 0;\n    font-size: 0.857rem;\n    box-sizing: content-box;\n    flex-shrink: 0;\n    position: sticky;\n    right: 0;\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: 2px;\n    }\n  }\n\n  .react-aria-DateInput {\n    width: unset;\n    min-width: unset;\n    padding: unset;\n    border: unset;\n    outline: unset;\n  }\n}\n\n.react-aria-Popover[data-trigger=DateRangePicker] {\n  max-width: unset;\n}\n```\n\n----------------------------------------\n\nTITLE: Using DateFieldContext for Grouping DateFields in TSX\nDESCRIPTION: This example demonstrates a `FieldGroup` component that groups multiple `DateField`s under a common title and optional error message. It utilizes `DateFieldContext.Provider` to pass context (`isInvalid`, `aria-describedby`) down to all child `DateField` components, ensuring consistent validation state and accessibility linking via `aria-describedby` using a unique ID generated by `useId`. This allows centralized control over the state and accessibility of related date fields.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {DateFieldContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      {/*- begin highlight -*/}\n      <DateFieldContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n      {/*- end highlight -*/}\n        {children}\n      </DateFieldContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Dates\" errorMessage=\"Tickets must go on sale before event.\">\n  <MyDateField label=\"Event date\" defaultValue={parseDate('2023-07-12')} />\n  <MyDateField label=\"Ticket sale date\" defaultValue={parseDate('2023-08-03')} />\n</FieldGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for React Spectrum Card Component\nDESCRIPTION: Defines the TypeScript interfaces for the `Card` component and its related parts: `CardCoverPhoto`, `CardPreview`, `CardBody`, and `CardFooter`. These interfaces specify the expected props, including types for layout (`variant`), size, selection state (`allowsSelection`, `isSelected`), event handlers (`onSelectionChange`), and content elements (`quickActions`, `actionMenu`, `src`, `children`, `title`, `subtitle`, `description`). Requires React types (`ReactElement`, `ReactNode`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Card.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Card {\n  variant?: 'quiet' | 'gallery', // Change to layout names instead?\n  size?: 'L' | 'S',\n  allowsSelection?: boolean,\n  isSelected?: boolean,\n  onSelectionChange?: (isSelected: boolean) => void,\n  quickActions?: ReactElement<QuickActions>,\n  actionMenu?: ReactElement<ActionMenu>\n}\n\ninterface CardCoverPhoto {\n  src: string,\n  children?: ReactNode\n}\n\ninterface CardPreview {\n  children: ReactNode\n}\n\ninterface CardBody {\n  title?: ReactNode,\n  subtitle?: ReactNode,\n  description?: ReactNode\n}\n\ninterface CardFooter {\n  children: ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable and Droppable ListViews with React Spectrum Drag-and-Drop (TypeScript)\nDESCRIPTION: This snippet contains the implementation of draggable and droppable ListView components using React Spectrum's drag-and-drop hooks in TypeScript. It showcases two implementations: DraggableListView, which configures allowed drop operations and drag item data format, and DroppableListView, which filters incoming items, handles different drop positions, and processes dropped item payloads. The example initializes two lists and renders both components side by side with their own list data. Dependencies include @adobe/react-spectrum and @react-spectrum/dnd hooks, as well as supporting Flex and ListView components. Components expect ListData objects and properly setup drag handlers; inputs are lists of items, outputs are interactive lists supporting drag-and-drop. Limitations include that it only supports moving items between lists and custom drag types as defined.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DragAndDropOptions, TextDropItem} from '@react-spectrum/dnd';\nimport type {ListData} from '@adobe/react-spectrum';\nimport {useDragAndDrop} from '@react-spectrum/dnd';\nimport {useListData} from '@adobe/react-spectrum';\n\ninterface Item {\n  name: string,\n  type?: string,\n  childNodes?: Item[]\n}\n\ninterface DndListViewProps extends DragAndDropOptions {\n  list: ListData<Item>\n}\n\nfunction DraggableListView(props: DndListViewProps) {\n  let {list, ...otherProps} = props;\n  /*- begin highlight -*/\n  let {dragAndDropHooks} = useDragAndDrop({\n    // Only allow move operations when dropping items from this list\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) => [...keys].map(key => {\n      let item = list.getItem(key);\n      // Setup the drag types and associated info for each dragged item.\n      return {\n        'custom-app-type': JSON.stringify(item),\n        'text/plain': item.name\n      };\n    }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n    ...otherProps\n  });\n  /*- end highlight -*/\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in drag into list example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      /*- begin highlight -*/\n      dragAndDropHooks={dragAndDropHooks}\n      /*- end highlight -*/\n      items={list.items}>\n      {item => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListView(props: DndListViewProps) {\n  let {list, ...otherProps} = props;\n  /*- begin highlight -*/\n  let {dragAndDropHooks} = useDragAndDrop({\n    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type')))\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type')))\n      );\n      list.append(...processedItems);\n    },\n    ...otherProps\n  });\n  /*- end highlight -*/\n\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in drag into list example\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      /*- begin highlight -*/\n      dragAndDropHooks={dragAndDropHooks}\n      /*- end highlight -*/\n      items={list.items}>\n      {item => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoList() {\n  let sourceList = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop'},\n      {id: '2', type: 'file', name: 'Adobe XD'},\n      {id: '3', type: 'file', name: 'Adobe InDesign'},\n      {id: '4', type: 'file', name: 'Adobe AfterEffects'}\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {id: '5', type: 'file', name: 'Adobe Dreamweaver'},\n      {id: '6', type: 'file', name: 'Adobe Fresco'},\n      {id: '7', type: 'file', name: 'Adobe Connect'},\n      {id: '8', type: 'file', name: 'Adobe Lightroom'}\n    ]\n  });\n\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableListView list={sourceList} />\n      <DroppableListView list={targetList} />\n    </Flex>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Label Position and Alignment in CheckboxGroup (TypeScript)\nDESCRIPTION: This code demonstrates how to use the labelPosition='side' and labelAlign='end' props to control the placement and horizontal alignment of the CheckboxGroup's label relative to its input elements. This supports fine-grained layout control for various form designs and improves readability in left-to-right and right-to-left languages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup label=\\\"Favorite sports\\\" labelPosition=\\\"side\\\" labelAlign=\\\"end\\\">\\n  <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n  <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n  <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: GridList with Disallowed Empty Selection (TypeScript)\nDESCRIPTION: This example demonstrates enforcing at least one selection in a GridList by using the disallowEmptySelection prop alongside selectionMode and defaultSelectedKeys. If the user tries to deselect the only selected row, the action is blocked. Inputs include aria-label, selectionMode, defaultSelectedKeys, and disallowEmptySelection; output is a persistent selection GridList. Dependencies: ExampleList and an underlying GridList with support for these props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleList\\n  aria-label=\"List with disallowed empty selection\"\\n  selectionMode=\"multiple\"\\n  defaultSelectedKeys={[2]}\\n  /*- begin highlight -*/\\n  disallowEmptySelection\\n  /*- end highlight -*/\\n/>\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Separators to React Spectrum Menu\nDESCRIPTION: Demonstrates how to add separators between menu items or sections using the Separator component from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Separator} from 'react-aria-components';\n\n<MyMenuButton label=\"Actions\">\n  <MenuItem>New…</MenuItem>\n  <MenuItem>Open…</MenuItem>\n  <Separator />\n  <MenuItem>Save</MenuItem>\n  <MenuItem>Save as…</MenuItem>\n  <MenuItem>Rename…</MenuItem>\n  <Separator />\n  <MenuItem>Page setup…</MenuItem>\n  <MenuItem>Print…</MenuItem>\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Information Variant AlertDialog in React Spectrum\nDESCRIPTION: Example of an AlertDialog with the information variant, which is used to provide informational messages to users.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>New file</ActionButton>\n  <AlertDialog\n    variant=\"information\"\n    title=\"Connect your account\"\n    primaryActionLabel=\"Continue\"\n    cancelLabel=\"Cancel\">\n    Please connect an existing account to sync any new files.\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic TreeView Contents from Data - React Spectrum - TSX\nDESCRIPTION: Demonstrates a dynamic generation of a TreeView where the hierarchy and labels are produced from a data structure using functional components. The items are iterated using the Collection component, supporting arbitrary nesting via recursive rendering of DynamicTreeItem. Dependencies are React, React Spectrum, and relevant icon packages. The structure emphasizes the 'items' prop, which enables scalable and efficient rendering of large or changing datasets.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype MyItem = {\\n  id: string,\\n  name: string,\\n  icon: JSX.Element,\\n  childItems?: MyItem[]\\n};\\n\\nlet items: MyItem[] = [\\n  {id: 'projects', name: 'Projects', icon: <Folder />, childItems: [\\n    {id: 'project-1', name: 'Project 1', icon: <FileTxt />},\\n    {id: 'project-2', name: 'Project 2', icon: <Folder />, childItems: [\\n      {id: 'document-a', name: 'Document A', icon: <FileTxt />},\\n      {id: 'document-b', name: 'Document B', icon: <FileTxt />},\\n    ]}\\n  ]},\\n  {id: 'reports', name: 'Reports', icon: <Folder />, childItems: [\\n    {id: 'report-1', name: 'Reports 1', icon: <FileTxt />}\\n  ]}\\n];\\n\\nconst DynamicTreeItem = (props) => {\\n  return (\\n    <>\\n      <TreeViewItem id={props.id} textValue={props.name}>\\n        <TreeViewItemContent>\\n          <Text>{props.name}</Text>\\n          {props.icon}\\n        </TreeViewItemContent>\\n        <Collection items={props.childItems}>\\n          {(item: any) => (\\n            <DynamicTreeItem\\n              id={item.id}\\n              icon={item.icon}\\n              childItems={item.childItems}\\n              textValue={item.name}\\n              name={item.name}>\\n              {item.name}\\n            </DynamicTreeItem>\\n          )}\\n        </Collection>\\n      </TreeViewItem>\\n    </>\\n  );\\n};\\n\\nfunction ExampleTree(props) {\\n  return (\\n    <TreeView aria-label=\\\"Example tree with dynamic content\\\" height=\\\"size-3000\\\" maxWidth=\\\"size-6000\\\" items={items} {...props}>\\n      {(item: MyItem) => (\\n        <DynamicTreeItem\\n          id={item.id}\\n          icon={item.icon}\\n          childItems={item.childItems}\\n          textValue={item.name}\\n          name={item.name} />\\n      )}\\n    </TreeView>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Items in ListBox with Icons and Descriptions\nDESCRIPTION: This example demonstrates how to add complex items to ListBox, including icons, avatars, and descriptions. It shows the usage of the slot prop for descriptions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox width=\"size-2400\" aria-label=\"Options\" selectionMode=\"single\">\n  <Section title=\"Permission\">\n    <Item textValue=\"Read\">\n      <Book size=\"S\" />\n      <Text>Read</Text>\n      <Text slot=\"description\">Read Only</Text>\n    </Item>\n    <Item textValue=\"Write\">\n      <Draw size=\"S\" />\n      <Text>Write</Text>\n      <Text slot=\"description\">Read and Write Only</Text>\n    </Item>\n    <Item textValue=\"Admin\">\n      <BulkEditUsers size=\"S\" />\n      <Text>Admin</Text>\n      <Text slot=\"description\">Full access</Text>\n    </Item>\n  </Section>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Plugins for Aria and Animation (CSS)\nDESCRIPTION: This CSS snippet shows how to import and activate necessary Tailwind CSS plugins to enable styling for React Aria components and animation utilities. Dependencies include the core Tailwind CSS library, 'tailwindcss-react-aria-components' for UI primitives, and 'tailwindcss-animate' for animation classes. This configuration should be placed in your main stylesheet when using Tailwind v4, ensuring all plugin utilities are included in compiled CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/action-menu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ListBox Wrapper Component - React Aria - TypeScript\nDESCRIPTION: This TypeScript/JSX snippet defines a reusable wrapper (MyListBox) and item (MyItem) for ListBox, allowing easy className customization and state-based styling using function props. This pattern centralizes DOM and logic for consistency across the app. Requires react-aria-components and TypeScript/React setup. Takes standard ListBoxProps and ListBoxItemProps; renders a ListBox with consistently-styled, state-aware items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {ListBoxProps, ListBoxItemProps} from 'react-aria-components';\\n\\nfunction MyListBox<T extends object>({children, ...props}: ListBoxProps<T>) {\\n  return (\\n    <ListBox {...props} className=\"my-listbox\">\\n      {children}\\n    </ListBox>\\n  );\\n}\\n\\nfunction MyItem(props: ListBoxItemProps) {\\n  return <ListBoxItem {...props} className={({isFocusVisible, isSelected}) => `my-item ${isFocusVisible ? 'focused' : ''} ${isSelected ? 'selected' : ''}`} />\\n}\\n\\n<MyListBox aria-label=\"Ice cream flavor\" selectionMode=\"single\">\\n  <MyItem>Chocolate</MyItem>\\n  <MyItem>Mint</MyItem>\\n  <MyItem>Strawberry</MyItem>\\n  <MyItem>Vanilla</MyItem>\\n</MyListBox>\\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Row Actions Directly to Table Rows - TypeScript/React\nDESCRIPTION: This snippet defines a static table using the Table, Column, and MyRow components, where each MyRow has an inline onAction callback to show an alert identifying the selected Pokemon. Both table-level and row-level actions are supported, and actions set on the row are triggered when the row is activated. This approach is especially convenient for static collections or simple navigation use cases. Prerequisites include React, TypeScript, and relevant table subcomponents.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Table with onAction applied on the rows directly\" selectionMode=\"multiple\">\n  <MyTableHeader>\n    <Column isRowHeader>Name</Column>\n    <Column>Type</Column>\n    <Column>Level</Column>\n  </MyTableHeader>\n  <TableBody>\n    {/*- begin highlight -*/}\n    <MyRow onAction={() => alert(`Opening Charizard`)}>\n    {/*- end highlight -*/}\n      <Cell>Charizard</Cell>\n      <Cell>Fire, Flying</Cell>\n      <Cell>67</Cell>\n    </MyRow>\n    {/*- begin highlight -*/}\n    <MyRow onAction={() => alert(`Opening Blastoise`)}>\n    {/*- end highlight -*/}\n      <Cell>Blastoise</Cell>\n      <Cell>Water</Cell>\n      <Cell>56</Cell>\n    </MyRow>\n    {/*- begin highlight -*/}\n    <MyRow onAction={() => alert(`Opening Venusaur`)}>\n    {/*- end highlight -*/}\n      <Cell>Venusaur</Cell>\n      <Cell>Grass, Poison</Cell>\n      <Cell>83</Cell>\n    </MyRow>\n    {/*- begin highlight -*/}\n    <MyRow onAction={() => alert(`Opening Pikachu`)}>\n    {/*- end highlight -*/}\n      <Cell>Pikachu</Cell>\n      <Cell>Electric</Cell>\n      <Cell>100</Cell>\n    </MyRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Controlling Column Resizing in Table - React Spectrum (TypeScript)\nDESCRIPTION: This TypeScript/React example implements column resizing in a Table by wrapping it with ResizableTableContainer and using ColumnResizer elements. It demonstrates setting controlled (width), uncontrolled (defaultWidth), and constraint (minWidth, maxWidth) sizing props on columns, while also rendering column headers with a focusable span for accessibility. React Spectrum and react-aria-components are required dependencies. Inputs include data describing rows; outputs are a table with resizable, accessible columns. The approach ensures keyboard, mouse, and screen reader users can resize columns. Limitations include dependence on JavaScript sizing and a fixed container width.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ResizableTableContainer, ColumnResizer} from 'react-aria-components';\n\n<ResizableTableContainer>\n  <Table aria-label=\"Table with resizable columns\">\n    <TableHeader>\n      {/*- begin highlight -*/}\n      <Column id=\"file\" isRowHeader maxWidth={500}>\n        <div className=\"flex-wrapper\">\n          <span tabIndex={-1} className=\"column-name\">File Name</span>\n          <ColumnResizer />\n        </div>\n      </Column>\n      <Column id=\"size\" width={80}>Size</Column>\n      <Column id=\"date\" minWidth={100}>\n        <div className=\"flex-wrapper\">\n          <span tabIndex={-1} className=\"column-name\">Date Modified</span>\n          <ColumnResizer />\n        </div>\n      </Column>\n      {/*- end highlight -*/}\n    </TableHeader>\n    <TableBody>\n      <Row>\n        <Cell>2022-Roadmap-Proposal-Revision-012822-Copy(2)</Cell>\n        <Cell>214 KB</Cell>\n        <Cell>November 27, 2022 at 4:56PM</Cell>\n      </Row>\n      <Row>\n        <Cell>62259692_p0_master1200</Cell>\n        <Cell>120 KB</Cell>\n        <Cell>January 27, 2021 at 1:56AM</Cell>\n      </Row>\n    </TableBody>\n  </Table>\n</ResizableTableContainer>\n\n```\n\n----------------------------------------\n\nTITLE: TextField Validation with FieldError in Form - React Aria - TypeScript/TSX\nDESCRIPTION: Integrates TextField in a Form with FieldError for validation. Demonstrates native HTML validation (isRequired, type=\"email\") as well as error display. Requires react-aria-components and Form, FieldError, Button components. The example also shows where validation/error UI is rendered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\\n\\n<Form>\\n  {/*- begin highlight -*/}\\n  <TextField name=\"email\" type=\"email\" isRequired>\\n  {/*- end highlight -*/}\\n    <Label>Email</Label>\\n    <Input />\\n    {/*- begin highlight -*/}\\n    <FieldError />\\n    {/*- end highlight -*/}\\n  </TextField>\\n  <Button type=\"submit\">Submit</Button>\\n</Form>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizableTableColumnHeader Component with React Aria\nDESCRIPTION: This component extends a typical table header to support column resizing functionality. It applies computed column widths and conditionally renders a Resizer component for columns that allow resizing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\n// Reuse the Button from your component library. See below for details.\nimport {Button} from 'your-component-library';\n\nfunction ResizableTableColumnHeader({column, state, layoutState, onResizeStart, onResize, onResizeEnd}) {\n  let allowsResizing = column.props.allowsResizing;\n  let ref = useRef<HTMLTableCellElement | null>(null);\n  let {columnHeaderProps} = useTableColumnHeader({node: column}, state, ref);\n\n  return (\n    <th\n      {...columnHeaderProps}\n      className=\"aria-table-headerCell\"\n      style={{width: layoutState.getColumnWidth(column.key)}}\n      ref={ref}>\n      <div style={{display: 'flex', position: 'relative'}}>\n        <Button className=\"aria-table-headerTitle\">\n          {column.rendered}\n        </Button>\n        {allowsResizing &&\n          <Resizer column={column} layoutState={layoutState} onResizeStart={onResizeStart} onResize={onResize} onResizeEnd={onResizeEnd} />\n        }\n      </div>\n    </th>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Sectioned Menu in React Spectrum\nDESCRIPTION: Shows how to create a menu with dynamic sections using hierarchical data. It demonstrates the use of the Collection component to render child items within sections.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\nimport {Collection} from 'react-aria-components';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set([1,3]));\n  let openWindows = [\n    {\n      name: 'Left Panel',\n      id: 'left',\n      children: [\n        {id: 1, name: 'Final Copy (1)'}\n      ]\n    },\n    {\n      name: 'Right Panel',\n      id: 'right',\n      children: [\n        {id: 2, name: 'index.ts'},\n        {id: 3, name: 'package.json'},\n        {id: 4, name: 'license.txt'}\n      ]\n    }\n  ];\n\n  return (\n    <MyMenuButton\n      label=\"Window\"\n      items={openWindows}\n      selectionMode=\"multiple\"\n      selectedKeys={selected}\n      onSelectionChange={setSelected}>\n      {section => (\n        <MenuSection>\n          <Header>{section.name}</Header>\n          <Collection items={section.children}>\n            {item => <MenuItem>{item.name}</MenuItem>}\n          </Collection>\n        </MenuSection>\n      )}\n    </MyMenuButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Single Selection Menu Implementation\nDESCRIPTION: Example of a menu with single selection mode and controlled selection state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['middle']));\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton>\n          Align\n        </ActionButton>\n        <Menu selectionMode=\"single\" selectedKeys={selected} onSelectionChange={setSelected}>\n          <Item key=\"left\">Left</Item>\n          <Item key=\"middle\">Middle</Item>\n          <Item key=\"right\">Right</Item>\n        </Menu>\n      </MenuTrigger>\n      <p>Current selection (controlled): {[...selected]}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled DateRangePicker\nDESCRIPTION: Shows how to implement both controlled and uncontrolled DateRangePicker components, using parseDate from the @internationalized/date package to create date objects.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-08')\n  });\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateRangePicker\n        label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-08')\n        }} />\n      <DateRangePicker\n        label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label using useContextProps Hook (TSX)\nDESCRIPTION: Defines `MyCustomLabel`, a custom label component that integrates with React Aria Components. It uses the `useContextProps` hook to merge its own props and ref with any props and ref provided via `LabelContext` from a parent component (e.g., `TextField`). This ensures compatibility and correct behavior within React Aria patterns.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef(\n  (props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n    // Merge the local props and ref with the ones provided via context.\n    /*- begin highlight -*/\n    [props, ref] = useContextProps(props, ref, LabelContext);\n    /*- end highlight -*/\n\n    // ... your existing Label component\n    return <label {...props} ref={ref} />;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Framer Motion Wrappers for React Aria Overlays - TypeScript/TSX\nDESCRIPTION: This snippet shows how to create Framer Motion-wrapped versions of the Modal and ModalOverlay React Aria components. By passing Modal and ModalOverlay to the framer-motion motion() function, you can add Framer Motion's animation props and hooks. Required dependencies: react-aria-components and framer-motion libraries in your React TypeScript project. Inputs are React Aria Modal components; outputs are enhanced motion-capable components ready for animation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Modal, ModalOverlay} from 'react-aria-components';\nimport {motion} from 'framer-motion';\n\n// Create Framer Motion wrappers.\nconst MotionModal = motion(Modal);\nconst MotionModalOverlay = motion(ModalOverlay);\n```\n\n----------------------------------------\n\nTITLE: Editing Color Channels with Multiple ColorFields React Spectrum TypeScript\nDESCRIPTION: Illustrates advanced usage where multiple ColorField components allow editing of individual HSL color channels (hue, saturation, lightness). Utilizes React state and parseColor for color management. Each ColorField is configured with codeSpace and channel props. Updates to any channel refresh the displayed color value below. Requires React and @react-stately/color.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [color, setColor] = React.useState(parseColor('#7f007f'));\\n  return (\\n    <>\\n      <div style={{display: 'flex', gap: 8}}>\\n        <ColorField label=\\\"Hue\\\" value={color} onChange={setColor} colorSpace=\\\"hsl\\\" channel=\\\"hue\\\" />\\n        <ColorField label=\\\"Saturation\\\" value={color} onChange={setColor} colorSpace=\\\"hsl\\\" channel=\\\"saturation\\\" />\\n        <ColorField label=\\\"Lightness\\\" value={color} onChange={setColor} colorSpace=\\\"hsl\\\" channel=\\\"lightness\\\" />\\n      </div>\\n      <p>Current color value: {color?.toString('hex')}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Aria Hook from Individual Package (TSX)\nDESCRIPTION: Shows how to import the `useButton` hook from its individual package `@react-aria/button`. This corresponds to the individual package installation method.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/hooks.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Individual packages\nimport {useButton} from '@react-aria/button';\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Dialog in React Spectrum\nDESCRIPTION: This snippet shows how to create a modal dialog using DialogTrigger and Dialog components. It includes a button to trigger the modal and the content of the dialog.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger isDismissable type=\"modal\">\n  <ActionButton>Trigger Modal</ActionButton>\n  <Dialog>\n    <Heading>Modal</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a modal.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Inserting Items After Specific Item - useListData Hook - TypeScript\nDESCRIPTION: Demonstrates inserting one or more items after a specific item key in the list using insertAfter. This updates the list data immutably, ensuring reactivity in the UI. The function receives the existing key and the item(s) to add, returning the new state with items placed after the referenced element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Insert an item after another item\nlist.insertAfter('Kangaroo', {name: 'Horse'});\n\n// Insert multiple items after another item\nlist.insertAfter('Kangaroo', {name: 'Horse'}, {name: 'Giraffe'});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu to Open on Long Press - React Spectrum - TypeScript\nDESCRIPTION: Configures MenuTrigger to open only upon long-pressing the trigger button or by using keyboard shortcuts with Option/Alt and arrow keys. Typical use case is when the trigger element performs a default action on tap and a contextual menu should only appear after a long press. No additional dependencies beyond React Aria components. The output is a context menu that opens only after a sustained interaction on the trigger.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n<MenuTrigger trigger=\"longPress\">\n  <Button onPress={() => alert('crop')}>Crop</Button>\n  <Popover>\n    <Menu>\n      <MenuItem>Rotate</MenuItem>\n      <MenuItem>Slice</MenuItem>\n      <MenuItem>Clone stamp</MenuItem>\n    </Menu>\n  </Popover>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Component using useButton Hook in TSX\nDESCRIPTION: This snippet defines a functional `Button` component in TSX. It utilizes the `useButton` hook from `@react-aria/button` to apply accessibility props and event handlers to a standard HTML button element. The component accepts props, including a `buttonRef`, `style`, and `children`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = props.buttonRef;\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref} style={props.style}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing ZonedDateTime Objects - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates how to compare two ZonedDateTime instances using the compare method to determine chronological order. Requires parseZonedDateTime to instantiate the dates. Output is a number indicating comparison result.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nlet a = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\nlet b = parseZonedDateTime('2022-03-04T09:45[America/Los_Angeles]');\n\na.compare(b) < 0; // true\nb.compare(a) > 0; // true\n```\n\n----------------------------------------\n\nTITLE: Sample User Data Setup for ComboBox\nDESCRIPTION: Defines an array of user objects with id, avatar URL, name, and username properties. This sample data is used to populate the ComboBox dropdown options in the example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/user-combobox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst people = [\n  {\n    id: 1,\n    avatar:\n      \"https://images.unsplash.com/photo-1599566150163-29194dcaad36?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Gilberto Miguel\",\n    username: \"@gilberto_miguel\"\n  },\n  {\n    id: 2,\n    avatar:\n      \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Maia Pettegree\",\n    username: \"@mpettegree\"\n  },\n  {\n    id: 3,\n    avatar:\n      \"https://images.unsplash.com/photo-1531427186611-ecfd6d936c79?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Wade Redington\",\n    username: \"@redington\"\n  },\n  {\n    id: 4,\n    avatar:\n      \"https://images.unsplash.com/photo-1528763380143-65b3ac89a3ff?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Kurtis Gurrado\",\n    username: \"@kurtis\"\n  },\n  {\n    id: 5,\n    avatar:\n      \"https://images.unsplash.com/photo-1569913486515-b74bf7751574?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Sonja Balmann\",\n    username: \"@sbalmann\"\n  },\n  {\n    id: 6,\n    avatar:\n      \"https://images.unsplash.com/photo-1570295999919-56ceb5ecca61?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Brent Mickelwright\",\n    username: \"@brent_m\"\n  },\n  {\n    id: 7,\n    avatar:\n      \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80\",\n    name: \"Charles Webb\",\n    username: \"@cwebb\"\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: TextArea with Form Validation in React Spectrum\nDESCRIPTION: Shows how to use TextArea with form validation, including required fields and minimum length constraints.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextArea label=\"Comment\" name=\"comment\" isRequired minLength={10} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Handling Selection and Input Events in ComboBox\nDESCRIPTION: This example demonstrates handling selection and input events in a ComboBox. It uses onSelectionChange for tracking selected items and onInputChange for monitoring text input changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  let [value, setValue] = React.useState('');\n  let [majorId, setMajorId] = React.useState('');\n\n  let onSelectionChange = (id) => {\n    setMajorId(id);\n  };\n\n  let onInputChange = (value) => {\n    setValue(value)\n  };\n\n  return (\n    <>\n      <p>Current selected major id: {majorId}</p>\n      <p>Current input text: {value}</p>\n      <ComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={options}\n        selectedKey={majorId}\n        onSelectionChange={onSelectionChange}\n        onInputChange={onInputChange}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Stepper Component with React Aria Context Providers\nDESCRIPTION: Demonstration of creating a custom Stepper component using React Aria's context providers. The example shows how to build compositional APIs similar to React Aria's built-in components using ButtonContext and TextContext.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// A Stepper component with customizable buttons.\nfunction Stepper({children}) {\n  let [value, setValue] = useState(0);\n\n  return (\n    <ButtonContext.Provider value={{\n      slots: {\n        decrement: {onPress: () => setValue(value - 1)},\n        increment: {onPress: () => setValue(value + 1)}\n      }\n    }}>\n      <TextContext.Provider value={{children: value}}>\n        {children}\n      </TextContext.Provider>\n    </ButtonContext.Provider>\n  );\n}\n\n<Stepper>\n  <Button slot=\"decrement\">-</Button>\n  <Text />\n  <Button slot=\"increment\">+</Button>\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Forcing 24-hour Time Format in DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Overrides the default time format by setting hourCycle={24}, ensuring the DatePicker uses the 24-hour convention regardless of locale. Requires only granularity and hourCycle props; applicable for specialized business or international use cases.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_28\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker\\n  label=\\\"Appointment time\\\"\\n  granularity=\\\"minute\\\"\\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Initializing an RGBA Color Picker with React Spectrum ColorSlider\nDESCRIPTION: This React functional component demonstrates how to create an RGBA color picker using four instances of a custom `MyColorSlider` component. It initializes the color state using `parseColor` with a hex value and binds each slider to a specific channel (red, green, blue, alpha) of the shared color state, ensuring all sliders update simultaneously.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#ff00ff'));\n\n  return (\n    <>\n      <MyColorSlider channel=\"red\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"green\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"blue\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling the Open State of a Select Component in TSX\nDESCRIPTION: This example illustrates how to control the visibility of the Select component's popover (its open/closed state). It uses `React.useState` to manage the `open` state. The `isOpen` prop binds the popover's visibility to the state variable, and the `onOpenChange` prop updates the state when the popover's open state changes (e.g., user clicks the trigger or selects an item).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <p>Select is {open ? 'open' : 'closed'}</p>\n      <Select label=\"Choose frequency\" isOpen={open} onOpenChange={setOpen}>\n        <Item key=\"rarely\">Rarely</Item>\n        <Item key=\"sometimes\">Sometimes</Item>\n        <Item key=\"always\">Always</Item>\n      </Select>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Events and Formatting with DatePicker\nDESCRIPTION: This example demonstrates using the onChange event handler with DatePicker to update and format the selected date in the user's locale and time zone using the useDateFormatter hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <DatePicker label=\"Birth date\" value={date} onChange={setDate} />\n      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Controlled and Uncontrolled DateField Values - React Spectrum - TypeScript/TSX\nDESCRIPTION: This example showcases controlled and uncontrolled usage modes for the DateField component in React Spectrum. It utilizes the parseDate utility from @internationalized/date to generate a CalendarDate object and React state to manage controlled value updates. Two DateFields are displayed in a Flex container: one with a defaultValue prop (uncontrolled) and one tied to component state via value and onChange (controlled). This approach demonstrates how to handle form state for date inputs, and the need to import both React and date manipulation utilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateField\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <DateField\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Toast Queue in React Spectrum\nDESCRIPTION: Demonstrates how to create a global toast queue outside the React tree using ToastQueue and useToastQueue. This approach allows toasts to be queued from anywhere in the application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToastQueue, useToastQueue} from '@react-stately/toast';\nimport {createPortal} from 'react-dom';\n\n// Create a global toast queue.\nconst toastQueue = new ToastQueue({\n  maxVisibleToasts: 5\n});\n\nfunction GlobalToastRegion(props) {\n  // Subscribe to it.\n  let state = useToastQueue(toastQueue);\n\n  // Render toast region.\n  return state.visibleToasts.length > 0\n    ? createPortal(<ToastRegion {...props} state={state} />, document.body)\n    : null;\n}\n\n// Render it somewhere in your app.\n<GlobalToastRegion />\n```\n\n----------------------------------------\n\nTITLE: Building an HSBA Color Picker with ColorSliders in React (TSX)\nDESCRIPTION: Illustrates creating an HSBA (Hue, Saturation, Brightness, Alpha) color picker. It employs four `ColorSlider` components, each dedicated to a channel (hue, saturation, brightness, alpha), all synchronized through a common color state managed with `React.useState` and initialized by `parseColor`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsba(0, 100%, 50%, 0.5)'));\n  return (\n    <>\n      <ColorSlider channel=\"hue\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"saturation\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"brightness\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Non-Contiguous Ranges in RangeCalendar in TSX\nDESCRIPTION: Demonstrates enabling the selection of date ranges that span across unavailable dates using the `allowsNonContiguousRanges` prop. The example marks weekends as unavailable using `isWeekend` and `isDateUnavailable`, but allows selecting a range from a Friday to the following Monday.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return <RangeCalendar aria-label=\"Time off request\" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Component States with Data Attributes in CSS\nDESCRIPTION: Examples of targeting React Aria component states using data attributes as CSS selectors for selected and focused states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-ListBoxItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Unavailable Dates in DatePicker Calendar using isDateUnavailable Prop in React\nDESCRIPTION: This TSX snippet showcases the `isDateUnavailable` prop for disabling specific dates in the DatePicker's calendar. It defines a function `isDateUnavailable` that checks if a date falls within several predefined `disabledRanges` or if it's a weekend (`isWeekend(date, locale)`). This function is passed to the `isDateUnavailable` prop. The `minValue` prop is also used to disable past dates.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {today, isWeekend} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let {locale} = useLocale();\n  let isDateUnavailable = (date: DateValue) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return (\n    <MyDatePicker\n      label=\"Appointment date\"\n      minValue={today(getLocalTimeZone())}\n      /*- begin highlight -*/\n      isDateUnavailable={isDateUnavailable}\n      /*- end highlight -*/\n    />\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Switch Component with useSwitch in TSX\nDESCRIPTION: This example demonstrates how to build a custom `Switch` component using `useSwitch` from `@react-aria/switch`, `useToggleState` from `@react-stately/toggle` for state management, `VisuallyHidden` from `@react-aria/visually-hidden` to hide the native input semantically, and `useFocusRing` from `@react-aria/focus` for accessible focus styling. The native input element is visually hidden but remains accessible, while an SVG provides the visual representation. Focus visibility is handled to show a ring only during keyboard navigation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/switch/docs/useSwitch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useSwitch} from '@react-aria/switch';\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\nimport {useToggleState} from '@react-stately/toggle';\nimport {useFocusRing} from '@react-aria/focus';\n\nfunction Switch(props) {\n  let state = useToggleState(props);\n  let ref = React.useRef(null);\n  let {inputProps} = useSwitch(props, state, ref);\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  return (\n    <label style={{display: 'flex', alignItems: 'center', opacity: props.isDisabled ? 0.4 : 1}}>\n      <VisuallyHidden>\n        <input {...inputProps} {...focusProps} ref={ref} />\n      </VisuallyHidden>\n      <svg\n        width={40}\n        height={24}\n        aria-hidden=\"true\"\n        style={{marginRight: 4}}>\n        <rect\n          x={4}\n          y={4}\n          width={32}\n          height={16}\n          rx={8}\n          fill={state.isSelected ? 'orange' : 'gray'} />\n        <circle\n          cx={state.isSelected ? 28 : 12}\n          cy={12}\n          r={5}\n          fill=\"white\" />\n        {isFocusVisible &&\n          <rect\n            x={1}\n            y={1}\n            width={38}\n            height={22}\n            rx={11}\n            fill=\"none\"\n            stroke=\"orange\"\n            strokeWidth={2} />\n        }\n      </svg>\n      {props.children}\n    </label>\n  );\n}\n\n<Switch>Low power mode</Switch>\n```\n\n----------------------------------------\n\nTITLE: Handling onChange Events and Formatting Dates in React Spectrum DatePicker (TypeScript)\nDESCRIPTION: Shows how to respond to user edits in the DatePicker by handling the onChange event, updating state, and formatting dates for display in the user's locale. This example uses parseDate and getLocalTimeZone from @internationalized/date, useDateFormatter and I18nProvider from @react-aria/i18n, and React state hooks. Key parameters include label, value, onChange, and date formatting options. Inputs are date objects; output is a formatted date string for display. Dependencies on locale and time zone handling must be satisfied.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\\nimport {useDateFormatter} from '@react-aria/i18n';\\n\\nfunction Example() {\\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\\n  let formatter = useDateFormatter({dateStyle: 'full'});\\n\\n  return (\\n    <>\\n      <DatePicker label=\\\"Birth date\\\" value={date} onChange={setDate} />\\n      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Loading ProgressBar Component with React Aria Components\nDESCRIPTION: Creates a loading ProgressBar using React Aria Components with a gradient background, custom styling, and real-time percentage display. The component renders progress visually using a filled bar and displays a text label and percentage value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/loading-progress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ProgressBar, Label} from 'react-aria-components';\n\n<div className=\"bg-linear-to-r from-blue-600 to-purple-600 p-12 rounded-lg flex justify-center\">\n  <ProgressBar value={30} className=\"flex flex-col gap-3 w-56 text-white\">\n    {({percentage, valueText}) => <>\n      <div className=\"flex\">\n        <Label className=\"flex-1\">Loading…</Label>\n        <span>{valueText}</span>\n      </div>\n      <div className=\"h-2 top-[50%] transform translate-y-[-50%] w-full rounded-full bg-white/40\">\n        <div className=\"absolute h-2 top-[50%] transform translate-y-[-50%] rounded-full bg-white\" style={{width: percentage + '%'}} />\n      </div>\n    </>}\n  </ProgressBar>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Dates in DatePicker\nDESCRIPTION: Creates a DatePicker with specific date ranges and weekends marked as unavailable using the isDateUnavailable callback function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today, isWeekend} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let {locale} = useLocale();\n  let isDateUnavailable = (date) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return <DatePicker label=\"Appointment date\" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Picker Open State in React Spectrum (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to use React state to control when a Picker dropdown is open in a React Spectrum application. It demonstrates connecting the Picker's \\\"isOpen\\\" prop to state, updating state with \\\"onOpenChange\\\", and rendering Picker options. Dependencies include React and React Spectrum's Picker/Item components. Inputs: user interaction controls Picker state; Output: Picker reflects open/close state. Constraints: must render within a React component context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <Picker\n      label=\"Frequency\"\n      isOpen={open}\n      onOpenChange={setOpen}>\n      <Item key=\"rarely\">Rarely</Item>\n      <Item key=\"sometimes\">Sometimes</Item>\n      <Item key=\"always\">Always</Item>\n    </Picker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FileTrigger Implementation with File Selection\nDESCRIPTION: Example showing basic usage of FileTrigger component with a button to select files and display the selected filename.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/filetrigger/docs/FileTrigger.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FileTrigger, Button} from '@adobe/react-spectrum';\n\nfunction Example(){\n  let [file, setFile] = React.useState(null);\n\n  return (\n    <>\n      <FileTrigger\n        onSelect={(e) => {\n          let files = Array.from(e);\n          let filenames = files.map((file) => file.name);\n          setFile(filenames);\n        }}>\n        <Button variant=\"accent\">Select a file</Button>\n      </FileTrigger>\n      {file && file}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering ComboBox with Link Items - React Spectrum - TypeScript\nDESCRIPTION: This snippet demonstrates how to render ComboBox list box items as navigable links by passing the \\\"href\\\" and \\\"target\\\" props to <ListBoxItem> using React Spectrum. Each item, when interacted with, navigates to an external URL rather than updating the selected value. Dependencies include React and the relevant react-aria-components. Inputs are the ComboBox label and a list of ListBoxItems with href attributes; outputs are the render of the ComboBox with link behavior. Note: This disables selection updating for link items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<MyComboBox label=\"Tech company websites\">\n  <ListBoxItem href=\"https://adobe.com/\" target=\"_blank\">Adobe</ListBoxItem>\n  <ListBoxItem href=\"https://apple.com/\" target=\"_blank\">Apple</ListBoxItem>\n  <ListBoxItem href=\"https://google.com/\" target=\"_blank\">Google</ListBoxItem>\n  <ListBoxItem href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</ListBoxItem>\n</MyComboBox>\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing FormContext via useSlottedContext in TSX\nDESCRIPTION: This example shows how a custom form field component (`MyFormField`) inside a React Aria `Form` can access properties from the nearest ancestor form using the `useSlottedContext` hook with `FormContext`. Specifically, it retrieves the `validationBehavior` prop set on the parent `Form`. This pattern allows child components to adapt based on the parent form's configuration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormContext, useSlottedContext} from 'react-aria-components';\n\nfunction MyFormField() {\n  let {validationBehavior} = useSlottedContext(FormContext);\n  // ...\n}\n\n<Form validationBehavior=\"aria\">\n  <MyFormField />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable RadioGroup Wrapper in React\nDESCRIPTION: This example shows how to create a reusable RadioGroup wrapper component that includes a label, description, and error message handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {RadioGroupProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyRadioGroupProps extends Omit<RadioGroupProps, 'children'> {\n  children?: React.ReactNode,\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyRadioGroup({\n  label,\n  description,\n  errorMessage,\n  children,\n  ...props\n}: MyRadioGroupProps) {\n  return (\n    <RadioGroup {...props}>\n      <Label>{label}</Label>\n      {children}\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </RadioGroup>\n  );\n}\n\n<MyRadioGroup label=\"Favorite sport\">\n  <Radio value=\"soccer\">Soccer</Radio>\n  <Radio value=\"baseball\">Baseball</Radio>\n  <Radio value=\"basketball\">Basketball</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating an Explicit Grid Layout with Named Areas in React Spectrum\nDESCRIPTION: Demonstrates how to build a common application layout with header, sidebar, content, and footer using named grid areas. It defines a grid structure with columns, rows, and placement of elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Grid.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Grid\n  areas={[\n    'header  header',\n    'sidebar content',\n    'footer  footer'\n  ]}\n  columns={['1fr', '3fr']}\n  rows={['size-1000', 'auto', 'size-1000']}\n  height=\"size-6000\"\n  gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" gridArea=\"header\" />\n  <View backgroundColor=\"blue-600\" gridArea=\"sidebar\" />\n  <View backgroundColor=\"purple-600\" gridArea=\"content\" />\n  <View backgroundColor=\"magenta-600\" gridArea=\"footer\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in DatePicker with ZonedDateTime - React Aria - TypeScript\nDESCRIPTION: This example shows how to hide the time zone display in a DatePicker when using a ZonedDateTime value. The hideTimeZone prop is set to true, so the UI will omit the time zone abbreviation even if a ZonedDateTime object is supplied. The parseZonedDateTime utility is expected to produce a suitable value for the defaultValue parameter. This is useful when the time zone context is shown elsewhere or is implicit. Expected inputs are a valid ZonedDateTime string and appropriate label, with the output being a DatePicker field for appointment time without the time zone suffix.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<MyDatePicker\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n```\n\n----------------------------------------\n\nTITLE: Using ColorEditor with Hidden Alpha Channel (TypeScript/TSX)\nDESCRIPTION: This example demonstrates how to hide the alpha (opacity) editing controls in ColorEditor by passing the `hideAlphaChannel` prop. The ColorPicker is labeled and initialized with a default color value. This is useful where transparency selection should not be exposed to users.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker label=\"Color\" defaultValue=\"#f80\">\n  <ColorEditor hideAlphaChannel />\n</ColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Collections in React Spectrum ComboBox (TSX)\nDESCRIPTION: Demonstrates how to use a dynamic collection with the ComboBox component. An array of objects (`options`) is passed to the `defaultItems` prop. The component automatically uses the `id` property from each object as the key, which is passed to the `onSelectionChange` handler (`setMajorId`) to update the selected major's ID.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n  let [majorId, setMajorId] = React.useState(null);\n\n  return (\n    <>\n      <ComboBox\n        label=\"Pick a engineering major\"\n        defaultItems={options}\n        onSelectionChange={setMajorId}>\n        {(item) => <Item>{item.name}</Item>}\n      </ComboBox>\n      <p>Selected topic id: {majorId}</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Autocomplete Wrapper Component in TSX\nDESCRIPTION: Defines a reusable `MyAutocomplete` component that wraps the `Autocomplete`, `MySearchField` (assumed custom component), and `Menu` from `react-aria-components`. It accepts props like `label`, `placeholder`, `items`, and `children` to configure the autocomplete behavior and content, promoting consistency. It demonstrates passing `items` and `children` to the `Menu` and using `useFilter`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AutocompleteProps, Key} from 'react-aria-components';\nimport {Menu, MenuItem} from 'react-aria-components';\nimport {MySearchField} from './SearchField';\n\ninterface MyAutocompleteProps<T extends object> extends Omit<AutocompleteProps, 'children'> {\n  label?: string,\n  placeholder?: string,\n  items?: Iterable<T>;\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n  onAction?: (id: Key) => void\n}\n\nfunction MyAutocomplete<T extends object>({label,placeholder, items, children, onAction, ...props}: MyAutocompleteProps<T>) {\n  let {contains} = useFilter({sensitivity: 'base'});\n  return (\n    <div className=\"my-autocomplete\">\n      <Autocomplete filter={contains} {...props}>\n        <MySearchField label={label} placeholder={placeholder} />\n        <Menu items={items} onAction={onAction}>\n          {children}\n        </Menu>\n      </Autocomplete>\n    </div>\n  );\n}\n\n<MyAutocomplete label=\"Commands\" placeholder=\"Search commands...\">\n  <MenuItem>Create new file...</MenuItem>\n  <MenuItem>Create new folder...</MenuItem>\n  <MenuItem>Assign to...</MenuItem>\n  <MenuItem>Assign to me</MenuItem>\n  <MenuItem>Change status...</MenuItem>\n  <MenuItem>Change priority...</MenuItem>\n  <MenuItem>Add label...</MenuItem>\n  <MenuItem>Remove label...</MenuItem>\n</MyAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Items Based on States with CSS\nDESCRIPTION: Example of using data attributes provided by React Aria components to style menu items in different states like selected or focused.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_33\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-MenuItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic ColorWheel with Track and Thumb (React Spectrum, TSX)\nDESCRIPTION: Demonstrates how to compose a simple ColorWheel using ColorWheel, ColorWheelTrack, and ColorThumb from react-aria-components. The outerRadius and innerRadius props specify the wheel's size and thickness, while nested children define UI structure. This example forms the foundation for building color pickers, with no additional dependencies beyond the stated package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorWheel, ColorWheelTrack, ColorThumb} from 'react-aria-components';\\n\\n<ColorWheel outerRadius={100} innerRadius={74}>\\n  <ColorWheelTrack />\\n  <ColorThumb />\\n</ColorWheel>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 4-5-4 Calendar System with DatePicker\nDESCRIPTION: This example shows how to create and use a custom 4-5-4 fiscal calendar system with the DatePicker component by extending the GregorianCalendar class and implementing necessary conversion methods.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction Example() {\n  return <DatePicker createCalendar={() => new Custom454()} />;\n}\n\nclass Custom454 extends GregorianCalendar {\n  // See @internationalized/date docs linked above...\n  ///- begin collapse -///\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n  getDaysInMonth(date) {\n    return this.weekPattern[date.month - 1] * 7;\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < this.weekPattern.length; months++) {\n      let weeksInMonth = this.weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  getFormattableMonth(date) {\n    let gregorian = toCalendar(date, new GregorianCalendar());\n    return gregorian.set({month: date.month, day: 1});\n  }\n\n  isEqual(other) {\n    return other instanceof Custom454;\n  }\n ///- end collapse -///\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Dates as Unavailable in Calendar Using Callback in React Spectrum (TypeScript)\nDESCRIPTION: This advanced example restricts selectable dates using the isDateUnavailable prop. Unavailable dates are specified both by explicit ranges and by weekends, using 'isWeekend' and locale from useLocale. The minValue prop also restricts selection to dates after today. Inputs: minValue, isDateUnavailable callback; dependencies: @adobe/react-spectrum, @internationalized/date. Output: calendar UI with visually crossed out unavailable dates and disabled weekends.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today, isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let {locale} = useLocale();\n  let isDateUnavailable = (date) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return <Calendar aria-label=\"Appointment date\" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Color Variants in React Spectrum\nDESCRIPTION: Example showing how to apply Spectrum's semantic colors (negative, notice, positive, and informative) to icons, using the Alert icon within a Flex container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/workflow-icons.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport Alert from '@spectrum-icons/workflow/Alert';\n\n<Flex gap=\"size-100\">\n  <Alert aria-label=\"Default Alert\" />\n  <Alert aria-label=\"Negative Alert\" color=\"negative\" />\n  <Alert aria-label=\"Notification Alert\" color=\"notice\" />\n  <Alert aria-label=\"Positive Alert\" color=\"positive\" />\n  <Alert aria-label=\"Informative Alert\" color=\"informative\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Building an RGBA Color Picker with ColorSliders in React (TSX)\nDESCRIPTION: Provides an example of creating a basic RGBA color picker. It uses four `ColorSlider` components, one for each channel (red, green, blue, alpha), bound to a single color state variable managed by `React.useState`. `parseColor` initializes the state from a hex string, and `Flex` arranges the sliders vertically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#ff00ff'));\n\n  return (\n    <Flex direction=\"column\">\n      <ColorSlider channel=\"red\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"green\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"blue\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dropped Image Files (TSX)\nDESCRIPTION: Demonstrates how to accept and process dropped image files (JPEG, PNG) in a ListBox. It uses `acceptedDragTypes` to specify allowed MIME types, `onRootDrop` to handle the drop event, filters for file items using `isFileDropItem`, retrieves the native `File` object using `item.getFile()`, creates an object URL for preview using `URL.createObjectURL`, and updates the state to render the images.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isFileDropItem} from 'react-aria-components';\n\ninterface ImageItem {\n  id: number,\n  url: string,\n  name: string\n}\n\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    /*- begin highlight -*/\n    acceptedDragTypes: ['image/jpeg', 'image/png'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items.filter(isFileDropItem).map(async item => ({\n          id: Math.random(),\n          url: URL.createObjectURL(await item.getFile()),\n          name: item.name\n        }))\n      );\n      setItems(items);\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <ListBox aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop items here\"}>\n      {item => (\n        <ListBoxItem textValue={item.name}>\n          <div className=\"image-item\">\n            <img src={item.url} />\n            <span>{item.name}</span>\n          </div>\n        </ListBoxItem>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Color Channel Slider Controls with ColorSpace Picker (TypeScript/TSX)\nDESCRIPTION: This example provides an advanced interface for selecting and editing color channels across multiple color spaces (RGB, HSL, HSB) using ColorSlider and a Picker component. It uses React state to manage the active color space and dynamically renders sliders for included color channels as determined by getColorChannels. Flexible layout is provided by Flex. Required dependencies: @react-spectrum/color, @react-spectrum/picker.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSpace} from '@react-spectrum/color';\nimport {ColorSlider, getColorChannels} from '@react-spectrum/color';\nimport {Picker, Item} from '@react-spectrum/picker';\n\nfunction Example() {\n  let [space, setSpace] = React.useState<ColorSpace>('rgb');\n\n  return (\n    <ColorPicker label=\"Color\" defaultValue=\"#184\">\n      <Flex direction=\"column\" gap=\"size-100\">\n        <Picker aria-label=\"Color space\" isQuiet selectedKey={space} onSelectionChange={s => setSpace(s as ColorSpace)}>\n          <Item key=\"rgb\">RGB</Item>\n          <Item key=\"hsl\">HSL</Item>\n          <Item key=\"hsb\">HSB</Item>\n        </Picker>\n        {getColorChannels(space).map(channel => (\n          <ColorSlider key={channel} colorSpace={space} channel={channel} />\n        ))}\n        <ColorSlider channel=\"alpha\" />\n      </Flex>\n    </ColorPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in React Spectrum DateField in TSX\nDESCRIPTION: Illustrates the use of the `hideTimeZone` prop on the `DateField` component. When set, this prop prevents the display of the time zone abbreviation, which is particularly relevant when using `ZonedDateTime` values. Requires `@internationalized/date` for `parseZonedDateTime`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<DateField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n```\n\n----------------------------------------\n\nTITLE: Passing Disabled State via Context to React Aria Buttons (TypeScript)\nDESCRIPTION: This TypeScript snippet defines a ButtonGroup component that uses ButtonContext.Provider to pass the isDisabled prop to all child Button components, ensuring they inherit the disabled state. It demonstrates composition, React context usage, and merging of props per React Aria best practices. Inputs are children and isDisabled, output is a flex container with disabled buttons. Requires react-aria-components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ButtonContext} from 'react-aria-components';\n\ninterface ButtonGroupProps {\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction ButtonGroup({children, isDisabled}: ButtonGroupProps) {\n  return (\n    <div style={{display: 'flex', gap: 8}}>\n      {/*- begin highlight -*/}\n      <ButtonContext.Provider value={{isDisabled}}>\n      {/*- end highlight -*/}\n        {children}\n      </ButtonContext.Provider>\n    </div>\n  );\n}\n\n<ButtonGroup isDisabled>\n  <Button>Save</Button>\n  <Button>Publish</Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Destructive Variant AlertDialog in React Spectrum\nDESCRIPTION: Example of an AlertDialog with the destructive variant, which is used for actions that will delete or permanently modify data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Delete</ActionButton>\n  <AlertDialog\n    variant=\"destructive\"\n    title=\"Delete file\"\n    primaryActionLabel=\"Delete\"\n    cancelLabel=\"Cancel\">\n    This will permanently delete the selected file. Continue?\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Tabs in React Spectrum with State Management\nDESCRIPTION: This example demonstrates how to create dynamic tabs using the `items` prop on the `Tabs` component. It uses React's `useState` hook to manage an array of tab objects. Functions `addTab` and `removeTab` update the state, dynamically adding or removing tabs. The children of `Tabs` is a function that maps each item in the `tabs` state array to an `<Item>` component, using item properties for title and content. The `id` property from the item data is automatically used as the key.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [tabs, setTabs] = React.useState([\n    {id: 1, title: 'Tab 1', content: 'Tab body 1'},\n    {id: 2, title: 'Tab 2', content: 'Tab body 2'},\n    {id: 3, title: 'Tab 3', content: 'Tab body 3'}\n  ]);\n\n  let addTab = () => {\n    setTabs(tabs => [\n      ...tabs,\n      {\n        id: tabs.length + 1,\n        title: `Tab ${tabs.length + 1}`,\n        content: `Tab Body ${tabs.length + 1}`\n      }\n    ]);\n  };\n\n  let removeTab = () => {\n    if (tabs.length > 1) {\n      setTabs(tabs => tabs.slice(0, -1));\n    }\n  };\n\n  return (\n    <>\n      <button onClick={addTab}>Add tab</button>\n      <button onClick={removeTab}>Remove tab</button>\n      <Tabs aria-label=\"Dynamic tabs\" items={tabs}>\n        {item => <Item title={item.title}>{item.content}</Item>}\n      </Tabs>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Jest Timers After Each Test in TSX\nDESCRIPTION: Demonstrates using Jest's `afterEach` hook with `act` from React Testing Library to run all pending fake timers (`jest.runAllTimers()`). This is crucial for cleaning up any timers set by React Spectrum components (e.g., for animations or transitions) during a test, preventing them from interfering with subsequent tests.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nafterEach(() => {\n  act(() => jest.runAllTimers());\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking onChange and onChangeEnd Events on MyColorWheel (React Spectrum, TSX)\nDESCRIPTION: Uses state to manage current and final values of the color wheel by leveraging onChange and onChangeEnd events. This example showcases how to separately display the transient color during drag and the resulting color after interaction completes. parseColor parses the initial value; updated states are reflected in the rendered output. Requires React and react-aria-components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\\n  let [finalValue, setFinalValue] = React.useState(currentValue);\\n\\n  return (\\n    <div>\\n      <MyColorWheel\\n        value={currentValue}\\n        onChange={setCurrentValue}\\n        onChangeEnd={setFinalValue}\\n      />\\n      <p>Current value: {currentValue.toString('hsl')}</p>\\n      <p>Final value: {finalValue.toString('hsl')}</p>\\n    </div>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing ToggleGroup State with Context in React Aria Components\nDESCRIPTION: This example demonstrates how to create a custom ClearButton component that accesses the ToggleButtonGroup state via context. The component uses ToggleGroupStateContext to reset the selection when clicked.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleGroupStateContext, Button} from 'react-aria-components';\n\nfunction ClearButton() {\n  /*- begin highlight -*/\n  let state = React.useContext(ToggleGroupStateContext);\n  /*- end highlight -*/\n  return (\n    <Button onPress={() => state?.setSelectedKeys(new Set())}>\n      Clear\n    </Button>\n  );\n}\n\n<ToggleButtonGroup selectionMode=\"multiple\" defaultSelectedKeys={['bold', 'italic']}>\n  <ToggleButton id=\"bold\">Bold</ToggleButton>\n  <ToggleButton id=\"italic\">Italic</ToggleButton>\n  <ToggleButton id=\"underline\">Underline</ToggleButton>\n  {/*- begin highlight -*/}\n  <ClearButton />\n  {/*- end highlight -*/}\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering ListBox Sections with Headings and Separators (TypeScript/React)\nDESCRIPTION: Implements a ListBoxSection component that groups options into sections with headings, separators, and accessible structures using useListBoxSection. The component auto-renders appropriate <li> separators and section headings, and nests child items. Dependencies include @react-aria/listbox, react utilities, and a working Option component. Inputs include section data and listbox state; outputs are structured HTML markup adhering to ARIA practices.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListBoxSection} from '@react-aria/listbox';\\n\\nfunction ListBoxSection({section, state}) {\\n  let {itemProps, headingProps, groupProps} = useListBoxSection({\\n    heading: section.rendered,\\n    'aria-label': section['aria-label']\\n  });\\n\\n  // If the section is not the first, add a separator element to provide visual separation.\\n  // The heading is rendered inside an <li> element, which contains\\n  // a <ul> with the child items.\\n  return <>\\n    {section.key !== state.collection.getFirstKey() &&\\n      <li\\n        role=\\\"presentation\\\"\\n        style={{\\n          borderTop: '1px solid gray',\\n          margin: '2px 5px'\\n        }} />\\n    }\\n    <li {...itemProps}>\\n      {section.rendered &&\\n        <span\\n          {...headingProps}\\n          style={{\\n            fontWeight: 'bold',\\n            fontSize: '1.1em',\\n            padding: '2px 5px',\\n          }}>\\n          {section.rendered}\\n        </span>\\n      }\\n      <ul\\n        {...groupProps}\\n        style={{\\n          padding: 0,\\n          listStyle: 'none'\\n        }}>\\n        {[...section.childNodes].map(node =>\\n          <Option\\n            key={node.key}\\n            item={node}\\n            state={state} />\\n        )}\\n      </ul>\\n    </li>\\n  </>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label Component within TextField (TSX)\nDESCRIPTION: Demonstrates using the custom `MyCustomLabel` component within a standard React Aria `TextField`. Because `MyCustomLabel` uses `useContextProps` to consume `LabelContext`, it integrates seamlessly and receives the necessary accessibility props and behaviors from `TextField`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/*- end highlight -*/}\n  <Input />\n</TextField>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Elements in React Aria Checkbox via Render Props (JSX)\nDESCRIPTION: Shows the use of a function as a child (render prop pattern) for the React Aria Checkbox component. This function receives the component's state (e.g., `isSelected`) and allows rendering different UI elements conditionally based on that state, such as displaying a check icon only when the checkbox is selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckIcon />}\n      Subscribe\n    </>\n  )}\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Help Text and Validation for NumberField in React Spectrum\nDESCRIPTION: This example demonstrates how to add description and error messages to a NumberField, along with custom validation logic for positive numbers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(1);\n  let isValid = React.useMemo(() => value > 0 || Number.isNaN(value), [value]);\n\n  return (\n    <NumberField\n      validationState={Number.isNaN(value) ? undefined : (isValid ? 'valid' : 'invalid')}\n      value={value}\n      onChange={setValue}\n      label=\"Positive numbers only\"\n      description=\"Enter a positive number.\"\n      errorMessage={value === 0 ? 'Is zero positive?' : 'Positive numbers are bigger than 0.'}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Reorderable Drag and Drop in React Aria ListBox - TypeScript\nDESCRIPTION: Demonstrates how to enable item reordering within a ListBox using useDragAndDrop from react-aria-components and useListData from react-stately. The getItems function provides the necessary drag data, and the onReorder handler manages moving items before or after a target based on drop position. Drag and drop is activated via the dragAndDropHooks prop, supporting keyboard, mouse, and accessibility interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useListData} from 'react-stately';\\nimport {useDragAndDrop} from 'react-aria-components';\\n\\nfunction Example() {\\n  let list = useListData({\\n    initialItems: [\\n      {id: 1, name: 'Adobe Photoshop'},\\n      {id: 2, name: 'Adobe XD'},\\n      {id: 3, name: 'Adobe Dreamweaver'},\\n      {id: 4, name: 'Adobe InDesign'},\\n      {id: 5, name: 'Adobe Connect'}\\n    ]\\n  });\\n\\n  ///- begin highlight -///\\n  let {dragAndDropHooks} = useDragAndDrop({\\n    getItems: (keys) => [...keys].map(key => ({'text/plain': list.getItem(key).name})),\\n    onReorder(e) {\\n      if (e.target.dropPosition === 'before') {\\n        list.moveBefore(e.target.key, e.keys);\\n      } else if (e.target.dropPosition === 'after') {\\n        list.moveAfter(e.target.key, e.keys);\\n      }\\n    }\\n  });\\n  ///- end highlight -///\\n\\n  return (\\n    <ListBox\\n      aria-label=\\\"Reorderable list\\\"\\n      selectionMode=\\\"multiple\\\"\\n      items={list.items}\\n      ///- begin highlight -///\\n      dragAndDropHooks={dragAndDropHooks}\\n      ///- end highlight -///\\n    >\\n      {item => <ListBoxItem>{item.name}</ListBoxItem>}\\n    </ListBox>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Weeks in Month with @internationalized/date in TypeScript\nDESCRIPTION: Shows how to use the `getWeeksInMonth` function from `@internationalized/date` to calculate the number of weeks within a specific month for a `CalendarDateTime`. The result depends on the number of days, the starting day of the week for the month, and the locale's definition of the first day of the week (e.g., 'en-US' vs 'fr-FR').\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {getWeeksInMonth} from '@internationalized/date';\n\nlet date = new CalendarDateTime(2021, 1, 1, 8, 30);\n\ngetWeeksInMonth(date, 'en-US'); // 6\ngetWeeksInMonth(date, 'fr-FR'); // 5\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Individual Checkbox Validation in React Aria (TSX)\nDESCRIPTION: This TSX example illustrates how to make individual checkboxes required by setting the `isRequired` prop directly on the `Checkbox` components within a `CheckboxGroup`. The `FieldError` component aggregates and displays errors from all required checkboxes. Requires `Form`, `CheckboxGroup`, `Checkbox`, `FieldError`, and `Button` from `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <CheckboxGroup>\n    <Label>Agree to the following</Label>\n    {/*- begin highlight -*/}\n    <MyCheckbox value=\"terms\" isRequired>Terms and conditions</MyCheckbox>\n    <MyCheckbox value=\"privacy\" isRequired>Privacy policy</MyCheckbox>\n    <MyCheckbox value=\"cookies\" isRequired>Cookie policy</MyCheckbox>\n    {/*- end highlight -*/}\n    <FieldError />\n  </CheckboxGroup>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Reusable Checkbox Component with Conditional Rendering\nDESCRIPTION: Creates a reusable MyCheckbox component that wraps the Checkbox component with consistent styling and conditionally renders different indicators for checked and indeterminate states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\n\nexport function MyCheckbox({children, ...props}: CheckboxProps) {\n  return (\n    <Checkbox {...props}>\n      {({isIndeterminate}) => <>\n        <div className=\"checkbox\">\n          <svg viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n            {isIndeterminate\n              ? <rect x={1} y={7.5} width={15} height={3} />\n              : <polyline points=\"1 9 7 14 15 4\" />\n            }\n          </svg>\n        </div>\n        {children}\n      </>}\n    </Checkbox>\n  );\n}\n\n<MyCheckbox>Unsubscribe</MyCheckbox>\n```\n\n----------------------------------------\n\nTITLE: Controlling Modal Open State Programmatically with react-aria-components in TSX\nDESCRIPTION: Shows how to manage the visibility of a `Modal` component using React's `useState` hook. The `isOpen` state variable is passed to the `Modal`'s `isOpen` prop, and the `setOpen` function is provided to the `onOpenChange` prop to handle updates when the user dismisses the modal.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <Button onPress={() => setOpen(true)}>Open dialog</Button>\n      <Modal isDismissable isOpen={isOpen} onOpenChange={setOpen}>\n        <Dialog>\n          <Heading slot=\"title\">Notice</Heading>\n          <p>Click outside to close this dialog.</p>\n        </Dialog>\n      </Modal>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Calendar Grid with React Aria Hooks\nDESCRIPTION: Shows how to implement a custom week-view calendar using React Aria's low-level hooks. This example demonstrates intercepting events, overriding behavior, and customizing DOM elements by using the useCalendarGrid hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCalendarGrid} from 'react-aria';\n\n// Custom calendar that displays one week at a time.\nfunction WeekCalendarGrid(props) {\n  let state = useContext(CalendarStateContext);\n  /*- begin highlight -*/\n  let {gridProps} = useCalendarGrid(props, state);\n  /*- end highlight -*/\n\n  return (\n    <table {...gridProps}>\n      <tbody>\n        <tr>\n          {state.getDatesInWeek(0).map((date, i) =>\n            <CalendarCell key={i} date={date} />\n          )}\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\n<Calendar visibleDuration={{weeks: 1}}>\n  <Button slot=\"previous\">◀</Button>\n  {/*- begin highlight -*/}\n  <WeekCalendarGrid />\n  {/*- end highlight -*/}\n  <Button slot=\"next\">▶</Button>\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs in a Custom Trigger Component - React - TypeScript\nDESCRIPTION: Defines a custom React component using React.forwardRef to ensure a button element receives ref and all interactive props required by MenuTrigger/Pressable. This is a necessary pattern when building custom, accessible triggers that integrate with React Aria. Input is standard props and ref; output is a ref-forwarding button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst CustomTrigger = React.forwardRef((props, ref) => (\n  <button {...props} ref={ref} />\n));\n```\n\n----------------------------------------\n\nTITLE: Providing Multiple Drag Data Formats with React Spectrum (tsx)\nDESCRIPTION: This example demonstrates how to provide multiple data representations for dragged items using the `getItems` function in `useDragAndDrop`. For each item, it returns an object containing 'text/plain', 'text/html', and a custom 'custom-app-type' (JSON stringified). This allows different drop targets (internal or external applications) to consume the data format they understand best. It also includes a `renderDragPreview` function (collapsed) and renders a draggable `MyGridList`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DraggableGridList() {\n  let items = new Map([\n    ['ps', {name: 'Photoshop', style: 'strong'}],\n    ['xd', {name: 'XD', style: 'strong'}],\n    ['id', {name: 'InDesign', style: 'strong'}],\n    ['dw', {name: 'Dreamweaver', style: 'em'}],\n    ['co', {name: 'Connect', style: 'em'}]\n  ]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    ///- begin collapse -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    ///- end collapse -///\n    /*- begin highlight -*/\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = items.get(key as string)!;\n        return {\n          'text/plain': item.name,\n          'text/html': `<${item.style}>${item.name}</${item.style}>`,\n          'custom-app-type': JSON.stringify({id: key, ...item})\n        };\n      });\n    },\n    /*- end highlight -*/\n  });\n\n  return (\n    <MyGridList aria-label=\"Draggable list\" selectionMode=\"multiple\" items={items} dragAndDropHooks={dragAndDropHooks}>\n      {([id, item]) => <MyItem id={id} textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</MyItem>}\n    </MyGridList>\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  <DraggableGridList />\n  {/* see below */}\n  <DroppableGridList />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling onChange for RangeCalendar and Formatting Dates - React Spectrum - TypeScript/JSX\nDESCRIPTION: Demonstrates how to use the onChange callback of RangeCalendar to update formatted date outputs. Uses useDateFormatter from @adobe/react-spectrum and getLocalTimeZone to create a locale-aware formatter. React state stores the current range and updates whenever a selection changes. Inputs: value prop, onChange handler, aria-label, formatter settings. Outputs: a formatted date range string based on locale. Requires @internationalized/date, @adobe/react-spectrum, React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\\nimport {useDateFormatter} from '@adobe/react-spectrum';\\n\\nfunction Example() {\\n  let [range, setRange] = React.useState({\\n    start: parseDate('2020-07-03'),\\n    end: parseDate('2020-07-10')\\n  });\\n  let formatter = useDateFormatter({dateStyle: 'long'});\\n\\n  return (\\n    <>\\n      <RangeCalendar aria-label=\\\"Date range\\\" value={range} onChange={setRange} />\\n      <p>\\n        Selected date:{' '}\\n        {formatter.formatRange(\\n          range.start.toDate(getLocalTimeZone()),\\n          range.end.toDate(getLocalTimeZone())\\n        )}\\n      </p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Components in React Spectrum\nDESCRIPTION: Imports necessary components and icons for implementing Tabs in React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionGroup} from '@react-spectrum/actiongroup';\nimport Bookmark from '@spectrum-icons/workflow/Bookmark';\nimport {Button} from '@react-spectrum/button';\nimport Calendar from '@spectrum-icons/workflow/Calendar';\nimport Dashboard from '@spectrum-icons/workflow/Dashboard';\nimport {Flex} from '@react-spectrum/layout';\nimport {Text} from '@react-spectrum/text';\nimport {Item, Tabs, TabList, TabPanels} from '@react-spectrum/tabs';\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Data Loading for React Spectrum Autocomplete with useAsyncList in TypeScript\nDESCRIPTION: Demonstrates using the `useAsyncList` hook from `@react-stately/data` to handle asynchronous data fetching for an Autocomplete component. The `load` function within `useAsyncList` fetches data from the Star Wars API based on the `filterText`. The `Autocomplete` component's `inputValue` and `onInputChange` props are bound to `list.filterText` and `list.setFilterText` provided by the hook, enabling server-side filtering. Fetched results (`list.items`) are rendered within the `Menu` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {useAsyncList} from '@react-stately/data';\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<{name: string}>({\n    async load({signal, filterText}) {\n      let res = await fetch(\n        `https://swapi.py4e.com/api/people/?search=${filterText}`,\n        {signal}\n      );\n      let json = await res.json();\n\n      return {\n        items: json.results\n      };\n    }\n  });\n\n  return (\n    <div className=\"my-autocomplete\">\n      <Autocomplete\n        inputValue={list.filterText}\n        onInputChange={list.setFilterText}>\n        <MySearchField label=\"Star Wars Character Search\" />\n        <Menu items={list.items} renderEmptyState={() => 'No results found.'}>\n          {(item) => <MenuItem id={item.name} href={`https://www.starwars.com/databank/${item.name.toLowerCase().replace(/\\s/g, '-')}`} target=\"_blank\">{item.name}</MenuItem>}\n        </Menu>\n      </Autocomplete>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip Delay to Zero with TooltipTrigger in React (TypeScript/TSX)\nDESCRIPTION: Shows usage of the TooltipTrigger's 'delay' prop to make tooltip appear instantly on interaction by setting delay={0}. Demonstrates integration of the MyTooltip custom component. Expects a Button child as the trigger and can be used in place of default TooltipTrigger behavior when instant feedback is required. Assumes availability of MyTooltip in the scope.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger delay={0}>\n  <Button>\\uD83D\\uDCBE</Button>\n  <MyTooltip>Save</MyTooltip>\n</TooltipTrigger>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Entry and Exit Animation to Popovers via Data Attributes in React Spectrum with CSS\nDESCRIPTION: Defines CSS transitions and special states (data-entering, data-exiting) for the .react-aria-Popover class to support smooth opacity-based enter/exit animations. These states are provided as data attributes by React Spectrum and are consumed here for transitions. Inputs: data attributes on Popover; Output: animated popover entry and exit.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\\n  transition: opacity 300ms;\\n\\n  &[data-entering],\\n  &[data-exiting] {\\n    opacity: 0;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Sections with Separate Data Sources in React Spectrum Tree (tsx)\nDESCRIPTION: Shows a conceptual example (commented out in the original source) of rendering multiple `<Section>` components within a `<Tree>` component. Each section can represent a different data source (e.g., local files, cloud files) with its own items (`items`) and loading state (`isLoading`), allowing for independent data management within the same tree structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n{/*\n\n### Sections with separate data sources\n\nTODO\n\n```tsx\n<Tree>\n  <Section\n    title=\"Local Files\"\n    items={local.items}\n    isLoading={local.isLoading}>\n    {item => <Item>{item.name}</Item>}\n  </Section>\n  <Section\n    title=\"In the Cloud\"\n    items={cloud.items}\n    isLoading={cloud.isLoading}>\n    {item => <Item>{item.name}</Item>}\n  </Section>\n</Tree>\n```\n\n*/}\n```\n\n----------------------------------------\n\nTITLE: Managing Controlled Values in CheckboxGroup with useState in TypeScript\nDESCRIPTION: This TSX code example demonstrates a controlled CheckboxGroup pattern with React state. The Example component uses useState to track an array of selected values, passing them to the value prop and updating via the onChange handler. Dependencies include React and the custom MyCheckboxGroup/MyCheckbox components. Inputs are label, value, and onChange callback; outputs are user selections reflected in local state and rendered UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(['soccer', 'baseball']);\n\n  return (\n    <MyCheckboxGroup label=\"Favorite sports (controlled)\" value={selected} onChange={setSelected}>\n      <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n      <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n      <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n    </MyCheckboxGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popover Width via Data Attribute and CSS Custom Property - CSS\nDESCRIPTION: Demonstrates how to use a data attribute (data-trigger) and a CSS variable (--trigger-width) to set the popover width equal to its corresponding Select. No additional dependencies. Input: a Popover with data-trigger set to 'Select'. Output: a Popover styled to match Select button width.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=Select] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Styled Checkbox with React Aria\nDESCRIPTION: Advanced implementation of a custom-styled checkbox using SVG for the visual representation. This example uses VisuallyHidden to hide the native input while maintaining accessibility, and useFocusRing for keyboard focus indication.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckbox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\nimport {useFocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\n\nfunction Checkbox(props) {\n  let state = useToggleState(props);\n  let ref = React.useRef(null);\n  let {inputProps} = useCheckbox(props, state, ref);\n  let {isFocusVisible, focusProps} = useFocusRing();\n  let isSelected = state.isSelected && !props.isIndeterminate;\n\n  return (\n    <label style={{display: 'flex', alignItems: 'center', opacity: props.isDisabled ? 0.4 : 1}}>\n      <VisuallyHidden>\n        <input {...mergeProps(inputProps, focusProps)} ref={ref} />\n      </VisuallyHidden>\n      <svg\n        width={24}\n        height={24}\n        aria-hidden=\"true\"\n        style={{marginRight: 4}}>\n        <rect\n          x={isSelected ? 4 : 5}\n          y={isSelected ? 4 : 5}\n          width={isSelected ? 16 : 14}\n          height={isSelected ? 16 : 14}\n          fill={isSelected ? 'orange' : 'none'}\n          stroke={isSelected ? 'none' : 'gray'}\n          strokeWidth={2}/>\n        {isSelected &&\n          <path\n            transform=\"translate(7 7)\"\n            d={`M3.788 9A.999.999 0 0 1 3 8.615l-2.288-3a1 1 0 1 1\n            1.576-1.23l1.5 1.991 3.924-4.991a1 1 0 1 1 1.576 1.23l-4.712\n            6A.999.999 0 0 1 3.788 9z`} />\n        }\n        {props.isIndeterminate &&\n          <rect x={7} y={11} width={10} height={2} fill=\"gray\" />\n        }\n        {isFocusVisible &&\n          <rect\n            x={1}\n            y={1}\n            width={22}\n            height={22}\n            fill=\"none\"\n            stroke=\"orange\"\n            strokeWidth={2} />\n        }\n      </svg>\n      {props.children}\n    </label>\n  );\n}\n\n<Checkbox>Unsubscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ColorField Component with React Aria\nDESCRIPTION: Demonstrates how to create a basic ColorField component using the useColorField hook from React Aria. This example shows the component structure and how to apply the necessary props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useColorField} from '@react-aria/color';\nimport {useColorFieldState} from '@react-stately/color';\n\nfunction ColorField(props) {\n  let state = useColorFieldState(props);\n  let inputRef = React.useRef(null);\n  let {\n    labelProps,\n    inputProps\n  } = useColorField(props, state, inputRef);\n\n  return (\n    <div style={{display: 'inline-flex', flexDirection: 'column'}}>\n      <label {...labelProps}>{props.label}</label>\n      <input {...inputProps} ref={inputRef} />\n    </div>\n  );\n}\n\n<ColorField label=\"Color\" />\n```\n\n----------------------------------------\n\nTITLE: Defining ListBox and Option Components in React (tsx)\nDESCRIPTION: This snippet defines `ListBox` and `Option` components using React Aria hooks (`useListBox`, `useOption`). The `ListBox` component renders an unordered list (`ul`) applying props from `useListBox` and maps over the collection state to render `Option` components. The `Option` component renders a list item (`li`), applies props from `useOption`, and dynamically sets background color based on selection, focus, or disabled state. These are used to display selectable items within components like Select or SearchAutocomplete.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListBox, useOption} from '@react-aria/listbox';\n\nfunction ListBox(props) {\n  let ref = React.useRef(null);\n  let {listBoxRef = ref, state} = props;\n  let {listBoxProps} = useListBox(props, state, listBoxRef);\n\n  return (\n    <ul\n      {...listBoxProps}\n      ref={listBoxRef}\n      style={{\n        margin: 0,\n        padding: 0,\n        listStyle: \"none\",\n        maxHeight: 150,\n        overflow: \"auto\",\n        minWidth: 200\n      }}>\n      {[...state.collection].map(item => (\n        <Option\n          key={item.key}\n          item={item}\n          state={state} />\n      ))}\n    </ul>\n  );\n}\n\nfunction Option({item, state}) {\n  let ref = React.useRef(null);\n  let {optionProps, isSelected, isFocused, isDisabled} = useOption({key: item.key}, state, ref);\n\n  let backgroundColor;\n  let color = 'black';\n\n  if (isSelected) {\n    backgroundColor = 'blueviolet';\n    color = 'white';\n  } else if (isFocused) {\n    backgroundColor = 'gray';\n  } else if (isDisabled) {\n    backgroundColor = 'transparent';\n    color = 'gray';\n  }\n\n  return (\n    <li\n      {...optionProps}\n      ref={ref}\n      style={{\n        background: backgroundColor,\n        color: color,\n        padding: '2px 5px',\n        outline: 'none',\n        cursor: 'pointer'\n      }}>\n      {item.rendered}\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TreeView with Action Groups for Each Item (TSX)\nDESCRIPTION: This example shows how to add action groups (e.g., edit/delete) to each item in a TreeView using ActionGroup and Item components inside TreeViewItemContent. Uses custom rendering with a renderItem function. Dependencies: TreeView, TreeViewItem, TreeViewItemContent, ActionGroup, Item, Text, Collection, Edit, Delete. Inputs are hierarchical items with names, icons, and children; outputs are dynamically rendered tree nodes where each has grouped actions. Use this pattern for tree nodes with contextual operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<TreeView aria-label=\"Example tree with action groups\" height=\"size-3000\" maxWidth=\"size-6000\" items={items}>\n  {function renderItem(item: MyItem) {\n    return (\n      <TreeViewItem textValue={item.name}>\n        <TreeViewItemContent>\n          <Text>{item.name}</Text>\n          {item.icon}\n          <ActionGroup onAction={(key) => alert(`Item: ${item.id}, Action: ${key}`)}>\n            <Item key=\"edit\" textValue=\"Edit\">\n              <Edit />\n              <Text>Edit</Text>\n            </Item>\n            <Item key=\"delete\" textValue=\"Delete\">\n              <Delete />\n              <Text>Delete</Text>\n            </Item>\n          </ActionGroup>\n        </TreeViewItemContent>\n        <Collection items={item.childItems}>\n          {renderItem}\n        </Collection>\n      </TreeViewItem>\n    )\n  }}\n</TreeView>\n```\n\n----------------------------------------\n\nTITLE: Adding a Clear Button to DateRangePicker Using State Context (TypeScript)\nDESCRIPTION: This example defines a DateRangePickerClearButton component that accesses the DateRangePicker's state via context, allowing for resetting the selected value. The button uses the onPress event to clear the value via state.setValue(null), and takes over button slotting and accessibility via props. It also shows integration within a full DateRangePicker composition, including label, date inputs, calendar, and popover. Dependencies include react-aria-components. Inputs are none for the button itself but must be placed within a DateRangePicker; outputs a Button element capable of clearing the picker. Useful for providing UX for removing a selected range.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DateRangePickerStateContext} from 'react-aria-components';\n\nfunction DateRangePickerClearButton() {\n  /*- begin highlight -*/\n  let state = React.useContext(DateRangePickerStateContext)!;\n  /*- end highlight -*/\n  return (\n    <Button\n      // Don't inherit default Button behavior from DateRangePicker.\n      slot={null}\n      className=\"clear-button\"\n      aria-label=\"Clear\"\n      onPress={() => state.setValue(null)}>\n      \\u2715\n    </Button>\n  );\n}\n\n<DateRangePicker defaultValue={{start: parseDate('2023-07-12'), end: parseDate('2023-08-04')}}>\n  <Label>Trip dates</Label>\n  <Group>\n    <DateInput slot=\"start\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <span aria-hidden=\"true\">\\u2013</span>\n    <DateInput slot=\"end\">\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    {/*- begin highlight -*/}\n    <DateRangePickerClearButton />\n    {/*- end highlight -*/}\n    <Button>\\u25BC</Button>\n  </Group>\n  <Popover>\n    <Dialog>\n      <RangeCalendar>\n        <header>\n          <Button slot=\"previous\">\\u25C0</Button>\n          <Heading />\n          <Button slot=\"next\">\\u25B6</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </RangeCalendar>\n    </Dialog>\n  </Popover>\n</DateRangePicker>\n```\n\n----------------------------------------\n\nTITLE: Rendering ListBox with Complex Option Content and Accessibility (TypeScript/React)\nDESCRIPTION: This example shows how to structure ListBox and Option components for accessible rich option content. ARIA props from useOption are applied to labels and descriptions using React.cloneElement, supporting screen reader accessibility. The ListBox renders items with bolded titles and explanatory descriptions, using appropriate hooks and merging focus visibility for keyboard navigation. Dependencies include useListState, useListBox, useOption, useFocusRing, and React utilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n///- begin collapse -///\\nfunction ListBox(props) {\\n  let state = useListState(props);\\n  let ref = React.useRef(null);\\n  let {listBoxProps, labelProps} = useListBox(props, state, ref);\\n\\n  return (\\n    <>\\n      <div {...labelProps}>{props.label}</div>\\n      <ul {...listBoxProps} ref={ref}>\\n        {[...state.collection].map(item => (\\n          <Option\\n            key={item.key}\\n            item={item}\\n            state={state} />\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\n///- end collapse -///\\nfunction Option({item, state}) {\\n  let ref = React.useRef(null);\\n  let {optionProps, labelProps, descriptionProps} = useOption({key: item.key}, state, ref);\\n  let {isFocusVisible, focusProps} = useFocusRing();\\n\\n  // Pull out the two expected children. We will clone them\\n  // and add the necessary props for accessibility.\\n  let [title, description] = item.rendered;\\n\\n  return (\\n    <li\\n      {...mergeProps(optionProps, focusProps)}\\n      ref={ref}\\n      data-focus-visible={isFocusVisible}>\\n      {React.cloneElement(title, labelProps)}\\n      {React.cloneElement(description, descriptionProps)}\\n    </li>\\n  );\\n}\\n\\n<ListBox label=\\\"Text alignment\\\" selectionMode=\\\"single\\\">\\n  <Item textValue=\\\"Align Left\\\">\\n    <div><strong>Align Left</strong></div>\\n    <div>Align the selected text to the left</div>\\n  </Item>\\n  <Item textValue=\\\"Align Center\\\">\\n    <div><strong>Align Center</strong></div>\\n    <div>Align the selected text center</div>\\n  </Item>\\n  <Item textValue=\\\"Align Right\\\">\\n    <div><strong>Align Right</strong></div>\\n    <div>Align the selected text to the right</div>\\n  </Item>\\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Rendering Class API for useTableColumnResizeState Return Type in JSX\nDESCRIPTION: Uses the `ClassAPI` component to display the interface or type definition for the object returned by the `useTableColumnResizeState` hook. It dynamically retrieves the correct type information using an ID (`docs.exports.useTableColumnResizeState.return.base.id`) found within the imported `docs` data structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useTableColumnResizeState.return.base.id]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only SearchAutocomplete in React Spectrum (TypeScript)\nDESCRIPTION: This snippet demonstrates a SearchAutocomplete component set to 'read-only' mode by using the isReadOnly prop. It displays a dropdown menu with a preset list of animal items and disables user input or selection modification. No external dependencies are required other than React Spectrum's core components. The 'label' parameter sets the visible label for accessibility; the output is a non-interactive autocomplete list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<SearchAutocomplete label=\\\"Search Animals\\\" isReadOnly>\n  <Item>Red Panda</Item>\n  <Item>Cat</Item>\n  <Item>Dog</Item>\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable ListBox in React Aria\nDESCRIPTION: This snippet demonstrates how to implement a draggable ListBox component using React Aria hooks. It combines useListBox with useDraggableCollection and useDraggableItem to enable drag and drop functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListBox, useOption} from '@react-aria/listbox';\nimport {useListState} from '@react-stately/list';\nimport {Item} from '@react-stately/collections';\nimport {useFocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport {useDraggableCollectionState} from '@react-stately/dnd';\nimport {useDraggableCollection, useDraggableItem} from '@react-aria/dnd';\n\nfunction ListBox(props) {\n  let state = useListState(props);\n  let ref = React.useRef(null);\n  let {listBoxProps} = useListBox({\n    ...props,\n    shouldSelectOnPressUp: true\n  }, state, ref);\n\n  let dragState = useDraggableCollectionState({\n    ...props,\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    getItems: props.getItems || ((keys) => {\n      return [...keys].map(key => {\n        let item = state.collection.getItem(key);\n        return {\n          'text/plain': item.textValue\n        };\n      });\n    })\n  });\n\n  useDraggableCollection(props, dragState, ref);\n\n  return (\n    <ul {...listBoxProps} ref={ref}>\n      {[...state.collection].map((item) => (\n        <Option\n          key={item.key}\n          item={item}\n          state={state}\n          dragState={dragState}\n        />\n      ))}\n    </ul>\n  );\n}\n\nfunction Option({ item, state, dragState }) {\n  let ref = React.useRef(null);\n  let {optionProps} = useOption({key: item.key}, state, ref);\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  let {dragProps} = useDraggableItem({\n    key: item.key\n  }, dragState);\n\n  return (\n    <li\n      {...mergeProps(optionProps, dragProps, focusProps)}\n      ref={ref}\n      className={`option ${isFocusVisible ? 'focus-visible' : ''}`}>\n      {item.rendered}\n    </li>\n  );\n}\n\n<ListBox aria-label=\"Categories\" selectionMode=\"multiple\">\n  <Item>Animals</Item>\n  <Item>People</Item>\n  <Item>Plants</Item>\n</ListBox>\n<DropTarget />\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Switch States - React Spectrum - TypeScript/TSX\nDESCRIPTION: This snippet illustrates both uncontrolled (using defaultSelected) and controlled (using isSelected and onChange) Switch components. It uses React.useState to manage the selected state of the controlled Switch. The uncontrolled Switch toggles its own state, while the controlled Switch's state is managed by the parent component. Key props include defaultSelected, isSelected, and onChange.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/docs/Switch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [selected, setSelection] = React.useState(false);\\n\\n  return (\\n    <>\\n      <Switch\\n        defaultSelected>\\n        Low power mode (uncontrolled)\\n      </Switch>\\n\\n      <Switch\\n        isSelected={selected}\\n        onChange={setSelection}>\\n        Low power mode (controlled)\\n      </Switch>\\n    </>\\n  )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-only DateRangePicker\nDESCRIPTION: Example showing how to create a DateRangePicker in read-only mode where the value is visible but cannot be changed. Unlike disabled, the component remains focusable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" value={{start: today(getLocalTimeZone()), end: today(getLocalTimeZone()).add({weeks: 1})}} isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Using Controlled and Uncontrolled Values with RangeCalendar - React Spectrum - TypeScript/JSX\nDESCRIPTION: Illustrates how to manage both controlled and uncontrolled date ranges in RangeCalendar using React state and the parseDate utility from @internationalized/date. The controlled instance is updated via onChange, while the uncontrolled instance uses defaultValue. Dependencies: React, @react-spectrum/calendar, @internationalized/date, @react-spectrum/layout. Inputs: aria-label for accessibility, value or defaultValue for selected dates. Outputs: rendered RangeCalendars with respective state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\\n\\nfunction Example() {\\n  let [value, setValue] = React.useState({\\n    start: parseDate('2020-02-03'),\\n    end: parseDate('2020-02-12')\\n  });\\n\\n  return (\\n    <Flex gap=\\\"size-300\\\" wrap>\\n      <RangeCalendar\\n        aria-label=\\\"Date range (uncontrolled)\\\"\\n        defaultValue={{\\n          start: parseDate('2020-02-03'),\\n          end: parseDate('2020-02-12')\\n        }} />\\n      <RangeCalendar\\n        aria-label=\\\"Date range (controlled)\\\"\\n        value={value}\\n        onChange={setValue} />\\n    </Flex>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Internationalized Date Formatting Component\nDESCRIPTION: Demonstrates how to use useDateFormatter hook within a React component to display dates in different locales using I18nProvider\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/useDateFormatter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider, useDateFormatter} from '@react-aria/i18n';\n\nfunction CurrentDate() {\n  let formatter = useDateFormatter();\n\n  return (\n    <p>{formatter.format(new Date())}</p>\n  );\n}\n\n<>\n  <I18nProvider locale=\"en-US\">\n    <CurrentDate />\n  </I18nProvider>\n  <I18nProvider locale=\"ru-RU\">\n    <CurrentDate />\n  </I18nProvider>\n</>\n```\n\n----------------------------------------\n\nTITLE: Initializing an HSLA Color Picker with React Spectrum ColorSlider\nDESCRIPTION: This React functional component shows how to build an HSLA color picker. It uses four `MyColorSlider` components, each bound to a specific HSLA channel (hue, saturation, lightness, alpha). The initial color state is set by parsing an HSLA string using `parseColor`, and the `onChange` handler updates the shared state for all sliders.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0.5)'));\n\n  return (\n    <>\n      <MyColorSlider channel=\"hue\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"saturation\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"lightness\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchAutocomplete with Disabled Options in React Spectrum\nDESCRIPTION: Creates a SearchAutocomplete component with specific options disabled using the disabledKeys prop. This example shows how to prevent specific options ('cat' and 'kangaroo') from being selectable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Search Animals\" disabledKeys={['cat', 'kangaroo']}>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Styling the Select Component Theme - CSS\nDESCRIPTION: This detailed CSS theme provides the core styles for the Select component and its subcomponents, including colors, spacing, interaction states, and accessibility enhancements. It depends on the '@react-aria/example-theme' for base variables, and applies custom visual styles for the Select root, Button, Value, Popover, ListBox, and ListBoxItem states. The stylesheet expects the corresponding HTML structure and class names from the React Aria Select composition. Limitations include specificity to the React Aria DOM and variable-based theming.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \\\"@react-aria/example-theme\\\";\\n\\n.react-aria-Select {\\n  color: var(--text-color);\\n\\n  .react-aria-Button {\\n    box-shadow: 0 1px 2px rgba(0 0 0 / 0.1);\\n    border-radius: 6px;\\n    font-size: 1.072rem;\\n    padding: 0.286rem 0.286rem 0.286rem 0.571rem;\\n    display: flex;\\n    align-items: center;\\n    max-width: 250px;\\n\\n    &[data-focus-visible] {\\n      outline: 2px solid var(--focus-ring-color);\\n      outline-offset: -1px;\\n    }\\n  }\\n\\n  .react-aria-SelectValue {\\n    &[data-placeholder] {\\n      font-style: italic;\\n      color: var(--text-color-placeholder);\\n    }\\n  }\\n\\n  span[aria-hidden] {\\n    width: 1.5rem;\\n    line-height: 1.375rem;\\n    margin-left: 1rem;\\n    padding: 1px;\\n    background: var(--highlight-background);\\n    color: var(--highlight-foreground);\\n    forced-color-adjust: none;\\n    border-radius: 4px;\\n    font-size: 0.857rem;\\n  }\\n}\\n\\n.react-aria-Popover[data-trigger=Select] {\\n  min-width: var(--trigger-width);\\n\\n  .react-aria-ListBox {\\n    display: block;\\n    width: unset;\\n    max-height: inherit;\\n    min-height: unset;\\n    border: none;\\n\\n    .react-aria-Header {\\n      padding-left: 1.571rem;\\n    }\\n  }\\n\\n  .react-aria-ListBoxItem {\\n    padding: 0 0.571rem 0 1.571rem;\\n\\n    &[data-focus-visible] {\\n      outline: none;\\n    }\\n\\n    &[data-selected] {\\n      font-weight: 600;\\n      background: unset;\\n      color: var(--text-color);\\n\\n      &::before {\\n        content: '✓';\\n        content: '✓' / '';\\n        alt: ' ';\\n        position: absolute;\\n        top: 4px;\\n        left: 4px;\\n      }\\n    }\\n\\n    &[data-focused],\\n    &[data-pressed] {\\n      background: var(--highlight-background);\\n      color: var(--highlight-foreground);\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling onChange Event and Formatting Dates in React Spectrum Calendar (TSX)\nDESCRIPTION: This TSX code snippet illustrates how to capture date selection events using the `onChange` prop on a React Spectrum Calendar (`MyCalendar`). It maintains the selected date in React state (`React.useState`), initialized using `parseDate`. It uses the `useDateFormatter` hook from `@react-aria/i18n` and `getLocalTimeZone` from `@internationalized/date` to display the chosen date formatted according to the user's locale and time zone. Depends on `@internationalized/date`, `@react-aria/i18n`, `React`, and `MyCalendar`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('2022-07-04'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <MyCalendar aria-label=\"Event date\" value={date} onChange={setDate} />\n      <p>Selected date: {formatter.format(date.toDate(getLocalTimeZone()))}</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Picker with Context\nDESCRIPTION: Example showing how to create a composite calendar picker component using CalendarContext and custom preset buttons\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarContext, useSlottedContext} from 'react-aria-components';\n\nfunction CalendarPicker({children}) {\n  let [value, onChange] = React.useState(null);\n  let [focusedValue, onFocusChange] = React.useState(null);\n\n  return (\n    <CalendarContext.Provider value={{value, onChange, focusedValue, onFocusChange}}>\n      <div className=\"calendar-picker\">\n        {children}\n      </div>\n    </CalendarContext.Provider>\n  );\n}\n\ninterface PresetProps {\n  date: CalendarDate,\n  children: React.ReactNode\n}\n\nfunction Preset({date, children}: PresetProps) {\n  let context = useSlottedContext(CalendarContext)!;\n  let onPress = () => {\n    context.onFocusChange(date);\n    context.onChange(date);\n  };\n\n  return (\n    <Button onPress={onPress}>{children}</Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unavailable Dates in DateRangePicker with Validation\nDESCRIPTION: Example showing how to mark certain dates as unavailable in a DateRangePicker component with validation. The code defines a trip date picker with multiple unavailable date ranges and validates that selected ranges don't include these unavailable dates.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  return (\n    <DateRangePicker\n      label=\"Trip dates\"\n      minValue={today(getLocalTimeZone())}\n      /*- begin highlight -*/\n      isDateUnavailable={date => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0)}\n      validate={value => disabledRanges.some(interval => value && value.end.compare(interval[0]) >= 0 && value.start.compare(interval[1]) <= 0) ? 'Selected date range may not include unavailable dates.' : null}\n      /*- end highlight -*/\n      validationBehavior=\"native\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Trigger Component with forwardRef in React\nDESCRIPTION: Shows how to create a reusable custom trigger component using `React.forwardRef`. This pattern ensures that the `ref` and other props are correctly passed down to the underlying DOM element (a `<button>` here), which is essential for compatibility with React Aria hooks and components like `DialogTrigger`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomTrigger = React.forwardRef((props, ref) => (\n  <button {...props} ref={ref} />\n));\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Items with Label, Description, and Keyboard Shortcut Slots - CSS\nDESCRIPTION: Provides CSS selectors for styling the distinct label and description slots inside react-aria MenuItem components. The CSS targets slotted elements and keyboard shortcuts for proper grid placement and visual hierarchy. Requires structure that uses [slot=label] and [slot=description] attributes, as established in related React components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem {\n  [slot=label] {\n    font-weight: bold;\n    grid-area: label;\n  }\n\n  [slot=description] {\n    font-size: small;\n    grid-area: desc;\n  }\n\n  kbd {\n    grid-area: kbd;\n    font-family: monospace;\n    text-align: end;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Quiet NumberField in React Spectrum\nDESCRIPTION: This example shows how to create a quiet variant of the NumberField component with a minimum value of 0.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField label=\"Cookies\" isQuiet minValue={0} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Dates in RangeCalendar (TSX)\nDESCRIPTION: This example demonstrates how to mark certain dates as unavailable in a RangeCalendar component. It uses the isDateUnavailable prop to define multiple unavailable date ranges and prevents selecting dates before today.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let isDateUnavailable = (date) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return <RangeCalendar aria-label=\"Trip dates\" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sectioned Picker Component with React Spectrum in TSX\nDESCRIPTION: This example shows how to use React Spectrum to create a Picker component with sections and complex options. It demonstrates the simplicity of creating accessible and feature-rich UI components using React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/introducing-react-spectrum.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Options\">\n  <Section title=\"Permission\">\n    <Item textValue=\"Read\">\n      <Book />\n      <Text>Read</Text>\n      <Text slot=\"description\">Read Only</Text>\n    </Item>\n    <Item textValue=\"Write\">\n      <Draw />\n      <Text>Write</Text>\n      <Text slot=\"description\">Read and Write Only</Text>\n    </Item>\n    <Item textValue=\"Admin\">\n      <BulkEditUsers />\n      <Text>Admin</Text>\n      <Text slot=\"description\">Full access</Text>\n    </Item>\n  </Section>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time with ZonedDateTime in React\nDESCRIPTION: Retrieves the current time as a ZonedDateTime object in specified time zones using the now function, including getting the user's local time zone with getLocalTimeZone.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {now, getLocalTimeZone} from '@internationalized/date';\n\nlet nyTime = now('America/New_York');\nlet localTime = now(getLocalTimeZone());\n```\n\n----------------------------------------\n\nTITLE: Complete Droppable ListView Implementation with React Spectrum\nDESCRIPTION: Integrates useListData, useDragAndDrop, and ListView to create a fully functional droppable list. The component accepts drops between items and onto folders, rendering folder contents with count information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextDropItem} from '@react-spectrum/dnd';\nimport Folder from '@spectrum-icons/illustrations/Folder';\nimport {Text} from '@react-spectrum/text';\nimport {useDragAndDrop} from '@react-spectrum/dnd';\n\nfunction DroppableList() {\n  let list = useListData({\n    initialItems: [\n      {id: 'f', type: 'file', name: 'Adobe AfterEffects'},\n      {id: 'g', type: 'file', name: 'Adobe Illustrator'},\n      {id: 'h', type: 'file', name: 'Adobe Lightroom'},\n      {id: 'i', type: 'file', name: 'Adobe Premiere Pro'},\n      {id: 'j', type: 'file', name: 'Adobe Fresco'},\n      {id: 'k', type: 'folder', name: 'Apps',  childNodes: []}\n    ]\n  });\n\n  let {dragAndDropHooks} = useDragAndDrop({\n    acceptedDragTypes: ['adobe-app'],\n    shouldAcceptItemDrop: (target) => !!list.getItem(target.key).childNodes,\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item: TextDropItem) => JSON.parse(await item.getText('adobe-app')))\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onItemDrop: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item: TextDropItem) => JSON.parse(await item.getText('adobe-app')))\n      );\n      let targetItem = list.getItem(target.key);\n      list.update(target.key, {...targetItem, childNodes: [...targetItem.childNodes, ...processedItems]});\n    }\n  });\n\n  return (\n    <ListView\n      aria-label=\"Droppable list view example\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      selectionMode=\"multiple\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}>\n      {item => (\n        <Item textValue={item.name} hasChildItems={item.type === 'folder'}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n          {item.type === 'folder' &&\n            <Text slot=\"description\">{`contains ${item.childNodes.length} dropped item(s)`}</Text>\n          }\n        </Item>\n      )}\n    </ListView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Popover with DialogTrigger in React (TSX)\nDESCRIPTION: Demonstrates a basic implementation of a Popover component triggered by a Button. It uses `DialogTrigger`, `Popover`, `Dialog`, `Button`, `OverlayArrow`, and `Switch` from `react-aria-components` to create a settings popover with toggle switches.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DialogTrigger, Popover, Dialog, Button, OverlayArrow, Heading, Switch} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button>Settings</Button>\n  <Popover>\n    <OverlayArrow>\n      <svg width={12} height={12} viewBox=\"0 0 12 12\"><path d=\"M0 0 L6 6 L12 0\" /></svg>\n    </OverlayArrow>\n    <Dialog>\n      <div className=\"flex-col\">\n        <Switch defaultSelected>\n          <div className=\"indicator\" /> Wi-Fi\n        </Switch>\n        <Switch defaultSelected>\n          <div className=\"indicator\" /> Bluetooth\n        </Switch>\n        <Switch>\n          <div className=\"indicator\" /> Mute\n        </Switch>\n      </div>\n    </Dialog>\n  </Popover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating Table Rows as Links via href Prop - TypeScript/React\nDESCRIPTION: This TypeScript/React snippet renders a 'Bookmarks' table where each MyRow is rendered as an anchor link by passing an href and target prop, enabling navigation to external URLs. The row's interactive behavior follows the row-action model based on the selection mode and behavior. This pattern integrates seamlessly with HTML links and can be extended to support client-side routing. No additional dependencies are required beyond the core Table components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Bookmarks\" selectionMode=\"multiple\">\n  <MyTableHeader>\n    <Column isRowHeader>Name</Column>\n    <Column>URL</Column>\n    <Column>Date added</Column>\n  </MyTableHeader>\n  <TableBody>\n    <MyRow href=\"https://adobe.com/\" target=\"_blank\">\n      <Cell>Adobe</Cell>\n      <Cell>https://adobe.com/</Cell>\n      <Cell>January 28, 2023</Cell>\n    </MyRow>\n    <MyRow href=\"https://google.com/\" target=\"_blank\">\n      <Cell>Google</Cell>\n      <Cell>https://google.com/</Cell>\n      <Cell>April 5, 2023</Cell>\n    </MyRow>\n    <MyRow href=\"https://nytimes.com/\" target=\"_blank\">\n      <Cell>New York Times</Cell>\n      <Cell>https://nytimes.com/</Cell>\n      <Cell>July 12, 2023</Cell>\n    </MyRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implementing a MenuButton Component with React Aria/Stately in TypeScript\nDESCRIPTION: This snippet defines a reusable `MenuButton` component in TypeScript using React. It utilizes `useMenuTriggerState` from `@react-stately/menu` to manage the open/closed state of the menu popover and `useMenuTrigger` from `@react-aria/menu` to get ARIA props for the trigger button and the menu itself. It conditionally renders a `Popover` component (assumed to be from a component library) containing the `Menu` component when the state is open.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {MenuTriggerProps} from '@react-stately/menu';\nimport {useMenuTriggerState} from '@react-stately/menu';\nimport {useMenuTrigger} from '@react-aria/menu';\nimport {Item} from '@react-stately/collections';\n\n// Reuse the Popover, and Button from your component library. See below for details.\nimport {Popover, Button} from 'your-component-library';\n\ninterface MenuButtonProps<T> extends AriaMenuProps<T>, MenuTriggerProps {\n  label?: string\n}\n\nfunction MenuButton<T extends object>(props: MenuButtonProps<T>) {\n  // Create state based on the incoming props\n  let state = useMenuTriggerState(props);\n\n  // Get props for the button and menu elements\n  let ref = React.useRef(null);\n  let {menuTriggerProps, menuProps} = useMenuTrigger<T>({}, state, ref);\n\n  return (\n    <>\n      <Button\n        {...menuTriggerProps}\n        buttonRef={ref}\n        style={{height: 30, fontSize: 14}}>\n        {props.label}\n        <span aria-hidden=\"true\" style={{paddingLeft: 5}}>▼</span>\n      </Button>\n      {state.isOpen &&\n        <Popover state={state} triggerRef={ref} placement=\"bottom start\">\n          <Menu\n            {...props}\n            {...menuProps} />\n        </Popover>\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Nested Columns in React Spectrum Table\nDESCRIPTION: This snippet demonstrates how to create dynamic nested columns in a React Spectrum Table using the function syntax and the childColumns prop. It defines column structure and data separately.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ColumnDefinition {\n  name: string,\n  key: string,\n  children?: ColumnDefinition[],\n  isRowHeader?: boolean\n}\n\nlet columns: ColumnDefinition[] = [\n  {name: 'Name', key: 'name', children: [\n    {name: 'First Name', key: 'first', isRowHeader: true},\n    {name: 'Last Name', key: 'last', isRowHeader: true}\n  ]},\n  {name: 'Information', key: 'info', children: [\n    {name: 'Age', key: 'age'},\n    {name: 'Birthday', key: 'birthday'}\n  ]}\n];\n\nlet rows = [\n  {id: 1, first: 'Sam', last: 'Smith', age: 36, birthday: 'May 3'},\n  {id: 2, first: 'Julia', last: 'Jones', age: 24, birthday: 'February 10'},\n  {id: 3, first: 'Peter', last: 'Parker', age: 28, birthday: 'September 7'},\n  {id: 4, first: 'Bruce', last: 'Wayne', age: 32, birthday: 'December 18'}\n];\n\n<Table aria-label=\"Example table with dynamic nested columns\">\n  <TableHeader columns={columns}>\n    {column => (\n      <Column isRowHeader={column.isRowHeader} childColumns={column.children}>\n        {column.name}\n      </Column>\n    )}\n  </TableHeader>\n  <TableBody items={rows}>\n    {item => (\n      <Row>\n        {columnKey => <Cell>{item[columnKey]}</Cell>}\n      </Row>\n    )}\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic File Tree with React Aria Components\nDESCRIPTION: This snippet shows how to create a FileTree component that renders items dynamically based on a data structure. It includes custom rendering for each item and recursive rendering of children.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TreeProps} from 'react-aria-components';\nimport {MyCheckbox} from './Checkbox';\n\nlet items = [\n  {id: 1, title: 'Documents', children: [\n    {id: 2, title: 'Project', children: [\n      {id: 3, title: 'Weekly Report', children: []}\n    ]}\n  ]},\n  {id: 4, title: 'Photos', children: [\n    {id: 5, title: 'Image 1', children: []},\n    {id: 6, title: 'Image 2', children: []}\n  ]}\n];\n\ninterface FileType {\n  id: number,\n  title: string,\n  children: FileType[]\n}\n\nfunction FileTree(props: TreeProps<FileType>) {\n  return (\n    <Tree\n      aria-label=\"Files\"\n      defaultExpandedKeys={[1, 4]}\n      items={items}\n      selectionMode=\"multiple\"\n      {...props}>\n      {function renderItem(item) {\n        return (\n          <TreeItem textValue={item.title}>\n            <MyTreeItemContent>\n              {item.title}\n              <Button\n                aria-label=\"Info\"\n                onPress={() => alert(`Info for ${item.title}...`)}>\n                ⓘ\n              </Button>\n            </MyTreeItemContent>\n            <Collection items={item.children}>\n              {renderItem}\n            </Collection>\n          </TreeItem>\n        );\n      }}\n    </Tree>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Anatomical Structure of SearchField in React Aria Components (TSX)\nDESCRIPTION: Illustrates the typical structure of a `SearchField`, including the required `Label`, `Input`, `Button` elements, and optional `Text` (for description) and `FieldError` components, all imported from `react-aria-components`. This highlights the component's composition for accessibility and information display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SearchField, Label, Input, Button, Text, FieldError} from 'react-aria-components';\n\n<SearchField>\n  <Label />\n  <Input />\n  <Button />\n  <Text slot=\"description\" />\n  <FieldError />\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: International Calendar Support with Provider - React Spectrum - TypeScript/JSX\nDESCRIPTION: Demonstrates how to localize the RangeCalendar using the Provider component with a custom locale (Hindi with the Indian calendar). The string in aria-label and the locale ensure appropriate internationalization. The selected range is managed via React state, and rendered dates are displayed as strings. Dependencies: @adobe/react-spectrum, @react-spectrum/calendar, React. Inputs: Provider locale prop, aria-label, value, onChange. Outputs: Rendered RangeCalendar and displayed start/end dates.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider} from '@adobe/react-spectrum';\\n\\nfunction Example() {\\n  let [range, setRange] = React.useState(null);\\n  return (\\n    <Provider locale=\\\"hi-IN-u-ca-indian\\\">\\n      <RangeCalendar aria-label=\\\"Date range\\\" value={range} onChange={setRange} />\\n      <p>Start date: {range?.start.toString()}</p>\\n      <p>End date: {range?.end.toString()}</p>\\n    </Provider>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Help Text and Error Handling in React\nDESCRIPTION: This example shows how to add help text and handle errors in a TagGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let defaultItems = [\n    {id: 1, name: 'News'},\n    {id: 2, name: 'Travel'},\n    {id: 3, name: 'Gaming'},\n    {id: 4, name: 'Shopping'}\n  ];\n\n  let [items, setItems] = React.useState(defaultItems);\n\n  let onRemove = (keys) => {\n    setItems(prevItems => prevItems.filter((item) => !keys.has(item.id)));\n  };\n\n  let isValid = items.length <= 3;\n\n  return (\n    <TagGroup\n      label=\"Categories\"\n      items={items}\n      onRemove={onRemove}\n      aria-label=\"TagGroup help text example\"\n      isInvalid={!isValid}\n      description=\"Please include tags for related categories.\"\n      errorMessage=\"Must contain no more than 3 tags. Please remove some.\"\n      >\n      {item => <Item>{item.name}</Item>}\n    </TagGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ListBox and Option Components using React Aria in TSX\nDESCRIPTION: This snippet defines `ListBox` and `Option` components in React (TSX) for rendering selectable lists. It uses the `useListBox` and `useOption` hooks from `@react-aria/listbox` to manage accessibility and interaction state. The `ListBox` component renders a list based on the provided state's collection, and the `Option` component renders individual list items, handling focus, selection, and disabled states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true render=false\nimport {useListBox, useOption} from '@react-aria/listbox';\n\nfunction ListBox(props) {\n  let ref = React.useRef(null);\n  let {listBoxRef = ref, state} = props;\n  let {listBoxProps} = useListBox(props, state, listBoxRef);\n\n  return (\n    <ul\n      {...listBoxProps}\n      ref={listBoxRef}\n      style={{\n        margin: 0,\n        padding: 0,\n        listStyle: \"none\",\n        maxHeight: 150,\n        overflow: \"auto\",\n        minWidth: 100,\n        background: 'lightgray'\n      }}>\n      {[...state.collection].map(item => (\n        <Option\n          key={item.key}\n          item={item}\n          state={state} />\n      ))}\n    </ul>\n  );\n}\n\nfunction Option({item, state}) {\n  let ref = React.useRef(null);\n  let {optionProps, isSelected, isFocused, isDisabled} = useOption({key: item.key}, state, ref);\n\n  return (\n    <li\n      {...optionProps}\n      ref={ref}\n      style={{\n        background: isFocused ? 'gray' : 'transparent',\n        color: isDisabled ? 'gray' : isFocused ? 'white' : 'black',\n        padding: '2px 5px',\n        outline: 'none',\n        cursor: 'pointer',\n        display: 'flex',\n        justifyContent: 'space-between',\n        gap: '10px'\n      }}>\n      {item.rendered}\n      {isSelected ? <span>✓</span> : null}\n    </li>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Reordering within a TableView in React Spectrum (TSX)\nDESCRIPTION: Defines a `ReorderableTable` component that uses the `useDragAndDrop` hook to enable reordering of rows within the same TableView. It specifies a custom drag type 'custom-app-type-reorder', accepts only this type for drops, defines an `onReorder` handler to update the list data using `list.moveBefore` or `list.moveAfter`, and restricts allowed drop operations to 'move'. The component uses `useListData` to manage the table's state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ReorderableTable() {\n  let columns = [\n    {name: 'Name', id: 'name'},\n    {name: 'Type', id: 'type'},\n    {name: 'Date Modified', id: 'date'}\n  ];\n\n  let list = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/3/2020'},\n      {id: '2', type: 'file', name: 'Adobe XD', date: '2/2/2020'},\n      {id: '3', type: 'folder', name: 'Documents', date: '5/1/2020', childNodes: []},\n      {id: '4', type: 'file', name: 'Adobe InDesign', date: '5/9/2020'},\n      {id: '5', type: 'folder', name: 'Utilities', date: '12/7/2020', childNodes: []},\n      {id: '6', type: 'file', name: 'Adobe AfterEffects', date: '6/1/2020'}\n    ]\n  });\n\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-reorder': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type-reorder'],\n    /*- begin highlight -*/\n    onReorder: async (e) => {\n      let {keys, target} = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    getAllowedDropOperations: () => ['move']\n    /*- end highlight -*/\n  });\n\n  return (\n    <TableView\n      aria-label=\"Reorderable TableView\"\n      selectionMode=\"multiple\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom KeyboardModalTrigger Component in React\nDESCRIPTION: Shows an example usage of the custom `KeyboardModalTrigger` component (defined previously). It wraps a `Modal` containing a `Dialog` and triggers the modal display when the user presses the '/' key, demonstrating the application of the context-based trigger.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<KeyboardModalTrigger keyboardShortcut=\"/\">\n  <Modal isDismissable>\n    <Dialog>\n      <Heading slot=\"title\">Command palette</Heading>\n      <p>Your cool command palette UI here!</p>\n    </Dialog>\n  </Modal>\n</KeyboardModalTrigger>\n```\n\n----------------------------------------\n\nTITLE: Complete DateField Component Structure with Accessibility Features\nDESCRIPTION: Example showing the complete DateField structure including optional description and error message elements with proper accessibility attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateField, Label, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';\n\n<DateField>\n  <Label />\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  <Text slot=\"description\" />\n  <FieldError />\n</DateField>\n```\n\n----------------------------------------\n\nTITLE: Using the RangeSlider Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'RangeSlider' component. It renders a slider control with two handles, allowing a user to select a range of values within a larger defined range. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\n<RangeSlider />\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Selection in GridList with Checkboxes (TypeScript)\nDESCRIPTION: This snippet configures a GridList to allow multiple selection using the selectionMode prop, demonstrating that checkboxes are displayed when multiple selection is enabled. Uses ExampleList with a defaultSelectedKeys array to set the initial selection. Dependencies include a multiple-selection capable ExampleList component and the underlying GridList. Inputs: aria-label, selectionMode, defaultSelectedKeys; Output: multi-select GridList UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleList\\n  aria-label=\"List with multiple selection\"\\n  /*- begin highlight -*/\\n  selectionMode=\"multiple\"\\n  /*- end highlight -*/\\n  defaultSelectedKeys={[2, 4]} />\\n\n```\n\n----------------------------------------\n\nTITLE: Building HSBA Color Picker with React Spectrum in TypeScript\nDESCRIPTION: This code demonstrates an HSBA color picker implementation with four ColorSlider components, each bound to a unique HSBA color channel. State is initialized with parseColor using an 'hsb' string, and all sliders are controlled and synchronized via React useState. Dependencies include React, parseColor, and ColorSlider; receives an initial HSBA color and allows the user to interactively adjust values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSlider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\\n  let [color, setColor] = React.useState(parseColor('hsb(0, 100%, 50%)'));\\n  return (\\n    <>\\n      <ColorSlider channel=\"hue\" value={color} onChange={setColor} />\\n      <ColorSlider channel=\"saturation\" value={color} onChange={setColor} />\\n      <ColorSlider channel=\"brightness\" value={color} onChange={setColor} />\\n      <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration for React Aria Components\nDESCRIPTION: Configuration setup for Tailwind CSS when using version 4, including necessary plugins for React Aria Components and animations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/destructive-dialog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Providing Multiple Drag Data Formats for ListBox Items - TypeScript\nDESCRIPTION: Implements a getItems function on useDragAndDrop that returns drag data for each item in multiple formats: plain text, HTML, and a custom app-specific type. Each dragged item includes these formats to maximize interoperability with both internal and external drop targets, such as emails and text editors. The ListBox and ListBoxItem components are used to render the draggable UI, while custom previews and drop targets can consume the supplied formats.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction DraggableListBox() {\\n  let items = new Map([\\n    ['ps', {name: 'Photoshop', style: 'strong'}],\\n    ['xd', {name: 'XD', style: 'strong'}],\\n    ['id', {name: 'InDesign', style: 'strong'}],\\n    ['dw', {name: 'Dreamweaver', style: 'em'}],\\n    ['co', {name: 'Connect', style: 'em'}]\\n  ]);\\n\\n  let { dragAndDropHooks } = useDragAndDrop({\\n    ///- begin collapse -///\\n    renderDragPreview(items) {\\n      return (\\n        <div className=\\\"drag-preview\\\">\\n          {items[0]['text/plain']}\\n          <span className=\\\"badge\\\">{items.length}</span>\\n        </div>\\n      );\\n    },\\n    ///- end collapse -///\\n    /*- begin highlight -*/\\n    getItems(keys) {\\n      return [...keys].map(key => {\\n        let item = items.get(key as string)!;\\n        return {\\n          'text/plain': item.name,\\n          'text/html': `<${item.style}>${item.name}</${item.style}>`,\\n          'custom-app-type': JSON.stringify({id: key, ...item})\\n        };\\n      });\\n    },\\n    /*- end highlight -*/\\n  });\\n\\n  return (\\n    <ListBox aria-label=\\\"Draggable list\\\" selectionMode=\\\"multiple\\\" items={items} dragAndDropHooks={dragAndDropHooks}>\\n      {([id, item]) => <ListBoxItem id={id} textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</ListBoxItem>}\\n    </ListBox>\\n  );\\n}\\n\\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\\n  <DraggableListBox />\\n  {/* see below */}\\n  <DroppableListBox />\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Event Handling in ActionMenu with React Spectrum\nDESCRIPTION: Demonstrates how to handle user interactions by implementing the onAction callback that receives the selected item's key.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [action, setAction] = React.useState(null);\n\n  return (\n    <>\n      <ActionMenu onAction={setAction}>\n        <Item key=\"cut\">Cut</Item>\n        <Item key=\"copy\">Copy</Item>\n        <Item key=\"paste\">Paste</Item>\n      </ActionMenu>\n      <p>Action: {action}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the RangeCalendar Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'RangeCalendar' component. It renders a calendar grid allowing users to select a contiguous range of dates. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<RangeCalendar />\n```\n\n----------------------------------------\n\nTITLE: Basic RadioGroup Example in React\nDESCRIPTION: Demonstrates a simple RadioGroup with two Radio options for selecting a favorite pet.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Individual React Spectrum Components - Bash\nDESCRIPTION: This snippet demonstrates how to install an individual React Spectrum component (Button) using the yarn package manager. You must have Node.js and yarn installed as prerequisites. The example installs the stable version of @react-spectrum/button without specifying a specific version; the actual output is a change to your project's package.json dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/versioning.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-spectrum/button\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom FieldGroup Component using TextFieldContext Provider (TSX)\nDESCRIPTION: Defines a custom `FieldGroup` component in React. It uses `TextFieldContext.Provider` to pass the `isDisabled` prop down to any nested `TextField` components, allowing the entire group to be disabled centrally. This illustrates building custom compositional APIs using React Aria contexts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextFieldContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction FieldGroup({children, isDisabled}: FieldGroupProps) {\n  return (\n    /*- begin highlight -*/\n    <TextFieldContext.Provider value={{isDisabled}}>\n    {/*- end highlight -*/}\n      {children}\n    </TextFieldContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a ComboBox with CSS\nDESCRIPTION: CSS styling for the ComboBox component, including styles for the input field, dropdown button, popover, and list items. The styles provide visual feedback for different states like focus, hover, and selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ComboBox {\n  color: var(--text-color);\n\n  .react-aria-Input {\n    margin: 0;\n    font-size: 1.072rem;\n    background: var(--field-background);\n    color: var(--field-text-color);\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    padding: 0.286rem 2rem 0.286rem 0.571rem;\n    vertical-align: middle;\n    outline: none;\n\n    &[data-focused] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n\n  .react-aria-Button {\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n    forced-color-adjust: none;\n    border-radius: 4px;\n    border: none;\n    margin-left: -1.714rem;\n    width: 1.429rem;\n    height: 1.429rem;\n    padding: 0;\n    font-size: 0.857rem;\n    cursor: default;\n\n    &[data-pressed] {\n      box-shadow: none;\n      background: var(--highlight-background);\n    }\n  }\n}\n\n.react-aria-Popover[data-trigger=ComboBox] {\n  width: var(--trigger-width);\n\n  .react-aria-ListBox {\n    display: block;\n    width: unset;\n    max-height: inherit;\n    min-height: unset;\n    border: none;\n\n    .react-aria-Header {\n      padding-left: 1.571rem;\n    }\n  }\n\n  .react-aria-ListBoxItem {\n    padding: 0 0.571rem 0 1.571rem;\n\n    &[data-focus-visible] {\n      outline: none;\n    }\n\n    &[data-selected] {\n      font-weight: 600;\n      background: unset;\n      color: var(--text-color);\n\n      &::before {\n        content: '✓';\n        content: '✓' / '';\n        alt: ' ';\n        position: absolute;\n        top: 4px;\n        left: 4px;\n      }\n    }\n\n    &[data-focused],\n    &[data-pressed] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Implementation\nDESCRIPTION: Demonstrates a basic form implementation with email and password fields and a remember me checkbox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/form/docs/Form.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Form maxWidth=\"size-3600\">\n  <TextField label=\"Email\" />\n  <TextField label=\"Password\" />\n  <Checkbox>Remember me</Checkbox>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Checkboxes in React Aria CheckboxGroup (TSX)\nDESCRIPTION: This TSX example illustrates how to disable a specific `Checkbox` within a `CheckboxGroup` by applying the `isDisabled` prop directly to that `Checkbox`. Other checkboxes in the group remain interactive. Requires `CheckboxGroup` and `Checkbox` components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckboxGroup label=\"Favorite sports\">\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\" isDisabled>Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default React Aria Button Class with Custom ClassName (JSX)\nDESCRIPTION: This JSX code demonstrates passing a custom className ('my-button') to a React Aria Button component, overriding the default provided by the library. It showcases the ability to use personal or project-specific styles through className without dependency on default class structure. No external dependencies besides a compatible Button component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Button className=\"my-button\">\n  {/* ... */}\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Drag Preview with React Spectrum (tsx)\nDESCRIPTION: This snippet demonstrates how to implement a custom drag preview in a React Spectrum component using the `renderDragPreview` function within the `useDragAndDrop` hook. It shows rendering a `div` that displays the text of the first dragged item and a badge indicating the total number of items being dragged. The example uses `useListData` for managing list state and includes configuration for `getItems` and `onReorder` (partially collapsed).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\nimport {useDragAndDrop} from 'react-aria-components';\n\nfunction Example() {\n  let {dragAndDropHooks} = useDragAndDrop({\n    // ...\n    ///- begin collapse -///\n    getItems: (keys) => [...keys].map(key => ({'text/plain': list.getItem(key).name})),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    },\n    ///- end collapse -///\n    ///- begin highlight -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    }\n    ///- end highlight -///\n  });\n\n  ///- begin collapse -///\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Adobe Photoshop'},\n      {id: 2, name: 'Adobe XD'},\n      {id: 3, name: 'Adobe Dreamweaver'},\n      {id: 4, name: 'Adobe InDesign'},\n      {id: 5, name: 'Adobe Connect'}\n    ]\n  });\n\n  return (\n    <MyGridList aria-label=\"Reorderable list\" selectionMode=\"multiple\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n      {item => <MyItem>{item.name}</MyItem>}\n    </MyGridList>\n  );\n  ///- end collapse -///\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RouterProvider for TanStack Router with React Aria (TypeScript)\nDESCRIPTION: This snippet integrates React Aria's RouterProvider into a root route using TanStack Router in a TypeScript React application. It uses the router.navigate and router.buildLocation methods to supply custom navigate and useHref implementations, respectively. It also demonstrates augmenting the react-aria-components RouterConfig to enable TypeScript autocomplete for hrefs, requiring TanStack Router and React Aria Components as dependencies. Inputs include the router's to and navigation options objects; the output is a routed React app with enhanced accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRouter, type NavigateOptions, type ToOptions} from '@tanstack/react-router';\nimport {RouterProvider} from 'react-aria-components';\n\ndeclare module 'react-aria-components' {\n  interface RouterConfig {\n    href: ToOptions['to'];\n    routerOptions: Omit<NavigateOptions, keyof ToOptions>;\n  }\n}\n\nfunction RootRoute() {\n  let router = useRouter();\n  return (\n    <RouterProvider \n      navigate={(to, options) => router.navigate({to, ...options})}\n      useHref={to => router.buildLocation({to}).href}>\n      {/* ...*/}\n    </RouterProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Controlled and Uncontrolled TimeField Values with React in TypeScript\nDESCRIPTION: Demonstrates how to use a TimeField component with both controlled and uncontrolled values in React using TypeScript. Requires the @internationalized/date package for Time object creation, and proper React state management for controlled values. Users can provide an initial defaultValue for uncontrolled input or manage the current value and changes with the value and onChange props; both methods allow selection and display of time data. Inputs are Time objects, and outputs are user-modified time values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Time} from '@internationalized/date';\\n\\nfunction Example() {\\n  let [value, setValue] = React.useState(new Time(11, 45));\\n\\n  return (\\n    <>\\n      <MyTimeField\\n        label=\"Time (uncontrolled)\"\\n        defaultValue={new Time(11, 45)} />\\n      <MyTimeField\\n        label=\"Time (controlled)\"\\n        value={value}\\n        onChange={setValue} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Drag-and-Drop Reordering in GridList (TypeScript)\nDESCRIPTION: Presents a complete example of implementing reordering within a GridList using the useDragAndDrop and useListData hooks. Items contain names of Adobe products, the dragAndDropHooks provide onReorder and getItems logic, and final rendering is wrapped in a custom MyGridList with drag-and-drop hooks attached. Dependencies: 'react-stately', 'react-aria-components', MyGridList, and MyItem. Supports keyboard and pointer reordering. Limitation: requires proper MyItem handling of drag slot.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\\nimport {useListData} from 'react-stately';\\nimport {useDragAndDrop} from 'react-aria-components';\\n\\nfunction Example() {\\n  let list = useListData({\\n    initialItems: [\\n      {id: 1, name: 'Adobe Photoshop'},\\n      {id: 2, name: 'Adobe XD'},\\n      {id: 3, name: 'Adobe Dreamweaver'},\\n      {id: 4, name: 'Adobe InDesign'},\\n      {id: 5, name: 'Adobe Connect'}\\n    ]\\n  });\\n\\n  ///- begin highlight -///\\n  let {dragAndDropHooks} = useDragAndDrop({\\n    getItems: (keys) => [...keys].map(key => ({'text/plain': list.getItem(key).name})),\\n    onReorder(e) {\\n      if (e.target.dropPosition === 'before') {\\n        list.moveBefore(e.target.key, e.keys);\\n      } else if (e.target.dropPosition === 'after') {\\n        list.moveAfter(e.target.key, e.keys);\\n      }\\n    }\\n  });\\n  ///- end highlight -///\\n\\n  return (\\n    <MyGridList\\n      aria-label=\\\"Reorderable list\\\"\\n      selectionMode=\\\"multiple\\\"\\n      items={list.items}\\n      ///- begin highlight -///\\n      dragAndDropHooks={dragAndDropHooks}\\n      ///- end highlight -///\\n    >\\n      {item => <MyItem>{item.name}</MyItem>}\\n    </MyGridList>\\n  );\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating React Spectrum Provider with Remix (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to integrate React Spectrum's `Provider` into a Remix application's root component (`app/root.tsx`). It uses `useNavigate` and `useHref` from `@remix-run/react` (React Router) for the `router` prop of the `Provider`. Type augmentation for `RouterConfig` is also included to enhance TypeScript support for router options. The `Outlet` component renders the nested routes within the provider context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// app/root.tsx\nimport {useNavigate, useHref, Outlet} from '@remix-run/react';\nimport type {NavigateOptions} from 'react-router-dom';\nimport {Provider, defaultTheme} from '@adobe/react-spectrum';\n\ndeclare module '@adobe/react-spectrum' {\n  interface RouterConfig {\n    routerOptions: NavigateOptions\n  }\n}\n\nexport default function App() {\n  let navigate = useNavigate();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        {/* ... */}\n      </head>\n      <body>\n        <Provider theme={defaultTheme} router={{navigate, useHref}}>\n          <Outlet />\n        </Provider>\n        {/* ... */}\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Single Selection Mode in React Spectrum ListBox (TSX)\nDESCRIPTION: This snippet illustrates how to configure a `ListBox`, which supports multiple selection by default, to only allow single selection. This is achieved by setting the `selectionMode` prop to `\"single\"`. Although `selectedKeys` still accepts and `onSelectionChange` returns a Set, the Set will only ever contain zero or one key.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/selection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet [selectedKeys, setSelectedKeys] = useState(new Set());\n\n<ListBox\n  selectionMode=\"single\"\n  selectedKeys={selectedKeys}\n  onSelectionChange={setSelectedKeys}>\n  <Item key=\"one\">One</Item>\n  <Item key=\"two\">Two</Item>\n  <Item key=\"three\">Three</Item>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Enabling Text Wrapping in ListView Rows using overflowMode - React Spectrum - TypeScript/TSX\nDESCRIPTION: This snippet shows how to prevent text truncation in ListView rows by passing overflowMode='wrap', allowing content to wrap within its container. Inputs set width and accessibility attributes, and the ListExample component is reused. Outputs a ListView with properly wrapped row contents, crucial for displaying longer text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_26\n\nLANGUAGE: TSX\nCODE:\n```\n<ListExample overflowMode=\\\"wrap\\\" aria-label=\\\"Text wrapping ListView example\\\" width=\\\"size-2000\\\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Dates in DatePicker\nDESCRIPTION: This example demonstrates how to mark certain dates as unavailable in DatePicker using the isDateUnavailable prop, making weekends and specific date ranges unselectable for appointment booking.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today, isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let {locale} = useLocale();\n  return (\n    <DatePicker\n      label=\"Appointment date\"\n      minValue={today(getLocalTimeZone())}\n      /*- begin highlight -*/\n      isDateUnavailable={date => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0)}\n      /*- end highlight -*/\n      validationBehavior=\"native\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Label Position in DateRangePicker\nDESCRIPTION: Example showing how to position the label to the side and align it to the end of the DateRangePicker component using labelPosition and labelAlign props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" labelPosition=\"side\" labelAlign=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Icons in ToggleButton via Render Props (JSX)\nDESCRIPTION: This JSX example utilizes render props to conditionally render elements (such as icons) inside a ToggleButton based on its isSelected state. Depending on the selection, either PinnedIcon or UnpinnedIcon is displayed, alongside a textual label. This showcases advanced compositional flexibility for icon switching and dynamic button content rendering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButton>\\n  {({isSelected}) => (\\n    <>\\n      {isSelected ? <PinnedIcon /> : <UnpinnedIcon />}\\n      Pin\\n    </>\\n  )}\\n</ToggleButton>\\n\n```\n\n----------------------------------------\n\nTITLE: Disabling All Tabs in React Spectrum\nDESCRIPTION: This snippet shows how to disable the entire `Tabs` component, including all individual tabs within it. Setting the `isDisabled` prop to `true` on the `Tabs` component prevents user interaction with any of the tabs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs aria-label=\"Input settings\" isDisabled>\n  <Item key=\"mouse\">Mouse Settings</Item>\n  <Item key=\"keyboard\">Keyboard Settings</Item>\n  <Item key=\"gamepad\">Gamepad Settings</Item>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Styling ColorSwatchPicker Components with CSS\nDESCRIPTION: Examples of how to style ColorSwatchPicker components using CSS selectors. It shows targeting the main component and its items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSwatchPicker {\n  /* ... */\n}\n\n.react-aria-ColorSwatchPickerItem[data-selected] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating CheckboxGroup with HTML Forms using Name and Value Props in TypeScript\nDESCRIPTION: This TSX snippet demonstrates how to use the name prop on MyCheckboxGroup and value prop on MyCheckbox to integrate a CheckboxGroup with HTML forms for submission. Dependencies are MyCheckboxGroup and MyCheckbox wrappers using react-aria-components. Key input is the name used in form serialization, with outputs being selected checkbox values representing form field data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n<MyCheckboxGroup label=\"Favorite sports\" name=\"sports\">\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation in React Spectrum\nDESCRIPTION: Demonstrates a simple implementation of Tabs with static content, including TabList and TabPanels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs aria-label=\"History of Ancient Rome\">\n  <TabList>\n    <Item key=\"FoR\">Founding of Rome</Item>\n    <Item key=\"MaR\">Monarchy and Republic</Item>\n    <Item key=\"Emp\">Empire</Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"FoR\">\n      Arma virumque cano, Troiae qui primus ab oris.\n    </Item>\n    <Item key=\"MaR\">\n      Senatus Populusque Romanus.\n    </Item>\n    <Item key=\"Emp\">\n      Alea jacta est.\n    </Item>\n  </TabPanels>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Handling onChange Events with State - React Spectrum - TypeScript/TSX\nDESCRIPTION: Illustrates how to handle user interaction with the Switch using the onChange event. The Switch toggles its state and updates the parent with setSelection when pressed. An additional <div> displays the current state as a string. React.useState is used for state management, and onChange passes the updated state to setSelection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/docs/Switch.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [selected, setSelection] = React.useState(false);\\n\\n  return (\\n    <>\\n      <Switch onChange={setSelection}>\\n        Switch Label\\n      </Switch>\\n      <div>The Switch is on: {selected.toString()}</div>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Multiple Selection State in ActionGroup (TSX)\nDESCRIPTION: Shows how to enable and control multiple selections using `selectionMode=\"multiple\"`, `selectedKeys`, and `onSelectionChange`. The state (`selected`) holds a Set of keys corresponding to the selected items, managed via `React.useState`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['list']));\n\n  return (\n    <>\n      <ActionGroup selectionMode=\"multiple\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <Item key=\"grid\">Grid view</Item>\n        <Item key=\"list\">List view</Item>\n        <Item key=\"gallery\">Gallery view</Item>\n      </ActionGroup>\n      <p>Current selections (controlled): {[...selected].join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Items into Tree Data - useTreeData API (TypeScript)\nDESCRIPTION: These snippets demonstrate inserting new child items into an existing tree structure managed by useTreeData, using methods such as insert, insertAfter, append, and prepend. Each method requires a reference key (e.g., parentKey or sibling key) and the new item data; multiple items can be inserted at once with convenience overloads. Inputs include keys for positioning and item objects, with the output being an updated immutable state. The dependencies remain @react-stately/data and related React components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useTreeData.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// Insert an item into the root, after 'People'\ntree.insert(null, 1, {name: 'Plants'});\n\n// Insert an item into the 'People' node, after 'David'\ntree.insert('People', 1, {name: 'Judy'});\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// Insert an item before another item\ntree.insertAfter('Kangaroo', {name: 'Horse'});\n\n// Insert multiple items before another item\ntree.insertAfter('Kangaroo', {name: 'Horse'}, {name: 'Giraffe'});\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// Insert an item after another item\ntree.insertAfter('Kangaroo', {name: 'Horse'});\n\n// Insert multiple items after another item\ntree.insertAfter('Kangaroo', {name: 'Horse'}, {name: 'Giraffe'});\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// Append an item to the root\ntree.append(null, {name: 'Plants'});\n\n// Append an item to the 'People' node\ntree.append('People', {name: 'Plants'});\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// Prepend an item to the root\ntree.prepend(null, {name: 'Plants'});\n\n// Prepend an item at the start of the 'People' node\ntree.prepend('People', {name: 'Plants'});\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Items with Links in React Spectrum\nDESCRIPTION: Shows how to create menu items that act as links in a React Spectrum Menu. It uses the href prop on MenuItem components to create clickable links.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MyMenuButton label=\"Links\">\n  <MenuItem href=\"https://adobe.com/\" target=\"_blank\">Adobe</MenuItem>\n  <MenuItem href=\"https://apple.com/\" target=\"_blank\">Apple</MenuItem>\n  <MenuItem href=\"https://google.com/\" target=\"_blank\">Google</MenuItem>\n  <MenuItem href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</MenuItem>\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom NumberField with React Aria Hooks\nDESCRIPTION: This example demonstrates building a custom NumberField implementation using React Aria hooks while still allowing the use of standard React Aria Components as children. It uses Provider to supply context values to child components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {NumberFieldProps} from 'react-aria-components';\nimport {Provider, GroupContext, InputContext, LabelContext, ButtonContext} from 'react-aria-components';\nimport {useNumberFieldState} from 'react-stately';\nimport {useNumberField, useLocale} from 'react-aria';\n\nfunction CustomNumberField(props: NumberFieldProps) {\n  // Follow the hook docs...\n  let {locale} = useLocale();\n  let state = useNumberFieldState({...props, locale});\n  let ref = useRef<HTMLInputElement>(null);\n  let {\n    labelProps,\n    groupProps,\n    inputProps,\n    incrementButtonProps,\n    decrementButtonProps\n  } = useNumberField(props, state, ref);\n\n  // Provide values for the child components via context.\n  return (\n    /*- begin highlight -*/\n    <Provider\n      values={[\n        [GroupContext, groupProps],\n        [InputContext, {...inputProps, ref}],\n        [LabelContext, labelProps],\n        [ButtonContext, {\n          slots: {\n            increment: incrementButtonProps,\n            decrement: decrementButtonProps\n          }\n        }]\n      ]}>\n      {props.children}\n    </Provider>\n    /*- end highlight -*/\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a File with FileTrigger and Button - React Spectrum (TypeScript)\nDESCRIPTION: This React functional component demonstrates how to integrate the FileTrigger and Button components from react-aria-components to allow users to select a file. The FileTrigger wraps a Button, triggering the system file dialog. Selected file names are captured via the onSelect handler and displayed in the component. Dependencies include react, react-aria-components, and a Button import. The onSelect handler receives a FileList, which is converted into an array of filenames and stored in component state. Supports single selection. Inputs include user file selection; output is the rendering of selected filenames. This provides accessible, custom-styled file input.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/FileTrigger.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FileTrigger, Button} from 'react-aria-components';\n\nfunction Example(){\n  let [file, setFile] = React.useState(null);\n\n  return (\n    <>\n      <FileTrigger\n        onSelect={(e) => {\n          let files = Array.from(e);\n          let filenames = files.map((file) => file.name);\n          setFile(filenames);\n        }}>\n        <Button>Select a file</Button>\n      </FileTrigger>\n      {file && file}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Transparent Colors with Checkerboard and Slash - TypeScript/JSX\nDESCRIPTION: This example illustrates how fully and partially transparent colors are handled visually by ColorSwatch. It initializes the color state using parseColor with an HSLA string representing full transparency. The ColorSlider manipulates the 'alpha' channel, allowing for runtime adjustments of opacity. As color transparency changes, the swatch reflects this by showing a checkerboard (partial transparency) or a red slash (full transparency). Required dependencies include @react-spectrum/color, React useState, parseColor, ColorSlider, and Flex. Input is an HSLA string and slider changes; output is an accessibility-aware swatch with dynamic transparency feedback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor, ColorSlider} from '@react-spectrum/color';\\n\\nfunction Example() {\\n  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0)'));\\n  return (\\n    <Flex direction=\\\"column\\\" gap=\\\"size-100\\\">\\n      <ColorSlider value={color} onChange={setColor} channel=\\\"alpha\\\" />\\n      <ColorSwatch color={color} />\\n    </Flex>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Drop Operation in React Table\nDESCRIPTION: This snippet demonstrates how to implement a basic drop operation in a React table using the useDragAndDrop hook. It shows how to set up a drop target that only accepts PNG images and provides appropriate visual feedback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getDropOperation: () => 'copy',\n    acceptedDragTypes: ['image/png'],\n    async onRootDrop(e) {\n      // ...\n    }\n  });\n\n  // See \"Files\" example above...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Collections in Select Component\nDESCRIPTION: Example showing how to use the Collection Components API with dynamic data sources. The code demonstrates passing an iterable list of options to the Select component using the items prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  return (\n    <MySelect label=\"Pick an engineering major\" items={options}>\n      {(item) => <ListBoxItem>{item.name}</ListBoxItem>}\n    </MySelect>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tabs Density using React Spectrum Tabs (TypeScript)\nDESCRIPTION: Demonstrates Tabs with density set to 'compact', resulting in reduced vertical spacing to fit more tabs or content in constrained spaces. No selection or event handler logic. Requires @adobe/react-spectrum, with tab keys and labels statically defined. Inputs: static tab list; Outputs: compact UI rendering. Applicable for UI density adjustments.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\n<Tabs aria-label=\"Chat log density example\" density=\"compact\">\\n  <TabList>\\n    <Item key=\"item1\">\\n      John Doe\\n    </Item>\\n    <Item key=\"item2\">\\n      Jane Doe\\n    </Item>\\n    <Item key=\"item3\">\\n      Joe Bloggs\\n    </Item>\\n  </TabList>\\n  <TabPanels>\\n    <Item key=\"item1\">\\n      There is no prior chat history with John Doe.\\n    </Item>\\n    <Item key=\"item2\">\\n      There is no prior chat history with Jane Doe.\\n    </Item>\\n    <Item key=\"item3\">\\n      There is no prior chat history with Joe Bloggs.\\n    </Item>\\n  </TabPanels>\\n</Tabs>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection in ComboBox with React Spectrum\nDESCRIPTION: This example demonstrates how to implement controlled and uncontrolled selection in a ComboBox component. It shows how to set default selected items and manage selection state using React hooks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Adobe Photoshop'},\n    {id: 2, name: 'Adobe XD'},\n    {id: 3, name: 'Adobe InDesign'},\n    {id: 4, name: 'Adobe AfterEffects'},\n    {id: 5, name: 'Adobe Illustrator'},\n    {id: 6, name: 'Adobe Lightroom'},\n    {id: 7, name: 'Adobe Premiere Pro'},\n    {id: 8, name: 'Adobe Fresco'},\n    {id: 9, name: 'Adobe Dreamweaver'}\n  ];\n  let [productId, setProductId] = React.useState<Key>(9);\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <ComboBox\n        label=\"Pick an Adobe product (uncontrolled)\"\n        defaultItems={options}\n        defaultSelectedKey={9}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n\n      <ComboBox\n        label=\"Pick an Adobe product (controlled)\"\n        defaultItems={options}\n        selectedKey={productId}\n        onSelectionChange={selected => setProductId(selected)}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Reusable TableHeader and Row Components with Selection and Drag Support\nDESCRIPTION: Creates customized TableHeader and Row components that automatically handle selection checkboxes and drag handles, using the useTableOptions hook to determine selection behavior and drag capability.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TableHeaderProps, RowProps} from 'react-aria-components';\nimport {Collection, useTableOptions} from 'react-aria-components';\n\nexport function MyTableHeader<T extends object>({columns, children}: TableHeaderProps<T>) {\n  let {selectionBehavior, selectionMode, allowsDragging} = useTableOptions();\n\n  return (\n    <TableHeader>\n      {/* Add extra columns for drag and drop and selection. */}\n      {allowsDragging && <Column />}\n      {selectionBehavior === 'toggle' && <Column>{selectionMode === 'multiple' && <MyCheckbox slot=\"selection\" />}</Column>}\n      <Collection items={columns}>\n        {children}\n      </Collection>\n    </TableHeader>\n  );\n}\n\nexport function MyRow<T extends object>({id, columns, children, ...otherProps}: RowProps<T>) {\n  let {selectionBehavior, allowsDragging} = useTableOptions();\n\n  return (\n    <Row id={id} {...otherProps}>\n      {allowsDragging && <Cell><Button slot=\"drag\">≡</Button></Cell>}\n      {selectionBehavior === 'toggle' && <Cell><MyCheckbox slot=\"selection\" /></Cell>}\n      <Collection items={columns}>\n        {children}\n      </Collection>\n    </Row>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Delay in React Spectrum\nDESCRIPTION: This example shows how to customize the delay before a tooltip appears when hovering over the trigger element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger delay={0}>\n  <ActionButton aria-label=\"Save\"><Save /></ActionButton>\n  <Tooltip>Saving applies your new settings right away.</Tooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing usePress Hook in a React Component\nDESCRIPTION: This example demonstrates how to use the usePress hook in a React component. It shows handling press events, updating state, and applying conditional styling based on the press state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/usePress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [events, setEvents] = React.useState([]);\n  let {pressProps, isPressed} = usePress({\n    onPressStart: e => setEvents(\n      events => [...events, `press start with ${e.pointerType}`]\n    ),\n    onPressEnd: e => setEvents(\n      events => [...events, `press end with ${e.pointerType}`]\n    ),\n    onPress: e => setEvents(\n      events => [...events, `press with ${e.pointerType}`]\n    )\n  });\n\n  return (\n    <>\n      <div\n        {...pressProps}\n        style={{\n          background: isPressed ? 'darkgreen' : 'green',\n          color: 'white',\n          display: 'inline-block',\n          padding: 4,\n          cursor: 'pointer'\n        }}\n        role=\"button\"\n        tabIndex={0}>\n        Press me!\n      </div>\n      <ul\n        style={{\n          maxHeight: '200px',\n          overflow: 'auto'\n        }}>\n        {events.map((e, i) => <li key={i}>{e}</li>)}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label within React Aria SearchField in TSX\nDESCRIPTION: This TSX snippet shows how to use the custom MyCustomLabel component as a replacement for the default Label within the React Aria SearchField component. The code assumes prior definition and import of MyCustomLabel and Input components. MyCustomLabel is supplied as a direct child of SearchField, demonstrating context-based prop injection, and expects to participate in accessibility and interaction patterns defined by React Aria. The output is a composed React element suitable for use in a TypeScript/TSX application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: TSX\nCODE:\n```\n<SearchField>\\n  {/*- begin highlight -*/}\\n  <MyCustomLabel>Name</MyCustomLabel>\\n  {/*- end highlight -*/}\\n  <Input />\\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: Controlling ToggleButton Selection State with useState (TypeScript)\nDESCRIPTION: This TypeScript/TSX example demonstrates how to control the selection state of ToggleButton in a React functional component using useState. The snippet imports React and ToggleButton, maintains a boolean isSelected state, and updates the state via onChange. It is designed to show controlled component patterns, especially useful for integrating with larger forms or maintaining UI state consistency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [isSelected, setSelected] = React.useState(false);\\n\\n  return (\\n    <ToggleButton\\n      isSelected={isSelected}\\n      onChange={setSelected}\\n      aria-label=\"Star\">\\n      ★\\n    </ToggleButton>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Daylight Saving Time Transitions in ZonedDateTime Operations\nDESCRIPTION: Illustrates how adding durations to ZonedDateTime objects handles daylight saving time transitions. It shows examples for both \"spring forward\" and \"fall back\" transitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// A \"spring forward\" transition\nlet date = parseZonedDateTime('2020-03-08T01:00-08:00[America/Los_Angeles]');\ndate.add({hours: 1}); // 2020-03-08T03:00-07:00[America/Los_Angeles]\n\n// A \"fall back\" transition\nlet date = parseZonedDateTime('2020-11-01T01:00-07:00[America/Los_Angeles]');\ndate.add({hours: 1}); // 2020-11-01T01:00-08:00[America/Los_Angeles]\ndate.add({hours: 2}); // 2020-11-01T02:00-08:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Information using JSX\nDESCRIPTION: Uses the `HeaderInfo` component to display header information for the documentation page. It passes the imported `packageData` and specifies the component name (`useComboBoxState`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/combobox/docs/useComboBoxState.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useComboBoxState']} />\n```\n\n----------------------------------------\n\nTITLE: Controlling Accordion Expansion via State - React Spectrum - TSX\nDESCRIPTION: This snippet demonstrates programmatically controlling the expanded panels of an Accordion using React state and the onExpandedChange prop. It uses useState to manage a Set<Key> representing expanded Disclosure ids. Dependencies include React and the @react-spectrum/accordion package. Inputs include controlled expandedKeys and Disclosure ids. Output is a dynamic Accordion UI with live reporting of expanded keys.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Accordion.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Key} from \"@react-types/shared\";\n\nfunction ControlledExpansion() {\n  let [expandedKeys, setExpandedKeys] = React.useState<Set<Key>>(new Set(['personal']))\n\n  return (\n    <>\n      <Accordion expandedKeys={expandedKeys} onExpandedChange={setExpandedKeys}>\n        <Disclosure id=\"personal\">\n          <DisclosureTitle>Personal Information</DisclosureTitle>\n          <DisclosurePanel>\n            Personal information form here.\n          </DisclosurePanel>\n        </Disclosure>\n        <Disclosure id=\"billing\">\n          <DisclosureTitle>Billing Address</DisclosureTitle>\n          <DisclosurePanel>\n            Billing address form here.\n          </DisclosurePanel>\n        </Disclosure>\n      </Accordion>\n      <div style={{marginTop: '20px'}}>You have expanded: {expandedKeys}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Populating ComboBox Sections - React Spectrum - TypeScript\nDESCRIPTION: This TypeScript/React snippet demonstrates rendering ComboBox grouped sections from hierarchical dynamic data using defaultItems prop and <Collection>. Each section contains an array of child items, and headers are generated dynamically. Inputs include a nested options data structure; output is a ComboBox with dynamically generated sections and items. Requires react-aria-components, React, and assumes a MyComboBox component. Ensure data structure matches expected format.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\nimport {Collection} from 'react-aria-components';\n\nfunction Example() {\n  let options = [\n    {name: 'Fruit', children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Orange'},\n      {name: 'Honeydew'},\n      {name: 'Grapes'},\n      {name: 'Watermelon'},\n      {name: 'Cantaloupe'},\n      {name: 'Pear'}\n    ]},\n    {name: 'Vegetable', children: [\n      {name: 'Cabbage'},\n      {name: 'Broccoli'},\n      {name: 'Carrots'},\n      {name: 'Lettuce'},\n      {name: 'Spinach'},\n      {name: 'Bok Choy'},\n      {name: 'Cauliflower'},\n      {name: 'Potatoes'}\n    ]}\n  ];\n\n  return (\n    <MyComboBox label=\"Preferred fruit or vegetable\" defaultItems={options}>\n      {section => (\n        <ListBoxSection id={section.name}>\n          <Header>{section.name}</Header>\n          <Collection items={section.children}>\n            {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n          </Collection>\n        </ListBoxSection>\n      )}\n    </MyComboBox>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Drag and Drop with React Spectrum Components\nDESCRIPTION: A simple example showing how to set up a drag and drop interface using React Spectrum components. It creates a flexible layout with a draggable list and droppable list positioned side by side with proper spacing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\n\n<Flex gap=\"size-300\">\n  <DraggableList />\n  <DroppableList />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard Activation Behavior for Tabs (TypeScript)\nDESCRIPTION: Illustrates configuring Tabs with the keyboardActivation='manual' prop to require pressing Enter or Space to confirm selection after keyboard navigation. Uses the same data structure as previous examples. No onSelectionChange is shown. Inputs: static tab array; Outputs: tab switching only upon confirm key. Depends on @adobe/react-spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\\n  let tabs = [\\n    {name: 'Triassic', children: 'The Triassic ranges roughly from 252 million to 201 million years ago, preceding the Jurassic Period.'},\\n    {name: 'Jurassic', children: 'The Jurassic ranges from 200 million years to 145 million years ago.'},\\n    {name: 'Cretaceous', children: 'The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.'}\\n  ];\\n  type Tab = typeof tabs[0];\\n\\n  return (\\n    <Tabs aria-label=\"Mesozoic time periods\" items={tabs} keyboardActivation=\"manual\">\\n      <TabList>\\n        {(item: Tab) => (\\n          <Item key={item.name}>\\n            {item.name}\\n          </Item>\\n        )}\\n      </TabList>\\n      <TabPanels>\\n        {(item: Tab) => (\\n          <Item key={item.name}>\\n            {item.children}\\n          </Item>\\n        )}\\n      </TabPanels>\\n    </Tabs>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Router with React Aria Tabs Context\nDESCRIPTION: Demonstrates how to create a custom Router component that uses TabsContext and LinkContext to manage tab selection based on link clicks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PressEvent} from 'react-aria-components';\nimport {TabsContext, LinkContext} from 'react-aria-components';\n\nfunction Router({children}) {\n  let [selectedKey, onSelectionChange] = React.useState(null);\n  let onPress = (e: PressEvent) => {\n    onSelectionChange(e.target.getAttribute('data-href'));\n  };\n\n  return (\n    <TabsContext.Provider value={{selectedKey, onSelectionChange}}>\n      <LinkContext.Provider value={{onPress}}>\n        {children}\n      </LinkContext.Provider>\n    </TabsContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Rendering Color Channel Sliders with Color Picker Components (TypeScript)\nDESCRIPTION: This snippet dynamically renders a set of color channel sliders and a selector for color spaces (RGB, HSL, HSB), leveraging getColorChannels from react-aria-components. Color sliders and selectors work together to enable fine-grained control over each color channel. The implementation requires pre-existing custom MyColorSlider, MySelect, and MyItem components and assumes an appropriate MyColorPicker that accepts defaultValue and children. The useState manages the selected color space, affecting the rendered slider channels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSpace} from 'react-aria-components';\\nimport {getColorChannels} from 'react-aria-components';\\nimport {MyColorSlider} from './ColorSlider';\\nimport {MySelect, MyItem} from './Select';\\n\\nfunction Example() {\\n  let [space, setSpace] = React.useState<ColorSpace>('rgb');\\n\\n  return (\\n    <MyColorPicker label=\\\"Fill color\\\" defaultValue=\\\"#184\\\">\\n      <MySelect aria-label=\\\"Color space\\\" selectedKey={space} onSelectionChange={s => setSpace(s as ColorSpace)}>\\n        <MyItem id=\\\"rgb\\\">RGB</MyItem>\\n        <MyItem id=\\\"hsl\\\">HSL</MyItem>\\n        <MyItem id=\\\"hsb\\\">HSB</MyItem>\\n      </MySelect>\\n      {/*- begin highlight -*/}\\n      {getColorChannels(space).map(channel => (<MyColorSlider key={channel} colorSpace={space} channel={channel} />))}\\n      <MyColorSlider channel=\\\"alpha\\\" />\\n      {/*- end highlight -*/}\\n    </MyColorPicker>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Tabs with React Aria Components\nDESCRIPTION: This example shows how to implement tabs with dynamic items that can be added or removed. It uses the items prop for data-driven rendering and Collection component to manage the relationship between tabs and their panels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Collection, Button} from 'react-aria-components';\n\nfunction Example() {\n  let [tabs, setTabs] = React.useState([\n    {id: 1, title: 'Tab 1', content: 'Tab body 1'},\n    {id: 2, title: 'Tab 2', content: 'Tab body 2'},\n    {id: 3, title: 'Tab 3', content: 'Tab body 3'}\n  ]);\n\n  let addTab = () => {\n    setTabs(tabs => [\n      ...tabs,\n      {\n        id: tabs.length + 1,\n        title: `Tab ${tabs.length + 1}`,\n        content: `Tab body ${tabs.length + 1}`\n      }\n    ]);\n  };\n\n  let removeTab = () => {\n    if (tabs.length > 1) {\n      setTabs(tabs => tabs.slice(0, -1));\n    }\n  };\n\n  return (\n    <Tabs>\n      <div style={{display: 'flex'}}>\n        <TabList aria-label=\"Dynamic tabs\" items={tabs} style={{flex: 1}}>\n          {item => <Tab>{item.title}</Tab>}\n        </TabList>\n        <div className=\"button-group\">\n          <Button onPress={addTab}>Add tab</Button>\n          <Button onPress={removeTab}>Remove tab</Button>\n        </div>\n      </div>\n      <Collection items={tabs}>\n        {item => <TabPanel>{item.content}</TabPanel>}\n      </Collection>\n    </Tabs>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.button-group {\n  border-bottom: 1px solid gray;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Highlight Selection Style in TableView\nDESCRIPTION: This example demonstrates the highlight selection style in TableView, which changes both the appearance and behavior of selection. Instead of checkboxes, selected rows are highlighted, and selection behavior follows different keyboard and mouse interaction patterns.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonTable selectionMode=\"multiple\" selectionStyle=\"highlight\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Functionality on a React Table Component\nDESCRIPTION: This code demonstrates how to implement drop functionality on a table collection using onRootDrop. It filters for text drop items, parses the custom Pokemon JSON format, and updates state with the dropped items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\nfunction Example() {\n  let [items, setItems] = React.useState<Pokemon[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => (\n        JSON.parse(await item.getText('pokemon'))\n      )));\n      setItems(items);\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableTable />\n      <PokemonTable\n        items={items}\n        dragAndDropHooks={dragAndDropHooks}\n        renderEmptyState={() => 'Drop items here'} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Folder Item Drops in React Spectrum ListView Drag-and-Drop (TypeScript)\nDESCRIPTION: This snippet extends the basic drag-and-drop ListView to support nested folder drops, including a specialized onItemDrop handler for hierarchical data. DraggableListViewFolder and DroppableListViewFolder are tailored versions for handling folders, enabling users to move items into subfolders or between lists while maintaining structure. The code uses shouldAcceptItemDrop to restrict drops to folder-type items with childNodes and updates list data to maintain nested contents. It relies on React Spectrum's useListData and useDragAndDrop, and requires an item schema supporting childNodes. Inputs are lists with files and folders; outputs are interactive lists supporting both item and folder drops. Limitation: the folder functionality expects the input data to allow nesting, and handling circular references or deeply nested drops may need further safeguards.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DraggableListViewFolder(props: DndListViewProps) {\n  let {list, ...otherProps} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    // Only allow move operations when dropping items from this list\n    getAllowedDropOperations: () => ['move'],\n    getItems: (keys) => [...keys].map(key => {\n      let item = list.getItem(key);\n      // Setup the drag types and associated info for each dragged item.\n      return {\n        'custom-app-type-folder-drop': JSON.stringify(item),\n        'text/plain': item.name\n      };\n    }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    },\n\n    ...otherProps\n  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in drag onto folder example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}>\n      {item => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListViewFolder(props: DndListViewProps) {\n  let {list, ...otherProps} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    /*- begin highlight -*/\n    // Only allow drops on items with childNodes aka folders\n    shouldAcceptItemDrop: (target) => !!list.getItem(target.key).childNodes,\n    /*- end highlight -*/\n    // Only accept items with the following drag type\n    acceptedDragTypes: ['custom-app-type-folder-drop'],\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-folder-drop')))\n      );\n\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-folder-drop')))\n      );\n      list.append(...processedItems);\n    },\n    /*- begin highlight -*/\n    onItemDrop: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-folder-drop')))\n      );\n\n      let targetItem = list.getItem(target.key);\n      list.update(target.key, {...targetItem, childNodes: [...targetItem.childNodes, ...processedItems]});\n    },\n    /*- end highlight -*/\n    ...otherProps\n  });\n\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in drop into folder example\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}>\n      {item => (\n        <Item textValue={item.name} hasChildItems={item.type === 'folder'}>\n          <Text>{item.name}</Text>\n          {item.type === 'folder' &&\n            <>\n              <Folder />\n              <Text slot=\"description\">{`contains ${item.childNodes?.length} dropped item(s)`}</Text>\n            </>\n          }\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoListFolder() {\n  let sourceList = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop'},\n      {id: '2', type: 'file', name: 'Adobe XD'},\n      {id: '3', type: 'folder', name: 'Documents', childNodes: []},\n      {id: '4', type: 'file', name: 'Adobe InDesign'},\n      {id: '5', type: 'folder', name: 'Utilities', childNodes: []},\n      {id: '6', type: 'file', name: 'Adobe AfterEffects'}\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {id: '7', type: 'folder', name: 'Pictures', childNodes: []},\n      {id: '8', type: 'file', name: 'Adobe Fresco'},\n      {id: '9', type: 'folder', name: 'Apps', childNodes: []}\n    ]\n  });\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableListViewFolder list={sourceList} />\n      <DroppableListViewFolder list={targetList} />\n    </Flex>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling 'Select All' State in React Spectrum Collections (TSX)\nDESCRIPTION: This snippet illustrates how to handle the special 'Select All' state. When all items are selected (e.g., via a checkbox or keyboard shortcut), `onSelectionChange` receives the string `\"all\"` instead of a Set of keys. The `selectedKeys` prop can also be set to `\"all\"`. Application logic, like a bulk action handler, needs to check for this string value to differentiate between selecting all items (potentially unloaded) and selecting a specific subset.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/selection.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nlet [selectedKeys, setSelectedKeys] = useState(new Set());\n\nfunction performBulkAction() {\n  if (selectedKeys === 'all') {\n    // perform action on all items\n  } else {\n    // perform action on selected items in selectedKeys\n  }\n}\n\n<ListBox\n  items={items}\n  selectedKeys={selectedKeys}\n  onSelectionChange={setSelectedKeys}>\n  {item => <Item>{item.name}</Item>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Button Component with useButton in React\nDESCRIPTION: This example demonstrates how to create a basic Button component using the useButton hook from React Aria. It shows the default usage with a native <button> element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\nimport {useRef} from 'react';\n\nfunction Button(props) {\n  let ref = useRef<HTMLButtonElement | null>(null);\n  let {buttonProps} = useButton(props, ref);\n  let {children} = props;\n\n  return (\n    <button {...buttonProps} ref={ref}>\n      {children}\n    </button>\n  );\n}\n\n<Button onPress={() => alert('Button pressed!')}>Test</Button>\n```\n\n----------------------------------------\n\nTITLE: Handling Open State Changes in DialogTrigger with React Spectrum\nDESCRIPTION: This example demonstrates how to use the 'onOpenChange' handler to track and display the current open state of a Dialog in a separate element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [state, setState] = React.useState(false);\n\n  return (\n    <Flex alignItems=\"center\" gap=\"size-100\">\n      <DialogTrigger type=\"popover\" placement=\"top\" onOpenChange={(isOpen) => setState(isOpen)}>\n        <ActionButton>Whispers</ActionButton>\n        <Dialog>\n          <Heading>Whispers and DMs</Heading>\n          <Divider />\n          <Content>\n            <Text>\n              You have 0 new messages.\n            </Text>\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n      <Text>Current open state: {state.toString()}</Text>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Tabs with CSS\nDESCRIPTION: Demonstrates how to style React Aria Tabs components using CSS selectors. It shows the default class naming convention and how to target specific states using data attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tabs {\n  /* ... */\n}\n\n.react-aria-Tab[data-selected] {\n  /* ... */\n}\n\n.react-aria-Tab[data-focus-visible] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Dismissable Dialog with onDismiss Event in React Spectrum\nDESCRIPTION: Example of a dismissable dialog with an onDismiss handler that triggers an alert when the close button is clicked. Shows how to properly chain the close function with custom handlers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let alertDismiss = (close) => {\n    close();\n    alert('Dialog dismissed.');\n  }\n  return (\n    <DialogTrigger isDismissable>\n      <ActionButton>Info</ActionButton>\n      {(close) => (\n        <Dialog onDismiss={() => alertDismiss(close)}>\n          <Heading>Version Info</Heading>\n          <Divider />\n          <Content>\n            <Text>\n              Version 1.0.0, Copyright 2020\n            </Text>\n          </Content>\n        </Dialog>\n        )}\n    </DialogTrigger>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building an HSLA Color Picker with ColorSliders in React (TSX)\nDESCRIPTION: Demonstrates how to construct an HSLA (Hue, Saturation, Lightness, Alpha) color picker. Four `ColorSlider` components are used, each controlling a specific channel (hue, saturation, lightness, alpha). They are all linked to a shared color state via the `value` and `onChange` props, initialized using `parseColor`. `Flex` arranges the sliders vertically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsla(0, 100%, 50%, 0.5)'));\n\n  return (\n    <Flex direction=\"column\">\n      <ColorSlider channel=\"hue\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"saturation\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"lightness\" value={color} onChange={setColor} />\n      <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Submenus with SubmenuTrigger - React Spectrum - TypeScript\nDESCRIPTION: Shows the use of SubmenuTrigger for nesting submenus by composition. Each SubmenuTrigger contains a root MenuItem and a submenu in a Popover. Dependencies are 'react-aria-components'. Input are custom menu items; output is a hierarchical menu with two-level nesting.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Menu, Popover, SubmenuTrigger} from 'react-aria-components';\n\n<MyMenuButton label=\"Actions\">\n  <MyItem>Cut</MyItem>\n  <MyItem>Copy</MyItem>\n  <MyItem>Delete</MyItem>\n  <SubmenuTrigger>\n    <MyItem>Share</MyItem>\n    <Popover>\n      <Menu>\n        <MyItem>SMS</MyItem>\n        <MyItem>X</MyItem>\n        <SubmenuTrigger>\n          <MyItem>Email</MyItem>\n          <Popover>\n            <Menu>\n              <MyItem>Work</MyItem>\n              <MyItem>Personal</MyItem>\n            </Menu>\n          </Popover>\n        </SubmenuTrigger>\n      </Menu>\n    </Popover>\n  </SubmenuTrigger>\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Management with useFocus Hook in React\nDESCRIPTION: Example demonstrating how to use the useFocus hook to handle focus events on an input element. The component tracks focus, blur, and focus change events and displays them in a list. The hook provides more accurate focus handling compared to native React focus events.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useFocus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useFocus} from '@react-aria/interactions';\n\nfunction Example() {\n  let [events, setEvents] = React.useState([]);\n  let {focusProps} = useFocus({\n    onFocus: e => setEvents(\n      events => [...events, 'focus']\n    ),\n    onBlur: e => setEvents(\n      events => [...events, 'blur']\n    ),\n    onFocusChange: isFocused => setEvents(\n      events => [...events, `focus change: ${isFocused}`]\n    )\n  });\n\n  return (\n    <>\n      <label htmlFor=\"example\">Example</label>\n      <input\n        {...focusProps}\n        id=\"example\" />\n      <ul\n        style={{\n          maxHeight: '200px',\n          overflow: 'auto'\n        }}>\n        {events.map((e, i) => <li key={i}>{e}</li>)}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Password Field in Realtime with React Spectrum - TypeScript/TSX\nDESCRIPTION: This snippet shows how to perform real-time validation on a password input using React Spectrum's TextField component. Validation logic checks the password's length, uppercase letter count, and symbol count, updating the component's 'validationState' and 'errorMessage' props accordingly. Requires React and @adobe/react-spectrum as dependencies, expects user input as a password value, and provides immediate feedback according to specified rules.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\n  let [password, setPassword] = React.useState('');\n  let error;\n  if (password.length < 8) {\n    error = 'Password must be 8 characters or more.';\n  } else if ((password.match(/[A-Z]/g) ?? []).length < 2) {\n    error = 'Password must include at least 2 upper case letters';\n  } else if ((password.match(/[^a-z]/ig) ?? []).length < 2) {\n    error = 'Password must include at least 2 symbols.';\n  }\n\n  return (\n    <TextField\n      label=\"Password\"\n      /*- begin highlight -*/\n      validationState={!!error ? 'invalid' : undefined}\n      errorMessage={error}\n      /*- end highlight -*/\n      value={password}\n      onChange={setPassword} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hour Cycle in DateRangePicker\nDESCRIPTION: Example demonstrating how to override the default hour format (12 or 24 hour) based on locale using the hourCycle prop, forcing the component to use 24-hour time regardless of locale.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker\n  label=\"Date range\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Implementing an Indeterminate ProgressBar\nDESCRIPTION: This example demonstrates how to create an indeterminate ProgressBar using the isIndeterminate prop and includes CSS for the animation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ProgressBar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MyProgressBar\n  aria-label=\"Loading…\"\n  isIndeterminate />\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ProgressBar {\n  &:not([aria-valuenow]) {\n    .fill {\n      width: 120px;\n      border-radius: inherit;\n      animation: indeterminate 1.5s infinite ease-in-out;\n      will-change: transform;\n    }\n  }\n}\n\n@keyframes indeterminate {\n  from {\n    transform: translateX(-100%);\n  }\n\n  to {\n    transform: translateX(250px);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DialogContainer Example with AlertDialog\nDESCRIPTION: This example demonstrates a basic implementation of DialogContainer with an AlertDialog for a delete confirmation. It uses React state to control the visibility of the dialog and handles dismissal through the onDismiss prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogContainer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example(props) {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <ActionButton onPress={() => setOpen(true)}>\n        <Delete />\n        <Text>Delete</Text>\n      </ActionButton>\n      <DialogContainer onDismiss={() => setOpen(false)} {...props}>\n        {isOpen &&\n          <AlertDialog\n            title=\"Delete\"\n            variant=\"destructive\"\n            primaryActionLabel=\"Delete\">\n            Are you sure you want to delete this item?\n          </AlertDialog>\n        }\n      </DialogContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Text Slots for Label and Description in ListBox Items (TypeScript)\nDESCRIPTION: This example demonstrates using the `Text` component with `slot=\"label\"` and `slot=\"description\"` within `ListBoxItem`s. This provides distinct content for the primary label and secondary description, improving screen reader announcements and allowing for targeted styling. The `textValue` prop is crucial for providing a plain text representation for accessibility and type-ahead.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from 'react-aria-components';\n\n<ListBox aria-label=\"Permissions\" selectionMode=\"single\">\n  <ListBoxItem textValue=\"Read\">\n    <Text slot=\"label\">Read</Text>\n    <Text slot=\"description\">Read only</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Write\">\n    <Text slot=\"label\">Write</Text>\n    <Text slot=\"description\">Read and write only</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Admin\">\n    <Text slot=\"label\">Admin</Text>\n    <Text slot=\"description\">Full access</Text>\n  </ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Popover Component Anatomy in React (TSX)\nDESCRIPTION: Shows the typical JSX structure for implementing a Popover. It highlights the relationship between the `DialogTrigger`, the trigger `Button`, the `Popover` container, the optional `OverlayArrow`, and the `Dialog` content element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DialogTrigger, Popover, Dialog, Button, OverlayArrow} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button />\n  <Popover>\n    <OverlayArrow />\n    <Dialog />\n  </Popover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Custom Duration Validation\nDESCRIPTION: Implementation of custom validation to limit date range duration to one week maximum\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <MyDateRangePicker\n    label=\"Trip dates\"\n    validate={range => range?.end.compare(range.start) > 7 ? 'Maximum stay duration is 1 week.' : null}\n    defaultValue={{\n      start: today(getLocalTimeZone()),\n      end: today(getLocalTimeZone()).add({ weeks: 1, days: 3 })\n    }} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: TimeField with Local Time Zone Conversion in React Spectrum\nDESCRIPTION: Example demonstrating how to parse an absolute time into the user's local time zone for display in a TimeField.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Stylesheet in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the global Tailwind CSS stylesheet into a React (TypeScript) project to enable Tailwind utility classes throughout the application. Make sure the referenced CSS file is correctly set up in the project's directory structure. No parameters or exports are present as it is a side-effect import.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/datepicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Calendar Values\nDESCRIPTION: Example showing how to implement both controlled and uncontrolled value states for the Calendar component using the @internationalized/date package for date manipulation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <div style={{display: 'flex', gap: 20, flexWrap: 'wrap'}}>\n      <MyCalendar\n        aria-label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <MyCalendar\n        aria-label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Popover Flipping Behavior using PopoverTrigger in TSX\nDESCRIPTION: This example illustrates the automatic flipping behavior of popovers and how to disable it. The first `PopoverTrigger` uses the default behavior (flips if needed), while the second uses `shouldFlip={false}` to prevent flipping even if the popover renders out of view.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<PopoverTrigger placement=\"bottom\" label=\"Default\">\n  <Dialog>\n    This is a popover that will flip if it can't fully render below the button.\n  </Dialog>\n</PopoverTrigger>\n\n<PopoverTrigger placement=\"bottom\" shouldFlip={false} label=\"shouldFlip=false\">\n  <Dialog>\n    This is a popover that won't flip if it can't fully render below the button.\n  </Dialog>\n</PopoverTrigger>\n```\n\n----------------------------------------\n\nTITLE: Customizing Select with Custom ClassName - React JSX\nDESCRIPTION: Demonstrates how to override the default className of a React Aria Select component for custom styling. This snippet requires React Aria and applies developer-provided classes to the Select. Inputs: custom className prop; Outputs: Select component with custom class applied.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<Select className=\"my-select\">\n  {/* ... */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Component for ComboBox\nDESCRIPTION: Popover component implementation using usePopover hook from React Aria. Handles positioning and accessibility for the dropdown overlay of the ComboBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaPopoverProps} from 'react-aria';\nimport type {OverlayTriggerState} from 'react-stately';\nimport {usePopover, Overlay, DismissButton} from '@react-aria/overlays';\n\ninterface PopoverProps extends AriaPopoverProps {\n  children: React.ReactNode,\n  state: OverlayTriggerState\n}\n\nfunction Popover({children, state, ...props}: PopoverProps) {\n  let {popoverProps} = usePopover(props, state);\n\n  return (\n    <Overlay>\n      <div\n        {...popoverProps}\n        ref={props.popoverRef as React.RefObject<HTMLDivElement>}\n        style={{\n          ...popoverProps.style,\n          background: 'lightgray',\n          border: '1px solid gray'\n        }}>\n        {children}\n        <DismissButton onDismiss={state.close} />\n      </div>\n    </Overlay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Navigation Landmark for Accessibility\nDESCRIPTION: Implementation of breadcrumbs inside a navigation landmark to improve accessibility. Uses the nav element with aria-label to create a named landmark for assistive technologies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<nav aria-label=\"Breadcrumbs\">\n  <Breadcrumbs>\n    <Breadcrumb><Link href=\"/\">Home</Link></Breadcrumb>\n    <Breadcrumb><Link href=\"/react-aria/\">React Aria</Link></Breadcrumb>\n    <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>\n  </Breadcrumbs>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Integrating RouterProvider with Next.js Pages Router\nDESCRIPTION: Provides an example of setting up `RouterProvider` in a Next.js Pages Router application, typically within `pages/_app.tsx`. It uses the `useRouter` hook from `next/router` and adapts its `push` method signature for the `navigate` prop. Includes TypeScript declaration merging for router options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/_app.tsx\nimport type { AppProps } from 'next/app';\nimport {useRouter, type NextRouter} from 'next/router';\nimport {RouterProvider} from 'react-aria-components';\n\ndeclare module 'react-aria-components' {\n  interface RouterConfig {\n    routerOptions: NonNullable<Parameters<NextRouter['push']>[2]>>\n  }\n}\n\nexport default function MyApp({Component, pageProps}: AppProps) {\n  let router = useRouter();\n\n  return (\n    <RouterProvider navigate={(href, opts) => router.push(href, undefined, opts)}>\n      <Component {...pageProps} />\n    </RouterProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stepper Component with Slotted Buttons using ButtonContext (TSX)\nDESCRIPTION: Defines a custom `Stepper` component that uses `ButtonContext.Provider` and the `slots` key. It provides specific `onPress` handlers to child `Button` components based on their `slot` prop ('increment' or 'decrement'). This demonstrates handling multiple instances of the same component type within a custom pattern.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Stepper({children}) {\n  let [value, setValue] = React.useState(0);\n\n  return (\n    <ButtonContext.Provider\n      value={{\n        slots: {\n          increment: {\n            onPress: () => setValue(value + 1)\n          },\n          decrement: {\n            onPress: () => setValue(value - 1)\n          }\n        }\n      }}>\n      {children}\n    </ButtonContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Context-Aware Custom Label Component with React Aria in TypeScript\nDESCRIPTION: This snippet creates a custom label component, MyCustomLabel, which leverages React Aria's LabelContext and the useContextProps hook to seamlessly integrate custom props and forwarded refs from its own usage and the parent context (e.g., SearchField). Dependencies are 'react', 'react-aria-components', and TypeScript types for props. The component accepts LabelProps and a forwarded ref to an HTMLLabelElement, merges them using the context, and renders a standard label element with all merged props and ref. The output is a React functional component designed for use with accessible, context-driven form elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\\nimport {LabelContext, useContextProps} from 'react-aria-components';\\n\\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\\n  // Merge the local props and ref with the ones provided via context.\\n  ///- begin highlight -///\\n  [props, ref] = useContextProps(props, ref, LabelContext);\\n  ///- end highlight -///\\n\\n  // ... your existing Label component\\n  return <label {...props} ref={ref} />;\\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Multiple DatePickers with Different Granularities (TypeScript)\nDESCRIPTION: Shows how to coordinate two DatePicker components using a shared state value, while displaying different granularities (e.g., 'day' vs 'second'). React state is used for synchronization. Granularity and value are set as props. Input is an absolute date (converted to local), and each DatePicker displays a different level of detail. Requires React and parseAbsoluteToLocal from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\\n\\n  return (\\n    <>\\n      <DatePicker\\n        label=\\\"Date and time\\\"\\n        granularity=\\\"second\\\"\\n        value={date}\\n        onChange={setDate} />\\n      <DatePicker\\n        label=\\\"Date\\\"\\n        granularity=\\\"day\\\"\\n        value={date}\\n        onChange={setDate} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Copy and Paste Functionality with useClipboard in React\nDESCRIPTION: A complete example showing how to implement a simple copyable element that provides text to the clipboard and a pasteable element that accepts text input. The example includes both components with clipboard event handlers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useClipboard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextDropItem} from '@react-aria/dnd';\nimport {useClipboard} from '@react-aria/dnd';\n\nfunction Copyable() {\n  let {clipboardProps} = useClipboard({\n    getItems() {\n      return [{\n        'text/plain': 'Hello world'\n      }];\n    }\n  });\n\n  return (\n    <div role=\"textbox\" tabIndex={0} {...clipboardProps}>\n      Hello world\n      <kbd>⌘C</kbd>\n    </div>\n  );\n}\n\nfunction Pasteable() {\n  let [pasted, setPasted] = React.useState(null);\n  let {clipboardProps} = useClipboard({\n    async onPaste(items) {\n      let pasted = await Promise.all(\n        items\n          .filter((item) =>\n            item.kind === 'text' && item.types.has('text/plain')\n          )\n          .map((item: TextDropItem) => item.getText('text/plain'))\n      );\n      setPasted(pasted.join('\\n'));\n    }\n  });\n\n  return (\n    <div role=\"textbox\" tabIndex={0} {...clipboardProps}>\n      {pasted || 'Paste here'}\n      <kbd>⌘V</kbd>\n    </div>\n  );\n}\n\n<Copyable />\n<Pasteable />\n```\n\n----------------------------------------\n\nTITLE: ARIA Labeling of ToggleButtonGroup for Accessibility (JSX)\nDESCRIPTION: Shows use of the aria-label attribute to provide an accessible label to the ToggleButtonGroup for assistive technologies. All buttons are included as options under this labeled group. Designed for accessibility compliance in React projects.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButtonGroup aria-label=\"Text style\">\n  <ToggleButton id=\"bold\">Bold</ToggleButton>\n  <ToggleButton id=\"italic\">Italic</ToggleButton>\n  <ToggleButton id=\"underline\">Underline</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressBar, ProgressCircle, and Meter Interfaces in TypeScript\nDESCRIPTION: Defines the TypeScript interfaces for the ProgressBar, ProgressCircle, and Meter components in React Spectrum. ProgressBar shows task progress with optional labels and formatting. ProgressCircle is a circular variant. Meter extends ProgressBar to indicate status levels (positive, warning, critical) using specific variants. Interfaces specify props like value, min/max values, size, labels, formatting options (Intl.NumberFormatOptions), variants, and indeterminate states. Requires ReactNode from React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Progress.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProgressBar {\n  value?: number,\n  minValue?: number,\n  maxValue?: number,\n  size?: 'S' | 'L',\n  label?: ReactNode,\n  'aria-label'?: string,\n  labelPosition?: 'top' | 'side',\n  showValueLabel?: boolean, // true by default if label, false by default if not\n  formatOptions?: Intl.NumberFormatOptions, // defaults to formatting as a percentage.\n  valueLabel?: ReactNode, // custom value label (e.g. 1 of 4)\n  variant?: 'overBackground',\n  isIndeterminate?: boolean\n}\n\ninterface ProgressCircle {\n  value?: number,\n  minValue?: number,\n  maxValue?: number,\n  size?: 'S' | 'M' | 'L',\n  variant?: 'overBackground',\n  isCentered?: boolean,\n  isIndeterminate?: boolean\n}\n\ninterface Meter extends ProgressBar {\n  variant: 'positive' | 'warning' | 'critical'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Table with React Spectrum\nDESCRIPTION: This snippet demonstrates how to create a dynamic table using React Spectrum components. It shows how to define columns and rows dynamically, and render them using the Table, TableHeader, TableBody, Column, Row, and Cell components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ExampleTable(props) {\n  let columns = [\n    {name: 'Name', key: 'name'},\n    {name: 'Type', key: 'type'},\n    {name: 'Date Modified', key: 'date'}\n  ];\n\n  let rows = [\n    {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},\n    {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},\n    {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},\n    {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}\n  ];\n\n  return (\n    <Table aria-label=\"Example dynamic collection table\" {...props}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={rows}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ColorSwatch Component\nDESCRIPTION: Example of wrapping the ColorSwatch into a reusable component with support for transparent colors using a checkerboard pattern.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSwatchProps} from 'react-aria-components';\n\nexport function MyColorSwatch(props: ColorSwatchProps) {\n  return (\n    <ColorSwatch \n      {...props}\n      style={({color}) => ({\n        background: `linear-gradient(${color}, ${color}),\n          repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n      })} />\n  );\n}\n\n<MyColorSwatch color=\"#f00a\" />\n```\n\n----------------------------------------\n\nTITLE: Marking Unavailable Dates in React Spectrum Calendar (TSX)\nDESCRIPTION: This snippet demonstrates how to mark specific dates or date ranges as unavailable in the React Spectrum Calendar component. It utilizes the `isDateUnavailable` prop, which accepts a callback function. This function checks if a date is a weekend (using `isWeekend` from `@internationalized/date` and `useLocale` from `@react-aria/i18n`) or falls within predefined disabled ranges. The `minValue` prop is also used to disable dates before the current day, obtained using `today` and `getLocalTimeZone` from `@internationalized/date`. Unavailable dates remain focusable but cannot be selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today, isWeekend} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let {locale} = useLocale();\n  let isDateUnavailable = (date) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return <Calendar aria-label=\"Appointment date\" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />\n}\n```\n\n----------------------------------------\n\nTITLE: Building an RGBA Color Picker with ColorArea and ColorSlider in TSX\nDESCRIPTION: Demonstrates creating a functional RGBA color picker by combining a `ColorArea` and two `ColorSlider` components. All components are controlled via the same `color` state managed by `React.useState` and initialized with `parseColor`. The `ColorArea` controls the red (`xChannel`) and green (`yChannel`) channels, while two separate `ColorSlider` components control the blue channel and the alpha channel, respectively. The current color value is displayed as a CSS string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea, ColorSlider} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#ff00ff'));\n  let [redChannel, greenChannel, blueChannel] = color.getColorChannels();\n  return (\n    <fieldset style={{border: 0}}>\n      <legend>{color.getColorSpace().toUpperCase()}A Example</legend>\n      <Flex direction=\"column\">\n        <ColorArea xChannel={redChannel} yChannel={greenChannel} value={color} onChange={setColor} />\n        <ColorSlider channel={blueChannel} value={color} onChange={setColor} />\n        <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n        <p>Current value: {color.toString('css')}</p>\n      </Flex>\n    </fieldset>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic React Aria Table with Column Resizing\nDESCRIPTION: Core implementation of a table with header, body, rows, cells, and support for selection, dragging and column resizing using ResizableTableContainer and ColumnResizer components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Table, TableHeader, TableBody, Column, Row, Cell, Button, Checkbox, ResizableTableContainer, ColumnResizer} from 'react-aria-components';\n\n<ResizableTableContainer>\n  <Table>\n    <TableHeader>\n      <Column />\n      <Column><Checkbox slot=\"selection\" /></Column>\n      <Column><ColumnResizer /></Column>\n      <Column>\n        <Column />\n        <Column />\n      </Column>\n    </TableHeader>\n    <TableBody>\n      <Row>\n        <Cell><Button slot=\"drag\" /></Cell>\n        <Cell><Checkbox slot=\"selection\" /></Cell>\n        <Cell />\n        <Cell />\n        <Cell />\n      </Row>\n    </TableBody>\n  </Table>\n</ResizableTableContainer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtualized Scrolling with Virtualizer and ListLayout (TSX)\nDESCRIPTION: Illustrates how to wrap a collection component like `ListBox` with the `Virtualizer` component from `react-aria-components` to enable virtualized scrolling for large lists. It requires providing a memoized `Layout` object (e.g., `ListLayout` configured with `rowHeight`) to manage item positioning and rendering optimization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Virtualizer, ListLayout} from 'react-aria-components';\n\nlet layout = useMemo(() => new ListLayout({\n  rowHeight: 50\n}), []);\n\n<Virtualizer layout={layout}>\n  <ListBox items={items}>\n    {item => <ListBoxItem>{item}</ListBoxItem>}\n  </ListBox>\n</Virtualizer>\n```\n\n----------------------------------------\n\nTITLE: Displaying Different Toast Types in React Spectrum\nDESCRIPTION: Demonstrates how to queue different types of toasts (neutral, positive, negative, info) using buttons in a ButtonGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/toast/docs/Toast.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx example\nCODE:\n```\n<ButtonGroup>\n  <Button\n    onPress={() => ToastQueue.neutral('Toast available')}\n    variant=\"secondary\">\n    Show Neutral Toast\n  </Button>\n  <Button\n    onPress={() => ToastQueue.positive('Toast is done!')}\n    variant=\"primary\">\n    Show Positive Toast\n  </Button>\n  <Button\n    onPress={() => ToastQueue.negative('Toast is burned!')}\n    variant=\"negative\">\n    Show Negative Toast\n  </Button>\n  <Button\n    onPress={() => ToastQueue.info('Toasting…')}\n    variant=\"accent\"\n    style=\"outline\">\n    Show Info Toast\n  </Button>\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling File Drop Data in GridList with React\nDESCRIPTION: This code shows how to handle file drops in a GridList, specifically accepting JPEG and PNG images. It processes dropped files into image URLs using createObjectURL and displays them in the list with their filenames.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isFileDropItem} from 'react-aria-components';\n\ninterface ImageItem {\n  id: number,\n  url: string,\n  name: string\n}\n\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['image/jpeg', 'image/png'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items.filter(isFileDropItem).map(async item => ({\n          id: Math.random(),\n          url: URL.createObjectURL(await item.getFile()),\n          name: item.name\n        }))\n      );\n      setItems(items);\n    }\n  });\n\n  return (\n    <MyGridList aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop images here\"}>\n      {item => (\n        <MyItem textValue={item.name}>\n          <div className=\"image-item\">\n            <img src={item.url} />\n            <span>{item.name}</span>\n          </div>\n        </MyItem>\n      )}\n    </MyGridList>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker with Different Granularity Settings\nDESCRIPTION: Demonstrates how to customize the granularity of DateRangePicker components, allowing control over the level of detail shown (day, minute, or second).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [date, setDate] = React.useState({\n    start: parseAbsoluteToLocal('2021-04-07T18:45:22Z'),\n    end: parseAbsoluteToLocal('2021-04-08T20:00:00Z')\n  });\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateRangePicker\n        label=\"Date and time range\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate} />\n      <DateRangePicker\n        label=\"Date range\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Linkable Rows in React Spectrum TableView (TSX)\nDESCRIPTION: Demonstrates how to make table rows in a React Spectrum `TableView` function as hyperlinks. This is achieved by passing the `href` prop (and optionally `target`) to the `<Row>` component. The selection behavior adapts based on the `selectionMode` and `selectionStyle` props of the `TableView`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<TableView aria-label=\"Bookmarks\" selectionMode=\"multiple\">\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>URL</Column>\n    <Column>Date added</Column>\n  </TableHeader>\n  <TableBody>\n    <Row href=\"https://adobe.com/\" target=\"_blank\">\n      <Cell>Adobe</Cell>\n      <Cell>https://adobe.com/</Cell>\n      <Cell>January 28, 2023</Cell>\n    </Row>\n    <Row href=\"https://google.com/\" target=\"_blank\">\n      <Cell>Google</Cell>\n      <Cell>https://google.com/</Cell>\n      <Cell>April 5, 2023</Cell>\n    </Row>\n    <Row href=\"https://nytimes.com/\" target=\"_blank\">\n      <Cell>New York Times</Cell>\n      <Cell>https://nytimes.com/</Cell>\n      <Cell>July 12, 2023</Cell>\n    </Row>\n  </TableBody>\n</TableView>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Default Selection in Tabs Component (TSX)\nDESCRIPTION: Demonstrates how to specify a default selected tab using the `defaultSelectedKey` prop on the previously defined `Tabs` component. The value corresponds to the `key` of the desired `Item`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs aria-label=\"Input settings\" defaultSelectedKey=\"keyboard\">\n  <Item key=\"mouse\">Mouse Settings</Item>\n  <Item key=\"keyboard\">Keyboard Settings</Item>\n  <Item key=\"gamepad\">Gamepad Settings</Item>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Restricting Drop Operations in React Drag and Drop\nDESCRIPTION: This example shows how to restrict allowed drop operations to 'copy' only using the getAllowedDropOperations function in the useDrag hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrag.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Draggable() {\n  let {dragProps, isDragging} = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world'\n      }];\n    },\n    getAllowedDropOperations() {\n      return ['copy'];\n    }\n  });\n\n  // ...\n\n  return (\n    <div {...dragProps} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n      Drag me\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading ListBox Options Asynchronously with useAsyncList (TypeScript/React)\nDESCRIPTION: Illustrates asynchronous loading of ListBox items using the useAsyncList hook and rendering server-fetched results from the PokeAPI. Data is loaded via fetch using an AbortController signal, and item results are mapped to Items in a single-select ListBox. Dependencies include @react-stately/data and React. Input is an async fetch request; output is dynamically generated list options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\\n\\ninterface Pokemon {\\n  name: string\\n}\\n\\nfunction AsyncLoadingExample() {\\n  let list = useAsyncList<Pokemon>({\\n    async load({signal}) {\\n      let res = await fetch(\\n        `https://pokeapi.co/api/v2/pokemon`,\\n        {signal}\\n      );\\n      let json = await res.json();\\n\\n      return {\\n        items: json.results\\n      };\\n    }\\n  });\\n\\n  return (\\n    <ListBox label=\\\"Pick a Pokemon\\\" items={list.items} selectionMode=\\\"single\\\">\\n      {(item) => <Item key={item.name}>{item.name}</Item>}\\n    </ListBox>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Reorderable ListView with React Spectrum Hooks (TSX)\nDESCRIPTION: Defines a `ReorderableList` React component using TypeScript (TSX). This component utilizes the `useListData` hook to manage list items and the `useDragAndDrop` hook to enable reordering of items within the ListView via drag and drop. The `onReorder` callback within the hook handles the logic for moving items before or after the target item using `list.moveBefore` and `list.moveAfter`. The `getAllowedDropOperations` is set to only allow 'move'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true render=false\nfunction ReorderableList() {\n  let list = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop'},\n      {id: '2', type: 'file', name: 'Adobe XD'},\n      {id: '3', type: 'folder', name: 'Documents', childNodes: []},\n      {id: '4', type: 'file', name: 'Adobe InDesign'},\n      {id: '5', type: 'folder', name: 'Utilities', childNodes: []},\n      {id: '6', type: 'file', name: 'Adobe AfterEffects'}\n    ]\n  });\n\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-reorder': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    acceptedDragTypes: ['custom-app-type-reorder'],\n    /*- begin highlight -*/\n    onReorder: async (e) => {\n      let {keys, target} = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    getAllowedDropOperations: () => ['move']\n    /*- end highlight -*/\n  });\n\n  return (\n    <ListView\n      aria-label=\"Reorderable ListView\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-3600\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}>\n      {item => (\n        <Item textValue={item.name}>\n          {item.type === 'folder' && <Folder />}\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Step Values on a Slider for Currency Amounts in React Spectrum (TypeScript)\nDESCRIPTION: This snippet configures a slider to restrict possible values to increments of 5 between 0 and 100, using the \\\"minValue\\\", \\\"maxValue\\\", and \\\"step\\\" props. The slider is labeled 'Amount' and displays formatted currency values as US Dollars. This is useful for financial forms or inputs requiring stepped increments.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<Slider\n  label=\"Amount\"\n  formatOptions={{style: 'currency', currency: 'USD'}}\n  minValue={0}\n  maxValue={100}\n  step={5} />\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a ComboBox with Dynamic Items in TSX\nDESCRIPTION: Illustrates how to populate a ComboBox dynamically using the `defaultItems` prop with an array of objects. It uses a function as children to render each `Item` and handles selection changes using `onSelectionChange` and `React.useState`. Items use their `id` property as the key automatically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntsx example\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n  let [majorId, setMajorId] = React.useState(null);\n\n  return (\n    <>\n      <p>Topic id: {majorId}</p>\n      <ComboBox\n        label=\"Pick an engineering major\"\n        defaultItems={options}\n        onSelectionChange={setMajorId}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Anchor Links - React Spectrum - TypeScript\nDESCRIPTION: This example demonstrates how to use the href prop on Item elements within Breadcrumbs to create navigation links to different URLs or pages. This approach allows for breadcrumb items that are also anchor tags for routing purposes. It depends on @react-spectrum/breadcrumbs, and the href parameter points to each destination route. Expected output is clickable breadcrumbs where each item is a link; no custom event handling shown. Useful for integrating with native or client-side routing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Breadcrumbs>\n  <Item href=\"/\">Home</Item>\n  <Item href=\"/react-spectrum/\">React Spectrum</Item>\n  <Item href=\"/react-spectrum/Breadcrumbs.html\">Breadcrumbs</Item>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of a Resizable Columns Table\nDESCRIPTION: A complete example of a table with resizable columns using the previously defined components. It demonstrates the structure with TableHeader, TableBody, Columns, Rows, and Cells.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\n<ResizableColumnsTable aria-label=\"Table with resizable columns\">\n  <TableHeader>\n    <Column allowsResizing>Name</Column>\n    <Column allowsResizing>Type</Column>\n    <Column allowsResizing>Level</Column>\n  </TableHeader>\n  <TableBody>\n    <Row key=\"1\">\n      <Cell>Charizard</Cell>\n      <Cell>Fire, Flying</Cell>\n      <Cell>67</Cell>\n    </Row>\n    <Row key=\"2\">\n      <Cell>Blastoise</Cell>\n      <Cell>Water</Cell>\n      <Cell>56</Cell>\n    </Row>\n    <Row key=\"3\">\n      <Cell>Venusaur</Cell>\n      <Cell>Grass, Poison</Cell>\n      <Cell>83</Cell>\n    </Row>\n    <Row key=\"4\">\n      <Cell>Pikachu</Cell>\n      <Cell>Electric</Cell>\n      <Cell>100</Cell>\n    </Row>\n  </TableBody>\n</ResizableColumnsTable>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Content in ActionMenu with React Spectrum\nDESCRIPTION: Shows how to create an ActionMenu with dynamic content using the Collection Components API, mapping over an array of items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let actionMenuItems = [\n    {name: 'Cut'},\n    {name: 'Copy'},\n    {name: 'Paste'},\n    {name: 'Select All'}\n  ];\n\n  return (\n    <ActionMenu items={actionMenuItems}>\n      {item => <Item key={item.name}>{item.name}</Item>}\n    </ActionMenu>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reorderable Rows with Drag and Drop in React Table Component\nDESCRIPTION: This code demonstrates how to implement reorderable rows in a table using the useDragAndDrop hook. It uses useListData to manage state and configures drag and drop with getItems and onReorder handlers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\nimport {useDragAndDrop, Button} from 'react-aria-components';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},\n      {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},\n      {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},\n      {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}\n    ]\n  });\n\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems: (keys) => [...keys].map(key => ({\n      'text/plain': list.getItem(key).name\n    })),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    }\n  });\n\n  return (\n    <Table\n      aria-label=\"Files\"\n      selectionMode=\"multiple\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      <TableHeader>\n        <Column></Column>\n        <Column><MyCheckbox slot=\"selection\" /></Column>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n        <Column>Date Modified</Column>\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            <Cell><Button slot=\"drag\">≡</Button></Cell>\n            <Cell><MyCheckbox slot=\"selection\" /></Cell>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n            <Cell>{item.date}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using TooltipTrigger and Tooltip with OverlayArrow in React (TypeScript/TSX)\nDESCRIPTION: Shows how to implement a basic tooltip using the TooltipTrigger, Tooltip, OverlayArrow, and Button components from react-aria-components. The tooltip is activated on user interaction with a button, features a customizable arrow, and can be styled as needed. No external CSS dependencies are required for the logic, but react-aria-components must be installed. Expects JSX usage within a React application and outputs a tooltip with an arrow pointing to the trigger.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TooltipTrigger, Tooltip, OverlayArrow, Button} from 'react-aria-components';\\n\\n<TooltipTrigger>\\n  <Button>\\u270F\\uFE0F</Button>\\n  <Tooltip>\\n    <OverlayArrow>\\n      <svg width={8} height={8} viewBox=\\\"0 0 8 8\\\"><path d=\\\"M0 0 L4 4 L8 0\\\" /></svg>\\n    </OverlayArrow>\\n    Edit\\n  </Tooltip>\\n</TooltipTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Marking Unavailable Dates in React Spectrum Calendar (TSX)\nDESCRIPTION: This TSX code demonstrates how to mark specific dates as unavailable in the React Spectrum Calendar (`MyCalendar`) using the `isDateUnavailable` prop. The example function `isDateUnavailable` checks if a given date is a weekend (using `isWeekend` from `@internationalized/date` and the current locale from `useLocale`) or falls within predefined `disabledRanges`. These dates remain focusable but cannot be selected. It also combines this with `minValue` for additional restriction. Depends on `@internationalized/date`, `@react-aria/i18n`, `React`, and `MyCalendar`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {today, isWeekend} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let {locale} = useLocale();\n  let isDateUnavailable = (date: DateValue) => isWeekend(date, locale) || disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return <MyCalendar aria-label=\"Appointment date\" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Heading Component with React Aria Context (TSX)\nDESCRIPTION: Demonstrates creating a custom heading component (`MyCustomHeading`) compatible with React Aria Components. It uses the `useContextProps` hook from `react-aria-components` to merge local props and ref with those provided by the `HeadingContext`, ensuring it can be used correctly within components like `Dialog`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Dialog.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {HeadingProps} from 'react-aria-components';\nimport {HeadingContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomHeading = React.forwardRef((props: HeadingProps, ref: React.ForwardedRef<HTMLHeadingElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, HeadingContext);\n  ///- end highlight -///\n\n  // ... your existing Heading component\n  return <h2 {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Overlays with CSS Keyframes - CSS\nDESCRIPTION: This snippet showcases the use of CSS keyframe animations for more complex overlay entry and exit effects. The [data-entering] and [data-exiting] attributes trigger a 'slide' animation in normal and reverse order, respectively. A @keyframes block defines motion and opacity changes. No JavaScript dependencies are needed. Inputs are data attribute state changes and outputs are coordinated translation and fade animations; not interruptible, so rapid open/close events may cause animation jumps.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-entering] {\n  animation: slide 300ms;\n}\n\n.react-aria-Popover[data-exiting] {\n  animation: slide 300ms reverse;\n}\n\n@keyframes slide {\n  from {\n    transform: translateY(-20px);\n    opacity: 0;\n  }\n\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in TimeField - React Spectrum (TypeScript)\nDESCRIPTION: Shows how to hide the time zone abbreviation in a MyTimeField component when a ZonedDateTime object is used as value. Setting hideTimeZone disables the display of the time zone, useful when the time zone is exposed elsewhere or implicit in the use case. Relies on parseZonedDateTime utility and custom MyTimeField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n<MyTimeField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Removal in React Spectrum TagGroup using TSX\nDESCRIPTION: Demonstrates how to enable tag removal in a `MyTagGroup` component using the `onRemove` prop. It utilizes the `useListData` hook from `@react-stately/data` to manage the tag items and defines a callback function for `onRemove` that calls `list.remove` to delete the specified tags based on their keys. A remove button (`<Button slot=\"remove\">`) is typically rendered within the tag when removal is allowed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {useListData} from '@react-stately/data';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      { id: 1, name: \"News\" },\n      { id: 2, name: \"Travel\" },\n      { id: 3, name: \"Gaming\" },\n      { id: 4, name: \"Shopping\" }\n    ]\n  });\n\n  return (\n    <MyTagGroup\n      label=\"Categories\"\n      items={list.items}\n      ///- begin highlight -///\n      onRemove={keys => list.remove(...keys)}\n      ///- end highlight -///\n    >\n      {(item) => <MyTag>{item.name}</MyTag>}\n    </MyTagGroup>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering a Horizontally Oriented CheckboxGroup (TypeScript)\nDESCRIPTION: This sample shows use of the orientation='horizontal' prop to arrange CheckboxGroup children in a horizontal row instead of the default vertical stack. It is ideal for compact UIs and visually grouping related options on a single line. Each Checkbox remains accessible and properly labeled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup label=\\\"Favorite sports\\\" orientation=\\\"horizontal\\\">\\n  <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n  <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n  <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Component Implementation in React Aria\nDESCRIPTION: Demonstrates the basic usage of the Switch component from react-aria-components, including the necessary imports and minimal JSX structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Switch} from 'react-aria-components';\n\n<Switch>\n  <div className=\"indicator\" />\n  Low power mode\n</Switch>\n```\n\n----------------------------------------\n\nTITLE: Using Preset Color Swatches with ColorSwatchPicker in React Spectrum (TypeScript)\nDESCRIPTION: This snippet integrates a swatch picker into a color picker, providing quick access to preset color values. The MyColorSwatchPicker component renders children MyColorSwatchPickerItem components for each available preset. Requires MyColorSwatchPicker and MyColorSwatchPickerItem implementations that accept color props, and MyColorArea and MyColorSlider for direct color adjustments. The code demonstrates composition for customizable color selection UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MyColorSwatchPicker, MyColorSwatchPickerItem} from './ColorSwatchPicker';\\n\\n<MyColorPicker label=\\\"Color\\\" defaultValue=\\\"#A00\\\">\\n  <MyColorArea colorSpace=\\\"hsb\\\" xChannel=\\\"saturation\\\" yChannel=\\\"brightness\\\" />\\n  <MyColorSlider colorSpace=\\\"hsb\\\" channel=\\\"hue\\\" />\\n  <MyColorSwatchPicker>\\n    <MyColorSwatchPickerItem color=\\\"#A00\\\" />\\n    <MyColorSwatchPickerItem color=\\\"#f80\\\" />\\n    <MyColorSwatchPickerItem color=\\\"#080\\\" />\\n    <MyColorSwatchPickerItem color=\\\"#08f\\\" />\\n    <MyColorSwatchPickerItem color=\\\"#008\\\" />\\n  </MyColorSwatchPicker>\\n</MyColorPicker>\\n\n```\n\n----------------------------------------\n\nTITLE: Reusable Slider Component in React\nDESCRIPTION: Creates a reusable slider component that wraps the basic Slider functionality and supports multiple thumbs and custom labels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SliderProps} from 'react-aria-components';\n\ninterface MySliderProps<T> extends SliderProps<T> {\n  label?: string,\n  thumbLabels?: string[]\n}\n\nfunction MySlider<T extends number | number[]>({label, thumbLabels, ...props}: MySliderProps<T>) {\n  return (\n    <Slider {...props}>\n      {label && <Label>{label}</Label>}\n      <SliderOutput>\n        {({state}) => state.values.map((_, i) => state.getThumbValueLabel(i)).join(' – ')}\n      </SliderOutput>\n      <SliderTrack>\n        {({state}) => state.values.map((_, i) => (\n          <SliderThumb key={i} index={i} aria-label={thumbLabels?.[i]} />\n        ))}\n      </SliderTrack>\n    </Slider>\n  );\n}\n\n<MySlider label=\"Range\" defaultValue={[30, 60]} thumbLabels={['start', 'end']} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Multiple Selection in React Spectrum ListBox (TSX)\nDESCRIPTION: This snippet demonstrates how to implement controlled multiple selection using the `useState` hook in React. The `selectedKeys` state variable (initialized as a Set) holds the keys of the selected items, and the `setSelectedKeys` function updates this state. These are passed to the `ListBox` component via the `selectedKeys` and `onSelectionChange` props, respectively.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/selection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nlet [selectedKeys, setSelectedKeys] = useState(new Set());\n\n<ListBox selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>\n  <Item key=\"one\">One</Item>\n  <Item key=\"two\">Two</Item>\n  <Item key=\"three\">Three</Item>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Composing a Color Wheel and Area Color Picker in React Spectrum (TypeScript)\nDESCRIPTION: This example builds a custom color picker by composing a color wheel and a color selection area both as children of MyColorPicker, targeting HSB (Hue, Saturation, Brightness) space. It demonstrates presentation and layout styling for the area, and provides a template for building custom visual color pickers. Requires custom MyColorPicker, MyColorWheel, and MyColorArea components capable of handling appropriate color space and channel props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MyColorWheel} from './ColorWheel';\\nimport {MyColorArea} from './ColorArea';\\n\\n<MyColorPicker label=\\\"Stroke color\\\" defaultValue=\\\"#345\\\">\\n  <MyColorWheel />\\n  <MyColorArea \\n    colorSpace=\\\"hsb\\\"\\n    xChannel=\\\"saturation\\\"\\n    yChannel=\\\"brightness\\\"\\n    style={{width: '100px', height: '100px', position: 'absolute', top: 'calc(50% - 50px)', left: 'calc(50% - 50px)'}} />\\n</MyColorPicker>\\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Tooltips with Coordinated Delay in React (TypeScript/TSX)\nDESCRIPTION: Demonstrates layout of two TooltipTrigger/Button/MyTooltip combos in a horizontal flex container to show global delay timing behavior. The MyTooltip wrapper ensures style and structural consistency. Tooltips use a shared timer for hover/focus display delay, and if tooltips are triggered repeatedly, the delay is removed. Used to visually demonstrate tooltip 'warmup' and 'cooldown' behavior. Requires react-aria-components and React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', gap: 8}}>\n  <TooltipTrigger>\n    <Button>Hover me</Button>\n    <MyTooltip>I come up after a delay.</MyTooltip>\n  </TooltipTrigger>\n  <TooltipTrigger>\n    <Button>Then hover me</Button>\n    <MyTooltip>If you did it quickly, I appear immediately.</MyTooltip>\n  </TooltipTrigger>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Slider with onChange and onChangeEnd Events\nDESCRIPTION: Shows how to implement a slider that updates state on both continuous changes and when the user finishes dragging.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(25);\n  return (\n    <>\n      <MySlider<number>\n        label=\"Cookies to buy\"\n        defaultValue={value}\n        onChangeEnd={setValue} />\n      <p>Current value: {value}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable CheckboxGroup and Checkbox Wrappers in TypeScript\nDESCRIPTION: This TSX snippet defines two reusable components: MyCheckboxGroup and MyCheckbox. MyCheckboxGroup wraps CheckboxGroup, accepting custom label, description, and errorMessage props, and delegates children appropriately, ensuring a consistent structure and ARIA roles. MyCheckbox wraps the Checkbox, providing a consistent visual indicator. Dependencies include TypeScript types, React, and react-aria-components. The code also demonstrates compositional usage of these wrappers in rendering a cohesive CheckboxGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {CheckboxGroupProps, CheckboxProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyCheckboxGroupProps extends Omit<CheckboxGroupProps, 'children'> {\n  children?: React.ReactNode,\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyCheckboxGroup({\n  label,\n  description,\n  errorMessage,\n  children,\n  ...props\n}: MyCheckboxGroupProps) {\n  return (\n    <CheckboxGroup {...props}>\n      {label && <Label>{label}</Label>}\n      {children}\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </CheckboxGroup>\n  );\n}\n\ninterface MyCheckboxProps extends Omit<CheckboxProps, 'children'> {\n  children?: React.ReactNode\n}\n\nfunction MyCheckbox({children, ...props}: MyCheckboxProps) {\n  return (\n    <Checkbox {...props}>\n      <div className=\"checkbox\" aria-hidden=\"true\">\n        <svg viewBox=\"0 0 18 18\"><polyline points=\"1 9 7 14 15 4\" /></svg>\n      </div>\n      {children}\n    </Checkbox>\n  );\n}\n\n<MyCheckboxGroup label=\"Favorite sports\">\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Using ToggleButton in React Aria Components (TypeScript)\nDESCRIPTION: This TypeScript/TSX snippet shows a basic usage of the ToggleButton component from the react-aria-components library by rendering a simple labeled toggle button. It serves as a minimal, accessible example, requiring only the ToggleButton import and no special props. The user can toggle the button state by clicking or using keyboard input. No explicit output is produced except the rendered button with its state managed internally.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\\n\\n<ToggleButton>Pin</ToggleButton>\\n\n```\n\n----------------------------------------\n\nTITLE: Controlled vs Uncontrolled ColorArea with HSL Value and Channels in TSX\nDESCRIPTION: Illustrates both uncontrolled (`defaultValue`) and controlled (`value`, `onChange`) modes for `ColorArea`. It uses `React.useState` to manage the controlled component's state, parses an initial HSL color string using `parseColor` from `@react-stately/color`, and sets the `xChannel` to \"saturation\" and `yChannel` to \"lightness\". The `Flex` component arranges the examples, and `Label` provides accessible labeling via `aria-labelledby`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <div>\n        <Label id=\"hsl-uncontrolled-id\">x: Saturation, y: Lightness (uncontrolled)</Label>\n        <ColorArea\n          aria-labelledby=\"hsl-uncontrolled-id\"\n          defaultValue={value}\n          xChannel=\"saturation\"\n          yChannel=\"lightness\" />\n      </div>\n      <div>\n        <Label id=\"hsl-controlled-id\">x: Saturation, y: Lightness (controlled)</Label>\n        <ColorArea\n          aria-labelledby=\"hsl-controlled-id\"\n          value={value}\n          onChange={setValue}\n          xChannel=\"saturation\"\n          yChannel=\"lightness\" />\n      </div>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling DisclosureGroup with isDisabled Prop (TypeScript)\nDESCRIPTION: Illustrates how to disable a DisclosureGroup and all its DisclosureItems using the isDisabled prop. This approach disables all trigger buttons and prevents users from interacting with or toggling the contents of any panel. Requires React Spectrum DisclosureGroup and DisclosureItem components; applies to all children within the group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/disclosure/docs/useDisclosure.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n<DisclosureGroup isDisabled>\\n  <DisclosureItem title=\"Personal Information\">\\n    Personal information form here.\\n  </DisclosureItem>\\n  <DisclosureItem title=\"Billing Address\">\\n    Billing address form here.\\n  </DisclosureItem>\\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Customizing Label Position and Alignment for NumberField in React Spectrum\nDESCRIPTION: This example shows how to adjust the label position and alignment of a NumberField using the labelPosition and labelAlign props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField label=\"Cookies\" labelPosition=\"side\" labelAlign=\"end\" minValue={0} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Grid Layout in ListBox with React\nDESCRIPTION: Example of a ListBox with both grid layout and horizontal orientation, creating a horizontally scrolling grid where items are organized into columns.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Albums\"\n  layout=\"grid\"\n  orientation=\"horizontal\"\n  items={albums}\n  selectionMode=\"multiple\">\n  {item => (\n    <ListBoxItem textValue={item.title}>\n      <img src={item.image} alt=\"\" />\n      <Text slot=\"label\">{item.title}</Text>\n      <Text slot=\"description\">{item.artist}</Text>\n    </ListBoxItem>\n  )}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Component with useDialog in React\nDESCRIPTION: This snippet shows how to create a Dialog component using the useDialog hook from React Aria. It can be used within the Popover or other overlay containers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaDialogProps} from '@react-aria/dialog';\nimport {useDialog} from '@react-aria/dialog';\n\ninterface DialogProps extends AriaDialogProps {\n  title?: React.ReactNode,\n  children: React.ReactNode\n}\n\nfunction Dialog({title, children, ...props}: DialogProps) {\n  let ref = React.useRef(null);\n  let {dialogProps, titleProps} = useDialog(props, ref);\n\n  return (\n    <div {...dialogProps} ref={ref} style={{padding: 30, maxWidth: 200, outline: 'none'}}>\n      {title &&\n        <h3 {...titleProps} style={{marginTop: 0}}>\n          {title}\n        </h3>\n      }\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Sections in ComboBox\nDESCRIPTION: This example demonstrates how to group ComboBox options into sections using the Section component with static items. Each section has a title and contains related items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox label=\"Preferred fruit or vegetable\">\n  <Section title=\"Fruit\">\n    <Item key=\"Apple\">Apple</Item>\n    <Item key=\"Banana\">Banana</Item>\n    <Item key=\"Orange\">Orange</Item>\n    <Item key=\"Honeydew\">Honeydew</Item>\n    <Item key=\"Grapes\">Grapes</Item>\n    <Item key=\"Watermelon\">Watermelon</Item>\n    <Item key=\"Cantaloupe\">Cantaloupe</Item>\n    <Item key=\"Pear\">Pear</Item>\n  </Section>\n  <Section title=\"Vegetable\">\n    <Item key=\"Cabbage\">Cabbage</Item>\n    <Item key=\"Broccoli\">Broccoli</Item>\n    <Item key=\"Carrots\">Carrots</Item>\n    <Item key=\"Lettuce\">Lettuce</Item>\n    <Item key=\"Spinach\">Spinach</Item>\n    <Item key=\"Bok Choy\">Bok Choy</Item>\n    <Item key=\"Cauliflower\">Cauliflower</Item>\n    <Item key=\"Potatoes\">Potatoes</Item>\n  </Section>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Events in React Drag and Drop\nDESCRIPTION: This snippet shows how to handle drop events in React drag and drop operations. It demonstrates how to use the dropOperation property to perform different actions based on the type of drop operation (move, copy, or link).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_45\n\nLANGUAGE: tsx\nCODE:\n```\nlet onItemDrop = async (e) => {\n  let data = JSON.parse(await e.items[0].getText('my-app-file'));\n  switch (e.dropOperation) {\n    case 'move':\n      MyAppFileService.move(data.filePath, props.filePath);\n      break;\n    case 'copy':\n      MyAppFileService.copy(data.filePath, props.filePath);\n      break;\n    case 'link':\n      MyAppFileService.link(data.filePath, props.filePath);\n      break;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: TreeView with Action Menus for Tree Items (TSX)\nDESCRIPTION: This snippet integrates ActionMenu and Item components within each TreeViewItem to provide a menu of actions (e.g., edit/delete) for each node. renderItem is used for recursion over child items. Dependencies: TreeView, TreeViewItem, TreeViewItemContent, ActionMenu, Item, Collection, Text, Edit, Delete, @adobe/react-spectrum Collection. Inputs are hierarchical item objects; outputs are tree nodes with a dropdown menu for actions. Use for context menus on tree nodes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Collection} from '@adobe/react-spectrum';\n\n<TreeView aria-label=\"Example tree with action menus\" height=\"size-3000\" maxWidth=\"size-6000\" items={items}>\n  {function renderItem(item: MyItem) {\n    return (\n      <TreeViewItem textValue={item.name}>\n        <TreeViewItemContent>\n          <Text>{item.name}</Text>\n          {item.icon}\n          <ActionMenu onAction={(key) => alert(`Item: ${item.id}, Action: ${key}`)}>\n            <Item key=\"edit\" textValue=\"Edit\">\n              <Edit />\n              <Text>Edit</Text>\n            </Item>\n            <Item key=\"delete\" textValue=\"Delete\">\n              <Delete />\n              <Text>Delete</Text>\n            </Item>\n          </ActionMenu>\n        </TreeViewItemContent>\n        <Collection items={item.childItems}>\n          {renderItem}\n        </Collection>\n      </TreeViewItem>\n    )\n  }}\n</TreeView>\n```\n\n----------------------------------------\n\nTITLE: TimeField with Formatted Output Display in React Spectrum\nDESCRIPTION: Example showing how to use the onChange event with TimeField to display a formatted version of the selected time in the user's locale.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n  let formatter = useDateFormatter({dateStyle: 'long', timeStyle: 'long'});\n\n  return (\n    <>\n      <TimeField label=\"Time\" value={date} onChange={setDate} />\n      <p>Selected date and time: {(date?.toDate && formatter.format(date.toDate())) || (date && date.toString()) || '--'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Infinite Scrolling with useAsyncList in React Spectrum Picker (tsx)\nDESCRIPTION: Extends the asynchronous loading example using `useAsyncList` to support infinite scrolling (pagination). The `load` function now accepts a `cursor` parameter (provided by the previous API response or null for the initial load) and returns both the `items` for the current page and the `cursor` (URL) for the next page. The `Picker` component uses the `onLoadMore` prop, which triggers the `list.loadMore` function when the user scrolls near the end of the list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\nlet list = useAsyncList({\n  async load({signal, cursor}) {\n    // If no cursor is available, then we're loading the first page.\n    // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n    let res = await fetch(cursor || 'https://pokeapi.co/api/v2/pokemon', {signal});\n    let json = await res.json();\n    return {\n      items: json.results,\n      cursor: json.next\n    };\n  }\n});\n\n<Picker\n  label=\"Pick a Pokemon\"\n  items={list.items}\n  isLoading={list.isLoading}\n  onLoadMore={list.loadMore}>\n  {item => <Item key={item.name}>{item.name}</Item>}\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Handling TimeField Change Events and Formatting Output in TypeScript/React\nDESCRIPTION: Explains how to use the onChange prop of TimeField in React to track user-edited time values and display them using the user's locale formatting. Relies on useDateFormatter from @react-aria/i18n and parseAbsoluteToLocal from @internationalized/date. Time values are converted from custom objects to native JavaScript Date for formatting. This pattern integrates live UI feedback with international time presentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDateFormatter} from '@react-aria/i18n';\\n\\nfunction Example() {\\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\\n  let formatter = useDateFormatter({dateStyle: 'long', timeStyle: 'long'});\\n\\n  return (\\n    <>\\n      <MyTimeField label=\"Time\" value={date} onChange={setDate} />\\n      <p>Selected date and time: {(date?.toDate && formatter.format(date.toDate())) || (date && date.toString()) || '--'}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Virtualizer with ListBox (TSX)\nDESCRIPTION: This example demonstrates how to use the Virtualizer component with a ListBox from react-aria-components. It initializes a large dataset (5000 items) and renders them efficiently using virtualization. The Virtualizer is configured with a ListLayout, specifying options like rowHeight, padding, and gap. The ListBox component is nested within the Virtualizer and renders ListBoxItem components for each item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n example\nimport {Virtualizer, ListLayout, ListBox, ListBoxItem} from 'react-aria-components';\n\nlet items = [];\nfor (let i = 0; i < 5000; i++) {\n  items.push({id: i, name: `Item ${i}`});\n}\n\nfunction Example() {\n  return (\n    <Virtualizer \n      layout={ListLayout}\n      layoutOptions={{\n        rowHeight: 32,\n        padding: 4,\n        gap: 4\n      }}>\n      <ListBox aria-label=\"Virtualized ListBox\" selectionMode=\"multiple\" items={items}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </ListBox>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ListBox Anatomy for Advanced Customization - React Aria - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the structural anatomy of a ListBox, showing how to include labeled and descriptive slots within ListBoxItem, and organize items into sections with headers. Relies on react-aria-components and a JSX/TSX-capable build environment. Inputs include children elements with slots; output is a semantically rich and accessible ListBox structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ListBox, ListBoxItem, ListBoxSection, Header, Text} from 'react-aria-components';\\n\\n<ListBox>\\n  <ListBoxItem>\\n    <Text slot=\"label\" />\\n    <Text slot=\"description\" />\\n  </ListBoxItem>\\n  <ListBoxSection>\\n    <Header />\\n    <ListBoxItem />\\n  </ListBoxSection>\\n</ListBox>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Between Items in GridList with React\nDESCRIPTION: This code demonstrates how to enable dropping between items in a GridList using the onInsert event handler. It shows how to handle insertion positioning (before/after) and process dropped items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Illustrator'},\n      {id: 2, name: 'Premiere'},\n      {id: 3, name: 'Acrobat'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      let items = await Promise.all(e.items.map(async item => {\n        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;\n        return {id: Math.random(), name};\n      }));\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items);\n      }\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableGridList />\n      <MyGridList aria-label=\"Droppable list\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <GridListItem>{item.name}</GridListItem>}\n      </MyGridList>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OptionMenuTrigger Component with React Aria Hooks\nDESCRIPTION: Creates a custom menu trigger component that opens the menu only when the Alt key is held, allowing the button to have a default action with additional options for power users. It uses React Aria hooks and context providers to intercept keyboard and press events.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ButtonContext, OverlayTriggerStateContext, PopoverContext, MenuContext, Provider} from 'react-aria-components';\nimport {useMenuTriggerState} from 'react-stately';\nimport {useMenuTrigger} from 'react-aria';\n\nfunction OptionMenuTrigger(props: MenuTriggerProps) {\n  let state = useMenuTriggerState(props);\n  let ref = React.useRef(null);\n  let {menuTriggerProps, menuProps} = useMenuTrigger(props, state, ref);\n\n  return (\n    // Provider is a utility that renders multiple context providers without nesting.\n    <Provider\n      values={[\n        [ButtonContext, {\n          ...menuTriggerProps,\n          // Intercept events and only forward to useMenuTrigger if alt key is held.\n          onPressStart: e => e.altKey && menuTriggerProps.onPressStart(e),\n          onPress: e => (e.pointerType !== 'mouse' || e.altKey) && menuTriggerProps.onPress(e),\n          onKeyDown: e => e.altKey && menuTriggerProps.onKeyDown(e),\n          ref,\n          isPressed: state.isOpen\n        }],\n        [OverlayTriggerStateContext, state],\n        [PopoverContext, {triggerRef: ref, placement: 'bottom start'}],\n        [MenuContext, menuProps]\n      ]}>\n      {props.children}\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component with useButton Hook in React\nDESCRIPTION: This snippet demonstrates the creation of a reusable Button component using the useButton hook from React Aria, which can be used for month navigation in the calendar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonGroup Component with Multiple Buttons in React Spectrum (TSX)\nDESCRIPTION: Demonstrates the use of the ButtonGroup component along with several Button components from the React Spectrum library. Requires the '@react-spectrum/buttongroup' and '@react-spectrum/button' packages. Accepts Button elements as children, with each Button specifying a 'variant' prop ('primary' or 'secondary'). Outputs a ButtonGroup with three action buttons suitable for a user feedback UI. Parent component should handle additional context for state or actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/buttongroup/docs/ButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ButtonGroup} from '@react-spectrum/buttongroup';\\nimport {Button} from '@react-spectrum/button';\\n\\n<ButtonGroup>\\n  <Button variant=\\\"primary\\\">Rate Now</Button>\\n  <Button variant=\\\"secondary\\\">No, thanks</Button>\\n  <Button variant=\\\"secondary\\\">Remind me later</Button>\\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: ColorField Validation inside React Spectrum Form (TypeScript)\nDESCRIPTION: Shows a ColorField placed within a native-validating Form, which blocks form submission until required fields are filled. Highlights integration with ButtonGroup and submit/reset controls. Requires @adobe/react-spectrum Form, ButtonGroup, and Button components in addition to ColorField. Useful for building accessible, validated forms involving color data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\\n\\n<Form validationBehavior=\\\"native\\\" maxWidth=\\\"size-3000\\\">\\n  {/*- begin highlight -*/}\\n  <ColorField label=\\\"Color\\\" name=\\\"color\\\" isRequired />\\n  {/*- end highlight -*/}\\n  <ButtonGroup>\\n    <Button type=\\\"submit\\\" variant=\\\"primary\\\">Submit</Button>\\n    <Button type=\\\"reset\\\" variant=\\\"secondary\\\">Reset</Button>\\n  </ButtonGroup>\\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout and API Data for Documentation (JavaScript)\nDESCRIPTION: This snippet imports the main Layout component necessary for rendering the documentation page, and then exports it as the default export. It also imports documentation data from the @react-stately/color package, as well as several type and API representation components from @react-spectrum/docs. Required dependencies include @react-spectrum/docs and @react-stately/color. This setup enables dynamically loading function, class, and package metadata for use throughout the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorAreaState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-stately/color';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/color/package.json';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tooltip Warmup and Cooldown in React Spectrum\nDESCRIPTION: This example illustrates the warmup and cooldown behavior of tooltips, showing how multiple tooltips interact when hovered in quick succession.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-200\">\n  <TooltipTrigger>\n    <ActionButton>Hover me</ActionButton>\n    <Tooltip>I come up after a delay.</Tooltip>\n  </TooltipTrigger>\n  <TooltipTrigger>\n    <ActionButton>Then hover me</ActionButton>\n    <Tooltip>If you did it quickly, I appear immediately.</Tooltip>\n  </TooltipTrigger>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Accessing RangeCalendar State using RangeCalendarStateContext in React Spectrum\nDESCRIPTION: This example demonstrates how to create a RangeCalendarValue component that uses RangeCalendarStateContext to access the currently selected date range. The component formats the selected start and end dates using useDateFormatter and displays them as a string. It's placed within a RangeCalendar component to show the selected date range.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RangeCalendarStateContext} from 'react-aria-components';\nimport {useDateFormatter} from 'react-aria';\n\nfunction RangeCalendarValue() {\n  /*- begin highlight -*/\n  let state = React.useContext(RangeCalendarStateContext)!;\n  /*- end highlight -*/\n  let start = state.value?.start.toDate(getLocalTimeZone());\n  let end = state.value?.end.toDate(getLocalTimeZone());\n  let formatted = start && end ? useDateFormatter().formatRange(start, end) : 'None';\n  return <small>Selected date range: {formatted}</small>;\n}\n\n<RangeCalendar>\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <CalendarGrid>\n    {date => <CalendarCell date={date} />}\n  </CalendarGrid>\n  {/*- begin highlight -*/}\n  <RangeCalendarValue />\n  {/*- end highlight -*/}\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Modal Component Anatomy with react-aria-components in TSX\nDESCRIPTION: Demonstrates the basic structural composition of a modal using `ModalOverlay` as the outer container (including the backdrop) and `Modal` for the content area itself. This snippet imports the necessary components from `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Modal, ModalOverlay} from 'react-aria-components';\n\n<ModalOverlay>\n  <Modal />\n</ModalOverlay>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation to TimeField with a Validate Function in TypeScript/React\nDESCRIPTION: Demonstrates use of a custom validate function on TimeField to ensure only times on 15 minute increments are valid. The validate function receives the current time and returns an error string if not valid (e.g., time?.minute % 15 !== 0). This supports user-friendly domain-specific validation in forms beyond minValue and maxValue.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\\n  <MyTimeField\\n    label=\"Meeting time\"\\n    /*- begin highlight -*/\\n    validate={time => time?.minute % 15 !== 0 ? 'Meetings start every 15 minutes.' : null}\\n    /*- end highlight -*/\\n    defaultValue={new Time(9, 25)} />\\n  <Button type=\"submit\">Submit</Button>\\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Creating Medium-sized Modal Dialog in React Spectrum\nDESCRIPTION: This snippet demonstrates how to implement a medium-sized modal dialog using DialogTrigger and Dialog components. It includes a form with input fields and buttons for user interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Medium</ActionButton>\n  {(close) => (\n    <Dialog size=\"M\">\n      <Heading>Profile</Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button autoFocus variant=\"accent\" onPress={close}>Save</Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>Make private</Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Dialog with Custom Event Handling in React Spectrum\nDESCRIPTION: Example demonstrating how to handle custom events in a Dialog by chaining callbacks with the DialogTrigger's close function. Shows alert messages on save and cancel actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let alertSave = (close) => {\n    close();\n    alert('Profile saved!');\n  }\n\n  let alertCancel = (close) => {\n    close();\n    alert('Profile not saved!');\n  }\n\n  return (\n    <DialogTrigger>\n      <ActionButton>Set Profile</ActionButton>\n      {(close) => (\n        <Dialog>\n          <Heading>Profile</Heading>\n          <Divider />\n          <ButtonGroup>\n            <Button variant=\"secondary\" onPress={() => alertCancel(close)}>Cancel</Button>\n            <Button autoFocus variant=\"accent\" onPress={() => alertSave(close)}>Save</Button>\n          </ButtonGroup>\n          <Content>\n            <Form>\n              <TextField label=\"Name\" />\n              <Checkbox>Make private</Checkbox>\n            </Form>\n          </Content>\n        </Dialog>\n      )}\n    </DialogTrigger>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled RadioGroup Value in React Spectrum (TSX)\nDESCRIPTION: Demonstrates how to create a controlled `RadioGroup` component using the `value` prop bound to React state (`selected`) and the `onChange` handler (`setSelected`) to update the state when a user selects a radio button. The currently selected value is displayed below the group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(null);\n\n  return (\n    <>\n      <RadioGroup label=\"Favorite avatar\" value={selected} onChange={setSelected}>\n        <Radio value=\"wizard\">Wizard</Radio>\n        <Radio value=\"dragon\">Dragon</Radio>\n      </RadioGroup>\n      <p>You have selected: {selected}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Meter Component in React Aria\nDESCRIPTION: This snippet demonstrates how to create a basic Meter component using React Aria. It includes a label, value display, and a visual bar representation of the meter's value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Meter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Meter, Label} from 'react-aria-components';\n\n<Meter value={25}>\n  {({percentage, valueText}) => <>\n    <Label>Storage space</Label>\n    <span className=\"value\">{valueText}</span>\n    <div className=\"bar\">\n      <div className=\"fill\" style={{width: percentage + '%'}} />\n    </div>\n  </>}\n</Meter>\n```\n\n----------------------------------------\n\nTITLE: Customizing React Aria Checkbox via Context Provider (TSX)\nDESCRIPTION: Provides an example of creating a wrapper component (`CheckboxDescription`) that utilizes `CheckboxContext.Provider` to pass down props, specifically `aria-describedby`, to a descendant Checkbox component. This technique enables building compositional APIs and associates a description element with the checkbox for accessibility using a unique ID generated by `useId`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CheckboxContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface CheckboxDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction CheckboxDescription({children, description}: CheckboxDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <CheckboxContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </CheckboxContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<CheckboxDescription description=\"You will receive our newsletter once per week. Unsubscribe at any time.\">\n  <MyCheckbox defaultSelected>Subscribe</MyCheckbox>\n</CheckboxDescription>\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset Popover Dialog in React Spectrum\nDESCRIPTION: This example demonstrates how to use the 'offset' prop to position a Popover Dialog 50px above its trigger button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"popover\" placement=\"top\" offset={50}>\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>Offset</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Offset by an additional 50px.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Basic SearchField Example in React\nDESCRIPTION: This example demonstrates a basic usage of the SearchField component with a submit handler and display of submitted text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [submittedText, setSubmittedText] = React.useState(null);\n\n  return (\n    <>\n      <SearchField\n        label=\"Search\"\n        onSubmit={setSubmittedText} />\n      <p>Submitted text: {submittedText}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Dialog Example\nDESCRIPTION: Shows a simple popover dialog triggered by an action button, displaying disk status information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"popover\">\n  <ActionButton>Disk Status</ActionButton>\n  <Dialog>\n    <Heading>C://</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        50% disk space remaining.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Controlled ToggleButtonGroup Selection Using React State (TypeScript/JSX)\nDESCRIPTION: Implements a controlled multiple selection ToggleButtonGroup by using React's useState hook to store the selected keys. The selectedKeys prop is updated via onSelectionChange. Example shows handling state as an external Set of keys and refreshing display via React rendering. Requires installation of react-aria-components, usage within a React environment, and familiarity with React 'useState'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Key} from 'react-aria-components';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState(new Set<Key>(['bold']));\n\n  return (\n    <>\n      <ToggleButtonGroup selectionMode=\"multiple\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <ToggleButton id=\"bold\">Bold</ToggleButton>\n        <ToggleButton id=\"italic\">Italic</ToggleButton>\n        <ToggleButton id=\"underline\">Underline</ToggleButton>\n      </ToggleButtonGroup>\n      <p>Current selections (controlled): {[...selected].join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Progress Circle Component for Button\nDESCRIPTION: Implementation of a custom progress indicator component used within a pending button. It renders an SVG with animation to show an indeterminate progress state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ProgressBar} from 'react-aria-components';\nimport type {ProgressBarProps} from 'react-aria-components';\n\nfunction MyProgressCircle(props: ProgressBarProps) {\n  return (\n    <ProgressBar {...props}>\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" style={{display: 'block'}}>\n        <path fill=\"currentColor\" d=\"M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z\" opacity=\".25\" />\n        <path fill=\"currentColor\" d=\"M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z\">\n          <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"0.75s\" values=\"0 12 12;360 12 12\" repeatCount=\"indefinite\"/>\n        </path>\n      </svg>\n    </ProgressBar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Complex Content in Submenu Popovers - React Spectrum - TypeScript\nDESCRIPTION: Illustrates augmenting submenu popovers with non-menu components, such as an Autocomplete that filters submenu options. Uses MySearchField for filtering. Requires 'react-aria-components' including Autocomplete and useFilter. Input is user text for filtering; output is a dynamic submenu that adapts its content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Menu, Popover, SubmenuTrigger, Autocomplete, useFilter} from 'react-aria-components';\nimport {MySearchField} from './SearchField';\n\nfunction Example() {\n  let {contains} = useFilter({sensitivity: 'base'});\n\n  return (\n    <MyMenuButton label=\"Actions\">\n      <MyItem>Cut</MyItem>\n      <MyItem>Copy</MyItem>\n      <MyItem>Delete</MyItem>\n      <SubmenuTrigger>\n        <MyItem>Add tag...</MyItem>\n        <Popover>\n          <Autocomplete filter={contains}>\n            <MySearchField label=\"Search tags\" autoFocus />\n            <Menu>\n              <MyItem>News</MyItem>\n              <MyItem>Travel</MyItem>\n              <MyItem>Shopping</MyItem>\n              <MyItem>Business</MyItem>\n              <MyItem>Entertainment</MyItem>\n              <MyItem>Food</MyItem>\n              <MyItem>Technology</MyItem>\n              <MyItem>Health</MyItem>\n              <MyItem>Science</MyItem>\n            </Menu>\n          </Autocomplete>\n        </Popover>\n      </SubmenuTrigger>\n    </MyMenuButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Meter Component with useMeter\nDESCRIPTION: This example demonstrates how to create a basic Meter component using the useMeter hook. It includes handling of props, calculating the meter's visual representation, and applying ARIA attributes for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/meter/docs/useMeter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Meter(props) {\n  let {\n    label,\n    showValueLabel = !!label,\n    value,\n    minValue = 0,\n    maxValue = 100\n  } = props;\n  let {\n    meterProps,\n    labelProps\n  } = useMeter(props);\n\n  // Calculate the width of the progress bar as a percentage\n  let percentage = (value - minValue) / (maxValue - minValue);\n  let barWidth = `${Math.round(percentage * 100)}%`;\n\n  return (\n    <div {...meterProps} style={{width: 200}}>\n      <div style={{display: 'flex', justifyContent: 'space-between'}}>\n        {label &&\n          <span {...labelProps}>\n            {label}\n          </span>\n        }\n        {showValueLabel &&\n          <span>\n            {meterProps['aria-valuetext']}\n          </span>\n        }\n      </div>\n      <div style={{height: 10, background: 'lightgray'}}>\n        <div style={{width: barWidth, height: 10, background: 'green'}} />\n      </div>\n    </div>\n  );\n}\n\n<Meter\n  label=\"Storage space\"\n  value={25} />\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Action Button in React\nDESCRIPTION: This example demonstrates how to add an action button to a TagGroup using the actionLabel and onAction props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup\n  actionLabel=\"Clear\"\n  onAction={() => alert('Clear action pressed.')}\n  aria-label=\"TagGroup with action\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Calendar System in React\nDESCRIPTION: This example shows how to implement a custom calendar system (4-5-4 format) by extending the GregorianCalendar class from @internationalized/date and using it with the Calendar component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction Example() {\n  return <Calendar firstDayOfWeek=\"sun\" createCalendar={() => new Custom454()} />;\n}\n\nclass Custom454 extends GregorianCalendar {\n  // See @internationalized/date docs linked above...\n  ///- begin collapse -///\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n  getDaysInMonth(date) {\n    return this.weekPattern[date.month - 1] * 7;\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < this.weekPattern.length; months++) {\n      let weeksInMonth = this.weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  getFormattableMonth(date) {\n    let gregorian = toCalendar(date, new GregorianCalendar());\n    return gregorian.set({month: date.month, day: 1});\n  }\n\n  isEqual(other) {\n    return other instanceof Custom454;\n  }\n ///- end collapse -///\n```\n\n----------------------------------------\n\nTITLE: Custom Drag Preview Implementation\nDESCRIPTION: Shows how to implement a custom drag preview using the DragPreview component with dynamic content based on dragged items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrag.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Draggable() {\n  let preview = React.useRef(null);\n  let {dragProps, isDragging} = useDrag({\n    preview,\n    getItems() {\n      return [{\n        'text/plain': 'hello world'\n      }];\n    }\n  });\n\n  return (\n    <>\n      <div {...dragProps} role=\"button\" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n        Drag me\n      </div>\n      <DragPreview ref={preview}>\n        {items => <div style={{background: 'green', color: 'white'}}>{items[0]['text/plain']}</div>}\n      </DragPreview>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Selection Checkbox Cell with React Aria\nDESCRIPTION: This snippet shows how to implement a table cell containing a checkbox for row selection using useTableSelectionCheckbox hook. It enables users to select rows through checkbox interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTableSelectionCheckbox} from '@react-aria/table';\n\n// Reuse the Checkbox from your component library. See below for details.\nimport {Checkbox} from 'your-component-library';\n\nfunction TableCheckboxCell({cell, state}) {\n  let ref = useRef<HTMLTableCellElement | null>(null);\n  let {gridCellProps} = useTableCell({node: cell}, state, ref);\n  let {checkboxProps} = useTableSelectionCheckbox({key: cell.parentKey}, state);\n\n  return (\n    <td\n      {...gridCellProps}\n      ref={ref}>\n      <Checkbox {...checkboxProps} />\n    </td>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling TreeView Items in React Spectrum (TSX)\nDESCRIPTION: This snippet disables specific items in a TreeView by passing their keys in the disabledKeys prop. The selectionMode is set to 'single'. Dependencies include ExampleTree. Key parameter is disabledKeys (array of item keys to disable). Inputs are the disabled item keys; output prevents interaction with the specified nodes. Use this pattern to restrict user interaction with certain items in hierarchical data structures.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleTree\n  aria-label=\"Example tree with disabled items\"\n  defaultExpandedKeys={['projects', 'project-2']}\n  selectionMode=\"single\"\n  /*- begin highlight -*/\n  disabledKeys={['document-a', 'document-b']}\n  /*- end highlight -*/\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Tags in React Spectrum TagGroup using TSX\nDESCRIPTION: Demonstrates disabling a specific tag ('Tuna Salad') within a `MyTagGroup` by adding the `isDisabled` prop directly to the corresponding `MyTag` component. Disabled tags are visually distinct and are not focusable, selectable, or keyboard navigable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyTagGroup\n label=\"Sandwich contents\"\n selectionMode=\"multiple\"\n>\n  <MyTag>Lettuce</MyTag>\n  <MyTag>Tomato</MyTag>\n  <MyTag>Cheese</MyTag>\n  {/*- begin highlight -*/}\n  <MyTag isDisabled>Tuna Salad</MyTag>\n  {/*- end highlight -*/}\n  <MyTag>Egg Salad</MyTag>\n  <MyTag>Ham</MyTag>\n</MyTagGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Controlled Open State in ActionMenu with React Spectrum\nDESCRIPTION: Demonstrates how to implement controlled behavior for the menu's open state using the isOpen prop and onOpenChange callback to manage visibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <ActionMenu\n      isOpen={open}\n      onOpenChange={setOpen}>\n      <Item key=\"cut\">Cut</Item>\n      <Item key=\"copy\">Copy</Item>\n      <Item key=\"paste\">Paste</Item>\n    </ActionMenu>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Drop Position Types with Accessible Labels\nDESCRIPTION: Creates a figure showing the three types of drop positions (root, on, and between) with proper styling and accessibility attributes for screen readers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/dnd.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<figure style={{display: 'flex', flexDirection: 'column', alignItems: 'center', margin: '20px 0'}}>\n  <div style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: 50, marginBottom: 4, background: 'var(--anatomy-gray-100)', padding: 32, width: 'calc(100% - 64px)', borderRadius: 4}}>\n    <RootDropPosition role=\"img\" aria-label=\"Root drop position\" />\n    <OnDropPosition role=\"img\" aria-label=\"On drop position\" />\n    <BetweenDropPosition role=\"img\" aria-label=\"Between drop position\" />\n  </div>\n  <figcaption style={{fontStyle: 'italic'}}>The \"root\", \"on\", and \"between\" drop positions.</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Form validation with isRequired and FieldError - React Spectrum - TypeScript\nDESCRIPTION: Implements a Select component inside a form using isRequired for validation, displaying validation errors via the FieldError component. Depends on react-aria-components' Form and FieldError as well as Button, Label, SelectValue, ListBox, and Popover. Input: Form submission with Select value. Output: Form validation errors displayed consistently. Limitation: Only captures client-side or basic validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError} from 'react-aria-components';\\n\\n<Form>\\n  {/*- begin highlight -*/}\\n  <Select name=\\\"animal\\\" isRequired>\\n  {/*- end highlight -*/}\\n    <Label>Favorite Animal</Label>\\n    <Button>\\n      <SelectValue />\\n      <span aria-hidden=\\\"true\\\">▼</span>\\n    </Button>\\n    {/*- begin highlight -*/}\\n    <FieldError />\\n    {/*- end highlight -*/}\\n    <Popover>\\n      <ListBox>\\n        <ListBoxItem>Aardvark</ListBoxItem>\\n        <ListBoxItem>Cat</ListBoxItem>\\n        <ListBoxItem>Dog</ListBoxItem>\\n        <ListBoxItem>Kangaroo</ListBoxItem>\\n        <ListBoxItem>Panda</ListBoxItem>\\n        <ListBoxItem>Snake</ListBoxItem>\\n      </ListBox>\\n    </Popover>\\n  </Select>\\n  <Button type=\\\"submit\\\">Submit</Button>\\n</Form>\\n\n```\n\n----------------------------------------\n\nTITLE: Building an HSBA Color Picker with React Spectrum\nDESCRIPTION: This example shows how to implement an HSBA color picker using ColorArea, ColorWheel, and ColorSlider components. It maps saturation and brightness to the ColorArea component's x and y axes and uses a ColorWheel for hue selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea, ColorSlider, ColorWheel} from '@react-spectrum/color';\nimport {Flex, Grid} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {parseColor} from '@react-stately/color';\nimport {View} from '@react-spectrum/view';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsba(0, 100%, 50%, 0.5)'));\n  let [, saturationChannel, brightnessChannel] = color.getColorChannels();\n  return (\n    <fieldset style={{border: 0}}>\n      <legend>HSBA Example</legend>\n      <Flex\n        direction=\"column\">\n        <View\n          position=\"relative\"\n          width=\"size-2400\">\n          <Grid\n            position=\"absolute\"\n            justifyContent=\"center\"\n            alignContent=\"center\"\n            width=\"100%\"\n            height=\"100%\">\n            <ColorArea\n              xChannel={saturationChannel}\n              yChannel={brightnessChannel}\n              value={color}\n              onChange={setColor}\n              size=\"size-1200\" />\n          </Grid>\n          <ColorWheel\n            value={color}\n            onChange={setColor}\n            size=\"size-2400\" />\n        </View>\n        <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n        <p>Current value: {color.toString('hsba')}</p>\n      </Flex>\n    </fieldset>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Detailed Anatomy of a React Aria DatePicker in TSX\nDESCRIPTION: This snippet outlines the complete anatomical structure of a `DatePicker` using `react-aria-components`. It shows how various elements like labels, input groups, date segments, buttons, descriptive text, error messages, popovers, dialogs, and calendar components fit together to form a comprehensive date picker interface. It serves as a structural template.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePicker, Label, Group, Popover, Dialog, Calendar, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Button, Heading, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';\n\n<DatePicker>\n  <Label />\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button />\n  </Group>\n  <Text slot=\"description\" />\n  <FieldError />\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <Button slot=\"previous\" />\n        <Heading />\n        <Button slot=\"next\" />\n        <CalendarGrid>\n          <CalendarGridHeader>\n            {day => <CalendarHeaderCell />}\n          </CalendarGridHeader>\n          <CalendarGridBody>\n            {date => <CalendarCell date={date} />}\n          </CalendarGridBody>\n        </CalendarGrid>\n        <Text slot=\"errorMessage\" />\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Component with React Aria's useCheckbox\nDESCRIPTION: This snippet shows how to implement a reusable Checkbox component using the useCheckbox hook and useToggleState. This component is used for row selection in tables.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useToggleState} from '@react-stately/toggle';\nimport {useCheckbox} from '@react-aria/checkbox';\n\nfunction Checkbox(props) {\n  let ref = React.useRef<HTMLInputElement | null>(null);\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} style={props.style} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Drop Operations with getAllowedDropOperations in React Spectrum\nDESCRIPTION: This example demonstrates how to control which drop operations are allowed for dragged data by implementing the getAllowedDropOperations function. It restricts the allowed operations to copy only, preventing move operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  // ...\n  ///- begin collapse -///\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n      {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n      {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n      {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n    ]\n  });\n  ///- end collapse -///\n  let { dragAndDropHooks } = useDragAndDrop({\n    // ...\n    ///- begin collapse -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        return {\n          'text/plain': item.name,\n          'pokemon': JSON.stringify(item)\n        };\n      });\n    },\n    ///- end collapse -///\n    /*- begin highlight -*/\n    getAllowedDropOperations: () => ['copy']\n    /*- end highlight -*/\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <PokemonTable\n        items={list.items}\n        selectionMode=\"multiple\"\n        dragAndDropHooks={dragAndDropHooks} />\n      <DroppableTable />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating a Custom Label Component with React Aria Context in TSX\nDESCRIPTION: Defines a custom label component `MyCustomLabel` using `React.forwardRef`. It consumes props and ref provided by a parent React Aria component (like `DatePicker`) via `LabelContext` and merges them with local props using the `useContextProps` hook. This allows using custom label implementations within React Aria components while preserving accessibility and functionality provided through context. Requires `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  ///- end highlight -///\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: NumberField with HTML Form Integration\nDESCRIPTION: Demonstrates how to use NumberField within an HTML form, including currency formatting.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField\n  label=\"Transaction amount\"\n  name=\"amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Restricting RangeCalendar Selection with minValue - React Spectrum - TypeScript/JSX\nDESCRIPTION: Shows how to use the minValue prop with RangeCalendar to restrict selectable dates to those after today. This helps with validation at the UI level. The today function from @internationalized/date is used to generate the minimum selectable date in the user's local timezone. Dependencies: @react-spectrum/calendar, @internationalized/date, React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\\n\\n<RangeCalendar aria-label=\\\"Trip dates\\\" minValue={today(getLocalTimeZone())} />\n```\n\n----------------------------------------\n\nTITLE: SearchWithin Component with Side Label in React\nDESCRIPTION: This example shows how to position the label to the side of the SearchWithin component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchwithin/docs/SearchWithin.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchWithin label=\"Search\" labelPosition=\"side\">\n  <SearchField />\n  <Picker defaultSelectedKey=\"all\">\n    <Item key=\"all\">All</Item>\n    <Item key=\"campaigns\">Campaigns</Item>\n    <Item key=\"audiences\">Audiences</Item>\n    <Item key=\"tags\">Tags</Item>\n  </Picker>\n</SearchWithin>\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Stepper Component with Slotted Buttons (TSX)\nDESCRIPTION: Demonstrates the usage of the custom `Stepper` component. Two `Button` components are provided as children, distinguished by the `slot` prop ('increment' and 'decrement'), which determines the context value (and thus the `onPress` handler) they receive from the `Stepper`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stepper>\n  <Button slot=\"increment\">⬆</Button>\n  <Button slot=\"decrement\">⬇</Button>\n</Stepper>\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Implementation\nDESCRIPTION: Simple example showing how to create a basic menu with action items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu onAction={(key) => alert(key)}>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n    <Item key=\"replace\">Replace</Item>\n  </Menu>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Formatting NumberField as Currency, with Code and Accounting Style - React Spectrum - TypeScript\nDESCRIPTION: Shows how to use currency formatting with NumberField by specifying style as 'currency', selecting EUR as the currency, currencyDisplay as 'code', and currencySign as 'accounting'. This displays the currency code instead of the symbol and uses parentheses for negative values in supported locales.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<MyNumberField\n  label=\"Transaction amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'EUR',\n    currencyDisplay: 'code',\n    currencySign: 'accounting'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Applying onAction Directly to Individual GridList Rows (TypeScript)\nDESCRIPTION: This snippet shows how to apply individual row actions by passing an onAction callback directly to MyItem components within MyGridList. Each row is configured to alert with its corresponding row name when the action is triggered. This pattern is especially useful when the set of rows is statically defined. Inputs: onAction for each MyItem; Output: row-level action feedback. Dependencies: MyGridList, MyItem, and a supported alert mechanism.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<MyGridList aria-label=\"List with onAction applied on the rows directly\" selectionMode=\"multiple\">\\n  {/*- begin highlight -*/}\\n  <MyItem onAction={() => alert(`Opening Games`)}>\\n  {/*- end highlight -*/}\\n    Games\\n  </MyItem>\\n  {/*- begin highlight -*/}\\n  <MyItem onAction={() => alert(`Opening Program Files`)}>\\n  {/*- end highlight -*/}\\n    Program Files\\n  </MyItem>\\n  {/*- begin highlight -*/}\\n  <MyItem onAction={() => alert(`Opening bootmgr`)}>\\n  {/*- end highlight -*/}\\n    bootmgr\\n  </MyItem>\\n  {/*- begin highlight -*/}\\n  <MyItem onAction={() => alert(`Opening log.txt`)}>\\n  {/*- end highlight -*/}\\n    log.txt\\n  </MyItem>\\n</MyGridList>\\n\n```\n\n----------------------------------------\n\nTITLE: TextField Description Slot - React Aria - TypeScript/TSX\nDESCRIPTION: Shows use of the description slot with the Text component to provide user help text under the input. Included inside a TextField for enhanced usability. Requires Label, Input, Text (with slot='description'), all from react-aria-components. Useful for contextual tips.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n<TextField>\\n  <Label>Email</Label>\\n  <Input />\\n  {/*- begin highlight -*/}\\n  <Text slot=\"description\">Enter an email for us to contact you about your order.</Text>\\n  {/*- end highlight -*/}\\n</TextField>\\n\n```\n\n----------------------------------------\n\nTITLE: ProgressCircle with Static Colors in React Spectrum\nDESCRIPTION: Shows how to use static colors for ProgressCircle components on different background colors for better contrast and visibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressCircle.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<View backgroundColor=\"static-blue-700\" padding=\"size-300\">\n  <ProgressCircle aria-label=\"Loading…\" staticColor=\"white\" isIndeterminate />\n</View>\n<View backgroundColor=\"static-yellow-400\" padding=\"size-300\">\n  <ProgressCircle aria-label=\"Loading…\" staticColor=\"black\" isIndeterminate />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Validating Calendar Input and Displaying Error Message in React Spectrum (TypeScript)\nDESCRIPTION: Demonstrates client-side weekday validation by using the isWeekend utility to invalidate and style weekend selections in a Calendar component. Depends on @internationalized/date and react-aria for locale and date, and assumes MyCalendar is a Calendar-like component supporting isInvalid and errorMessage props. Inputs: user-selected date. Outputs: Calendar UI update and optional error message. Limitation: Only marks weekends invalid per locale; needs handler for other rules.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {today, isWeekend} from '@internationalized/date';\\nimport {useLocale} from 'react-aria';\\n\\nfunction Example() {\\n  let [date, setDate] = React.useState(today(getLocalTimeZone()));\\n  let {locale} = useLocale();\\n  let isInvalid = isWeekend(date, locale);\\n\\n  return (\\n    <MyCalendar\\n      aria-label=\"Appointment date\"\\n      value={date}\\n      onChange={setDate}\\n      /*- begin highlight -*/\\n      isInvalid={isInvalid}\\n      errorMessage={isInvalid ? 'We are closed on weekends' : undefined}\\n      /*- end highlight -*/\\n    />\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Image Items in a Droppable GridList with CSS\nDESCRIPTION: This CSS code styles the image items in a droppable GridList. It creates a layout with fixed-height images that maintain their aspect ratio, with truncated text labels beside them.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_36\n\nLANGUAGE: css\nCODE:\n```\n.image-item {\n  display: flex;\n  height: 50px;\n  gap: 10px;\n  align-items: center;\n}\n\n.image-item img {\n  height: 100%;\n  aspect-ratio: 1/1;\n  object-fit: contain;\n}\n\n.image-item span {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Calendar System (4-5-4 Fiscal Year) for RangeCalendar - React Spectrum - TypeScript/JSX\nDESCRIPTION: Defines a custom calendar, Custom454, by extending GregorianCalendar to represent a 4-5-4 fiscal year system. The createCalendar prop is passed a factory returning a new Custom454 instance. Calendar logic is overwritten via getDaysInMonth, fromJulianDay, toJulianDay, getFormattableMonth, and isEqual methods. Usage requires @internationalized/date, and the createCalendar functionality comes from @react-spectrum/calendar. Inputs: various, including firstDayOfWeek and createCalendar props. Outputs: RangeCalendar rendered with custom fiscal calendar logic.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar} from '@internationalized/date';\\n\\nfunction Example() {\\n  return <RangeCalendar firstDayOfWeek=\\\"sun\\\" createCalendar={() => new Custom454()} />;\\n}\\n\\nclass Custom454 extends GregorianCalendar {\\n  // See @internationalized/date docs linked above...\\n  ///- begin collapse -///\\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\\n  getDaysInMonth(date) {\\n    return this.weekPattern[date.month - 1] * 7;\\n  }\\n\\n  fromJulianDay(jd: number): CalendarDate {\\n    let gregorian = super.fromJulianDay(jd);\\n\\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\\n    for (let months = 0; months < this.weekPattern.length; months++) {\\n      let weeksInMonth = this.weekPattern[months];\\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\\n      if (monthEnd.compare(gregorian) > 0) {\\n        let days = gregorian.compare(monthStart);\\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\\n      }\\n      monthStart = monthEnd;\\n    }\\n\\n    throw Error('Date is not in any month somehow!');\\n  }\\n\\n  toJulianDay(date: AnyCalendarDate): number {\\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\\n    for (let month = 1; month < date.month; month++) {\\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\\n    }\\n\\n    let gregorian = monthStart.add({days: date.day - 1});\\n    return super.toJulianDay(gregorian);\\n  }\\n\\n  getFormattableMonth(date) {\\n    let gregorian = toCalendar(date, new GregorianCalendar());\\n    return gregorian.set({month: date.month, day: 1});\\n  }\\n\\n  isEqual(other) {\\n    return other instanceof Custom454;\\n  }\\n ///- end collapse -///\\n}\n```\n\n----------------------------------------\n\nTITLE: Managing React Spectrum Checkbox State (Controlled vs. Uncontrolled)\nDESCRIPTION: Illustrates two ways to manage checkbox state: uncontrolled using the `defaultSelected` prop, and controlled using the `isSelected` prop paired with an `onChange` handler and `React.useState`. The `Flex` component is used for layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/Checkbox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(true);\n\n  return (\n    <Flex direction=\"row\">\n      <Checkbox defaultSelected>Subscribe (uncontrolled)</Checkbox>\n      <Checkbox isSelected={selected} onChange={setSelected}>Subscribe (controlled)</Checkbox>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Yellow to Yellow-Green Gradient in OKLCH\nDESCRIPTION: This CSS snippet creates a vertical gradient from yellow to yellow-green using OKLCH. It shows how darker yellows tend to appear more green and are described as yellow-green.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\nbackground: 'linear-gradient(in oklch to bottom, oklch(100% 0.2 104), oklch(0% 0.2 104))'\n```\n\n----------------------------------------\n\nTITLE: Updating UI on Calendar Change Using Date Formatter in React Spectrum (TypeScript)\nDESCRIPTION: This example uses the onChange prop with Calendar to update another UI element with a formatted human-readable date. It utilizes 'getLocalTimeZone' (from @internationalized/date) and 'useDateFormatter' (from @adobe/react-spectrum) for locale-aware formatting. It demonstrates integrating Calendar state with native JavaScript Date objects and user locale. Inputs: aria-label, value, onChange, useDateFormatter options. Outputs: Calendar component and formatted date string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('2022-07-04'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <Calendar aria-label=\"Event date\" value={date} onChange={setDate} />\n      <p>Selected date: {formatter.format(date.toDate(getLocalTimeZone()))}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Checkbox Component with React Aria\nDESCRIPTION: Basic implementation of a checkbox component using the useCheckbox hook and useToggleState for state management. This example shows how to connect the necessary hooks and render a simple checkbox with a label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckbox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCheckbox} from '@react-aria/checkbox';\nimport {useToggleState} from '@react-stately/toggle';\n\nfunction Checkbox(props) {\n  let {children} = props;\n  let state = useToggleState(props);\n  let ref = React.useRef(null);\n  let {inputProps} = useCheckbox(props, state, ref);\n\n  return (\n    <label style={{display: 'block'}}>\n      <input {...inputProps} ref={ref} />\n      {children}\n    </label>\n  );\n}\n\n<Checkbox>Unsubscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Displaying Avatars in React Spectrum ComboBox Items (TSX)\nDESCRIPTION: Demonstrates embedding `Avatar` and `Text` components within `ComboBox` `Item` elements to create visually rich options, suitable for user selection lists. Each item uses `textValue` for the underlying selection value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<ComboBox label=\"Select a user\">\n  <Item textValue=\"User 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 1</Text>\n  </Item>\n  <Item textValue=\"User 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 2</Text>\n  </Item>\n  <Item textValue=\"User 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 3</Text>\n  </Item>\n  <Item textValue=\"User 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 4</Text>\n  </Item>\n</ComboBox>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting ZonedDateTime Value for Time Zone Awareness - React Spectrum - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to initialize a DateField with a value containing explicit time zone information using the parseZonedDateTime function from @internationalized/date. By providing a ZonedDateTime as defaultValue, the component displays the date and time in the specified time zone (e.g., America/Los_Angeles). This is essential when time zone correctness is needed, such as for calendar events at a specific locale. Requires importing parseZonedDateTime in the working file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Insertion Drop Between Table Items\nDESCRIPTION: This example shows how to enable dropping between items in a table using the onInsert event. Table renders a DropIndicator between items to indicate the insertion position, which can be styled using CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Bulbasaur', type: 'Grass, Poison', level: '65'},\n      {id: 2, name: 'Charmander', type: 'Fire', level: '89'},\n      {id: 3, name: 'Squirtle', type: 'Water', level: '77'},\n      {id: 4, name: 'Caterpie', type: 'Bug', level: '46'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      let items = await Promise.all(e.items.filter(isTextDropItem).map(async item => {\n        let {name, type, level} = JSON.parse(await item.getText('pokemon'));\n        return {id: Math.random(), name, type, level};\n      }));\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items);\n      }\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableTable />\n      <PokemonTable items={list.items} dragAndDropHooks={dragAndDropHooks} />\n    </div>\n  );\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DropIndicator[data-drop-target] {\n  outline: 1px solid var(--highlight-background);\n  transform: translateZ(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty State with renderEmptyState Prop - React Spectrum ListView - TypeScript/TSX\nDESCRIPTION: This code provides a custom renderEmptyState function for ListView, displaying an IllustratedMessage when the list is empty. It utilizes spectrum icons and text components to convey a 'No results' message. Required dependencies include @react-spectrum/view, @react-spectrum/illustratedmessage, @react-spectrum/text, and @spectrum-icons/illustrations/NotFound. Inputs are ListView props including renderEmptyState, output is an empty state UI rendered when no items are present.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_27\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Content} from '@react-spectrum/view';\\nimport {IllustratedMessage} from '@react-spectrum/illustratedmessage';\\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\\nimport {Heading} from '@react-spectrum/text';\\n\\nfunction renderEmptyState() {\\n  return (\\n    <IllustratedMessage>\\n      <NotFound />\\n      <Heading>No results</Heading>\\n      <Content>No results found</Content>\\n    </IllustratedMessage>\\n  );\\n}\\n\\n<ListView\\n  selectionMode=\\\"multiple\\\"\\n  aria-label=\\\"Example ListView for empty state\\\"\\n  maxWidth=\\\"size-6000\\\"\\n  height=\\\"size-3000\\\"\\n  renderEmptyState={renderEmptyState}>\\n  {[]}\\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Making a React Aria CheckboxGroup Read-Only (TSX)\nDESCRIPTION: This TSX snippet shows how to make a `CheckboxGroup` read-only using the `isReadOnly` prop. This prevents users from changing the selection but allows the group to remain focusable, unlike `isDisabled`. Requires `CheckboxGroup` and `Checkbox` components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckboxGroup label=\"Favorite sports\" defaultValue={['baseball']} isReadOnly>\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Using ContextualHelp for Disabled Elements in React Spectrum\nDESCRIPTION: This example demonstrates how to use ContextualHelp as an alternative to tooltips for providing context on disabled elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ContextualHelp, Flex, Heading, Content} from '@adobe/react-spectrum';\n\n<Flex gap=\"size-100\" alignItems=\"center\">\n  <TooltipTrigger>\n    <ActionButton isDisabled>Delete resource</ActionButton>\n    <Tooltip variant=\"negative\" showIcon>Dangerous action.</Tooltip>\n  </TooltipTrigger>\n  <ContextualHelp variant=\"info\">\n      <Heading>Permission required</Heading>\n      <Content>Your admin must grant you permission before you can delete resources.</Content>\n  </ContextualHelp>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Dismissable Modal Dialog Example\nDESCRIPTION: Creates a modal dialog with a close button that users can click to dismiss when no explicit confirmation is required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger isDismissable type=\"modal\">\n  <ActionButton>User Status</ActionButton>\n  <Dialog>\n    <Heading>Status: Bob</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Last Login: December 12, 1989\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Formatting NumberField as Percentage in React Spectrum (TSX)\nDESCRIPTION: Demonstrates using the `formatOptions` prop with `style: 'percent'` in a React Spectrum `NumberField`. This configuration treats the input value as a percentage, multiplying it by 100 for display (e.g., 0.05 becomes 50%) and dividing the user's input by 100 for the `onChange` value. The default step increment automatically adjusts to 0.01.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<NumberField\n  label=\"Sales tax\"\n  defaultValue={0.05}\n  formatOptions={{\n    style: 'percent'\n  }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom FieldGroup Component in React Aria\nDESCRIPTION: This example shows how to create a custom FieldGroup component that can set properties for multiple ColorFields using context. It demonstrates advanced composition techniques in React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorFieldContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isReadOnly?: boolean\n}\n\nfunction FieldGroup({title, children, isReadOnly}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <ColorFieldContext.Provider value={{isReadOnly}}>\n        {children}\n      </ColorFieldContext.Provider>\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Colors\" isReadOnly>\n  <MyColorField label=\"Background\" defaultValue=\"#fff\" />\n  <MyColorField label=\"Foreground\" defaultValue=\"#000\" />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Entry/Exit Animations with CSS\nDESCRIPTION: Shows how to create entry and exit animations for a `Modal` using CSS. It targets the `[data-entering]` and `[data-exiting]` data attributes added by React Aria to apply CSS animations defined with `@keyframes`. The component waits for exit animations to complete before removal.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Modal[data-entering] {\n  animation: slide 300ms;\n}\n\n.react-aria-Modal[data-exiting] {\n  animation: slide 300ms reverse;\n}\n\n@keyframes slide {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing TreeView Empty State Rendering (TypeScript/TSX)\nDESCRIPTION: This example shows how to provide a custom empty state for TreeView by implementing a renderEmptyState function that returns an IllustratedMessage, Heading, and Content. The function is passed via the renderEmptyState prop to TreeView. Dependencies include @react-spectrum/view, @react-spectrum/illustratedmessage, @spectrum-icons/illustrations/NotFound, @react-spectrum/text. Inputs: none (empty tree items); output is a designed message for empty states. Use this to ensure friendly UI when the tree is empty.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Content} from '@react-spectrum/view';\nimport {IllustratedMessage} from '@react-spectrum/illustratedmessage';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\nimport {Heading} from '@react-spectrum/text';\n\nfunction renderEmptyState() {\n  return (\n    <IllustratedMessage>\n      <NotFound />\n      <Heading>No results</Heading>\n      <Content>No results found</Content>\n    </IllustratedMessage>\n  );\n}\n\n<TreeView aria-label=\"Example tree for empty state\" height=\"size-2400\" maxWidth=\"size-6000\" renderEmptyState={renderEmptyState}>\n  {[]}\n</TreeView>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListBox Sections with Dynamic Data (TypeScript)\nDESCRIPTION: This snippet shows how to create sections dynamically from a hierarchical data structure. The `ListBox` iterates over the top-level `options` array. Each item renders a `ListBoxSection` with a `Header`. Inside the section, the `Collection` component iterates over the `children` array of the section data to render the `ListBoxItem`s. Selection is handled similarly to a flat dynamic list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\nimport {Collection} from 'react-aria-components';\n\nfunction Example() {\n  let options = [\n    {name: 'Australian', children: [\n      {id: 2, name: 'Koala'},\n      {id: 3, name: 'Kangaroo'},\n      {id: 4, name: 'Platypus'}\n    ]},\n    {name: 'American', children: [\n      {id: 6, name: 'Bald Eagle'},\n      {id: 7, name: 'Bison'},\n      {id: 8, name: 'Skunk'}\n    ]}\n  ];\n  let [selected, setSelected] = React.useState<Selection>(new Set());\n\n  return (\n    <ListBox\n      aria-label=\"Pick an animal\"\n      items={options}\n      selectedKeys={selected}\n      selectionMode=\"single\"\n      onSelectionChange={setSelected}>\n      {section => (\n        <ListBoxSection id={section.name}>\n          <Header>{section.name}</Header>\n          <Collection items={section.children}>\n            {item => <ListBoxItem>{item.name}</ListBoxItem>}\n          </Collection>\n        </ListBoxSection>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling MyColorWheel Using State and parseColor (React Spectrum, TSX)\nDESCRIPTION: Illustrates a fully controlled ColorWheel using React state and the parseColor utility from react-aria-components. The wheel's value and onChange handler are synchronized, updating both the color position and a displayed value. Accepts color strings via parseColor; outputs a formatted HSL string in the UI. Requires React, React Aria, and parseColor for parsing and state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\\n\\nfunction Example() {\\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));\\n  return (\\n    <>\\n      <MyColorWheel value={color} onChange={setColor} />\\n      <p>Current color value: {color.toString('hsl')}</p>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Read-only Checkbox Example\nDESCRIPTION: Demonstrates how to make a checkbox read-only using the isReadOnly prop, which makes it immutable but still focusable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckbox isSelected isReadOnly>Agree</MyCheckbox>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with onChange Event Handler\nDESCRIPTION: Demonstrates how to use the onChange prop to handle selection changes in a RadioGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(null);\n\n  return (\n    <>\n      <RadioGroup label=\"Favorite avatar\" value={selected} onChange={setSelected}>\n        <Radio value=\"wizard\">Wizard</Radio>\n        <Radio value=\"dragon\">Dragon</Radio>\n      </RadioGroup>\n      <div>You have selected: {selected}</div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accent Variant Buttons with Fill and Outline Styles in Spectrum (TypeScript)\nDESCRIPTION: This snippet demonstrates creating two Spectrum Buttons with the 'accent' variant, displaying both 'fill' and 'outline' styles. The buttons are arranged in a flex layout using Spectrum's Flex component with wrapping and spacing props. Required dependencies are '@react-spectrum/button' and '@react-spectrum/layout'. Useful for illustrating design options and visual consistency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\\\"size-250\\\">\\n  <Button variant=\\\"accent\\\" style=\\\"fill\\\">Save</Button>\\n  <Button variant=\\\"accent\\\" style=\\\"outline\\\">Save</Button>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hour Cycle Format in TimeField\nDESCRIPTION: Example of forcing a 24-hour time format in TimeField regardless of the user's locale settings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField\n  label=\"Appointment time\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Controlling Single Selection State in ActionGroup (TSX)\nDESCRIPTION: Illustrates controlled single selection using `selectionMode=\"single\"`, `selectedKeys`, and `onSelectionChange`. The selection state is managed externally using `React.useState`, updating when the user selects a different item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['list']));\n\n  return (\n    <>\n      <ActionGroup selectionMode=\"single\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <Item key=\"grid\">Grid view</Item>\n        <Item key=\"list\">List view</Item>\n        <Item key=\"gallery\">Gallery view</Item>\n      </ActionGroup>\n      <p>Current selection (controlled): {[...selected]}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying and Editing Slider State with React Spectrum - TypeScript\nDESCRIPTION: This TypeScript React snippet demonstrates how to access the current value of a React Spectrum Slider using context and display it in a custom number input (NumberField). It utilizes React's context API to pull the slider state (SliderStateContext), connects a NumberField to update the state, and composes multiple Spectrum components to build the UI. Dependencies include React, react-aria-components, and React Spectrum components. Inputs are user modifications to the number field, and outputs are the updated value displayed and synced with the slider. The code assumes that the parent Slider provides context and a Label, and it shows expected usage for building accessible custom sliders.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {SliderStateContext, LabelContext, NumberField, Input, useSlottedContext} from 'react-aria-components';\\n\\nfunction SliderNumberField() {\\n  /*- begin highlight -*/\\n  let state = React.useContext(SliderStateContext)!;\\n  /*- end highlight -*/\\n  let labelProps = useSlottedContext(LabelContext)!;\\n  return (\\n    <NumberField\\n      aria-labelledby={labelProps.id}\\n      value={state.values[0]}\\n      onChange={v => state.setThumbValue(0, v)}>\\n      <Input />\\n    </NumberField>\\n  );\\n}\\n\\n<Slider defaultValue={30}>\\n  <Label>Opacity</Label>\\n  {/*- begin highlight -*/}\\n  <SliderNumberField />\\n  {/*- end highlight -*/}\\n  <SliderTrack>\\n    <SliderThumb />\\n  </SliderTrack>\\n</Slider>\\n\n```\n\n----------------------------------------\n\nTITLE: Accessible Switch with Aria-Label - React Spectrum - TypeScript/TSX\nDESCRIPTION: Demonstrates a Switch configured for accessibility without a visible label. The aria-label prop provides screen readers with a description of the control. This pattern is useful when a visible label is not present. Only the aria-label prop is required beyond the base Switch functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/docs/Switch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch aria-label=\\\"Low power mode\\\" />\n```\n\n----------------------------------------\n\nTITLE: Dialog Placement Customization Example\nDESCRIPTION: Demonstrates how to customize a popover dialog's placement relative to its anchor element using the placement prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"popover\" placement=\"right top\">\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>The Heading</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a popover placed to the right of its\n        trigger and offset so the arrow is at the top of the dialog.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: TextField with Label Alignment and Position in React\nDESCRIPTION: This example shows how to adjust the label alignment and position for the TextField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField label=\"Search\" labelPosition=\"side\" labelAlign=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: Semantic Variant Examples for StatusLight\nDESCRIPTION: Examples of StatusLight components using semantic variants (neutral, positive, notice, negative, info) with recommended usage guidelines for each color variant.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/statuslight/docs/StatusLight.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<StatusLight variant=\"neutral\">Gray: Archived, Deleted, Paused, Draft, Not Started, Ended</StatusLight>\n<StatusLight variant=\"positive\">Green: Approved, Complete, Success, New, Purchased, Licensed</StatusLight>\n<StatusLight variant=\"notice\">Orange: Needs Approval, Pending, Scheduled, Syncing, Indexing, Processing</StatusLight>\n<StatusLight variant=\"negative\">Red: Error, Alert, Rejected, Failed</StatusLight>\n<StatusLight variant=\"info\">Blue: Active, In Use, Live, Published</StatusLight>\n```\n\n----------------------------------------\n\nTITLE: Handling ColorSlider Events (onChange, onChangeEnd) in React (TSX)\nDESCRIPTION: Illustrates the usage of `onChange` and `onChangeEnd` event handlers. `onChange` is triggered continuously as the slider handle is dragged, updating `currentValue` state. `onChangeEnd` fires only when the drag interaction finishes, updating `finalValue` state. Both handlers receive the updated color object. Requires `React.useState` and `parseColor`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n  let [finalValue, setFinalValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n\n  return (\n    <div>\n      <ColorSlider\n        value={currentValue}\n        channel=\"hue\"\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue} />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Usage in React Spectrum\nDESCRIPTION: This example demonstrates the basic usage of a Tooltip with a TooltipTrigger, showing how to associate a tooltip with an action button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger>\n  <ActionButton aria-label=\"Edit Name\"><Edit /></ActionButton>\n  <Tooltip>Change Name</Tooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Group Validation in React Aria CheckboxGroup (TSX)\nDESCRIPTION: This TSX snippet shows how to enforce that at least one checkbox within a `CheckboxGroup` is selected by setting the `isRequired` prop on the group. It also demonstrates using the `FieldError` component to display validation messages for the group. Requires `Form`, `FieldError`, `Button`, and `CheckboxGroup` from `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <CheckboxGroup name=\"condiments\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Sandwich condiments</Label>\n    <MyCheckbox value=\"lettuce\">Lettuce</MyCheckbox>\n    <MyCheckbox value=\"tomato\">Tomato</MyCheckbox>\n    <MyCheckbox value=\"onion\">Onion</MyCheckbox>\n    <MyCheckbox value=\"sprouts\">Sprouts</MyCheckbox>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n  </CheckboxGroup>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Setting 24-Hour Time Format in DatePicker - React Aria - TypeScript\nDESCRIPTION: This snippet demonstrates forcing the DatePicker to use a consistent 24-hour time format by setting the hourCycle prop to 24, overriding the default locale-based behavior. Expected dependencies include React and a custom MyDatePicker. The input parameters are the label for the UI, desired granularity (minute), and hourCycle (24). The output is a time-picker rendering in 24-hour format regardless of user's locale.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<MyDatePicker\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n```\n\n----------------------------------------\n\nTITLE: Building Large-sized Modal Dialog in React Spectrum\nDESCRIPTION: This example illustrates the creation of a large-sized modal dialog using DialogTrigger and Dialog components. It includes a form with input fields and buttons for user interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Large</ActionButton>\n  {(close) => (\n    <Dialog size=\"L\">\n      <Heading>Profile</Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button autoFocus variant=\"accent\" onPress={close}>Save</Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>Make private</Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Columns and Rows with Tailwind Classes in React (JSX)\nDESCRIPTION: This React code sample demonstrates the rendering of table columns, rows, and cells using custom class names composed of Tailwind CSS utility classes. It features conditional rendering logic for sorting icons and resizers, enhancing both interactivity and accessibility. Dependencies include React, react-spectrum table components (Group, Column, Row, Cell), and a Tailwind-compatible build pipeline. Key parameters involve prop spreading and dynamic class name construction, with children representing cell content. Inputs are data-driven row/column props, outputs are styled JSX elements for display in a tabular UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/stock-table.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<span className=\\\"flex-1 truncate\\\">{props.children}</span>\\n{allowsSorting && (\\n  <span className={`ml-1 w-4 h-4 flex items-center justify-center transition ${sortDirection === 'descending' ? 'rotate-180' : ''}`}>\\n    {sortDirection && <ArrowUpIcon width={8} height={10} />}\\n  </span>\\n)}\\n</Group>\\n<ColumnResizer className=\\\"w-px px-[8px] py-1 h-5 bg-clip-content bg-slate-400 cursor-col-resize rounded-sm resizing:bg-slate-800 resizing:w-[2px] resizing:pl-[7px] focus-visible:ring-2 ring-slate-600 ring-inset\\\" />\\n</div>\\n)}\\n</Column>\\n);\\n}\\n\\nfunction StockRow<T extends object>(props: RowProps<T>) {\\n  return <Row {...props} className=\\\"even:bg-slate-100 selected:bg-slate-600 selected:text-white cursor-default group outline-hidden focus-visible:outline focus-visible:outline-2 focus-visible:outline-slate-600 focus-visible:-outline-offset-4 selected:focus-visible:outline-white\\\" />;\\n}\\n\\nfunction StockCell(props: CellProps) {\\n  return <Cell {...props} className={`px-4 py-2 truncate ${props.className} focus-visible:outline focus-visible:outline-2 focus-visible:outline-slate-600 focus-visible:-outline-offset-4 group-selected:focus-visible:outline-white`} />;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Open State for Menus\nDESCRIPTION: This example demonstrates how to create a menu with controlled open state using React's useState hook. The component maintains the open state externally and passes it to the MenuButton component for complete control over when the menu opens and closes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <p>Menu is {open ? 'open' : 'closed'}</p>\n      <MenuButton\n        label=\"View\"\n        isOpen={open}\n        onOpenChange={setOpen}>\n        <Item key=\"side\">Side bar</Item>\n        <Item key=\"options\">Page options</Item>\n        <Item key=\"edit\">Edit Panel</Item>\n      </MenuButton>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling DatePicker onChange Events in React\nDESCRIPTION: This TSX example demonstrates capturing the `onChange` event from a DatePicker. It uses `React.useState` to manage the date state (`date`). A `useDateFormatter` hook provides a locale-aware formatter. When the date changes, the `onChange` handler updates the state, and the component renders the selected date formatted using `formatter.format(date.toDate(getLocalTimeZone()))`, converting the date value to a native JavaScript Date in the local time zone for formatting.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <MyDatePicker label=\"Birth date\" value={date} onChange={setDate} />\n      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Pre-selecting Items Before Async Loading Using initialSelectedKeys with useAsyncList (TypeScript)\nDESCRIPTION: Shows how to pre-select specific items in an async list using the initialSelectedKeys option before data is fetched. Typically used when the set of desired selected keys is known in advance. Depends on useAsyncList; inputs are initialSelectedKeys and the standard load function; output is a selection state that reflects the initial keys once items are loaded.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useAsyncList.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useAsyncList({\n  initialSelectedKeys: ['foo', 'bar'],\n  async load({signal}) {\n    // Same load function as before\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Basic DateField Component Implementation in React\nDESCRIPTION: A simple example showing how to implement a DateField component with Label, DateInput, and DateSegment components from react-aria-components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DateField, Label, DateInput, DateSegment} from 'react-aria-components';\n\n<DateField>\n  <Label>Birth date</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n</DateField>\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-selectable ActionGroup with Collapse Behavior in React Spectrum\nDESCRIPTION: This example demonstrates a multi-selectable ActionGroup for text styling that collapses into a dropdown menu when space is limited. It shows how to use the summaryIcon prop to display a representative icon when collapsed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport TextStyle from '@spectrum-icons/workflow/TextStyle';\n\n<ActionGroup\n  aria-label=\"Text style\"\n  overflowMode=\"collapse\"\n  selectionMode=\"multiple\"\n  isEmphasized\n  summaryIcon={<TextStyle />}\n  maxWidth={100}>\n  <Item key=\"bold\">\n    <TagBold />\n    <Text>Bold</Text>\n  </Item>\n  <Item key=\"italic\">\n    <TagItalic />\n    <Text>Italic</Text>\n  </Item>\n  <Item key=\"underline\">\n    <TagUnderline />\n    <Text>Underline</Text>\n  </Item>\n  <Item key=\"strike\">\n    <TextStrikethrough />\n    <Text>Strikethrough</Text>\n  </Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Using the Menu Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'Menu' component. It renders a menu component, which displays a list of actions or options that a user can choose. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu />\n```\n\n----------------------------------------\n\nTITLE: Adding Links to Items in React Spectrum ListView\nDESCRIPTION: This snippet shows how to create ListView items that act as links to other pages or websites using the href prop on the Item component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<ListView aria-label=\"Links\" selectionMode=\"multiple\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled SearchField in React\nDESCRIPTION: This example shows how to create both controlled and uncontrolled SearchField components with initial values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [searchValue, setSearchValue] = React.useState('puppies');\n  return (\n    <Flex gap=\"size-300\">\n      <SearchField\n        defaultValue=\"puppies\"\n        label=\"Search (uncontrolled)\" />\n\n      <SearchField\n        value={searchValue}\n        onChange={setSearchValue}\n        label=\"Search (controlled)\" />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Drop Indicator Component with useDropIndicator (tsx)\nDESCRIPTION: Implements a `DropIndicator` component using the `useDropIndicator` hook from `@react-aria/dnd`. It renders an `li` element with `role=\"option\"` to act as a visual indicator for drop targets within a list. The component returns null when hidden (`isHidden`) and applies a `drop-target` class when active (`isDropTarget`) for styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDropIndicator} from '@react-aria/dnd';\n\nfunction DropIndicator(props) {\n  let ref = React.useRef(null);\n  let {dropIndicatorProps, isHidden, isDropTarget} = useDropIndicator(props, props.dropState, ref);\n  if (isHidden) {\n    return null;\n  }\n\n  return (\n    <li\n      {...dropIndicatorProps}\n      role=\"option\"\n      ref={ref}\n      className={`drop-indicator ${isDropTarget ? 'drop-target' : ''}`} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs in Custom Trigger Components with React and TypeScript\nDESCRIPTION: Provides a simple example for creating a custom trigger React component that correctly forwards its ref and props to a native button element, ensuring compatibility with accessibility and library expectations (e.g., for focus management and positioning). Requires React. Inputs: generic props and forwarded ref; output: customizable trigger element with correct ref forwarding.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomTrigger = React.forwardRef((props, ref) => (\\n  <button {...props} ref={ref} />\\n));\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Accordion with Disclosures - React Spectrum - TSX\nDESCRIPTION: This snippet presents a TypeScript example of a functional Accordion component usage, rendering two Disclosure sections (personal and billing) each with title and panel content. The Accordion has a default expanded key set to 'personal'. Inputs include the 'defaultExpandedKeys' property and child Disclosure components. Output is a multi-panel Accordion UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Accordion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<Accordion defaultExpandedKeys={['personal']}>\n  <Disclosure id=\"personal\">\n    <DisclosureTitle>Personal Information</DisclosureTitle>\n    <DisclosurePanel>\n      Personal information form here.\n    </DisclosurePanel>\n  </Disclosure>\n  <Disclosure id=\"billing\">\n    <DisclosureTitle>Billing Address</DisclosureTitle>\n    <DisclosurePanel>\n      Billing address form here.\n    </DisclosurePanel>\n  </Disclosure>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Form with Required Fields\nDESCRIPTION: Shows how to implement required fields and necessity indicators in a form, with the ability to override on individual fields.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/form/docs/Form.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Form maxWidth=\"size-3600\" isRequired necessityIndicator=\"label\">\n  <TextField label=\"Name\" />\n  <TextField label=\"Email\" />\n  <TextField label=\"Address\" isRequired={false} />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Complex ListView Items\nDESCRIPTION: Example showing ListView with complex items including descriptions, illustrations, and action menus\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ListView selectionMode=\"multiple\" maxWidth=\"size-6000\" aria-label=\"ListView example with complex items\" onAction={key => alert(`Triggering action on item ${key}`)}>\n  <Item key=\"1\" textValue=\"Utilities\" hasChildItems>\n    <Folder />\n    <Text>Utilities</Text>\n    <Text slot=\"description\">16 items</Text>\n    <ActionMenu>\n      <Item key=\"edit\" textValue=\"Edit\">\n        <Edit />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"delete\" textValue=\"Delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionMenu>\n  </Item>\n  <!-- Additional items omitted for brevity -->\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Basic ActionMenu Implementation in React Spectrum\nDESCRIPTION: Demonstrates a simple implementation of the ActionMenu component with basic cut, copy, paste options as menu items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionMenu>\n  <Item>Cut</Item>\n  <Item>Copy</Item>\n  <Item>Paste</Item>\n</ActionMenu>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable TagGroup and Tag Wrapper Components in React\nDESCRIPTION: This example demonstrates how to create reusable wrapper components (`MyTagGroup`, `MyTag`) around the core `react-aria-components` TagGroup elements. `MyTagGroup` abstracts the structure, accepting props like `label`, `description`, `errorMessage`, and collection props (`items`, `children`, `renderEmptyState`). `MyTag` automatically includes a remove button (`Button slot=\"remove\"`) when the `allowsRemoving` state (derived from `onRemove` prop on `TagGroup`) is true. The snippet includes type definitions and an example usage of the custom wrappers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true\nimport type {TagGroupProps, TagListProps, TagProps} from 'react-aria-components';\nimport {Button, Text} from 'react-aria-components';\n\ninterface MyTagGroupProps<T> extends Omit<TagGroupProps, 'children'>, Pick<TagListProps<T>, 'items' | 'children' | 'renderEmptyState'> {\n  label?: string,\n  description?: string,\n  errorMessage?: string\n}\n\nfunction MyTagGroup<T extends object>({label, description, errorMessage, items, children, renderEmptyState, ...props}: MyTagGroupProps<T>) {\n  return (\n    <TagGroup {...props}>\n      <Label>{label}</Label>\n      <TagList items={items} renderEmptyState={renderEmptyState}>\n        {children}\n      </TagList>\n      {description && <Text slot=\"description\">{description}</Text>}\n      {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n    </TagGroup>\n  );\n}\n\nfunction MyTag({children, ...props}: TagProps) {\n  let textValue = typeof children === 'string' ? children : undefined;\n  return (\n    <Tag textValue={textValue} {...props}>\n      {({allowsRemoving}) => (<>\n        {children}\n        {allowsRemoving && <Button slot=\"remove\">ⓧ</Button>}\n      </>)}\n    </Tag>\n  );\n}\n\n<MyTagGroup label=\"Ice cream flavor\" selectionMode=\"single\">\n  <MyTag>Chocolate</MyTag>\n  <MyTag>Mint</MyTag>\n  <MyTag>Strawberry</MyTag>\n  <MyTag>Vanilla</MyTag>\n</MyTagGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling open state of Select with isOpen and onOpenChange - React Spectrum - TypeScript\nDESCRIPTION: Exemplifies a controlled Select where open/close state is bound to a React useState variable and toggled via the isOpen and onOpenChange props. Depends on React useState and MySelect. Input: user action opening/closing Select. Output: React UI reflecting and controlling open state. Limit: Only works in environments supporting React state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [open, setOpen] = React.useState(false);\\n\\n  return (\\n    <>\\n      <p>Select is {open ? 'open' : 'closed'}</p>\\n      <MySelect label=\\\"Choose frequency\\\" isOpen={open} onOpenChange={setOpen}>\\n        <ListBoxItem id=\\\"rarely\\\">Rarely</ListBoxItem>\\n        <ListBoxItem id=\\\"sometimes\\\">Sometimes</ListBoxItem>\\n        <ListBoxItem id=\\\"always\\\">Always</ListBoxItem>\\n      </MySelect>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using ColorSwatchContext for Component Configuration\nDESCRIPTION: Example showing how to use ColorSwatchContext to provide props to ColorSwatch components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatch.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatchContext} from 'react-aria-components';\n\n<ColorSwatchContext.Provider value={{color: '#ff0'}}>\n  <ColorSwatch />\n</ColorSwatchContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: SearchField with Contextual Help in React\nDESCRIPTION: This example demonstrates how to add contextual help to a SearchField component using ContextualHelp.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<SearchField\n  label=\"Search\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Search tips</Heading>\n      <Content>You can use modifiers like \"date:\" and \"from:\" to search by specific attributes.</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Form Component with CSS\nDESCRIPTION: Basic CSS rules applied to the `.react-aria-Form` class selector to style the layout of the form example, setting it to a flex column with spacing between elements. This provides simple visual structure for the form.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Form {\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using onAction in GridList to Handle Row Actions (TypeScript)\nDESCRIPTION: This example illustrates wiring row-level actions using the onAction prop, enabling callbacks like navigation. Rows may be selected, and clicking or double-clicking a row triggers an action. Two ExampleList instances are shown, demonstrating both 'toggle' and 'replace' selection behaviors. Inputs include aria-label, selectionMode, selectionBehavior, and onAction callbacks. Dependencies: ExampleList, GridList, and support for row action events.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{ display: 'flex', flexWrap: 'wrap', gap: 24 }}>\\n  <ExampleList\\n    aria-label=\"Checkbox selection list with row actions\"\\n    selectionMode=\"multiple\"\\n    /*- begin highlight -*/\\n    selectionBehavior=\"toggle\"\\n    onAction={key => alert(`Opening item ${key}...`)}\\n    /*- end highlight -*/\\n  />\\n  <ExampleList\\n    aria-label=\"Highlight selection list with row actions\"\\n    selectionMode=\"multiple\"\\n    /*- begin highlight -*/\\n    selectionBehavior=\"replace\"\\n    onAction={key => alert(`Opening item ${key}...`)}\\n    /*- end highlight -*/\\n  />\\n</div>\\n\n```\n\n----------------------------------------\n\nTITLE: Enforcing Minimum and Maximum Time Values in TimeField Using TypeScript/React\nDESCRIPTION: Shows how to constrain TimeField user input to a specific time range using minValue and maxValue props. Uses new Time(...), from @internationalized/date, to specify allowed boundaries. If a user enters a time outside [09:00, 17:00], validation will prevent submission. This approach is useful for business rules such as limiting meetings to business hours.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\\n  <MyTimeField\\n    label=\"Meeting time\"\\n    /*- begin highlight -*/\\n    minValue={new Time(9)}\\n    maxValue={new Time(17)}\\n    /*- end highlight -*/\\n    defaultValue={new Time(8)} />\\n  <Button type=\"submit\">Submit</Button>\\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component with React Aria\nDESCRIPTION: Example of creating a Select component using React Aria's compositional API with Label, Button, SelectValue, Popover, and ListBox components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<Select>\n  <Label>Permissions</Label>\n  <Button>\n    <SelectValue />\n    <span>▼</span>\n  </Button>\n  <Popover>\n    <ListBox>\n      <ListBoxItem>Read Only</ListBoxItem>\n      <ListBoxItem>Edit</ListBoxItem>\n      <ListBoxItem>Admin</ListBoxItem>\n    </ListBox>\n  </Popover>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Toast Updates with CSS View Transitions (TypeScript)\nDESCRIPTION: This advanced TypeScript example illustrates how to connect the ToastQueue's wrapUpdate option to the browser's CSS View Transition API for smooth toast entry/exit animations. The snippet uses document.startViewTransition, if available, to wrap UI state updates, otherwise falls back to normal updates. The Toasts are styled using the viewTransitionName property referencing toast.key for correct animation sequencing. Dependencies include react-dom's flushSync for immediate UI updates and TypeScript's typing for queue content. Inputs include MyToastContent and updates to the queue; output is a visually animated addition/removal of toasts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {flushSync} from 'react-dom';\n\nconst queue = new ToastQueue<MyToastContent>({\n  /*- begin highlight -*/\n  // Wrap state updates in a CSS view transition.\n  wrapUpdate(fn) {\n    if ('startViewTransition' in document) {\n      document.startViewTransition(() => {\n        flushSync(fn);\n      });\n    } else {\n      fn();\n    }\n  }\n  /*- end highlight -*/\n});\n\n<ToastRegion queue={queue}>\n  {({toast}) => (\n    <Toast\n      /*- begin highlight -*/\n      style={{viewTransitionName: toast.key}}\n      /*- end highlight -*/\n      toast={toast}>\n      <ToastContent>\n        <Text slot=\"title\">{toast.content.title}</Text>\n        <Text slot=\"description\">{toast.content.description}</Text>\n      </ToastContent>\n      <Button slot=\"close\">x</Button>\n    </Toast>\n  )}\n</ToastRegion>\n<Button onPress={() => queue.add({title: 'Toasted!'})}>Toast</Button>\n\n```\n\n----------------------------------------\n\nTITLE: Importing ColorPicker and Layout Components in React Spectrum (JSX)\nDESCRIPTION: This code snippet demonstrates how to import ColorPicker, ColorEditor, and Flex components from the @react-spectrum/color and @react-spectrum/layout packages. These imports are necessary to use ColorPicker functionality with flexible layout support in your application. Make sure that both packages are installed via your preferred package manager before using these imports.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ColorPicker, ColorEditor} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Example with React Spectrum\nDESCRIPTION: A basic implementation of the Dialog component with a trigger button, header, content, and action buttons. Shows the typical structure of a Dialog with confirmation actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ActionButton, Button} from '@react-spectrum/button';\nimport {ButtonGroup} from '@react-spectrum/buttongroup';\nimport {Content, Header} from '@react-spectrum/view';\nimport {Dialog, DialogTrigger} from '@react-spectrum/dialog';\nimport {Divider} from '@react-spectrum/divider';\nimport {Heading, Text} from '@react-spectrum/text';\n\n<DialogTrigger>\n  <ActionButton>Check connectivity</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Internet Speed Test</Heading>\n      <Header>Connection status: Connected</Header>\n      <Divider />\n      <Content>\n        <Text>\n          Start speed test?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close}>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Testing ComboBox Interactions with React Aria Test Utils\nDESCRIPTION: Example of how to use the @react-aria/test-utils package to test ComboBox component interactions. The example shows setting up a test for keyboard-based selection within a ComboBox using the ComboBoxTester utility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\n// Combobox.test.ts\nimport {render} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('ComboBox can select an option via keyboard', async function () {\n  // Render your test component/app and initialize the combobox tester\n  let {getByTestId} = render(\n    <ComboBox data-testid=\"test-combobox\">\n      ...\n    </ComboBox>\n  );\n  let comboboxTester = testUtilUser.createTester('ComboBox', {root: getByTestId('test-combobox'), interactionType: 'keyboard'});\n\n  await comboboxTester.open();\n  expect(comboboxTester.listbox).toBeInTheDocument();\n\n  let options = comboboxTester.options();\n  await comboboxTester.selectOption({option: options[0]});\n  expect(comboboxTester.combobox.value).toBe('One');\n  expect(comboboxTester.listbox).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label Component with RadioGroup\nDESCRIPTION: This example demonstrates how to use a custom label component (MyCustomLabel) within a RadioGroup in place of the built-in React Aria Components Label. The custom component receives all necessary context from the RadioGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup>\n  <MyCustomLabel>Favorite pet</MyCustomLabel>\n  <Radio value=\"dogs\">Dog</Radio>\n  <Radio value=\"cats\">Cat</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Table with Multiple Selection Example using React Aria\nDESCRIPTION: This example demonstrates a complete table with multiple selection enabled. It shows how the selection checkboxes are automatically added when selection mode is set to 'multiple'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Table with selection\" selectionMode=\"multiple\">\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column>Level</Column>\n  </TableHeader>\n  <TableBody>\n    <Row key=\"1\">\n      <Cell>Charizard</Cell>\n      <Cell>Fire, Flying</Cell>\n      <Cell>67</Cell>\n    </Row>\n    <Row key=\"2\">\n      <Cell>Blastoise</Cell>\n      <Cell>Water</Cell>\n      <Cell>56</Cell>\n    </Row>\n    <Row key=\"3\">\n      <Cell>Venusaur</Cell>\n      <Cell>Grass, Poison</Cell>\n      <Cell>83</Cell>\n    </Row>\n    <Row key=\"4\">\n      <Cell>Pikachu</Cell>\n      <Cell>Electric</Cell>\n      <Cell>100</Cell>\n    </Row>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Validating RangeCalendar with Minimum Date in TSX\nDESCRIPTION: Illustrates how to restrict selectable dates in `RangeCalendar` by setting a minimum date. The `minValue` prop is set using `today(getLocalTimeZone())` from `@internationalized/date` to prevent users from selecting dates before the current day.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<RangeCalendar aria-label=\"Trip dates\" minValue={today(getLocalTimeZone())} />\n```\n\n----------------------------------------\n\nTITLE: Custom Breadcrumbs Navigation with Context Providers - TSX\nDESCRIPTION: Presents a Router component managing navigation state and exposing Breadcrumbs and Link context providers to children. It updates breadcrumb history on interaction. Dependencies include React, React Aria Components (BreadcrumbsContext, LinkContext), and proper TypeScript support. Props and context values manage item stacks and actions; the component expects children consuming the provided contexts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PressEvent} from 'react-aria-components';\nimport {BreadcrumbsContext, LinkContext} from 'react-aria-components';\n\ninterface RouterItem {\n  id: number,\n  label: string\n}\n\nfunction Router({children}) {\n  let [items, setItems] = React.useState<RouterItem[]>([\n    {id: 0, label: 'Home'},\n    {id: 1, label: 'React Aria'},\n  ]);\n\n  // Pop stack when a breadcrumb item is clicked.\n  let onAction = (id: Key) => {\n    let i = items.findIndex(item => item.id === id);\n    setItems(items.slice(0, i + 1));\n  };\n\n  // Push stack when a link is clicked.\n  let onPress = (e: PressEvent) => {\n    let label = e.target.textContent;\n    setItems(items.concat({id: items.length, label}));\n  };\n\n  return (\n    /*- begin highlight -*/\n    <BreadcrumbsContext.Provider value={{items, onAction}}>\n    {/*- end highlight -*/}\n      <LinkContext.Provider value={{onPress}}>\n        {children}\n      </LinkContext.Provider>\n    </BreadcrumbsContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filtering for SearchAutocomplete in React (tsx)\nDESCRIPTION: This snippet demonstrates how to implement custom filtering logic for a `SearchAutocomplete`. It controls the input value (`inputValue`) and the filtered list of items (`items`) passed to the component. The filtering logic uses `useFilter` from React Aria and updates the `filteredItems` whenever the input value changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, email: 'fake@email.com'},\n    {id: 2, email: 'anotherfake@email.com'},\n    {id: 3, email: 'bob@email.com'},\n    {id: 4, email: 'joe@email.com'},\n    {id: 5, email: 'yourEmail@email.com'},\n    {id: 6, email: 'valid@email.com'},\n    {id: 7, email: 'spam@email.com'},\n    {id: 8, email: 'newsletter@email.com'},\n    {id: 9, email: 'subscribe@email.com'}\n  ];\n\n  let {startsWith} = useFilter({sensitivity: 'base'});\n  let [filterValue, setFilterValue] = React.useState('');\n  let filteredItems = React.useMemo(\n    () => options.filter((item) => startsWith(item.email, filterValue)),\n    [options, filterValue]\n  );\n\n  return (\n    <SearchAutocomplete\n      label=\"To:\"\n      items={filteredItems}\n      inputValue={filterValue}\n      onInputChange={setFilterValue}>\n      {(item) => <Item>{item.email}</Item>}\n    </SearchAutocomplete>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Sections and Items in ListBox (TypeScript/React)\nDESCRIPTION: Demonstrates rendering grouped ListBox sections dynamically from a hierarchical data array. Each Section is created from an array with children, supporting single selection and controlled state updates. Dependencies include React, react-stately for Selection, and ListBox with Section and Item components. Inputs are dynamically structured data and user selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-stately';\\n\\nfunction Example() {\\n  let options = [\\n    {name: 'Australian', children: [\\n      {id: 2, name: 'Koala'},\\n      {id: 3, name: 'Kangaroo'},\\n      {id: 4, name: 'Platypus'}\\n    ]},\\n    {name: 'American', children: [\\n      {id: 6, name: 'Bald Eagle'},\\n      {id: 7, name: 'Bison'},\\n      {id: 8, name: 'Skunk'}\\n    ]}\\n  ];\\n  let [selected, setSelected] = React.useState<Selection>(new Set());\\n\\n  return (\\n    <ListBox\\n      label=\\\"Pick an animal\\\"\\n      items={options}\\n      selectedKeys={selected}\\n      selectionMode=\\\"single\\\"\\n      onSelectionChange={setSelected}>\\n      {item => (\\n        <Section key={item.name} items={item.children} title={item.name}>\\n          {item => <Item>{item.name}</Item>}\\n        </Section>\\n      )}\\n    </ListBox>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using React Aria Context Providers for Component Composition\nDESCRIPTION: Implementation of a custom Selectable component that uses GridListContext and ToggleButtonContext to control the selection mode of a GridList with a ToggleButton.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SelectionMode} from 'react-aria-components';\nimport {ToggleButtonContext, GridListContext} from 'react-aria-components';\n\nfunction Selectable({children}) {\n  let [isSelected, onChange] = React.useState(false);\n  let selectionMode: SelectionMode = isSelected ? 'multiple' : 'none';\n  return (\n    <ToggleButtonContext.Provider value={{isSelected, onChange}}>\n      {/*- begin highlight -*/}\n      <GridListContext.Provider value={{selectionMode}}>\n      {/*- end highlight -*/}\n        {children}\n      </GridListContext.Provider>\n    </ToggleButtonContext.Provider>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\n\n<Selectable>\n  <ToggleButton style={{marginBottom: '8px'}}>Select</ToggleButton>\n  <GridList aria-label=\"Ice cream flavors\">\n    <MyItem>Chocolate</MyItem>\n    <MyItem>Mint</MyItem>\n    <MyItem>Strawberry</MyItem>\n    <MyItem>Vanilla</MyItem>\n  </GridList>\n</Selectable>\n```\n\n----------------------------------------\n\nTITLE: Context-based Field Group Implementation\nDESCRIPTION: Demonstrates creating a FieldGroup component using ComboBoxContext for shared state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ComboBoxContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction FieldGroup({title, children, isDisabled}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <ComboBoxContext.Provider value={{isDisabled}}>\n        {children}\n      </ComboBoxContext.Provider>\n    </fieldset>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Router Component with Link Elements in TypeScript React\nDESCRIPTION: This example shows how to use the custom Router component with Link elements as children. The Router will update its state when any Link is pressed, displaying which link was clicked.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Router>\n  <ul>\n    <li><Link>Breadcrumbs</Link></li>\n    <li><Link>Button</Link></li>\n    <li><Link>Calendar</Link></li>\n  </ul>\n</Router>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Switch Description Component with Context in TypeScript/React\nDESCRIPTION: Demonstrates creating a custom SwitchDescription component that uses SwitchContext to associate ARIA descriptions with a Switch component. The component uses useId for generating unique identifiers and implements TypeScript interfaces for prop typing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Switch.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SwitchContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface SwitchDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction SwitchDescription({children, description}: SwitchDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      <SwitchContext.Provider value={{'aria-describedby': descriptionId}}>\n        {children}\n      </SwitchContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<SwitchDescription description=\"Connected to 'Starbucks Wifi'.\">\n  <MySwitch defaultSelected>Wi-Fi</MySwitch>\n</SwitchDescription>\n```\n\n----------------------------------------\n\nTITLE: Complex Menu Items with Icons and Keyboard Shortcuts in ActionMenu\nDESCRIPTION: Demonstrates how to create rich menu items with icons, text, and keyboard shortcuts for a more informative user interface.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Keyboard, Text} from '@react-spectrum/text';\n<ActionMenu>\n  <Item key=\"cut\" textValue=\"cut\">\n    <Cut />\n    <Text>Cut</Text>\n    <Keyboard>⌘X</Keyboard>\n  </Item>\n  <Item key=\"copy\" textValue=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n    <Keyboard>⌘C</Keyboard>\n  </Item>\n  <Item key=\"paste\" textValue=\"paste\">\n    <Paste />\n    <Text>Paste</Text>\n    <Keyboard>⌘V</Keyboard>\n  </Item>\n</ActionMenu>\n```\n\n----------------------------------------\n\nTITLE: Animating Collection Items with AnimatePresence in Framer Motion - TypeScript/TSX\nDESCRIPTION: This code demonstrates how to animate the addition and removal of collection items by wrapping React Aria GridListItems with Framer Motion and AnimatePresence. The MotionItem component applies exit animations when an item is removed. Properly assigning unique keys ensures correct animation handling. Required dependencies: react-aria-components, framer-motion. Inputs are items array and key/id attributes for GridListItem; the output is smoothly animated appearing/disappearing list entries.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GridList, GridListItem} from 'react-aria-components';\nimport {motion, AnimatePresence} from 'framer-motion';\n\nconst MotionItem = motion(GridListItem);\n\n<GridList>\n  <AnimatePresence>\n    {items.map(item => (\n      <MotionItem\n        key={item.id}\n        id={item.id}\n        layout\n        exit={{opacity: 0}}>\n        {/* ... */}\n      </MotionItem>\n    ))}\n  </AnimatePresence>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Disabling All Buttons Within ButtonGroup in React Spectrum (TSX)\nDESCRIPTION: Illustrates globally disabling all buttons in a ButtonGroup by setting the 'isDisabled' prop. Both ButtonGroup and Button components come from '@react-spectrum/buttongroup' and '@react-spectrum/button'. As a result, user interaction is blocked for all grouped buttons. This can be used to indicate a non-interactive or loading UI state where actions should not be triggered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/buttongroup/docs/ButtonGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ButtonGroup isDisabled>\\n  <Button variant=\\\"secondary\\\">No, thanks</Button>\\n  <Button variant=\\\"secondary\\\">Remind me later</Button>\\n  <Button variant=\\\"primary\\\">Rate Now</Button>\\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Combining Quiet Style and Compact Density in ActionGroup with React Spectrum\nDESCRIPTION: This example shows an ActionGroup that combines the quiet visual style with compact density, resulting in buttons with reduced margins between them and a more subtle appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup isQuiet density=\"compact\">\n  <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n  <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing International Calendar DateRangePicker in React\nDESCRIPTION: Demonstrates implementing a DateRangePicker with Indian calendar system in Hindi language. Uses I18nProvider for localization while maintaining Gregorian calendar output.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [range, setRange] = React.useState(null);\n  return (\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n      <DateRangePicker label=\"Date range\" value={range} onChange={setRange} />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating SearchField with HTML Forms in React (TSX)\nDESCRIPTION: Demonstrates how to integrate the `SearchField` component (via the `MySearchField` wrapper) into an HTML form by providing the `name` and `type` props. These attributes are passed down to the underlying native `<input>` element, enabling standard form submission behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<MySearchField label=\"Email\" name=\"email\" type=\"email\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating DateField with HTML Forms\nDESCRIPTION: This snippet shows how to use the DateField component in an HTML form by specifying the 'name' prop. The selected date will be submitted as an ISO 8601 formatted string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField label=\"Birth date\" name=\"birthday\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled Menu Items in React Spectrum\nDESCRIPTION: This example shows how to create a menu with disabled items using the disabledKeys prop in React Spectrum. It demonstrates disabling specific menu items based on their unique identifiers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<MenuTrigger>\n  <ActionButton>\n    Filter\n  </ActionButton>\n  <Menu\n    items={[\n      {name: 'tiff', id: 'a1b2c3'},\n      {name: 'png', id: 'g5h1j9'},\n      {name: 'jpg', id: 'p8k3i4'},\n      {name: 'PDF', id: 'j7i3a0'}\n    ]}\n    disabledKeys={['a1b2c3', 'p8k3i4']}>\n    {item => <Item>{item.name}</Item>}\n  </Menu>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Custom className in DateInput - React Spectrum (JSX)\nDESCRIPTION: Demonstrates overriding the default className of the DateInput component by specifying a custom class. Allows for precise styling and is useful when integrating with external CSS frameworks or custom configurations. Requires the DateInput component and proper style definitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_21\n\nLANGUAGE: JSX\nCODE:\n```\n<DateInput className=\"my-date-input\">\n  {/* ... */}\n</DateInput>\n```\n\n----------------------------------------\n\nTITLE: Creating a ModalTrigger Component with useOverlayTrigger in React\nDESCRIPTION: This example shows how to build a `ModalTrigger` component using `useOverlayTriggerState` from `@react-stately/overlays` and `useOverlayTrigger` from `@react-aria/overlays`. It manages the open/closed state of the modal and provides trigger props for a button. It conditionally renders the `Modal` component based on the state and passes down necessary props, including a `close` function to the children.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/useModalOverlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useOverlayTriggerState} from '@react-stately/overlays';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\n// Reuse the Button from your component library. See below for details.\nimport {Button} from 'your-component-library';\n\nfunction ModalTrigger({label, children, ...props}) {\n  let state = useOverlayTriggerState(props);\n  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'dialog'}, state);\n\n  return <>\n    <Button {...triggerProps}>Open Dialog</Button>\n    {state.isOpen &&\n      <Modal {...props} state={state}>\n        {React.cloneElement(children(state.close), overlayProps)}\n      </Modal>\n    }\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorSwatchPicker Value Handling in TSX\nDESCRIPTION: Illustrates how to create a controlled `ColorSwatchPicker`. It uses `React.useState` to manage the selected color state and the `parseColor` function from `@react-spectrum/color` to initialize the state from an HSL string. The `value` prop binds the component to the state, and `onChange` updates the state when the user selects a new color.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from '@react-spectrum/color';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 33.33%)'));\n\n  return (\n    <ColorSwatchPicker value={color} onChange={setColor}>\n      <ColorSwatch color=\"#A00\" />\n      <ColorSwatch color=\"#f80\" />\n      <ColorSwatch color=\"#080\" />\n    </ColorSwatchPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Orientation in ButtonGroup with React Spectrum (TSX)\nDESCRIPTION: Showcases how to enforce a vertical layout in ButtonGroup by setting the 'orientation' prop to 'vertical'. Relies on the '@react-spectrum/buttongroup' and '@react-spectrum/button' packages. Ensures all buttons stack vertically, regardless of container width. Useful in UIs where horizontal space is constrained or a columnar button display is desired.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/buttongroup/docs/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ButtonGroup orientation=\\\"vertical\\\">\\n  <Button variant=\\\"secondary\\\">No, thanks</Button>\\n  <Button variant=\\\"secondary\\\">Remind me later</Button>\\n  <Button variant=\\\"primary\\\">Rate Now</Button>\\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Root Item and Overflow Menu - React Spectrum - TypeScript\nDESCRIPTION: This code example illustrates using the showRoot prop with Breadcrumbs to keep the root item always visible even as others collapse into the overflow menu. The Item components represent a hierarchical structure, and only the allowed visible items (including the root) are shown at once. Inputs are showRoot prop and several Item children. Output is a Breadcrumbs component optimized for maintaining orientation with a visible root. Handles overflow using Spectrum's truncation behaviors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Breadcrumbs showRoot>\n  <Item key=\"shared\">My Shared Documents</Item>\n  <Item key=\"catalogue\">North America Spring Catalogue</Item>\n  <Item key=\"march 2020\">March 2020</Item>\n  <Item key=\"assets\">Downloaded Screenshots and Assets (approval required)</Item>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Testing React Aria Tabs with Test Utils\nDESCRIPTION: Shows how to use @react-aria/test-utils to create a tabs tester and write a test for keyboard interaction with tabs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\n// Tabs.test.ts\nimport {render} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('Tabs can change selection via keyboard', async function () {\n  // Render your test component/app and initialize the listbox tester\n  let {getByTestId} = render(\n     <Tabs data-testid=\"test-tabs\">\n      ...\n    </Tabs>\n  );\n  let tabsTester = testUtilUser.createTester('Tabs', {root: getByTestId('test-tabs'), interactionType: 'keyboard'});\n\n  let tabs = tabsTester.tabs;\n  expect(tabsTester.selectedTab).toBe(tabs[0]);\n\n  await tabsTester.triggerTab({tab: 1});\n  expect(tabsTester.selectedTab).toBe(tabs[1]);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Time Fields\nDESCRIPTION: Shows how to set individual fields in Time objects using the immutable set method\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Time.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet time = new Time(9, 45);\ntime.set({hour: 12}); // 12:45\ntime.set({minute: 5}); // 9:05\n```\n\nLANGUAGE: tsx\nCODE:\n```\nlet time = new Time(9, 45);\ntime.set({hour: 36}); // 23:45\ntime.set({minute: 75}); // 09:59\n```\n\n----------------------------------------\n\nTITLE: Listing Released Packages for @adobe/react-spectrum\nDESCRIPTION: This code block provides a detailed list of all released packages for the @adobe/react-spectrum project, including version numbers. It covers React Aria, React Spectrum, React Stately, internationalization utilities, icons, and other related packages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2025-04-11.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\n - @adobe/react-spectrum@3.41.0\n - @internationalized/date@3.8.0\n - @internationalized/message@3.1.7\n - @internationalized/number@3.6.1\n - @internationalized/string@3.2.6\n - @react-aria/actiongroup@3.7.15\n - @react-aria/autocomplete@3.0.0-beta.2\n - @react-aria/breadcrumbs@3.5.23\n - @react-aria/button@3.13.0\n - @react-aria/calendar@3.8.0\n - @react-aria/checkbox@3.15.4\n - @react-aria/collections@3.0.0-rc.0\n - @react-aria/color@3.0.6\n - @react-aria/combobox@3.12.2\n - @react-aria/datepicker@3.14.2\n - @react-aria/dialog@3.5.24\n - @react-aria/disclosure@3.0.4\n - @react-aria/dnd@3.9.2\n - @react-aria/focus@3.20.2\n - @react-aria/form@3.0.15\n - @react-aria/grid@3.13.0\n - @react-aria/gridlist@3.12.0\n - @react-aria/i18n@3.12.8\n - @react-aria/interactions@3.25.0\n - @react-aria/label@3.7.17\n - @react-aria/landmark@3.0.2\n - @react-aria/link@3.8.0\n - @react-aria/listbox@3.14.3\n - @react-aria/live-announcer@3.4.2\n - @react-aria/menu@3.18.2\n - @react-aria/meter@3.4.22\n - @react-aria/numberfield@3.11.13\n - @react-aria/overlays@3.27.0\n - @react-aria/progress@3.4.22\n - @react-aria/radio@3.11.2\n - @react-aria/searchfield@3.8.3\n - @react-aria/select@3.15.4\n - @react-aria/selection@3.24.0\n - @react-aria/separator@3.4.8\n - @react-aria/slider@3.7.18\n - @react-aria/spinbutton@3.6.14\n - @react-aria/ssr@3.9.8\n - @react-aria/steplist@3.0.0-alpha.16\n - @react-aria/switch@3.7.2\n - @react-aria/table@3.17.2\n - @react-aria/tabs@3.10.2\n - @react-aria/tag@3.5.2\n - @react-aria/test-utils@1.0.0-alpha.6\n - @react-aria/textfield@3.17.2\n - @react-aria/toast@3.0.2\n - @react-aria/toggle@3.11.2\n - @react-aria/toolbar@3.0.0-beta.15\n - @react-aria/tooltip@3.8.2\n - @react-aria/tree@3.0.2\n - @react-aria/utils@3.28.2\n - @react-aria/virtualizer@4.1.4\n - @react-aria/visually-hidden@3.8.22\n - @react-spectrum/accordion@3.0.5\n - @react-spectrum/actionbar@3.6.6\n - @react-spectrum/actiongroup@3.10.14\n - @react-spectrum/autocomplete@3.0.0-alpha.42\n - @react-spectrum/avatar@3.0.21\n - @react-spectrum/badge@3.1.22\n - @react-spectrum/breadcrumbs@3.9.16\n - @react-spectrum/button@3.16.13\n - @react-spectrum/buttongroup@3.6.21\n - @react-spectrum/calendar@3.7.0\n - @react-spectrum/card@3.0.0-alpha.42\n - @react-spectrum/checkbox@3.9.15\n - @react-spectrum/color@3.0.6\n - @react-spectrum/combobox@3.15.2\n - @react-spectrum/contextualhelp@3.6.20\n - @react-spectrum/datepicker@3.14.0\n - @react-spectrum/dialog@3.8.20\n - @react-spectrum/divider@3.5.22\n - @react-spectrum/dnd@3.5.4\n - @react-spectrum/dropzone@3.0.10\n - @react-spectrum/filetrigger@3.0.10\n - @react-spectrum/form@3.7.14\n - @react-spectrum/icon@3.8.4\n - @react-spectrum/illustratedmessage@3.5.9\n - @react-spectrum/image@3.5.10\n - @react-spectrum/inlinealert@3.2.14\n - @react-spectrum/label@3.16.14\n - @react-spectrum/labeledvalue@3.2.2\n - @react-spectrum/layout@3.6.14\n - @react-spectrum/link@3.6.16\n - @react-spectrum/list@3.10.0\n - @react-spectrum/listbox@3.15.0\n - @react-spectrum/menu@3.22.0\n - @react-spectrum/meter@3.5.9\n - @react-spectrum/numberfield@3.9.12\n - @react-spectrum/overlays@5.7.4\n - @react-spectrum/picker@3.15.8\n - @react-spectrum/progress@3.7.15\n - @react-spectrum/provider@3.10.4\n - @react-spectrum/radio@3.7.15\n - @react-spectrum/s2@0.8.0\n - @react-spectrum/searchfield@3.8.15\n - @react-spectrum/slider@3.7.4\n - @react-spectrum/statuslight@3.5.21\n - @react-spectrum/steplist@3.0.0-alpha.14\n - @react-spectrum/style-macro-s1@3.0.0-alpha.4\n - @react-spectrum/switch@3.6.0\n - @react-spectrum/table@3.17.0\n - @react-spectrum/tabs@3.8.19\n - @react-spectrum/tag@3.2.15\n - @react-spectrum/test-utils@1.0.0-alpha.6\n - @react-spectrum/text@3.5.14\n - @react-spectrum/textfield@3.13.2\n - @react-spectrum/theme-dark@3.5.17\n - @react-spectrum/theme-default@3.5.17\n - @react-spectrum/theme-express@3.0.0-alpha.19\n - @react-spectrum/theme-light@3.4.17\n - @react-spectrum/toast@3.0.2\n - @react-spectrum/tooltip@3.7.4\n - @react-spectrum/tree@3.1.0\n - @react-spectrum/utils@3.12.4\n - @react-spectrum/view@3.6.18\n - @react-spectrum/well@3.4.22\n - @react-stately/autocomplete@3.0.0-beta.1\n - @react-stately/calendar@3.8.0\n - @react-stately/checkbox@3.6.13\n - @react-stately/collections@3.12.3\n - @react-stately/color@3.8.4\n - @react-stately/combobox@3.10.4\n - @react-stately/data@3.12.3\n - @react-stately/datepicker@3.14.0\n - @react-stately/disclosure@3.0.3\n - @react-stately/dnd@3.5.3\n - @react-stately/flags@3.1.1\n - @react-stately/form@3.1.3\n - @react-stately/grid@3.11.1\n - @react-stately/layout@4.2.2\n - @react-stately/list@3.12.1\n - @react-stately/menu@3.9.3\n - @react-stately/numberfield@3.9.11\n - @react-stately/overlays@3.6.15\n - @react-stately/radio@3.10.12\n - @react-stately/searchfield@3.5.11\n - @react-stately/select@3.6.12\n - @react-stately/selection@3.20.1\n - @react-stately/slider@3.6.3\n - @react-stately/steplist@3.0.0-alpha.13\n - @react-stately/table@3.14.1\n - @react-stately/tabs@3.8.1\n - @react-stately/toast@3.1.0\n - @react-stately/toggle@3.8.3\n - @react-stately/tooltip@3.5.3\n - @react-stately/tree@3.8.9\n - @react-stately/utils@3.10.6\n - @react-stately/virtualizer@4.3.2\n - @react-types/actionbar@3.1.14\n - @react-types/actiongroup@3.4.16\n - @react-types/autocomplete@3.0.0-alpha.30\n - @react-types/avatar@3.0.14\n - @react-types/badge@3.1.16\n - @react-types/breadcrumbs@3.7.12\n - @react-types/button@3.12.0\n - @react-types/buttongroup@3.3.16\n - @react-types/calendar@3.7.0\n - @react-types/card@3.0.0-alpha.35\n - @react-types/checkbox@3.9.3\n - @react-types/color@3.0.4\n - @react-types/combobox@3.13.4\n - @react-types/contextualhelp@3.2.17\n - @react-types/datepicker@3.12.0\n - @react-types/dialog@3.5.17\n - @react-types/divider@3.3.16\n - @react-types/form@3.7.11\n - @react-types/grid@3.3.1\n - @react-types/illustratedmessage@3.3.16\n - @react-types/image@3.4.8\n - @react-types/label@3.9.10\n - @react-types/layout@3.3.22\n - @react-types/link@3.6.0\n - @react-types/list@3.2.26\n - @react-types/listbox@3.6.0\n - @react-types/menu@3.10.0\n - @react-types/meter@3.4.8\n - @react-types/numberfield@3.8.10\n - @react-types/overlays@3.8.14\n - @react-types/progress@3.5.11\n - @react-types/provider@3.8.8\n - @react-types/radio@3.8.8\n - @react-types/searchfield@3.6.1\n - @react-types/select@3.9.11\n - @react-types/shared@3.29.0\n - @react-types/slider@3.7.10\n - @react-types/statuslight@3.3.16\n - @react-types/switch@3.5.10\n - @react-types/table@3.12.0\n - @react-types/tabs@3.3.14\n - @react-types/text@3.3.16\n - @react-types/textfield@3.12.1\n - @react-types/tooltip@3.4.16\n - @react-types/view@3.4.16\n - @react-types/well@3.3.16\n - @spectrum-icons/color@3.5.21\n - @spectrum-icons/express@3.0.0-alpha.25\n - @spectrum-icons/illustrations@3.6.21\n - @spectrum-icons/ui@3.6.15\n - @spectrum-icons/workflow@4.2.20\n - @react-spectrum/codemods@0.5.2\n - @react-aria/parcel-resolver-optimize-locales@1.2.1\n - @react-spectrum/s2-icon-builder@0.2.3\n - react-aria@3.39.0\n - react-aria-components@1.8.0\n - react-stately@3.37.0\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic CSS Classes to React Aria Modal\nDESCRIPTION: Illustrates using a function passed to the `className` prop to dynamically apply CSS classes based on the `Modal`'s state. This example adds the 'slide-in' class when the modal is entering (`isEntering` state is true), which is useful for integrating with utility CSS frameworks like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Modal className={({isEntering}) => isEntering ? 'slide-in' : ''}>\n  {/* ... */}\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Styling ToggleButton Based on State (JSX)\nDESCRIPTION: This JSX snippet applies dynamic class names to a ToggleButton component using a function as the className prop. The function receives the isSelected state and sets different background color classes accordingly. This pattern is particularly useful when working with utility CSS frameworks like Tailwind, enabling style changes based on component state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButton className={({isSelected}) => isSelected ? 'bg-blue-600' : 'bg-gray-600'} />\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Switch Component in React Aria\nDESCRIPTION: Shows how to create a reusable Switch component by wrapping the basic Switch with custom props and styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Switch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SwitchProps} from 'react-aria-components';\n\ninterface MySwitchProps extends Omit<SwitchProps, 'children'> {\n  children: React.ReactNode\n}\n\nfunction MySwitch({children, ...props}: MySwitchProps) {\n  return (\n    <Switch {...props}>\n      <div className=\"indicator\" />\n      {children}\n    </Switch>\n  );\n}\n\n<MySwitch>Wi-Fi</MySwitch>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Toolbar with useFocusManager in React\nDESCRIPTION: This example shows how to use the useFocusManager hook to create a toolbar component with keyboard navigation between buttons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/focus/docs/FocusScope.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useFocusManager} from '@react-aria/focus';\n\nfunction Toolbar(props) {\n  return (\n    <div role=\"toolbar\">\n      <FocusScope>\n        {props.children}\n      </FocusScope>\n    </div>\n  );\n}\n\nfunction ToolbarButton(props) {\n  let focusManager = useFocusManager();\n  let onKeyDown = (e) => {\n    switch (e.key) {\n      case 'ArrowRight':\n        focusManager.focusNext({wrap: true});\n        break;\n      case 'ArrowLeft':\n        focusManager.focusPrevious({wrap: true});\n        break;\n    }\n  };\n\n  return (\n    <button\n      onKeyDown={onKeyDown}>\n      {props.children}\n    </button>\n  );\n}\n\n<Toolbar>\n  <ToolbarButton>Cut</ToolbarButton>\n  <ToolbarButton>Copy</ToolbarButton>\n  <ToolbarButton>Paste</ToolbarButton>\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Providing Global Form Submit Handler via FormContext in TSX\nDESCRIPTION: This snippet demonstrates wrapping a React Aria `Form` component with `FormContext.Provider` to inject a custom `onSubmit` handler. This allows centralizing form submission logic for all forms rendered within the provider. The provided `onSubmit` function prevents the default form submission behavior and includes a placeholder for API submission logic. Local props on the `Form` component will merge with and override context props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nlet onSubmit = e => {\n  e.preventDefault();\n  // Submit form data to an API...\n};\n\n<FormContext.Provider value={{onSubmit}}>\n  <Form>\n    {/* ... */}\n  </Form>\n</FormContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Basic StatusLight Component Usage in React Spectrum\nDESCRIPTION: A basic example showing how to use the StatusLight component with a positive variant. The component displays a status indicator with the text 'Ready'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/statuslight/docs/StatusLight.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<StatusLight variant=\"positive\">Ready</StatusLight>\n```\n\n----------------------------------------\n\nTITLE: Accessing TagGroup Selection State via ListStateContext in TSX\nDESCRIPTION: This snippet defines a `SelectionCount` component that displays the number of selected tags within a parent `TagGroup`. It uses `React.useContext` to access the `ListStateContext` provided by the `TagGroup`, retrieves the `selectionManager` from the state, and calculates the number of selected keys. This demonstrates accessing internal component state via context for building custom UI elements related to the component's state. Depends on `react` and `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListStateContext} from 'react-aria-components';\n\nfunction SelectionCount() {\n  /*- begin highlight -*/\n  let state = React.useContext(ListStateContext);\n  /*- end highlight -*/\n  let selected = state?.selectionManager.selectedKeys.size ?? 0;\n  return <small>{selected} tags selected.</small>;\n}\n\n<TagGroup selectionMode=\"multiple\">\n  <Label>Tags</Label>\n  <TagList>\n    <Tag>News</Tag>\n    <Tag>Travel</Tag>\n    <Tag>Gaming</Tag>\n    <Tag>Shopping</Tag>\n  </TagList>\n  <SelectionCount />\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Table with Multiple Data Format Support\nDESCRIPTION: This example demonstrates how to implement drag functionality with multiple data formats (plain text, HTML, and custom JSON) to support both internal app drops and external application compatibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DraggableTable() {\n  let items = [\n    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n  ];\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = items.find(item => item.id === key)!;\n        return {\n          'text/plain': `${item.name} – ${item.type}`,\n          'text/html': `<strong>${item.name}</strong> – <em>${item.type}</em>`,\n          'pokemon': JSON.stringify(item)\n        };\n      });\n    },\n  });\n\n  return (\n    <PokemonTable\n      items={items}\n      selectionMode=\"multiple\"\n      dragAndDropHooks={dragAndDropHooks} />\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  <DraggableTable />\n  {/* see below */}\n  <DroppableTable />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using placeholderValue in React Aria DatePicker - TypeScript\nDESCRIPTION: This snippet illustrates how to set a default placeholder value on a custom DatePicker component, influencing both the placeholder rendering and initial segment values. The CalendarDate utility from @internationalized/date is used to initialize the placeholderValue parameter. Dependencies are React, @internationalized/date, and a custom MyDatePicker component. The user sees a birth date input with a pre-filled placeholder (January 1, 1980). Expected input is a CalendarDate object, and the output is a DatePicker field with a contextually relevant placeholder.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {CalendarDate} from '@internationalized/date';\n\n<MyDatePicker label=\"Birth date\" placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying a Placeholder in TimeField - React Spectrum (TypeScript)\nDESCRIPTION: Demonstrates how to use the placeholderValue prop in a custom MyTimeField component to control the default shown value and initial values for segments. When no value is set, the placeholder is displayed, and its format is influenced by granularity and placeholderValue. Users can customize the initial segment values by changing placeholderValue. Requires the Time class instance and a custom MyTimeField implementation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n<MyTimeField label=\"Meeting time\" placeholderValue={new Time(9)} />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Quiet DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Demonstrates use of the isQuiet prop to render a visually quieter DatePicker variant. This prop modifies the DatePicker's target styling for interfaces where less visual emphasis is desired. Requires only the 'label' and 'isQuiet' props, producing a single UI element without additional dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_17\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker label=\\\"Birth date\\\" isQuiet />\n```\n\n----------------------------------------\n\nTITLE: Initializing Tailwind CSS Plugin for React Aria Components (CSS, v4)\nDESCRIPTION: This CSS code snippet demonstrates how to import TailwindCSS and the tailwindcss-react-aria-components plugin for Tailwind v4. It's required to ensure all react-aria UI components receive the correct Tailwind utility classes. The snippet must be added to a CSS file included in the project’s build process, and assumes that tailwindcss and tailwindcss-react-aria-components dependencies are installed. Outputs are processed CSS with the plugin applied; inputs are import and plugin statements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/stock-table.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@import \\\"tailwindcss\\\";\\n@plugin \\\"tailwindcss-react-aria-components\\\";\n```\n\n----------------------------------------\n\nTITLE: Using Render Props for Conditional Rendering in React Aria Checkbox (JSX)\nDESCRIPTION: This JSX example showcases using a render prop as the children of a React Aria `Checkbox`. The function receives the component's state (e.g., `isSelected`) and allows conditional rendering of elements, such as displaying a `CheckIcon` only when the checkbox is selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckIcon />}\n      Subscribe\n    </>\n  )}\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only CheckboxGroup in React Spectrum\nDESCRIPTION: Example showing how to create a read-only CheckboxGroup using the isReadOnly prop. Unlike disabled groups, these remain focusable but users cannot change the selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup label=\"Favorite sports\" defaultValue={['baseball']} isReadOnly>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable RangeCalendar Wrapper Component in TSX\nDESCRIPTION: Presents a reusable `MyRangeCalendar` wrapper component built using `react-aria-components`. This component encapsulates the standard `RangeCalendar` structure (header, grid) and adds support for an optional `errorMessage` prop, promoting consistency and reusability. It uses generic types (`<T extends DateValue>`) for flexibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {RangeCalendarProps, DateValue} from 'react-aria-components';\nimport {Text} from 'react-aria-components';\n\ninterface MyRangeCalendarProps<T extends DateValue> extends RangeCalendarProps<T> {\n  errorMessage?: string\n}\n\nfunction MyRangeCalendar<T extends DateValue>({errorMessage, ...props}: MyRangeCalendarProps<T>) {\n  return (\n    <RangeCalendar {...props}>\n      <header>\n        <Button slot=\"previous\">◀</Button>\n        <Heading />\n        <Button slot=\"next\">▶</Button>\n      </header>\n      <CalendarGrid>\n        {date => <CalendarCell date={date} />}\n      </CalendarGrid>\n      {errorMessage && <Text slot=\"errorMessage\">{errorMessage}</Text>}\n    </RangeCalendar>\n  );\n}\n\n<MyRangeCalendar aria-label=\"Trip dates\" />\n```\n\n----------------------------------------\n\nTITLE: Adjusting Tooltip Offset in React Spectrum\nDESCRIPTION: These examples show how to adjust the offset and cross offset of a tooltip relative to its trigger element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger offset={50}>\n  <ActionButton aria-label=\"Offset from trigger\">Offset</ActionButton>\n  <Tooltip>This will shift up.</Tooltip>\n</TooltipTrigger>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger crossOffset={100} placement=\"bottom\">\n  <ActionButton aria-label=\"Cross Offset from trigger\">Cross Offset</ActionButton>\n  <Tooltip>This will shift over to the right.</Tooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Data Arrays in TypeScript\nDESCRIPTION: Defines arrays of contact objects (favorites and people) for use in the ListBox demo. Each object contains an id, name, username, and avatar URL. These are intended as static data sources for populating the favorites and full contact lists within the React example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/contact-list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './tailwind.global.css';\n\nconst favorites = [\n  {\n    id: 'tony',\n    name: 'Tony Baldwin',\n    username: '@tony',\n    avatar: 'https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n  },\n  {\n    id: 'jlangstrath',\n    name: 'Julienne Langstrath',\n    username: '@jlangstrath',\n    avatar: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n  },\n  {\n    id: 'rgonzalez',\n    name: 'Roberto Gonzalez',\n    username: '@rgonzalez',\n    avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'\n  }\n];\n\nconst people = [\n  {\n    id: 1,\n    avatar:\n      \"https://images.unsplash.com/photo-1599566150163-29194dcaad36?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Gilberto Miguel\",\n    username: \"@gilberto_miguel\"\n  },\n  {\n    id: 2,\n    avatar:\n      \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Maia Pettegree\",\n    username: \"@mpettegree\"\n  },\n  {\n    id: 3,\n    avatar:\n      \"https://images.unsplash.com/photo-1531427186611-ecfd6d936c79?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Wade Redington\",\n    username: \"@redington\"\n  },\n  {\n    id: 4,\n    avatar:\n      \"https://images.unsplash.com/photo-1528763380143-65b3ac89a3ff?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Kurtis Gurrado\",\n    username: \"@kurtis\"\n  },\n  {\n    id: 5,\n    avatar:\n      \"https://images.unsplash.com/photo-1569913486515-b74bf7751574?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Sonja Balmann\",\n    username: \"@sbalmann\"\n  },\n  {\n    id: 6,\n    avatar:\n      \"https://images.unsplash.com/photo-1570295999919-56ceb5ecca61?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n    name: \"Brent Mickelwright\",\n    username: \"@brent_m\"\n  },\n  {\n    id: 7,\n    avatar:\n      \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80\",\n    name: \"Charles Webb\",\n    username: \"@cwebb\"\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Setting a React Spectrum CheckboxGroup to Read-Only in TSX\nDESCRIPTION: Demonstrates using the `isReadOnly` prop on the CheckboxGroup to make the entire group's selection immutable. Unlike `isDisabled`, the group remains focusable. The `defaultValue` prop sets the initial, unchangeable selection ('baseball' in this case).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<CheckboxGroup label=\"Favorite sports\" defaultValue={['baseball']} isReadOnly>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Clear Button for DatePicker using State Context in TSX\nDESCRIPTION: This example defines a `DatePickerClearButton` component that accesses the `DatePicker`'s state via `DatePickerStateContext` (using `React.useContext`). It renders a `Button` that, when pressed, calls `state.setValue(null)` to clear the date picker's value. The example also shows how to integrate this custom button within the `DatePicker` structure alongside other standard components like `DateInput` and the calendar trigger `Button`. Requires `react-aria-components` and potentially date utility functions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePickerStateContext} from 'react-aria-components';\n\nfunction DatePickerClearButton() {\n  /*- begin highlight -*/\n  let state = React.useContext(DatePickerStateContext)!;\n  /*- end highlight -*/\n  return (\n    <Button\n      // Don't inherit default Button behavior from DatePicker.\n      slot={null}\n      className=\"clear-button\"\n      aria-label=\"Clear\"\n      onPress={() => state.setValue(null)}>\n      ✕\n    </Button>\n  );\n}\n\n<DatePicker defaultValue={today(getLocalTimeZone())}>\n  <Label>Date</Label>\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    {/*- begin highlight -*/}\n    <DatePickerClearButton />\n    {/*- end highlight -*/}\n    <Button>▼</Button>\n  </Group>\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Checkboxes within a CheckboxGroup in React Spectrum\nDESCRIPTION: Example demonstrating how to disable individual checkboxes within a CheckboxGroup while keeping others enabled. The isDisabled prop is applied to specific Checkbox components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup label=\"Favorite sports\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\" isDisabled>Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Applying Value Formatting to a React Spectrum Slider\nDESCRIPTION: Shows how to use the formatOptions prop to customize the display of the slider's value, formatting it as Japanese Yen currency using Intl.NumberFormat options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  defaultValue={60} />\n```\n\n----------------------------------------\n\nTITLE: Manipulating Calendar Dates in TypeScript/React\nDESCRIPTION: Demonstrates creating a CalendarDate object, adding a week to it, finding the start of the week based on locale, and converting to string format. Uses the @internationalized/date package's core functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate, startOfWeek} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\ndate = date.add({weeks: 1});\ndate = startOfWeek(date, 'en-US');\ndate.toString(); // 2022-02-06\n```\n\n----------------------------------------\n\nTITLE: Building RGBA Color Picker with React Spectrum in TypeScript\nDESCRIPTION: This snippet creates an RGBA color picker using four ColorSlider controls, each associated with a different color channel. React state is initialized via parseColor, and each slider is controlled via the value and onChange props, allowing synchronous updates across all sliders. Requires @react-stately/color for parseColor, ColorSlider component, and React; expects an initial color, and outputs updated color as user interacts with the UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSlider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\\n\\nfunction Example() {\\n  let [color, setColor] = React.useState(parseColor('#7f007f'));\\n  return (\\n    <>\\n      <ColorSlider channel=\"red\" value={color} onChange={setColor} />\\n      <ColorSlider channel=\"green\" value={color} onChange={setColor} />\\n      <ColorSlider channel=\"blue\" value={color} onChange={setColor} />\\n      <ColorSlider channel=\"alpha\" value={color} onChange={setColor} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Popover with Dialog in React\nDESCRIPTION: This example demonstrates how to use the PopoverTrigger component to render a popover containing a dialog.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Reuse the Dialog from your component library. See below for details.\nimport {Dialog} from 'your-component-library';\n\n<PopoverTrigger label=\"Open Popover\">\n  <Dialog title=\"Popover title\">\n    This is the content of the popover.\n  </Dialog>\n</PopoverTrigger>\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Layer CSS - CSS\nDESCRIPTION: This css snippet imports an external stylesheet related to Checkbox, likely to ensure shared or layered styles in the ListBox example context. It is hidden and assumed to be included for completeness or theming purposes. Relies on a valid CSS import source and proper file structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Checkbox.mdx' layer(checkbox);\\n\n```\n\n----------------------------------------\n\nTITLE: Validating Partial Number Input with NumberParser in JavaScript\nDESCRIPTION: Shows how to use the NumberParser class to validate partial user input for numbers. The parser is set up for the 'en-US' locale with a unit style of 'inch', and then used to check the validity of various partial inputs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {NumberParser} from '@internationalized/number';\n\nlet parser = new NumberParser('en-US', {style: 'unit', unit: 'inch'});\nparser.isValidPartialNumber('10 '); // -> true\nparser.isValidPartialNumber('10 in'); // -> true\nparser.isValidPartialNumber('10 i'); // -> false\nparser.isValidPartialNumber('10 x'); // -> false\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Contextual Help\nDESCRIPTION: Shows how to add a ContextualHelp component to provide additional information about the RadioGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<RadioGroup\n  label=\"T-shirt size\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Size and fit</Heading>\n      <Content>Our sizes run on the small side. Choose a size up from your usual.</Content>\n    </ContextualHelp>\n  }>\n  <Radio value=\"S\">Small</Radio>\n  <Radio value=\"M\">Medium</Radio>\n  <Radio value=\"L\">Large</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Customizing ColorSlider Labels in React (TSX)\nDESCRIPTION: Demonstrates hiding the default labels associated with the `ColorSlider`. Setting `label={null}` removes the primary label (usually the channel name), and `showValueLabel={false}` hides the numeric value display. `Flex` is used for layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-300\" wrap alignItems=\"end\">\n  <ColorSlider channel=\"saturation\" defaultValue=\"hsl(0, 100%, 50%)\" label={null} />\n  <ColorSlider channel=\"lightness\" defaultValue=\"hsl(0, 100%, 50%)\" showValueLabel={false} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Picker with Help Text and Validation (React/TypeScript)\nDESCRIPTION: This example shows how to add description and error messages to a Picker, along with custom validation logic.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n    let [animalId, setAnimalId] = React.useState(null);\n    let options = [\n      {id: 1, name: 'Aardvark'},\n      {id: 2, name: 'Cat'},\n      {id: 3, name: 'Dog'},\n      {id: 4, name: 'Kangaroo'},\n      {id: 5, name: 'Koala'},\n      {id: 6, name: 'Penguin'},\n      {id: 7, name: 'Snake'},\n      {id: 8, name: 'Turtle'},\n      {id: 9, name: 'Wombat'}\n    ];\n  let isValid = React.useMemo(() => animalId !== 2 && animalId !== 7, [animalId]);\n\n  return (\n    <Picker\n      isInvalid={!isValid}\n      label=\"Favorite animal\"\n      description=\"Pick your favorite animal, you will be judged.\"\n      errorMessage={animalId === 2 ? 'The author of this example is a dog person.' : 'Oh no it\\'s a snake! Choose anything else.'}\n      items={options}\n      selectedKey={animalId}\n      onSelectionChange={selected => setAnimalId(selected)}>\n      {item => <Item>{item.name}</Item>}\n    </Picker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Static ListBox Sections with Items (TypeScript/React)\nDESCRIPTION: Renders a ListBox with three static sections (Veggies, Protein, Condiments), each containing predefined Items grouped via Section components for organization. This approach uses @react-stately/collections for Section and standard ListBox/Item usage. Useful for categorizing static data; input is static, component-based structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Section} from '@react-stately/collections';\\n\\n<ListBox label=\\\"Choose sandwich contents\\\" selectionMode=\\\"multiple\\\">\\n  <Section title=\\\"Veggies\\\">\\n    <Item key=\\\"lettuce\\\">Lettuce</Item>\\n    <Item key=\\\"tomato\\\">Tomato</Item>\\n    <Item key=\\\"onion\\\">Onion</Item>\\n  </Section>\\n  <Section title=\\\"Protein\\\">\\n    <Item key=\\\"ham\\\">Ham</Item>\\n    <Item key=\\\"tuna\\\">Tuna</Item>\\n    <Item key=\\\"tofu\\\">Tofu</Item>\\n  </Section>\\n  <Section title=\\\"Condiments\\\">\\n    <Item key=\\\"mayo\\\">Mayonaise</Item>\\n    <Item key=\\\"mustard\\\">Mustard</Item>\\n    <Item key=\\\"ranch\\\">Ranch</Item>\\n  </Section>\\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Using mergeProps to Combine Props Objects in TypeScript\nDESCRIPTION: Demonstrates the basic usage of the `mergeProps` utility function imported from `@react-aria/utils`. Two sample prop objects (`a` and `b`) are defined, each containing a `className` string and an `onKeyDown` event handler function. The `mergeProps` function is called with these two objects as arguments to produce a new `merged` object. This illustrates the core functionality of combining props, particularly useful when merging props generated by multiple React Aria hooks onto a single element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/utils/docs/mergeProps.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {mergeProps} from '@react-aria/utils';\n\nlet a = {\n  className: 'foo',\n  onKeyDown(e) {\n    if (e.key === 'Enter') {\n      console.log('enter')\n    }\n  }\n};\n\nlet b = {\n  className: 'bar',\n  onKeyDown(e) {\n    if (e.key === ' ') {\n      console.log('space')\n    }\n  }\n};\n\nlet merged = mergeProps(a, b);\n```\n\n----------------------------------------\n\nTITLE: Basic DropZone Implementation\nDESCRIPTION: Example showing basic usage of DropZone component with state management and illustration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dropzone/docs/DropZone.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isFilled, setIsFilled] = React.useState(false);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        maxWidth=\"size-3000\"\n        isFilled={isFilled}\n        onDrop={() => setIsFilled(true)}>\n        <IllustratedMessage>\n          <Upload />\n          <Heading>\n            {isFilled ? 'You dropped something!' : 'Drag and drop your file'}\n          </Heading>\n        </IllustratedMessage>\n      </DropZone>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Read-Only Switch State - React Spectrum - TypeScript/TSX\nDESCRIPTION: This snippet shows using isReadOnly with isSelected to present a Switch in a selected, read-only state. The user cannot interact with the Switch; its state is fixed as 'on'. Useful for situations where you want to display a fixed state without allowing user changes. No interactivity is present, and only the specified props are used.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/docs/Switch.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch isReadOnly isSelected>Switch Label</Switch>\n```\n\n----------------------------------------\n\nTITLE: Managing Controlled Selection in React Spectrum ListBox (TypeScript/React)\nDESCRIPTION: This snippet sets up a ListBox with multiple selection and controlled state, utilizing React state management and the Selection type from react-stately. The selected keys are tracked in a Set and displayed as a string below the list. Dependencies include react, react-stately, and appropriate ListBox and Item components. Inputs are user selections; output is a displayed, comma-separated list of selected options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-stately';\\n\\nfunction Example() {\\n  let [selected, setSelected] = React.useState<Selection>(new Set(['cheese']));\\n\\n  return (\\n    <>\\n      <ListBox label=\\\"Choose sandwich contents\\\" selectionMode=\\\"multiple\\\" selectedKeys={selected} onSelectionChange={setSelected}>\\n        <Item key=\\\"lettuce\\\">Lettuce</Item>\\n        <Item key=\\\"tomato\\\">Tomato</Item>\\n        <Item key=\\\"cheese\\\">Cheese</Item>\\n        <Item key=\\\"tuna\\\">Tuna Salad</Item>\\n        <Item key=\\\"egg\\\">Egg Salad</Item>\\n        <Item key=\\\"ham\\\">Ham</Item>\\n      </ListBox>\\n      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Currency Formatting with useNumberFormatter in React\nDESCRIPTION: Example showing how to use useNumberFormatter hook to format currency values in different locales (US and German). The example demonstrates integration with I18nProvider and locale-specific currency formatting.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/useNumberFormatter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider, useNumberFormatter} from '@react-aria/i18n';\n\nfunction Currency({value, currency}) {\n  let formatter = useNumberFormatter({\n    style: 'currency',\n    currency,\n    minimumFractionDigits: 0\n  });\n\n  return (\n    <p>{formatter.format(value)}</p>\n  );\n}\n\n<>\n  <I18nProvider locale=\"en-US\">\n    <Currency value={125000} currency=\"USD\" />\n  </I18nProvider>\n  <I18nProvider locale=\"de-DE\">\n    <Currency value={350000} currency=\"EUR\" />\n  </I18nProvider>\n</>\n```\n\n----------------------------------------\n\nTITLE: Styling the Table Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the Table component, including layout, colors, and interactive states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Table {\n  padding: 0.286rem;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--overlay-background);\n  outline: none;\n  border-spacing: 0;\n  min-height: 100px;\n  align-self: start;\n  max-width: 100%;\n  word-break: break-word;\n  forced-color-adjust: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n\n  .react-aria-TableHeader {\n    color: var(--text-color);\n\n    &:after {\n      content: '';\n      display: table-row;\n      height: 2px;\n    }\n\n    & tr:last-child .react-aria-Column {\n      border-bottom: 1px solid var(--border-color);\n      cursor: default;\n    }\n  }\n\n  .react-aria-Row {\n    --radius-top: 6px;\n    --radius-bottom: 6px;\n    --radius: var(--radius-top) var(--radius-top) var(--radius-bottom) var(--radius-bottom);\n    border-radius: var(--radius);\n    clip-path: inset(0 round var(--radius)); /* firefox */\n    outline: none;\n    cursor: default;\n    color: var(--text-color);\n    font-size: 1.072rem;\n    position: relative;\n    transform: scale(1);\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n      --focus-ring-color: var(--highlight-foreground);\n\n      &[data-focus-visible],\n      .react-aria-Cell[data-focus-visible] {\n        outline-offset: -4px;\n      }\n    }\n\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n  }\n\n  .react-aria-Cell,\n  .react-aria-Column {\n    padding: 4px 8px;\n    text-align: left;\n    outline: none;\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n  }\n\n  .react-aria-Cell {\n    transform: translateZ(0);\n\n    &:first-child {\n      border-radius: var(--radius-top) 0 0 var(--radius-bottom);\n    }\n\n    &:last-child {\n      border-radius: 0 var(--radius-top) var(--radius-bottom) 0;\n    }\n  }\n\n  /* join selected items if :has selector is supported */\n  @supports selector(:has(.foo)) {\n    .react-aria-Row[data-selected]:has(+ [data-selected]),\n    .react-aria-Row[data-selected]:has(+ .react-aria-DropIndicator + [data-selected]) {\n      --radius-bottom: 0px;\n    }\n\n    .react-aria-Row[data-selected] + [data-selected],\n    .react-aria-Row[data-selected] + .react-aria-DropIndicator + [data-selected]{\n      --radius-top: 0px;\n    }\n  }\n}\n\n:where(.react-aria-Row) .react-aria-Checkbox {\n  --selected-color: var(--highlight-foreground);\n  --selected-color-pressed: var(--highlight-foreground-pressed);\n  --checkmark-color: var(--highlight-background);\n  --background-color: var(--highlight-background);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Radio Component Based on State (CSS)\nDESCRIPTION: Example of using a data attribute selector (`[data-selected]`) in CSS to apply styles to a Radio component only when it is in the selected state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Radio[data-selected] {\n  /* ... */\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal and Vertical Separators with useSeparator\nDESCRIPTION: This example demonstrates how to create both horizontal and vertical separators using the useSeparator hook. It includes a reusable Separator component and shows its usage in different orientations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/separator/docs/useSeparator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useSeparator} from '@react-aria/separator';\n\nfunction Separator(props) {\n  let {separatorProps} = useSeparator(props);\n\n  return (\n    <div\n      {...separatorProps}\n      style={{\n        background: 'gray',\n        width: props.orientation === 'vertical' ? '1px' : '100%',\n        height: props.orientation === 'vertical' ? '100%' : '1px',\n        margin: props.orientation === 'vertical' ? '0 5px' : '5px 0'\n      }} />\n  );\n}\n\n<>\n  <div style={{display: 'flex', flexDirection: 'column'}}>\n    Content above\n    <Separator />\n    Content below\n  </div>\n\n  <div style={{display: 'flex', flexDirection: 'row', marginTop: 20, height: 40, alignItems: 'center'}}>\n    Content left\n    <Separator orientation=\"vertical\" />\n    Content right\n  </div>\n</>\n```\n\n----------------------------------------\n\nTITLE: Fullscreen DialogContainer Example\nDESCRIPTION: This example shows how to create a fullscreen dialog using the type prop set to 'fullscreen'. This variant reveals only a small portion of the page behind the underlay and is suitable for complex workflows.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogContainer.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example(props) {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <ActionButton onPress={() => setOpen(true)}>\n        <Edit />\n        <Text>Edit</Text>\n      </ActionButton>\n      <DialogContainer type=\"fullscreen\" onDismiss={() => setOpen(false)} {...props}>\n        {isOpen &&\n          <EditDialog />\n        }\n      </DialogContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Basic Structure of a Tree Component in React\nDESCRIPTION: Illustrates the fundamental JSX structure for building a `Tree` using `react-aria-components`. It shows the nesting of `TreeItem` within the root `Tree` component, and how `TreeItemContent` typically contains elements like an expansion `Button` (using `slot=\"chevron\"` for specific styling/behavior hooks) and a selection `Checkbox` (using `slot=\"selection\"`). This represents the core anatomy described in the documentation. Requires `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Tree, TreeItem, TreeItemContent, Button, Checkbox} from 'react-aria-components';\n\n<Tree>\n  <TreeItem>\n    <TreeItemContent>\n      <Button slot=\"chevron\" />\n      <Checkbox slot=\"selection\" />\n    </TreeItemContent>\n    <TreeItem>\n      {/* ... */}\n    </TreeItem>\n  </TreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: Styling ModalOverlay Height for Mobile Keyboards\nDESCRIPTION: Demonstrates styling the `ModalOverlay` component using the `.react-aria-ModalOverlay` CSS selector. It utilizes the `--visual-viewport-height` CSS custom property, automatically set on the overlay, to adjust its height, ensuring it covers the appropriate area even when the virtual keyboard is visible on mobile devices.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ModalOverlay {\n  position: fixed;\n  height: var(--visual-viewport-height);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Aria and React Stately Hooks for SearchField\nDESCRIPTION: This snippet shows the necessary imports from React Aria and React Stately to implement a SearchField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/searchfield/docs/useSearchField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useSearchField} from '@react-aria/searchfield';\nimport {useSearchFieldState} from '@react-stately/searchfield';\n```\n\n----------------------------------------\n\nTITLE: Switching Tabs Orientation to Vertical in React Spectrum Tabs (TypeScript)\nDESCRIPTION: Configures Tabs component to use vertical orientation by setting orientation=\"vertical\". Does not affect keyboard navigation; only layout. Relies on static tab keys and labels for demonstration. Requires @adobe/react-spectrum. Inputs/Outputs: static display; changes tab alignment for UI adaptation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TSX\nCODE:\n```\n<Tabs aria-label=\"Chat log orientation example\" orientation=\"vertical\">\\n  <TabList>\\n    <Item key=\"item1\">\\n      John Doe\\n    </Item>\\n    <Item key=\"item2\">\\n      Jane Doe\\n    </Item>\\n    <Item key=\"item3\">\\n      Joe Bloggs\\n    </Item>\\n  </TabList>\\n  <TabPanels>\\n    <Item key=\"item1\">\\n      There is no prior chat history with John Doe.\\n    </Item>\\n    <Item key=\"item2\">\\n      There is no prior chat history with Jane Doe.\\n    </Item>\\n    <Item key=\"item3\">\\n      There is no prior chat history with Joe Bloggs.\\n    </Item>\\n  </TabPanels>\\n</Tabs>\\n\n```\n\n----------------------------------------\n\nTITLE: Picker with Custom Alignment and Direction (React/TypeScript)\nDESCRIPTION: This example demonstrates how to customize the alignment and direction of the Picker component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-150\">\n  <Picker label=\"Choose frequency\" align=\"end\" menuWidth=\"size-3000\">\n    <Item key=\"rarely\">Rarely</Item>\n    <Item key=\"sometimes\">Sometimes</Item>\n    <Item key=\"always\">Always</Item>\n  </Picker>\n\n  <Picker label=\"Choose animal\" direction=\"top\">\n    <Item key=\"Emu\">Emu</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Platypus\">Platypus</Item>\n  </Picker>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic ComboBox Implementation with Static Items in TSX\nDESCRIPTION: Demonstrates the basic usage of the ComboBox component with a static list of options defined using child `Item` components. Each `Item` has a unique `key`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntsx example\n<ComboBox label=\"Favorite Animal\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Sections with useState in React Spectrum Picker (tsx)\nDESCRIPTION: Demonstrates how to define static hierarchical data using the `useState` hook and render it as sections within a React Spectrum `Picker` component. Each section object has a `name` and an `items` array, which are mapped to `<Section>` and `<Item>` components respectively using a render function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nlet [sections, setSections] = useState([\n  {\n    name: 'People',\n    items: [\n      {name: 'David'},\n      {name: 'Same'},\n      {name: 'Jane'}\n    ]\n  },\n  {\n    name: 'Animals',\n    items: [\n      {name: 'Aardvark'},\n      {name: 'Kangaroo'},\n      {name: 'Snake'}\n    ]\n  }\n]);\n\n<Picker items={sections}>\n  {section =>\n    <Section key={section.name} title={section.name} items={section.items}>\n      {item => <Item key={item.name}>{item.name}</Item>}\n    </Section>\n  }\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Component for Menu Customization\nDESCRIPTION: Example of creating a wrapper component for Menu to customize its props, allowing for reusable customization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyMenu(props) {\n  return <Menu {...props} className=\"my-menu\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v3 with React Aria Components Plugin (tsx)\nDESCRIPTION: This snippet shows how to configure Tailwind CSS v3 by adding the `tailwindcss-react-aria-components` plugin to the `plugins` array in the `tailwind.config.js` file. It requires installing version 1.x of the plugin for compatibility with Tailwind v3.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/category-tabs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using the 'info' Variant for ContextualHelp in React\nDESCRIPTION: Provides an example of the ContextualHelp component using `variant=\"info\"`. This variant displays an info icon as the trigger and is typically used for brief, supplemental information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/contextualhelp/docs/ContextualHelp.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextualHelp variant=\"info\">\n  <Heading>Permission required</Heading>\n  <Content><Text>Your admin must grant you permission before you can create a segment.</Text></Content>\n</ContextualHelp>\n```\n\n----------------------------------------\n\nTITLE: Determinate ProgressBar Example in React Spectrum\nDESCRIPTION: Demonstrates a determinate ProgressBar which should be used when progress can be calculated against a specific goal.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressBar label=\"Loading…\" value={50} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Multi-Month Calendar View in React Spectrum (TSX)\nDESCRIPTION: This TSX example demonstrates configuring the React Spectrum `Calendar` component to display three months at once using the `visibleDuration` prop. It utilizes multiple `CalendarGrid` components, adjusting their start month relative to the first visible month via the `offset` prop (`{months: 1}`, `{months: 2}`), within a flex container for layout. Header controls (`Button`, `Heading`) for navigation are also shown. Requires React Spectrum components like `Calendar`, `Button`, `Heading`, `CalendarGrid`, `CalendarCell`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Calendar aria-label=\"Appointment date\" visibleDuration={{months: 3}}>\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>\n    <CalendarGrid>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 1}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 2}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n  </div>\n</Calendar>\n```\n```\n\n----------------------------------------\n\nTITLE: Changing Display Granularity of DateField - React Spectrum - TypeScript/TSX\nDESCRIPTION: This example illustrates how to use the granularity prop of DateField to control which units (second, minute, day) are displayed. It demonstrates two DateFields sharing a single parsed absolute date: one shows both date and time to seconds, the other reduces the displayed fields to only the date. Both remain synchronized and controlled through React state. Requires importing parseAbsoluteToLocal and Flex from their respective packages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DateField\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate} />\n      <DateField\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria TagGroup Components with CSS\nDESCRIPTION: This CSS snippet provides styling rules for the `TagGroup`, `TagList`, and `Tag` components using classes prefixed with `.react-aria-`. It defines layout (flexbox, gap), typography (font size, color), borders, padding, focus visibility (`[data-focus-visible]`), hover effects (`[data-hovered]`), and selected states (`[data-selected]`) using CSS custom properties (variables) for theming.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n```css\n@import \"@react-aria/example-theme\";\n\n.react-aria-TagGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  font-size: small;\n  color: var(--text-color);\n}\n\n.react-aria-TagList {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4px;\n}\n\n.react-aria-Tag {\n  color: var(--text-color);\n  border: 1px solid var(--border-color);\n  forced-color-adjust: none;\n  border-radius: 4px;\n  padding: 2px 8px;\n  font-size: 0.929rem;\n  outline: none;\n  cursor: default;\n  display: flex;\n  align-items: center;\n  transition: border-color 200ms;\n\n  &[data-hovered] {\n    border-color: var(--border-color-hover);\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  &[data-selected] {\n    border-color: var(--highlight-background);\n    background: var(--highlight-background);\n    color: var(--highlight-foreground);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using a Custom 4-5-4 Calendar in React Spectrum (TSX)\nDESCRIPTION: This TSX example demonstrates creating a custom fiscal calendar following a 4-5-4 pattern by extending `GregorianCalendar` from `@internationalized/date`. The `Custom454` class implements custom logic for date calculations (partially collapsed in the example). The `Example` component then integrates this custom calendar into `MyCalendar` using the `createCalendar` prop, allowing the calendar UI to reflect the custom date system. Depends on `@internationalized/date` and a `MyCalendar` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction Example() {\n  return <MyCalendar firstDayOfWeek=\"sun\" createCalendar={() => new Custom454()} />;\n}\n\nclass Custom454 extends GregorianCalendar {\n  // See @internationalized/date docs linked above...\n  ///- begin collapse -///\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n  getDaysInMonth(date) {\n    return this.weekPattern[date.month - 1] * 7;\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < this.weekPattern.length; months++) {\n      let weeksInMonth = this.weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  getFormattableMonth(date) {\n    let gregorian = toCalendar(date, new GregorianCalendar());\n    return gregorian.set({month: date.month, day: 1});\n  }\n\n  isEqual(other) {\n    return other instanceof Custom454;\n  }\n ///- end collapse -///\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs with Disabled Keys Collection\nDESCRIPTION: This example demonstrates using the disabledKeys prop to disable specific tabs in a dynamic collection. Each key in disabledKeys corresponds to the id of a tab item in the collection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let tabs = [\n    {id: 1, title: 'Mouse settings'},\n    {id: 2, title: 'Keyboard settings'},\n    {id: 3, title: 'Gamepad settings'}\n  ];\n\n  return (\n    <Tabs disabledKeys={[2]}>\n      <TabList aria-label=\"Input settings\" items={tabs}>\n        {item => <Tab>{item.title}</Tab>}\n      </TabList>\n      <Collection items={tabs}>\n        {item => <TabPanel>{item.title}</TabPanel>}\n      </Collection>\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Switch in HTML Forms - React Spectrum - TypeScript/TSX\nDESCRIPTION: Shows how to use the name and value props on a Switch to integrate with HTML forms. This enables the Switch state to be captured when submitting form data. The name prop specifies the value's key, and value determines the submitted string if selected. Suitable for standard form processing workflows with React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/docs/Switch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch name=\\\"power\\\" value=\\\"low\\\">Low power mode</Switch>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dismissable Dialog in React Spectrum\nDESCRIPTION: Example of a dismissable dialog that shows a close button at the top right instead of action buttons. Uses the isDismissable property on DialogTrigger.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger isDismissable>\n  <ActionButton>Status</ActionButton>\n  <Dialog>\n    <Heading>Status</Heading>\n    <Divider />\n    <Content>Printer Status: Connected</Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using Keyboard Component in React\nDESCRIPTION: This example demonstrates how to use the Keyboard component to represent a keyboard command (⌘V) in a React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/text/docs/Keyboard.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Keyboard>⌘V</Keyboard>\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Operations in onDrop Event with TypeScript\nDESCRIPTION: This snippet demonstrates how to handle different drop operations (move, copy, link) in the onDrop event of a React component using a switch statement.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrop.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DropTarget(props) {\n  let ref = React.useRef(null);\n  let {dropProps, isDropTarget} = useDrop({\n    ref,\n    async onDrop(e) {\n      let item = e.items.find(item => item.kind === 'text' && item.types.has('my-app-file')) as TextDropItem;\n      if (!item) {\n        return;\n      }\n\n      let data = JSON.parse(await item.getText('my-app-file'));\n      switch (e.dropOperation) {\n        case 'move':\n          MyAppFileService.move(data.filePath, props.filePath);\n          break;\n        case 'copy':\n          MyAppFileService.copy(data.filePath, props.filePath);\n          break;\n        case 'link':\n          MyAppFileService.link(data.filePath, props.filePath);\n          break;\n      }\n    }\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Close Delay Using closeDelay Prop - React TypeScript\nDESCRIPTION: This example demonstrates customizing the time before a tooltip disappears after hovering ends by setting the closeDelay prop to 0. The TooltipButton component is reused, and the closeDelay prop determines the hiding delay for the tooltip. This feature is useful for users who require immediate visual feedback when interaction ends.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tooltip/docs/useTooltipTrigger.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipButton tooltip=\"Refresh\" closeDelay={0}>🔄</TooltipButton>\n\n```\n\n----------------------------------------\n\nTITLE: Secondary Variant Buttons with Fill and Outline Styles in Spectrum (TypeScript)\nDESCRIPTION: This example provides two secondary style Spectrum Buttons rendered in a flex container. It highlights the 'secondary' variant using both 'fill' and 'outline' styles and demonstrates visually distinct secondary button options. Requires '@react-spectrum/button' and '@react-spectrum/layout'. Useful for distinguishing secondary UI actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\\\"size-250\\\">\\n  <Button variant=\\\"secondary\\\" style=\\\"fill\\\">Save</Button>\\n  <Button variant=\\\"secondary\\\" style=\\\"outline\\\">Save</Button>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using Static Color Variants for ToggleButton on Backgrounds in TSX\nDESCRIPTION: This example shows how to use the `staticColor` prop ('white' or 'black') on `ToggleButton` components placed within `View` components having specific background colors (`static-blue-700`, `static-yellow-400`). This ensures proper visibility and contrast against the colored background, especially when the button is selected or has the `isQuiet` prop applied. The example uses `Flex` for layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ToggleButton.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\"size-250\">\n  <View backgroundColor=\"static-blue-700\" padding=\"size-500\">\n    <ToggleButton staticColor=\"white\">\n      <Pin />\n      <Text>Pin</Text>\n    </ToggleButton>\n  </View>\n  <View backgroundColor=\"static-yellow-400\" padding=\"size-500\">\n    <ToggleButton staticColor=\"black\" isQuiet defaultSelected>\n      <Pin />\n      <Text>Pin</Text>\n    </ToggleButton>\n  </View>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Controlled RadioGroup with State in React\nDESCRIPTION: This example shows how to create a controlled RadioGroup using React state and the onChange event.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(null);\n\n  return (\n    <>\n      <MyRadioGroup label=\"Favorite avatar\" value={selected} onChange={setSelected}>\n        <Radio value=\"wizard\">Wizard</Radio>\n        <Radio value=\"dragon\">Dragon</Radio>\n      </MyRadioGroup>\n      <p>You have selected: {selected ?? ''}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing DateSegment Rendering with Render Props (JSX)\nDESCRIPTION: This JSX example demonstrates using render props as children for the `DateSegment` component. It allows for custom rendering logic based on the segment's state (`isPlaceholder`) and properties (`text`, `placeholder`), such as explicitly rendering the placeholder text in a separate element to reserve space.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<DateSegment>\n  {({text, placeholder, isPlaceholder}) => (\n    <>\n      <span style={{visibility: isPlaceholder ? 'visible' : 'hidden'}}>{placeholder}</span>\n      {isPlaceholder ? '' : text}\n    </>\n  )}\n</DateSegment>\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorSwatch Component with useColorSwatch in React\nDESCRIPTION: This example demonstrates how to create a ColorSwatch component using the useColorSwatch hook. It renders a color swatch with a checkerboard pattern for partially transparent colors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSwatch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useColorSwatch, AriaColorSwatchProps} from '@react-aria/color';\n\nfunction ColorSwatch(props: AriaColorSwatchProps) {\n  let {colorSwatchProps, color} = useColorSwatch(props);\n\n  return (\n    <div \n      {...colorSwatchProps}\n      style={{\n        ...colorSwatchProps.style,\n        width: 32,\n        height: 32,\n        borderRadius: 4,\n        background: `linear-gradient(${color}, ${color}),\n          repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n      }} />\n  );\n}\n\n<ColorSwatch color=\"#f00a\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring optimize-locales-plugin with Rollup (JavaScript)\nDESCRIPTION: Illustrates how to add the `@react-aria/optimize-locales-plugin` to a Rollup configuration file (`rollup.config.js`). The plugin is imported using ES Modules `import` and included in the `plugins` array via `optimizeLocales.rollup`, defining the locales ('en-US', 'fr-FR') to keep.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/optimize-locales-plugin/README.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// rollup.config.js\nimport optimizeLocales from '@react-aria/optimize-locales-plugin';\n\nexport default {\n  plugins: [\n    optimizeLocales.rollup({\n      locales: ['en-US', 'fr-FR']\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating RouterProvider with React Router\nDESCRIPTION: Provides a complete example of integrating `RouterProvider` with `react-router-dom`. It uses the `useNavigate` and `useHref` hooks from React Router and sets up the provider within the context of `BrowserRouter`. It also includes TypeScript configuration for `NavigateOptions` via declaration merging.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {BrowserRouter, useNavigate, useHref, type NavigateOptions} from 'react-router-dom';\nimport {RouterProvider} from 'react-aria-components';\n\ndeclare module 'react-aria-components' {\n  interface RouterConfig {\n    routerOptions: NavigateOptions\n  }\n}\n\nfunction App() {\n  let navigate = useNavigate();\n\n  return (\n    <RouterProvider navigate={navigate} useHref={useHref}>\n      {/* Your app here... */}\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        {/* ... */}\n      </Routes>\n    </RouterProvider>\n  );\n}\n\n<BrowserRouter>\n  <App />\n</BrowserRouter>\n```\n\n----------------------------------------\n\nTITLE: Defining the Individual Toast Component with useToast in React (TSX)\nDESCRIPTION: This component, `Toast`, renders a single toast notification. It uses the `useToast` hook from `@react-aria/toast` to get accessibility props (`toastProps`, `contentProps`, `titleProps`, `closeButtonProps`) for the main toast container, its content, title, and close button. It expects `AriaToastProps` (including the specific `toast` object) and the overall `ToastState` as props, rendering the toast content and a close `Button`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaToastProps} from '@react-aria/toast';\nimport {useToast} from '@react-aria/toast';\n\n// Reuse the Button from your component library. See below for details.\nimport {Button} from 'your-component-library';\n\ninterface ToastProps<T> extends AriaToastProps<T> {\n  state: ToastState<T>\n}\n\nfunction Toast<T extends React.ReactNode>({state, ...props}: ToastProps<T>) {\n  let ref = React.useRef(null);\n  let {toastProps, contentProps, titleProps, closeButtonProps} = useToast(props, state, ref);\n\n  return (\n    <div {...toastProps} ref={ref} className=\"toast\">\n      <div {...contentProps}>\n        <div {...titleProps}>{props.toast.content}</div>\n      </div>\n      <Button {...closeButtonProps}>x</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Slider with Fill Option in React Spectrum\nDESCRIPTION: Shows how to use the isFilled and fillOffset props to customize the Slider's appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-300\">\n  <Slider label=\"Opacity\" maxValue={1} formatOptions={{style: 'percent'}} defaultValue={0.9} step={0.01} isFilled />\n  <Slider label=\"Exposure\" minValue={-5} maxValue={5} defaultValue={1.83} formatOptions={{signDisplay: 'always'}} step={0.01} fillOffset={0} isFilled />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from React Spectrum Docs\nDESCRIPTION: This snippet imports the Layout component from the @react-spectrum/docs package and exports it as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorSliderState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Interface Documentation using JSX Component\nDESCRIPTION: This JSX snippet displays the documentation for the interface returned by the `useCalendarState` hook. It employs the `ClassAPI` component, providing it with the relevant type information (`docs.links[docs.exports.useCalendarState.return.id]`) and type links (`docs.links`) to render the structure of the state object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useCalendarState.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useCalendarState.return.id]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Validation with TimeField in React Spectrum\nDESCRIPTION: Example showing how to use TimeField within a Form component with native validation behavior to enforce required field validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TimeField label=\"Meeting time\" name=\"time\" isRequired />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Area Component with React Aria\nDESCRIPTION: Demonstrates how to create a color area component using the useColorArea hook from React Aria. The component includes a draggable thumb for adjusting color values and supports keyboard navigation and focus management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useColorArea} from '@react-aria/color';\nimport {useColorAreaState} from '@react-stately/color';\nimport {useFocusRing} from '@react-aria/focus';\n\nconst SIZE = 192;\nconst FOCUSED_THUMB_SIZE = 28;\nconst THUMB_SIZE = 20;\nconst BORDER_RADIUS = 4;\n\nfunction ColorArea(props) {\n  let inputXRef = React.useRef(null);\n  let inputYRef = React.useRef(null);\n  let containerRef = React.useRef(null);\n\n  let state = useColorAreaState(props);\n\n  let {isDisabled} = props;\n\n  let {\n    colorAreaProps,\n    xInputProps,\n    yInputProps,\n    thumbProps\n  } = useColorArea({...props, inputXRef, inputYRef, containerRef}, state);\n\n  let {focusProps, isFocusVisible} = useFocusRing();\n\n  return (\n    <div\n      ref={containerRef}\n      {...colorAreaProps}\n      style={{\n        ...colorAreaProps.style,\n        width: SIZE,\n        height: SIZE,\n        borderRadius: BORDER_RADIUS,\n        background: isDisabled ? 'rgb(142, 142, 142)' : colorAreaProps.style.background,\n        opacity: isDisabled ? 0.3 : undefined\n      }}>\n      <div\n        {...thumbProps}\n        style={{\n          ...thumbProps.style,\n          background: isDisabled ? 'rgb(142, 142, 142)' : state.getDisplayColor().toString('css'),\n          border: `2px solid ${isDisabled ? 'rgb(142, 142, 142)' : 'white'}`,\n          borderRadius: '50%',\n          boxShadow: '0 0 0 1px black, inset 0 0 0 1px black',\n          boxSizing: 'border-box',\n          height: isFocusVisible ? FOCUSED_THUMB_SIZE + 4 : THUMB_SIZE,\n          width: isFocusVisible ? FOCUSED_THUMB_SIZE + 4 : THUMB_SIZE\n        }}>\n        <input ref={inputXRef} {...xInputProps} {...focusProps} />\n        <input ref={inputYRef} {...yInputProps} {...focusProps} />\n      </div>\n    </div>\n  );\n};\n\n<ColorArea />\n```\n\n----------------------------------------\n\nTITLE: Managing ToggleButton State with onChange in TSX\nDESCRIPTION: This functional component example demonstrates how to create a controlled `ToggleButton`. It uses `React.useState` to manage the `isSelected` state and updates it via the `onChange` handler (`setSelected`). The button is also styled with `isEmphasized` and includes an `aria-label` and a `Pin` icon.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ToggleButton.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isSelected, setSelected] = React.useState(false);\n\n  return (\n    <ToggleButton\n      isEmphasized\n      isSelected={isSelected}\n      onChange={setSelected}\n      aria-label=\"Pin\">\n      <Pin />\n    </ToggleButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Individual React Stately Package via Yarn\nDESCRIPTION: This command installs a specific, individually versioned React Stately hook package (`@react-stately/radio` in this example) using the yarn package manager. This approach allows for more granular dependency management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-stately/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @react-stately/radio\n```\n\n----------------------------------------\n\nTITLE: Grouping ToggleButtons and Cascading Disabled State with Context (TypeScript)\nDESCRIPTION: This TypeScript/TSX snippet demonstrates using React context to pass the isDisabled prop from a parent ButtonGroup to all contained ToggleButtons via ToggleButtonContext.Provider. The ButtonGroup component accepts children and isDisabled props, and applies the context value, providing a compositional pattern for managing props at a group level. All buttons within ButtonGroup are disabled when isDisabled is true, enhancing maintainability and reusability.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButtonContext} from 'react-aria-components';\\n\\ninterface ButtonGroupProps {\\n  children?: React.ReactNode,\\n  isDisabled?: boolean\\n}\\n\\nfunction ButtonGroup({children, isDisabled}: ButtonGroupProps) {\\n  return (\\n    <div style={{display: 'flex', gap: 8}}>\\n      {/*- begin highlight -*/}\\n      <ToggleButtonContext.Provider value={{isDisabled}}>\\n      {/*- end highlight -*/}\\n        {children}\\n      </ToggleButtonContext.Provider>\\n    </div>\\n  );\\n}\\n\\n<ButtonGroup isDisabled>\\n  <ToggleButton isSelected aria-label=\"Favorite\">★</ToggleButton>\\n  <ToggleButton aria-label=\"Flag\">⚑</ToggleButton>\\n</ButtonGroup>\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Time Zone-Aware Date Ranges in DateRangePicker with ZonedDateTime (TypeScript/React)\nDESCRIPTION: This example illustrates setting the DateRangePicker's defaultValue prop using parseZonedDateTime to generate ZonedDateTime-aware date ranges. The input has the time zone explicitly specified, ensuring that the displayed values respect the designated time zone. Dependencies: @internationalized/date. Inputs are ISO 8601 date-time strings with zone, output is a time zone-corrected range in the picker.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\\n\\n<DateRangePicker\\n  label=\\\"Date range\\\"\\n  defaultValue={{\\n    start: parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]'),\\n    end: parseZonedDateTime('2022-11-08T11:15[America/Los_Angeles]')\\n  }} />\n```\n\n----------------------------------------\n\nTITLE: NumberField with Decimal Formatting\nDESCRIPTION: Demonstrates how to format a NumberField to display decimals with specific options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField\n  label=\"Adjust exposure\"\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }}\n  defaultValue={0} />\n```\n\n----------------------------------------\n\nTITLE: Using Quiet Mode for React Spectrum Tabs (TypeScript)\nDESCRIPTION: Configures Tabs in quiet mode using the isQuiet prop, which typically renders the component with subdued styling for less prominent presentation. Depends on @adobe/react-spectrum. Only static items and panels provided. No dynamic interactivity beyond tab switching. Inputs: none required; Outputs: quieter tabbed navigation UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n<Tabs aria-label=\"Chat log quiet example\" isQuiet>\\n  <TabList>\\n    <Item key=\"item1\">\\n      John Doe\\n    </Item>\\n    <Item key=\"item2\">\\n      Jane Doe\\n    </Item>\\n    <Item key=\"item3\">\\n      Joe Bloggs\\n    </Item>\\n  </TabList>\\n  <TabPanels>\\n    <Item key=\"item1\">\\n      There is no prior chat history with John Doe.\\n    </Item>\\n    <Item key=\"item2\">\\n      There is no prior chat history with Jane Doe.\\n    </Item>\\n    <Item key=\"item3\">\\n      There is no prior chat history with Joe Bloggs.\\n    </Item>\\n  </TabPanels>\\n</Tabs>\\n\n```\n\n----------------------------------------\n\nTITLE: Detecting Server-Side Rendering Context with useIsSSR (TSX)\nDESCRIPTION: Example component using the `useIsSSR` hook from `@react-aria/ssr` to determine if it's currently rendering on the server or during hydration. The hook returns `true` during SSR/hydration and `false` afterwards on the client, enabling conditional rendering or delaying browser-specific code until after hydration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {useIsSSR} from '@react-aria/ssr';\n\nfunction MyComponent() {\n  let isSSR = useIsSSR();\n  return <span>{isSSR ? 'Server' : 'Client'}</span>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Vertical Orientation Toggle Button Group\nDESCRIPTION: Example of a toggle button group with vertical orientation. Setting the orientation prop to 'vertical' changes the layout and arrow key navigation behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButtonGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup orientation=\"vertical\">\n  <ToggleButton id=\"grid\">Grid</ToggleButton>\n  <ToggleButton id=\"list\">List</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Link Functionality to Select Items\nDESCRIPTION: Example of creating link items within a Select component by using the href prop on ListBoxItem. Link items in a Select are not selectable and can navigate to other pages or websites.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MySelect label=\"Project\">\n  <ListBoxItem href=\"https://example.com/\" target=\"_blank\">Create new…</ListBoxItem>\n  <ListBoxItem>Proposal</ListBoxItem>\n  <ListBoxItem>Budget</ListBoxItem>\n  <ListBoxItem>Onboarding</ListBoxItem>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Handling DateRangePicker Values in React\nDESCRIPTION: This example shows how to handle both controlled and uncontrolled values in a DateRangePicker component. It demonstrates parsing dates using @internationalized/date and managing state for controlled values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-08')\n  });\n\n  return (\n    <>\n      <MyDateRangePicker\n        label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-08')\n        }} />\n      <MyDateRangePicker\n        label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Slider Component in React\nDESCRIPTION: Demonstrates how to create a controlled slider component with a single thumb using React state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(25);\n  return (\n    <>\n      <MySlider<number>\n        label=\"Cookies to buy\"\n        value={value}\n        onChange={setValue} />\n      <p>Current value: {value}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring ContextualHelp Content with Heading, Content, and Footer in React\nDESCRIPTION: Illustrates how to structure content within a ContextualHelp component using the 'help' variant. It utilizes the `Heading`, `Content` (with `Text`), and `Footer` (with `Link`) components as children to create a standard layout with a title, body, and an optional link.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/contextualhelp/docs/ContextualHelp.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextualHelp variant=\"help\">\n  <Heading>What is a segment?</Heading>\n  <Content><Text>Segments identify who your visitors are, what devices and services they use, where they navigated from, and much more.</Text></Content>\n  <Footer><Link>Learn more about segments</Link></Footer>\n</ContextualHelp>\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages in React Spectrum RangeCalendar using TSX\nDESCRIPTION: Illustrates setting the `isInvalid` prop based on custom validation logic (e.g., maximum duration of 1 week) and providing a corresponding `errorMessage` string to guide the user when the validation fails. Uses `React.useState` to manage the selected range state and `@internationalized/date` for date comparisons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: today(getLocalTimeZone()),\n    end: today(getLocalTimeZone()).add({ weeks: 1, days: 3 })\n  });\n  let isInvalid = range.end.compare(range.start) > 7;\n\n  return (\n    <MyRangeCalendar\n      aria-label=\"Trip dates\"\n      value={range}\n      onChange={setRange}\n      /*- begin highlight -*/\n      isInvalid={isInvalid}\n      errorMessage={isInvalid ? 'Maximum stay duration is 1 week' : undefined}\n      /*- end highlight -*/\n    />\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Dates in DateRangePicker\nDESCRIPTION: Demonstrates how to mark certain dates as unavailable in DateRangePicker using isDateUnavailable callback and handling invalid states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let isDateUnavailable = (date) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n  let [value, setValue] = React.useState(null);\n  let isInvalid = value && disabledRanges.some(interval => value.end.compare(interval[0]) >= 0 && value.start.compare(interval[1]) <= 0);\n\n  return (\n    <DateRangePicker\n      label=\"Trip dates\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={isDateUnavailable}\n      value={value}\n      onChange={setValue}\n      isInvalid={isInvalid} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Custom DatePicker Clear Button in CSS\nDESCRIPTION: This CSS code styles the custom clear button (identified by the `.clear-button` class) created in the TSX example. It defines its size, shape (circular), position (using negative margin for overlay effect), appearance (background, color), and interaction states (pressed, focus-visible) using React Aria's data attributes. It also adjusts the margin of the adjacent sibling button (`.react-aria-Button`) to accommodate the clear button. Assumes the corresponding TSX example's structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_36\n\nLANGUAGE: css\nCODE:\n```\n.clear-button {\n  width: 1.143rem;\n  height: 1.143rem;\n  border-radius: 1.143rem;\n  margin-left: -3.4rem;\n  font-size: 0.857rem;\n  line-height: 0.857rem;\n  vertical-align: middle;\n  text-align: center;\n  background: gray;\n  color: white;\n  border: none;\n  padding: 0;\n  outline: none;\n\n  &[data-pressed] {\n    background: dimgray;\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  + .react-aria-Button {\n    margin-left: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button Component using useButton (React/TypeScript)\nDESCRIPTION: This snippet defines a custom Button component that utilizes the useButton hook from @react-aria/button for ARIA accessibility and interaction states, such as pressed. The component accepts all props for useButton, forwards refs, and renders as a <span> for flexibility in styling and composition within toolbars. Dependencies include React, @react-aria/button, and appropriate CSS for appearance. The component expects children (button label/content) and optional event handlers or ARIA properties, outputting an accessible span that behaves like a button for assistive technology and keyboard users.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toolbar/docs/useToolbar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useButton} from '@react-aria/button';\\n\\nfunction Button(props) {\\n  let {children} = props;\\n  let ref = useRef<HTMLButtonElement | null>(null);\\n  let {buttonProps, isPressed} = useButton({\\n    ...props,\\n    elementType: 'span'\\n  }, ref);\\n\\n  return (\\n    <span\\n      {...buttonProps}\\n      style={{\\n        background: isPressed ? '#bbb' : '#aaa',\\n        color: 'black',\\n        cursor: 'default',\\n        padding: '5px 10px'\\n      }}\\n      ref={ref}>\\n      {children}\\n    </span>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Component in React with TypeScript\nDESCRIPTION: This snippet shows how to create a Popover component using React Aria hooks. It handles positioning and dismissal of the popover content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaPopoverProps} from 'react-aria';\nimport type {OverlayTriggerState} from 'react-stately';\nimport {usePopover, Overlay, DismissButton} from '@react-aria/overlays';\n\ninterface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {\n  children: React.ReactNode,\n  state: OverlayTriggerState\n}\n\nfunction Popover({children, state, ...props}: PopoverProps) {\n  let popoverRef = React.useRef(null);\n  let {popoverProps, underlayProps} = usePopover({\n    ...props,\n    popoverRef\n  }, state);\n\n  return (\n    <Overlay>\n      <div {...underlayProps} style={{position: 'fixed', inset: 0}} />\n      <div\n        {...popoverProps}\n        ref={popoverRef}\n        style={{\n          ...popoverProps.style,\n          background: 'var(--page-background)',\n          border: '1px solid gray'\n        }}>\n        <DismissButton onDismiss={state.close} />\n        {children}\n        <DismissButton onDismiss={state.close} />\n      </div>\n    </Overlay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable TimeField Wrapper Component in TSX\nDESCRIPTION: Shows how to encapsulate the TimeField and its related components (Label, DateInput, DateSegment, Text, FieldError) into a reusable wrapper component named `MyTimeField`. This promotes consistency by defining structure, styling, and prop handling (like label, description, errorMessage) in one place. It utilizes TypeScript for prop definitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TimeFieldProps, TimeValue, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MyTimeFieldProps<T extends TimeValue> extends TimeFieldProps<T> {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction MyTimeField<T extends TimeValue>({label, description, errorMessage, ...props}: MyTimeFieldProps<T>) {\n  return (\n    <TimeField {...props}>\n      <Label>{label}</Label>\n      <DateInput>\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </TimeField>\n  );\n}\n\n<MyTimeField label=\"Event time\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component with Semantic Elements in JSX\nDESCRIPTION: Demonstrates how to use semantic elements like Header, Description, and Footer within a Card component, replacing specialized components like CardHeader, CardDescription, and CardFooter.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-semantic-elements.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n  <Header />\n  <Description />\n  <Footer />\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Composing a Customized ListBox Wrapper - React TSX\nDESCRIPTION: Defines a wrapper MyListBox component to add new props (like className) while forwarding all received props. Dependencies: React and React Aria. Input: props to ListBox. Output: ListBox with additional class applied.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyListBox(props) {\n  return <ListBox {...props} className=\"my-listbox\" />\n}\n```\n\n----------------------------------------\n\nTITLE: TextField with Custom Width in React\nDESCRIPTION: This example demonstrates how to set a custom width for the TextField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField label=\"Email\" width=\"size-3600\" maxWidth=\"100%\" />\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic Data and Selection with useListData Hook (TSX)\nDESCRIPTION: This example demonstrates using the `useListData` hook from `@react-stately/data` to manage both the collection data and its selection state. The hook automatically handles updating the selection when items are added or removed. The `list.items`, `list.selectedKeys`, and `list.setSelectedKeys` properties returned by the hook are bound to the `ListBox` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/selection.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useListData({\n  initialItems: [\n    {name: 'Aardvark'},\n    {name: 'Kangaroo'},\n    {name: 'Snake'}\n  ],\n  initialSelectedKeys: ['Kangaroo'],\n  getKey: item => item.name\n});\n\nfunction removeItem() {\n  // Removing the list item will also remove it from the selection state.\n  list.remove('Kangaroo');\n}\n\n<ListBox\n  items={list.items}\n  selectedKeys={list.selectedKeys}\n  onSelectionChange={list.setSelectedKeys}>\n  {item => <Item key={item.name}>{item.name}</Item>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Tailwind in React Aria Row\nDESCRIPTION: Demonstrates using a function to dynamically apply Tailwind CSS classes based on the selection state of a React Aria Row component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_50\n\nLANGUAGE: jsx\nCODE:\n```\n<Row className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  {/* ... */}\n</Row>\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Actions in TreeView with Checkbox and Highlight Selection (TSX)\nDESCRIPTION: This code shows how to set up item actions in TreeView components using the onAction prop. Two ExampleTree components demonstrate checkbox and highlight selection styles, triggering an alert when an item is acted upon. Requires ExampleTree, Flex, and React. Key parameters are selectionMode, onAction, and optionally selectionStyle. Inputs are user clicks and item keys; output is action callbacks (e.g., alerts). Use when items need to perform actions such as navigation in addition to selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-300\">\n  <ExampleTree\n    aria-label=\"Example tree with item actions and checkbox selection\"\n    defaultExpandedKeys={['projects', 'project-2']}\n    /*- begin highlight -*/\n    selectionMode=\"multiple\"\n    onAction={key => alert(`Opening item ${key}...`)}\n    /*- end highlight -*/\n  />\n  <ExampleTree\n    aria-label=\"Example tree with item actions and highlight selection\"\n    defaultExpandedKeys={['projects', 'project-2']}\n    /*- begin highlight -*/\n    selectionMode=\"multiple\"\n    selectionStyle=\"highlight\"\n    onAction={key => alert(`Opening item ${key}...`)}\n    /*- end highlight -*/\n  />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: TextField with onChange Event Handler in React\nDESCRIPTION: This example demonstrates how to use the onChange event handler with the TextField component to update a separate element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [text, setText] = React.useState('');\n\n  return (\n    <Flex direction=\"column\" gap=\"size-150\">\n      <TextField\n        onChange={setText}\n        label=\"Your text\" />\n      <pre>Mirrored text: {text}</pre>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid Calendar Dates and Error Messages in React Spectrum (CSS)\nDESCRIPTION: Applies custom CSS styling for invalid calendar cells and error messages by targeting React Aria's class naming structure and slot attributes. Can be included in any standard CSS file or style block. Expects that the theme variables (e.g., --invalid-color) are defined. Input: data-invalid attribute or errorMessage slot on Calendar components. Output: Styled background and foreground colors for invalid states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Calendar {\\n  .react-aria-CalendarCell {\\n    &[data-invalid] {\\n      background: var(--invalid-color);\\n      color: var(--highlight-foreground);\\n    }\\n  }\\n\\n  [slot=errorMessage] {\\n    font-size: 12px;\\n    color: var(--invalid-color);\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Testing Menu Components with React Aria Test Utils\nDESCRIPTION: Example of how to use the @react-aria/test-utils package to test menu interactions. Demonstrates opening a menu, interacting with submenus, and selecting options using the MenuTester utility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_44\n\nLANGUAGE: ts\nCODE:\n```\n// Menu.test.ts\nimport {render} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('Menu can open its submenu via keyboard', async function () {\n  // Render your test component/app and initialize the menu tester\n  let {getByTestId} = render(\n    <MenuTrigger>\n      <Button data-testid=\"test-menutrigger\">Menu trigger</Button>\n      ...\n    </MenuTrigger>\n  );\n  let menuTester = testUtilUser.createTester('Menu', {root: getByTestId('test-menutrigger'), interactionType: 'keyboard'});\n\n  await menuTester.open();\n  expect(menuTester.menu).toBeInTheDocument();\n  let submenuTriggers = menuTester.submenuTriggers;\n  expect(submenuTriggers).toHaveLength(1);\n\n  let submenuTester = await menuTester.openSubmenu({submenuTrigger: 'Share…'});\n  expect(submenuTester.menu).toBeInTheDocument();\n\n  await submenuTester.selectOption({option: submenuTester.options()[0]});\n  expect(submenuTester.menu).not.toBeInTheDocument();\n  expect(menuTester.menu).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Disclosure Group and Item Components\nDESCRIPTION: This snippet shows how to create a DisclosureGroup component that manages multiple DisclosureItem components, allowing only one to be expanded at a time (accordion behavior).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/disclosure/docs/useDisclosure.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDisclosureGroupState} from '@react-stately/disclosure';\nimport {useId} from '@react-aria/utils';\n\nconst DisclosureGroupStateContext = React.createContext(null);\n\nfunction DisclosureGroup(props) {\n  let state = useDisclosureGroupState(props);\n\n  return (\n    <div className=\"group\">\n      <DisclosureGroupStateContext.Provider value={state}>\n        {props.children}\n      </DisclosureGroupStateContext.Provider>\n    </div>\n  );\n}\n\nfunction DisclosureItem(props) {\n  let defaultId = useId();\n  let id = props.id || defaultId;\n  let groupState = React.useContext(DisclosureGroupStateContext);\n  let isExpanded = groupState ? groupState.expandedKeys.has(id) : props.isExpanded;\n  let state = useDisclosureState({\n    ...props,\n    isExpanded,\n    onExpandedChange(isExpanded) {\n      if (groupState) {\n        groupState.toggleKey(id);\n      }\n\n      props.onExpandedChange?.(isExpanded);\n    }\n  });\n\n  let panelRef = React.useRef<HTMLDivElement | null>(null);\n  let triggerRef = React.useRef<HTMLButtonElement | null>(null);\n  let isDisabled = props.isDisabled || groupState?.isDisabled || false;\n  let {buttonProps: triggerProps, panelProps} = useDisclosure({\n    ...props,\n    isExpanded,\n    isDisabled\n  }, state, panelRef);\n  let {buttonProps} = useButton(triggerProps, triggerRef);\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  return (\n    <div className=\"disclosure\">\n      <h3>\n        <button \n          className=\"trigger\" \n          ref={triggerRef}\n          {...mergeProps(buttonProps, focusProps)}\n          style={{outline: isFocusVisible ? '2px solid dodgerblue' : 'none'}}>\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          {props.title}\n        </button>\n      </h3>\n      <div className=\"panel\" ref={panelRef} {...panelProps}>\n        <p>\n          {props.children}\n        </p>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to Toast in React Spectrum\nDESCRIPTION: Shows how to add an action to a toast by specifying actionLabel, onAction, and shouldCloseOnAction options when queueing a toast.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/toast/docs/Toast.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx example\nCODE:\n```\n<Button\n  onPress={() => ToastQueue.info('An update is available', {\n    actionLabel: 'Update',\n    onAction: () => alert('Updating!'),\n    shouldCloseOnAction: true\n  })}\n  variant=\"primary\">\n  Show toast\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Simulating User Interactions with user-event\nDESCRIPTION: Demonstrates how to use the user-event library to simulate complex user interactions like clicking, typing, and tabbing in tests for React Aria Components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/testing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nlet tree = render(<LoginForm />);\n\n// Click on the username field to focus it, and enter the value.\nuserEvent.click(tree.getByLabelText('Username'));\nuserEvent.type(document.activeElement, 'devon');\n\n// Tab to the password field, and enter the value.\nuserEvent.tab();\nuserEvent.type(document.activeElement, 'Pas$w0rd');\n\n// Tab to the submit button and click it.\nuserEvent.tab();\nuserEvent.click(document.activeElement);\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Selection in TreeView - React Spectrum - TSX\nDESCRIPTION: This snippet demonstrates how to enable multi-selection in the TreeView using selectionMode='multiple' and setting default selected keys. The user can select multiple items at once, and selected state is initialized via defaultSelectedKeys. Dependencies include React Spectrum and proper TreeViewItem id management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleTree\\n  aria-label=\\\"Example tree with selection\\\"\\n  defaultExpandedKeys={['projects', 'project-2']}\\n  /*- begin highlight -*/\\n  selectionMode=\\\"multiple\\\"\\n  defaultSelectedKeys={['document-a', 'document-b']}\\n  /*- end highlight -*/\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Switch Component in React Aria\nDESCRIPTION: Demonstrates how to create a controlled Switch component using React state and the onChange event.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Switch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(false);\n\n  return (\n    <>\n      <MySwitch isSelected={selected} onChange={setSelected}>Low power mode</MySwitch>\n      <p>{selected ? 'Low' : 'High'} power mode active.</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TooltipTrigger and Tooltip with OverlayArrow and Button (Anatomy Example) in React (TypeScript/TSX)\nDESCRIPTION: Illustrates the core structure of TooltipTrigger with a Button and a Tooltip containing an OverlayArrow. This pattern is central to building tooltip-triggered interactions in React apps. Requires installation of react-aria-components and use within a JSX context. Inputs are expected to be React JSX elements, and the output is a hover/focus-activated tooltip component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TooltipTrigger, Tooltip, OverlayArrow, Button} from 'react-aria-components';\\n\\n<TooltipTrigger>\\n  <Button />\\n  <Tooltip>\\n    <OverlayArrow />\\n  </Tooltip>\\n</TooltipTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Provider for Next.js App Router\nDESCRIPTION: Demonstrates creating a client component (`ClientProviders`) in Next.js App Router to wrap the application and configure `RouterProvider`. It uses the `useRouter` hook from `next/navigation` to get the `push` method for navigation and includes TypeScript declaration merging for router options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// app/provider.tsx\n\"use client\";\n\nimport {useRouter} from 'next/navigation';\nimport {RouterProvider} from 'react-aria-components';\n\ndeclare module 'react-aria-components' {\n  interface RouterConfig {\n    routerOptions: NonNullable<Parameters<ReturnType<typeof useRouter>['push']>[1]>>\n  }\n}\n\nexport function ClientProviders({children}) {\n  let router = useRouter();\n\n  return (\n    <RouterProvider navigate={router.push}>\n      {children}\n    </RouterProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation in DateRangePicker\nDESCRIPTION: Shows how to implement basic form validation with FieldError component in DateRangePicker. Includes required field validation and error display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  <DateRangePicker startName=\"startDate\" endName=\"endDate\" isRequired>\n    <Label>Trip dates</Label>\n    <Group>\n      <DateInput slot=\"start\">\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      <span aria-hidden=\"true\">–</span>\n      <DateInput slot=\"end\">\n        {segment => <DateSegment segment={segment} />}\n      </DateInput>\n      <Button>▼</Button>\n    </Group>\n    <FieldError />\n    <Popover>\n      <Dialog>\n        <RangeCalendar>\n          <header>\n            <Button slot=\"previous\">◀</Button>\n            <Heading />\n            <Button slot=\"next\">▶</Button>\n          </header>\n          <CalendarGrid>\n            {date => <CalendarCell date={date} />}\n          </CalendarGrid>\n        </RangeCalendar>\n      </Dialog>\n    </Popover>\n  </DateRangePicker>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Basic Workflow Icon Usage in React Spectrum\nDESCRIPTION: Example of importing and using the Airplane icon from the @spectrum-icons/workflow package, showing the standard implementation with proper accessibility attribute.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/workflow-icons.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Airplane from '@spectrum-icons/workflow/Airplane';\n\n<Airplane aria-label=\"Airplane\" />\n```\n\n----------------------------------------\n\nTITLE: Parsing and Formatting Percentage in Different Locales\nDESCRIPTION: This example demonstrates how to use NumberParser and NumberFormatter to parse a percentage in Arabic numbering system and format it in US English locale. It showcases the library's ability to handle different numbering systems and locales.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {NumberParser, NumberFormatter} from '@internationalized/number';\n\nlet parser = new NumberParser('ar-SA', {style: 'percent'});\nlet number = parser.parse('٤٥٪'); // 0.45\n\nlet formatter = new NumberFormatter('en-US', {style: 'percent'});\nformatter.format(number); // '45%'\n```\n\n----------------------------------------\n\nTITLE: Validating DatePicker Input With Custom Logic in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Implements custom validation for the DatePicker component to disallow weekends by utilizing the validate prop. The function receives the selected date and locale, returning a specified error message string when the date falls on a weekend, or null otherwise. Requires React Spectrum, @internationalized/date, and a form context for proper usage. Expects a date input; outputs an error if the date is invalid. The validation logic can be replaced as needed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: TSX\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\\nimport {useLocale} from '@adobe/react-spectrum';\\n\\nfunction Example() {\\n  let {locale} = useLocale();\\n\\n  return (\\n    <Form validationBehavior=\\\"native\\\" maxWidth=\\\"size-3000\\\">\\n      <DatePicker\\n        label=\\\"Appointment date\\\"\\n        /*- begin highlight -*/\\n        validate={date => date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}\\n        /*- end highlight -*/\\n        defaultValue={parseDate('2023-10-28')} />\\n      <ButtonGroup>\\n        <Button type=\\\"submit\\\" variant=\\\"primary\\\">Submit</Button>\\n        <Button type=\\\"reset\\\" variant=\\\"secondary\\\">Reset</Button>\\n      </ButtonGroup>\\n    </Form>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Japanese Calendar DateTime - TypeScript\nDESCRIPTION: Creates a date in the Japanese calendar system with era specification, equivalent to April 4th, 2020 at 9:15 AM in the Gregorian calendar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {JapaneseCalendar} from '@internationalized/date';\n\nlet date = new CalendarDateTime(\n  new JapaneseCalendar(),\n  'heisei', 31, 4, 30, 9, 15\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Clear Button using SelectStateContext in React-Aria Select Component\nDESCRIPTION: This example demonstrates how to create a SelectClearButton component that accesses the Select component's state through the SelectStateContext to clear the selected value when pressed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SelectStateContext} from 'react-aria-components';\n\nfunction SelectClearButton() {\n  /*- begin highlight -*/\n  let state = React.useContext(SelectStateContext);\n  /*- end highlight -*/\n  return (\n    <Button\n      // Don't inherit behavior from Select.\n      slot={null}\n      style={{fontSize: 'small', marginTop: 6, padding: 4}}\n      onPress={() => state?.setSelectedKey(null)}>\n      Clear\n    </Button>\n  );\n}\n\n<Select>\n  <Label>Favorite Animal</Label>\n  <Button>\n    <SelectValue />\n    <span aria-hidden=\"true\">▼</span>\n  </Button>\n  {/*- begin highlight -*/}\n  <SelectClearButton />\n  {/*- end highlight -*/}\n  <Popover>\n    <ListBox>\n      <ListBoxItem>Cat</ListBoxItem>\n      <ListBoxItem>Dog</ListBoxItem>\n      <ListBoxItem>Kangaroo</ListBoxItem>\n    </ListBox>\n  </Popover>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker with Local Time Zone Conversion\nDESCRIPTION: Shows how to parse absolute dates into the user's local time zone using parseAbsoluteToLocal from the @internationalized/date package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseAbsoluteToLocal('2021-11-07T07:45:00Z'),\n    end: parseAbsoluteToLocal('2021-11-08T14:25:00Z')\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing ColorWheel and Layout Components in JSX\nDESCRIPTION: Imports the `ColorWheel` component from `@react-spectrum/color` and the `Flex` layout component from `@react-spectrum/layout` for use in subsequent examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorWheel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ColorWheel} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Integrating RadioGroup with HTML Forms in React Spectrum (TSX)\nDESCRIPTION: Shows how to integrate a `RadioGroup` with standard HTML forms by using the `name` prop on the `RadioGroup` and the `value` prop on individual `Radio` components. The selected radio's value will be submitted with the form under the specified name.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite pet\" name=\"pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Basic ColorSwatchPicker Usage in TSX\nDESCRIPTION: Demonstrates a simple implementation of the `ColorSwatchPicker` component, rendering several `ColorSwatch` children with specified hex color values. This example uses the default uncontrolled behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatchPicker>\n  <ColorSwatch color=\"#A00\" />\n  <ColorSwatch color=\"#f80\" />\n  <ColorSwatch color=\"#080\" />\n  <ColorSwatch color=\"#08f\" />\n  <ColorSwatch color=\"#088\" />\n  <ColorSwatch color=\"#008\" />\n</ColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic GridList Collections with Render Functions (TypeScript)\nDESCRIPTION: This snippet shows how to provide dynamic data to a GridList using a render function and dynamic collections. It defines an ItemValue interface and an ExampleList component that receives rows and renders them using MyGridList and MyItem. Dependencies include MyGridList, MyItem, and Button, as well as react-aria-components types. The function inputs props for the GridList and a collection of item objects, and outputs a dynamic, multi-selectable GridList. Limitations: The snippet presumes existence of MyGridList and MyItem wrappers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ItemValue {\\n  id: number,\\n  name: string\\n}\\n\\nfunction ExampleList(props: GridListProps<ItemValue>) {\\n  let rows = [\\n    {id: 1, name: 'Games'},\\n    {id: 2, name: 'Program Files'},\\n    {id: 3, name: 'bootmgr'},\\n    {id: 4, name: 'log.txt'}\\n  ];\\n\\n  return (\\n    <MyGridList\\n      aria-label=\"Example dynamic collection List\"\\n      selectionMode=\"multiple\"\\n      /*- begin highlight -*/\\n      items={rows}\\n      /*- end highlight -*/\\n      {...props}>\\n      {item => (\\n        <MyItem textValue={item.name}>\\n          {item.name}\\n          <Button aria-label=\"Info\" onPress={() => alert(`Info for ${item.name}...`)}>ⓘ</Button>\\n        </MyItem>\\n      )}\\n    </MyGridList>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Handling onChange Events for React Spectrum Checkbox\nDESCRIPTION: Provides an example of using the `onChange` event handler. The handler (`setSelection`) updates the component's state (`selected`) via `React.useState` whenever the checkbox is clicked, and the current subscription status is displayed in a `View` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/Checkbox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <Flex direction=\"column\">\n      <Checkbox isSelected={selected} onChange={setSelection}>\n        Subscribe\n      </Checkbox>\n      <View>{`You are ${selected ? 'subscribed' : 'unsubscribed'}`}</View>\n    </Flex>\n  );\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Items in ListBox Component\nDESCRIPTION: Shows how to create a ListBox component with clickable links using the Item component's href prop. Demonstrates converting options to anchor tags when href is provided.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Option({item, state}) {\n  let ref = React.useRef(null);\n  let {optionProps} = useOption({key: item.key}, state, ref);\n  let {isFocusVisible, focusProps} = useFocusRing();\n  let ElementType: React.ElementType = item.props.href ? 'a' : 'div';\n\n  return (\n    <ElementType\n      {...mergeProps(optionProps, focusProps)}\n      ref={ref}\n      data-focus-visible={isFocusVisible}>\n      {item.rendered}\n    </ElementType>\n  );\n}\n\n<ListBox aria-label=\"Links\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Content in TreeItem with Render Props (JSX)\nDESCRIPTION: Illustrates using render props as children of `TreeItem` to conditionally render elements based on the current state. The example shows rendering a `Checkbox` only when `selectionMode` is not 'none'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<TreeItem>\n  {({selectionMode}) => (\n    <TreeItemContent>\n      {selectionMode !== 'none' && <Checkbox />}\n      Item\n    </TreeItemContent>\n  )}\n</TreeItem>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Popover Placement using PopoverTrigger in TSX\nDESCRIPTION: This example demonstrates how to control the placement of a popover relative to its trigger element using the `placement` prop on the `PopoverTrigger` component. It shows examples for 'start', 'top', 'bottom', and 'end' placements, each containing a `Dialog` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{ display: 'flex', gap: 8 }}>\n  <PopoverTrigger placement=\"start\" label=\"⬅️\">\n    <Dialog>In left-to-right, this is on the left. In right-to-left, this is on the right.</Dialog>\n  </PopoverTrigger>\n  <PopoverTrigger placement=\"top\" label=\"⬆️\">\n    <Dialog>This popover is above the button.</Dialog>\n  </PopoverTrigger>\n  <PopoverTrigger placement=\"bottom\" label=\"⬇️\">\n    <Dialog>This popover is below the button.</Dialog>\n  </PopoverTrigger>\n  <PopoverTrigger placement=\"end\" label=\"➡️\">\n    <Dialog>In left-to-right, this is on the right. In right-to-left, this is on the left.</Dialog>\n  </PopoverTrigger>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Plugins in Tailwind v3 (JavaScript)\nDESCRIPTION: This JavaScript snippet configures Tailwind v3 to use the 'tailwindcss-react-aria-components' and 'tailwindcss-animate' plugins via the 'plugins' array inside 'tailwind.config.js'. Requires both plugins to be installed as project dependencies (with version 1.x for 'tailwindcss-react-aria-components'). This enables additional class utilities for Aria components and animation effects in your project styles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/action-menu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using usePress Hook in React Aria for Unified Press Events\nDESCRIPTION: The usePress hook in React Aria provides a unified API for handling press events across different interaction models. It fires onPressStart, onPressEnd, and onPress events with a unified PressEvent object, allowing consistent handling of press interactions from various input sources.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nusePress({\n  onPressStart: (e) => {\n    // Handle press start\n  },\n  onPressEnd: (e) => {\n    // Handle press end\n  },\n  onPress: (e) => {\n    // Handle press\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Replace Selection Behavior in ListBox (TypeScript)\nDESCRIPTION: This snippet demonstrates setting the `selectionBehavior` prop to `\"replace\"` on a `ListBox` with `selectionMode=\"multiple\"`. In this mode, clicking an item replaces the current selection, while modifier keys (Ctrl/Cmd/Shift) are needed for multiple selections via mouse. Arrow keys move both focus and selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Sandwich contents\"\n  selectionMode=\"multiple\"\n  /*- begin highlight -*/\n  selectionBehavior=\"replace\"\n  /*- end highlight -*/\n>\n  <ListBoxItem id=\"lettuce\">Lettuce</ListBoxItem>\n  <ListBoxItem id=\"tomato\">Tomato</ListBoxItem>\n  <ListBoxItem id=\"cheese\">Cheese</ListBoxItem>\n  <ListBoxItem id=\"tuna\">Tuna Salad</ListBoxItem>\n  <ListBoxItem id=\"egg\">Egg Salad</ListBoxItem>\n  <ListBoxItem id=\"ham\">Ham</ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Locale with I18nProvider in React\nDESCRIPTION: Shows how to override default locale detection using the I18nProvider component wrapper\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/internationalization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider} from 'react-aria-components';\n\n<I18nProvider locale=\"fr-FR\">\n  <YourApp />\n</I18nProvider>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Date Validation for DatePicker in React\nDESCRIPTION: This TSX example demonstrates using the `minValue` prop on a DatePicker within a React Aria `Form`. It sets `minValue` to the current date using `today(getLocalTimeZone())` from `@internationalized/date`. This prevents users from selecting any date before today. A `defaultValue` is provided for the initial state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {today} from '@internationalized/date';\n\n<Form>\n  <MyDatePicker\n    label=\"Appointment date\"\n    /*- begin highlight -*/\n    minValue={today(getLocalTimeZone())}\n    /*- end highlight -*/\n    defaultValue={parseDate('2022-02-03')} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling a Switch Component with CSS\nDESCRIPTION: Provides CSS styles for customizing the appearance of the Switch component, including different states like pressed, selected, and focused.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Switch {\n  display: flex;\n  align-items: center;\n  gap: 0.571rem;\n  font-size: 1.143rem;\n  color: var(--text-color);\n  forced-color-adjust: none;\n\n  .indicator {\n    width: 2rem;\n    height: 1.143rem;\n    border: 2px solid var(--border-color);\n    background: var(--background-color);\n    border-radius: 1.143rem;\n    transition: all 200ms;\n\n    &:before {\n      content: '';\n      display: block;\n      margin: 0.143rem;\n      width: 0.857rem;\n      height: 0.857rem;\n      background: var(--highlight-background);\n      border-radius: 16px;\n      transition: all 200ms;\n    }\n  }\n\n  &[data-pressed] .indicator {\n    border-color: var(--border-color-pressed);\n\n    &:before {\n      background: var(--highlight-background-pressed);\n    }\n  }\n\n  &[data-selected] {\n    .indicator {\n      border-color: var(--highlight-background);\n      background: var(--highlight-background);\n\n      &:before {\n        background: var(--field-background);\n        transform: translateX(100%);\n      }\n    }\n\n    &[data-pressed] {\n      .indicator {\n        border-color: var(--highlight-background-pressed);\n        background: var(--highlight-background-pressed);\n      }\n    }\n  }\n\n  &[data-focus-visible] .indicator {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Information AlertDialog with Multiple Actions in React Spectrum\nDESCRIPTION: Example of an information AlertDialog with primary, secondary, and cancel buttons. Shows how to configure multiple button options in the dialog footer.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Exit</ActionButton>\n  <AlertDialog\n    variant=\"information\"\n    title=\"Register profile\"\n    primaryActionLabel=\"Register\"\n    secondaryActionLabel=\"Remind me later\"\n    cancelLabel=\"Cancel\">\n    You have not saved your profile information\n    for this account. Would you like to register now?\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing WaterfallLayout with Virtualizer in React (TSX)\nDESCRIPTION: This TSX snippet demonstrates how to use the `WaterfallLayout` with the `Virtualizer` component from `react-aria-components`. It configures the layout options, including `minItemSize` and `minSpace`, to create a masonry-style grid. The `Virtualizer` wraps a `ListBox` component, which renders items based on the `images` data array.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WaterfallLayout, Size, Text} from 'react-aria-components';\n\nfunction Example() {\n  return (\n    <Virtualizer \n      /*- begin highlight -*/\n      layout={WaterfallLayout}\n      layoutOptions={{\n        minItemSize: new Size(150, 150),\n        minSpace: new Size(8, 8)\n      }}\n      /*- end highlight -*/\n    >\n      <ListBox\n        layout=\"grid\"\n        aria-label=\"Virtualized waterfall layout\"\n        selectionMode=\"multiple\"\n        items={images}>\n        {item => (\n          <ListBoxItem textValue={item.title}>\n            <img src={item.image} alt=\"\" style={{aspectRatio: item.aspectRatio}} />\n            <Text slot=\"label\">{item.title}</Text>\n            <Text slot=\"description\">{item.user}</Text>\n          </ListBoxItem>\n        )}\n      </ListBox>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Subtracting Durations from ZonedDateTime in TypeScript\nDESCRIPTION: Demonstrates how to add and subtract durations from ZonedDateTime objects. It shows examples of adding and subtracting various time units, including weeks, months, years, hours, and minutes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\n\ndate.add({weeks: 1}); // 2022-02-10T09:45[America/Los_Angeles]\ndate.add({months: 1}); // 2022-03-03T09:45[America/Los_Angeles]\ndate.add({years: 1, months: 1, days: 1}); // 2023-03-04T09:45[America/Los_Angeles]\ndate.add({hours: 1}); // 2022-02-03T10:45[America/Los_Angeles]\ndate.add({minutes: 30}); // 2022-02-03T10:15[America/Los_Angeles]\n\ndate.subtract({weeks: 1}); // 2022-01-27T09:45[America/Los_Angeles]\ndate.subtract({months: 1}); // 2022-01-03T09:45[America/Los_Angeles]\ndate.subtract({years: 1, months: 1, days: 1}); // 2021-01-02T09:45[America/Los_Angeles]\ndate.subtract({hours: 1}); // 2022-02-03T8:45[America/Los_Angeles]\ndate.subtract({minutes: 30}); // 2022-02-03T09:15[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Implementing List and ListItem Components with React Aria\nDESCRIPTION: This snippet shows how to create the main List and ListItem components using React Aria hooks. It handles rendering, selection, and focus management for list items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListState} from '@react-stately/list';\nimport {mergeProps} from '@react-aria/utils';\nimport {useRef} from 'react';\nimport {useFocusRing} from '@react-aria/focus';\nimport {useGridList, useGridListItem} from '@react-aria/gridlist';\n\nfunction List(props) {\n  let state = useListState(props);\n  let ref = useRef<HTMLUListElement | null>(null);\n  let { gridProps } = useGridList(props, state, ref);\n\n  return (\n    <ul {...gridProps} ref={ref} className=\"list\">\n      {[...state.collection].map((item) => (\n        <ListItem key={item.key} item={item} state={state} />\n      ))}\n    </ul>\n  );\n}\n\nfunction ListItem({ item, state }) {\n  let ref = React.useRef(null);\n  let {rowProps, gridCellProps, isPressed} = useGridListItem(\n    {node: item},\n    state,\n    ref\n  );\n\n  let {isFocusVisible, focusProps} = useFocusRing();\n  let showCheckbox = state.selectionManager.selectionMode !== 'none' && state.selectionManager.selectionBehavior === 'toggle';\n\n  return (\n    <li\n      {...mergeProps(rowProps, focusProps)}\n      ref={ref}\n      className={`${isPressed ? 'pressed' : ''} ${isFocusVisible ? 'focus-visible' : ''}`}>\n      <div {...gridCellProps}>\n        {showCheckbox && <ListCheckbox item={item} state={state} />}\n        {item.rendered}\n      </div>\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting NumberField as Currency (EUR) in TSX\nDESCRIPTION: This example shows how to configure the `NumberField` component to format the input value as a currency (Euro). It uses the `formatOptions` prop, passing an object that specifies the `style` as 'currency' and the `currency` as 'EUR'. This leverages the built-in Intl.NumberFormat API for localization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/how-we-internationalized-our-numberfield.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField\n  label=\"Transaction amount\"\n  defaultValue={45}\n  minValue={0}\n  formatOptions={{\n    style: 'currency',\n    currency: 'EUR'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Using Toolbar with Vertical Orientation and Icon Buttons (TypeScript/TSX)\nDESCRIPTION: This advanced snippet demonstrates a vertically oriented Toolbar containing grouped icon buttons from the @spectrum-icons/workflow library, separated by orientation-aware Separator components. It organizes buttons into logical groups ('Select' and 'Draw') and uses ARIA labels to support accessibility. The toolbar orientation is set to vertical, changing both layout and keyboard navigation. Required dependencies include react-aria-components and @spectrum-icons/workflow icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toolbar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Move from '@spectrum-icons/workflow/Move';\\nimport Select from '@spectrum-icons/workflow/Select';\\nimport Polygon from '@spectrum-icons/workflow/PolygonSelect';\\nimport Brush from '@spectrum-icons/workflow/Brush';\\nimport Pencil from '@spectrum-icons/workflow/Edit';\\n\\n<Toolbar aria-label=\\\"Tools\\\" orientation=\\\"vertical\\\">\\n  <Group aria-label=\\\"Select\\\">\\n    <Button aria-label=\\\"Move\\\"><Move size=\\\"S\\\" /></Button>\\n    <Button aria-label=\\\"Rectangle\\\"><Select size=\\\"S\\\" /></Button>\\n    <Button aria-label=\\\"Polygon\\\"><Polygon size=\\\"S\\\" /></Button>\\n  </Group>\\n  <Separator orientation=\\\"horizontal\\\" />\\n  <Group aria-label=\\\"Draw\\\">\\n    <Button aria-label=\\\"Brush\\\"><Brush size=\\\"S\\\" /></Button>\\n    <Button aria-label=\\\"Pencil\\\"><Pencil size=\\\"S\\\" /></Button>\\n  </Group>\\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Elements within React Spectrum Tag based on State using JSX\nDESCRIPTION: Demonstrates using the function-as-a-child pattern (render props) within a `Tag` component to conditionally render elements based on the tag's state or capabilities. The example shows rendering a `RemoveButton` component only if the `allowsRemoving` state property (passed to the child function) is true.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<Tag>\n  {({allowsRemoving}) => (\n    <>\n      Item\n      {allowsRemoving && <RemoveButton />}\n    </>\n  )}\n</Tag>\n```\n```\n\n----------------------------------------\n\nTITLE: Nesting Color Schemes with React Spectrum Provider (TSX)\nDESCRIPTION: Illustrates how to apply different color schemes to different parts of an application by nesting `Provider` components. The outer `Provider` sets a `\"light\"` color scheme, while an inner `Provider` overrides it with a `\"dark\"` scheme for its children, resulting in buttons with different themes within the same hierarchy.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/theming.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Provider colorScheme=\"light\">\n  <ActionButton margin=\"size-200\">I'm a light button</ActionButton>\n  <Provider colorScheme=\"dark\">\n    <ActionButton margin=\"size-200\">I'm a dark button</ActionButton>\n  </Provider>\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Allowing Multiple Expanded Disclosures - React Spectrum - TSX\nDESCRIPTION: This snippet illustrates enabling multiple expanded Accordion panels by providing allowsMultipleExpanded and defaultExpandedKeys props. Both 'personal' and 'billing' disclosures are expanded by default. Dependencies: @react-spectrum/accordion and React. Inputs: allowsMultipleExpanded boolean and array of disclosure keys. Output: Accordion UI supporting multiple open sections at once.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Accordion.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<Accordion allowsMultipleExpanded defaultExpandedKeys={['personal', 'billing']}>\n  <Disclosure id=\"personal\">\n    <DisclosureTitle>Personal Information</DisclosureTitle>\n    <DisclosurePanel>\n      Personal information form here.\n    </DisclosurePanel>\n  </Disclosure>\n  <Disclosure id=\"billing\">\n    <DisclosureTitle>Billing Address</DisclosureTitle>\n    <DisclosurePanel>\n      Billing address form here.\n    </DisclosurePanel>\n  </Disclosure>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Disabled Items in ListBox\nDESCRIPTION: This example demonstrates how to disable specific items in ListBox using the disabledKeys prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox width=\"size-2400\" aria-label=\"Pick your favorite\" disabledKeys={[\"Snake\", \"Ross\"]} selectionMode=\"single\">\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">Aardvark</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Snake\">Snake</Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">Danni</Item>\n    <Item key=\"Devon\">Devon</Item>\n    <Item key=\"Ross\">Ross</Item>\n  </Section>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: SearchField with Form Validation in React\nDESCRIPTION: This example shows how to use the SearchField component with form validation in a React Spectrum Form.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <SearchField label=\"Search\" name=\"search\" isRequired />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Disabling Multiple Tags in React Spectrum TagGroup via `disabledKeys` using TSX\nDESCRIPTION: Shows an alternative method for disabling tags within a dynamic collection rendered by `MyTagGroup`. It uses the `disabledKeys` prop on the `MyTagGroup` component, passing an array of item IDs (`[2, 4]`) that correspond to the tags ('Travel', 'Shopping') to be disabled. This is convenient when dealing with dynamically generated items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let options = [\n    { id: 1, name: \"News\" },\n    { id: 2, name: \"Travel\" },\n    { id: 3, name: \"Gaming\" },\n    { id: 4, name: \"Shopping\" }\n  ];\n\n  return (\n    <MyTagGroup\n      label=\"Categories\"\n      items={options}\n      selectionMode=\"multiple\"\n      /*- begin highlight -*/\n      disabledKeys={[2, 4]}\n      /*- end highlight -*/\n    >\n      {(item) => <MyTag>{item.name}</MyTag>}\n    </MyTagGroup>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Calendar Cells Conditionally with className Function in React Spectrum (JavaScript JSX)\nDESCRIPTION: Demonstrates functional className usage: styles CalendarCell using a function that switches classes according to isSelected state, e.g., for integration with Tailwind CSS or similar utility frameworks. Input: CalendarCell selection state. Output: Dynamically styled cells. Requires support for functional className props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n<CalendarCell className={({isSelected}) => isSelected ? 'bg-blue-600' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Styling Description Text in SearchField with CSS\nDESCRIPTION: CSS styles for customizing the appearance of description text in a SearchField component, targeting elements with the description slot.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-SearchField {\n  [slot=description] {\n    grid-area: help;\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Values for TimeField in React Spectrum\nDESCRIPTION: This snippet demonstrates how to set minimum and maximum allowed values for a TimeField component. In this example, only times between 9 AM and 5 PM are accepted.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField\n  label=\"Meeting time\"\n  minValue={new Time(9)}\n  maxValue={new Time(17)}\n  defaultValue={new Time(8)} />\n```\n\n----------------------------------------\n\nTITLE: Programmatic Toast Dismissal Example (TypeScript)\nDESCRIPTION: This TypeScript example shows how to programmatically dismiss a toast using queue.close and key tracking. It defines an Example component with local state for tracking the active toast key, toggling between showing and hiding the toast based on state. Dependencies include React and the pre-existing queue. The setToastKey function is linked both to the queue's add and onClose callbacks to synchronize UI and toast state. Input is user click events; output is the conditional display of a toast notification and its programmatic removal.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Example() {\n  let [toastKey, setToastKey] = React.useState(null);\n\n  return (\n    <Button\n      onPress={() => {\n        if (!toastKey) {\n          ///- begin highlight -///\n          setToastKey(queue.add({title: 'Unable to save'}, {onClose: () => setToastKey(null)}));\n          ///- end highlight -///\n        } else {\n          ///- begin highlight -///\n          queue.close(toastKey);\n          ///- end highlight -///\n        }\n      }}>\n      {toastKey ? 'Hide' : 'Show'} Toast\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled DateField Components in React\nDESCRIPTION: Example showing how to create both controlled and uncontrolled DateField components using state management and the parseDate function from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <>\n      <MyDateField\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <MyDateField\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ListBox Sections with Static Items (TypeScript)\nDESCRIPTION: This example shows how to group `ListBoxItem` components into sections using the `ListBoxSection` component. Each section can optionally include a `Header` component for labeling. This structure helps organize longer lists.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBoxSection, Header} from 'react-aria-components';\n\n<ListBox aria-label=\"Sandwich contents\" selectionMode=\"multiple\">\n  <ListBoxSection>\n    <Header>Veggies</Header>\n    <ListBoxItem id=\"lettuce\">Lettuce</ListBoxItem>\n    <ListBoxItem id=\"tomato\">Tomato</ListBoxItem>\n    <ListBoxItem id=\"onion\">Onion</ListBoxItem>\n  </ListBoxSection>\n  <ListBoxSection>\n    <Header>Protein</Header>\n    <ListBoxItem id=\"ham\">Ham</ListBoxItem>\n    <ListBoxItem id=\"tuna\">Tuna</ListBoxItem>\n    <ListBoxItem id=\"tofu\">Tofu</ListBoxItem>\n  </ListBoxSection>\n  <ListBoxSection>\n    <Header>Condiments</Header>\n    <ListBoxItem id=\"mayo\">Mayonaise</ListBoxItem>\n    <ListBoxItem id=\"mustard\">Mustard</ListBoxItem>\n    <ListBoxItem id=\"ranch\">Ranch</ListBoxItem>\n  </ListBoxSection>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Displaying an Indeterminate React Spectrum Checkbox\nDESCRIPTION: Shows how to render a Checkbox in an indeterminate state using the `isIndeterminate` prop. This state visually overrides the selected/unselected appearance and persists until `isIndeterminate` is set to false.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/Checkbox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox isIndeterminate>Subscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Embedding a Custom ListBox Wrapper in a ComboBox Structure (JSX)\nDESCRIPTION: This code demonstrates how to embed a custom MyListBox inside a ComboBox structure using react-aria-components. The snippet shows import statements for required composite UI components and the custom MyListBox. The ComboBox contains a Label, Input, Button, Popover, and the custom MyListBox hosting Item elements. All components interoperate due to the shared context and hooks mechanism. Inputs are component props/children, and the output is a fully composed ComboBox with a custom list box.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Button, ComboBox, Input, Item, Label, Popover} from 'react-aria-components';\\nimport {MyListBox} from './MyListBox';\\n\\n<ComboBox>\\n  <Label>Favorite Animal</Label>\\n  <div>\\n    <Input />\\n    <Button>▼</Button>\\n  </div>\\n  <Popover>\\n    <MyListBox>\\n      <Item>Cat</Item>\\n      <Item>Dog</Item>\\n    </MyListBox>\\n  </Popover>\\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for RangeCalendar Usage - React Spectrum - JSX\nDESCRIPTION: Demonstrates how to import the RangeCalendar component and related UI utilities (Flex and ActionButton) from the React Spectrum library. These imports are prerequisites for all further examples and usage of RangeCalendar within a React project. Ensure these libraries are installed in your project dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {RangeCalendar} from '@react-spectrum/calendar';\\nimport {Flex} from '@react-spectrum/layout';\\nimport {ActionButton} from '@adobe/react-spectrum';\n```\n\n----------------------------------------\n\nTITLE: Building a Stateless Button Component with useButton Hook (TSX)\nDESCRIPTION: Illustrates creating a simple Button component using the `useButton` hook from `@react-aria/button`. It shows how to create a ref using `React.useRef`, call the hook with component props and the ref, and spread the returned `buttonProps` onto the native button element to apply accessibility attributes and event handlers. Basic inline styling demonstrates using the `isPressed` state returned by the hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/hooks.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  /*- begin highlight -*/\n  let ref = React.useRef(null);\n  let {buttonProps, isPressed} = useButton(props, ref);\n  /*- end highlight -*/\n\n  return (\n    <button\n      /*- begin highlight -*/\n      ref={ref}\n      {...buttonProps}\n      /*- end highlight -*/\n      style={{\n        background: isPressed ? '#444' : '#666',\n        color: 'white',\n        padding: '6px 12px',\n        borderRadius: 4,\n        border: 'none'\n      }}>\n      {props.children}\n    </button>\n  );\n}\n\n<Button onPress={() => alert('Button pressed!')}>\n  Press me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Close Button with React Aria OverlayTriggerStateContext (TSX)\nDESCRIPTION: Shows how to build a `CloseButton` component that interacts with the state of a `DialogTrigger`. It accesses the `OverlayTriggerState` via `React.useContext(OverlayTriggerStateContext)` and calls the `state.close()` method when the button is pressed. The example also demonstrates placing this custom button within a `Dialog` managed by a `DialogTrigger`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Dialog.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {OverlayTriggerStateContext} from 'react-aria-components';\n\nfunction CloseButton() {\n  /*- begin highlight -*/\n  let state = React.useContext(OverlayTriggerStateContext)!;\n  /*- end highlight -*/\n  return <Button onPress={() => state.close()}>Close</Button>;\n}\n\n<DialogTrigger>\n  <Button>About</Button>\n  <Modal isDismissable>\n    <Dialog>\n      <Heading slot=\"title\">About</Heading>\n      <p>Copyright © 2023 Adobe. All rights reserved.</p>\n      {/*- begin highlight -*/}\n      <CloseButton />\n      {/*- end highlight -*/}\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic SearchField Component with React Aria\nDESCRIPTION: This example demonstrates a basic implementation of a SearchField component using React Aria hooks. It includes label and input elements with proper ARIA attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/searchfield/docs/useSearchField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction SearchField(props) {\n  let {label} = props;\n  let state = useSearchFieldState(props);\n  let ref = React.useRef(null);\n  let {labelProps, inputProps} = useSearchField(props, state, ref);\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', width: 200}}>\n      <label {...labelProps}>{label}</label>\n      <input {...inputProps} ref={ref} />\n    </div>\n  );\n}\n\n<SearchField\n  label=\"Search\"\n  onSubmit={text => alert(text)} />\n```\n\n----------------------------------------\n\nTITLE: Integrating React Aria Forms with Remix Actions (TSX)\nDESCRIPTION: Example of integrating React Aria forms within a Remix application. The client-side component (`SignupForm`) uses Remix hooks `useSubmit` to handle form submission and `useActionData` to retrieve validation errors returned by the server-side `action` function. The fetched errors are passed to the `Form` component's `validationErrors` prop. The accompanying `action` function demonstrates handling the request and returning errors on the server.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/signup.tsx\nimport type {ActionFunctionArgs} from '@remix-run/node';\nimport {useActionData, useSubmit} from '@remix-run/react';\nimport {Form, TextField, Label, Input, FieldError, Button} from 'react-aria-components';\n\nexport default function SignupForm() {\n  let submit = useSubmit();\n  let onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    submit(e.currentTarget);\n  };\n\n  /*- begin highlight -*/\n  let actionData = useActionData<typeof action>();\n  /*- end highlight -*/\n\n  return (\n    <Form\n      method=\"post\"\n      /*- begin highlight -*/\n      validationErrors={actionData?.errors}\n      /*- end highlight -*/\n      onSubmit={onSubmit}>\n      <TextField name=\"username\" isRequired>\n        <Label>Username</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <TextField name=\"password\" type=\"password\" isRequired>\n        <Label>Password</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n\nexport async function action({request}: ActionFunctionArgs) {\n  try {\n    // Validate data and perform action...\n  } catch (err) {\n    return {\n      errors: {\n        /*- begin highlight -*/\n        username: 'Sorry, this username is taken.'\n        /*- end highlight -*/\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Section-Level Selection in React Spectrum Menu\nDESCRIPTION: Shows how to implement independent selection states for each section in a React Spectrum Menu. It demonstrates the use of selectionMode and state management at the section level.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [style, setStyle] = React.useState<Selection>(new Set(['bold']));\n  let [align, setAlign] = React.useState<Selection>(new Set(['left']));\n  return (\n    <MyMenuButton label=\"Edit\">\n      <MenuSection>\n        <Header>Actions</Header>\n        <MenuItem>Cut</MenuItem>\n        <MenuItem>Copy</MenuItem>\n        <MenuItem>Paste</MenuItem>\n      </MenuSection>\n      <MenuSection selectionMode=\"multiple\" selectedKeys={style} onSelectionChange={setStyle}>\n        <Header>Text style</Header>\n        <MenuItem id=\"bold\">Bold</MenuItem>\n        <MenuItem id=\"italic\">Italic</MenuItem>\n        <MenuItem id=\"underline\">Underline</MenuItem>\n      </MenuSection>\n      <MenuSection selectionMode=\"single\" selectedKeys={align} onSelectionChange={setAlign}>\n        <Header>Text alignment</Header>\n        <MenuItem id=\"left\">Left</MenuItem>\n        <MenuItem id=\"center\">Center</MenuItem>\n        <MenuItem id=\"right\">Right</MenuItem>\n      </MenuSection>\n    </MyMenuButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Duration Strings\nDESCRIPTION: Shows how to use the parseDuration function to convert ISO 8601 duration strings into DateTimeDuration objects, including negative durations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nparseDuration('P3Y6M6W4D');\n// => {years: 3, months: 6, weeks: 6, days: 4}\n\nparseDuration('-P3Y6M6W4D');\n// => {years: -3, months: -6, weeks: -6, days: -4}\n```\n\n----------------------------------------\n\nTITLE: Draggable Component Implementation for DropZone Demo\nDESCRIPTION: A simple draggable component implementation using the useDrag hook for demonstrating DropZone functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDrag} from '@react-aria/dnd';\n\nfunction Draggable() {\n  let {dragProps, isDragging} = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world',\n        'my-app-custom-type': JSON.stringify({message: 'hello world'})\n      }];\n    }\n  });\n\n  return (\n    <div {...dragProps} role=\"button\" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n      Drag me\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Selected Menu Items with CSS\nDESCRIPTION: CSS code for styling selected menu items in single and multiple selection modes. It adds visual indicators for selected items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem {\n  &[data-selection-mode] {\n    padding-left: 24px;\n\n    &::before {\n      position: absolute;\n      left: 4px;\n      font-weight: 600;\n    }\n\n    &[data-selection-mode=multiple][data-selected]::before {\n      content: '✓';\n      content: '✓' / '';\n      alt: ' ';\n      position: absolute;\n      left: 4px;\n      font-weight: 600;\n    }\n\n    &[data-selection-mode=single][data-selected]::before {\n      content: '●';\n      content: '●' / '';\n      transform: scale(0.7)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quiet SearchAutocomplete in React Spectrum\nDESCRIPTION: This example shows how to create a SearchAutocomplete with the 'quiet' visual styling option, which displays the component with a more minimal appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Favorite Animal\" isQuiet>\n  <Item>Red Panda</Item>\n  <Item>Cat</Item>\n  <Item>Dog</Item>\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Disclosure Expansion in TSX\nDESCRIPTION: This TSX example illustrates how to manage the expansion state of a Disclosure component programmatically using the `isExpanded` prop and the `onExpandedChange` event handler. React's `useState` hook is used to maintain and update the expansion state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Disclosure.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction ControlledExpansion() {\n  let [isExpanded, setIsExpanded] = React.useState<boolean>(false);\n\n  return (\n    <>\n      <Disclosure isExpanded={isExpanded} onExpandedChange={setIsExpanded}>\n        <DisclosureTitle>System Requirements</DisclosureTitle>\n        <DisclosurePanel>\n          Details about system requirements here.\n        </DisclosurePanel>\n      </Disclosure>\n      <div style={{marginTop: '20px'}}>{isExpanded ? 'The disclosure is expanded' : 'The disclosure is collapsed'}</div>\n    </>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Linking TreeView Items with href in React Spectrum (TSX)\nDESCRIPTION: This snippet demonstrates adding hyperlinks to tree items using the href property in the TreeViewItem component. The tree is built using TreeView and nested TreeViewItem and TreeViewItemContent elements. Dependencies include TreeView, TreeViewItem, TreeViewItemContent, Text, Folder, GlobeOutline. Input is a hierarchy of tree nodes with hrefs; output is navigable items that behave as described for selection and action modes. Best used when some tree elements need to link to external destinations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<TreeView aria-label=\"Example tree with links\" defaultExpandedKeys={new Set(['bookmarks'])} height=\"size-2000\" maxWidth=\"size-6000\">\n  <TreeViewItem id=\"bookmarks\" textValue=\"Bookmarks\">\n    <TreeViewItemContent>\n      <Text>Bookmarks</Text>\n      <Folder />\n    </TreeViewItemContent>\n    <TreeViewItem href=\"https://adobe.com/\" target=\"_blank\" id=\"adobe\" textValue=\"Adobe\">\n      <TreeViewItemContent>\n        <Text>Adobe</Text>\n        <GlobeOutline />\n      </TreeViewItemContent>\n    </TreeViewItem>\n    <TreeViewItem href=\"https://google.com/\" target=\"_blank\" id=\"google\" textValue=\"Google\">\n      <TreeViewItemContent>\n        <Text>Google</Text>\n        <GlobeOutline />\n      </TreeViewItemContent>\n    </TreeViewItem>\n    <TreeViewItem href=\"https://nytimes.com/\" target=\"_blank\" id=\"nytimes\" textValue=\"New York Times\">\n      <TreeViewItemContent>\n        <Text>New York Times</Text>\n        <GlobeOutline />\n      </TreeViewItemContent>\n    </TreeViewItem>\n  </TreeViewItem>\n</TreeView>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-directional Drag and Drop between React Spectrum TableViews in TypeScript\nDESCRIPTION: Defines two components: `BidirectionalDnDTableView` configures drag-and-drop hooks (`useDragAndDrop`) for moving items between tables using a custom type (`custom-app-type-bidirectional`), handling insertion (`onInsert`), reordering (`onReorder`), root drops (`onRootDrop`), and removal on external move (`onDragEnd`). `DragBetweenTablesExample` sets up two data lists (`useListData`) and renders two instances of `BidirectionalDnDTableView` side-by-side using `Flex`, enabling drag-and-drop interactions between them. Dependencies include `react-spectrum` components (`TableView`, `TableHeader`, `TableBody`, `Column`, `Row`, `Cell`, `Flex`) and hooks (`useDragAndDrop`, `useListData`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nfunction BidirectionalDnDTableView(props: DndTableViewProps) {\n  let {list, columns} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-bidirectional'],\n    // Only allow move operations\n    getAllowedDropOperations: () => ['move'],\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        // Setup the drag types and associated info for each dragged item.\n        return {\n          'custom-app-type-bidirectional': JSON.stringify(item),\n          'text/plain': item.name\n        };\n      });\n    },\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async (item) => JSON.parse(await (item as TextDropItem).getText('custom-app-type-bidirectional')))\n      );\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onReorder: async (e) => {\n      let {\n        keys,\n        target\n      } = e;\n\n      if (target.dropPosition === 'before') {\n        list.moveBefore(target.key, [...keys]);\n      } else if (target.dropPosition === 'after') {\n        list.moveAfter(target.key, [...keys]);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n      let processedItems = await Promise.all(\n        items.map(async item => JSON.parse(await (item as TextDropItem).getText('custom-app-type-bidirectional')))\n      );\n      list.append(...processedItems);\n    },\n    /*- begin highlight -*/\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys,\n        isInternal\n      } = e;\n      // Only remove the dragged items if they aren't dropped inside the source list\n      if (dropOperation === 'move' && !isInternal) {\n        list.remove(...keys);\n      }\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <TableView\n      aria-label={props['aria-label']}\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragBetweenTablesExample() {\n  let columns = [\n    {name: 'Name', id: 'name'},\n    {name: 'Type', id: 'type'},\n    {name: 'Date Modified', id: 'date'}\n  ];\n\n  let list1 = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/7/2020'},\n      {id: '2', type: 'file', name: 'Adobe XD', date: '4/7/2021'},\n      {id: '3', type: 'folder', name: 'Documents', date: '4/9/2021'},\n      {id: '4', type: 'file', name: 'Adobe InDesign', date: '11/20/2010'},\n      {id: '5', type: 'folder', name: 'Utilities', date: '9/18/2016'},\n      {id: '6', type: 'file', name: 'Adobe AfterEffects', date: '1/18/2016'}\n    ]\n  });\n\n  let list2 = useListData({\n    initialItems: [\n      {id: '7', type: 'folder', name: 'Pictures', date: '6/7/2020'},\n      {id: '8', type: 'file', name: 'Adobe Fresco', date: '4/2/2020'},\n      {id: '9', type: 'folder', name: 'Apps', date: '2/3/2020'},\n      {id: '10', type: 'file', name: 'Adobe Illustrator', date: '6/5/2020'},\n      {id: '11', type: 'file', name: 'Adobe Lightroom', date: '3/7/2020'},\n      {id: '12', type: 'file', name: 'Adobe Dreamweaver', date: '3/9/2020'}\n    ]\n  });\n\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <BidirectionalDnDTableView list={list1} columns={columns} aria-label=\"First TableView in drag between table example\" />\n      <BidirectionalDnDTableView list={list2} columns={columns} aria-label=\"Second TableView in drag between table example\" />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Button Group with Single Selection Mode\nDESCRIPTION: Example of a toggle button group in single selection mode with a default selected key. This is the default selection mode and allows only one button to be selected at a time.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButtonGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup defaultSelectedKeys={['list']}>\n  <ToggleButton id=\"grid\">Grid view</ToggleButton>\n  <ToggleButton id=\"list\">List view</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery view</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Toggle Button Group with CSS\nDESCRIPTION: CSS styles for the toggle button group components. Provides styling for the toggle group container, buttons in various states including pressed, selected, and disabled states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.toggle-group {\n  display: flex;\n  gap: 4px;\n\n  &[aria-orientation=vertical] {\n    flex-direction: column;\n    width: fit-content;\n  }\n}\n\n.toggle-button {\n  background: lightgray;\n  color: black;\n  padding: 10px;\n  font-size: 16px;\n  user-select: none;\n  border: none;\n\n  &[data-pressed=true] {\n    background: gray;\n  }\n\n  &[data-selected=true] {\n    background: green;\n    color: white;\n\n    &[data-pressed=true] {\n      background: darkgreen;\n    }\n  }\n\n  &:disabled {\n    opacity: 0.5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs Overflow Truncation and Menu Behavior - React Spectrum - TypeScript\nDESCRIPTION: This snippet shows Breadcrumbs automatically truncating and collapsing intermediate items into a menu when the number of items exceeds available space. The component features six items for overflow demonstration. No special configuration needed beyond setting multiple Item children. Output is a breadcrumbs bar that shows a limited number of items and an overflow menu depending on viewport size.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Breadcrumbs>\n  <Item key=\"shared\">My Shared Documents</Item>\n  <Item key=\"catalogue\">North America Spring Catalogue</Item>\n  <Item key=\"march 2020\">March 2020</Item>\n  <Item key=\"assets\">Downloaded Screenshots and Assets (approval required)</Item>\n  <Item key=\"streetwear\">Streetwear</Item>\n  <Item key=\"jackets\">Jackets</Item>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ColorSlider Component\nDESCRIPTION: Demonstrates how to create a reusable wrapper component for ColorSlider that includes all necessary subcomponents and provides a customized interface with added features like a checkerboard pattern for transparency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSliderProps} from 'react-aria-components';\n\ninterface MyColorSliderProps extends ColorSliderProps {\n  label?: string\n}\n\nexport function MyColorSlider({label, ...props}: MyColorSliderProps) {\n  return (\n    <ColorSlider {...props}>\n      <Label>{label}</Label>\n      <SliderOutput />\n      <SliderTrack \n        style={({defaultStyle}) => ({\n          background: `${defaultStyle.background},\n            repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`\n        })}>\n        <ColorThumb />\n      </SliderTrack>\n    </ColorSlider>\n  );\n}\n\n<MyColorSlider label=\"Red Opacity\" defaultValue=\"#f00\" channel=\"alpha\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Provider Usage with React Spectrum Button\nDESCRIPTION: This example demonstrates the basic usage of the Provider component, wrapping a Button component and applying a theme.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/provider/docs/Provider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider} from '@react-spectrum/provider';\nimport {theme} from '@react-spectrum/theme-default';\nimport {Button} from '@react-spectrum/button';\n\nfunction App() {\n  return (\n    <Provider theme={theme}>\n      <Button variant=\"accent\">\n        Hello React Spectrum!\n      </Button>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Multiple Selection in React Spectrum ListBox (TSX)\nDESCRIPTION: This snippet demonstrates how to manage multiple selected items in a static `ListBox` component using controlled state. It utilizes the `useState` hook to maintain a `Set` of selected item IDs. The `selectedKeys` prop binds the state to the component, and the `onSelectionChange` prop updates the state when the user changes the selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/selection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nlet [selectedKeys, setSelectedKeys] = useState(new Set());\n\n<ListBox selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>\n  <ListBoxItem id=\"one\">One</ListBoxItem>\n  <ListBoxItem id=\"two\">Two</ListBoxItem>\n  <ListBoxItem id=\"three\">Three</ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Using Vite to Exclude Client Locale Strings (TypeScript)\nDESCRIPTION: Explains how to set up the '@react-aria/optimize-locales-plugin' for Remix-based apps using Vite. The plugin is configured with no locales for the client bundle to optimize bundle size. Requires modification of 'vite.config.ts' and installation of necessary dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// vite.config.ts\nimport { unstable_vitePlugin as remix } from '@remix-run/dev';\nimport { defineConfig } from 'vite';\n/*- begin highlight -*/\nimport localesPlugin from '@react-aria/optimize-locales-plugin';\n/*- end highlight -*/\n\nexport default defineConfig({\n  plugins: [\n    remix(),\n    // Don't include any locale strings in the client JS bundle.\n    /*- begin highlight -*/\n    {...localesPlugin.vite({locales: []}), enforce: 'pre'}\n    /*- end highlight -*/\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Styles to TreeItem with Function Prop (JSX)\nDESCRIPTION: Shows how to use a function as the value for the `className` prop on `TreeItem`. This allows applying conditional classes based on the item's state (e.g., `isSelected`), useful with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<TreeItem className={({ isSelected }) => isSelected ? 'bg-blue-400' : 'bg-gray-100'} />\n```\n```\n\n----------------------------------------\n\nTITLE: Basic SearchField Example in React Aria Components (TSX)\nDESCRIPTION: Demonstrates the basic structure of a `SearchField` component using imported `Label`, `Input`, and `Button` from `react-aria-components`. This shows the fundamental composition of the search field UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SearchField, Label, Input, Button} from 'react-aria-components';\n\n<SearchField>\n  <Label>Search</Label>\n  <Input />\n  <Button>✕</Button>\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: Styling Empty State in ListBox with CSS\nDESCRIPTION: CSS for styling the empty state of a ListBox component, centering the content and applying italic styling when the list has the data-empty attribute.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox {\n  &[data-empty] {\n    align-items: center;\n    justify-content: center;\n    font-style: italic;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Headers for Accessibility in React Spectrum TableView\nDESCRIPTION: This example demonstrates how to implement accessibility features in TableView by applying the isRowHeader prop to specific columns, ensuring assistive technology announces the full name when navigating rows.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<TableView aria-label=\"Example table with static contents\">\n  <TableHeader>\n    <Column isRowHeader>First Name</Column>\n    <Column isRowHeader>Last Name</Column>\n    <Column align=\"end\">Age</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>John</Cell>\n      <Cell>Doe</Cell>\n      <Cell>45</Cell>\n    </Row>\n    <Row>\n      <Cell>Jane</Cell>\n      <Cell>Doe</Cell>\n      <Cell>37</Cell>\n    </Row>\n    <Row>\n      <Cell>Joe</Cell>\n      <Cell>Schmoe</Cell>\n      <Cell>67</Cell>\n    </Row>\n  </TableBody>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in Forms Using Remix and React Spectrum - TypeScript/TSX\nDESCRIPTION: This code demonstrates form submission and error handling in a Remix application using React Spectrum components. It features useActionData to receive errors from server routes and injects them into the validationErrors prop of the Form. Dependencies include @remix-run packages and @adobe/react-spectrum, and submission is performed by either browser post or programmatically with useSubmit. The action function returns errors as an object mapping field names to strings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n// app/routes/signup.tsx\nimport type {ActionFunctionArgs} from '@remix-run/node';\nimport {useActionData, useSubmit} from '@remix-run/react';\nimport {Form, TextField, Button} from '@adobe/react-spectrum';\n\nexport default function SignupForm() {\n  let submit = useSubmit();\n  let onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    submit(e.currentTarget);\n  };\n\n  /*- begin highlight -*/\n  let actionData = useActionData<typeof action>();\n  /*- end highlight -*/\n\n  return (\n    <Form\n      method=\"post\"\n      /*- begin highlight -*/\n      validationErrors={actionData?.errors}\n      /*- end highlight -*/\n      onSubmit={onSubmit}>\n      <TextField label=\"Username\" name=\"username\" isRequired />\n      <TextField label=\"Password\" name=\"password\" type=\"password\" isRequired />\n      <Button type=\"submit\" variant=\"cta\">Submit</Button>\n    </Form>\n  );\n}\n\nexport async function action({request}: ActionFunctionArgs) {\n  try {\n    // Validate data and perform action...\n  } catch (err) {\n    return {\n      errors: {\n        /*- begin highlight -*/\n        username: 'Sorry, this username is taken.'\n        /*- end highlight -*/\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling a Required ComboBox with Text Indicator in TSX\nDESCRIPTION: Illustrates labeling a required ComboBox using the `isRequired` prop and `necessityIndicator=\"label\"`. This appends a localized \"(required)\" text string to the label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ntsx example\n<ComboBox label=\"Favorite Animal\" isRequired necessityIndicator=\"label\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Time Zone Support in React Spectrum\nDESCRIPTION: Example showing DatePicker with a time zone-aware ZonedDateTime value using parseZonedDateTime from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<DatePicker\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Styling the ToggleButton Component with Custom CSS (CSS)\nDESCRIPTION: This CSS snippet illustrates custom styling for the .react-aria-ToggleButton selector and its various interactive states using CSS variables. It covers pressed, selected, and focus-visible states via data attributes, allowing for detailed appearance customization and theme support. The CSS assumes that the root element has relevant theme variables and that the ToggleButton className matches the selector.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\\n\\n.react-aria-ToggleButton {\\n  color: var(--text-color);\\n  background: var(--button-background);\\n  border: 1px solid var(--border-color);\\n  forced-color-adjust: none;\\n  border-radius: 4px;\\n  appearance: none;\\n  vertical-align: middle;\\n  font-size: 1rem;\\n  text-align: center;\\n  margin: 0;\\n  outline: none;\\n  padding: 6px 10px;\\n\\n  &[data-pressed] {\\n    box-shadow: inset 0 1px 2px rgb(0 0 0 / 0.1);\\n    background: var(--button-background-pressed);\\n    border-color: var(--border-color-pressed);\\n  }\\n\\n  &[data-selected] {\\n    background: var(--highlight-background);\\n    border-color: var(--highlight-background);\\n    color: var(--highlight-foreground);\\n\\n    &[data-pressed] {\\n      background: var(--highlight-background-pressed);\\n      border-color: var(--highlight-background-pressed);\\n    }\\n  }\\n\\n  &[data-focus-visible] {\\n    outline: 2px solid var(--focus-ring-color);\\n    outline-offset: 2px;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Emphasized Switch State - React Spectrum - TypeScript/TSX\nDESCRIPTION: Uses the isEmphasized and defaultSelected props to display an emphasized, initially-selected Switch. Emphasized styling matches Spectrum guidelines for priority controls. defaultSelected makes the Switch initially 'on' until changed. No special dependencies are required beyond @react-spectrum/switch.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/docs/Switch.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch isEmphasized defaultSelected>Switch Label</Switch>\n```\n\n----------------------------------------\n\nTITLE: Controlling Tooltip Open State with isOpen and onOpenChange - React TypeScript\nDESCRIPTION: This example illustrates how to programmatically control the open state of a tooltip using isOpen and onOpenChange props passed to the TooltipButton component. It includes local state management with React.useState to track and synchronize the tooltip's visibility, allowing integration with other application logic or UIs. This is useful for scenarios where precise control over when a tooltip is displayed is needed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tooltip/docs/useTooltipTrigger.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <p>Tooltip is {isOpen ? 'showing' : 'not showing'}</p>\n      <TooltipButton tooltip=\"Notifications\" isOpen={isOpen} onOpenChange={setOpen}>📣</TooltipButton>\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Static Color Buttons on Colored Backgrounds in Spectrum (TypeScript)\nDESCRIPTION: This example creates several Spectrum Buttons using the 'staticColor' prop for custom foreground contrast on differently colored backgrounds. It demonstrates using nested View and Flex components to arrange white and black text/button colors on blue and yellow backgrounds. Dependencies include '@react-spectrum/button', '@react-spectrum/layout', and '@react-spectrum/view'. Useful for accessible color contrast in custom UI sections.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\\\"size-250\\\">\\n  <View backgroundColor=\\\"static-blue-700\\\" padding=\\\"size-500\\\">\\n    <Flex wrap gap=\\\"size-200\\\">\\n      <Button variant=\\\"primary\\\" staticColor=\\\"white\\\" style=\\\"fill\\\">Save</Button>\\n      <Button variant=\\\"primary\\\" staticColor=\\\"white\\\" style=\\\"outline\\\">Save</Button>\\n    </Flex>\\n  </View>\\n  <View backgroundColor=\\\"static-yellow-400\\\" padding=\\\"size-500\\\">\\n    <Flex wrap gap=\\\"size-200\\\">\\n      <Button variant=\\\"primary\\\" staticColor=\\\"black\\\" style=\\\"fill\\\">Save</Button>\\n      <Button variant=\\\"primary\\\" staticColor=\\\"black\\\" style=\\\"outline\\\">Save</Button>\\n    </Flex>\\n  </View>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Configuring DateField Labels and Requirement Indicators\nDESCRIPTION: This example demonstrates various ways to label a DateField component, including setting it as required and using different necessity indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-150\" wrap>\n  <DateField label=\"Birth date\" />\n  <DateField label=\"Birth date\" isRequired necessityIndicator=\"icon\" />\n  <DateField label=\"Birth date\" isRequired necessityIndicator=\"label\" />\n  <DateField label=\"Birth date\" necessityIndicator=\"label\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Styles Component in TSX\nDESCRIPTION: This TSX snippet imports a component named `Styles` from a local relative path './home/Styles' and renders it. This component likely contains or applies specific styles relevant to its context within the application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx snippet\nimport {Styles} from './home/Styles';\n<Styles />\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for React Aria Components Styling\nDESCRIPTION: Demonstrates how to include necessary Tailwind plugins for animations and React Aria Components compatibility in your CSS file when using Tailwind v4.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/notifications-popover.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Data and Components in JavaScript\nDESCRIPTION: This snippet imports documentation data (`docs`) generated from `@react-stately/calendar`, several documentation rendering components (`ClassAPI`, `HeaderInfo`, etc.) from `@react-spectrum/docs`, and package metadata (`packageData`) from `@react-stately/calendar/package.json`. These imports are used to dynamically build the documentation content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useCalendarState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/calendar';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/calendar/package.json';\n```\n\n----------------------------------------\n\nTITLE: Marking Dates Unavailable in RangeCalendar in TSX\nDESCRIPTION: Shows how to mark specific dates or ranges as unavailable in `RangeCalendar` using the `isDateUnavailable` prop. This prop accepts a callback function that checks if a date falls within predefined unavailable intervals (`disabledRanges`). Unavailable dates are focusable but not selectable. `minValue` is also used.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let isDateUnavailable = (date) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return <RangeCalendar aria-label=\"Trip dates\" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Multiple Menu Items via disabledKeys Prop - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates disabling multiple menu items by specifying their keys in the disabledKeys prop on the MenuButton, which is suitable for dynamic collections of items. The corresponding menu items (e.g., Save and Rename) become non-interactive. Dependencies are React and React Spectrum components. Input is an array of item objects; output is a menu rendering items selectively disabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Example() {\n  let items = [\n    {id: 1, name: 'New'},\n    {id: 2, name: 'Open'},\n    {id: 3, name: 'Close'},\n    {id: 4, name: 'Save'},\n    {id: 5, name: 'Duplicate'},\n    {id: 6, name: 'Rename'},\n    {id: 7, name: 'Move'}\n  ];\n\n  return (\n    <MyMenuButton\n      label=\"Actions\"\n      items={items}\n      /*- begin highlight -*/\n      disabledKeys={[4, 6]}\n      /*- end highlight -*/\n    >\n      {(item) => <MenuItem>{item.name}</MenuItem>}\n    </MyMenuButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZonedDateTime from Date Objects and Timestamps in React\nDESCRIPTION: Shows how to create ZonedDateTime objects from JavaScript Date objects or Unix epoch timestamps (milliseconds since 1970) using the fromDate and fromAbsolute functions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {fromDate, fromAbsolute} from '@internationalized/date';\n\nlet date = fromDate(new Date(), 'America/Los_Angeles');\nlet date = fromAbsolute(1688023843144, 'America/Los_Angeles');\n```\n\n----------------------------------------\n\nTITLE: Styling Popover for Specific Trigger Types\nDESCRIPTION: CSS examples showing how to style Popover components differently based on the trigger type, using the data-trigger attribute.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_37\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=MenuTrigger] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating useObjectRef in a Custom Button Component - TypeScript\nDESCRIPTION: This TypeScript/TSX snippet demonstrates how to use the useObjectRef utility from @react-aria/utils to normalize refs within a button component intended for React Aria integrations. It depends on react, @react-aria/utils, and @react-aria/button, and expects props compliant with AriaButtonProps. The main input is a ref from a parent component, and the output is a button element that ensures the ref is compatible with hooks like useButton. The example highlights usage of both object and callback refs, emphasizing correct ref passing and interop with the React Aria hook system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/utils/docs/useObjectRef.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useObjectRef} from '@react-aria/utils';\nimport {useButton} from '@react-aria/button';\nimport {AriaButtonProps} from '@react-types/button';\n\nlet Button = React.forwardRef((props: AriaButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n  let objRef = useObjectRef(ref);\n  let {buttonProps} = useButton(props, objRef);\n  let {children} = props;\n\n  return (\n    <button {...buttonProps} ref={objRef}>\n      {children}\n    </button>\n  );\n});\n\nfunction MyButton(props) {\n  let ref = React.useRef(null);\n  return <Button ref={ref} onPress={() => console.log(ref.current)}>{props.children}</Button>;\n}\n\n<MyButton>Test</MyButton>\n\n```\n\n----------------------------------------\n\nTITLE: Disabling All Child Selects with Context in a FieldGroup - React TSX\nDESCRIPTION: Implements FieldGroup, a compound component that uses SelectContext.Provider to pass isDisabled to all children, thereby disabling all nested Select components. Requires 'react-aria-components' and TypeScript. Inputs: title, children, isDisabled. Outputs: fieldset grouping with contextual disabling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SelectContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction FieldGroup({title, children, isDisabled}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      {/*- begin highlight -*/}\n      <SelectContext.Provider value={{isDisabled}}>\n      {/*- end highlight -*/}\n        {children}\n      </SelectContext.Provider>\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Filters\" isDisabled>\n  <MySelect label=\"Status\" defaultSelectedKey=\"published\">\n    <ListBoxItem id=\"draft\">Draft</ListBoxItem>\n    <ListBoxItem id=\"published\">Published</ListBoxItem>\n    <ListBoxItem id=\"deleted\">Deleted</ListBoxItem>\n  </MySelect>\n  <MySelect label=\"Author\" defaultSelectedKey=\"emma\">\n    <ListBoxItem id=\"john\">John</ListBoxItem>\n    <ListBoxItem id=\"emma\">Emma</ListBoxItem>\n    <ListBoxItem id=\"tim\">Tim</ListBoxItem>\n  </MySelect>\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Selection in TreeView (TSX)\nDESCRIPTION: This snippet configures a TreeView to allow only one item to be selected at a time by setting the selectionMode prop to 'single'. Dependencies include ExampleTree and React. Key parameter is selectionMode. Inputs are user selection actions; output is a TreeView component that restricts selection to a single item at any time. Use this for scenarios where multi-selection is not permitted in hierarchical lists.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleTree\n  aria-label=\"Example tree with single selection\"\n  defaultExpandedKeys={['projects', 'project-2']}\n  /*- begin highlight -*/\n  selectionMode=\"single\"\n  /*- end highlight -*/\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Accessible Name for ColorSwatch with Labeling Props - TypeScript/JSX\nDESCRIPTION: This snippet presents advanced accessibility features by providing both a specific color name via colorName and a contextual label via aria-label to ColorSwatch. The accessible name is synthesized from these props, e.g., 'Fire truck red, Background color'. It expects valid color and string props, leveraging React Spectrum's ARIA labeling. There are no outputs beyond an announced accessible label, supporting screen reader usage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatch color=\\\"#f00\\\" aria-label=\\\"Background color\\\" colorName=\\\"Fire truck red\\\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Breadcrumb Item Actions with onAction Callback - React Spectrum - TypeScript\nDESCRIPTION: This snippet shows a React component called Example that uses Breadcrumbs to render folder navigation, with item selection managed via the onAction callback. It demonstrates dynamic creation of Item elements from a folders array and tracks the most recently pressed item's id using useState. The dependencies are React and @react-spectrum/breadcrumbs. Key parameters are the folders array, Item keys, and the onAction handler for updating folderId state. Outputs the last selected folderId below the breadcrumbs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Example() {\n  let folders = [\n    {id: 1, label: 'Home'},\n    {id: 2, label: 'Trendy'},\n    {id: 3, label: 'March 2020 Assets'}\n  ];\n  let [folderId, setFolderId] = React.useState(null);\n  return (\n    <div>\n      <Breadcrumbs onAction={(a) => setFolderId(a)}>\n        {folders.map(f => <Item key={f.id}>{f.label}</Item>)}\n      </Breadcrumbs>\n      <p>You pressed folder ID: {folderId}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Non-Contiguous Ranges in React Spectrum RangeCalendar using TSX\nDESCRIPTION: Shows how to use the `allowsNonContiguousRanges` prop to enable selecting a date range even if it spans over unavailable dates (like weekends, identified using `isWeekend`). The `isDateUnavailable` prop defines which dates are unavailable based on the locale obtained via `useLocale`. Requires `@internationalized/date` and `@react-aria/i18n`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@react-aria/i18n';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return <MyRangeCalendar aria-label=\"Time off request\" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid DateSegments and FieldError in TimeField with CSS\nDESCRIPTION: Provides custom CSS for styling invalid state of DateSegment and FieldError components within the TimeField, supporting visual cues for validation errors. Styles use CSS variables (e.g., --invalid-color) for easy theme adjustments. This stylesheet targets elements when data-invalid is present and applies font and color styles to error messages and description slots.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateSegment {\\n  &[data-invalid] {\\n    color: var(--invalid-color);\\n\\n    &:focus {\\n      background: var(--highlight-background-invalid);\\n      color: var(--highlight-foreground);\\n    }\\n  }\\n}\\n\\n.react-aria-TimeField {\\n  .react-aria-FieldError {\\n    font-size: 12px;\\n    color: var(--invalid-color);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Simultaneous Expansions in DisclosureGroup (TypeScript)\nDESCRIPTION: Shows how to allow more than one DisclosureItem to be expanded simultaneously by setting allowsMultipleExpanded to true on DisclosureGroup. Requires React Spectrum's DisclosureGroup and DisclosureItem components. No manual state handling is required; all DisclosureItems can be independently expanded or collapsed, and their contents are specified via child components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/disclosure/docs/useDisclosure.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n<DisclosureGroup allowsMultipleExpanded>\\n  <DisclosureItem title=\"Personal Information\">\\n    Personal information form here.\\n  </DisclosureItem>\\n  <DisclosureItem title=\"Billing Address\">\\n    Billing address form here.\\n  </DisclosureItem>\\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating Links in ActionMenu with React Spectrum\nDESCRIPTION: Shows how to create menu items that function as links to external websites by using the href property on Item components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionMenu>\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ActionMenu>\n```\n\n----------------------------------------\n\nTITLE: Adding Links as List Items - React Spectrum - TypeScript/JSX\nDESCRIPTION: Renders a multi-selection list where each item is an external link using the href and target props. This allows users to open Adobe, Apple, Google, or Microsoft in a new browser tab by selecting the corresponding list item. Illustrates integration of navigation behaviors directly into list-based UI and assumes List and Item components from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n<List aria-label=\"Links\" selectionMode=\"multiple\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Programmatically Dismissing a Toast in React (TSX)\nDESCRIPTION: This example shows how to programmatically dismiss a specific toast. It uses `React.useState` to store the key returned by `state.add`. An `onClose` callback is provided to `state.add` to clear the stored key when the toast closes naturally or is dismissed. A button toggles between showing a new toast (and storing its key) and hiding the existing toast by calling `state.close(toastKey)` with the stored key.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [toastKey, setToastKey] = React.useState(null);\n\n  return (\n    <ToastProvider>\n      {state => (\n        <Button\n          onPress={() => {\n            if (!toastKey) {\n              ///- begin highlight -///\n              setToastKey(state.add('Unable to save', {onClose: () => setToastKey(null)}));\n              ///- end highlight -///\n            } else {\n              ///- begin highlight -///\n              state.close(toastKey);\n              ///- end highlight -///\n            }\n          }}>\n          {toastKey ? 'Hide' : 'Show'} Toast\n        </Button>\n      )}\n    </ToastProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar with Custom Locale and Calendar System in React Spectrum (TypeScript)\nDESCRIPTION: This example renders a Calendar in the Hindi language with the Indian calendar system by wrapping the Calendar in a Provider and setting the 'locale' prop appropriately. It demonstrates locale-based display transformation while maintaining internal date consistency (Gregorian on onChange). Uses React useState for date selection. Dependencies: @adobe/react-spectrum, @react-spectrum/calendar. Input: locale string, aria-label, value, onChange handler. Output: localized date calendar and display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <Calendar aria-label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Press Events in React Aria\nDESCRIPTION: Example demonstrating how to handle press events on a Button component, including tracking the pointer type used for the interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [pointerType, setPointerType] = React.useState('');\n\n  return (\n    <>\n      <Button\n        onPressStart={e => setPointerType(e.pointerType)}\n        onPressEnd={() => setPointerType('')}>\n        Press me\n      </Button>\n      <p>{pointerType ? `You are pressing the button with a ${pointerType}!` : 'Ready to be pressed.'}</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Time Zone Display Component using TimeFieldStateContext in React Spectrum (TSX)\nDESCRIPTION: This TSX snippet defines a `TimeZoneName` React component that accesses the parent `TimeField`'s state via `TimeFieldStateContext`. It uses `useDateFormatter` from `react-aria` to format and display the full time zone name if available in the state. The example demonstrates nesting this custom component within a `TimeField` to render the time zone alongside the time input. It depends on `react-aria-components`, `react-aria`, and `React`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TimeFieldStateContext} from 'react-aria-components';\nimport {useDateFormatter} from 'react-aria';\n\nfunction TimeZoneName() {\n  /*- begin highlight -*/\n  let state = React.useContext(TimeFieldStateContext)!;\n  /*- end highlight -*/\n  if ('timeZone' in state.value) {\n    let formatter = useDateFormatter({timeZoneName: 'long', timeZone: state.value.timeZone});\n    let timeZone = formatter\n      .formatToParts(state.value.toDate())\n      .find(p => p.type === 'timeZoneName').value;\n    return <small>{timeZone}</small>;\n  }\n  return null;\n}\n\n<TimeField value={parseAbsoluteToLocal('2021-04-07T18:45:22Z')}>\n  <Label>Time</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  {/*- begin highlight -*/}\n  <TimeZoneName />\n  {/*- end highlight -*/}\n</TimeField>\n```\n\n----------------------------------------\n\nTITLE: Rendering an ActionButton with Icon and Label - React Spectrum - TypeScript (TSX)\nDESCRIPTION: Demonstrates how to use ActionButton with both an icon and a label by importing Text from @react-spectrum/text and Edit from @spectrum-icons/workflow/Edit. The snippet wraps both an Edit icon and a Text label within ActionButton. Inputs: None. Outputs: An ActionButton with both icon and textual label. Dependencies: @react-spectrum/text, @spectrum-icons/workflow/Edit, ActionButton.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ActionButton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from '@react-spectrum/text';\\nimport Edit from '@spectrum-icons/workflow/Edit';\\n\\n<ActionButton>\\n  <Edit />\\n  <Text>Icon + Label</Text>\\n</ActionButton>\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled RadioGroup in React\nDESCRIPTION: Shows how to create both controlled and uncontrolled RadioGroup components using React state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState('yes');\n\n  return (\n    <Flex gap=\"size-300\">\n      <RadioGroup label=\"Are you a wizard? (uncontrolled)\" defaultValue=\"yes\">\n        <Radio value=\"yes\">Yes</Radio>\n        <Radio value=\"no\">No</Radio>\n      </RadioGroup>\n\n      <RadioGroup label=\"Are you a wizard? (controlled)\" value={selected} onChange={setSelected}>\n        <Radio value=\"yes\">Yes</Radio>\n        <Radio value=\"no\">No</Radio>\n      </RadioGroup>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filtering Logic for React Spectrum ComboBox (TSX)\nDESCRIPTION: Demonstrates custom filtering by controlling the `inputValue` and `items` props. It uses the `useFilter` hook from React Stately for a 'startsWith' filter function. The `filteredItems` are calculated using `React.useMemo` based on the `filterValue` state, which is updated via `onInputChange`. `allowsCustomValue` is also enabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let options = [\n    {id: 1, email: 'fake@email.com'},\n    {id: 2, email: 'anotherfake@email.com'},\n    {id: 3, email: 'bob@email.com'},\n    {id: 4, email: 'joe@email.com'},\n    {id: 5, email: 'yourEmail@email.com'},\n    {id: 6, email: 'valid@email.com'},\n    {id: 7, email: 'spam@email.com'},\n    {id: 8, email: 'newsletter@email.com'},\n    {id: 9, email: 'subscribe@email.com'}\n  ];\n\n  let {startsWith} = useFilter({sensitivity: 'base'});\n  let [filterValue, setFilterValue] = React.useState('');\n  let filteredItems = React.useMemo(\n    () => options.filter((item) => startsWith(item.email, filterValue)),\n    [options, filterValue]\n  );\n\n  return (\n    <ComboBox\n      label=\"To:\"\n      items={filteredItems}\n      inputValue={filterValue}\n      onInputChange={setFilterValue}\n      allowsCustomValue>\n      {(item) => <Item>{item.email}</Item>}\n    </ComboBox>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: ColorSwatch with Custom Labeling\nDESCRIPTION: Example showing how to add custom accessible labeling to a ColorSwatch using aria-label and colorName properties.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatch.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSwatch color=\"#f00\" aria-label=\"Background color\" colorName=\"Fire truck red\" />\n```\n\n----------------------------------------\n\nTITLE: Importing ColorField and Flex from React Spectrum in TypeScript/JSX\nDESCRIPTION: This snippet shows how to import the ColorField and Flex components from the @react-spectrum/color and @react-spectrum/layout packages respectively. It is required as a setup for any code that wants to utilize these components. No further input or output; just demonstrates the necessary import statements to begin using ColorField and Flex.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ColorField} from '@react-spectrum/color';\\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Quiet SearchField in React\nDESCRIPTION: This example shows how to create a quiet variant of the SearchField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField label=\"Search\" isQuiet />\n```\n\n----------------------------------------\n\nTITLE: Using the Header Component in a Container (TypeScript/TSX)\nDESCRIPTION: This code snippet shows how to render the Header component with a simple string child (\\\"Cute cats\\\") within a React application using TSX. It expects the parent container to provide layout and styling, consistent with Spectrum guidelines. The only required parameter is the children prop (content for the header). Input: Children (header content). Output: Rendered header element styled by the parent container. Works in both TypeScript and JavaScript environments if TSX/JSX support is enabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/view/docs/Header.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Header>Cute cats</Header>\n```\n\n----------------------------------------\n\nTITLE: Rendering Static TreeView Contents - React Spectrum - TSX\nDESCRIPTION: Defines a static TreeView component structure where the hierarchy, labels, and icons are hardcoded as nested TreeViewItem components. This example demonstrates basic, static tree navigation and visual customization using icon components. Required dependencies include React and all relevant React Spectrum packages. The TreeView expects ARIA labeling and proper hierarchical item definition according to accessibility best practices.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TreeView aria-label=\\\"Example tree with static contents\\\" defaultExpandedKeys={['documents', 'photos']} height=\\\"size-4600\\\" maxWidth=\\\"size-6000\\\">\\n  <TreeViewItem id=\\\"documents\\\" textValue=\\\"Documents\\\">\\n    <TreeViewItemContent>\\n      <Text>Documents</Text>\\n      <Folder />\\n    </TreeViewItemContent>\\n    <TreeViewItem id=\\\"project-a\\\" textValue=\\\"Project A\\\">\\n      <TreeViewItemContent>\\n        <Text>Project A</Text>\\n        <Folder />\\n      </TreeViewItemContent>\\n      <TreeViewItem id=\\\"weekly-report\\\" textValue=\\\"Weekly-Report\\\">\\n        <TreeViewItemContent>\\n          <Text>Weekly Report</Text>\\n          <FileTxt />\\n        </TreeViewItemContent>\\n      </TreeViewItem>\\n    </TreeViewItem>\\n    <TreeViewItem id=\\\"document-1\\\" textValue=\\\"Document 1\\\">\\n      <TreeViewItemContent>\\n        <Text>Document 1</Text>\\n        <FileTxt />\\n      </TreeViewItemContent>\\n    </TreeViewItem>\\n    <TreeViewItem id=\\\"document-2\\\" textValue=\\\"Document 2\\\">\\n      <TreeViewItemContent>\\n        <Text>Document 2</Text>\\n        <FileTxt />\\n      </TreeViewItemContent>\\n    </TreeViewItem>\\n  </TreeViewItem>\\n  <TreeViewItem id=\\\"photos\\\" textValue=\\\"Photos\\\">\\n    <TreeViewItemContent>\\n      <Text>Photos</Text>\\n      <Folder />\\n    </TreeViewItemContent>\\n    <TreeViewItem id=\\\"image-1\\\" textValue=\\\"Image 1\\\">\\n      <TreeViewItemContent>\\n        <Text>Image 1</Text>\\n        <Image />\\n      </TreeViewItemContent>\\n    </TreeViewItem>\\n    <TreeViewItem id=\\\"image-2\\\" textValue=\\\"Image 2\\\">\\n      <TreeViewItemContent>\\n        <Text>Image 2</Text>\\n        <Image />\\n      </TreeViewItemContent>\\n    </TreeViewItem>\\n    <TreeViewItem id=\\\"image-3\\\" textValue=\\\"Image 3\\\">\\n      <TreeViewItemContent>\\n        <Text>Image 3</Text>\\n        <Image />\\n      </TreeViewItemContent>\\n    </TreeViewItem>\\n  </TreeViewItem>\\n</TreeView>\n```\n\n----------------------------------------\n\nTITLE: Toggle Button Group with Multiple Selection Mode\nDESCRIPTION: Example of a toggle button group with multiple selection mode, allowing users to select multiple buttons simultaneously. The selectionMode prop is set to 'multiple'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButtonGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup selectionMode=\"multiple\">\n  <ToggleButton id=\"bold\">Bold</ToggleButton>\n  <ToggleButton id=\"italic\">Italic</ToggleButton>\n  <ToggleButton id=\"underline\">Underline</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling Insert Drops Between ListBox Items (TSX)\nDESCRIPTION: Demonstrates using the `onInsert` event handler within the `useDragAndDrop` hook to handle dropping items between existing ListBox items. The example processes dropped text items, creates new item objects, and inserts them either before or after the target item using `list.insertBefore` or `list.insertAfter` based on `e.target.dropPosition`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Illustrator'},\n      {id: 2, name: 'Premiere'},\n      {id: 3, name: 'Acrobat'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    ///- begin highlight -///\n    async onInsert(e) {\n      let items = await Promise.all(e.items.map(async item => {\n        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;\n        return {id: Math.random(), name};\n      }));\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items);\n      }\n    }\n    ///- end highlight -///\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableListBox />\n      <ListBox aria-label=\"Droppable list\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </ListBox>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ModalTrigger with a Dialog Component in React\nDESCRIPTION: This snippet demonstrates how to use the previously defined `ModalTrigger` component to display a `Dialog` component. It passes a render function as children to `ModalTrigger`, which receives a `close` callback used by the 'Submit' button inside the dialog form.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/useModalOverlay.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Reuse the Dialog from your component library. See below for details.\nimport {Dialog} from 'your-component-library';\n\n<ModalTrigger label=\"Open Dialog\">\n  {close =>\n    <Dialog title=\"Enter your name\">\n      <form style={{display: 'flex', flexDirection: 'column'}}>\n        <label htmlFor=\"first-name\">First Name:</label>\n        <input id=\"first-name\" />\n        <label htmlFor=\"last-name\">Last Name:</label>\n        <input id=\"last-name\" />\n        <Button\n          onPress={close}\n          style={{marginTop: 10}}>\n          Submit\n        </Button>\n      </form>\n    </Dialog>\n  }\n</ModalTrigger>\n```\n\n----------------------------------------\n\nTITLE: Complete Color Picker Implementation\nDESCRIPTION: Example showing how to create a full color picker by combining ColorArea with ColorSlider.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSlider, Label, SliderOutput, SliderTrack} from 'react-aria-components';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n\n  return (\n    <div>\n      <MyColorArea\n        value={color}\n        onChange={setColor}\n        xChannel=\"saturation\"\n        yChannel=\"lightness\" />\n      <ColorSlider channel=\"hue\" value={color} onChange={setColor} style={{width: 192, marginTop: 8}}>\n        <Label />\n        <SliderOutput />\n        <SliderTrack>\n          <ColorThumb />\n        </SliderTrack>\n      </ColorSlider>\n      <p>Current value: {color.toString('hsl')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: AlertDialog with Event Handlers in React Spectrum\nDESCRIPTION: Example demonstrating how to handle button press events in an AlertDialog using onPrimaryAction, onSecondaryAction, and onCancel props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let onPrimaryAction = () => alert('Primary button pressed.');\n  let onSecondaryAction = () => alert('Secondary button pressed.');\n  let alertCancel = () => alert('Cancel button pressed.');\n\n  return (\n    <DialogTrigger>\n      <ActionButton>\n        Publish\n      </ActionButton>\n      <AlertDialog\n        variant=\"confirmation\"\n        title=\"Confirm Publish\"\n        primaryActionLabel=\"Publish\"\n        secondaryActionLabel=\"Save as draft\"\n        cancelLabel=\"Cancel\"\n        onCancel={alertCancel}\n        onPrimaryAction={onPrimaryAction}\n        onSecondaryAction={onSecondaryAction}>\n        Are you sure you want to publish this document?\n      </AlertDialog>\n    </DialogTrigger>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling TextField Value with React useState (TypeScript/React)\nDESCRIPTION: Demonstrates a React functional component controlling the TextField value with useState and onChange. Dependencies are React, TypeScript, a TextField component accepting onChange and value props. Key features: updates state with user input and mirrors it in a paragraph element. Inputs: user typing; outputs: mirrored UI state. Requires standard controlled component knowledge and event handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\\n  let [text, setText] = React.useState('');\\n\\n  return (\\n    <>\\n      <TextField label=\"Your text\" onChange={setText} />\\n      <p>Mirrored text: {text}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Dismissing Toast Example with Timeout (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to add a toast notification with a custom auto-dismiss timeout using the queue's add method. The Button, when pressed, invokes queue.add with a title and a timeout option (here, 5000ms). The code highlights the configuration of the timeout property and is intended for use within the established Toast context. The expected output is a toast that disappears automatically after 5 seconds unless interrupted by user focus or hover.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Button\n  /*- begin highlight -*/\n  onPress={() => queue.add({title: 'Toast is done!'}, {timeout: 5000})}\n  /*- end highlight -*/\n>\n  Show toast\n</Button>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Description to RadioGroup in React Spectrum (TSX)\nDESCRIPTION: Shows how to add descriptive help text to a `RadioGroup` using the `description` prop. This text provides additional context or instructions associated with the group's label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite pet\" description=\"Select your favorite pet.\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling of Radio Component with Functional className (JSX)\nDESCRIPTION: Shows how to use a function as the value for the `className` prop to dynamically apply CSS classes (e.g., from Tailwind) based on the component's state, such as `isPressed`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<Radio className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Overlay Appearance with react-aria-components in TSX\nDESCRIPTION: Demonstrates how to apply custom CSS classes (`my-overlay`, `my-modal`) to the `ModalOverlay` and `Modal` components for custom styling. This example sets up the structure for a modal styled as a side drawer, requiring corresponding CSS definitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ModalOverlay} from 'react-aria-components';\n\n<DialogTrigger>\n  <Button>Open modal</Button>\n  <ModalOverlay className=\"my-overlay\">\n    <Modal className=\"my-modal\">\n      <Dialog>\n        <Heading slot=\"title\">Notice</Heading>\n        <p>This is a modal with a custom modal overlay.</p>\n        <Button slot=\"close\">Close</Button>\n      </Dialog>\n    </Modal>\n  </ModalOverlay>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic RangeCalendar with React Aria Components in TSX\nDESCRIPTION: Demonstrates the basic structure for a `RangeCalendar` using components from `react-aria-components`. It includes header elements (previous/next buttons, heading) and a `CalendarGrid` with `CalendarCell` for rendering dates.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RangeCalendar, Heading, Button, CalendarGrid, CalendarCell} from 'react-aria-components';\n\n<RangeCalendar aria-label=\"Trip dates\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <CalendarGrid>\n    {date => <CalendarCell date={date} />}\n  </CalendarGrid>\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Basic ProgressBar Implementation in React Spectrum\nDESCRIPTION: Demonstrates a simple implementation of the ProgressBar component with a label and a value of 50%.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressBar label=\"Loading…\" value={50} />\n```\n\n----------------------------------------\n\nTITLE: ARIA Grid Role Structure Example\nDESCRIPTION: Example showing the core ARIA roles and relationships required for an accessible grid structure including grid, row, rowgroup, and cell roles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"grid\">\n  <div role=\"rowgroup\">\n    <!-- Header rows -->\n    <div role=\"row\">\n      <div role=\"columnheader\">Header Cell</div>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <!-- Body rows -->\n    <div role=\"row\">\n      <div role=\"gridcell\">Cell Content</div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Disabled ColorField Example React Spectrum TypeScript\nDESCRIPTION: Renders a ColorField that is disabled and initialized with a specific hex value. The control is non-interactive, ensuring users cannot change its value. Useful for displaying pre-set or read-only color information in forms.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorField label=\\\"Primary Color\\\" isDisabled defaultValue=\\\"#e73623\\\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Selectable Date in React Spectrum Calendar (TSX)\nDESCRIPTION: This TSX example demonstrates basic date validation in the React Spectrum Calendar (`MyCalendar`). It uses the `minValue` prop, setting it to the current date obtained via `today(getLocalTimeZone())` from the `@internationalized/date` library. This prevents the user from selecting any date before today. Depends on `@internationalized/date` and `MyCalendar`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {today} from '@internationalized/date';\n\n<MyCalendar aria-label=\"Appointment date\" minValue={today(getLocalTimeZone())} />\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Behavior in DateRangePicker\nDESCRIPTION: Example showing how to customize the pagination behavior when users navigate between months in a multi-month DateRangePicker calendar, setting it to advance one month at a time instead of by the number of visible months.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" maxVisibleMonths={3} pageBehavior=\"single\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Layout for Card Component with CSS Grid\nDESCRIPTION: Shows how to create a custom layout for the Card component using CSS Grid without modifying the React components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-slots.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  display: grid;\n  grid-template-columns: 14px auto 1fr 1fr 14px;\n  grid-template-rows: 5px auto auto auto auto 5px;\n  grid-template-areas:\n    \".       .          .        .         .\"\n    \".       avatar     title    title     .\"\n    \".       body       body     body      .\"\n    \"preview preview    preview  preview   preview\"\n    \".       footer     footer   footer    .\"\n    \".       .          .        .         .\";\n}\n\n.avatar {\n  grid-area: avatar;\n  align-self: center;\n  height: 48px;\n  width: 48px;\n}\n\n.title {\n  grid-area: title;\n  align-self: center;\n}\n\n.body {\n  grid-area: body;\n}\n\n.preview {\n  grid-area: preview;\n  height: 200px;\n}\n\n.footer {\n  grid-area: footer;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Dates Between Calendar Systems Using @internationalized/date - TypeScript/TSX\nDESCRIPTION: This snippet illustrates converting a date from the Hebrew calendar to the Gregorian calendar using @internationalized/date. It creates a new CalendarDate with a specified system, then uses the toCalendar function to convert. Dependencies are @internationalized/date and compatible calendar system classes. Inputs are the initial Hebrew date; outputs are the equivalent date in the Gregorian calendar. Note: CalendarDate class should be imported or available globally.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/date-and-time-pickers-for-all.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nimport {toCalendar, HebrewCalendar, GregorianCalendar} from '@internationalized/date';\\n\\nlet hebrewDate = new CalendarDate(new HebrewCalendar(), 5781, 1, 1);\\nlet gregorianDate = toCalendar(hebrewDate, new GregorianCalendar());\\ngregorianDate.toString();\\n// => '2020-09-19'\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial and Controlled Date Values in React Spectrum DatePicker (TypeScript)\nDESCRIPTION: Demonstrates the use of the React Spectrum DatePicker component with both uncontrolled (defaultValue) and controlled (value with onChange) states. Dependencies include React and the parseDate function from @internationalized/date. Parameters include label, defaultValue, value, and onChange. Both controlled and uncontrolled inputs are shown, with the initial values parsed from string. Inputs and outputs involve date objects managed via hooks and passed as props. React hooks are required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\\n\\nfunction Example() {\\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\\n\\n  return (\\n    <>\\n      <DatePicker\\n        label=\\\"Date (uncontrolled)\\\"\\n        defaultValue={parseDate('2020-02-03')} />\\n      <DatePicker\\n        label=\\\"Date (controlled)\\\"\\n        value={value}\\n        onChange={setValue} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a React Spectrum Calendar to Read-Only (TSX)\nDESCRIPTION: This example demonstrates how to make the Calendar component read-only using the `isReadOnly` boolean prop. Unlike `isDisabled`, a read-only calendar remains focusable, allowing users to navigate through dates, but prevents date selection. The `value` prop is set to the current date using `today` and `getLocalTimeZone` from `@internationalized/date`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar aria-label=\"Event date\" value={today(getLocalTimeZone())} isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Importing Calendar and Layout Components in React Spectrum (JSX)\nDESCRIPTION: This snippet demonstrates how to import the Calendar, Flex layout, and ActionButton components from React Spectrum packages into a JSX/TypeScript project. These imports are required to build the subsequent Calendar examples, providing the necessary UI primitives and layout utilities. Ensure all listed packages are installed and available in your project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Calendar} from '@react-spectrum/calendar';\nimport {Flex} from '@react-spectrum/layout';\nimport {ActionButton} from '@adobe/react-spectrum';\n```\n\n----------------------------------------\n\nTITLE: Using International Calendars with DateField\nDESCRIPTION: Example showing how to display a DateField using the Indian calendar system in Hindi language while maintaining Gregorian dates in the application logic.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState<DateValue | null>(null);\n  return (\n    /*- begin highlight -*/\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n    {/*- end highlight -*/}\n      <MyDateField label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Operations in React with TypeScript\nDESCRIPTION: This example shows how to implement specific drop operations in a React component. It demonstrates checking for PNG image files and setting the appropriate drop operation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrop.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DropTarget() {\n  let [file, setFile] = React.useState(null);\n  let ref = React.useRef(null);\n  let {dropProps, isDropTarget} = useDrop({\n    ref,\n    getDropOperation(types, allowedOperations) {\n      return types.has('image/png') ? 'copy' : 'cancel';\n    },\n    async onDrop(e) {\n      let item = e.items.find(item => item.kind === 'file' && item.type === 'image/png') as FileDropItem;\n      if (item) {\n        setFile(URL.createObjectURL(await item.getFile()));\n      }\n    }\n  });\n\n  return (\n    <div {...dropProps} role=\"button\" tabIndex={0} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`}>\n      {file ? <img src={file} style={{width: '100%', height: '100%', objectFit: 'contain'}} /> : 'Drop image here'}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Icon-Only ActionButton with Accessibility Support - React Spectrum - TypeScript (TSX)\nDESCRIPTION: Illustrates how to make an accessible ActionButton containing only an icon. It uses the aria-label prop to provide an alternative text label for screen readers. This is essential for accessibility compliance when no visible label is present. Input: None. Output: A visually icon-only button accessible to assistive technologies. Dependencies: ActionButton, Edit icon.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ActionButton.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionButton aria-label=\\\"Icon only\\\">\\n  <Edit />\\n</ActionButton>\n```\n\n----------------------------------------\n\nTITLE: Disabling Copy and Paste in React Spectrum\nDESCRIPTION: This example shows how to disable copy and paste functionality using the isDisabled option in the useClipboard hook. It demonstrates disabling for both copyable and pasteable components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useClipboard.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextDropItem} from '@react-aria/dnd';\nimport {useClipboard} from '@react-aria/dnd';\n\nfunction Copyable() {\n  let {clipboardProps} = useClipboard({\n    getItems() {\n      return [{\n        'text/plain': 'Hello world'\n      }];\n    },\n    isDisabled: true\n  });\n\n  return (\n    <div role=\"textbox\" tabIndex={0} {...clipboardProps}>\n      Hello world\n      <kbd>⌘C</kbd>\n    </div>\n  );\n}\n\nfunction Pasteable() {\n  let [pasted, setPasted] = React.useState(null);\n  let {clipboardProps} = useClipboard({\n    async onPaste(items) {\n      let pasted = await Promise.all(\n        items\n          .filter((item) =>\n            item.kind === 'text' && item.types.has('text/plain')\n          )\n          .map((item: TextDropItem) => item.getText('text/plain'))\n      );\n      setPasted(pasted.join('\\n'));\n    },\n    isDisabled: true\n  });\n\n  return (\n    <div role=\"textbox\" tabIndex={0} {...clipboardProps}>\n      {pasted || 'Paste here'}\n      <kbd>⌘V</kbd>\n    </div>\n  );\n}\n\n<Copyable />\n<Pasteable />\n```\n\n----------------------------------------\n\nTITLE: Toggling ActionBar Visual Emphasis in ListView (TypeScript, React Spectrum)\nDESCRIPTION: This snippet illustrates how the isEmphasized prop can alter the ActionBar appearance, useful for drawing user attention in different UI contexts. The example shows use of emphasis toggling by rendering two ActionBars, showcasing both default and emphasized styles. Inputs are the isEmphasized flag and selectedKeys, output is ActionBar display and triggered actions. Dependencies include React Spectrum UI components and icon libraries.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actionbar/docs/ActionBar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction Example({isEmphasized}: {isEmphasized?: boolean}) {\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['photoshop']));\n\n  return (\n    <ActionBarContainer height={300} width=\"size-5000\">\n      <ListView aria-label=\"ListView with action bar\" selectionMode=\"multiple\" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        /*- begin highlight -*/\n        isEmphasized={isEmphasized}\n        /*- end highlight -*/\n        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}\n        onAction={(key) => alert(`Performing ${key} action...`)}\n        onClearSelection={() => setSelectedKeys(new Set())}>\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"copy\">\n          <Copy />\n          <Text>Copy</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Flex direction=\"row\" gap=\"size-200\" wrap>\n  <Example />\n  <Example isEmphasized />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Form Validation with DatePicker Component\nDESCRIPTION: Example of integrating DatePicker with Form validation using the native validation behavior to display automatic error messages when the required field is empty.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  {/*- begin highlight -*/}\n  <DatePicker label=\"Appointment date\" name=\"date\" isRequired />\n  {/*- end highlight -*/}\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Basic ColorSwatchPicker Implementation in React Aria Components\nDESCRIPTION: A simple example of implementing a ColorSwatchPicker component with multiple color options represented as swatches.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatchPicker, ColorSwatchPickerItem, ColorSwatch} from 'react-aria-components';\n\n<ColorSwatchPicker>\n  <ColorSwatchPickerItem color=\"#A00\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#f80\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#080\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#08f\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#088\"><ColorSwatch /></ColorSwatchPickerItem>\n  <ColorSwatchPickerItem color=\"#008\"><ColorSwatch /></ColorSwatchPickerItem>\n</ColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Displaying Tooltip on Focus Only Using TooltipTrigger 'trigger' Prop in React (TypeScript/TSX)\nDESCRIPTION: Demonstrates how to configure a TooltipTrigger to display the tooltip only when its child receives focus (not on hover), using the 'trigger' prop with value 'focus'. Utilizes the MyTooltip wrapper for standardized tooltip rendering. Useful for keyboard accessibility scenarios. Assumes react-aria-components and the custom MyTooltip component are available.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger trigger=\\\"focus\\\">\\n  <Button>\\uD83D\\uDCBF</Button>\\n  <MyTooltip>Burn CD</MyTooltip>\\n</TooltipTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Custom Calendar Creation for Bundle Size Optimization in TypeScript\nDESCRIPTION: Provides an example of how to create a custom implementation of createCalendar to reduce bundle size by only including desired calendar systems.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Calendar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar, JapaneseCalendar} from '@internationalized/date';\n\nfunction createCalendar(identifier) {\n  switch (identifier) {\n    case 'gregory':\n      return new GregorianCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    default:\n      throw new Error(`Unsupported calendar ${identifier}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TimeField with Second Granularity in React Spectrum\nDESCRIPTION: Shows how to configure a TimeField with second-level granularity rather than the default minute granularity.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField\n  label=\"Event time\"\n  granularity=\"second\"\n  defaultValue={parseAbsoluteToLocal('2021-04-07T18:45:22Z')} />\n```\n\n----------------------------------------\n\nTITLE: SearchField with Custom Label Alignment in React\nDESCRIPTION: This example demonstrates how to customize the label position and alignment for a SearchField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField label=\"Search\" labelPosition=\"side\" labelAlign=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: Using useProvider Hook for Theme-Aware Components\nDESCRIPTION: This example shows how to use the useProvider hook to create a component that adapts to the current color scheme.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/provider/docs/Provider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport Light from '@spectrum-icons/workflow/Light';\nimport Moon from '@spectrum-icons/workflow/Moon';\nimport {useProvider} from '@react-spectrum/provider';\n\nfunction Example() {\n  let {colorScheme} = useProvider();\n\n  return colorScheme === 'dark'\n    ? <Moon aria-label=\"In dark theme\" />\n    : <Light aria-label=\"In light theme\" />\n}\n\n<Example />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Static Menu with Multiple Sections Using MenuButton (TypeScript)\nDESCRIPTION: Demonstrates how to render a static menu with multiple grouped sections by using Section and Item components within MenuButton. Relies on @react-stately/collections for the Section component. Input consists of a fixed hierarchy of menu sections and items, grouped by category (e.g., Styles and Align). Each Section receives a title and contains several Items. Outputs a menu UI with visually separated and labeled groups of actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Section} from '@react-stately/collections';\\n\\n<MenuButton label=\"Actions\" onAction={alert}>\\n  <Section title=\"Styles\">\\n    <Item key=\"bold\">Bold</Item>\\n    <Item key=\"underline\">Underline</Item>\\n  </Section>\\n  <Section title=\"Align\">\\n    <Item key=\"left\">Left</Item>\\n    <Item key=\"middle\">Middle</Item>\\n    <Item key=\"right\">Right</Item>\\n  </Section>\\n</MenuButton>\\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting Popover Offset from Trigger in React (TSX)\nDESCRIPTION: Illustrates the use of the `offset` prop to adjust the spacing between the Popover and its trigger element along the main axis defined by the `placement`. This example applies an additional 50px offset.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <Button>Offset</Button>\n  <MyPopover placement=\"top\" offset={50}>\n    Offset by an additional 50px.\n  </MyPopover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Validation for RadioGroup in React Spectrum (TSX)\nDESCRIPTION: Illustrates how to enforce selection and enable native browser validation using the `isRequired` and `validationBehavior=\"native\"` props on a `RadioGroup` within an HTML form. If no option is selected when the form is submitted, the browser's default validation UI will trigger.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<form>\n  {/*- begin highlight -*/}\n  <RadioGroup label=\"Favorite pet\" name=\"pet\" isRequired validationBehavior=\"native\">\n  {/*- end highlight -*/}\n    <Radio value=\"dogs\">Dog</Radio>\n    <Radio value=\"cats\">Cat</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n  <input type=\"submit\" style={{marginTop: 8}} />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Controlling Focused Date in React Spectrum Calendar (TSX)\nDESCRIPTION: This example illustrates how to control the initially focused date and manage focus changes in the Calendar component. It uses the `focusedValue` prop bound to a React state variable (`focusedDate`) initialized with a `CalendarDate` from `@internationalized/date`. The `onFocusChange` prop updates this state when the user navigates the calendar. A button demonstrates resetting the focused date programmatically by updating the state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\n\n  return (\n    <div style={{flexDirection: 'column', alignItems: 'start', gap: 20}}>\n      <button onClick={() => setFocusedDate(defaultDate)}>Reset focused date</button>\n      <Calendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Text Labels in ActionGroup Items (TSX)\nDESCRIPTION: Demonstrates hiding the text label within ActionGroup buttons using the `buttonLabelBehavior=\"hide\"` prop. The labels ('Edit', 'Copy', 'Delete') are visually hidden but remain accessible, typically shown via a tooltip on hover.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup buttonLabelBehavior=\"hide\">\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Cell with React Aria\nDESCRIPTION: This snippet demonstrates how to implement a table cell component using the useTableCell hook from React Aria. It handles keyboard navigation and provides visual focus indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTableCell} from '@react-aria/table';\n\nfunction TableCell({cell, state}) {\n  let ref = useRef<HTMLTableCellElement | null>(null);\n  let {gridCellProps} = useTableCell({node: cell}, state, ref);\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  return (\n    <td\n      {...mergeProps(gridCellProps, focusProps)}\n      style={{\n        padding: '5px 10px',\n        outline: 'none',\n        boxShadow: isFocusVisible ? 'inset 0 0 0 2px orange' : 'none'\n      }}\n      ref={ref}>\n      {cell.rendered}\n    </td>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Change in Picker (React/TypeScript)\nDESCRIPTION: This example demonstrates how to use the onSelectionChange handler to update the selection stored in React state for a static Picker component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction StaticExample() {\n  let [frequency, setFrequency] = React.useState(null);\n\n  return (\n    <>\n      <Picker label=\"Choose frequency\" onSelectionChange={selected => setFrequency(selected)}>\n        <Item key=\"Rarely\">Rarely</Item>\n        <Item key=\"Sometimes\">Sometimes</Item>\n        <Item key=\"Always\">Always</Item>\n      </Picker>\n      <p>You selected {frequency}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Drag Button in React Spectrum\nDESCRIPTION: This snippet shows how to implement a drag button for improved accessibility in drag and drop interactions. It uses the hasDragButton option in useDrag and combines it with useButton for proper button behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrag.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Draggable() {\n  let {dragProps, dragButtonProps, isDragging} = useDrag({\n    hasDragButton: true,\n    getItems() {\n      return [{\n        'text/plain': 'hello world'\n      }];\n    }\n  });\n\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton({...dragButtonProps, elementType: 'div'}, ref);\n\n  return (\n    <div {...dragProps} className={`draggable ${isDragging ? 'dragging' : ''}`} style={{display: 'inline-flex', alignItems: 'center', gap: 5}}>\n      <span {...buttonProps} aria-label=\"Drag\" ref={ref} style={{fontSize: 18}}>≡</span>\n      <span>Some text</span>\n      <button onClick={() => alert('action')}>Action</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Actions in TableView with Different Selection Styles\nDESCRIPTION: This example demonstrates how to implement row actions in TableView using the onAction prop with both checkbox and highlight selection styles. It shows how to create interactive tables that respond to clicks with custom actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-300\">\n  <PokemonTable aria-label=\"Pokemon table with row actions and checkbox selection\" selectionMode=\"multiple\" onAction={key => alert(`Opening item ${key}...`)} />\n  <PokemonTable aria-label=\"Pokemon table with row actions and highlight selection\" selectionMode=\"multiple\" selectionStyle=\"highlight\" onAction={key => alert(`Opening item ${key}...`)} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Section Heading in MDX\nDESCRIPTION: Creates a level 2 heading titled 'Interface' using Markdown H2 syntax (double '##') within the MDX file. This marks the beginning of the section detailing the data structure or interface returned by the hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## Interface\n```\n\n----------------------------------------\n\nTITLE: Defining Types and Hooks for Droppable Collections in TypeScript\nDESCRIPTION: Defines TypeScript interfaces for drop targets (`RootDropTarget`, `ItemDropTarget`), specialized droppable collection event types (extending base drop events with a `target` field), options for configuring droppable collections (`DroppableCollectionOptions`), state management (`DroppableCollectionStateOptions`, `DroppableCollectionState`), hook options (`AriaDroppableCollectionOptions`), and the return types for `useDroppableCollectionState` and `useDroppableCollection`. These types support handling drops on or between items within a collection component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2020-v3-dnd.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/** A drop target that represents dropping on the whole collection. */\ninterface RootDropTarget {\n  type: 'root'\n}\n\ntype DropPosition = 'on' | 'before' | 'after';\ninterface ItemDropTarget {\n  type: 'item',\n  key: Key,\n  dropPosition: DropPosition\n}\n\ntype DropTarget = RootDropTarget | ItemDropTarget;\n\ninterface DroppableCollectionEnterEvent extends DropEnterEvent {\n  target: DropTarget\n}\n\ninterface DroppableCollectionMoveEvent extends DropMoveEvent {\n  target: DropTarget\n}\n\ninterface DroppableCollectionActivateEvent extends DropActivateEvent {\n  target: DropTarget\n}\n\ninterface DroppableCollectionExitEvent extends DropExitEvent {\n  target: DropTarget\n}\n\ninterface DroppableCollectionDropEvent extends DropEvent {\n  target: DropTarget\n}\n\ninterface DroppableCollectionOptions {\n  /** A function that returns the allowed drop positions for a given key. */\n  getAllowedDropPositions?: (key: Key) => DropPosition[],\n  /** \n   * A function that returns the drop operation that will be performed\n   * when dropping items of the given type on the specified target.\n   */\n  getDropOperation?: (target: DropTarget, types: string[], allowedOperations: DropOperation[]) => DropOperation,\n  /** Fired when a valid drag enters a drop target within the collection. */\n  onDropEnter?: (e: DroppableCollectionEnterEvent) => void,\n  /** Fired when a drag moves while over a drop target within the collection. */\n  onDropMove?: (e: DroppableCollectionMoveEvent) => void,\n  /**\n   * Fired when the user hovers over a drop target within the collection\n   * for a period of time. Typically, this opens or navigates to that item.\n   */\n  onDropActivate?: (e: DroppableCollectionActivateEvent) => void,\n  /** Fired when a drag exits a drop target within the collection. */\n  onDropExit?: (e: DroppableCollectionExitEvent) => void,\n  /** Fired when a drop occurs on a drop target within the collection. */\n  onDrop?: (e: DroppableCollectionDropEvent) => void\n}\n\ninterface DroppableCollectionStateOptions extends DroppableCollectionOptions {\n  collection: Collection<Node<unknown>>\n}\n\ninterface DroppableCollectionState {\n  collection: Collection<Node<unknown>>,\n  /** The current drop target within the collection. */\n  target: DropTarget,\n  /** Sets the current drop target. Fires onDragExit and onDragEnter as needed. */\n  setTarget(target: DropTarget): void,\n  /** Returns whether the given target is the current drop target within the collection. */\n  isDropTarget(target: DropTarget): boolean,\n  /** Returns the drop operation to perform when dropping on the given target. */\n  getDropOperation(target: DropTarget, types: Set<string>, allowedOperations: DropOperation[]): DropOperation\n}\n\ndeclare function useDroppableCollectionState(options: DroppableCollectionStateOptions): DroppableCollectionState;\n\ninterface AriaDroppableCollectionOptions {\n  /** A keyboard delegate to implement keyboard navigation in this collection. */\n  keyboardDelegate: KeyboardDelegate,\n  /** A function that returns a drop target at a given point. */\n  getDropTargetFromPoint: (x: number, y: number) => DropTarget | null,\n}\n\ninterface DroppableCollectionResult {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>\n}\n\ndeclare function useDroppableCollection(options: DroppableCollectionOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DroppableCollectionResult;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Bundle Size with Custom createCalendar in JSX\nDESCRIPTION: Explains how to reduce application bundle size by providing a custom `createCalendar` function to `useRangeCalendarState`. This function selectively imports and returns only the required calendar system implementations (e.g., `GregorianCalendar`), allowing unused ones to be tree-shaken.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useRangeCalendarState} from '@react-stately/datepicker';\nimport {useLocale} from '@react-aria/i18n';\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction createCalendar(identifier) {\n  switch (identifier) {\n    case 'gregory':\n      return new GregorianCalendar();\n    default:\n      throw new Error(`Unsupported calendar ${identifier}`);\n  }\n}\n\nfunction RangeCalendar(props) {\n  let {locale} = useLocale();\n  let state = useRangeCalendarState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DropZone Implementation in React Aria Components\nDESCRIPTION: A simple example of implementing a DropZone component that changes its text when an item is dropped.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DropZone, Text} from 'react-aria-components';\n\nfunction Example() {\n  let [dropped, setDropped] = React.useState(false);\n\n  return (\n    <DropZone\n      onDrop={() => {\n        setDropped(true);\n      }}>\n      <Text slot=\"label\">\n        {dropped ? \"You dropped something\" : \"Drop object here\"}\n      </Text>\n    </DropZone>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tailwind Styling\nDESCRIPTION: Example of using function-based className prop with Tailwind CSS classes\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarCell className={({isSelected}) => isSelected ? 'bg-blue-600' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Using Render Props in DateSegment for Custom Display - React Aria - JSX\nDESCRIPTION: This snippet leverages the render props pattern by providing a function child to DateSegment for custom rendering logic. The placeholder is always rendered but its visibility is toggled via inline styles. When isPlaceholder is true, only the placeholder text is shown; otherwise, the actual segment text is rendered. This allows layout consistency and better placeholder management in complex date inputs. The snippet presumes React context and a parent DatePicker composition.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<DateSegment>\n  {({text, placeholder, isPlaceholder}) => (\n    <>\n      <span style={{visibility: isPlaceholder ? 'visible' : 'hidden'}}>{placeholder}</span>\n      {isPlaceholder ? '' : text}\n    </>\n  )}\n</DateSegment>\n```\n```\n\n----------------------------------------\n\nTITLE: Basic ContextualHelp Usage with Info Variant in React\nDESCRIPTION: Demonstrates a simple implementation of the ContextualHelp component using the 'info' variant. It includes a `Heading` and `Content` with `Text` to display information within the popover triggered by the info icon.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/contextualhelp/docs/ContextualHelp.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextualHelp variant=\"info\">\n  <Heading>Need help?</Heading>\n  <Content><Text>If you're having issues accessing your account, contact our customer support team for help.</Text></Content>\n</ContextualHelp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Popover Placement Options in React (TSX)\nDESCRIPTION: Demonstrates how to control the position of the Popover relative to its trigger using the `placement` prop. This example shows the 'start', 'top', 'bottom', and 'end' placement options using the previously defined `MyPopover` wrapper component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', gap: 8}}>\n  <DialogTrigger>\n    <Button>⬅️</Button>\n    <MyPopover placement=\"start\">In left-to-right, this is on the left. In right-to-left, this is on the right.</MyPopover>\n  </DialogTrigger>\n  <DialogTrigger>\n    <Button>⬆️</Button>\n    <MyPopover placement=\"top\">This popover is above the button.</MyPopover>\n  </DialogTrigger>\n  <DialogTrigger>\n    <Button>⬇️</Button>\n    <MyPopover placement=\"bottom\">This popover is below the button.</MyPopover>\n  </DialogTrigger>\n  <DialogTrigger>\n    <Button>➡️</Button>\n    <MyPopover placement=\"end\">In left-to-right, this is on the right. In right-to-left, this is on the left.</MyPopover>\n  </DialogTrigger>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Tooltip Instantly on Hover Using delay Prop - React TypeScript\nDESCRIPTION: This snippet shows how to customize when a tooltip appears by setting the delay prop to 0, making the tooltip appear instantly on hover or focus of the button trigger. It reuses the TooltipButton component and relies on the same ARIA-compliant infrastructure; the only change is in how quickly the tooltip triggers after user interaction. Dependencies are the same as in previous examples, and the delay prop is key for customization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tooltip/docs/useTooltipTrigger.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipButton tooltip=\"Save\" delay={0}>💾</TooltipButton>\n\n```\n\n----------------------------------------\n\nTITLE: Accessing ColorSlider State via Context in React (TSX)\nDESCRIPTION: Defines a `ColorNumberField` component that accesses the parent `ColorSlider`'s state using `React.useContext(ColorSliderStateContext)`. It displays and allows modification of a specific color channel value (`hue` in the example usage) using a `NumberField`, synchronizing it with the slider state. Requires `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {ColorSliderStateContext, LabelContext, NumberField, Input, useSlottedContext} from 'react-aria-components';\n\nfunction ColorNumberField({channel}) {\n  /*- begin highlight -*/\n  let state = React.useContext(ColorSliderStateContext)!;\n  /*- end highlight -*/\n  let labelProps = useSlottedContext(LabelContext)!;\n  return (\n    <NumberField\n      aria-labelledby={labelProps.id}\n      value={state.value.getChannelValue(channel)}\n      minValue={state.value.getChannelRange(channel).minValue}\n      maxValue={state.value.getChannelRange(channel).maxValue}\n      onChange={v => state.setValue(state.value.withChannelValue(channel, v))}\n      formatOptions={state.value.getChannelFormatOptions(channel)}>\n      <Input />\n    </NumberField>\n  );\n}\n\n<ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\">\n  <Label />\n  {/*- begin highlight -*/}\n  <ColorNumberField channel=\"hue\" />\n  {/*- end highlight -*/}\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid DateField Segments and Errors (CSS)\nDESCRIPTION: This CSS snippet provides styles for React Aria `DateField` components in an invalid state. It targets invalid `DateSegment` elements using the `[data-invalid]` attribute selector, changing text color and focus background. It also styles the `FieldError` component within a `DateField` to display error messages with a specific font size and color.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateSegment {\n  &[data-invalid] {\n    color: var(--invalid-color);\n\n    &:focus {\n      background: var(--highlight-background-invalid);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n\n.react-aria-DateField {\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchAutocomplete with Avatars in React Spectrum\nDESCRIPTION: This example demonstrates a SearchAutocomplete component configured with avatars, showing how to create user selection functionality with visual representation of each user.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Search users\">\n  <Item textValue=\"User 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 1</Text>\n  </Item>\n  <Item textValue=\"User 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 2</Text>\n  </Item>\n  <Item textValue=\"User 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 3</Text>\n  </Item>\n  <Item textValue=\"User 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 4</Text>\n  </Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Using Router with Breadcrumbs for Dynamic Navigation - TSX\nDESCRIPTION: Shows how to use the custom Router component to wrap Breadcrumbs and Link items, achieving synchronized navigation state. The Router propagates state via context to child components. Requires previously defined Router, Breadcrumbs, Breadcrumb, and Link components, as well as React and React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Router>\n  <Breadcrumbs>\n    {(item: RouterItem) => <Breadcrumb><Link>{item.label}</Link></Breadcrumb>}\n  </Breadcrumbs>\n  <ul>\n    <li><Link>Breadcrumbs</Link></li>\n    <li><Link>Button</Link></li>\n    <li><Link>Calendar</Link></li>\n  </ul>\n</Router>\n```\n\n----------------------------------------\n\nTITLE: Implementing ContactPicker Component with useField Hook\nDESCRIPTION: This example demonstrates how to use the useField hook to create a ContactPicker component with a label, description, and error message. The hook provides props for associating these elements with the form control.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/label/docs/useField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ContactPicker(props) {\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField(props);\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', width: 200, marginBottom: 20}}>\n      <label {...labelProps}>{props.label}</label>\n      <select {...fieldProps}>\n        <option>Email</option>\n        <option>Phone</option>\n        <option>Fax</option>\n        <option>Carrier pigeon</option>\n      </select>\n      {props.description &&\n        <div {...descriptionProps} style={{fontSize: 12}}>{props.description}</div>\n      }\n      {props.errorMessage &&\n        <div {...errorMessageProps} style={{color: 'red', fontSize: 12}}>{props.errorMessage}</div>\n      }\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Checkbox with HTML Forms in React Aria\nDESCRIPTION: Example showing how to integrate the custom checkbox component with HTML forms by providing name and value props, which will be included in form submissions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckbox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox name=\"newsletter\" value=\"subscribe\">Subscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Toggle Button with React Aria and Framer Motion\nDESCRIPTION: Creates a custom toggle button component that animates on selection state changes using Framer Motion. The component integrates with React Aria's context system and toggle button functionality while supporting both standalone use and composition within other React Aria components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ToggleButtonProps} from 'react-aria-components';\nimport {ToggleButtonContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useToggleButton} from 'react-aria';\nimport {motion} from 'framer-motion';\n\nconst AnimatedToggleButton = React.forwardRef((props: ToggleButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, ButtonContext);\n\n  let state = useToggleState(props);\n  let {buttonProps} = useToggleButton(props, state, ref);\n  return (\n    <motion.button\n      {...buttonProps}\n      ref={ref}\n      animate={{\n        scale: state.isSelected ? 1.2 : 1\n      }}>\n      {props.children}\n    </motion.button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Modal Dialog Example\nDESCRIPTION: Implements a modal dialog with an underlay that blocks access to the UI until closed, suitable for critical user decisions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"modal\">\n  <ActionButton>Unlink</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Unlinking email</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          This will unlink your email from your profile \"TestUser\". Are you sure?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Moving Item to New Position in List - useListData Hook - TypeScript\nDESCRIPTION: Shows how to move an item, referenced by key, to a new position (by index) in the list with the move method. The method takes a key and the new intended index, updating the list immutably and shifting other items as needed. Returns the reordered list state for re-rendering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nlist.move('Snake', 0);\n\n```\n\n----------------------------------------\n\nTITLE: Integrating ComboBox with HTML Forms in TSX\nDESCRIPTION: Shows how to use the `name` prop for form submission with ComboBox. By default, the input text is submitted. Using `formValue=\"key\"` submits the key of the selected item instead. The `allowsCustomValue` prop is also demonstrated in the first example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ntsx example\n<Flex gap=\"size-200\" wrap>\n  <ComboBox\n    label=\"Ice cream flavor\"\n    ///- begin highlight -///\n    name=\"iceCream\"\n    allowsCustomValue\n    ///- end highlight -///\n  >\n    <Item>Chocolate</Item>\n    <Item>Mint</Item>\n    <Item>Strawberry</Item>\n    <Item>Vanilla</Item>\n  </ComboBox>\n  <ComboBox\n    label=\"Favorite Animal\"\n    ///- begin highlight -///\n    name=\"favoriteAnimalId\"\n    formValue=\"key\"\n    ///- end highlight -///\n  >\n    <Item key=\"panda\">Panda</Item>\n    <Item key=\"cat\">Cat</Item>\n    <Item key=\"dog\">Dog</Item>\n  </ComboBox>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating Popover Dialog in React Spectrum\nDESCRIPTION: This example demonstrates how to implement a popover dialog using DialogTrigger and Dialog components. It includes a button to trigger the popover and the content of the dialog.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"popover\">\n  <ActionButton>Trigger Popover</ActionButton>\n  <Dialog>\n    <Heading>Popover</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a popover.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Menu with React Spectrum in TypeScript\nDESCRIPTION: Demonstrates how to create a dynamic menu using the Menu component from React Spectrum. It shows how to use the items prop to pass a list of options and handle item selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let items = [\n    {id: 1, name: 'New'},\n    {id: 2, name: 'Open'},\n    {id: 3, name: 'Close'},\n    {id: 4, name: 'Save'},\n    {id: 5, name: 'Duplicate'},\n    {id: 6, name: 'Rename'},\n    {id: 7, name: 'Move'}\n  ];\n\n  return (\n    <MyMenuButton label=\"Actions\" items={items} onAction={id => alert(id)}>\n      {(item) => <MenuItem>{item.name}</MenuItem>}\n    </MyMenuButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Required and Labeled ColorFields React Spectrum TypeScript\nDESCRIPTION: Displays four ColorField variations to show optional, required, and the necessityIndicator prop in action. Useful for form-building scenarios to indicate required fields visually or via labels. Requires only React Spectrum UI library. Inputs are user color selections; output is a rendered set of fields with proper accessibility semantics.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\\\"size-150\\\" wrap>\\n  <ColorField label=\\\"Primary Color\\\" />\\n  <ColorField label=\\\"Primary Color\\\" isRequired />\\n  <ColorField label=\\\"Primary Color\\\" isRequired necessityIndicator=\\\"label\\\" />\\n  <ColorField label=\\\"Primary Color\\\" necessityIndicator=\\\"label\\\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Determinate ProgressCircle in React Spectrum\nDESCRIPTION: Shows a determinate ProgressCircle which is used when progress can be calculated against a specific goal.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressCircle.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressCircle aria-label=\"Loading…\" value={50} />\n```\n\n----------------------------------------\n\nTITLE: Implementing onDragEnd Handler for React Spectrum Drag Operations\nDESCRIPTION: Defines an event handler that removes dragged items from the source list when a drag operation completes with 'move' as the dropOperation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet onDragEnd = (e) => {\n  if (e.dropOperation === 'move') {\n    list.remove(...e.keys);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ListBox Items as Links in TypeScript\nDESCRIPTION: This example shows how to make `ListBoxItem` components act as hyperlinks. By providing the `href` prop to each `ListBoxItem`, clicking the item navigates to the specified URL. The `target=\"_blank\"` attribute opens the link in a new tab. By default, link items are not selectable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox aria-label=\"Links\">\n  <ListBoxItem href=\"https://adobe.com/\" target=\"_blank\">Adobe</ListBoxItem>\n  <ListBoxItem href=\"https://apple.com/\" target=\"_blank\">Apple</ListBoxItem>\n  <ListBoxItem href=\"https://google.com/\" target=\"_blank\">Google</ListBoxItem>\n  <ListBoxItem href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Integrating TimeField with HTML Forms and the Name Prop in TypeScript\nDESCRIPTION: Shows how to include a TimeField component in an HTML form by providing the name prop, ensuring the value is included in the form submission as an ISO 8601 formatted string (e.g., '08:45:00'). No additional dependencies are required beyond TimeField itself. The name prop ties the field to the server-side data model.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MyTimeField label=\"Meeting time\" name=\"meetingTime\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Meter Label Positions\nDESCRIPTION: Demonstrates different label placement options including the default position, side position, and hiding the value label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <Meter label=\"Label\" value={25} variant=\"warning\" />\n  <Meter label=\"Label\" labelPosition=\"side\" value={25} variant=\"warning\" />\n  <Meter label=\"Label\" showValueLabel={false} value={25} variant=\"warning\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: NumberField for Percentage Input\nDESCRIPTION: Shows how to configure a NumberField for percentage input with automatic conversion.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField\n  label=\"Sales tax\"\n  formatOptions={{style: 'percent'}}\n  minValue={0}\n  defaultValue={0.05} />\n```\n\n----------------------------------------\n\nTITLE: ListBox with Avatars\nDESCRIPTION: This example shows how to include avatars in ListBox items, demonstrating the use of the Avatar component within Item elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox width=\"size-2400\" aria-label=\"Options\" selectionMode=\"single\">\n  <Section title=\"Users\">\n    <Item textValue=\"User 1\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 1</Text>\n    </Item>\n    <Item textValue=\"User 2\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 2</Text>\n    </Item>\n    <Item textValue=\"User 3\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 3</Text>\n    </Item>\n    <Item textValue=\"User 4\">\n      <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n      <Text>User 4</Text>\n    </Item>\n  </Section>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Using granularity and placeholderValue in DateRangePicker (React Spectrum, TypeScript/JSX)\nDESCRIPTION: This snippet demonstrates two MyDateRangePicker usages: one with only the granularity set to 'second', and the other also using placeholderValue (produced by now for a specific time zone). The granularity influences the minimal selectable or displayable unit, and placeholderValue sets an initial time zone context for values emitted from onChange. Dependencies: @internationalized/date (now).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {now} from '@internationalized/date';\\n\\n<MyDateRangePicker\\n  label=\\\"Date range\\\"\\n  granularity=\\\"second\\\" />\\n<MyDateRangePicker\\n  label=\\\"Date range\\\"\\n  placeholderValue={now('America/New_York')}\\n  granularity=\\\"second\\\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox Component with React Aria\nDESCRIPTION: Main ComboBox component implementation using React Aria hooks. Combines useComboBoxState and useComboBox to create a filtered dropdown with keyboard navigation support. Includes input and button elements with associated ARIA attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Item} from '@react-stately/collections';\nimport {useButton} from '@react-aria/button';\nimport {useComboBoxState} from '@react-stately/combobox'\nimport {useComboBox} from '@react-aria/combobox';\nimport {useFilter} from '@react-aria/i18n';\n\n// Reuse the ListBox, Popover, and Button from your component library. See below for details.\nimport {ListBox, Popover, Button} from 'your-component-library';\n\nfunction ComboBox(props) {\n  // Setup filter function and state.\n  let {contains} = useFilter({sensitivity: 'base'});\n  let state = useComboBoxState({...props, defaultFilter: contains});\n\n  // Setup refs and get props for child elements.\n  let buttonRef = React.useRef(null);\n  let inputRef = React.useRef(null);\n  let listBoxRef = React.useRef(null);\n  let popoverRef = React.useRef(null);\n\n  let {buttonProps, inputProps, listBoxProps, labelProps} = useComboBox(\n    {\n      ...props,\n      inputRef,\n      buttonRef,\n      listBoxRef,\n      popoverRef,\n    },\n    state\n  );\n\n  return (\n    <div style={{display: 'inline-flex', flexDirection: 'column'}}>\n      <label {...labelProps}>{props.label}</label>\n      <div>\n        <input\n          {...inputProps}\n          ref={inputRef}\n          style={{\n            height: 24,\n            boxSizing: 'border-box',\n            marginRight: 0,\n            fontSize: 16\n          }} />\n        <Button\n          {...buttonProps}\n          buttonRef={buttonRef}\n          style={{\n            height: 24,\n            marginLeft: 0\n          }}>\n          <span\n            aria-hidden=\"true\"\n            style={{padding: '0 2px'}}>\n            ▼\n          </span>\n        </Button>\n        {state.isOpen &&\n          <Popover state={state} triggerRef={inputRef} popoverRef={popoverRef} isNonModal placement=\"bottom start\">\n            <ListBox\n              {...listBoxProps}\n              listBoxRef={listBoxRef}\n              state={state} />\n          </Popover>\n        }\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component with React Aria and React Stately\nDESCRIPTION: This code snippet demonstrates how to create a Select component using React Aria's useSelect hook and React Stately's useSelectState. It includes handling of label props, trigger props, value props, and menu props, as well as integration with HiddenSelect for browser autofill support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {HiddenSelect, useSelect} from '@react-aria/select';\nimport {Item} from '@react-stately/collections';\nimport {useSelectState} from '@react-stately/select';\n\n// Reuse the ListBox, Popover, and Button from your component library. See below for details.\nimport {ListBox, Popover, Button} from 'your-component-library';\n\nfunction Select(props) {\n  // Create state based on the incoming props\n  let state = useSelectState(props);\n\n  // Get props for child elements from useSelect\n  let ref = React.useRef(null);\n  let {\n    labelProps,\n    triggerProps,\n    valueProps,\n    menuProps\n  } = useSelect(props, state, ref);\n\n  return (\n    <div style={{display: 'inline-block'}}>\n      <div {...labelProps}>{props.label}</div>\n      <HiddenSelect\n        isDisabled={props.isDisabled}\n        state={state}\n        triggerRef={ref}\n        label={props.label}\n        name={props.name} />\n      <Button\n        {...triggerProps}\n        buttonRef={ref}\n        style={{height: 30, fontSize: 14}}>\n        <span {...valueProps}>\n          {state.selectedItem\n            ? state.selectedItem.rendered\n            : 'Select an option'\n          }\n        </span>\n        <span\n          aria-hidden=\"true\"\n          style={{paddingLeft: 5}}>\n          ▼\n        </span>\n      </Button>\n      {state.isOpen &&\n        <Popover state={state} triggerRef={ref} placement=\"bottom start\">\n          <ListBox\n            {...menuProps}\n            state={state} />\n        </Popover>\n      }\n    </div>\n  );\n}\n\n<Select label=\"Favorite Color\">\n  <Item>Red</Item>\n  <Item>Orange</Item>\n  <Item>Yellow</Item>\n  <Item>Green</Item>\n  <Item>Blue</Item>\n  <Item>Purple</Item>\n  <Item>Black</Item>\n  <Item>White</Item>\n  <Item>Lime</Item>\n  <Item>Fushsia</Item>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Function className in React Aria ProgressBar (JSX)\nDESCRIPTION: Explains how to use a function as the value for the `className` prop on a `ProgressBar`. The function receives component state (e.g., `percentage`) and returns dynamic class names based on that state, useful for conditional styling, especially with utility CSS frameworks like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ProgressBar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ProgressBar className={({percentage}) => percentage > 50 ? 'bg-green-400' : 'bg-yellow-100'}>\n  Item\n</ProgressBar>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Checkbox Based on Pressed State (CSS)\nDESCRIPTION: Illustrates styling a React Aria Checkbox specifically when it is in the 'pressed' state. This is achieved using a CSS attribute selector targeting the `data-pressed` attribute, which is one of the state attributes exposed by React Aria components for fine-grained styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Checkbox[data-pressed] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled React Aria ColorSlider with CSS\nDESCRIPTION: This CSS snippet shows how to style a disabled React Aria `ColorSlider`. It targets the component using the `data-disabled` attribute selector, applying gray backgrounds to the track and thumb, and reducing the thumb's opacity to visually indicate the disabled state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSlider {\n  &[data-disabled] {\n    .react-aria-SliderTrack {\n      background: gray !important;\n    }\n\n    .react-aria-ColorThumb {\n      background: gray !important;\n      opacity: 0.5;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SearchField with Help Text in React\nDESCRIPTION: This example shows how to add description and error messages to SearchField components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\" wrap>\n  <SearchField label=\"Search\" defaultValue=\"Burritos\" validationState=\"valid\" description=\"Enter a query.\" />\n  <SearchField label=\"Search\" validationState=\"invalid\" errorMessage=\"Empty input is not allowed.\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating Sections in Select with Dynamic Items\nDESCRIPTION: Example of using hierarchical data structures to create sectioned Select components with the Collection component. This approach allows for dynamic generation of both sections and their items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Collection} from 'react-aria-components';\n\nfunction Example() {\n  let options = [\n    {name: 'Fruit', children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Orange'},\n      {name: 'Honeydew'},\n      {name: 'Grapes'},\n      {name: 'Watermelon'},\n      {name: 'Cantaloupe'},\n      {name: 'Pear'}\n    ]},\n    {name: 'Vegetable', children: [\n      {name: 'Cabbage'},\n      {name: 'Broccoli'},\n      {name: 'Carrots'},\n      {name: 'Lettuce'},\n      {name: 'Spinach'},\n      {name: 'Bok Choy'},\n      {name: 'Cauliflower'},\n      {name: 'Potatoes'}\n    ]}\n  ];\n\n  return (\n    <MySelect label=\"Preferred fruit or vegetable\" items={options}>\n      {section => (\n        <ListBoxSection id={section.name}>\n          <Header>{section.name}</Header>\n          <Collection items={section.children}>\n            {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n          </Collection>\n        </ListBoxSection>\n      )}\n    </MySelect>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TableLayout with Virtualizer in React (TSX)\nDESCRIPTION: This TSX example shows how to implement a virtualized table using `TableLayout` with the `Virtualizer` component. It sets layout options like `rowHeight`, `headingHeight`, `padding`, and `gap`. The `Virtualizer` contains a `Table` component displaying 1000 rows of generated data, demonstrating efficient rendering of large datasets.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TableLayout, Table, TableHeader, Column, TableBody, Row, Cell} from 'react-aria-components';\nimport {MyCheckbox} from './Checkbox';\n\nlet rows = [];\nfor (let i = 0; i < 1000; i++) {\n  rows.push({id: i, foo: `Foo ${i}`, bar: `Bar ${i}`, baz: `Baz ${i}`});\n}\n\nfunction Example() {\n  return (\n    <Virtualizer\n      /*- begin highlight -*/\n      layout={TableLayout}\n      layoutOptions={{\n        rowHeight: 32,\n        headingHeight: 32,\n        padding: 4,\n        gap: 4\n      }}\n      /*- end highlight -*/\n    >\n      <Table aria-label=\"Virtualized Table\" selectionMode=\"multiple\">\n        <TableHeader>\n          <Column width={40} minWidth={0}><MyCheckbox slot=\"selection\" /></Column>\n          <Column isRowHeader>Foo</Column>\n          <Column>Bar</Column>\n          <Column>Baz</Column>\n        </TableHeader>\n        <TableBody items={rows}>\n          {item => (\n            <Row style={{width: 'inherit', height: 'inherit'}}>\n              <Cell><MyCheckbox slot=\"selection\" /></Cell>\n              <Cell>{item.foo}</Cell>\n              <Cell>{item.bar}</Cell>\n              <Cell>{item.baz}</Cell>\n            </Row>\n          )}\n        </TableBody>\n      </Table>\n    </Virtualizer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with React Aria in Remix\nDESCRIPTION: Configures the Remix entry.server.tsx file to inject localized strings into the initial HTML using getLocalizationScript from React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// app/entry.server.tsx\nimport type {EntryContext} from '@remix-run/node';\nimport {PassThrough} from 'node:stream';\nimport {createReadableStreamFromReadable} from '@remix-run/node';\nimport {RemixServer} from '@remix-run/react';\nimport {renderToPipeableStream} from 'react-dom/server';\nimport {getLocalizationScript} from 'react-aria-components/i18n';\n\nconst ABORT_DELAY = 5000;\n\nexport default async function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  // Get the requested language (e.g. from headers, URL param, database, etc.)\n  let lang = await getRequestedLanguageSomehow(request);\n\n  return new Promise((resolve, reject) => {\n    let {pipe, abort} = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        bootstrapScriptContent: getLocalizationScript(lang),\n        onShellReady() {\n          let body = new PassThrough();\n          let stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set('Content-Type', 'text/html');\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Example Static Collection Table with React Aria\nDESCRIPTION: This example demonstrates a complete static table using the Table components with hardcoded data. It showcases how the row and cell components work together to create a navigable table.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Example static collection table\" style={{height: '210px', maxWidth: '400px'}}>\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column>Date Modified</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>Games</Cell>\n      <Cell>File folder</Cell>\n      <Cell>6/7/2020</Cell>\n    </Row>\n    <Row>\n      <Cell>Program Files</Cell>\n      <Cell>File folder</Cell>\n      <Cell>4/7/2021</Cell>\n    </Row>\n    <Row>\n      <Cell>bootmgr</Cell>\n      <Cell>System file</Cell>\n      <Cell>11/20/2010</Cell>\n    </Row>\n    <Row>\n      <Cell>log.txt</Cell>\n      <Cell>Text Document</Cell>\n      <Cell>1/18/2016</Cell>\n    </Row>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Multi-Thumb RangeSlider in React Spectrum with TypeScript\nDESCRIPTION: This snippet illustrates using a controlled RangeSlider in React Spectrum by representing the value as an array with two elements (for dual thumbs). The component uses React.useState to manage the slider's range and updates it via the \\\"onChange\\\" handler. The current value range is displayed, joined by an en dash. This requires the RangeSlider component from React Spectrum and React state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\nfunction Example() {\n  let [value, setValue] = React.useState([25, 75]);\n  return (\n    <>\n      <RangeSlider\n        label=\"Range\"\n        value={value}\n        onChange={setValue} />\n      <p>Current value: {value.join(' – ')}</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Slider in React Spectrum with TypeScript\nDESCRIPTION: This snippet demonstrates rendering a vertical Slider component in React Spectrum by specifying the \\\"orientation\\\" prop as \\\"vertical\\\" and providing an accessible label via \\\"aria-label\\\". It configures the slider with a maximum value of 1 and step increments of 0.01. No external dependencies beyond React Spectrum are required, and the slider renders without a visible label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<Slider\n  orientation=\"vertical\"\n  aria-label=\"Opacity\"\n  maxValue={1}\n  step={0.01} />\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tabs with React Spectrum\nDESCRIPTION: Implements Tabs with dynamic content using the items prop and state management for selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let tabs = [\n    {id: 1, name: 'Founding of Rome', children: 'Arma virumque cano, Troiae qui primus ab oris.'},\n    {id: 2, name: 'Monarchy and Republic', children: 'Senatus Populusque Romanus.'},\n    {id: 3, name: 'Empire', children: 'Alea jacta est.'}\n  ];\n  type Tab = typeof tabs[0];\n  let [tabId, setTabId] = React.useState<Key>(1);\n\n  return (\n    <>\n      <p>Current tab id: {tabId}</p>\n      <Tabs aria-label=\"History of Ancient Rome\" items={tabs} onSelectionChange={setTabId}>\n        <TabList>\n          {(item: Tab) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a React Spectrum Tooltip using OverlayTrigger (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to wrap a trigger element (Button) and a Tooltip component within an OverlayTrigger to manage the tooltip's display based on hover or focus interactions. The OverlayTrigger automatically adds the necessary `aria-describedby` attribute to the trigger for accessibility. Key dependencies include `OverlayTrigger`, `Button`, and `Tooltip` from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<OverlayTrigger placement=\"right\">\n  <Button label=\"Tooltip\" variant=\"cta\" />\n  <Tooltip variant=\"info\">\n    Displays a tooltip\n  </Tooltip>\n</OverlayTrigger>\n```\n\n----------------------------------------\n\nTITLE: Picker Validation with Form (React/TypeScript)\nDESCRIPTION: This example shows how to implement validation for Picker within a Form component, using the isRequired prop and native validation behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <Picker label=\"Favorite animal\" name=\"animal\" isRequired>\n    <Item>Aardvark</Item>\n    <Item>Cat</Item>\n    <Item>Dog</Item>\n    <Item>Kangaroo</Item>\n    <Item>Panda</Item>\n    <Item>Snake</Item>\n  </Picker>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-dismiss for Toast in React Spectrum\nDESCRIPTION: Demonstrates how to set a timeout for automatically dismissing a toast after a specified duration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/toast/docs/Toast.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx example\nCODE:\n```\n<Button\n  onPress={() => ToastQueue.positive('Toast is done!', {timeout: 5000})}\n  variant=\"primary\">\n  Show toast\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Hierarchical Collections with Sections in React Aria (TSX)\nDESCRIPTION: Illustrates how to render a dynamic collection with sections using nested data structures managed by `useState`. The outer `ListBox` iterates over sections, rendering a `Section` component for each. Inside the section renderer, the `Collection` component is used with the `items` prop to render the child items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nlet [sections, setSections] = useState([\n  {\n    name: 'People',\n    items: [\n      {name: 'David'},\n      {name: 'Same'},\n      {name: 'Jane'}\n    ]\n  },\n  {\n    name: 'Animals',\n    items: [\n      {name: 'Aardvark'},\n      {name: 'Kangaroo'},\n      {name: 'Snake'}\n    ]\n  }\n]);\n\n<ListBox items={sections}>\n  {section =>\n    <Section id={section.name}>\n      <Header>{section.name}</Header>\n      <Collection items={section.children}> // Note: The example uses section.children, but the state uses section.items. Assume section.items was intended.\n        {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n      </Collection>\n    </Section>\n  }\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Creating Static Submenus in React Spectrum\nDESCRIPTION: This example illustrates how to create static submenus using SubmenuTrigger in React Spectrum. It shows nesting of menus and customization of action handling for each submenu.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SubmenuTrigger} from '@react-spectrum/menu';\n\n<MenuTrigger>\n  <ActionButton>Actions</ActionButton>\n  <Menu onAction={(key) => alert(`Root menu ${key} action`)}>\n    <Item key=\"Copy\">Copy</Item>\n    <Item key=\"Cut\">Cut</Item>\n    <Item key=\"Paste\">Paste</Item>\n      <SubmenuTrigger>\n        <Item key=\"Share\">Share</Item>\n        <Menu onAction={(key) => alert(`Share menu ${key} action`)}>\n          <Item key=\"Copy Link\">Copy Link</Item>\n          <SubmenuTrigger>\n            <Item key=\"Email\">Email</Item>\n            <Menu onAction={(key) => alert(`Email menu ${key} action`)}>\n              <Item key=\"Attachment\">Email as Attachment</Item>\n              <Item key=\"Link\">Email as Link</Item>\n            </Menu>\n          </SubmenuTrigger>\n          <Item key=\"SMS\">SMS</Item>\n        </Menu>\n      </SubmenuTrigger>\n    <Item key=\"Delete\">Delete</Item>\n  </Menu>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind CSS Styles (TypeScript)\nDESCRIPTION: This snippet imports global Tailwind CSS styles to make all Tailwind utility classes available in your React application. No dependencies beyond having Tailwind set up correctly in your project are required. The import statement must reference a valid CSS file and is typically placed in the main entry point of your app to ensure styles are loaded globally.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/action-menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Styled Button with React Spectrum - TypeScript/TSX\nDESCRIPTION: This sample demonstrates how to render a React Spectrum Button component with the 'accent' variant. The 'variant' prop determines the button's visual style, and the button renders with the label 'Button' as its children. This snippet requires the Button component from React Spectrum to be imported beforehand. Inputs include the 'variant' and any children; output is a rendered button as part of a React component tree.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/src/template.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<Button variant=\"accent\">Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Popover Cross Offset from Trigger in React (TSX)\nDESCRIPTION: Shows how to use the `crossOffset` prop to adjust the Popover's position along the axis perpendicular to the main placement axis. This example applies an additional 100px cross offset to shift the popover horizontally when placed vertically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <Button>Cross offset</Button>\n  <MyPopover placement=\"top\" crossOffset={100}>\n    Offset by an additional 100px.\n  </MyPopover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Search ComboBox with Tailwind CSS\nDESCRIPTION: Creates a ComboBox component for user search with Tailwind CSS styling. The component includes a label, input field with dropdown button, and a popover containing a ListBox of user options. Also implements a custom UserItem component to display user avatars and handle selection states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/user-combobox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {ComboBox, Label, Input, Group, Button, Popover, ListBox, ListBoxItem} from 'react-aria-components';\nimport type {ListBoxItemProps} from 'react-aria-components';\nimport ChevronUpDownIcon from '@spectrum-icons/workflow/ChevronUpDown';\nimport CheckIcon from '@spectrum-icons/workflow/Checkmark';\n\nfunction ComboBoxExample() {\n  return (\n    <div className=\"bg-linear-to-r from-sky-300 to-cyan-300 p-8 sm:h-[300px] rounded-lg flex justify-center\">\n      <ComboBox className=\"group flex flex-col gap-1 w-[200px]\">\n        <Label className=\"text-black cursor-default\">Assignee</Label>\n        <Group className=\"flex rounded-lg bg-white/90 focus-within:bg-white transition shadow-md ring-1 ring-black/10 focus-visible:ring-2 focus-visible:ring-black\">\n          <Input className=\"flex-1 w-full border-none py-2 px-3 leading-5 text-gray-900 bg-transparent outline-hidden text-base\" />\n          <Button className=\"px-3 flex items-center text-gray-700 transition border-0 border-solid border-l border-l-sky-200 bg-transparent rounded-r-lg pressed:bg-sky-100\">\n            <ChevronUpDownIcon size=\"XS\" />\n          </Button>\n        </Group>\n        <Popover className=\"max-h-60 w-(--trigger-width) overflow-auto rounded-md bg-white text-base shadow-lg ring-1 ring-black/5 entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out\">\n          <ListBox className=\"outline-hidden p-1\" items={people}>\n            {item => (\n              <UserItem textValue={item.name}>\n                <img alt=\"\" src={item.avatar} className=\"w-6 h-6 rounded-full\" />\n                <span className=\"truncate\">{item.name}</span>\n              </UserItem>\n            )}\n          </ListBox>\n        </Popover>\n      </ComboBox>\n    </div>\n  );\n}\n\nfunction UserItem(props: ListBoxItemProps & {children: React.ReactNode}) {\n  return (\n    <ListBoxItem\n      {...props}\n      className=\"group flex items-center gap-2 cursor-default select-none py-2 pl-2 pr-4 outline-hidden rounded-sm text-gray-900 focus:bg-sky-600 focus:text-white\">\n      {({ isSelected }) => (\n        <>\n          <span className=\"flex-1 flex items-center gap-3 truncate font-normal group-selected:font-medium\">{props.children}</span>\n          {isSelected &&\n            <span className=\"w-5 flex items-center text-sky-600 group-focus:text-white\">\n              <CheckIcon size=\"S\" />\n            </span>\n          }\n        </>\n      )}\n    </ListBoxItem>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Strings to ZonedDateTime in React\nDESCRIPTION: Demonstrates three different methods to parse ISO 8601 formatted strings into ZonedDateTime objects, including parsing with explicit time zones, absolute times, and converting to local time.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\nlet date = parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]');\nlet date = parseAbsolute('2021-11-07T07:45:00Z', 'America/Los_Angeles');\nlet date = parseAbsoluteToLocal('2021-11-07T07:45:00Z');\n```\n\n----------------------------------------\n\nTITLE: Formatting NumberField with Decimals, Sign, and Fraction Digits - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates decimal-style formatting with NumberField, showing use of signDisplay, minimumFractionDigits, and maximumFractionDigits via formatOptions. The NumberField displays at least one digit after the decimal and up to two, with rounding for extra digits, and uses signDisplay to show a plus sign for positive values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<MyNumberField\n  label=\"Adjust exposure\"\n  defaultValue={0}\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Restricting Selectable Dates in Calendar Using minValue Prop (TypeScript)\nDESCRIPTION: This single line demonstrates how to restrict selections in Calendar to dates not earlier than today using the minValue prop. It imports 'today' from @internationalized/date to establish the minimum selectable date in the user's local timezone. Required input: aria-label and minValue (today). Output: calendar UI limiting selectable dates. Useful for scenarios like future appointments.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<Calendar aria-label=\"Appointment date\" minValue={today(getLocalTimeZone())} />\n```\n\n----------------------------------------\n\nTITLE: Managing Popover Open State and Trigger Reference in React Spectrum (Controlled) with TypeScript\nDESCRIPTION: Illustrates how to fully control the open/close state of a Popover outside of DialogTrigger by using isOpen, onOpenChange, and triggerRef props. Pressing the Button sets the open state to true, and the Popover is positioned relative to a custom span element via triggerRef. Requires React, Button, MyPopover, and state management via useState and useRef. Inputs include user clicks and state setters; outputs are popovers with controlled visibility and precise positioning.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [isOpen, setOpen] = React.useState(false);\\n  let triggerRef = React.useRef(null);\\n\\n  return (\\n    <>\\n      <Button onPress={() => setOpen(true)}>Trigger</Button>\\n      <span ref={triggerRef} style={{paddingLeft: 12}}>Popover will be positioned relative to me</span>\\n      <MyPopover triggerRef={triggerRef} isOpen={isOpen} onOpenChange={setOpen}>\\n        <Heading slot=\\\"title\\\">Popover</Heading>\\n        <div>I'm over here!</div>\\n      </MyPopover>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Testing GridList with React Aria Test Utils\nDESCRIPTION: This example demonstrates how to test a GridList component using the test utilities from @react-aria/test-utils. It shows setting up a test user, rendering a GridList component, and testing row selection functionality with the GridListTester utility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_49\n\nLANGUAGE: ts\nCODE:\n```\n// GridList.test.ts\nimport {render, within} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('GridList can select a row via keyboard', async function () {\n  // Render your test component/app and initialize the gridlist tester\n  let {getByTestId} = render(\n    <GridList data-testid=\"test-gridlist\" selectionMode=\"single\">\n      ...\n    </GridList>\n  );\n  let gridListTester = testUtilUser.createTester('GridList', {root: getByTestId('test-gridlist'), interactionType: 'keyboard'});\n\n  let row = gridListTester.rows[0];\n  expect(within(row).getByRole('checkbox')).not.toBeChecked();\n  expect(gridListTester.selectedRows).toHaveLength(0);\n\n  await gridListTester.toggleRowSelection({row: 0});\n  expect(within(row).getByRole('checkbox')).toBeChecked();\n  expect(gridListTester.selectedRows).toHaveLength(1);\n\n  await gridListTester.toggleRowSelection({row: 0});\n  expect(within(row).getByRole('checkbox')).not.toBeChecked();\n  expect(gridListTester.selectedRows).toHaveLength(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled RangeSlider in React\nDESCRIPTION: This example shows how to use RangeSlider in both controlled and uncontrolled modes, demonstrating state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState({start: 25, end: 75});\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <RangeSlider\n        label=\"Range (uncontrolled)\"\n        defaultValue={{start: 25, end: 75}} />\n      <RangeSlider\n        label=\"Range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Router Component with LinkContext in TypeScript React\nDESCRIPTION: This snippet demonstrates how to create a Router component that uses LinkContext to pass an onPress handler to child Link components. It keeps track of the last clicked link and displays the clicked text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PressEvent} from 'react-aria-components';\nimport {LinkContext} from 'react-aria-components';\n\nfunction Router({children}) {\n  let [clicked, setClicked] = React.useState(null);\n  let onPress = (e: PressEvent) => {\n    setClicked(e.target.textContent);\n  };\n\n  return (\n    <LinkContext.Provider value={{onPress}}>\n      {children}\n      {clicked && `You clicked ${clicked}`}\n    </LinkContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Label Prop in React\nDESCRIPTION: This example demonstrates how to add a visual label to a TagGroup using the label prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup label=\"Categories\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Disabling a React Spectrum Calendar (TSX)\nDESCRIPTION: This snippet shows how to completely disable the Calendar component using the `isDisabled` boolean prop. When disabled, the calendar cells cannot be focused or selected by the user. An `aria-label` is provided for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar aria-label=\"Event date\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Creating a Fully Controlled SearchAutocomplete in React (tsx)\nDESCRIPTION: This example illustrates how to create a fully controlled `SearchAutocomplete` component. It manages the `inputValue`, the list of `items`, and the `onOpenChange` behavior using external React state (`useState`). This allows for fine-grained control over filtering (using `useFilter`) and behavior based on user interactions like input changes, submissions, and manually opening the menu.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ControlledSearchAutocomplete() {\n  let optionList = [\n    {name: 'Red Panda', id: '1'},\n    {name: 'Cat', id: '2'},\n    {name: 'Dog', id: '3'},\n    {name: 'Aardvark', id: '4'},\n    {name: 'Kangaroo', id: '5'},\n    {name: 'Snake', id: '6'}\n  ];\n\n  // Store SearchAutocomplete input value, selected option, open state, and items\n  // in a state tracker\n  let [fieldState, setFieldState] = React.useState({\n    inputValue: '',\n    items: optionList\n  });\n\n  // Implement custom filtering logic and control what items are\n  // available to the SearchAutocomplete.\n  let {startsWith} = useFilter({sensitivity: 'base'});\n\n  // Specify how each of the SearchAutocomplete values should change when an\n  // option is selected from the list box\n  let onSubmit = (value, key) => {\n    setFieldState(prevState => {\n      let selectedItem = prevState.items.find(option => option.id === key);\n      return ({\n        inputValue: selectedItem?.name ?? '',\n        items: optionList.filter(item => startsWith(item.name, selectedItem?.name ?? ''))\n      })\n    });\n  };\n\n  // Specify how each of the SearchAutocomplete values should change when the input\n  // field is altered by the user\n  let onInputChange = (value) => {\n    setFieldState(prevState => ({\n      inputValue: value,\n      items: optionList.filter(item => startsWith(item.name, value))\n    }));\n  };\n\n  // Show entire list if user opens the menu manually\n  let onOpenChange = (isOpen, menuTrigger) => {\n    if (menuTrigger === 'manual' && isOpen) {\n      setFieldState(prevState => ({\n        inputValue: prevState.inputValue,\n        items: optionList\n      }));\n    }\n  };\n\n  // Pass each controlled prop to useSearchAutocomplete along with their\n  // change handlers\n  return (\n    <SearchAutocomplete\n      label=\"Search Animals\"\n      items={fieldState.items}\n      inputValue={fieldState.inputValue}\n      onOpenChange={onOpenChange}\n      onSubmit={onSubmit}\n      onInputChange={onInputChange}>\n      {item => <Item>{item.name}</Item>}\n    </SearchAutocomplete>\n  )\n}\n\n<ControlledSearchAutocomplete />\n```\n\n----------------------------------------\n\nTITLE: Basic ToastRegion and Toast Rendering Example (TypeScript)\nDESCRIPTION: This snippet provides a minimal example of rendering a ToastRegion containing a Toast with title and description slots using react-aria-components. Dependencies include ToastRegion, Toast, ToastContent, Text, and Button components from react-aria-components. No specific queue instance is used here; rather, it's a rendering illustration for documentation. The key inputs include props and slot assignments; the output is the JSX representing the toast notification structure as displayed in the ToastRegion.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ToastRegion, Toast, ToastContent, Text, Button} from 'react-aria-components';\n\n<ToastRegion>\n  {({toast}) => (\n    <Toast toast={toast}>\n      <ToastContent>\n        <Text slot=\"title\" />\n        <Text slot=\"description\" />\n      </ToastContent>\n      <Button slot=\"close\" />\n    </Toast>\n  )}\n</ToastRegion>\n\n```\n\n----------------------------------------\n\nTITLE: Updating and Formatting Date Range Selection Events in DateRangePicker (TypeScript/React)\nDESCRIPTION: This snippet demonstrates handling the onChange event from the DateRangePicker component to update external state and display formatted dates in the user's locale. It utilizes useDateFormatter from @react-aria/i18n and getLocalTimeZone from @internationalized/date, converting internal date representations to native JS Dates for proper formatting. Dependencies: React, @internationalized/date, @react-aria/i18n. Inputs are date range objects, and output is a formatted date string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\\nimport {useDateFormatter} from '@react-aria/i18n';\\n\\nfunction Example() {\\n  let [range, setRange] = React.useState({\\n    start: parseDate('2020-07-03'),\\n    end: parseDate('2020-07-10')\\n  });\\n  let formatter = useDateFormatter({dateStyle: 'long'});\\n\\n  return (\\n    <>\\n      <DateRangePicker label=\\\"Date range\\\" value={range} onChange={setRange} />\\n      <p>Selected date: {range ? formatter.formatRange(range.start.toDate(getLocalTimeZone()), range.end.toDate(getLocalTimeZone())) : '--'}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Stack Layout in ListBox with React\nDESCRIPTION: Example of a ListBox with horizontal orientation, displaying albums in a horizontal row. The component uses the orientation prop to enable left/right arrow key navigation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Albums\"\n  orientation=\"horizontal\"\n  items={albums}\n  selectionMode=\"multiple\">\n  {item => (\n    <ListBoxItem textValue={item.title}>\n      <img src={item.image} alt=\"\" />\n      <Text slot=\"label\">{item.title}</Text>\n      <Text slot=\"description\">{item.artist}</Text>\n    </ListBoxItem>\n  )}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Durations - TypeScript\nDESCRIPTION: Shows how to parse ISO 8601 duration strings into DateTimeDuration objects, including support for decimal values and negative durations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nparseDuration('P3Y6M6W4DT12H30M5S');\n// => {years: 3, months: 6, weeks: 6, days: 4, hours: 12, minutes: 30, seconds: 5}\n\nparseDuration('-P3Y6M6W4DT12H30M5S');\n// => {years: -3, months: -6, weeks: -6, days: -4, hours: -12, minutes: -30, seconds: -5}\n\nparseDuration('P3Y6M6W4DT12H30M5.5S');\n// => {years: 3, months: 6, weeks: 6, days: 4, hours: 12, minutes: 30, seconds: 5.5}\n```\n\n----------------------------------------\n\nTITLE: Labeling SearchAutocomplete as Required with Icon Indicator in TSX\nDESCRIPTION: Illustrates how to label a `SearchAutocomplete` component as required using the `isRequired` prop and display a visual required indicator icon next to the label via `necessityIndicator=\"icon\"`. The label is \"Favorite Animal\".\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Favorite Animal\" isRequired necessityIndicator=\"icon\">\n  <Item>Red Panda</Item>\n  <Item>Cat</Item>\n  <Item>Dog</Item>\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Adding ContextualHelp to DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Shows integration of ContextualHelp with DatePicker, placing an informational overlay beside the field's label. Utilizes ContextualHelp, Content, and Heading components from React Spectrum for structured inline help. Relies on contextualHelp prop, rich children, and variants.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_23\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\\n\\n<DatePicker\\n  label=\\\"Appointment date\\\"\\n  contextualHelp={\\n    <ContextualHelp variant=\\\"info\\\">\\n      <Heading>Appointment changes</Heading>\\n      <Content>Your appointment date cannot be changed once it is scheduled.</Content>\\n    </ContextualHelp>\\n  } />\n```\n\n----------------------------------------\n\nTITLE: TextArea with Contextual Help in React Spectrum\nDESCRIPTION: Demonstrates how to add contextual help to a TextArea using the ContextualHelp component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<TextArea\n  label=\"Comment\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Comment tips</Heading>\n      <Content>Comments will be screened prior to being published. Please be nice!</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Labeling React Spectrum ColorSlider Components\nDESCRIPTION: This example demonstrates two ways to provide accessible labels for `ColorSlider` components. The first slider uses a nested `<Label>` component to provide a custom visible label ('Background Hue'). The second slider uses the `aria-label` prop for a screen-reader-only label ('Background Saturation'), overriding the default channel name label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\">\n  {/*- begin highlight -*/}\n  <Label>Background Hue</Label>\n  {/*- end highlight -*/}\n  <SliderOutput />\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n<ColorSlider\n  /*- begin highlight -*/\n  aria-label=\"Background Saturation\"\n  /*- end highlight -*/\n  channel=\"saturation\"\n  defaultValue=\"hsl(0, 100%, 50%)\">\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value in DateRangePicker\nDESCRIPTION: Example demonstrating how to set a custom placeholder value for a DateRangePicker, which also controls the default values of segments and the initial month shown in the calendar popover.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\n<DateRangePicker label=\"Date range\" placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic TextField with Label in React Spectrum\nDESCRIPTION: Demonstrates how to create a password input field with a label and description using the TextField component from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@adobe/react-spectrum';\n\n<TextField type=\"password\" label=\"Password\" description=\"Password must be at least 8 characters.\" />\n```\n\n----------------------------------------\n\nTITLE: Interactive Variant Toggle with State and onPress (TypeScript/TSX)\nDESCRIPTION: Demonstrates an interactive LogicButton that toggles its variant between 'and' and 'or' upon being pressed. Utilizes React.useState to store the current variant and the onPress handler to update state. Inputs are user clicks or key events; output is an updated button label. Requires React and @react-spectrum/button. This example is useful for dynamic logic controls.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/LogicButton.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [variant, setVariant] = React.useState<'and' | 'or'>('or');\n\n  return (\n    <LogicButton variant={variant} onPress={() => setVariant(variant === 'or' ? 'and' : 'or')}>{variant}</LogicButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled ColorSwatchPickerItems\nDESCRIPTION: Example demonstrating how to disable specific color swatches using the isDisabled prop, making them non-interactive.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSwatchPicker>\n  <MyColorSwatchPickerItem color=\"#A00\" />\n  <MyColorSwatchPickerItem color=\"#f80\" isDisabled />\n  <MyColorSwatchPickerItem color=\"#080\" />\n</MyColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Multiple Selection in ListBox (TypeScript)\nDESCRIPTION: This example shows a `ListBox` configured for multiple selections (`selectionMode=\"multiple\"`). It uses React state (`selected`, `setSelected`) to manage the selected items in a controlled manner, initializing with 'cheese' selected. The `selectedKeys` prop binds the selection state, and `onSelectionChange` updates the state when the selection changes. A paragraph displays the current selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['cheese']));\n\n  return (\n    <>\n      <ListBox\n        aria-label=\"Sandwich contents\"\n        /*- begin highlight -*/\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        /*- end highlight -*/\n      >\n        <ListBoxItem id=\"lettuce\">Lettuce</ListBoxItem>\n        <ListBoxItem id=\"tomato\">Tomato</ListBoxItem>\n        <ListBoxItem id=\"cheese\">Cheese</ListBoxItem>\n        <ListBoxItem id=\"tuna\">Tuna Salad</ListBoxItem>\n        <ListBoxItem id=\"egg\">Egg Salad</ListBoxItem>\n        <ListBoxItem id=\"ham\">Ham</ListBoxItem>\n      </ListBox>\n      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SelectionCount Component with CheckboxGroupState\nDESCRIPTION: This snippet demonstrates how to create a SelectionCount component that uses the CheckboxGroupState to display the number of selected items within a CheckboxGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CheckboxGroupStateContext} from 'react-aria-components';\n\nfunction SelectionCount() {\n  let state = React.useContext(CheckboxGroupStateContext)!;\n  return <small>{state.value.length} items selected.</small>;\n}\n\n<MyCheckboxGroup label=\"Sandwich condiments\">\n  <MyCheckbox value=\"lettuce\">Lettuce</MyCheckbox>\n  <MyCheckbox value=\"tomato\">Tomato</MyCheckbox>\n  <MyCheckbox value=\"onion\">Onion</MyCheckbox>\n  <MyCheckbox value=\"sprouts\">Sprouts</MyCheckbox>\n  <SelectionCount />\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Basic ColorArea Usage with Default Value in TSX\nDESCRIPTION: Demonstrates the simplest way to render a `ColorArea` component by providing an uncontrolled `defaultValue` prop with a hex color string ('#7f0000'). The component manages its own state internally in this configuration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorArea defaultValue=\"#7f0000\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Orientation for React Tabs\nDESCRIPTION: This example shows how to create vertically oriented tabs by setting the orientation prop to 'vertical'. This affects the visual layout but does not change keyboard navigation behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs orientation=\"vertical\">\n  <TabList aria-label=\"Chat log orientation example\">\n    <Tab id=\"1\">John Doe</Tab>\n    <Tab id=\"2\">Jane Doe</Tab>\n    <Tab id=\"3\">Joe Bloggs</Tab>\n  </TabList>\n  <TabPanel id=\"1\">There is no prior chat history with John Doe.</TabPanel>\n  <TabPanel id=\"2\">There is no prior chat history with Jane Doe.</TabPanel>\n  <TabPanel id=\"3\">There is no prior chat history with Joe Bloggs.</TabPanel>\n</Tabs>\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tabs {\n  &[data-orientation=vertical] {\n    flex-direction: row;\n  }\n}\n\n.react-aria-TabList {\n  &[data-orientation=vertical] {\n    flex-direction: column;\n    border-inline-end: 1px solid gray;\n\n    .react-aria-Tab {\n      border-inline-end: 3px solid var(--border-color, transparent);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GridLayout with React Aria Components\nDESCRIPTION: Demonstrates the implementation of a GridLayout component using React Aria Components, featuring virtualization and grid layout configuration. Includes minimum item size and spacing settings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GridLayout, Size, Text} from 'react-aria-components';\n\nfunction Example() {\n  return (\n    <div className=\"resizable\">\n      <Virtualizer\n        layout={GridLayout}\n        layoutOptions={{\n          minItemSize: new Size(100, 140),\n          minSpace: new Size(8, 8)\n        }}\n      >\n        <ListBox\n          layout=\"grid\"\n          aria-label=\"Virtualized grid layout\"\n          selectionMode=\"multiple\"\n          items={albums}>\n          {item => (\n            <ListBoxItem textValue={item.title}>\n              <img src={item.image} alt=\"\" />\n              <Text slot=\"label\">{item.title}</Text>\n              <Text slot=\"description\">{item.artist}</Text>\n            </ListBoxItem>\n          )}\n        </ListBox>\n      </Virtualizer>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ColorSwatchPicker Size in TSX\nDESCRIPTION: Illustrates how to adjust the visual size of the `ColorSwatchPicker` and its `ColorSwatch` children using the `size` prop. This example sets the size to 'XS' (extra small).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatchPicker size=\"XS\">\n  <ColorSwatch color=\"#A00\" />\n  <ColorSwatch color=\"#f80\" />\n  <ColorSwatch color=\"#080\" />\n  <ColorSwatch color=\"#08f\" />\n</ColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Styling ActionButton with Static Color on Custom Backgrounds - React Spectrum - TypeScript (TSX)\nDESCRIPTION: Demonstrates how to use staticColor prop to ensure text/icon contrast when ActionButton is placed over colored backgrounds. The snippet uses Flex and View for layout, and shows ActionButton with white and black staticColor over blue and yellow backgrounds respectively. Inputs: None. Outputs: Two styled ActionButtons ensuring accessible contrast. Dependencies: Flex, View, ActionButton, Edit, Text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ActionButton.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\\\"size-250\\\">\\n  <View backgroundColor=\\\"static-blue-700\\\" padding=\\\"size-500\\\">\\n    <ActionButton staticColor=\\\"white\\\">\\n      <Edit />\\n      <Text>Edit</Text>\\n    </ActionButton>\\n  </View>\\n  <View backgroundColor=\\\"static-yellow-400\\\" padding=\\\"size-500\\\">\\n    <ActionButton staticColor=\\\"black\\\" isQuiet>\\n      <Edit />\\n      <Text>Edit</Text>\\n    </ActionButton>\\n  </View>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Render Props\nDESCRIPTION: Shows how to conditionally render content based on item state using render props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      Item\n    </>\n  )}\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Styling RadioGroup with CSS\nDESCRIPTION: This CSS snippet provides styling for the RadioGroup and Radio components, including hover and focus states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-RadioGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  color: var(--text-color);\n}\n\n.react-aria-Radio {\n  display: flex;\n  align-items: center;\n  gap: 0.571rem;\n  font-size: 1.143rem;\n  color: var(--text-color);\n  forced-color-adjust: none;\n\n  &:before {\n    content: '';\n    display: block;\n    width: 1.286rem;\n    height: 1.286rem;\n    box-sizing: border-box;\n    border: 0.143rem solid var(--border-color);\n    background: var(--field-background);\n    border-radius: 1.286rem;\n    transition: all 200ms;\n  }\n\n  &[data-pressed]:before {\n    border-color: var(--border-color-pressed);\n  }\n\n  &[data-selected] {\n    &:before {\n      border-color: var(--highlight-background);\n      border-width: 0.429rem;\n    }\n\n    &[data-pressed]:before {\n      border-color: var(--highlight-background-pressed);\n    }\n  }\n\n  &[data-focus-visible]:before {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Values in React\nDESCRIPTION: This example demonstrates how to handle controlled and uncontrolled values in a Calendar component using React state and the parseDate function from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <div style={{display: 'flex', gap: 20, flexWrap: 'wrap'}}>\n      <Calendar\n        aria-label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <Calendar\n        aria-label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating React Spectrum ComboBox with Native Form Validation (TSX)\nDESCRIPTION: Demonstrates using the `isRequired` prop on a `ComboBox` within a React Spectrum `Form` component set to `validationBehavior=\"native\"`. This enables standard HTML form validation, automatically showing browser default error messages when the required field is empty on blur or form submission.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  {/*- begin highlight -*/}\n  <ComboBox label=\"Favorite animal\" name=\"animal\" isRequired>\n  {/*- end highlight -*/}\n    <Item>Aardvark</Item>\n    <Item>Cat</Item>\n    <Item>Dog</Item>\n    <Item>Kangaroo</Item>\n    <Item>Panda</Item>\n    <Item>Snake</Item>\n  </ComboBox>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Width of NumberField in React Spectrum\nDESCRIPTION: This example demonstrates how to set a custom width for a NumberField component using the width and maxWidth props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField label=\"Cookies\" width=\"size-3600\" maxWidth=\"100%\" minValue={0} />\n```\n\n----------------------------------------\n\nTITLE: Color Wheel with HTML Form Integration\nDESCRIPTION: Example of using the ColorWheel component with HTML forms by providing a name prop, allowing the hue value to be submitted as part of form data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorWheel.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorWheel name=\"hue\" />\n```\n\n----------------------------------------\n\nTITLE: Basic ColorSlider Example in React (TSX)\nDESCRIPTION: Demonstrates the fundamental usage of the `ColorSlider` component. It initializes the slider with a default red color value (`#7f0000`) using the `defaultValue` prop and specifies that it should control the 'red' color `channel`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSlider defaultValue=\"#7f0000\" channel=\"red\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Unavailable and Invalid Cells in React Spectrum RangeCalendar using CSS\nDESCRIPTION: Provides CSS rules to visually distinguish unavailable dates (line-through, specific color) and invalid dates (background color, text color) within the `RangeCalendar` using data attributes `[data-unavailable]` and `[data-invalid]`. Assumes CSS variables like `--invalid-color` and `--highlight-foreground` are defined.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-RangeCalendar {\n  .react-aria-CalendarCell {\n\n    &[data-unavailable] {\n      text-decoration: line-through;\n      color: var(--invalid-color);\n    }\n\n    &[data-invalid] {\n      background: var(--invalid-color);\n      color: var(--highlight-foreground);\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Static Breadcrumbs Navigation - React Spectrum - TypeScript\nDESCRIPTION: This code example renders a Breadcrumbs navigation component with three static Item children. Each Item represents a navigational segment, with a unique key and label. No dependencies besides @react-spectrum/breadcrumbs and TypeScript React setup are needed. The Breadcrumbs component expects Item children with a key; the usage is for simple, static breadcrumb navigation. No interactivity is included beyond display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Breadcrumbs>\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n  <Item key=\"march 2020 assets\">March 2020 Assets</Item>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: International Calendar Integration with Hindi Locale\nDESCRIPTION: Shows how to implement RangeCalendar with international calendar support using Hindi locale and Indian calendar system while maintaining Gregorian calendar output.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DateRange} from 'react-aria-components';\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [range, setRange] = React.useState<DateRange | null>(null);\n  return (\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n      <MyRangeCalendar aria-label=\"Date range\" value={range} onChange={setRange} />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation State for React Spectrum Checkbox\nDESCRIPTION: Shows how to apply the `isInvalid` prop to a Checkbox to visually indicate a validation error. Note that this prop only changes the appearance; additional accessible methods must be used to convey the error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/Checkbox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox isInvalid>I accept the terms and conditions</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual-Triggered ComboBox in React Spectrum\nDESCRIPTION: Example demonstrating ComboBox with manual trigger mode where menu only opens on explicit user action\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox label=\"Select action\" menuTrigger=\"manual\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>Add to queue</Text>\n    <Text slot=\"description\">Add to current watch queue.</Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>Add review</Text>\n    <Text slot=\"description\">Post a review for the episode.</Text>\n  </Item>\n    <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>Subscribe to series</Text>\n    <Text slot=\"description\">Add series to your subscription list and be notified when a new episode airs.</Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">Report an issue/violation.</Text>\n  </Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation Content with JSX Components\nDESCRIPTION: Uses JSX components from `@react-spectrum/docs` to structure and render the documentation content. It displays the hook's title, description (`PageDescription`), package information (`HeaderInfo`), API details (`FunctionAPI`), and interface definition (`ClassAPI`), dynamically using imported `docs` and `packageData`. It also includes a link to a usage example located in the `react-aria` documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/numberfield/docs/useNumberFieldState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n# useNumberFieldState\n\n<PageDescription>{docs.exports.useNumberFieldState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useNumberFieldState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useNumberFieldState} links={docs.links} />\n\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useNumberFieldState.return.id]} />\n\n## Example\n\nSee the docs for [useNumberField](../react-aria/useNumberField.html) in react-aria for an example of `useNumberFieldState`.\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using MDX Frontmatter\nDESCRIPTION: Uses MDX frontmatter (YAML block delimited by '---') to define metadata for the documentation page. It assigns the page to the 'Date and Time' category and associates relevant keywords: 'date', 'time', 'range', 'date picker', and 'state'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n---\ncategory: Date and Time\nkeywords: [date, time, range, date picker, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing ColorWheel State via Context (TSX)\nDESCRIPTION: This TSX example defines a `HueField` component designed to be placed inside a `ColorWheel`. It accesses the color wheel's state using `React.useContext(ColorWheelStateContext)` to get the current hue value and the `setValue` function. It uses `NumberField` and `Input` components from `react-aria-components` to allow users to view and numerically edit the hue value, updating the parent `ColorWheel` state on change.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorWheelStateContext, NumberField, Input, useLocale} from 'react-aria-components';\n\nfunction HueField() {\n  /*- begin highlight -*/\n  let state = React.useContext(ColorWheelStateContext)!;\n  /*- end highlight -*/\n  let {locale} = useLocale();\n  return (\n    <NumberField\n      aria-label={state.value.getChannelName('hue', locale)}\n      value={state.value.getChannelValue('hue')}\n      onChange={v => state.setValue(state.value.withChannelValue('hue', v))}\n      formatOptions={state.value.getChannelFormatOptions('hue')}>\n      <Input />\n    </NumberField>\n  );\n}\n\n<ColorWheel outerRadius={100} innerRadius={74}>\n  <ColorWheelTrack />\n  <ColorThumb />\n  {/*- begin highlight -*/}\n  <HueField />\n  {/*- end highlight -*/}\n</ColorWheel>\n```\n\n----------------------------------------\n\nTITLE: Integrating RouterProvider in Remix with React Aria (TypeScript)\nDESCRIPTION: This snippet shows how to wrap a Remix app with React Aria's RouterProvider at the root level to provide navigation context for accessible link components. It demonstrates the use of TypeScript module augmentation to define custom router configuration and integrates Remix's useNavigate and useHref hooks with the provider. Dependencies include Remix, React Aria Components, and React Router. The main parameters are the 'navigate' and 'useHref' props passed down to RouterProvider, expected to enable navigation handling and URL resolution; it outputs a routed application structure with accessibility support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// app/root.tsx\nimport {useNavigate, useHref, Outlet} from '@remix-run/react';\nimport type {NavigateOptions} from 'react-router-dom';\nimport {RouterProvider} from 'react-aria-components';\n\ndeclare module 'react-aria-components' {\n  interface RouterConfig {\n    routerOptions: NavigateOptions\n  }\n}\n\nexport default function App() {\n  let navigate = useNavigate();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        {/* ... */}\n      </head>\n      <body>\n        <RouterProvider navigate={navigate} useHref={useHref}>\n          <Outlet />\n        </RouterProvider>\n        {/* ... */}\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value in DateRangePicker\nDESCRIPTION: Demonstrates setting custom placeholder value for DateRangePicker using CalendarDate object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\n<DateRangePicker label=\"Date range\" placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation and Dependencies - React Spectrum Docs - JavaScript\nDESCRIPTION: This snippet imports the generated documentation data for the useAutocompleteState hook, React Spectrum documentation rendering components, and metadata from the respective packages. These imports are necessary for preparing component and function documentation pages. It requires runtime resolution of documentation data and access to related packages in node_modules.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/autocomplete/docs/useAutocompleteState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/autocomplete';\nimport {ClassAPI, HeaderInfo, FunctionAPI, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/autocomplete/package.json';\nimport {InlineAlert, Content, Heading} from '@adobe/react-spectrum';\n```\n\n----------------------------------------\n\nTITLE: Styling a ColorPicker Component with CSS\nDESCRIPTION: CSS styling for the ColorPicker component, including the button trigger and popover dialog. Defines appearance, layout, focus states, and sizing for the color picker interface.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.color-picker {\n  background: none;\n  border: none;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  outline: none;\n  border-radius: 4px;\n  appearance: none;\n  vertical-align: middle;\n  font-size: 1rem;\n  color: var(--text-color);\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n}\n\n.color-picker-dialog {\n  outline: none;\n  padding: 15px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  min-width: 192px;\n  max-height: inherit;\n  box-sizing: border-box;\n  overflow: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Drop Functionality in React Spectrum ListBox\nDESCRIPTION: This example demonstrates how to implement directory drop functionality in a React Spectrum ListBox component. It imports the DIRECTORY_DRAG_TYPE constant, sets up state for files, and implements an onRootDrop handler that iterates through directory entries asynchronously.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport File from '@spectrum-icons/workflow/FileTxt';\nimport Folder from '@spectrum-icons/workflow/Folder';\n///- begin highlight -///\nimport {DIRECTORY_DRAG_TYPE} from '@react-aria/dnd';\n///- end highlight -///\n\nfunction Example() {\n  let [files, setFiles] = React.useState([]);\n  let onRootDrop = async e => {\n    /*- begin highlight -*/\n    // Read entries in directory and update state with relevant info.\n    let files = [];\n    for await (let entry of e.items[0].getEntries()) {\n      files.push({\n        name: entry.name,\n        kind: entry.kind\n      });\n    }\n    setFiles(files);\n    /*- end highlight -*/\n  };\n\n  return (\n    <ListBox\n      aria-label=\"Directory contents\"\n      items={files}\n      ///- begin highlight -///\n      acceptedDragTypes={[DIRECTORY_DRAG_TYPE]}\n      ///- end highlight -///\n      onRootDrop={onRootDrop}>\n      {item => (\n        <Item key={item.name} textValue={item.name}>\n          <div className=\"dir-item\">\n            {item.kind === 'directory' ? <Folder /> : <File />}\n            <span>{item.name}</span>\n          </div>\n        </Item>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Multiple Contexts using the Provider Component (TSX)\nDESCRIPTION: Illustrates using the `Provider` component from `react-aria-components` to provide multiple contexts (`ButtonContext`, `InputContext`) simultaneously without manual nesting. Contexts and their values are passed as pairs in an array to the `values` prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider, ButtonContext, InputContext} from 'react-aria-components';\n\n<Provider\n  values={[\n    [ButtonContext, {/* ... */}],\n    [InputContext, {/* ... */}]\n  ]}>\n  {/* ... */}\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Basic FocusScope Usage Example in React\nDESCRIPTION: This example demonstrates a basic usage of FocusScope to contain focus within a component, auto-focus the first element, and restore focus when unmounted.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/focus/docs/FocusScope.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isOpen, setOpen] = React.useState(false);\n  return (\n    <>\n      <button onClick={() => setOpen(true)}>Open</button>\n      {isOpen &&\n        <FocusScope contain restoreFocus autoFocus>\n          <label htmlFor=\"first-input\">First Input</label>\n          <input id=\"first-input\" />\n          <label htmlFor=\"second-input\">Second Input</label>\n          <input id=\"second-input\" />\n          <button onClick={() => setOpen(false)}>Close</button>\n        </FocusScope>\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Width on ColorSwatch - TypeScript/JSX\nDESCRIPTION: This code demonstrates how to specify a custom width for a ColorSwatch via the width prop (e.g., width='size-1000'). The input is a color and a width token from Spectrum's sizing system. The swatch will render at the specified width, allowing for non-square or specifically sized swatches, conforming to design requirements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatch.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatch color=\\\"#00f\\\" width=\\\"size-1000\\\" />\n```\n\n----------------------------------------\n\nTITLE: Menu Component Anatomy Structure in React Aria\nDESCRIPTION: Shows the component structure for building menus, including the necessary imports and component hierarchy. Demonstrates slots for labels, descriptions, and keyboard shortcuts within menu items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MenuTrigger, Button, Popover, Menu, MenuItem, MenuSection, Separator, Header, Text, Keyboard} from 'react-aria-components';\n\n<MenuTrigger>\n  <Button />\n  <Popover>\n    <Menu>\n      <MenuItem>\n        <Text slot=\"label\" />\n        <Text slot=\"description\" />\n        <Keyboard />\n      </MenuItem>\n      <Separator />\n      <MenuSection>\n        <Header />\n        <MenuItem />\n      </MenuSection>\n    </Menu>\n  </Popover>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Button Component with CSS\nDESCRIPTION: CSS styling for the Button component, including different states like pressed and focus-visible. The CSS defines color, background, borders, and interaction states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Button {\n  color: var(--text-color);\n  background: var(--button-background);\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  appearance: none;\n  vertical-align: middle;\n  font-size: 1rem;\n  text-align: center;\n  margin: 0;\n  outline: none;\n  padding: 6px 10px;\n  text-decoration: none;\n\n  &[data-pressed] {\n    box-shadow: inset 0 1px 2px rgb(0 0 0 / 0.1);\n    background: var(--button-background-pressed);\n    border-color: var(--border-color-pressed);\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TextField with Help Text in React\nDESCRIPTION: This example demonstrates how to add description and error messages to the TextField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\" wrap>\n  <TextField label=\"Name\" defaultValue=\"John\" validationState=\"valid\" description=\"Enter your name.\" />\n  <TextField label=\"Name\" validationState=\"invalid\" errorMessage=\"Empty input is not allowed.\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Selected State in React Aria Checkbox\nDESCRIPTION: Example showing how to set a default selected state for a checkbox using the defaultSelected prop. This initializes the checkbox as checked when first rendered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckbox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox defaultSelected>Subscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled TimeField Example in React\nDESCRIPTION: Shows how to use TimeField in both controlled and uncontrolled modes with a Time object from @internationalized/date package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Time} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(new Time(11, 45));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <TimeField\n        label=\"Time (uncontrolled)\"\n        defaultValue={new Time(11, 45)} />\n      <TimeField\n        label=\"Time (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Step Increments in React Spectrum NumberField (TSX)\nDESCRIPTION: Examples of using the `step` prop in React Spectrum `NumberField` to control value increments via arrow buttons or keyboard shortcuts. Shows `step` alone (steps calculated from 0), `step` with `minValue` (steps calculated from `minValue`), and `step` with both `minValue` and `maxValue`. Values typed by the user snap to the nearest valid step on blur.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<NumberField\n  label=\"Step\"\n  step={10} />\n<NumberField\n  label=\"Step + minValue\"\n  minValue={2}\n  step={3} />\n<NumberField\n  label=\"Step + minValue + maxValue\"\n  minValue={2}\n  maxValue={21}\n  step={3} />\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a ComboBox Providing Multiple Context Values for Inner Components (JSX)\nDESCRIPTION: This snippet defines a MyComboBox React component that provides context for Button, Input, Label, and ListBox via a Provider using values from the useComboBox hook (from react-aria). The function gets interaction props from useComboBox and passes them through context to children, enabling those child components to behave as intelligent ComboBox parts. Inputs are props and internal usage of useComboBox. Dependencies are react-aria and react-aria-components. Outputs are rendered children wrapped with context providers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useComboBox} from 'react-aria';\\nimport {ButtonContext, InputContext, LabelContext, ListBoxContext, Provider} from 'react-aria-components';\\n\\nfunction MyComboBox(props) {\\n  // ...\\n  let {\\n    buttonProps,\\n    inputProps,\\n    listBoxProps,\\n    labelProps\\n  } = useComboBox({/* ... */});\\n\\n  return (\\n    <Provider\\n      values={[\\n        [LabelContext, labelProps],\\n        [ButtonContext, buttonProps],\\n        [InputContext, inputProps],\\n        [ListBoxContext, listBoxProps]\\n      ]}\\n    >\\n      {props.children}\\n    </Provider>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating React Server Actions with React Aria Form (TSX)\nDESCRIPTION: Client-side React component (`AddForm`) showcasing the integration of React Server Actions (Next.js) with React Aria forms. It uses the `useFormState` hook to manage the state returned by the server action (`createTodo`) and passes the action to the `Form` component's `action` prop and server-returned errors to the `validationErrors` prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// app/add-form.tsx\n'use client';\n\nimport {useFormState} from 'react-dom';\nimport {Form, TextField, Label, Input, FieldError, Button} from 'react-aria-components';\nimport {createTodo} from '@/app/actions';\n\nexport function AddForm() {\n  /*- begin highlight -*/\n  let [{errors}, formAction] = useFormState(createTodo, {errors: {}});\n  /*- end highlight -*/\n\n  return (\n    /*- begin highlight -*/\n    <Form action={formAction} validationErrors={errors}>\n    {/*- end highlight -*/}\n      <TextField name=\"todo\">\n        <Label>Task</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <Button type=\"submit\">Add</Button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stabilizing IDs in Snapshot Tests with SSRProvider in TSX\nDESCRIPTION: Illustrates wrapping an application component within `SSRProvider` and `Provider` from `@adobe/react-spectrum`. Using `SSRProvider` stabilizes the auto-generated IDs within React Spectrum components, preventing snapshot test failures caused by inconsistent IDs between runs, especially relevant in React 16/17.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SSRProvider, Provider, lightTheme} from '@adobe/react-spectrum';\n\n<SSRProvider>\n  <Provider theme={lightTheme}>\n    <YourApp />\n  </Provider>\n</SSRProvider>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading in ListBox with Infinite Scrolling\nDESCRIPTION: This example demonstrates asynchronous loading in ListBox using the useAsyncList hook. It includes infinite scrolling to load more data on demand as the user scrolls.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Pokemon {\n  name: string\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Pokemon>({\n    async load({signal, cursor}) {\n      // If no cursor is available, then we're loading the first page.\n      // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n      let res = await fetch(cursor || 'https://pokeapi.co/api/v2/pokemon', {signal});\n      let json = await res.json();\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <Flex maxHeight=\"size-2400\">\n      <ListBox\n        aria-label=\"Pick a Pokemon\"\n        items={list.items}\n        isLoading={list.isLoading}\n        onLoadMore={list.loadMore}\n        width=\"size-2400\">\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </ListBox>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessible Icon Implementation in React Spectrum\nDESCRIPTION: Example of making an icon accessible to assistive technology by providing an aria-label, using the LockClosed icon to represent a locked state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/workflow-icons.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport LockClosed from '@spectrum-icons/workflow/LockClosed';\n\n<LockClosed aria-label=\"Locked\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DatePicker with ZonedDateTime Values (TypeScript)\nDESCRIPTION: Illustrates initializing the DatePicker with a date string containing a specific time and IANA time zone using parseZonedDateTime from @internationalized/date. Supports accurate time zone display and daylight saving adjustments. The key parameter is defaultValue, with a parsed ZonedDateTime object, and label. Input is a string in ISO 8601 zoned format, output is a time zone-aware date picker. Library dependencies include @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\\n\\n<DatePicker\\n  label=\\\"Event date\\\"\\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Dialog with Custom Trigger in React Aria\nDESCRIPTION: Example demonstrating how to use a custom trigger element with DialogTrigger by wrapping it with the Pressable component. This approach enables using any custom element as a dialog trigger while maintaining accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Dialog.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Pressable} from 'react-aria-components';\n\n<DialogTrigger>\n  <Pressable>\n    <span role=\"button\">Custom trigger</span>\n  </Pressable>\n  <Modal>\n    <Dialog>\n      <Heading slot=\"title\">Dialog</Heading>\n      <p>This dialog was triggered by a custom button.</p>\n      <Button slot=\"close\">Close</Button>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListBox and Option Components\nDESCRIPTION: ListBox and Option components implementation using useListBox and useOption hooks. Handles the dropdown list rendering and selection behavior for the ComboBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListBox, useOption} from '@react-aria/listbox';\n\nfunction ListBox(props) {\n  let ref = React.useRef(null);\n  let {listBoxRef = ref, state} = props;\n  let {listBoxProps} = useListBox(props, state, listBoxRef);\n\n  return (\n    <ul\n      {...listBoxProps}\n      ref={listBoxRef}\n      style={{\n        margin: 0,\n        padding: 0,\n        listStyle: \"none\",\n        maxHeight: 150,\n        overflow: \"auto\",\n        minWidth: 200\n      }}>\n      {[...state.collection].map(item => (\n        <Option\n          key={item.key}\n          item={item}\n          state={state} />\n      ))}\n    </ul>\n  );\n}\n\nfunction Option({item, state}) {\n  let ref = React.useRef(null);\n  let {optionProps, isSelected, isFocused, isDisabled} = useOption({key: item.key}, state, ref);\n\n  let backgroundColor;\n  let color = 'black';\n\n  if (isSelected) {\n    backgroundColor = 'blueviolet';\n    color = 'white';\n  } else if (isFocused) {\n    backgroundColor = 'gray';\n  } else if (isDisabled) {\n    backgroundColor = 'transparent';\n    color = 'gray';\n  }\n\n  return (\n    <li\n      {...optionProps}\n      ref={ref}\n      style={{\n        background: backgroundColor,\n        color: color,\n        padding: '2px 5px',\n        outline: 'none',\n        cursor: 'pointer'\n      }}>\n      {item.rendered}\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Dialog Appearance with Real Timers using waitFor in TSX\nDESCRIPTION: Shows how to use `waitFor` from `@testing-library/react` to asynchronously wait for an element with the role 'dialog' to appear in the DOM when using real timers. This is useful for testing scenarios where elements like modals or popovers appear after an interaction and a delay.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nawait waitFor(() => {\n  expect(getByRole('dialog')).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Using ClientProviders in Next.js App Router Layout\nDESCRIPTION: This code shows how to use the ClientProviders component in a Next.js App Router layout file to wrap the entire application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ClientProviders} from './provider';\n\nexport default function RootLayout({children}) {\n  return (\n    <html>\n      <body>\n        <ClientProviders>{children}</ClientProviders>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting ProgressBar Values with Currency in React Spectrum\nDESCRIPTION: Shows how to customize the value format using formatOptions to display the progress as a Japanese Yen currency value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressBar label=\"Loading…\" formatOptions={{style: 'currency', currency: 'JPY'}} value={60} />\n```\n\n----------------------------------------\n\nTITLE: Queueing a Toast in React Spectrum\nDESCRIPTION: Illustrates how to queue a toast message using the ToastQueue.positive method when a button is pressed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/toast/docs/Toast.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx example\nCODE:\n```\n<Button\n  onPress={() => ToastQueue.positive('Toast is done!')}\n  variant=\"primary\">\n  Show toast\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Grid Component\nDESCRIPTION: Creates a calendar grid component that renders a month view using HTML table elements. Handles week and day rendering with proper ARIA roles and keyboard navigation support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCalendarGrid} from '@react-aria/calendar';\n\nfunction CalendarGrid({state, ...props}) {\n  let {gridProps, headerProps, weekDays, weeksInMonth} = useCalendarGrid(props, state);\n\n  return (\n    <table {...gridProps}>\n      <thead {...headerProps}>\n        <tr>\n          {weekDays.map((day, index) =>\n            <th key={index}>{day}</th>\n          )}\n        </tr>\n      </thead>\n      <tbody>\n        {[...new Array(weeksInMonth).keys()].map(weekIndex => (\n          <tr key={weekIndex}>\n            {state.getDatesInWeek(weekIndex).map((date, i) => (\n              date ? (\n                <CalendarCell\n                  key={i}\n                  state={state}\n                  date={date} />\n              ) : <td key={i} />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Corner Rounding for ColorSwatch Components - TypeScript/JSX\nDESCRIPTION: This snippet exhibits how to apply different rounding options to ColorSwatch components using the rounding prop (none, default, full). Each swatch is rendered within a Flex container for side-by-side comparison. Inputs are the color value and rounding prop; output consists of visually contrasted swatches reflecting the chosen border radius option.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatch.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\\\"size-100\\\">\\n  <ColorSwatch color=\\\"#0ff\\\" rounding=\\\"none\\\" />\\n  <ColorSwatch color=\\\"#0ff\\\" rounding=\\\"default\\\" />\\n  <ColorSwatch color=\\\"#0ff\\\" rounding=\\\"full\\\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Handling Directory Drops with React Aria Components\nDESCRIPTION: This example demonstrates how to accept and process directory drops in a ListBox component. It extracts entries from a dropped directory and updates the UI with file and folder information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_46\n\nLANGUAGE: tsx\nCODE:\n```\nimport File from '@spectrum-icons/workflow/FileTxt';\nimport Folder from '@spectrum-icons/workflow/Folder';\n///- begin highlight -///\nimport {DIRECTORY_DRAG_TYPE, isDirectoryDropItem} from 'react-aria-components';\n///- end highlight -///\n\ninterface DirItem {\n  name: string,\n  kind: string\n}\n\nfunction Example() {\n  let [files, setFiles] = React.useState<DirItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    /*- begin highlight -*/\n    acceptedDragTypes: [DIRECTORY_DRAG_TYPE],\n    async onRootDrop(e) {\n      // Read entries in directory and update state with relevant info.\n      let dir = e.items.find(isDirectoryDropItem)!;\n      let files = [];\n      for await (let entry of dir.getEntries()) {\n        files.push({\n          name: entry.name,\n          kind: entry.kind\n        });\n      }\n      setFiles(files);\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <ListBox aria-label=\"Droppable list\" items={files} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop items here\"}>\n      {item => (\n        <ListBoxItem id={item.name} textValue={item.name}>\n          <div className=\"dir-item\">\n            {item.kind === 'directory' ? <Folder /> : <File />}\n            <span>{item.name}</span>\n          </div>\n        </ListBoxItem>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Tailwind\nDESCRIPTION: Example of using a function to dynamically apply Tailwind classes based on component state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Handling Directory Paste in React Spectrum\nDESCRIPTION: This example demonstrates how to handle pasting of directories using the useClipboard hook. It iterates through the contents of the pasted directory and renders the file and folder names in a grid layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useClipboard.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DirectoryDropItem} from '@react-aria/dnd';\nimport File from '@spectrum-icons/workflow/FileTxt';\nimport Folder from '@spectrum-icons/workflow/Folder';\n\nfunction Pasteable() {\n  let [files, setFiles] = React.useState(null);\n  let {clipboardProps} = useClipboard({\n    async onPaste(items) {\n      // Find the first dropped item that is a directory.\n      let dir = items.find(item => item.kind === 'directory') as DirectoryDropItem;\n      if (dir) {\n        // Read entries in directory and update state with relevant info.\n        let files = [];\n        for await (let entry of dir.getEntries()) {\n          files.push({\n            name: entry.name,\n            kind: entry.kind\n          });\n        }\n        setFiles(files);\n      }\n    }\n  });\n\n  let contents = <>Paste directory here</>;\n  if (files) {\n    contents = (\n      <ul>\n        {files.map(f => (\n          <li key={f.name}>\n            {f.kind === 'directory' ? <Folder /> : <File />}\n            <span>{f.name}</span>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  return (\n    <div role=\"textbox\" tabIndex={0} {...clipboardProps} className=\"grid\">\n      {contents}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS v3 Configuration for React Aria Components\nDESCRIPTION: Shows how to configure Tailwind CSS v3 by adding the tailwindcss-react-aria-components plugin to the tailwind.config.js file. Notes that version 1.x of the plugin should be used with Tailwind v3.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/loading-progress.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Inserting Items into List - useListData Hook - TypeScript\nDESCRIPTION: This snippet demonstrates how to insert single or multiple items into the list using the insert method of useListData, specifying the position and objects to insert. The insert method can be combined with other convenience methods to efficiently update the immutable list state. Accepts item indices and array of new items as parameters; results in an updated React state with the new items inserted.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Insert an item after the first one\nlist.insert(1, {name: 'Horse'});\n\n// Insert multiple items\nlist.insert(1, {name: 'Horse'}, {name: 'Giraffe'});\n\n```\n\n----------------------------------------\n\nTITLE: Custom 4-5-4 Calendar System Implementation\nDESCRIPTION: Implementation of a custom calendar system following 4-5-4 format for fiscal year calculations\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AnyCalendarDate} from '@internationalized/date';\nimport {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction Example() {\n  return <DateRangePicker createCalendar={() => new Custom454()} />;\n}\n\nclass Custom454 extends GregorianCalendar {\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n  getDaysInMonth(date) {\n    return this.weekPattern[date.month - 1] * 7;\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < this.weekPattern.length; months++) {\n      let weeksInMonth = this.weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  getFormattableMonth(date) {\n    let gregorian = toCalendar(date, new GregorianCalendar());\n    return gregorian.set({month: date.month, day: 1});\n  }\n\n  isEqual(other) {\n    return other instanceof Custom454;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Required CheckboxGroup Selections in a React Spectrum Form (TypeScript)\nDESCRIPTION: This example demonstrates group validation by embedding a required CheckboxGroup in a React Spectrum Form. The isRequired and name props enforce that at least one item is selected and allow for HTML form integration. The Form also uses validationBehavior='native' to display browser default error messages and block submission when validation fails. Dependencies include Form, ButtonGroup, and Button components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\\n\\n<Form validationBehavior=\\\"native\\\">\\n  {/*- begin highlight -*/}\\n  <CheckboxGroup label=\\\"Sandwich condiments\\\" name=\\\"condiments\\\" isRequired>\\n  {/*- end highlight -*/}\\n    <Checkbox value=\\\"lettuce\\\">Lettuce</Checkbox>\\n    <Checkbox value=\\\"tomato\\\">Tomato</Checkbox>\\n    <Checkbox value=\\\"onion\\\">Onion</Checkbox>\\n    <Checkbox value=\\\"sprouts\\\">Sprouts</Checkbox>\\n  </CheckboxGroup>\\n  <ButtonGroup>\\n    <Button type=\\\"submit\\\" variant=\\\"primary\\\">Submit</Button>\\n    <Button type=\\\"reset\\\" variant=\\\"secondary\\\">Reset</Button>\\n  </ButtonGroup>\\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic ListBox Data with useListData Hook in React Stately (TSX)\nDESCRIPTION: Shows how to manage the state and updates for a dynamic collection using the `useListData` hook from `@react-stately/data`. This hook provides methods like `append` to modify the immutable data and handles selection state updates automatically. It requires specifying how to get the key for each item via `getKey`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from '@react-stately/data';\n\nlet list = useListData({\n  initialItems: [\n    {name: 'Aardvark'},\n    {name: 'Kangaroo'},\n    {name: 'Snake'}\n  ],\n  initialSelectedKeys: ['Kangaroo'],\n  getKey: item => item.name\n});\n\nfunction addAnimal(name) {\n  list.append({name});\n}\n\n<ListBox items={list.items}>\n  {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Event Handled Link\nDESCRIPTION: Example of Link component with JavaScript event handling via onPress prop\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/link/docs/Link.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Link onPress={() => alert('Pressed link')}>Adobe</Link>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Spectrum Checkbox\nDESCRIPTION: Demonstrates the fundamental usage of the Checkbox component. The text 'Unsubscribe' is passed as children to serve as the visible label for the checkbox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/Checkbox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox>Unsubscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Styling the Example Tabs Component (CSS)\nDESCRIPTION: Contains CSS rules to style the `Tabs` component example implemented using React Aria hooks. It covers layout for both horizontal and vertical orientations, tab borders, visual indication for selected tabs (`[aria-selected=true]`), and styling for disabled tabs (`[aria-disabled]`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.tabs {\n  height: 150px;\n  display: flex;\n  flex-direction: column;\n}\n\n.tabs.vertical {\n  flex-direction: row;\n}\n\n[role=tablist] {\n  display: flex;\n}\n\n[role=tablist][aria-orientation=horizontal] {\n  border-bottom: 1px solid gray;\n}\n\n[role=tablist][aria-orientation=vertical] {\n  flex-direction: column;\n  border-right: 1px solid gray;\n}\n\n[role=tab] {\n  padding: 10px;\n  cursor: default;\n}\n\n[role=tablist][aria-orientation=horizontal] [role=tab] {\n  border-bottom: 3px solid transparent;\n}\n\n[role=tablist][aria-orientation=vertical] [role=tab] {\n  border-right: 3px solid transparent;\n}\n\n[role=tablist] [role=tab][aria-selected=true] {\n  border-color: var(--blue);\n}\n\n[role=tab][aria-disabled] {\n  opacity: 0.5;\n}\n\n[role=tabpanel] {\n  padding: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Warning Variant AlertDialog in React Spectrum\nDESCRIPTION: Example of an AlertDialog with the warning variant, which is used to warn users about potential issues or consequences.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Enter</ActionButton>\n  <AlertDialog\n    variant=\"warning\"\n    title=\"Raid instance\"\n    primaryActionLabel=\"Confirm\"\n    cancelLabel=\"Cancel\">\n    The following encounter meant for parties of 4 or more. Enter anyways?\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Stack with Flex in React Spectrum\nDESCRIPTION: This example demonstrates how to create a simple vertical stack using the Flex component from React Spectrum. It uses the direction, width, and gap props to control the layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/layout.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" width=\"size-2000\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" height=\"size-800\" />\n  <View backgroundColor=\"blue-600\" height=\"size-800\" />\n  <View backgroundColor=\"magenta-600\" height=\"size-800\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Color Wheel with onChangeEnd Handler\nDESCRIPTION: An example demonstrating how to use the onChangeEnd prop to handle when a user completes a color selection, rather than updating during the dragging process.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorWheel.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <>\n      <ColorWheel defaultValue={color} onChangeEnd={setColor} />\n      <p>Current color value: {color.toString('hsl')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DatePicker with Absolute Date Parsed to Local Time (TypeScript)\nDESCRIPTION: Demonstrates the use of parseAbsoluteToLocal from @internationalized/date to initialize the DatePicker with an absolute ISO 8601 UTC date string, which is converted to the current user's local time zone. This ensures displayed values are localized. Key props are label and defaultValue. Input is an absolute UTC string; output is a localized date. Dependencies: @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\\n\\n<DatePicker\\n  label=\\\"Event date\\\"\\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Simulating User Interactions with user-event Library\nDESCRIPTION: Demonstrates how to use the user-event library to simulate realistic user interactions in tests, including clicking, typing, and tabbing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {render} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nlet tree = render(<LoginForm />);\n\n// Click on the username field to focus it, and enter the value.\nuserEvent.click(tree.getByLabelText('Username'));\nuserEvent.type(document.activeElement, 'devon');\n\n// Tab to the password field, and enter the value.\nuserEvent.tab();\nuserEvent.type(document.activeElement, 'Pas$w0rd');\n\n// Tab to the submit button and click it.\nuserEvent.tab();\nuserEvent.click(document.activeElement);\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Group Component Styling using CSS\nDESCRIPTION: This CSS snippet applies advanced styling and interactive states to the '.react-aria-Group' class and its children. It includes layout (flexbox), border, background, transitions, hover, focus, and attribute selectors for enhanced accessibility states. Key parameters are the various data attributes (e.g., data-hovered, data-focus-within), and it relies on theme variables for colors. The code ensures a visually accessible and consistent UI for grouped inputs and buttons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \\\"@react-aria/example-theme\\\";\\n\\n.react-aria-Group {\\n  display: flex;\\n  align-items: center;\\n  width: fit-content;\\n  border-radius: 6px;\\n  border: 1px solid var(--border-color);\\n  background: var(--field-background);\\n  overflow: hidden;\\n  transition: all 200ms;\\n\\n  &[data-hovered] {\\n    border-color: var(--border-color-hover);\\n  }\\n\\n  &[data-focus-within] {\\n    outline: 2px solid var(--focus-ring-color);\\n    outline-offset: -1px;\\n  }\\n\\n  .react-aria-Input {\\n    padding: 0.286rem;\\n    margin: 0;\\n    font-size: 1rem;\\n    color: var(--text-color);\\n    outline: none;\\n    border: none;\\n    background: transparent;\\n\\n    &::placeholder {\\n      color: var(--text-color-placeholder);\\n      opacity: 1;\\n    }\\n  }\\n\\n  .react-aria-Button {\\n    padding: 0 6px;\\n    border-width: 0 0 0 1px;\\n    border-radius: 0 6px 6px 0;\\n    align-self: stretch;\\n    font-size: 1.5rem;\\n    &[data-focus-visible] {\\n      border-color: var(--focus-ring-color);\\n      outline-width: 1px;\\n      outline-offset: 0;\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Items in ActionGroup with React Spectrum\nDESCRIPTION: This example demonstrates how to selectively disable specific items within an ActionGroup by using the disabledKeys prop with an array of keys corresponding to the items that should be disabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup disabledKeys={['add', 'delete']}>\n  <Item key=\"add\">Add</Item>\n  <Item key=\"delete\">Delete</Item>\n  <Item key=\"edit\">Edit</Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Using the Content Component Example in React Spectrum (TSX)\nDESCRIPTION: Demonstrates the basic usage of the `Content` component with TSX syntax. It wraps textual content, which is intended to be the primary content within a parent container like a Dialog or IllustratedMessage. The component itself provides minimal styling, inheriting it from its parent.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/view/docs/Content.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Content>Content is king</Content>\n```\n\n----------------------------------------\n\nTITLE: Render Props for Conditional Rendering in ListBoxItem - React JSX\nDESCRIPTION: Illustrates using a render-props pattern for ListBoxItem to display a checkmark icon when selected. Dependencies are React, React Aria, and a CheckmarkIcon component. Input parameter isSelected determines conditional rendering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      Item\n    </>\n  )}\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Disabling Touch Callout on Links (css)\nDESCRIPTION: This hidden CSS rule targets anchor elements with `href=\"#\"` and disables the default touch callout menu (e.g., on iOS) when a user long-presses the link. This is often used for UI elements that look like links but have custom interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/category-tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\na[href=\"#\"] {\n  -webkit-touch-callout: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ActionGroup from Dynamic Data (TSX)\nDESCRIPTION: Shows how to generate ActionGroup items dynamically from an array of data (`items`). The `items` prop is used on the `ActionGroup` component, and a function is provided as a child to render each `Item` based on the data object structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst items = [\n  {label: 'React', name: 'React'},\n  {label: 'Add', name: 'Add'},\n  {label: 'Delete', name: 'Delete'}\n];\n\n<ActionGroup items={items}>\n  {item => <Item key={item.name}>{item.label}</Item>}\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Contiguous Date Ranges with Weekend Exclusion\nDESCRIPTION: Example demonstrating how to enable selecting date ranges that span unavailable dates using the allowsNonContiguousRanges prop. This implementation specifically prevents selecting weekends while allowing ranges that span multiple weeks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return <DateRangePicker label=\"Time off request\" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Value and Mirrored Output - React Aria - TypeScript/TSX\nDESCRIPTION: Demonstrates a controlled usage of MyTextField, managing its value with React useState and mirroring output below the field. Useful for reflecting state changes in the UI. Requires React and MyTextField. The label and onChange props are set; input reflects user changes with setText.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\\n  let [text, setText] = React.useState('');\\n\\n  return (\\n    <>\\n      <MyTextField label=\"Your text\" onChange={setText} />\\n      <p>Mirrored text: {text}</p>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria GridList with CSS\nDESCRIPTION: Example of how to target and style React Aria GridList and GridListItem components using CSS selectors. The code shows how to target the default class names and component states via data attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_43\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridList {\n  /* ... */\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridListItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-GridListItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Drop Indicators in React Spectrum Tables\nDESCRIPTION: This example demonstrates how to create a custom drop indicator using the renderDropIndicator function. This allows for customization of the DOM structure and CSS classes applied to the drop indicator.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DropIndicator} from 'react-aria-components';\n\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    // ...\n    renderDropIndicator(target) {\n      return (\n        <DropIndicator\n          target={target}\n          className={({isDropTarget}) => `my-drop-indicator ${isDropTarget ? 'active' : ''}`} />\n      );\n    }\n  });\n\n  // ...\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.my-drop-indicator.active {\n  outline: 1px solid #e70073;\n  transform: translateZ(0);\n}\n```\n\n----------------------------------------\n\nTITLE: IllustratedMessage for 404 Not Found Error\nDESCRIPTION: Example using the NotFound illustration to display a 404 not found error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<IllustratedMessage>\n  <NotFound />\n  <Heading>Error 404: Page not found</Heading>\n  <Content>This page isn't available. Try checking the URL or visit a different page.</Content>\n</IllustratedMessage>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label Component Compatible with React Aria Context (TypeScript)\nDESCRIPTION: This example shows how to create a custom label component that consumes label context from React Aria Components using the useContextProps hook. The component merges local props and refs with context values to maintain accessibility and correct labeling integration. The function is wrapped with React.forwardRef for proper ref forwarding. Inputs are optional props and ref; output is a label element. Dependencies are react-aria-components and React. Ensures compatibility with DateRangePicker context when using custom styled labels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  ///- end highlight -///\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading in Picker (React/TypeScript)\nDESCRIPTION: This example demonstrates how to implement asynchronous loading and infinite scrolling in Picker using the useAsyncList hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Pokemon {\n  name: string\n}\n\nfunction AsyncLoadingExample() {\n  let list = useAsyncList<Pokemon>({\n    async load({signal, cursor}) {\n      // If no cursor is available, then we're loading the first page.\n      // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n      let res = await fetch(cursor || 'https://pokeapi.co/api/v2/pokemon', {signal});\n      let json = await res.json();\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <Picker\n      label=\"Pick a Pokemon\"\n      items={list.items}\n      isLoading={list.isLoading}\n      onLoadMore={list.loadMore}>\n      {item => <Item key={item.name}>{item.name}</Item>}\n    </Picker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom ClassName to DateInput - React Aria - JSX\nDESCRIPTION: In this JSX snippet, a custom class name ('my-date-input') is applied to the DateInput subcomponent of the DatePicker, overriding the default React Aria class assignment. The code demonstrates the composition technique for modular component styling. No dependencies are required apart from React. The DateInput component can now be uniquely styled in CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<DateInput className=\"my-date-input\">\n  {/* ... */}\n</DateInput>\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing TimeField with Local Time in React Spectrum\nDESCRIPTION: This example shows how to initialize a TimeField component with a time value parsed into the user's local time zone. It uses the parseAbsoluteToLocal function to convert a UTC time string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Labels to Icon-Only Items (TSX)\nDESCRIPTION: Shows how to provide accessible labels for icon-only ActionGroup items using the `aria-label` prop on each `Item`. This is crucial for screen readers when text labels are absent and tooltips (via `buttonLabelBehavior`) are not used.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup>\n  <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n  <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label Component within a React Aria TagGroup in TSX\nDESCRIPTION: This example shows the integration of the previously defined `MyCustomLabel` within a React Aria `TagGroup`. By placing `MyCustomLabel` inside `TagGroup`, it automatically receives necessary props and context via `LabelContext`, allowing it to function correctly as the group's label while retaining its custom styling or implementation. Assumes existence of `MyCustomLabel` component and depends on `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/*- end highlight -*/}\n  {/* ... */}\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Checkbox Group with State Management\nDESCRIPTION: Example showing how to create a controlled checkbox group with React state to manage the selected values and handle changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(['soccer', 'baseball']);\n\n  return (\n    <CheckboxGroup label=\"Favorite sports (controlled)\" value={selected} onChange={setSelected}>\n      <Checkbox value=\"soccer\">Soccer</Checkbox>\n      <Checkbox value=\"baseball\">Baseball</Checkbox>\n      <Checkbox value=\"basketball\">Basketball</Checkbox>\n    </CheckboxGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom First Day of Week in React Spectrum RangeCalendar using TSX\nDESCRIPTION: Explains how to override the locale's default first day of the week by setting the `firstDayOfWeek` prop to a specific weekday abbreviation string (e.g., 'mon' for Monday). This changes the starting column of the calendar grid.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyRangeCalendar aria-label=\"Trip dates\" firstDayOfWeek=\"mon\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Calendar in React Spectrum (TypeScript)\nDESCRIPTION: Illustrates use of the isDisabled prop to render a non-interactive Calendar. Depends on MyCalendar being a component that understands aria-label and isDisabled. Input: None (Calendar is static). Output: Read-only calendar UI; user cannot select or focus any cells. Limitation: Calendar is no longer interactive.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n<MyCalendar aria-label=\"Event date\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchAutocomplete with Manual Trigger in React Spectrum\nDESCRIPTION: This example shows how to configure a SearchAutocomplete component with the 'manual' menuTrigger option, where the dropdown menu only opens when the user clicks the field button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Favorite Animal\" menuTrigger=\"manual\">\n  <Item>Red Panda</Item>\n  <Item>Cat</Item>\n  <Item>Dog</Item>\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Structuring useTimeFieldState Documentation Content (Markdown/JSX)\nDESCRIPTION: This snippet defines the Markdown and embedded React/JSX markup for the documentation of useTimeFieldState. It sets metadata such as category and keywords, injects a dynamic description and header info from documentation sources, presents an API section with a dynamic function reference, and provides a usage example. All references are dynamically sourced from imported docs and packageData, requiring a compatible documentation build system to resolve these custom elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useTimeFieldState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncategory: Date and Time\nkeywords: [date, time, field, state]\n---\n\n# useTimeFieldState\n\n<PageDescription>{docs.exports.useTimeFieldState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={[\\'useTimeFieldState\\']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useTimeFieldState} links={docs.links} />\n\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useTimeFieldState.return.id]} />\n\n## Example\n\nSee the docs for [useTimeField](/react-aria/useTimeField.html) in react-aria for an example of `useTimeFieldState`.\n```\n\n----------------------------------------\n\nTITLE: Controlling Calendar Value and Handling Change Events in React Spectrum (TypeScript)\nDESCRIPTION: This snippet demonstrates both uncontrolled and controlled usage of Calendar with an initial value. It uses React useState to hold a controlled date state and parseDate from the @internationalized/date package for value parsing. Props 'defaultValue' and 'value' specify uncontrolled and controlled values, respectively. 'onChange' updates the state in the controlled example. Input: aria-label, value, defaultValue, onChange. Output: one calendar with a fixed date, another with stateful changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <Calendar\n        aria-label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <Calendar\n        aria-label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling React Aria SSR Support for React < 18 with SSRProvider (TSX)\nDESCRIPTION: Shows how to wrap the main application component (`App`) with the `SSRProvider` from `@react-aria/ssr`. This wrapper is required only when using React 16 or 17 to ensure React Aria hooks correctly identify the SSR context and maintain consistency between server-rendered HTML and client-side hydration for features like automatic ID generation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n// Only needed if you are using React 16 or 17.\nimport {SSRProvider} from '@react-aria/ssr';\n\n<SSRProvider>\n  <App />\n</SSRProvider>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Generics with Custom Toast Content\nDESCRIPTION: Demonstrates how to leverage TypeScript generics to create custom toast objects with structured content. This example uses a custom interface that includes both title and description fields.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {QueuedToast} from '@react-stately/toast';\n\ninterface MyToast {\n  title: string,\n  description: string\n}\n\nfunction ToastProvider() {\n  let state = useToastState<MyToast>();\n\n  // ...\n}\n\ninterface ToastProps {\n  toast: QueuedToast<MyToast>\n}\n\nfunction Toast(props: ToastProps) {\n  // ...\n\n  let {toastProps, titleProps, descriptionProps, closeButtonProps} = useToast(props, state, ref);\n\n  return (\n    <div {...toastProps} ref={ref} className=\"toast\">\n      <div>\n        <div {...titleProps}>{props.toast.content.title}</div>\n        <div {...descriptionProps}>{props.toast.content.description}</div>\n      </div>\n      <Button {...closeButtonProps}>x</Button>\n    </div>\n  );\n}\n\n// Queuing a toast\nstate.add({title: 'Success!', description: 'Toast is done.'});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vite Development Server\nDESCRIPTION: Commands for installing dependencies and starting the Vite development server. After running these commands, the application will be available at http://localhost:5173.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-vite-project/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Basic ColorWheel Usage with Default Value in TSX\nDESCRIPTION: Demonstrates the basic implementation of the `ColorWheel` component, setting an initial uncontrolled value using the `defaultValue` prop with an HSL string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorWheel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorWheel defaultValue=\"hsl(30, 100%, 50%)\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag Preview in React Component\nDESCRIPTION: This code shows how to create a custom drag preview using the renderDragPreview function in useDragAndDrop. It displays the first item's name and a badge with the total count of dragged items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\nimport {useDragAndDrop} from 'react-aria-components';\n\nfunction Example() {\n  let {dragAndDropHooks} = useDragAndDrop({\n    // ...\n    getItems: (keys) => [...keys].map(key => ({\n      'text/plain': list.getItem(key).name\n    })),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys);\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys);\n      }\n    },\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    }\n  });\n\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},\n      {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},\n      {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},\n      {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}\n    ]\n  });\n\n  return (\n    <Table\n      aria-label=\"Files\"\n      selectionMode=\"multiple\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader>\n        <Column></Column>\n        <Column><MyCheckbox slot=\"selection\" /></Column>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n        <Column>Date Modified</Column>\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            <Cell><Button slot=\"drag\">≡</Button></Cell>\n            <Cell><MyCheckbox slot=\"selection\" /></Cell>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n            <Cell>{item.date}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Overlay Entry/Exit Animations with CSS Transitions - CSS\nDESCRIPTION: This snippet demonstrates how to apply opacity transitions to overlay components (such as Popover) using the [data-entering] and [data-exiting] states. The main class sets a 300ms opacity transition, and specific selectors configure entry/exit state styling. No build dependencies are required, but this should be used within a project leveraging React Aria components with DOM data attributes. The main input is the state of the component, while the output is a smooth fade-in/out effect. Only opacity transitions are handled; additional properties must be explicitly defined.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\n  transition: opacity 300ms;\n\n  &[data-entering],\n  &[data-exiting] {\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag Preview in TableView with React Spectrum\nDESCRIPTION: This code demonstrates how to create a custom drag preview for a TableView component using the renderPreview prop in the useDragAndDrop hook. The preview shows the dragged keys and the key that initiated the drag with custom styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {View} from '@react-spectrum/view';\n\nfunction CustomDragPreviewExample() {\n  let columns = [\n    {name: 'Name', id: 'name'},\n    {name: 'Type', id: 'type'},\n    {name: 'Date Modified', id: 'date'}\n  ];\n\n  let list = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/3/2020'},\n      {id: '2', type: 'file', name: 'Adobe XD', date: '2/2/2020'},\n      {id: '3', type: 'folder', name: 'Documents', date: '5/1/2020', childNodes: []},\n      {id: '4', type: 'file', name: 'Adobe InDesign', date: '5/9/2020'},\n      {id: '5', type: 'folder', name: 'Utilities', date: '12/7/2020', childNodes: []},\n      {id: '6', type: 'file', name: 'Adobe AfterEffects', date: '6/1/2020'}\n    ]\n  });\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems: (keys) => [...keys].map(key => {\n      let item = list.getItem(key);\n      return {\n        'custom-app-type': JSON.stringify(item),\n        'text/plain': item.name\n      };\n    }),\n    /*- begin highlight -*/\n    renderPreview: (keys, draggedKey) => (\n      <View backgroundColor=\"gray-50\" padding=\"size-100\" borderRadius=\"medium\" borderWidth=\"thin\" borderColor=\"blue-500\">\n        <strong>Custom Preview</strong>\n        <div>Keys: [{[...keys].join(', ')}]</div>\n        <div>Dragged: {draggedKey}</div>\n      </View>\n    )\n    /*- end highlight -*/\n  });\n  return (\n    <TableView\n      aria-label=\"Draggable TableView example with custom drag preview\"\n      selectionMode=\"multiple\"\n      height=\"size-3600\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Dialog Anchor Example\nDESCRIPTION: Shows how to override the default trigger anchoring by providing a separate ref to anchor the dialog to a different element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let ref = React.useRef(null)\n\n  return (\n    <Flex gap=\"size-1000\">\n      <DialogTrigger type=\"popover\" targetRef={ref}>\n        <ActionButton>Trigger</ActionButton>\n        <Dialog>\n          <Heading>The Heading</Heading>\n          <Divider />\n          <Content>\n            <Text>\n              This is a popover anchored to the span.\n            </Text>\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n      <span\n        ref={ref}\n        style={{width: '100px'}}>\n        Popover appears over here\n      </span>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom-Sized ColorArea Component in React Spectrum\nDESCRIPTION: This example shows how to customize the size of a ColorArea component by setting specific size and maxWidth properties. The component is wrapped in a Flex container with a vertical column layout and spacing between elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\n\n<Flex direction=\"column\" gap=\"size-300\">\n  <ColorArea defaultValue=\"#7f0000\" size=\"size-3600\" maxWidth=\"100%\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Link Component Inside Breadcrumbs - TSX\nDESCRIPTION: Demonstrates how to insert the MyCustomLink component as a child of Breadcrumb within Breadcrumbs. This leverages the context integration from the previous example to allow custom link styles and behaviors while retaining compatibility with React Aria's state management. Prerequisites: React, the MyCustomLink component, Breadcrumbs, Breadcrumb, and appropriate React Aria imports.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumbs>\n  {/*- begin highlight -*/}\n  <Breadcrumb><MyCustomLink>Custom link</MyCustomLink></Breadcrumb>\n  {/*- end highlight -*/}\n  {/* ... */}\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Controlling Focused Date in RangeCalendar (TSX)\nDESCRIPTION: This example demonstrates how to control the focused date in a RangeCalendar using the focusedValue and onFocusChange props. It also includes a button to reset the focused date to the initial value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\n\n  return (\n    <Flex direction=\"column\" alignItems=\"start\" gap=\"size-200\">\n      <ActionButton onPress={() => setFocusedDate(defaultDate)}>Reset focused date</ActionButton>\n      <RangeCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DateSegment Wrapper Component in TSX\nDESCRIPTION: Defines a simple React functional component `MyDateSegment` that wraps the original React Aria `DateSegment`. It forwards all props (`{...props}`) and adds a custom CSS class (`my-date-segment`) for specific styling purposes. This demonstrates a common pattern for extending or customizing React Aria components through composition without altering the original component's logic.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyDateSegment(props) {\n  return <MyDateSegment {...props} className=\"my-date-segment\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling TreeView Selection in React Spectrum (TypeScript)\nDESCRIPTION: This snippet demonstrates a fully controlled TreeView selection state using React Spectrum's TreeView and React's useState. The selectedKeys state is passed to ExampleTree, along with an onSelectionChange handler that updates the state. Required dependencies are @adobe/react-spectrum, React, ExampleTree, and a suitable tree data structure. The key parameters are selectedKeys (Set<string>) and setSelectedKeys (state updater). Inputs include user selection changes; output updates selection state. Useful as a reference for programmatically controlling selection in hierarchical components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction ControlledSelection() {\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['document-a', 'document-b']));\n\n  return (\n    <ExampleTree\n      aria-label=\"Example tree with controlled selection\"\n      defaultExpandedKeys={['projects', 'project-2']}\n      /*- begin highlight -*/\n      selectionMode=\"multiple\"\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n      /*- end highlight -*/\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Takeover Dialog Example\nDESCRIPTION: Creates a dialog that completely covers the screen, suitable for focused complex interactions like registration forms.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"fullscreenTakeover\">\n  <ActionButton>Register</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Register a new account</Heading>\n      <Divider />\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <TextField label=\"Email address\" />\n          <Checkbox>Make profile private</Checkbox>\n        </Form>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Picker with Contextual Help (React/TypeScript)\nDESCRIPTION: This example demonstrates how to add contextual help to a Picker using the ContextualHelp component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<Picker\n  label=\"Engineering major\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Major changes</Heading>\n      <Content>Once you have changed your major, you cannot change it back.</Content>\n    </ContextualHelp>\n  }>\n  <Item>Aerospace</Item>\n  <Item>Mechanical</Item>\n  <Item>Civil</Item>\n  <Item>Nuclear</Item>\n  <Item>Industrial</Item>\n  <Item>Chemical</Item>\n  <Item>Agricultural</Item>\n  <Item>Electrical</Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Tabs in React Spectrum\nDESCRIPTION: Illustrates the implementation of both controlled and uncontrolled Tabs components with selection management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let tabs = [\n    {id: 1, name: 'Keyboard Settings', children: 'No keyboard detected.'},\n    {id: 2, name: 'Mouse Settings', children: 'No mouse detected.'},\n    {id: 3, name: 'Gamepad Settings', children: 'No gamepad detected'}\n  ];\n  type Tab = typeof tabs[0];\n  let [tab, setTab] = React.useState<Key>(2);\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <span id=\"label-2\">Settings (uncontrolled)</span>\n      <Tabs aria-labelledby=\"label-2\" items={tabs} defaultSelectedKey={2} marginBottom=\"size-400\">\n        <TabList>\n          {(item: Tab) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n      <span id=\"label-3\">Settings (controlled)</span>\n      <Tabs aria-labelledby=\"label-3\" items={tabs} selectedKey={tab} onSelectionChange={setTab}>\n        <TabList>\n          {(item: Tab) => (\n            <Item>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <TabPanels>\n          {(item: Tab) => (\n            <Item>\n              {item.children}\n            </Item>\n          )}\n        </TabPanels>\n      </Tabs>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SearchField with HTML Form Integration in React\nDESCRIPTION: This example demonstrates how to use the SearchField component with HTML form attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField label=\"Email\" name=\"email\" type=\"email\" />\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in React Spectrum DateField (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `hideTimeZone` prop on the React Spectrum `DateField` component. When set, this boolean prop prevents the display of the time zone abbreviation, which is typically shown when the component's value is a `ZonedDateTime` object. The example uses `parseZonedDateTime` to set a default value with a specific time zone.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in TimeField for React Spectrum\nDESCRIPTION: This snippet demonstrates how to hide the time zone abbreviation in a TimeField component when using a ZonedDateTime value. This can be useful when the time zone is displayed elsewhere or implicit in the use case.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet TimeField in React Spectrum\nDESCRIPTION: Example of a TimeField with the quiet visual styling applied.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField label=\"Event time\" isQuiet />\n```\n\n----------------------------------------\n\nTITLE: Formatting Meter Values with formatOptions\nDESCRIPTION: Shows how to customize the value format using the formatOptions prop, which accepts the same options as Intl.NumberFormat.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Meter\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  value={60} />\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Horizontal Orientation\nDESCRIPTION: Demonstrates how to change the orientation of a RadioGroup to horizontal.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite avatar\" orientation=\"horizontal\">\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Description Text to React Aria CheckboxGroup (TSX)\nDESCRIPTION: This TSX snippet demonstrates using the `Text` component with `slot=\"description\"` to provide help text associated with a `CheckboxGroup`. This improves accessibility and user guidance. Requires `CheckboxGroup`, `Checkbox`, and `Text` from `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup>\n  <Label>Pets</Label>\n  <MyCheckbox value=\"dogs\">Dogs</MyCheckbox>\n  <MyCheckbox value=\"cats\">Cats</MyCheckbox>\n  <MyCheckbox value=\"dragons\">Dragons</MyCheckbox>\n  <Text slot=\"description\">Select your pets.</Text>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Selection Behavior (Replace Mode) - TypeScript/React\nDESCRIPTION: This code snippet demonstrates changing the selection behavior of the PokemonTable component by passing selectionMode as \"multiple\" and selectionBehavior as \"replace\". This configuration enables single-click replacement selection while maintaining multi-select via modifier keys, closely mirroring native desktop behaviors. The snippet expects the referenced PokemonTable component and React/TypeScript setup to be present.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonTable selectionMode=\"multiple\" selectionBehavior=\"replace\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tab Navigation Component\nDESCRIPTION: Demonstrates how to create a custom TabNavigation component that uses TabListStateContext to navigate between tabs programmatically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TabListStateContext, Button} from 'react-aria-components';\n\nfunction TabNavigation() {\n  let state = React.useContext(TabListStateContext);\n  let prevKey = state?.collection.getKeyBefore(state.selectedKey);\n  let nextKey = state?.collection.getKeyAfter(state.selectedKey);\n  let onPrev = prevKey != null ? () => state.setSelectedKey(prevKey) : null;\n  let onNext = nextKey != null ? () => state.setSelectedKey(nextKey) : null;\n  return (\n    <div className=\"button-group\">\n      <Button aria-label=\"Previous tab\" onPress={onPrev}>←</Button>\n      <Button aria-label=\"Next tab\" onPress={onNext}>→</Button>\n    </div>\n  );\n}\n\n<Tabs>\n  <div style={{display: 'flex'}}>\n    <TabList aria-label=\"Tabs\" style={{flex: 1}}>\n      <Tab id=\"home\">Home</Tab>\n      <Tab id=\"projects\">Projects</Tab>\n      <Tab id=\"search\">Search</Tab>\n    </TabList>\n    <TabNavigation />\n  </div>\n  <TabPanel id=\"home\">Home</TabPanel>\n  <TabPanel id=\"projects\">Projects</TabPanel>\n  <TabPanel id=\"search\">Search</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Initializing User and Creating ARIA Pattern Tester in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the User object from @react-aria/test-utils, and create an ARIA pattern tester for a table component in a test file. It shows how to specify the interaction type and timer advancement method.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/testing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// YourTest.test.ts\nimport {screen} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\n// Provide whatever method of advancing timers you use in your test, this example assumes Jest with fake timers.\n// 'interactionType' specifies what mode of interaction should be simulated by the tester\n// 'advanceTimer' is used by the tester to advance the timers in the tests for specific interactions (e.g. long press)\nlet testUtilUser = new User({interactionType: 'mouse', advanceTimer: jest.advanceTimersByTime});\n// ...\n\nit('my test case', async function () {\n  // Render your test component/app\n  render();\n  // Initialize the table tester via providing the 'Table' pattern name and the root element of said table\n  let table = testUtilUser.createTester('Table', {root: screen.getByTestId('test_table')});\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Decorative Image Usage in React Spectrum\nDESCRIPTION: Shows how to create a decorative image using empty alt text within a Flex container with fixed width.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/image/docs/Image.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex width=\"200px\">\n  <Image src=\"https://i.imgur.com/c3gTKSJ.jpg\" alt=\"\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component in React Spectrum\nDESCRIPTION: Shows how to import the Flex component from the layout package and the Image component from the image package in React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/image/docs/Image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {Image} from '@react-spectrum/image';\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Sections using JSX Components\nDESCRIPTION: Utilizes various JSX components imported from `@react-spectrum/docs` to render specific parts of the documentation page. `PageDescription` shows the hook's description, `HeaderInfo` displays package details, `FunctionAPI` renders the function signature and documentation, and `ClassAPI` shows the return type's interface details. Data is passed dynamically from the imported `docs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDatePickerState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PageDescription>{docs.exports.useDatePickerState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useDatePickerState']} />\n\n<FunctionAPI function={docs.exports.useDatePickerState} links={docs.links} />\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useDatePickerState.return.id]} />\n```\n\n----------------------------------------\n\nTITLE: Using the Selectable Component with Tree and ToggleButton\nDESCRIPTION: This example shows how to implement the Selectable component with a ToggleButton and a Tree. The ToggleButton controls whether selection mode is enabled for the Tree component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\n\n<Selectable>\n  <ToggleButton>Select</ToggleButton>\n  <PokemonEvolutionTree />\n</Selectable>\n```\n\n----------------------------------------\n\nTITLE: Conditional Styling of React Aria Button via Class Name Function (JSX)\nDESCRIPTION: This JSX snippet passes a function to the className prop of the Button to dynamically assign one of two utility classes ('bg-gray-700' or 'bg-gray-600') depending on the isPressed state. Useful with utility CSS frameworks (e.g. Tailwind). Inputs: className function with state. Output: styled button per state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Button className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in TableView with Default Selected Keys\nDESCRIPTION: This example shows how to enable multiple selection in TableView using the selectionMode prop set to 'multiple' and defaultSelectedKeys to preselect specific rows based on their keys.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<TableView aria-label=\"Example table with multiple selection\" selectionMode=\"multiple\" defaultSelectedKeys={['2', '4']}>\n  <TableHeader>\n    <Column>Name</Column>\n    <Column>Type</Column>\n    <Column align=\"end\">Level</Column>\n  </TableHeader>\n  <TableBody>\n    <Row key=\"1\">\n      <Cell>Charizard</Cell>\n      <Cell>Fire, Flying</Cell>\n      <Cell>67</Cell>\n    </Row>\n    <Row key=\"2\">\n      <Cell>Blastoise</Cell>\n      <Cell>Water</Cell>\n      <Cell>56</Cell>\n    </Row>\n    <Row key=\"3\">\n      <Cell>Venusaur</Cell>\n      <Cell>Grass, Poison</Cell>\n      <Cell>83</Cell>\n    </Row>\n    <Row key=\"4\">\n      <Cell>Pikachu</Cell>\n      <Cell>Electric</Cell>\n      <Cell>100</Cell>\n    </Row>\n  </TableBody>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: TextField with Contextual Help in React\nDESCRIPTION: This example shows how to add contextual help to the TextField component using the ContextualHelp element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<TextField\n  label=\"Password\"\n  type=\"password\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>Need help?</Heading>\n      <Content>If you're having trouble accessing your account, contact our customer support team for help.</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Options in a Select Component using TSX\nDESCRIPTION: This example demonstrates how to disable individual options within a `Select` component. The `disabledKeys` prop accepts an array of keys corresponding to the items that should be disabled. In this case, the 'Cat' and 'Kangaroo' options are made non-focusable and non-selectable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Select label=\"Favorite Animal\" disabledKeys={['cat', 'kangaroo']}>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</Select>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Format Copy with useClipboard in React\nDESCRIPTION: Example showing how to copy multiple items with different data formats (plain text, HTML, and custom formats) using the useClipboard hook, enabling rich data exchange between applications.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useClipboard.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Copyable() {\n  let {clipboardProps} = useClipboard({\n    getItems() {\n      return [{\n        'text/plain': 'hello world',\n        'text/html': '<strong>hello world</strong>',\n        'my-app-custom-type': JSON.stringify({\n          message: 'hello world',\n          style: 'bold'\n        })\n      }, {\n        'text/plain': 'foo bar',\n        'text/html': '<em>foo bar</em>',\n        'my-app-custom-type': JSON.stringify({\n          message: 'foo bar',\n          style: 'italic'\n        })\n      }];\n    }\n  });\n\n  return (\n    <div role=\"textbox\" tabIndex={0} {...clipboardProps}>\n      <div>\n        <div><strong>hello world</strong></div>\n        <div><em>foo bar</em></div>\n      </div>\n      <kbd>⌘C</kbd>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Button State with Data Attributes in CSS\nDESCRIPTION: This CSS code targets the 'pressed' state of the React Aria Button using a data attribute selector. When the [data-pressed] attribute is present, additional or different CSS rules can be applied for visual feedback. No dependencies beyond correct className and attribute propagation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Button[data-pressed] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic ListView Implementation\nDESCRIPTION: Example of ListView with dynamic items loaded from a data source with unique keys\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst items = [\n  {id: 1, name: 'Adobe Photoshop'},\n  {id: 2, name: 'Adobe XD'},\n  {id: 3, name: 'Adobe InDesign'},\n  {id: 4, name: 'Adobe AfterEffects'},\n  {id: 5, name: 'Adobe Illustrator'},\n  {id: 6, name: 'Adobe Lightroom'},\n  {id: 7, name: 'Adobe Premiere Pro'},\n  {id: 8, name: 'Adobe Fresco'},\n  {id: 9, name: 'Adobe Dreamweaver'}\n];\n\n<ListView items={items} selectionMode=\"multiple\" maxWidth=\"size-6000\" height=\"250px\" aria-label=\"Dynamic ListView items example\">\n  {(item) => <Item>{item.name}</Item>}\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Handling ColorPicker onChange Event and String Output (TypeScript/TSX)\nDESCRIPTION: This code snippet handles the `onChange` event to update state in response to user color edits. ColorPicker is controlled by a `value` prop, and the color value is displayed as a string using the toString method with the 'hsl' color format. parseColor is imported to initialize the color object. Useful for reflecting user selections live.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from '@react-spectrum/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n\n  return (\n    <div>\n      <ColorPicker\n        label=\"Color\"\n        value={value}\n        onChange={setValue}>\n        <ColorEditor />\n      </ColorPicker>\n      <p>Selected color: {value.toString('hsl')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Slider in React Spectrum\nDESCRIPTION: Demonstrates how to create a vertically oriented slider using the orientation prop with \"vertical\" value. Uses aria-label instead of label to create a slider without a visible label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  orientation=\"vertical\"\n  aria-label=\"Opacity\"\n  maxValue={1}\n  step={0.01} />\n```\n\n----------------------------------------\n\nTITLE: Triggering Toast via Queue (TypeScript)\nDESCRIPTION: This snippet shows how to trigger a toast notification programmatically from any component by invoking the queue.add method with a toast content object. It requires an existing global queue instance with appropriate content interface. The Button component handles the onPress event to add a new visible toast. The input is an object containing 'title' and 'description', and the output is a visually rendered toast in the ToastRegion queue. Integrates with the established Toast system and doesn't require additional parameters beyond queue context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Button\n  onPress={() => queue.add({\n    title: 'Toast complete!',\n    description: 'Great success.'\n  })}>\n  Toast\n</Button>\n\n```\n\n----------------------------------------\n\nTITLE: Appending Items to the End of List - useListData Hook - TypeScript\nDESCRIPTION: Shows how to append single or multiple items to the end of the list using the append method. This call keeps existing items intact and adds to the end, updating state in an immutable fashion. Takes new items as arguments and returns updated React state for re-rendering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Append an item\nlist.append({name: 'Horse'});\n\n// Append multiple items\nlist.append({name: 'Horse'}, {name: 'Giraffe'});\n\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for React Aria Components\nDESCRIPTION: Demonstrates how to configure Tailwind CSS for use with React Aria Components. Shows CSS imports for Tailwind v4 and provides configuration details for Tailwind v3 including necessary plugins: tailwindcss-react-aria-components and tailwindcss-animate.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/user-combobox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Circular ProgressBar with SVG\nDESCRIPTION: This example shows how to implement a circular ProgressBar using SVG, which can be used for both determinate and indeterminate progress indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ProgressBar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet center = 16;\nlet strokeWidth = 4;\nlet r = 16 - strokeWidth;\nlet c = 2 * r * Math.PI;\n\n<ProgressBar aria-label=\"Loading…\" value={60}>\n  {({percentage}) => <>\n    <svg width={64} height={64} viewBox=\"0 0 32 32\" fill=\"none\" strokeWidth={strokeWidth}>\n      <circle cx={center} cy={center} r={r - (strokeWidth / 2 - 0.25)} stroke=\"var(--border-color)\" strokeWidth={0.5} />\n      <circle cx={center} cy={center} r={r + (strokeWidth / 2 - 0.25)} stroke=\"var(--border-color)\" strokeWidth={0.5} />\n      <circle\n        cx={center}\n        cy={center}\n        r={r}\n        stroke=\"var(--highlight-background)\"\n        strokeDasharray={`${c} ${c}`}\n        strokeDashoffset={c - percentage / 100 * c}\n        strokeLinecap=\"round\"\n        transform=\"rotate(-90 16 16)\" />\n    </svg>\n  </>}\n</ProgressBar>\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Form Validation with DateField\nDESCRIPTION: This example demonstrates how to use native form validation with DateField by setting the validationBehavior prop on the Form component to 'native'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateField label=\"Appointment date\" name=\"date\" isRequired />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing String Comparison with useCollator in React\nDESCRIPTION: Example showing how to use the useCollator hook to compare two strings based on the current locale. The component includes two text inputs and displays the comparison result. It demonstrates state management with useState and locale-aware string comparison.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/useCollator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCollator} from '@react-aria/i18n';\n\nfunction Example() {\n  let [first, setFirst] = React.useState('');\n  let [second, setSecond] = React.useState('');\n\n  let collator = useCollator();\n  let result = collator.compare(first, second);\n\n  return (\n    <>\n      <div>\n        <label htmlFor=\"first-string\">First string</label>\n        <input\n          id=\"first-string\"\n          value={first}\n          onChange={e => setFirst(e.target.value)} />\n        <label htmlFor=\"second-string\">Second string</label>\n        <input\n          id=\"second-string\"\n          value={second}\n          onChange={e => setSecond(e.target.value)} />\n      </div>\n      <p>\n        {result === 0\n          ? 'The strings are the same'\n          : result < 0\n            ? 'First comes before second'\n            : 'Second comes before first'\n        }\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MenuTrigger Implementation\nDESCRIPTION: Simple example showing how to implement a basic menu trigger with action items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/MenuTrigger.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu>\n    <Item>Cut</Item>\n    <Item>Copy</Item>\n    <Item>Paste</Item>\n  </Menu>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'Link' component. It renders a hyperlink, allowing a user to navigate to another page or resource. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_42\n\nLANGUAGE: jsx\nCODE:\n```\n<Link />\n```\n\n----------------------------------------\n\nTITLE: Configuring RGB Color Model with ColorArea - React Spectrum - TypeScript/React\nDESCRIPTION: Demonstrates setting up a ColorArea with the RGB color model in React Spectrum, managing color state with React hooks, and dynamically assigning color channels to the ColorArea and ColorSlider components. Requires '@react-stately/color', React, and React Spectrum components. Accepts user interaction for RGB channels and visual output via <ColorSwatch>.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\\n\\nfunction Example() {\\n  let [\\n    color,\\n    setColor\\n  ] = React.useState(parseColor('rgb(100, 149, 237)'));\\n  let [\\n    rChannel,\\n    gChannel,\\n    bChannel\\n  ] = color.getColorChannels();\\n  return (\\n    <>\\n      <div style={{display: 'inline-flex', flexWrap: 'wrap'}}>\\n        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>\\n          <label id=\\\"gbr-label-id-1\\\">x: {color.getChannelName(gChannel, 'en-US')}, y: {color.getChannelName(bChannel, 'en-US')}</label>\\n          <ColorArea\\n            aria-labelledby=\\\"gbr-label-id-1\\\"\\n            value={color}\\n            onChange={setColor}\\n            xChannel={gChannel}\\n            yChannel={bChannel} />\\n          <ColorSlider\\n              channel={rChannel}\\n              value={color}\\n              onChange={setColor} />\\n        </div>\\n        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>\\n          <label id=\\\"brg-label-id-1\\\">x: {color.getChannelName(bChannel, 'en-US')}, y: {color.getChannelName(rChannel, 'en-US')}</label>\\n          <ColorArea\\n            aria-labelledby=\\\"brg-label-id-1\\\"\\n            value={color}\\n            onChange={setColor}\\n            xChannel={bChannel}\\n            yChannel={rChannel} />\\n          <ColorSlider\\n              channel={gChannel}\\n              value={color}\\n              onChange={setColor} />\\n        </div>\\n        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>\\n          <label id=\\\"rgb-label-id-1\\\">x: {color.getChannelName(rChannel, 'en-US')}, y: {color.getChannelName(gChannel, 'en-US')}</label>\\n          <ColorArea\\n            aria-labelledby=\\\"rgb-label-id-1\\\"\\n            value={color}\\n            onChange={setColor}\\n            xChannel={rChannel}\\n            yChannel={gChannel} />\\n          <ColorSlider\\n              channel={bChannel}\\n              value={color}\\n              onChange={setColor} />\\n        </div>\\n      </div>\\n      <p>Current RGB color value: <ColorSwatch color={color} style={{width: '16px', height: '16px', verticalAlign: 'text-bottom'}} /> {color.toString('rgb')}</p>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Managing ComboBox Input Value (Uncontrolled and Controlled) in TSX\nDESCRIPTION: Shows two examples of managing the ComboBox input value. The first uses `defaultInputValue` for an uncontrolled initial value. The second uses `inputValue` and `onInputChange` with `React.useState` for a controlled value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntsx example\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Adobe Photoshop'},\n    {id: 2, name: 'Adobe XD'},\n    {id: 3, name: 'Adobe InDesign'},\n    {id: 4, name: 'Adobe AfterEffects'},\n    {id: 5, name: 'Adobe Illustrator'},\n    {id: 6, name: 'Adobe Lightroom'},\n    {id: 7, name: 'Adobe Premiere Pro'},\n    {id: 8, name: 'Adobe Fresco'},\n    {id: 9, name: 'Adobe Dreamweaver'}\n  ];\n  let [value, setValue] = React.useState('Adobe XD');\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <ComboBox\n        label=\"Adobe product (Uncontrolled)\"\n        defaultItems={options}\n        defaultInputValue=\"Adobe XD\">\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n\n      <ComboBox\n        label=\"Pick an Adobe product (Controlled)\"\n        defaultItems={options}\n        inputValue={value}\n        onInputChange={setValue}>\n        {item => <Item>{item.name}</Item>}\n      </ComboBox>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling and Setting ReadOnly State in React Spectrum NumberField (TSX)\nDESCRIPTION: Illustrates how to make a React Spectrum `NumberField` non-interactive using the `isDisabled` and `isReadOnly` props. `isDisabled` prevents all interaction including focus and form submission participation, while `isReadOnly` prevents editing but allows focus and selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<NumberField label=\"Disabled\" isDisabled value={25} />\n<NumberField label=\"Read only\" isReadOnly value={32} />\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Circular Progress Indicator with React Aria\nDESCRIPTION: This example shows how to implement a circular progress indicator (spinner) using SVG and the useProgressBar hook. It supports both determinate and indeterminate states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/progress/docs/useProgressBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ProgressCircle(props) {\n  let {isIndeterminate, value, minValue = 0, maxValue = 100} = props;\n  let {progressBarProps} = useProgressBar(props);\n\n  let center = 16;\n  let strokeWidth = 4;\n  let r = 16 - strokeWidth;\n  let c = 2 * r * Math.PI;\n  let percentage = isIndeterminate ? 0.25 : (value - minValue) / (maxValue - minValue);\n  let offset = c - percentage * c;\n\n  return (\n    <svg\n      {...progressBarProps}\n      width={32}\n      height={32}\n      viewBox=\"0 0 32 32\"\n      fill=\"none\"\n      strokeWidth={strokeWidth}>\n      <circle\n        role=\"presentation\"\n        cx={center}\n        cy={center}\n        r={r}\n        stroke=\"gray\" />\n      <circle\n        role=\"presentation\"\n        cx={center}\n        cy={center}\n        r={r}\n        stroke=\"orange\"\n        strokeDasharray={`${c} ${c}`}\n        strokeDashoffset={offset}\n        transform=\"rotate(-90 16 16)\">\n        {props.isIndeterminate &&\n          <animateTransform\n            attributeName=\"transform\"\n            type=\"rotate\"\n            begin=\"0s\"\n            dur=\"1s\"\n            from=\"0 16 16\"\n            to=\"360 16 16\"\n            repeatCount=\"indefinite\" />\n        }\n      </circle>\n    </svg>\n  );\n}\n\n<ProgressCircle aria-label=\"Loading…\" value={60} />\n```\n\n----------------------------------------\n\nTITLE: Implementing DateField Component in React with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a DateField component using React Aria hooks. It includes a DateSegment subcomponent for rendering individual date segments.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLocale} from '@react-aria/i18n';\nimport {useDateFieldState} from '@react-stately/datepicker';\nimport {useDateField, useDateSegment} from '@react-aria/datepicker';\n\nfunction DateField(props) {\n  let {locale} = useLocale();\n  let state = useDateFieldState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  let ref = React.useRef(null);\n  let {labelProps, fieldProps} = useDateField(props, state, ref);\n\n  return (\n    <div className=\"wrapper\">\n      <span {...labelProps}>{props.label}</span>\n      <div {...fieldProps} ref={ref} className=\"field\">\n        {state.segments.map((segment, i) =>\n          <DateSegment key={i} segment={segment} state={state} />\n        )}\n        {state.isInvalid &&\n          <span aria-hidden=\"true\">🚫</span>\n        }\n      </div>\n    </div>\n  );\n}\n\nfunction DateSegment({segment, state}) {\n  let ref = React.useRef(null);\n  let {segmentProps} = useDateSegment(segment, state, ref);\n\n  return (\n    <div\n      {...segmentProps}\n      ref={ref}\n      className={`segment ${segment.isPlaceholder ? 'placeholder' : ''}`}>\n      {segment.text}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Slider with Contextual Help in React Spectrum\nDESCRIPTION: Shows how to add contextual help to a Slider using the ContextualHelp component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<Slider\n  label=\"Exposure\"\n  minValue={-100}\n  maxValue={100}\n  defaultValue={0}\n  formatOptions={{signDisplay: 'always'}}\n  isFilled\n  fillOffset={0}\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is exposure?</Heading>\n      <Content>Exposure adjusts how bright the image is.</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Parsing Absolute Dates into Local Time Zone for DateRangePicker (TypeScript/React)\nDESCRIPTION: This snippet demonstrates the use of parseAbsoluteToLocal from @internationalized/date to parse UTC ISO date-time strings into values suitable for the local time zone in the DateRangePicker's defaultValue. Dates are displayed relative to the user's local time zone. Dependency: @internationalized/date. Inputs are ISO UTC strings; outputs are date ranges adjusted to local time.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\\n\\n<DateRangePicker\\n  label=\\\"Date range\\\"\\n  defaultValue={{\\n    start: parseAbsoluteToLocal('2021-11-07T07:45:00Z'),\\n    end: parseAbsoluteToLocal('2021-11-08T14:25:00Z')\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Read-only SearchField in React\nDESCRIPTION: This example shows how to create a read-only SearchField component with a default value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField label=\"Search\" defaultValue=\"abc@adobe.com\" isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Basic ListView Implementation\nDESCRIPTION: Simple example of ListView with static items and multiple selection mode\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ListView selectionMode=\"multiple\" aria-label=\"Static ListView items example\" maxWidth=\"size-6000\">\n  <Item>Adobe Photoshop</Item>\n  <Item>Adobe InDesign</Item>\n  <Item>Adobe AfterEffects</Item>\n  <Item>Adobe Illustrator</Item>\n  <Item>Adobe Lightroom</Item>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: Form Validation with Server Errors in React Aria\nDESCRIPTION: Example showing how to use the validationErrors prop to display server-side validation errors in a Form.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationErrors={{username: 'Sorry, this username is taken.'}}>\n  <TextField name=\"username\">\n    <Label>Username</Label>\n    <Input />\n    <FieldError />\n  </TextField>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Dismissal of Toast in React Spectrum\nDESCRIPTION: Illustrates how to programmatically dismiss a toast using the close function returned by ToastQueue methods.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/toast/docs/Toast.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx example\nCODE:\n```\nfunction Example() {\n  let [close, setClose] = React.useState(null);\n\n  return (\n    <Button\n      onPress={() => {\n        if (!close) {\n          let close = ToastQueue.negative('Unable to save', {onClose: () => setClose(null)});\n          setClose(() => close);\n        } else {\n          close();\n        }\n      }}\n      variant=\"primary\">\n      {close ? 'Hide' : 'Show'} Toast\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NumberField Stepping and Decimal Formatting in TSX\nDESCRIPTION: This snippet illustrates how to control the stepping behavior and decimal formatting of the `NumberField`. The `step` prop is set to 0.1, defining the increment/decrement value. The `formatOptions` prop controls the display format: `signDisplay: 'exceptZero'` shows the sign for non-zero values, and `minimumFractionDigits` and `maximumFractionDigits` control the precision.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/how-we-internationalized-our-numberfield.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField\n  label=\"Exposure\"\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }}\n  defaultValue={0}\n  step={0.1} />\n```\n\n----------------------------------------\n\nTITLE: Basic ColorField Usage Example in React Aria Components\nDESCRIPTION: Demonstrates a simple implementation of a ColorField component with a label and input, showing the basic usage pattern.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {ColorField, Label, Input} from 'react-aria-components';\n\n<ColorField defaultValue=\"#ff0\">\n  <Label>Primary Color</Label>\n  <Input />\n</ColorField>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom ClassName to React Aria DateInput (JSX)\nDESCRIPTION: This JSX snippet demonstrates overriding the default `react-aria-DateInput` class by providing a custom string to the `className` prop on the `DateInput` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<DateInput className=\"my-date-input\">\n  {/* ... */}\n</DateInput>\n```\n\n----------------------------------------\n\nTITLE: React Spectrum Released Package Versions\nDESCRIPTION: Complete listing of version numbers for all packages in the React Spectrum ecosystem, including core components, accessibility helpers, state management utilities, TypeScript types, and icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-05-24.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- @adobe/react-spectrum@3.27.0\n- @react-aria/accordion@3.0.0-alpha.18\n- @react-aria/actiongroup@3.5.3\n- @react-aria/aria-modal-polyfill@3.7.2\n- @react-aria/autocomplete@3.0.0-alpha.17\n- @react-aria/breadcrumbs@3.5.2\n- @react-aria/button@3.7.2\n- @react-aria/calendar@3.3.0\n- @react-aria/checkbox@3.9.1\n- @react-aria/color@3.0.0-beta.21\n- @react-aria/combobox@3.6.1\n- @react-aria/datepicker@3.4.1\n- @react-aria/dialog@3.5.2\n- @react-aria/dnd@3.2.1\n- @react-aria/focus@3.12.1\n- @react-aria/grid@3.7.1\n- @react-aria/gridlist@3.4.0\n- @react-aria/i18n@3.7.2\n- @react-aria/interactions@3.15.1\n- @react-aria/label@3.5.2\n- @react-aria/landmark@3.0.0-beta.1\n- @react-aria/link@3.5.1\n- @react-aria/listbox@3.9.1\n- @react-aria/menu@3.9.1\n- @react-aria/meter@3.4.2\n- @react-aria/numberfield@3.5.1\n- @react-aria/overlays@3.14.1\n- @react-aria/progress@3.4.2\n- @react-aria/radio@3.6.1\n- @react-aria/searchfield@3.5.2\n- @react-aria/select@3.10.1\n- @react-aria/selection@3.15.0\n- @react-aria/separator@3.3.2\n- @react-aria/slider@3.4.1\n- @react-aria/spinbutton@3.4.1\n- @react-aria/switch@3.5.1\n- @react-aria/table@3.9.1\n- @react-aria/tabs@3.6.0\n- @react-aria/tag@3.0.0\n- @react-aria/textfield@3.9.2\n- @react-aria/toast@3.0.0-beta.1\n- @react-aria/toggle@3.6.1\n- @react-aria/tooltip@3.5.1\n- @react-aria/utils@3.17.0\n- @react-aria/virtualizer@3.8.1\n- @react-aria/visually-hidden@3.8.1\n- @react-spectrum/accordion@3.0.0-alpha.20\n- @react-spectrum/actionbar@3.0.0\n- @react-spectrum/actiongroup@3.8.3\n- @react-spectrum/autocomplete@3.0.0-alpha.18\n- @react-spectrum/avatar@3.0.1\n- @react-spectrum/badge@3.1.2\n- @react-spectrum/breadcrumbs@3.7.3\n- @react-spectrum/button@3.12.2\n- @react-spectrum/buttongroup@3.6.2\n- @react-spectrum/calendar@3.2.2\n- @react-spectrum/card@3.0.0-alpha.19\n- @react-spectrum/checkbox@3.7.2\n- @react-spectrum/color@3.0.0-beta.22\n- @react-spectrum/combobox@3.8.3\n- @react-spectrum/contextualhelp@3.5.2\n- @react-spectrum/datepicker@3.5.1\n- @react-spectrum/dialog@3.7.2\n- @react-spectrum/divider@3.5.2\n- @react-spectrum/dnd@3.2.0\n- @react-spectrum/form@3.6.2\n- @react-spectrum/icon@3.7.2\n- @react-spectrum/illustratedmessage@3.4.2\n- @react-spectrum/image@3.4.2\n- @react-spectrum/label@3.12.1\n- @react-spectrum/labeledvalue@3.1.2\n- @react-spectrum/layout@3.5.2\n- @react-spectrum/link@3.5.2\n- @react-spectrum/list@3.5.0\n- @react-spectrum/listbox@3.10.1\n- @react-spectrum/menu@3.11.1\n- @react-spectrum/meter@3.4.2\n- @react-spectrum/numberfield@3.6.2\n- @react-spectrum/overlays@5.1.1\n- @react-spectrum/picker@3.10.3\n- @react-spectrum/progress@3.5.1\n- @react-spectrum/provider@3.7.2\n- @react-spectrum/radio@3.5.2\n- @react-spectrum/searchfield@3.7.2\n- @react-spectrum/slider@3.5.2\n- @react-spectrum/statuslight@3.5.2\n- @react-spectrum/switch@3.4.2\n- @react-spectrum/table@3.9.0\n- @react-spectrum/tabs@3.6.0\n- @react-spectrum/tag@3.0.0\n- @react-spectrum/text@3.4.2\n- @react-spectrum/textfield@3.10.2\n- @react-spectrum/theme-dark@3.5.2\n- @react-spectrum/theme-default@3.5.2\n- @react-spectrum/theme-express@3.0.0-alpha.4\n- @react-spectrum/theme-light@3.4.2\n- @react-spectrum/toast@3.0.0-beta.1\n- @react-spectrum/tooltip@3.5.1\n- @react-spectrum/utils@3.9.2\n- @react-spectrum/view@3.5.2\n- @react-spectrum/well@3.4.2\n- @react-stately/calendar@3.2.1\n- @react-stately/checkbox@3.4.2\n- @react-stately/collections@3.8.0\n- @react-stately/color@3.3.2\n- @react-stately/combobox@3.5.1\n- @react-stately/data@3.9.2\n- @react-stately/datepicker@3.4.1\n- @react-stately/dnd@3.2.1\n- @react-stately/grid@3.6.1\n- @react-stately/layout@3.12.1\n- @react-stately/list@3.8.1\n- @react-stately/menu@3.5.2\n- @react-stately/numberfield@3.4.2\n- @react-stately/overlays@3.5.2\n- @react-stately/radio@3.8.1\n- @react-stately/searchfield@3.4.2\n- @react-stately/select@3.5.1\n- @react-stately/selection@3.13.1\n- @react-stately/slider@3.3.2\n- @react-stately/table@3.9.1\n- @react-stately/tabs@3.4.1\n- @react-stately/toggle@3.5.2\n- @react-stately/tooltip@3.4.1\n- @react-stately/tree@3.6.1\n- @react-stately/virtualizer@3.5.2\n- @react-types/accordion@3.0.0-alpha.14\n- @react-types/actionbar@3.0.0\n- @react-types/actiongroup@3.4.2\n- @react-types/autocomplete@3.0.0-alpha.14\n- @react-types/avatar@3.0.0\n- @react-types/badge@3.1.2\n- @react-types/breadcrumbs@3.5.2\n- @react-types/button@3.7.3\n- @react-types/buttongroup@3.3.2\n- @react-types/calendar@3.2.1\n- @react-types/card@3.0.0-alpha.15\n- @react-types/checkbox@3.4.4\n- @react-types/color@3.0.0-beta.17\n- @react-types/combobox@3.6.2\n- @react-types/contextualhelp@3.2.2\n- @react-types/datepicker@3.3.1\n- @react-types/dialog@3.5.2\n- @react-types/divider@3.3.2\n- @react-types/form@3.5.1\n- @react-types/grid@3.1.8\n- @react-types/illustratedmessage@3.3.2\n- @react-types/image@3.3.2\n- @react-types/label@3.7.4\n- @react-types/layout@3.3.8\n- @react-types/link@3.4.2\n- @react-types/list@3.2.3\n- @react-types/listbox@3.4.2\n- @react-types/menu@3.9.1\n- @react-types/meter@3.3.2\n- @react-types/numberfield@3.4.2\n- @react-types/overlays@3.7.2\n- @react-types/progress@3.4.1\n- @react-types/provider@3.6.2\n- @react-types/radio@3.4.2\n- @react-types/searchfield@3.4.2\n- @react-types/select@3.8.1\n- @react-types/shared@3.18.1\n- @react-types/slider@3.5.1\n- @react-types/statuslight@3.3.2\n- @react-types/switch@3.3.2\n- @react-types/table@3.6.1\n- @react-types/tabs@3.3.0\n- @react-types/text@3.3.2\n- @react-types/textfield@3.7.2\n- @react-types/tooltip@3.4.1\n- @react-types/view@3.4.2\n- @react-types/well@3.3.2\n- @spectrum-icons/color@3.5.2\n- @spectrum-icons/express@3.0.0-alpha.6\n- @spectrum-icons/illustrations@3.6.2\n- @spectrum-icons/ui@3.5.2\n- @spectrum-icons/workflow@4.2.1\n- react-aria@3.25.0\n- react-aria-components@1.0.0-alpha.4\n- react-stately@3.23.0\n```\n\n----------------------------------------\n\nTITLE: Customizing GridList with Dynamic Class Names in React\nDESCRIPTION: Examples showing how to customize GridList and GridListItem components by providing custom class names, using functions that receive component states, and using render props to conditionally render elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\n<GridList className=\"my-gridlist\">\n  {/* ... */}\n</GridList>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<GridListItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</GridListItem>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<GridListItem>\n  {({selectionMode}) => (\n    <>\n      {selectionMode !== 'none' && <Checkbox />}\n      Item\n    </>\n  )}\n</GridListItem>\n```\n\n----------------------------------------\n\nTITLE: Styling Progress Indicator and Pending State Using CSS Animations for React Aria Buttons\nDESCRIPTION: This CSS defines animation keyframes and styling for a spinner and pending state. The .spinner class centers and animates a progress indicator inside a button, while the .pending class animates and hides text with opacity. These styles are designed to work alongside the PendingDelayed component. Activation is conditional via class assignment ('pending' class) based on state. No dependencies outside of standard CSS and class usage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@keyframes toggle {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n\n.spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  animation: toggle 1s steps(1);\n  opacity: 1;\n}\n\n.pending {\n  animation: toggle 1s reverse steps(1, jump-start);\n  opacity: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom First Day of Week in RangeCalendar in TSX\nDESCRIPTION: Shows how to override the locale-based default first day of the week in `RangeCalendar` by setting the `firstDayOfWeek` prop to a specific day abbreviation (e.g., 'mon').\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar aria-label=\"Trip dates\" firstDayOfWeek=\"mon\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Horizontal Color Slider Component in React\nDESCRIPTION: This example demonstrates how to create a horizontal color slider component using the useColorSlider hook. It includes a label, an output element for the current value, and handles both mouse and keyboard interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSlider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useColorSlider} from '@react-aria/color';\nimport {useColorSliderState} from '@react-stately/color';\nimport {useLocale} from '@react-aria/i18n';\nimport {useFocusRing} from '@react-aria/focus';\n\nconst TRACK_THICKNESS = 28;\nconst THUMB_SIZE = 20;\n\nfunction ColorSlider(props) {\n  let {isDisabled} = props;\n  let {locale} = useLocale();\n  let state = useColorSliderState({...props, locale});\n  let trackRef = React.useRef(null);\n  let inputRef = React.useRef(null);\n\n  // Default label to the channel name in the current locale\n  let label = props.label || state.value.getChannelName(props.channel, locale);\n\n  let {trackProps, thumbProps, inputProps, labelProps, outputProps} = useColorSlider({\n    ...props,\n    label,\n    trackRef,\n    inputRef\n  }, state);\n\n  let {focusProps, isFocusVisible} = useFocusRing();\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: 300\n      }}>\n      {/* Create a flex container for the label and output element. */}\n      <div style={{display: 'flex', alignSelf: 'stretch'}}>\n        <label {...labelProps}>{label}</label>\n        <output {...outputProps} style={{flex: '1 0 auto', textAlign: 'end'}}>\n          {state.value.formatChannelValue(props.channel, locale)}\n        </output>\n      </div>\n      {/* The track element holds the visible track line and the thumb. */}\n      <div\n        {...trackProps}\n        ref={trackRef}\n        style={{\n          ...trackProps.style,\n          height: TRACK_THICKNESS,\n          width: '100%',\n          borderRadius: 4,\n          background: isDisabled ? 'rgb(142, 142, 142)' : trackProps.style.background\n        }}>\n        <div\n          {...thumbProps}\n          style={{\n            ...thumbProps.style,\n            top: TRACK_THICKNESS / 2,\n            background: isDisabled ? 'rgb(142, 142, 142)' : state.getDisplayColor().toString('css'),\n            border: `2px solid ${isDisabled ? 'rgb(142, 142, 142)' : 'white'}`,\n            boxShadow: '0 0 0 1px black, inset 0 0 0 1px black',\n            width: isFocusVisible ? TRACK_THICKNESS + 4 : THUMB_SIZE,\n            height: isFocusVisible ? TRACK_THICKNESS + 4 : THUMB_SIZE,\n            borderRadius: '50%',\n            boxSizing: 'border-box'\n          }}>\n          <input ref={inputRef} {...inputProps} {...focusProps} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n<ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection ToggleButtonGroup (JSX)\nDESCRIPTION: Demonstrates enabling multiple selection in ToggleButtonGroup with selectionMode=\"multiple\". Each ToggleButton receives a descriptive id. Allows users to select more than one option at a time. Requires implementation within a React context and the react-aria-components dependency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButtonGroup selectionMode=\"multiple\">\n  <ToggleButton id=\"bold\">Bold</ToggleButton>\n  <ToggleButton id=\"italic\">Italic</ToggleButton>\n  <ToggleButton id=\"underline\">Underline</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Prepending Items to the Beginning of List - useListData Hook - TypeScript\nDESCRIPTION: Demonstrates prepending single or multiple items to the beginning of the list using prepend. Prepended items shift all existing items by their count, maintaining immutability and state reactivity. Accepts new items and updates internal state accordingly.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Prepend an item\nlist.prepend({name: 'Horse'});\n\n// Prepend multiple items\nlist.prepend({name: 'Horse'}, {name: 'Giraffe'});\n\n```\n\n----------------------------------------\n\nTITLE: Styling Empty GridList States with CSS (CSS)\nDESCRIPTION: Adds visual customization to the GridList when it is empty by targeting the [data-empty] attribute, centering content and applying italics. Intended to improve UX for empty-states in lists. No dependencies outside of the react-aria-GridList selector.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_20\n\nLANGUAGE: CSS\nCODE:\n```\n```css\\n.react-aria-GridList {\\n  &[data-empty] {\\n    align-items: center;\\n    justify-content: center;\\n    font-style: italic;\\n  }\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Class Name Function in Menu Items\nDESCRIPTION: Example showing how to use a function for the className prop that receives component states and returns appropriate class names, useful with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Single Page Calendar Navigation\nDESCRIPTION: Demonstrates how to implement single-month pagination in a multi-month Calendar view using the pageBehavior prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <Calendar aria-label=\"Event date\" visibleMonths={3} pageBehavior=\"single\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Unavailable Cells in React Aria Calendar using CSS\nDESCRIPTION: This CSS snippet targets unavailable date cells within a React Aria Calendar component, identified by the `data-unavailable` attribute on `.react-aria-CalendarCell`. It applies visual styles, specifically a `line-through` text decoration and sets the color using the `--invalid-color` CSS variable, to indicate that these dates cannot be selected due to custom logic (like weekends or specific blocked-off periods).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Calendar {\n  .react-aria-CalendarCell {\n    &[data-unavailable] {\n      text-decoration: line-through;\n      color: var(--invalid-color);\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Label Component Integration\nDESCRIPTION: Shows how to create a custom label component that works with React Aria Components using context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Drag Preview (css)\nDESCRIPTION: This CSS snippet provides styles for the custom drag preview element (`.drag-preview`) and the item count badge (`.badge`) shown in the corresponding TSX example. It sets dimensions, padding, alignment, colors, and border radius to visually represent the drag preview.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n.drag-preview {\n  width: 150px;\n  padding: 4px 8px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 4px;\n  background: var(--highlight-background);\n  color: var(--highlight-foreground);\n  border-radius: 4px;\n\n  .badge {\n    background: var(--highlight-foreground);\n    color: var(--highlight-background);\n    padding: 0 8px;\n    border-radius: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Calendar Focus with React Spectrum\nDESCRIPTION: Example showing how to control the focused date in a Calendar component using state management. Demonstrates setting a default focused date and handling focus changes with a reset button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\n\n  return (\n    <Flex direction=\"column\" alignItems=\"start\" gap=\"size-200\">\n      <ActionButton onPress={() => setFocusedDate(defaultDate)}>Reset focused date</ActionButton>\n      <Calendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Components in React Spectrum\nDESCRIPTION: Demonstrates the necessary imports for using DialogTrigger and related components in React Spectrum applications.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionButton, Button} from '@react-spectrum/button';\nimport {ButtonGroup} from '@react-spectrum/buttongroup';\nimport {Checkbox} from '@react-spectrum/checkbox';\nimport {Content} from '@react-spectrum/view';\nimport {Dialog, DialogTrigger} from '@react-spectrum/dialog';\nimport {Divider} from '@react-spectrum/divider';\nimport {Form} from '@react-spectrum/form';\nimport {Heading, Text} from '@react-spectrum/text';\nimport {TextField} from '@react-spectrum/textfield';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Using Center Alignment in Vertical ButtonGroup in React Spectrum (TSX)\nDESCRIPTION: Shows how to center-align a group of buttons within a vertically oriented ButtonGroup by setting the 'align' prop to 'center'. Dependencies are '@react-spectrum/buttongroup' and '@react-spectrum/button'. This configuration is applicable to empty states or content-centric layouts where buttons should be visually centered within their container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/buttongroup/docs/ButtonGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ButtonGroup orientation=\\\"vertical\\\" align=\\\"center\\\">\\n  <Button variant=\\\"secondary\\\">No, thanks</Button>\\n  <Button variant=\\\"secondary\\\">Remind me later</Button>\\n  <Button variant=\\\"primary\\\">Rate Now</Button>\\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Tray Dialog Example\nDESCRIPTION: Shows a tray dialog typically used for mobile devices or smaller screens to display notifications or brief information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"tray\">\n  <ActionButton>Check Messages</ActionButton>\n  <Dialog>\n    <Heading>New Messages</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        You have 5 new messages.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon in Button Component\nDESCRIPTION: Example of integrating the custom icon within a React Spectrum Button component with text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/custom-icons.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button, Text} from '@adobe/react-spectrum';\n\n<Button variant=\"primary\">\n  <CustomIcon />\n  <Text>Favorite</Text>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Setting First Day of Week for DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Configures the firstDayOfWeek prop to use 'mon' (Monday) as the start of the week, overriding the locale-based default. Accepts any weekday string value; useful for regional or business requirements. No extra dependencies needed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_29\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker label=\\\"Appointment date\\\" firstDayOfWeek=\\\"mon\\\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Forward Ref Custom Trigger Component for Dialog\nDESCRIPTION: Example of how to create a custom trigger component that correctly forwards the ref and spreads props to a DOM element, which is necessary for proper integration with DialogTrigger.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Dialog.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomTrigger = React.forwardRef((props, ref) => (\n  <button {...props} ref={ref} />\n));\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Page-Level CSS\nDESCRIPTION: Import statement for including the necessary page-level CSS to support light and dark themes in a React Spectrum application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-webpack-5-example/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@react-spectrum/s2/page.css\";\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Events with onChangeEnd in React Spectrum (TypeScript)\nDESCRIPTION: This snippet shows how to use the onChangeEnd prop of ColorSlider to update the color state only after the user finishes changing a slider value. The color value is displayed in real-time as a hexadecimal string in a paragraph. Requires React, ColorSlider, and parseColor; expects an initial color and outputs the hex value when changes are finalized.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSlider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\\n  let [color, setColor] = React.useState(parseColor('#7f007f'));\\n  return (\\n    <>\\n      <ColorSlider channel=\"red\" defaultValue={color} onChangeEnd={setColor} />\\n      <p>Current color value: {color.toString('hex')}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Secondary Variant Link\nDESCRIPTION: Example of Link component with secondary variant styling\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/link/docs/Link.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<p>Would you like to <Link variant=\"secondary\">learn more</Link> about this fine component?</p>\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual Items in a GridList (TypeScript)\nDESCRIPTION: Illustrates how to disable specific items in a GridList by using the isDisabled prop on individual MyItem elements. GridList supports multiple selection; the third item is disabled, affecting its interactivity and disabling its selection checkbox automatically. Requires MyGridList, MyItem, and proper CSS styling for the disabled state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\\n<MyGridList aria-label=\\\"List with disabled rows\\\" selectionMode=\\\"multiple\\\">\\n  <MyItem>Charizard</MyItem>\\n  <MyItem>Blastoise</MyItem>\\n  {/*- begin highlight -*/}\\n  <MyItem isDisabled>Venusaur</MyItem>\\n  {/*- end highlight -*/}\\n  <MyItem>Pikachu</MyItem>\\n</MyGridList>\\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Keyboard Dismissal for a Modal in React\nDESCRIPTION: This code shows how to use the `isKeyboardDismissDisabled` prop on the `ModalTrigger` component. When set, this prevents the modal from being closed by pressing the Escape key, requiring an explicit action like clicking a close button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/useModalOverlay.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ModalTrigger isKeyboardDismissDisabled label=\"Open Dialog\">\n  {close =>\n    <Dialog title=\"Notice\">\n      <p>You must close this dialog using the button below.</p>\n      <Button onPress={close}>Close</Button>\n    </Dialog>\n  }\n</ModalTrigger>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Menu with Dynamic Items Using MenuButton (TypeScript)\nDESCRIPTION: Demonstrates dynamically populating a menu by passing an array of items as a prop to MenuButton. No external dependencies beyond React and the expected MenuButton and Item components. Each item in 'items' contains unique IDs and names. The menu renders a set of Item components using a render function, and calls an alert function when an action is selected. Inputs: items array. Output: rendered menu with options derived from the array. Allows for flexible population from APIs or external data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let items = [\\n    {id: 1, name: 'New'},\\n    {id: 2, name: 'Open'},\\n    {id: 3, name: 'Close'},\\n    {id: 4, name: 'Save'},\\n    {id: 5, name: 'Duplicate'},\\n    {id: 6, name: 'Rename'},\\n    {id: 7, name: 'Move'}\\n  ];\\n\\n  return (\\n    <MenuButton label=\"Actions\" items={items} onAction={alert}>\\n      {(item) => <Item>{item.name}</Item>}\\n    </MenuButton>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Drop Operation to 'copy' in React Spectrum TableViews using TypeScript\nDESCRIPTION: Defines components for a draggable source table (`DraggableTableViewDefaultCopy`) and a droppable target table (`DroppableTableViewDefaultCopy`). The target table uses the `getDropOperation` option in `useDragAndDrop` to set the default operation to 'copy', accepting a custom drag type (`custom-app-type-copy-default`). It also generates unique IDs (`Math.random`) for copied items during insertion (`onInsert`, `onRootDrop`). The `DragIntoTablesDefaultCopy` component renders both tables with separate data lists (`useListData`) to demonstrate dragging from source to target with a default 'copy' operation. Dependencies include `react-spectrum` components and hooks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DraggableTableViewDefaultCopy(props: DndTableViewProps) {\n  let {list, columns} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems: (keys) => [...keys].map(key => {\n      let item = list.getItem(key);\n      // Setup the drag types and associated info for each dragged item.\n      return {\n        'custom-app-type-copy-default': JSON.stringify(item),\n        'text/plain': item.name\n      };\n    }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    }\n  });\n\n  return (\n    <TableView\n      aria-label=\"Draggable TableView in default copy operation example\"\n      selectionMode=\"multiple\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DroppableTableViewDefaultCopy(props: DndTableViewProps) {\n  let {list, columns} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-copy-default'],\n    /*- begin highlight -*/\n    getDropOperation: () => 'copy',\n    /*- end highlight -*/\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      /*- begin highlight -*/\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {...JSON.parse(await (item as TextDropItem).getText('custom-app-type-copy-default')), id: Math.random().toString(36).slice(2)}\n        ))\n      );\n      /*- end highlight -*/\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n\n      /*- begin highlight -*/\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {...JSON.parse(await (item as TextDropItem).getText('custom-app-type-copy-default')), id: Math.random().toString(36).slice(2)}\n        ))\n      );\n      /*- end highlight -*/\n      list.append(...processedItems);\n    }\n  });\n\n\n  return (\n    <TableView\n      aria-label=\"Droppable TableView in default copy operation example\"\n      width=\"size-5000\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            key={column.id}\n            align={column.id === 'date' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n\nfunction DragIntoTablesDefaultCopy() {\n  let columns = [\n    {name: 'Name', id: 'name'},\n    {name: 'Type', id: 'type'},\n    {name: 'Date Modified', id: 'date'}\n  ];\n\n  let sourceList = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop', date: '6/7/2020'},\n      {id: '2', type: 'file', name: 'Adobe XD', date: '4/7/2021'},\n      {id: '3', type: 'file', name: 'Adobe InDesign', date: '11/20/2010'},\n      {id: '4', type: 'file', name: 'Adobe AfterEffects', date: '1/18/2016'}\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {id: '5', type: 'file', name: 'Adobe Dreamweaver', date: '6/7/2020'},\n      {id: '6', type: 'file', name: 'Adobe Fresco', date: '2/17/2020'},\n      {id: '7', type: 'file', name: 'Adobe Connect', date: '1/23/2020'},\n      {id: '8', type: 'file', name: 'Adobe Lightroom', date: '12/17/2020'}\n    ]\n  });\n\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableTableViewDefaultCopy list={sourceList} columns={columns} />\n      <DroppableTableViewDefaultCopy list={targetList} columns={columns} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Label Component with Context\nDESCRIPTION: Implementation of a custom label component using LabelContext and useContextProps.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout in JavaScript\nDESCRIPTION: This snippet imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports `BlogPostLayout` as the default export for the file, likely setting up the main layout structure for this specific documentation or blog post page within the React Spectrum documentation site.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-10-04.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Styling Item Drop Target (css)\nDESCRIPTION: This CSS rule targets a React Aria GridListItem (`.react-aria-GridListItem`) when it is an active drop target (indicated by the `[data-drop-target]` attribute). It applies an outline and a background overlay to visually indicate that the user can drop items onto this specific list item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridListItem[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  background:var(--highlight-overlay);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic Menu with Nested Sections and Multiple Selection (TypeScript)\nDESCRIPTION: Illustrates how to build a menu using dynamic data structured in a hierarchy, with support for nested sections and multi-selection. Built with React state, MenuButton, Section, and Item components. Accepts an array of section objects, each containing child item arrays. Applies selectionMode and selection keys for multi-select functionality. Produces a MenuButton UI with dynamically generated grouped options corresponding to panels and their open windows.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-stately';\\n\\nfunction Example() {\\n  let [selected, setSelected] = React.useState<Selection>(new Set([1,3]));\\n  let openWindows = [\\n    {\\n      name: 'Left Panel',\\n      id: 'left',\\n      children: [\\n        {id: 1, name: 'Final Copy (1)'}\\n      ]\\n    },\\n    {\\n      name: 'Right Panel',\\n      id: 'right',\\n      children: [\\n        {id: 2, name: 'index.ts'},\\n        {id: 3, name: 'package.json'},\\n        {id: 4, name: 'license.txt'}\\n      ]\\n    }\\n  ];\\n\\n  return (\\n    <MenuButton\\n      label=\"Window\"\\n      items={openWindows}\\n      selectionMode=\"multiple\"\\n      selectedKeys={selected}\\n      onSelectionChange={setSelected}>\\n      {item => (\\n        <Section items={item.children} title={item.name}>\\n          {item => <Item>{item.name}</Item>}\\n        </Section>\\n      )}\\n    </MenuButton>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring First Day of Week in DatePicker - React Aria - TypeScript\nDESCRIPTION: This example shows how to explicitly set the first day of the week within the DatePicker by passing the firstDayOfWeek prop. Accepted values are string shortnames for weekdays such as 'mon'. This configuration influences how month grids are rendered and navigated in the calendar popover. Inputs include aria-label for accessibility and firstDayOfWeek ('mon'). The output is a DatePicker where the week starts on Monday.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<MyDatePicker aria-label=\"Appointment time\" firstDayOfWeek=\"mon\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Drag-and-Drop Styling for GridList Items (CSS)\nDESCRIPTION: Provides CSS customizations for drag-enabled GridList items, including left padding for draggable items, opacity changes when dragging, slotted drag handle styling, and drop target outlining. Includes a browser support fallback. Dependencies: react-aria class selectors, with slot=drag and DropIndicator support. Affects only item visuals and drag highlights.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_22\n\nLANGUAGE: CSS\nCODE:\n```\n```css\\n.react-aria-GridListItem {\\n  &[data-allows-dragging] {\\n    padding-left: 4px;\\n  }\\n\\n  &[data-dragging] {\\n    opacity: 0.6;\\n  }\\n\\n  [slot=drag] {\\n    all: unset;\\n    width: 15px;\\n    text-align: center;\\n\\n    &[data-focus-visible] {\\n      border-radius: 4px;\\n      outline: 2px solid var(--focus-ring-color);\\n    }\\n  }\\n}\\n\\n.react-aria-DropIndicator {\\n  &[data-drop-target] {\\n    outline: 1px solid var(--highlight-background);\\n  }\\n\\n  @supports not selector(:has(.foo)) {\\n    /* Undo gap in browsers that don't support :has */\\n    margin-bottom: -2px;\\n  }\\n}\\n\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Well Component with Role and ARIA Attributes in TSX\nDESCRIPTION: This example illustrates how to enhance the accessibility of a `Well` component when its visual separation conveys semantic meaning. It assigns a `role=\"region\"` and provides an accessible name using `aria-labelledby` which references the `id` of a heading element within the Well.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/well/docs/Well.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Well role=\"region\" aria-labelledby=\"wellLabel\">\n  <h3 id=\"wellLabel\">Shipping Address</h3>\n  <p>601 Townsend Street<br /> San Francisco, CA 94103</p>\n</Well>\n```\n\n----------------------------------------\n\nTITLE: Setting Toast Placement in React Spectrum\nDESCRIPTION: Shows how to set the placement of toasts by specifying the placement prop on the ToastContainer component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/toast/docs/Toast.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx example render=false hidden\nCODE:\n```\n<ToastContainer placement=\"bottom end\" />\n```\n\n----------------------------------------\n\nTITLE: Using DatePickerContext to Manage Grouped DatePickers in TSX\nDESCRIPTION: This example defines a `FieldGroup` component that wraps multiple `DatePicker` instances. It utilizes `DatePickerContext.Provider` to propagate common props like `isInvalid` and `aria-describedby` (linked to a shared error message via `useId`) to all nested DatePickers. This allows centralized control over the state and accessibility attributes of related date inputs, useful for form validation scenarios. Requires `react-aria-components` and `react-aria`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DatePickerContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      {/*- begin highlight -*/}\n      <DatePickerContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n      {/*- end highlight -*/}\n        {children}\n      </DatePickerContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Dates\" errorMessage=\"Tickets must go on sale before event.\">\n  <MyDatePicker label=\"Event date\" defaultValue={parseDate('2023-07-12')} />\n  <MyDatePicker label=\"Ticket sale date\" defaultValue={parseDate('2023-08-03')} />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Mobile-Responsive Dialog Example\nDESCRIPTION: Demonstrates how to specify different dialog types for mobile devices, showing a popover on desktop but switching to a tray on mobile.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"popover\" mobileType=\"tray\">\n  <ActionButton>Info</ActionButton>\n  <Dialog>\n    <Heading>Version Info</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Version 1.0.0, Copyright 2020\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Supplying Description and Error Message to ColorField React Spectrum TypeScript\nDESCRIPTION: Demonstrates ColorField with a visible description for valid state, and with an error message for invalid state. Both fields are rendered side by side using Flex. Descriptions assist users, while errorMessage helps quickly resolve input errors. Best practice for accessible and user-friendly forms.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\\\"size-100\\\" wrap>\\n  <ColorField label=\\\"Color\\\" defaultValue=\\\"#abc\\\" validationState=\\\"valid\\\" description=\\\"Enter your favorite color.\\\" />\\n  <ColorField label=\\\"Color\\\" validationState=\\\"invalid\\\" errorMessage=\\\"Empty input is not allowed.\\\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Picker with Links\nDESCRIPTION: Example showing how to use Picker items as links to other pages or websites.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Project\">\n  <Item href=\"https://example.com/\" target=\"_blank\">Create new…</Item>\n  <Item>Proposal</Item>\n  <Item>Budget</Item>\n  <Item>Onboarding</Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Basic Image Component Usage in React Spectrum\nDESCRIPTION: Demonstrates basic usage of the Image component with a source URL and alt text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/image/docs/Image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Image src=\"https://i.imgur.com/Z7AzH2c.png\" alt=\"Sky and roof\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Read-only DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Sets the isReadOnly prop to indicate that the DatePicker's value cannot be changed but remains focusable for accessibility. Utilizes the today() and getLocalTimeZone() helpers for value assignment. Suitable for fields that must remain visible and accessible, but immutable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_19\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker label=\\\"Birth date\\\" value={today(getLocalTimeZone())} isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Creating Calendar Instances with Identifiers in TypeScript\nDESCRIPTION: Shows how to use the createCalendar function to instantiate different calendar systems using their string identifiers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Calendar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createCalendar} from '@internationalized/date';\n\ncreateCalendar('gregory');\ncreateCalendar('hebrew');\ncreateCalendar('japanese');\n```\n\n----------------------------------------\n\nTITLE: Integrating DateRangePicker with HTML Forms (React Spectrum, TypeScript/JSX)\nDESCRIPTION: This example shows how to use startName and endName props on MyDateRangePicker to map start and end dates for form submissions. The values submitted depend on granularity and are serialized as ISO 8601 strings. No special dependencies are needed beyond React and the MyDateRangePicker component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDateRangePicker label=\\\"Trip dates\\\" startName=\\\"startDate\\\" endName=\\\"endDate\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adjusting ListView Density Using Props - React Spectrum - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to modify the vertical padding in each ListView row by using the density prop with values like 'compact' and 'spacious'. It utilizes a Flex container to display two ListViews side by side, emphasizing visual differences. Requires ListExample component and Flex layout, and visually modifies the output based on density configuration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_25\n\nLANGUAGE: TSX\nCODE:\n```\n<Flex wrap gap=\\\"size-300\\\">\\n  <ListExample density=\\\"compact\\\" aria-label=\\\"Compact ListView example\\\" />\\n  <ListExample density=\\\"spacious\\\" aria-label=\\\"Spacious ListView example\\\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: InlineAlert with Notice Variant in React Spectrum\nDESCRIPTION: Shows an InlineAlert with the notice variant, used to display an important update message about payment information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/inlinealert/docs/InlineAlert.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<InlineAlert variant=\"notice\">\n  <Heading>Update payment information</Heading>\n  <Content>The saved credit card for your account has expired. Update your payment information to complete the purchase.</Content>\n</InlineAlert>\n```\n\n----------------------------------------\n\nTITLE: Checkbox with HTML Form Integration\nDESCRIPTION: Example of integrating a checkbox with HTML forms by using the name and value props for form submission.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckbox name=\"newsletter\" value=\"subscribe\">Subscribe</MyCheckbox>\n```\n\n----------------------------------------\n\nTITLE: Non-contiguous Date Ranges Implementation\nDESCRIPTION: Shows how to implement non-contiguous date range selection by disabling weekends while allowing multi-week selections.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return <DateRangePicker label=\"Time off request\" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Picker with Item IDs (React/TypeScript)\nDESCRIPTION: This example shows how to use Picker with dynamic items, using the id of each item from the items array as the selected value without needing to specify a key prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DynamicExample() {\n  let [animalId, setAnimalId] = React.useState(null);\n  let options = [\n    {id: 1, name: 'Aardvark'},\n    {id: 2, name: 'Cat'},\n    {id: 3, name: 'Dog'},\n    {id: 4, name: 'Kangaroo'},\n    {id: 5, name: 'Koala'},\n    {id: 6, name: 'Penguin'},\n    {id: 7, name: 'Snake'},\n    {id: 8, name: 'Turtle'},\n    {id: 9, name: 'Wombat'}\n  ];\n\n  return (\n    <>\n      <Picker label=\"Pick an animal\" items={options} onSelectionChange={selected => setAnimalId(selected)}>\n        {item => <Item>{item.name}</Item>}\n      </Picker>\n      <p>Your favorite animal has id: {animalId}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation in React\nDESCRIPTION: Demonstrates a basic implementation of Tabs component with TabList, Tab, and TabPanel elements. This example shows how to create a simple tab interface for displaying content about the history of Ancient Rome.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Tabs, TabList, Tab, TabPanel} from 'react-aria-components';\n\n<Tabs>\n  <TabList aria-label=\"History of Ancient Rome\">\n    <Tab id=\"FoR\">Founding of Rome</Tab>\n    <Tab id=\"MaR\">Monarchy and Republic</Tab>\n    <Tab id=\"Emp\">Empire</Tab>\n  </TabList>\n  <TabPanel id=\"FoR\">\n    Arma virumque cano, Troiae qui primus ab oris.\n  </TabPanel>\n  <TabPanel id=\"MaR\">\n    Senatus Populusque Romanus.\n  </TabPanel>\n  <TabPanel id=\"Emp\">\n    Alea jacta est.\n  </TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Menu with Action Events\nDESCRIPTION: Implementation showing how to handle menu item selection events using onAction callback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [action, setAction] = React.useState(null);\n\n  return (\n    <>\n      <MenuTrigger>\n        <ActionButton>\n          Edit\n        </ActionButton>\n        <Menu onAction={setAction}>\n          <Item key=\"cut\">Cut</Item>\n          <Item key=\"copy\">Copy</Item>\n          <Item key=\"paste\">Paste</Item>\n        </Menu>\n      </MenuTrigger>\n      <p>Action: {action}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Select Component in TSX\nDESCRIPTION: This example shows how to completely disable a `Select` component. By passing the `isDisabled` prop set to true, the entire select element becomes non-interactive. Static items are used here for simplicity.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Select label=\"Choose frequency\" isDisabled>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Select>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Slider with Styled Components in TSX\nDESCRIPTION: This TSX snippet shows how to style React Aria's `Slider`, `SliderTrack`, and `SliderThumb` components using `styled-components`. It defines `StyledSlider`, `StyledSliderTrack`, and `StyledSliderThumb` with custom CSS, including handling the `data-dragging` state for the thumb, and then uses these styled components to render a functional slider.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx format=false\nconst StyledSlider = styled(Slider)`\n  display: grid;\n  /* ... */\n`;\n\nconst StyledSliderTrack = styled(SliderTrack)`\n  background: var(--gray-300);\n`;\n\nconst StyledSliderThumb = styled(SliderThumb)`\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  background: var(--gray-50);\n  border: 2px solid var(--gray-600);\n\n  &[data-dragging] {\n    background: var(--gray-600);\n  }\n`;\n\n<StyledSlider defaultValue={30}>\n  <Label>Opacity</Label>\n  <SliderOutput />\n  <StyledSliderTrack>\n    <StyledSliderThumb />\n  </StyledSliderTrack>\n</StyledSlider>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Focusable Content in React Tabs Component\nDESCRIPTION: This example demonstrates how to create tabs with mixed content types, including focusable form elements. When a tab panel contains focusable elements like text inputs, the tabIndex attribute is omitted since the content itself can receive focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs>\n  <TabList aria-label=\"Notes app\">\n    <Tab id=\"1\">Jane Doe</Tab>\n    <Tab id=\"2\">John Doe</Tab>\n    <Tab id=\"3\">Joe Bloggs</Tab>\n  </TabList>\n  <TabPanel id=\"1\">\n    <label>Leave a note for Jane: <input type=\"text\" /></label>\n  </TabPanel>\n  <TabPanel id=\"2\">Senatus Populusque Romanus.</TabPanel>\n  <TabPanel id=\"3\">Alea jacta est.</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled and Read-only ColorField Components\nDESCRIPTION: Shows how to create disabled and read-only versions of the ColorField component using the isDisabled and isReadOnly props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ColorField aria-label=\"Color\" defaultValue=\"#7f007f\" isDisabled />\n<ColorField aria-label=\"Color\" defaultValue=\"#7f007f\" isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Controlled Selection in GridList Using selectedKeys and onSelectionChange (TypeScript)\nDESCRIPTION: This snippet demonstrates how to programmatically control the selection state of GridList using React state hooks. The PokemonList component defines selectedKeys in state and passes selectedKeys and onSelectionChange to MyGridList. On selection changes, the state is updated accordingly. Dependencies are MyGridList, MyItem, React's useState, and GridListProps and Selection types. Input: props for the component; Output: controlled selection behavior and UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\\n\\nfunction PokemonList(props: GridListProps<ItemValue>) {\\n  let rows = [\\n    {id: 1, name: 'Charizard'},\\n    {id: 2, name: 'Blastoise'},\\n    {id: 3, name: 'Venusaur'},\\n    {id: 4, name: 'Pikachu'}\\n  ];\\n\\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));\\n\\n  return (\\n    <MyGridList\\n      aria-label=\"List with controlled selection\"\\n      items={rows}\\n      selectionMode=\"multiple\"\\n      /*- begin highlight -*/\\n      selectedKeys={selectedKeys}\\n      onSelectionChange={setSelectedKeys}\\n      /*- end highlight -*/\\n      {...props}>\\n      {item => <MyItem>{item.name}</MyItem>}\\n    </MyGridList>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Absolute Dates into Local Time for DatePicker (TypeScript/TSX)\nDESCRIPTION: Shows initialization of MyDatePicker with a value parsed to the user's local time zone using parseAbsoluteToLocal from @internationalized/date. Designed for time zone-aware applications needing to display absolute times in a local context. Inputs are ISO 8601 absolute date strings; outputs are DatePicker fields with values dynamically localized. Prerequisites include proper setup of MyDatePicker and the @internationalized/date package, with constraints involving accurate mapping of server-provided date/times to client-local representation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<MyDatePicker\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Filterable List Implementation with useFilter\nDESCRIPTION: Example implementation of a filterable list using the useFilter hook with case and diacritic insensitive matching. Demonstrates practical usage with a list of composer names.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/useFilter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useFilter} from '@react-aria/i18n';\n\nfunction Example() {\n  const composers = [\n    'Wolfgang Amadeus Mozart',\n    'Johann Sebastian Bach',\n    'Ludwig van Beethoven',\n    'Claude Debussy',\n    'George Frideric Handel',\n    'Frédéric Chopin',\n    'Johannes Brahms',\n    'Pyotr Ilyich Tchaikovsky',\n    'Antonín Dvořák',\n    'Felix Mendelssohn',\n    'Béla Bartók',\n    'Niccolò Paganini'\n  ];\n\n  let {contains} = useFilter({\n    sensitivity: 'base'\n  });\n\n  let [value, setValue] = React.useState('');\n  let matchedComposers = composers.filter(composer => contains(composer, value));\n\n  return (\n    <>\n      <label htmlFor=\"search-input\">Filter: </label>\n      <input type=\"search\" id=\"search-input\" value={value} onChange={e => setValue(e.target.value)} />\n      <ul style={{height: 300}}>\n        {matchedComposers.map((composer, i) =>\n          <li key={i}>{composer}</li>)\n        }\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TimeField with HTML Form Integration in React Spectrum\nDESCRIPTION: Example of using the name prop with TimeField for integration with HTML forms, where the value is submitted as an ISO 8601 formatted string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField label=\"Meeting time\" name=\"meetingTime\" />\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled DatePicker Examples in React Spectrum\nDESCRIPTION: Example demonstrating both controlled and uncontrolled DatePicker components with parseDate from @internationalized/date to convert string dates to CalendarDate objects.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <DatePicker\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <DatePicker\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Emphasized RadioGroup - React Spectrum - TypeScript\nDESCRIPTION: This TypeScript (TSX) snippet renders a RadioGroup component from the React Spectrum library with the isEmphasized prop enabled. It sets the group label, default selected value, and contains two Radio options (Wizard and Dragon). Dependencies include React, @adobe/react-spectrum, and a TypeScript environment. The component expects a string label, radio options as children, and optional emphasis for styling; it outputs a UI control for radio selection, with emphasis applied for visual distinction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<RadioGroup label=\"Favorite avatar\" defaultValue=\"dragon\" isEmphasized>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Nested Submenus with Recursion - React Spectrum - TypeScript\nDESCRIPTION: Defines a recursive function that builds a nested menu structure dynamically based on an items array, supporting arbitrary depth. Each submenu is constructed via SubmenuTrigger when a node has children. Dependencies are 'react-aria-components'. Input is a hierarchical item tree; output is a dynamically nested menu.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Menu, Popover, SubmenuTrigger} from 'react-aria-components';\n\nlet items = [\n  {id: 'cut', name: 'Cut'},\n  {id: 'copy', name: 'Copy'},\n  {id: 'delete', name: 'Delete'},\n  {id: 'share', name: 'Share', children: [\n    {id: 'sms', name: 'SMS'},\n    {id: 'x', name: 'X'},\n    {id: 'email', name: 'Email', children: [\n      {id: 'work', name: 'Work'},\n      {id: 'personal', name: 'Personal'},\n    ]}\n  ]}\n];\n\n<MyMenuButton label=\"Actions\" items={items}>\n  {function renderSubmenu(item) {\n    if (item.children) {\n      return (\n        <SubmenuTrigger>\n          <MyItem key={item.name}>{item.name}</MyItem>\n          <Popover>\n            <Menu items={item.children}>\n              {(item) => renderSubmenu(item)}\n            </Menu>\n          </Popover>\n        </SubmenuTrigger>\n      );\n    } else {\n      return <MyItem key={item.name}>{item.name}</MyItem>;\n    }\n  }}\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with HTML Form Integration\nDESCRIPTION: This example demonstrates how to integrate a RadioGroup with HTML forms using the name prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyRadioGroup label=\"Favorite pet\" name=\"pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Direction in SearchAutocomplete in React Spectrum (TypeScript)\nDESCRIPTION: This code shows how to render the SearchAutocomplete dropdown menu in an upward direction by passing the 'direction=\"top\"' prop. The component displays a list of selectable animal items and is useful in UI contexts where downward menus would be obscured. No additional dependencies apart from React Spectrum are necessary. The 'direction' prop controls overlay placement, and the snippet demonstrates customizing UI dropdown behavior for optimal screen fit.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<SearchAutocomplete label=\\\"Favorite Animal\\\" direction=\\\"top\\\">\\n  <Item>Red Panda</Item>\\n  <Item>Cat</Item>\\n  <Item>Dog</Item>\\n  <Item>Aardvark</Item>\\n  <Item>Kangaroo</Item>\\n  <Item>Snake</Item>\\n</SearchAutocomplete>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Min/Max Time Constraints in TimeField\nDESCRIPTION: Demonstrates how to limit time selection within a specific range (9 AM to 5 PM) using minValue and maxValue props in TimeField.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TimeField\n    label=\"Meeting time\"\n    minValue={new Time(9)}\n    maxValue={new Time(17)}\n    defaultValue={new Time(8)} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Checkbox Compatible with React Aria Components\nDESCRIPTION: This code demonstrates how to create a custom Checkbox component that works with React Aria Components by consuming the CheckboxContext. It uses useContextProps to merge props from context with local props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps, useContextProps} from 'react-aria-components';\nimport {CheckboxContext} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCustomCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Primary Variant Link\nDESCRIPTION: Example of Link component with primary variant styling\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/link/docs/Link.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<p>Would you like to <Link variant=\"primary\">learn more</Link> about this fine component?</p>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Help Text and Error Message\nDESCRIPTION: Demonstrates how to add description and error messages to a RadioGroup based on user selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState('dogs');\n  let isValid = selected === 'dogs';\n\n  return (\n    <RadioGroup\n      aria-label=\"Favorite pet\"\n      onChange={setSelected}\n      isInvalid={!isValid}\n      description=\"Please select a pet.\"\n      errorMessage={\n        selected === 'cats'\n          ? 'No cats allowed.'\n          : 'Please select dogs.'\n      }>\n      <Radio value=\"dogs\">\n        Dogs\n      </Radio>\n      <Radio value=\"cats\">\n        Cats\n      </Radio>\n      <Radio value=\"dragons\">\n        Dragons\n      </Radio>\n    </RadioGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Wrapper Component for React Aria SliderOutput\nDESCRIPTION: This TSX snippet shows how to create a custom wrapper component (`MySliderOutput`) around the React Aria `SliderOutput`. This pattern allows for customizing props, like adding a specific `className` ('my-slider-output'), while passing through other props using the spread syntax (`{...props}`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MySliderOutput(props) {\n  return <SliderOutput {...props} className=\"my-slider-output\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding First Day of Week with startOfWeek in TypeScript\nDESCRIPTION: Illustrates using the optional third argument, `firstDayOfWeek`, with the `startOfWeek` function from `@internationalized/date`. This example provides 'mon' to explicitly set Monday as the first day of the week, overriding the default determined by the 'en-US' locale (which is Sunday).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nstartOfWeek(date, 'en-US', 'mon'); // 2022-01-31T09:45\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumbs with Event Handlers in React Aria\nDESCRIPTION: Example showing how to create a basic breadcrumb navigation component using useBreadcrumbs and useBreadcrumbItem hooks. The breadcrumbs handle interactions via onPress events rather than direct navigation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/breadcrumbs/docs/useBreadcrumbs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useBreadcrumbs, useBreadcrumbItem} from '@react-aria/breadcrumbs';\n\nfunction Breadcrumbs(props) {\n  let {navProps} = useBreadcrumbs(props);\n  let childCount = React.Children.count(props.children);\n\n  return (\n    <nav {...navProps}>\n      <ol style={{display: 'flex', listStyle: 'none', margin: 0, padding: 0}}>\n        {React.Children.map(props.children, (child, i) =>\n          React.cloneElement(child, {isCurrent: i === childCount - 1})\n        )}\n      </ol>\n    </nav>\n  )\n}\n\nfunction BreadcrumbItem(props) {\n  let ref = React.useRef(null);\n  let {itemProps} = useBreadcrumbItem({...props, elementType: 'span'}, ref);\n  return (\n    <li>\n      <span\n        {...itemProps}\n        ref={ref}\n        style={{\n          color: props.isDisabled ? 'var(--gray)' : 'var(--blue)',\n          textDecoration: props.isCurrent || props.isDisabled ? 'none' : 'underline',\n          fontWeight: props.isCurrent ? 'bold' : null,\n          cursor: props.isCurrent || props.isDisabled ? 'default' : 'pointer'\n        }}>\n        {props.children}\n      </span>\n      {!props.isCurrent &&\n        <span aria-hidden=\"true\" style={{padding: '0 5px'}}>{'›'}</span>\n      }\n    </li>\n  );\n}\n\n<Breadcrumbs>\n  <BreadcrumbItem onPress={() => alert('Pressed Folder 1')}>Folder 1</BreadcrumbItem>\n  <BreadcrumbItem onPress={() => alert('Pressed Folder 2')}>Folder 2</BreadcrumbItem>\n  <BreadcrumbItem>Folder 3</BreadcrumbItem>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Rendering Label Color Badges for Categories in Flex Layout (TypeScript/JSX)\nDESCRIPTION: Illustrates how to render multiple Badge components with label color variants (seafoam, indigo, purple, fuchsia, magenta, yellow), suitable for categorizing up to eight distinct categories. The example uses the Flex component for vertical arrangement. The primary inputs are the variant props specifying each color and the corresponding label; the output is a visually distinct set of badges.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/badge/docs/Badge.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\n\n<Flex direction=\"column\" gap={8}>\n  <Badge variant=\"seafoam\">Seafoam</Badge>\n  <Badge variant=\"indigo\">Indigo</Badge>\n  <Badge variant=\"purple\">Purple</Badge>\n  <Badge variant=\"fuchsia\">Fuchsia</Badge>\n  <Badge variant=\"magenta\">Magenta</Badge>\n  <Badge variant=\"yellow\">Yellow</Badge>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Integrating EyeDropper API with Color Picker State via Context in React Spectrum (TypeScript)\nDESCRIPTION: This advanced example demonstrates accessing a color picker's state via React context and integrating with the browser's EyeDropper API to sample on-screen colors. It defines an EyeDropperButton that reads ColorPickerStateContext and updates the selected color when the user samples a color using the API, updating the picker accordingly. Requires react, react-aria-components (for ColorPickerStateContext and parseColor), a Button component, and a custom SamplerIcon.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorPickerStateContext, parseColor} from 'react-aria-components';\\nimport SamplerIcon from '@spectrum-icons/workflow/Sampler';\\n\\nfunction EyeDropperButton() {\\n  let state = React.useContext(ColorPickerStateContext)!;\\n\\n  // Check browser support.\\n  // @ts-ignore\\n  if (typeof EyeDropper === 'undefined') {\\n    return 'EyeDropper is not supported in your browser.';\\n  }\\n\\n  return (\\n    <Button\\n      aria-label=\\\"Eye dropper\\\"\\n      style={{alignSelf: 'start'}}\\n      onPress={() => {\\n        // @ts-ignore\\n        new EyeDropper().open().then(result => state.setColor(parseColor(result.sRGBHex)));\\n      }}>\\n      <SamplerIcon size=\\\"S\\\" />\\n    </Button>\\n  );\\n}\\n\\n<MyColorPicker label=\\\"Color\\\" defaultValue=\\\"#345\\\">\\n  <MyColorArea colorSpace=\\\"hsb\\\" xChannel=\\\"saturation\\\" yChannel=\\\"brightness\\\" />\\n  <MyColorSlider colorSpace=\\\"hsb\\\" channel=\\\"hue\\\" />\\n  <EyeDropperButton />\\n</MyColorPicker>\\n\n```\n\n----------------------------------------\n\nTITLE: Styling Directory Items with CSS\nDESCRIPTION: CSS styles for directory items in a ListBox component. It defines the layout, spacing, and text overflow handling for directory item components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.dir-item {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.dir-item {\n  flex: 0 0 auto;\n}\n\n.dir-item {\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Checkbox in GridList Component\nDESCRIPTION: This example shows how a custom checkbox component can be used within other React Aria Components like GridList, replacing the default Checkbox implementation but maintaining compatibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<GridList>\n  <GridListItem>\n    {/*- begin highlight -*/}\n    <MyCheckbox slot=\"selection\" />\n    {/*- end highlight -*/}\n    {/* ... */}\n  </GridListItem>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom First Day of Week in RangeCalendar (TSX)\nDESCRIPTION: This example shows how to set a custom first day of the week in a RangeCalendar using the firstDayOfWeek prop. It sets Monday as the first day of the week.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <RangeCalendar aria-label=\"Trip dates\" firstDayOfWeek=\"mon\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Validating TextField Input Using HTML and Custom Constraints (TypeScript/React)\nDESCRIPTION: Displays how to combine native HTML validation attributes with useTextField validation logic, including required and type checks. Works with a TextField component and standard React/TypeScript setup. Key props: type=\"email\", isRequired, validationBehavior. Output: form integrating custom/displayed error messages and blocking submission upon invalid input. Covers integration of browser and custom validation behaviors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n<form>\\n  <TextField\\n    label=\"Email\"\\n    name=\"email\"\\n    /*- begin highlight -*/\\n    type=\"email\"\\n    isRequired\\n    validationBehavior=\"native\"\\n    /*- end highlight -*/\\n  />\\n  <input type=\"submit\" style={{marginTop: 8}} />\\n</form>\n```\n\n----------------------------------------\n\nTITLE: ColorWheel Labeling for Accessibility (React Spectrum, TSX)\nDESCRIPTION: Shows how to label the ColorWheel for assistive tech by providing explicit aria-label and aria-labelledby props. The example demonstrates both direct labeling via aria-label and reference labeling through an external <label> tag with aria-labelledby. Ensures that screen readers or other ATs announce appropriate label strings. Any string passed should be localized.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', gap: 8, alignItems: 'end', flexWrap: 'wrap'}}>\\n  <MyColorWheel\\n    /*- begin highlight -*/\\n    aria-label=\"Background color\"\\n    /*- end highlight -*/\\n    defaultValue=\"hsl(0, 100%, 50%)\" />\\n  <div>\\n    {/*- begin highlight -*/}\\n    <label id=\"hsl-aria-labelledby-id\">Background color</label>\\n    {/*- end highlight -*/}\\n    <MyColorWheel\\n      /*- begin highlight -*/\\n      aria-labelledby=\"hsl-aria-labelledby-id\"\\n      /*- end highlight -*/\\n      defaultValue=\"hsl(0, 100%, 50%)\" />\\n  </div>\\n</div>\\n\n```\n\n----------------------------------------\n\nTITLE: Disallowing Empty Selection in React Spectrum ListView\nDESCRIPTION: This snippet demonstrates how to use the disallowEmptySelection prop to force at least one item to be selected at all times in a ListView.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonList disallowEmptySelection aria-label=\"ListView with empty selection disallowed\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Rows in TableView with disabledKeys\nDESCRIPTION: This example shows how to disable specific rows in a TableView using the disabledKeys prop, which prevents those rows from being selectable by the user.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the same table as above\n<PokemonTable selectionMode=\"multiple\" disabledKeys={[3]} />\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Meter Component\nDESCRIPTION: Shows how to import the Meter component from the React Spectrum library along with the Flex component for layout purposes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {Meter} from '@react-spectrum/meter';\n```\n\n----------------------------------------\n\nTITLE: Custom Week Calendar Grid Implementation\nDESCRIPTION: Example of creating a custom week view calendar grid using the useCalendarGrid hook\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CalendarGridProps} from 'react-aria-components';\nimport {CalendarStateContext} from 'react-aria-components';\nimport {useCalendarGrid} from 'react-aria';\n\nfunction WeekCalendarGrid(props: CalendarGridProps) {\n  let state = React.useContext(CalendarStateContext)!;\n  let {gridProps} = useCalendarGrid(props, state);\n\n  return (\n    <table {...gridProps}>\n      <tbody>\n        <tr>\n          {state.getDatesInWeek(0).map((date, i) => <CalendarCell key={i} date={date} />)}\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Table Drop Target\nDESCRIPTION: CSS styles for the table drop target state. It adds a highlight outline and background overlay when the table is a valid drop target, using CSS variables for consistent theming.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_35\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Table[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  outline-offset: -1px;\n  background: var(--highlight-overlay)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Rows Using disabledKeys for Dynamic Collections - TypeScript/React\nDESCRIPTION: This snippet demonstrates how to disable rows in a dynamic table collection by providing a list of keys via the disabledKeys prop on PokemonTable. When a row's key matches an entry in disabledKeys or if isDisabled is set, that row becomes disabled and non-interactive according to the behavior specified by the parent Table. Suitable for collections where disabling logic is driven by application state, this pattern requires the custom PokemonTable defined earlier.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the same table as above\n<PokemonTable selectionMode=\"multiple\" disabledKeys={[3]} />\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled ColorSlider Usage in React (TSX)\nDESCRIPTION: Illustrates both uncontrolled and controlled modes for the `ColorSlider`. The first slider uses `defaultValue` for uncontrolled behavior. The second uses `value` and `onChange` bound to React state (`React.useState`) for controlled behavior. `parseColor` from `@react-stately/color` is used to initialize and manage the color state object, and `Flex` arranges the sliders.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <Flex gap=\"size-300\" wrap>\n      <ColorSlider\n        label=\"Hue (uncontrolled)\"\n        defaultValue=\"hsl(0, 100%, 50%)\"\n        channel=\"hue\" />\n      <ColorSlider\n        label=\"Hue (controlled)\"\n        value={value}\n        onChange={setValue}\n        channel=\"hue\" />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling a Serial Number Input Group using React Aria in TypeScript/JSX\nDESCRIPTION: This TypeScript/JSX snippet shows how to use the aria-labelledby attribute to associate a group of input fields with a label, enhancing accessibility for assistive technologies. Dependencies include React Aria Components and proper use of unique IDs for labeling. The code declares three specialized <Input> fields for entering portions of a serial number grouped together, with separators and descriptive ARIA labels. Outputs are accessible input fields supporting label association.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<span id=\\\"label-id\\\">Serial number</span>\\n<Group aria-labelledby=\\\"label-id\\\">\\n  <Input size={3} aria-label=\\\"First 3 digits\\\" placeholder=\\\"000\\\" />\\n  –\\n  <Input size={2} aria-label=\\\"Middle 2 digits\\\" placeholder=\\\"00\\\" />\\n  –\\n  <Input size={4} aria-label=\\\"Last 4 digits\\\" placeholder=\\\"0000\\\" />\\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Integrating Context with a Custom Link Component - TSX\nDESCRIPTION: Defines MyCustomLink by merging Link props and ref with context using useContextProps, enhancing compatibility with React Aria's context system. The component then uses useLink to extract necessary DOM props before rendering an <a> element. Requires React, React Aria's LinkContext, useContextProps, useLink, and correct TypeScript definitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LinkProps} from 'react-aria-components';\nimport {LinkContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLink = React.forwardRef((props: LinkProps, ref: React.ForwardedRef<HTMLAnchorElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LinkContext);\n  ///- end highlight -///\n\n  // ... your existing Link component\n  let {linkProps} = useLink(props, ref);\n  return <a {...linkProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Validation to SearchField with FieldError Component\nDESCRIPTION: Shows how to implement form validation in a SearchField by adding a FieldError component to display validation messages. The example uses the isRequired prop for validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  <SearchField name=\"search\" isRequired>\n    <Label>Search</Label>\n    <Input />\n    <Button>✕</Button>\n    <FieldError />\n  </SearchField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: FieldGroup Styling\nDESCRIPTION: CSS styling for the FieldGroup component including error message styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n\n.invalid {\n  color: var(--invalid-color);\n  margin-top: 1em;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Drag Previews in React Spectrum\nDESCRIPTION: This example shows how to create a custom drag preview using the DragPreview component. It displays the number of dragged items or the content if there's only one item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DragPreview} from '@react-aria/dnd';\n\nfunction ListBox(props) {\n  // ...\n\n  let preview = React.useRef(null);\n  let dragState = useDraggableCollectionState({\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    preview,\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = state.collection.getItem(key);\n        return {\n          'text/plain': item.textValue\n        };\n      });\n    },\n  });\n\n  // ...\n\n  return (\n    <ul {...listBoxProps} ref={ref}>\n      {[...state.collection].map((item) => (\n        <Option\n          key={item.key}\n          item={item}\n          state={state}\n          dragState={dragState}\n        />\n      ))}\n      <DragPreview ref={preview}>\n        {items => (\n          <div style={{background: 'green', color: 'white'}}>\n            {items.length > 1 ? `${items.length} items` : items[0]['text/plain']}\n          </div>\n        )}\n      </DragPreview>\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Press and Normal Press in React\nDESCRIPTION: Demonstrates how to use the useLongPress and usePress hooks to create a button with both normal press and long press functionality. The example logs events and updates the button text based on the interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useLongPress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {mergeProps} from '@react-aria/utils';\nimport {useLongPress, usePress} from '@react-aria/interactions';\n\nfunction Example() {\n  let [events, setEvents] = React.useState([]);\n  let [mode, setMode] = React.useState('Activate');\n  let {longPressProps} = useLongPress({\n    accessibilityDescription: 'Long press to activate hyper speed',\n    onLongPressStart: e => setEvents(\n      events => [`long press start with ${e.pointerType}`, ...events]\n    ),\n    onLongPressEnd: e => setEvents(\n      events => [`long press end with ${e.pointerType}`, ...events]\n    ),\n    onLongPress: e => {\n      setMode('Hyper speed');\n      setEvents(\n        events => [`long press with ${e.pointerType}`, ...events]\n      );\n    }\n  });\n\n  let {pressProps} = usePress({\n    onPress: e => {\n      setMode('Normal speed');\n      setEvents(\n        events => [`press with ${e.pointerType}`, ...events]\n      );\n    }\n  });\n\n  return (\n    <>\n      <button {...mergeProps(pressProps, longPressProps)}>{mode}</button>\n      <ul\n        style={{\n          maxHeight: '200px',\n          overflow: 'auto'\n        }}>\n        {events.map((e, i) => <li key={i}>{e}</li>)}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Breadcrumbs Navigation - React Spectrum - TypeScript\nDESCRIPTION: This example demonstrates using the isMultiline prop to allow the last breadcrumb item to be displayed below the preceding items. It highlights the current navigation location as a page title. The setup only requires @react-spectrum/breadcrumbs, and the key parameter is isMultiline for the Breadcrumbs component. Output is visually split breadcrumbs for enhanced hierarchy clarity.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Breadcrumbs isMultiline>\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n  <Item key=\"march 2020 assets\">March 2020 Assets</Item>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Listing Released Package Versions - Markdown\nDESCRIPTION: This Markdown snippet displays an enumerated list of JavaScript package names and their corresponding version numbers, covering the core, component, utility, and type packages from the Adobe React Spectrum ecosystem. There are no external dependencies or prerequisites for viewing this list; it is intended for documentation purposes within changelogs or release notes. The input is static (pre-generated), and the output, when rendered, is a readable set of version-tagged packages for reference or manual installation—automation is not included.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-02-15.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- @adobe/react-spectrum@3.16.0\n- @internationalized/date@3.0.0-alpha.2\n- @internationalized/message@3.0.4\n- @internationalized/number@3.0.4\n- @react-aria/accordion@3.0.0-alpha.3\n- @react-aria/actiongroup@3.2.2\n- @react-aria/aria-modal-polyfill@3.4.1\n- @react-aria/autocomplete@3.0.0-alpha.2\n- @react-aria/breadcrumbs@3.1.6\n- @react-aria/button@3.4.0\n- @react-aria/calendar@3.0.0-alpha.2\n- @react-aria/checkbox@3.3.0\n- @react-aria/color@3.0.0-beta.7\n- @react-aria/combobox@3.2.2\n- @react-aria/datepicker@3.0.0-alpha.3\n- @react-aria/dialog@3.1.5\n- @react-aria/dnd@3.0.0-alpha.4\n- @react-aria/focus@3.5.1\n- @react-aria/grid@3.2.1\n- @react-aria/i18n@3.3.5\n- @react-aria/interactions@3.8.0\n- @react-aria/label@3.2.2\n- @react-aria/link@3.2.1\n- @react-aria/listbox@3.4.1\n- @react-aria/live-announcer@3.0.2\n- @react-aria/menu@3.4.0\n- @react-aria/meter@3.1.4\n- @react-aria/numberfield@3.1.2\n- @react-aria/overlays@3.7.4\n- @react-aria/progress@3.1.4\n- @react-aria/radio@3.1.7\n- @react-aria/searchfield@3.2.3\n- @react-aria/select@3.6.1\n- @react-aria/selection@3.7.2\n- @react-aria/separator@3.1.4\n- @react-aria/slider@3.0.4\n- @react-aria/spinbutton@3.0.2\n- @react-aria/ssr@3.1.1\n- @react-aria/switch@3.1.4\n- @react-aria/table@3.2.1\n- @react-aria/tabs@3.1.1\n- @react-aria/tag@3.0.0-alpha.0\n- @react-aria/textfield@3.5.1\n- @react-aria/toggle@3.2.0\n- @react-aria/tooltip@3.1.4\n- @react-aria/utils@3.11.1\n- @react-aria/virtualizer@3.3.6\n- @react-aria/visually-hidden@3.2.4\n- @react-spectrum/accordion@3.0.0-alpha.4\n- @react-spectrum/actionbar@3.0.0-alpha.4\n- @react-spectrum/actiongroup@3.4.0\n- @react-spectrum/autocomplete@3.0.0-alpha.2\n- @react-spectrum/avatar@3.0.0-alpha.1\n- @react-spectrum/breadcrumbs@3.2.5\n- @react-spectrum/button@3.7.0\n- @react-spectrum/buttongroup@3.2.4\n- @react-spectrum/calendar@3.0.0-alpha.2\n- @react-spectrum/card@3.0.0-alpha.2\n- @react-spectrum/checkbox@3.3.0\n- @react-spectrum/color@3.0.0-beta.7\n- @react-spectrum/combobox@3.2.1\n- @react-spectrum/contextualhelp@3.0.0\n- @react-spectrum/datepicker@3.0.0-alpha.3\n- @react-spectrum/dialog@3.3.5\n- @react-spectrum/divider@3.2.0\n- @react-spectrum/form@3.2.5\n- @react-spectrum/icon@3.3.3\n- @react-spectrum/illustratedmessage@3.1.5\n- @react-spectrum/image@3.1.5\n- @react-spectrum/label@3.4.2\n- @react-spectrum/layout@3.2.2\n- @react-spectrum/link@3.2.1\n- @react-spectrum/list@3.0.0-alpha.6\n- @react-spectrum/listbox@3.5.4\n- @react-spectrum/menu@3.6.0\n- @react-spectrum/meter@3.1.4\n- @react-spectrum/numberfield@3.1.2\n- @react-spectrum/overlays@3.4.5\n- @react-spectrum/picker@3.5.1\n- @react-spectrum/progress@3.1.4\n- @react-spectrum/provider@3.3.0\n- @react-spectrum/radio@3.1.6\n- @react-spectrum/searchfield@3.2.2\n- @react-spectrum/searchwithin@3.0.0-alpha.2\n- @react-spectrum/slider@3.0.5\n- @react-spectrum/statuslight@3.2.3\n- @react-spectrum/switch@3.1.4\n- @react-spectrum/table@3.1.2\n- @react-spectrum/tabs@3.1.2\n- @react-spectrum/tag@3.0.0-alpha.0\n- @react-spectrum/text@3.1.4\n- @react-spectrum/textfield@3.3.1\n- @react-spectrum/theme-dark@3.2.4\n- @react-spectrum/theme-default@3.2.4\n- @react-spectrum/theme-light@3.1.4\n- @react-spectrum/tooltip@3.1.5\n- @react-spectrum/utils@3.6.4\n- @react-spectrum/view@3.1.4\n- @react-spectrum/well@3.1.4\n- @react-stately/calendar@3.0.0-alpha.2\n- @react-stately/checkbox@3.0.4\n- @react-stately/collections@3.3.5\n- @react-stately/color@3.0.0-beta.6\n- @react-stately/combobox@3.0.2\n- @react-stately/data@3.4.4\n- @react-stately/datepicker@3.0.0-alpha.2\n- @react-stately/dnd@3.0.0-alpha.3\n- @react-stately/grid@3.1.1\n- @react-stately/layout@3.4.3\n- @react-stately/list@3.4.2\n- @react-stately/menu@3.2.4\n- @react-stately/numberfield@3.0.3\n- @react-stately/overlays@3.1.4\n- @react-stately/radio@3.3.3\n- @react-stately/searchfield@3.1.4\n- @react-stately/select@3.1.4\n- @react-stately/selection@3.9.1\n- @react-stately/slider@3.0.4\n- @react-stately/table@3.1.1\n- @react-stately/tabs@3.0.2\n- @react-stately/toggle@3.2.4\n- @react-stately/tooltip@3.0.6\n- @react-stately/tree@3.2.1\n- @react-stately/utils@3.4.0\n- @react-stately/virtualizer@3.1.7-alpha.0\n- @react-types/accordion@3.0.0-alpha.2\n- @react-types/actionbar@3.0.0-alpha.2\n- @react-types/actiongroup@3.2.2\n- @react-types/autocomplete@3.0.0-alpha.1\n- @react-types/avatar@3.0.0-alpha.1\n- @react-types/breadcrumbs@3.2.2\n- @react-types/button@3.4.2\n- @react-types/buttongroup@3.1.3\n- @react-types/calendar@3.0.0-alpha.2\n- @react-types/card@3.0.0-alpha.2\n- @react-types/checkbox@3.2.4\n- @react-types/color@3.0.0-beta.4\n- @react-types/combobox@3.2.2\n- @react-types/contextualhelp@3.0.0\n- @react-types/datepicker@3.0.0-alpha.2\n- @react-types/dialog@3.3.2\n- @react-types/divider@3.1.3\n- @react-types/form@3.2.3\n- @react-types/grid@3.0.1\n- @react-types/illustratedmessage@3.1.3\n- @react-types/image@3.1.4\n- @react-types/label@3.5.1\n- @react-types/layout@3.2.1\n- @react-types/link@3.2.1\n- @react-types/listbox@3.2.2\n- @react-types/menu@3.5.0\n- @react-types/meter@3.1.3\n- @react-types/numberfield@3.1.1\n- @react-types/overlays@3.5.2\n- @react-types/progress@3.1.3\n- @react-types/provider@3.4.0\n- @react-types/radio@3.1.3\n- @react-types/searchfield@3.1.3\n- @react-types/searchwithin@3.0.0-alpha.1\n- @react-types/select@3.5.2\n- @react-types/shared@3.11.0\n- @react-types/slider@3.0.3\n- @react-types/statuslight@3.1.3\n- @react-types/switch@3.1.3\n- @react-types/table@3.1.1\n- @react-types/tabs@3.0.2\n- @react-types/tag@3.0.0-alpha.0\n- @react-types/text@3.1.4\n- @react-types/textfield@3.3.1\n- @react-types/tooltip@3.1.3\n- @react-types/view@3.1.3\n- @react-types/well@3.1.3\n- @spectrum-icons/color@3.3.2\n- @spectrum-icons/illustrations@3.2.3\n- @spectrum-icons/ui@3.2.2\n- @spectrum-icons/workflow@3.2.2\n- react-aria@3.13.0\n- react-stately@3.12.0\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering a Stack Layout ColorSwatchPicker in React\nDESCRIPTION: Demonstrates how to use the ColorSwatchPicker component with a vertical stack layout. The layout prop is set to 'stack' to achieve this arrangement.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSwatchPicker layout=\"stack\">\n  <MyColorSwatchPickerItem color=\"#A00\" />\n  <MyColorSwatchPickerItem color=\"#f80\" />\n  <MyColorSwatchPickerItem color=\"#080\" />\n  <MyColorSwatchPickerItem color=\"#08f\" />\n  <MyColorSwatchPickerItem color=\"#088\" />\n  <MyColorSwatchPickerItem color=\"#008\" />\n</MyColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Setting Hour Cycle in React Spectrum DateField (TSX)\nDESCRIPTION: This snippet shows how to force the React Spectrum `DateField` component to use a specific hour cycle, overriding the user's locale default. By setting the `hourCycle` prop to `24`, the time input will always use the 24-hour format. The `granularity` prop is set to 'minute' to allow minute selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Testing ListView Row Selection with @react-spectrum/test-utils - TypeScript\nDESCRIPTION: This unit test checks ListView row selection using keyboard interactions, leveraging the @react-spectrum/test-utils library. It renders a ListView in a test environment, uses a GridList tester for interaction, and asserts checkbox states before and after toggling rows. Prerequisites include React Testing Library, Spectrum default theme, and @react-spectrum/test-utils; inputs are simulated keyboard actions, output verifies selection state changes through assertions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ListView.test.ts\\nimport {render, within} from '@testing-library/react';\\nimport {theme} from '@react-spectrum/theme-default';\\nimport {User} from '@react-spectrum/test-utils';\\n\\nlet testUtilUser = new User({interactionType: 'mouse'});\\n// Other setup, be sure to check out the suggested mocks mentioned above in https://react-spectrum.adobe.com/react-spectrum/ListView.html#testing\\n\\nit('ListView can select a row via keyboard', async function () {\\n  // Render your test component/app and initialize the gridlist tester\\n  let {getByTestId} = render(\\n    <Provider theme={defaultTheme}>\\n      <ListView data-testid=\\\"test-gridlist\\\" selectionMode=\\\"single\\\">\\n        ...\\n      </ListView>\\n    </Provider>\\n  );\\n  let gridListTester = testUtilUser.createTester('GridList', {root: getByTestId('test-gridlist'), interactionType: 'keyboard'});\\n\\n  let row = gridListTester.rows[0];\\n  expect(within(row).getByRole('checkbox')).not.toBeChecked();\\n  expect(gridListTester.selectedRows).toHaveLength(0);\\n\\n  await gridListTester.toggleRowSelection({row: 0});\\n  expect(within(row).getByRole('checkbox')).toBeChecked();\\n  expect(gridListTester.selectedRows).toHaveLength(1);\\n\\n  await gridListTester.toggleRowSelection({row: 0});\\n  expect(within(row).getByRole('checkbox')).not.toBeChecked();\\n  expect(gridListTester.selectedRows).toHaveLength(0);\\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorField with HTML Forms\nDESCRIPTION: Demonstrates how to use the ColorField component within HTML forms by adding a name prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ColorField label=\"Color\" name=\"color\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a ToastProvider Component with useToastState in React (TSX)\nDESCRIPTION: This component, `ToastProvider`, utilizes the `useToastState` hook from `@react-stately/toast` to manage the state for a queue of toasts, including limiting the maximum number of visible toasts (e.g., 5). It passes the managed state object to its children via a render prop and conditionally renders the `ToastRegion` component only when there are toasts to display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useToastState} from '@react-stately/toast';\n\nfunction ToastProvider({children, ...props}) {\n  let state = useToastState({\n    maxVisibleToasts: 5\n  });\n\n  return (\n    <>\n      {children(state)}\n      {state.visibleToasts.length > 0 && <ToastRegion {...props} state={state} />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TextArea Labeling Options in React Spectrum\nDESCRIPTION: Illustrates different labeling options for TextArea, including required fields and necessity indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-150\" wrap>\n  <TextArea label=\"Address\" />\n  <TextArea label=\"Address\" isRequired necessityIndicator=\"icon\" />\n  <TextArea label=\"Address\" isRequired necessityIndicator=\"label\" />\n  <TextArea label=\"Address\" necessityIndicator=\"label\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Toast Props and useToast Hook in TypeScript\nDESCRIPTION: Defines the `ToastProps` interface for customizing toast notifications, including variant type, dismissibility, auto-dismiss duration, action handlers, and unique identification, as well as the `ToastAria` interface for ARIA prop distribution. The `useToast` hook signature enables integration with component state for implementing custom toast logic. Requires React and associated type imports (e.g., `ReactNode`, `HTMLAttributes`). All properties are thoroughly documented. Accepts props and state as arguments and returns ARIA prop objects for various subcomponents.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Toast.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ToastProps {\n  // Variant of the toast, default is 'neutral'.\n  variant?: 'neutral' | 'informative' | 'positive' | 'negative',\n\n  // Whether or not the toast is closable via a 'x' button. Note: this is a carry over from previous versions.\n  isDismissible?: boolean,\n\n  // Callback when toast is dismissed.\n  onDismiss? () => void,\n\n  // Sets how long the toast remains on screen before being automatically dismissed. If undefined, the toast remains indefinitely.\n  autoDismissDuration? number,\n\n  // The contents of the toast.\n  children: ReactNode,\n\n  // The label for the optional action button.\n  actionLabel?: ReactNode,\n\n  // Callback triggered when toast action button is pressed.\n  onAction? () => void,\n\n  // Unique identifier for the toast, autogenerated if not provided by the user.\n  key?: string,\n\n  // Callback  triggered when the toast has fully transitioned out\n  onExit?: () => void\n}\n\ninterface ToastAria {\n  // Props for the Toast div (e.g. role=\"alert\").\n  toastProps: HTMLAttributes<HTMLDivElement>,\n\n  // Props for close button (e.g. aria-label = \"close\", press handlers that call props.onDismiss).\n  closeButtonProps: ButtonHTMLAttributes<HTMLButtonElement>,\n\n  // Props for action button (e.g. press handlers that call props.onAction)\n  actionButtonProps: ButtonHTMLAttributes<HTMLButtonElement>\n}\n\nfunction useToast(props: ToastProps, state: ToastState): ToastAria;\n\n```\n\n----------------------------------------\n\nTITLE: Initializing DateRangePicker with Absolute Dates Converted to Local Time Zone (React Spectrum, TypeScript/JSX)\nDESCRIPTION: This example shows how to use parseAbsoluteToLocal from @internationalized/date to convert absolute UTC dates into the current user's local time zone for the DateRangePicker component. This method suits scenarios where input dates are in ISO 8601 UTC format and should be displayed in the local context. React, parseAbsoluteToLocal, and MyDateRangePicker are required; the start and end values are provided in UTC and mapped to local.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\\n\\n<MyDateRangePicker\\n  label=\\\"Date range\\\"\\n  defaultValue={{\\n    start: parseAbsoluteToLocal('2021-11-07T07:45:00Z'),\\n    end: parseAbsoluteToLocal('2021-11-08T14:25:00Z')\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable Button Component\nDESCRIPTION: Creates a reusable Button component using the useButton hook, which can be used for increment and decrement buttons in the NumberField.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Applying Classes Based on State in React Aria Checkbox (JSX)\nDESCRIPTION: This JSX snippet demonstrates using a function within the `className` prop of a React Aria `Checkbox`. The function receives the component's state (e.g., `isPressed`) and returns different classes based on that state, facilitating dynamic styling, often used with utility CSS frameworks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Implementing International Calendar Support in DatePicker with React Spectrum\nDESCRIPTION: This example demonstrates how to use the DatePicker component with the Indian calendar system in Hindi language. The selected date is displayed in the Gregorian calendar format for consistent processing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DatePicker label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic List with Multiple Selection\nDESCRIPTION: This example demonstrates how to use the List component to create a basic list with multiple selection and interactive children in each item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Item} from \"@react-stately/collections\";\n\n// Reuse the Button from your component library. See below.\nimport {Button} from 'your-component-library';\n\n<List aria-label=\"Example List\" selectionMode=\"multiple\" selectionBehavior=\"replace\">\n  <Item textValue=\"Charizard\">\n    Charizard\n    <Button onPress={() => alert(`Info for Charizard...`)}>Info</Button>\n  </Item>\n  <Item textValue=\"Blastoise\">\n    Blastoise\n    <Button onPress={() => alert(`Info for Blastoise...`)}>Info</Button>\n  </Item>\n  <Item textValue=\"Venusaur\">\n    Venusaur\n    <Button onPress={() => alert(`Info for Venusaur...`)}>Info</Button>\n  </Item>\n  <Item textValue=\"Pikachu\">\n    Pikachu\n    <Button onPress={() => alert(`Info for Pikachu...`)}>Info</Button>\n  </Item>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Integrating a Switch Component with HTML Forms in TSX\nDESCRIPTION: This snippet shows how to integrate the custom `Switch` component (built with `useSwitch`) into standard HTML forms. By providing the `name` and `value` props, the switch's state can be included in form submissions. The `value` is submitted when the switch is selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/switch/docs/useSwitch.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch name=\"power\" value=\"low\">Low power mode</Switch>\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to RadioGroup in React (TSX)\nDESCRIPTION: Shows how to associate descriptive help text with a RadioGroup using the `Text` component with the `slot=\"description\"` attribute. This enhances accessibility and provides context to the user.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<RadioGroup>\n  <Label>Favorite avatar</Label>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n  <Text slot=\"description\">Please select an avatar.</Text>\n</RadioGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Small-sized Modal Dialog in React Spectrum\nDESCRIPTION: This example shows how to create a small-sized modal dialog using DialogTrigger and Dialog components. It includes a form with input fields and buttons for user interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Small</ActionButton>\n  {(close) => (\n    <Dialog size=\"S\">\n      <Heading>Profile</Heading>\n      <Divider />\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button autoFocus variant=\"accent\" onPress={close}>Save</Button>\n      </ButtonGroup>\n      <Content>\n        <Form>\n          <TextField label=\"Name\" />\n          <Checkbox>Make private</Checkbox>\n        </Form>\n      </Content>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Handling Initial Selection with Asynchronous Loading in React Spectrum ComboBox (TSX)\nDESCRIPTION: Shows an advanced asynchronous `ComboBox` example using `useAsyncList` that handles controlled `inputValue` and `selectedKey`. It updates the `inputValue` to match the text of the `selectedKey` once the data loads, using `filterText` returned from the `load` function and managing focus state with `useRef`. This ensures the input field reflects the initial selection correctly.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\ninterface Character {\n  name: string\n}\n\nfunction AsyncLoadingExample() {\n  let isFocused = React.useRef(false);\n  let list = useAsyncList<Character>({\n    async load({signal, cursor, filterText, selectedKeys}) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      // If no cursor is available, then we're loading the first page,\n      // filtering the results returned via a query string that\n      // mirrors the ComboBox input text.\n      // Otherwise, the cursor is the next URL to load,\n      // as returned from the previous page.\n      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=${filterText}`, {signal});\n      let json = await res.json();\n\n      let selectedText;\n      let selectedKey = selectedKeys !== 'all' && selectedKeys.values().next().value;\n\n      // If selectedKey exists and combobox is not focused, update the input value with the selected key text\n      // This allows the input value to be up to date when items load for the first time or the selected key text is updated server side.\n      if (!isFocused.current && selectedKey) {\n        let selectedItemName = json.results.find(item => item.name === selectedKey)?.name;\n        if (selectedItemName != null && selectedItemName !== filterText) {\n          selectedText = selectedItemName;\n        }\n      }\n\n      return {\n        items: json.results,\n        cursor: json.next,\n        filterText: selectedText ?? filterText\n      };\n    },\n    initialSelectedKeys: ['Luke Skywalker'],\n    getKey: (item) => item.name\n  });\n\n  let onSelectionChange = (key) => {\n    let itemText = list.getItem(key)?.name;\n    list.setSelectedKeys(new Set([key]));\n    list.setFilterText(itemText);\n  };\n\n  let onInputChange = (value) => {\n    // Clear key if user deletes all text in the field\n    if (value === '') {\n      list.setSelectedKeys(new Set([null]));\n    }\n    list.setFilterText(value);\n  };\n\n  let selectedKey = list.selectedKeys !== 'all' && list.selectedKeys.values().next().value;\n  return (\n    <ComboBox\n      label=\"Star Wars Character Lookup\"\n      onFocusChange={(focus) => isFocused.current = focus}\n      selectedKey={selectedKey}\n      onSelectionChange={onSelectionChange}\n      items={list.items}\n      inputValue={list.filterText}\n      onInputChange={onInputChange}\n      loadingState={list.loadingState}\n      onLoadMore={list.loadMore}>\n      {item => <Item key={item.name}>{item.name}</Item>}\n    </ComboBox>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Button with onPress State Handler in Spectrum React (TypeScript)\nDESCRIPTION: This code demonstrates handling user interactions with the Spectrum 'Button' component using the 'onPress' event to increment a counter in React state. It provides an example for managing button-related stateful actions and ensures responsive updates to button labels. Dependencies include React's useState hook and '@react-spectrum/button'. Input is any press/click event; output is button label update.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [count, setCount] = React.useState(0);\\n\\n  return (\\n    <Button variant=\\\"primary\\\" onPress={() => setCount(c => c + 1)}>{count} Dogs</Button>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dismissable Modal with react-aria-components in TSX\nDESCRIPTION: Shows how to configure a modal to close when the user clicks outside of it. This is achieved by setting the `isDismissable` prop to true on the `Modal` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <Button>Open dialog</Button>\n  <Modal isDismissable>\n    <Dialog>\n      <Heading slot=\"title\">Notice</Heading>\n      <p>Click outside to close this dialog.</p>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating Link Tags in React Spectrum TagGroup using TSX\nDESCRIPTION: Illustrates how to render tags as hyperlinks within `MyTagGroup`. Each `MyTag` component is given an `href` prop to specify the link destination (e.g., external websites) and `target=\"_blank\"` to open the link in a new tab. Tags with an `href` prop are not selectable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyTagGroup label=\"Links\">\n  <MyTag href=\"https://adobe.com/\" target=\"_blank\">Adobe</MyTag>\n  <MyTag href=\"https://apple.com/\" target=\"_blank\">Apple</MyTag>\n  <MyTag href=\"https://google.com/\" target=\"_blank\">Google</MyTag>\n  <MyTag href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</MyTag>\n</MyTagGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Standard Confirmation Dialog Implementation in React Spectrum\nDESCRIPTION: Example of a standard confirmation dialog with title, content, and action buttons. Shows how to handle close actions with the DialogTrigger's close function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Publish</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Publish 3 pages</Heading>\n      <Divider />\n      <Content>Confirm publish?</Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Single and Multi-Thumb Slider Styles with Custom CSS\nDESCRIPTION: This CSS snippet provides the base styles for horizontal and vertical slider components, including their tracks, thumbs, focus/dragging states, disabled styling, and layout containers. It defines rules for rendering the slider's visual elements and ensures accessibility by differentiating states. The styles expect corresponding HTML structure as generated by the React components. All classes are in the BEM-like naming convention. Limitations: appearance is basic and may require customization for production.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.slider {\\n  display: flex;\\n}\\n\\n.slider.horizontal {\\n  flex-direction: column;\\n  width: 300px;\\n}\\n\\n.slider.vertical {\\n  height: 150px;\\n}\\n\\n.label-container {\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n.slider.horizontal .track {\\n  height: 30px;\\n  width: 100%;\\n}\\n\\n/* track line */\\n.track:before {\\n  content: attr(x);\\n  display: block;\\n  position: absolute;\\n  background: gray;\\n}\\n\\n.slider.horizontal .track:before {\\n  height: 3px;\\n  width: 100%;\\n  top: 50%;\\n  transform: translateY(-50%);\\n}\\n\\n.slider.vertical .track {\\n  width: 30px;\\n  height: 100%;\\n}\\n\\n.slider.vertical .track:before {\\n  width: 3px;\\n  height: 100%;\\n  left: 50%;\\n  transform: translateX(-50%);\\n}\\n\\n.thumb {\\n  width: 20px;\\n  height: 20px;\\n  border-radius: 50%;\\n  background: gray;\\n}\\n\\n.thumb.dragging {\\n  background: dimgray;\\n}\\n\\n.thumb.focus {\\n  background: orange;\\n}\\n\\n.slider.horizontal .thumb {\\n  top: 50%;\\n}\\n\\n.slider.vertical .thumb {\\n  left: 50%;\\n}\\n\\n.track.disabled {\\n  opacity: 0.4;\\n}\n```\n\n----------------------------------------\n\nTITLE: IllustratedMessage for 503 Service Unavailable Error\nDESCRIPTION: Example using the Unavailable illustration to display a 503 service unavailable error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport Unavailable from '@spectrum-icons/illustrations/Unavailable';\n\n<IllustratedMessage>\n  <Unavailable />\n  <Heading>Error 503: Service unavailable</Heading>\n  <Content>This page isn't working. Try a different page or try again later.</Content>\n</IllustratedMessage>\n```\n\n----------------------------------------\n\nTITLE: Hiding TimeZone in DateRangePicker\nDESCRIPTION: Shows how to hide timezone display in DateRangePicker when using ZonedDateTime objects.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]'),\n    end: parseZonedDateTime('2022-11-08T19:45[America/Los_Angeles]')\n  }}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v3 with React Aria Components Plugin in JS\nDESCRIPTION: Demonstrates how to configure Tailwind CSS v3 by adding the `tailwindcss-react-aria-components` plugin (version 1.x is recommended for v3 compatibility) to the `plugins` array within the `tailwind.config.js` file. This enables Tailwind utilities and styles specifically designed for `react-aria-components` in v3 projects.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/image-grid.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: NumberField with Custom Decimal Formatting\nDESCRIPTION: Demonstrates how to use the NumberField component with custom decimal formatting options, including sign display and fraction digits.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n<NumberField\n  label=\"Adjust exposure\"\n  defaultValue={0}\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Quiet Style ActionMenu in React Spectrum\nDESCRIPTION: Shows how to create a quiet variant of the ActionMenu with the isQuiet prop, following Spectrum design guidelines for a more subtle UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionMenu\n  isQuiet\n  items={[\n    {name: 'Cut', id: 'cut'},\n    {name: 'Copy', id: 'copy'},\n    {name: 'Paste', id: 'paste'}\n  ]}>\n  {item => <Item>{item.name}</Item>}\n</ActionMenu>\n```\n\n----------------------------------------\n\nTITLE: Picker with Required Field Indicators\nDESCRIPTION: Examples showing different ways to indicate required field status in Picker components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Choose frequency\" isRequired necessityIndicator=\"icon\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Disabling Drop Functionality in React with TypeScript\nDESCRIPTION: This snippet shows how to disable dropping functionality in a React component by setting the isDisabled option in the useDrop hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrop.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextDropItem} from '@react-aria/dnd';\nimport {useDrop} from '@react-aria/dnd';\n\nfunction DropTarget() {\n  let [dropped, setDropped] = React.useState(null);\n  let ref = React.useRef(null);\n  let {dropProps, isDropTarget} = useDrop({\n    ref,\n    async onDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(item => item.kind === 'text' && item.types.has('text/plain'))\n          .map((item: TextDropItem) => item.getText('text/plain'))\n      );\n      setDropped(items.join('\\n'));\n    },\n    isDisabled: true\n  });\n\n  return (\n    <div {...dropProps} role=\"button\" tabIndex={0} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`}>\n      {dropped || 'Drop here'}\n    </div>\n  );\n}\n\n<Draggable />\n<DropTarget />\n```\n\n----------------------------------------\n\nTITLE: Defining Accessible Labels and Descriptions for ListBoxItems - React Spectrum - TypeScript\nDESCRIPTION: This example illustrates how to add semantic labels and descriptions to ComboBox items using the <Text> component with 'label' and 'description' slots. This enhances screen reader accessibility and allows for flexible UI styling. Dependencies are React, react-aria-components, and MyComboBox. Inputs are the text values for label and description; outputs are ComboBox items with enriched text structure. ARIA spec prohibits adding interactive content inside listbox items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\nimport {Text} from 'react-aria-components';\n\n<MyComboBox label=\"Select action\">\n  <ListBoxItem textValue=\"Add to queue\">\n    <Text slot=\"label\">Add to queue</Text>\n    <Text slot=\"description\">Add to current watch queue.</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Add review\">\n    <Text slot=\"label\">Add review</Text>\n    <Text slot=\"description\">Post a review for the episode.</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Subscribe to series\">\n    <Text slot=\"label\">Subscribe to series</Text>\n    <Text slot=\"description\">Add series to your subscription list and be notified when a new episode airs.</Text>\n  </ListBoxItem>\n  <ListBoxItem textValue=\"Report\">\n    <Text slot=\"label\">Report</Text>\n    <Text slot=\"description\">Report an issue/violation.</Text>\n  </ListBoxItem>\n</MyComboBox>\n```\n```\n\n----------------------------------------\n\nTITLE: Meter Component Size Variants\nDESCRIPTION: Shows how to implement different size variants of the Meter component using the size prop with small (S) and large (L) values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-300\">\n  <Meter label=\"Space used\" size=\"S\" value={90} variant=\"critical\" />\n  <Meter label=\"Space used\" size=\"L\" value={90} variant=\"critical\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker with ColorEditor (TypeScript/TSX)\nDESCRIPTION: This snippet showcases a basic usage example of the ColorPicker component with an embedded ColorEditor as a child. It sets the ColorPicker's label and a default color value. The ColorEditor provides UI elements for color selection and editing. The label and defaultValue props are key for providing accessibility and starting appearance. Requires @react-spectrum/color installed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker label=\"Fill\" defaultValue=\"#5100FF\">\n  <ColorEditor />\n</ColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with CSS\nDESCRIPTION: Demonstrates how to style React Aria Components using CSS selectors targeting the default class names provided by the library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Select {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Unavailable Dates in React Spectrum RangeCalendar using TSX\nDESCRIPTION: Demonstrates using the `isDateUnavailable` prop with a callback function to define and disable selection of specific date ranges within the `RangeCalendar`. It also uses the `minValue` prop to prevent selecting dates before the current day. Requires `@internationalized/date` for date manipulation and `getLocalTimeZone`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let isDateUnavailable = (date: DateValue) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return <MyRangeCalendar aria-label=\"Trip dates\" minValue={today(getLocalTimeZone())} isDateUnavailable={isDateUnavailable} />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Render Props Pattern for Custom Placeholder Display - React Spectrum (JSX)\nDESCRIPTION: Demonstrates using render props as children in DateSegment to customize rendering based on segment state. Here, a span is always reserved for the placeholder, using visibility to toggle display, providing consistent layout even when switching between actual values and placeholders. Inputs include text, placeholder, and isPlaceholder props from React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_24\n\nLANGUAGE: JSX\nCODE:\n```\n<DateSegment>\n  {({text, placeholder, isPlaceholder}) => (\n    <>\n      <span style={{visibility: isPlaceholder ? 'visible' : 'hidden'}}>{placeholder}</span>\n      {isPlaceholder ? '' : text}\n    </>\n  )}\n</DateSegment>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Dependencies for useTreeState\nDESCRIPTION: Imports various documentation components, API information, and package data needed to render the useTreeState documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tree/docs/useTreeState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-stately/tree';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/tree/package.json';\n```\n\n----------------------------------------\n\nTITLE: Rendering an Accessible Checkbox Group with React Aria Components in TypeScript\nDESCRIPTION: This TypeScript (TSX) snippet demonstrates the usage of the CheckboxGroup, Checkbox, and Label components from react-aria-components to create an accessible, themable list of checkboxes. Dependencies include React, react-aria-components, and appropriate SVG icon usage. The CheckboxGroup holds several Checkbox children, each with a value and visual indicator. Inputs and outputs are handled via React's composition, with no explicit state management required for this uncontrolled example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {CheckboxGroup, Checkbox, Label} from 'react-aria-components';\n\n<CheckboxGroup>\n  <Label>Favorite sports</Label>\n  <Checkbox value=\"soccer\">\n    <div className=\"checkbox\" aria-hidden=\"true\">\n      <svg viewBox=\"0 0 18 18\"><polyline points=\"1 9 7 14 15 4\" /></svg>\n    </div>\n    Soccer\n  </Checkbox>\n  <Checkbox value=\"baseball\">\n    <div className=\"checkbox\" aria-hidden=\"true\">\n      <svg viewBox=\"0 0 18 18\"><polyline points=\"1 9 7 14 15 4\" /></svg>\n    </div>\n    Baseball\n  </Checkbox>\n  <Checkbox value=\"basketball\">\n    <div className=\"checkbox\" aria-hidden=\"true\">\n      <svg viewBox=\"0 0 18 18\"><polyline points=\"1 9 7 14 15 4\" /></svg>\n    </div>\n    Basketball\n  </Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Defaulting Value with Time Zone-Aware Placeholder - React Spectrum - TypeScript/TSX\nDESCRIPTION: This snippet showcases the use of the placeholderValue prop with the now utility from @internationalized/date, allowing the DateField to display a placeholder date/time in a specific time zone (America/New_York). Demonstrates how granularity and placeholderValue together influence emitted values from onChange, particularly when no value or defaultValue is set. Two DateField inputs are rendered in a Flex container to observe the difference with and without an explicit placeholderValue.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {now} from '@internationalized/date';\n\n<Flex gap=\"size-150\" wrap>\n  <DateField\n    label=\"Event date\"\n    granularity=\"second\" />\n  <DateField\n    label=\"Event date\"\n    placeholderValue={now('America/New_York')}\n    granularity=\"second\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation with SearchAutocomplete in React Spectrum\nDESCRIPTION: This example shows how to add validation to a SearchAutocomplete component within a Form. It uses the isRequired prop to enforce user input and integrates with the Form component for validation display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <SearchAutocomplete label=\"Favorite animal\" name=\"animal\" isRequired>\n    <Item>Aardvark</Item>\n    <Item>Cat</Item>\n    <Item>Dog</Item>\n    <Item>Kangaroo</Item>\n    <Item>Panda</Item>\n    <Item>Snake</Item>\n  </SearchAutocomplete>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Using Render Props for Conditional Rendering within Radio (JSX)\nDESCRIPTION: Illustrates using a render prop as the children of a Radio component to conditionally render different UI elements based on the component's state, such as `isSelected`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<Radio>\n  {({isSelected}) => (\n    <>\n      {isSelected && <SelectedIcon />}\n      Option\n    </>\n  )}\n</Radio>\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering DatePicker with International Calendar and Locale Support (TypeScript)\nDESCRIPTION: Renders a DatePicker using Hindi language and the Indian calendar via I18nProvider. Dates selected are emitted in Gregorian calendar regardless of display. Uses locale prop set to 'hi-IN-u-ca-indian', React state, and value/onChange props. Dependencies: @react-aria/i18n, React. Input is null or a selected date; output is both the picker UI and a textual representation. Locale and calendar system differences are handled automatically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: TSX\nCODE:\n```\nimport {I18nProvider} from '@react-aria/i18n';\\n\\nfunction Example() {\\n  let [date, setDate] = React.useState(null);\\n  return (\\n    <I18nProvider locale=\\\"hi-IN-u-ca-indian\\\">\\n      <DatePicker label=\\\"Date\\\" value={date} onChange={setDate} />\\n      <p>Selected date: {date?.toString()}</p>\\n    </I18nProvider>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling the 'Select All' State in React Spectrum ListBox (TSX)\nDESCRIPTION: This snippet explains how to handle the 'select all' case in React Spectrum collection components. When all items are selected (e.g., via a 'Select All' checkbox or keyboard shortcut), `onSelectionChange` receives the string literal `\"all\"` instead of a Set of keys. The `selectedKeys` state should also be checked for this string value when performing actions, as it represents all items in the collection, including potentially unloaded ones.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/selection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet [selectedKeys, setSelectedKeys] = useState(new Set());\n\nfunction performBulkAction() {\n  /*- begin highlight -*/\n  if (selectedKeys === 'all') {\n  /*- end highlight -*/\n    // perform action on all items\n  } else {\n    // perform action on selected items in selectedKeys\n  }\n}\n\n<ListBox\n  items={items}\n  selectedKeys={selectedKeys}\n  onSelectionChange={setSelectedKeys}>\n  {item => <ListBoxItem>{item.name}</ListBoxItem>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Picker with Options Array\nDESCRIPTION: Example of a Picker component using dynamic data from an array with selection state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aardvark'},\n    {id: 2, name: 'Cat'},\n    {id: 3, name: 'Dog'},\n    {id: 4, name: 'Kangaroo'},\n    {id: 5, name: 'Koala'},\n    {id: 6, name: 'Penguin'},\n    {id: 7, name: 'Snake'},\n    {id: 8, name: 'Turtle'},\n    {id: 9, name: 'Wombat'}\n  ];\n  let [animalId, setAnimalId] = React.useState(null);\n\n  return (\n    <>\n      <Picker label=\"Pick an animal\" items={options} onSelectionChange={setAnimalId}>\n        {item => <Item>{item.name}</Item>}\n      </Picker>\n      <p>Animal id: {animalId}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Menu Collection in React Aria (TSX)\nDESCRIPTION: Demonstrates how to create a static collection for a `Menu` component using hardcoded `MenuItem` elements. This approach is suitable for collections that do not change, such as action menus built into an application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu>\n  <MenuItem>Open</MenuItem>\n  <MenuItem>Edit</MenuItem>\n  <MenuItem>Delete</MenuItem>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Removable Items in React\nDESCRIPTION: This example shows how to implement removable tags using the onRemove prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let defaultItems = [\n    {id: 1, name: 'News'},\n    {id: 2, name: 'Travel'},\n    {id: 3, name: 'Gaming'},\n    {id: 4, name: 'Shopping'}\n  ];\n\n  let [items, setItems] = React.useState(defaultItems);\n\n  let onRemove = (keys) => {\n    setItems(prevItems => prevItems.filter((item) => !keys.has(item.id)));\n  };\n\n  return (\n    <TagGroup\n      items={items}\n      onRemove={onRemove}\n      aria-label=\"Removable TagGroup example\">\n      {item => <Item>{item.name}</Item>}\n    </TagGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TimeField with ZonedDateTime using parseZonedDateTime in TypeScript\nDESCRIPTION: Shows how to initialize a TimeField component value using a ZonedDateTime object parsed from an ISO 8601 formatted string with explicit time zone information. Requires the @internationalized/date package's parseZonedDateTime function. The defaultValue expects a string representing both time and time zone, ensuring proper localization, display, and time zone logic.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\\n\\n<MyTimeField\\n  label=\"Event time\"\\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Empty State in Table - React Spectrum (TypeScript)\nDESCRIPTION: This TypeScript/React snippet customizes the table’s empty state using the renderEmptyState prop on TableBody, causing the message 'No results found.' to render when there are no items. The table consists of static columns and delegates row rendering to the provided function; in this example, the data is empty (an empty array). Dependencies are React and React Spectrum Table components. Inputs: no rows; outputs: message string rendered in the table body. There are no significant constraints beyond those of the surrounding Table implementation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Table aria-label=\"Search results\">\n  <TableHeader>\n    <Column isRowHeader>Name</Column>\n    <Column>Type</Column>\n    <Column>Date Modified</Column>\n  </TableHeader>\n  {/*- begin highlight -*/}\n  <TableBody renderEmptyState={() => 'No results found.'}>\n  {/*- end highlight -*/}\n    {[]}\n  </TableBody>\n</Table>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Form Input with useState in React Aria\nDESCRIPTION: Shows how to manage form field state using React's `useState` hook, making the `TextField` controlled. The component's state (`name`, `setName`) is passed as `value` and `onChange` props to the `TextField`, allowing real-time access and manipulation of the input value within the React component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, TextField, Label, Input, Button} from 'react-aria-components';\n\nfunction Example() {\n  /*- begin highlight -*/\n  let [name, setName] = React.useState('');\n  /*- end highlight -*/\n\n  let onSubmit = (e) => {\n    e.preventDefault();\n\n    // Submit data to your backend API...\n    alert(name);\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      {/*- begin highlight -*/}\n      <TextField value={name} onChange={setName}>\n      {/*- end highlight -*/}\n        <Label>Name</Label>\n        <Input />\n      </TextField>\n      <div>You entered: {name}</div>\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Drop Functionality with React Aria Components\nDESCRIPTION: This example demonstrates how to accept directory drops over a collection component and render the contents as items in a list. It uses DIRECTORY_DRAG_TYPE to limit accepted items to only directories and processes directory contents asynchronously.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nimport File from '@spectrum-icons/workflow/FileTxt';\nimport Folder from '@spectrum-icons/workflow/Folder';\n///- begin highlight -///\nimport {DIRECTORY_DRAG_TYPE, isDirectoryDropItem} from 'react-aria-components';\n///- end highlight -///\n\ninterface DirItem {\n  name: string,\n  kind: string,\n  type: string\n}\n\nfunction Example() {\n  let [files, setFiles] = React.useState<DirItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    /*- begin highlight -*/\n    acceptedDragTypes: [DIRECTORY_DRAG_TYPE],\n    async onRootDrop(e) {\n      // Read entries in directory and update state with relevant info.\n      let dir = e.items.find(isDirectoryDropItem)!;\n      let files = [];\n      for await (let entry of dir.getEntries()) {\n        files.push({\n          name: entry.name,\n          kind: entry.kind,\n          type: entry.kind === 'directory' ? 'Directory' : entry.type\n        });\n      }\n      setFiles(files);\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <Table\n      aria-label=\"Droppable table\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader>\n        <Column>Kind</Column>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n      </TableHeader>\n      <TableBody items={files} renderEmptyState={() => 'Drop directory here'}>\n        {item => (\n          <Row id={item.name}>\n            <Cell>{item.kind === 'directory' ? <Folder /> : <File />}</Cell>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using DatePicker with International Calendars via I18nProvider in React\nDESCRIPTION: This TSX example demonstrates rendering a DatePicker component within an `I18nProvider` configured for the Hindi language and Indian calendar ('hi-IN-u-ca-indian'). Although the UI displays the Indian calendar, the date value managed by `React.useState` and emitted via `onChange` remains in the Gregorian calendar system, ensuring consistent data handling. The selected Gregorian date string is displayed below the picker.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState<DateValue | null>(null);\n  return (\n    /*- begin highlight -*/\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n    {/*- end highlight -*/}\n      <MyDatePicker label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing SelectValue with render props - React Spectrum - TypeScript\nDESCRIPTION: Shows how SelectValue provides render props including defaultChildren and isPlaceholder to customize displayed value. Renders bolded placeholder text or selected value. Requires Select, Button, SelectValue, ListBox, etc. Input: current select state. Output: Context-aware display string or nodes for selected/placeholder state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<Select>\\n  <Label>Favorite Animal</Label>\\n  <Button>\\n    {/*- begin highlight -*/}\\n    <SelectValue>\\n      {({defaultChildren, isPlaceholder}) => {\\n        return isPlaceholder ? <><b>Animal</b> selection</> : defaultChildren;\\n      }}\\n    </SelectValue>\\n    {/*- end highlight -*/}\\n    <span aria-hidden=\\\"true\\\">▼</span>\\n  </Button>\\n  <Popover>\\n    <ListBox>\\n      <ListBoxItem>Aardvark</ListBoxItem>\\n      <ListBoxItem>Cat</ListBoxItem>\\n      <ListBoxItem>Dog</ListBoxItem>\\n      <ListBoxItem>Kangaroo</ListBoxItem>\\n      <ListBoxItem>Panda</ListBoxItem>\\n      <ListBoxItem>Snake</ListBoxItem>\\n    </ListBox>\\n  </Popover>\\n</Select>\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Labels to ColorArea Components\nDESCRIPTION: Demonstrates how to add custom accessibility labels to ColorArea components using aria-label and aria-labelledby props for better screen reader support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', gap: 8, alignItems: 'end', flexWrap: 'wrap'}}>\n  <MyColorArea\n    /*- begin highlight -*/\n    aria-label=\"Background color\"\n    /*- end highlight -*/\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    xChannel=\"saturation\"\n    yChannel=\"lightness\" />\n  <div>\n    {/*- begin highlight -*/}\n    <label id=\"hsl-aria-labelledby-id\">Background color</label>\n    {/*- end highlight -*/}\n    <MyColorArea\n      /*- begin highlight -*/\n      aria-labelledby=\"hsl-aria-labelledby-id\"\n      /*- end highlight -*/\n      defaultValue=\"hsl(0, 100%, 50%)\"\n      xChannel=\"saturation\"\n      yChannel=\"lightness\" />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Label Color Variants for StatusLight\nDESCRIPTION: Examples of StatusLight components using label color variants, which are designed for color coding categories in data visualization with up to 8 distinct colors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/statuslight/docs/StatusLight.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<StatusLight variant=\"indigo\">Indigo</StatusLight>\n<StatusLight variant=\"celery\">Celery</StatusLight>\n<StatusLight variant=\"magenta\">Magenta</StatusLight>\n<StatusLight variant=\"yellow\">Yellow</StatusLight>\n<StatusLight variant=\"fuchsia\">Fuchsia</StatusLight>\n<StatusLight variant=\"seafoam\">Seafoam</StatusLight>\n<StatusLight variant=\"chartreuse\">Chartreuse</StatusLight>\n<StatusLight variant=\"purple\">Purple</StatusLight>\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Grid Layout in ListBox with React\nDESCRIPTION: Example of a ListBox with grid layout that enables two-dimensional keyboard navigation. This implementation creates a vertically scrolling grid of album cards.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Albums\"\n  layout=\"grid\"\n  items={albums}\n  selectionMode=\"multiple\">\n  {item => (\n    <ListBoxItem textValue={item.title}>\n      <img src={item.image} alt=\"\" />\n      <Text slot=\"label\">{item.title}</Text>\n      <Text slot=\"description\">{item.artist}</Text>\n    </ListBoxItem>\n  )}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Sorting in React Spectrum Table\nDESCRIPTION: This snippet demonstrates how to implement client-side sorting in a React Spectrum Table using the useAsyncList hook. It fetches data from an API and allows sorting by different columns.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string,\n  height: number,\n  mass: number,\n  birth_year: number\n}\n\nfunction AsyncSortTable() {\n  let list = useAsyncList<Character>({\n    async load({signal}) {\n      let res = await fetch(`https://swapi.py4e.com/api/people/?search`, {signal});\n      let json = await res.json();\n      return {\n        items: json.results\n      };\n    },\n    async sort({items, sortDescriptor}) {\n      return {\n        items: items.sort((a, b) => {\n          let first = a[sortDescriptor.column];\n          let second = b[sortDescriptor.column];\n          let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;\n          if (sortDescriptor.direction === 'descending') {\n            cmp *= -1;\n          }\n          return cmp;\n        })\n      };\n    }\n  });\n\n  return (\n    <Table aria-label=\"Example table with client side sorting\" sortDescriptor={list.sortDescriptor} onSortChange={list.sort}>\n      <TableHeader>\n        <Column key=\"name\" allowsSorting>Name</Column>\n        <Column key=\"height\" allowsSorting>Height</Column>\n        <Column key=\"mass\" allowsSorting>Mass</Column>\n        <Column key=\"birth_year\" allowsSorting>Birth Year</Column>\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row key={item.name}>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Indeterminate ProgressBar in React Spectrum\nDESCRIPTION: Shows how to create an indeterminate ProgressBar for situations where wait time or effort to completion cannot be determined.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressBar label=\"Loading…\" isIndeterminate />\n```\n\n----------------------------------------\n\nTITLE: Providing Help Text for TimeField with the Description Slot in TypeScript/React\nDESCRIPTION: Shows how to associate a help or guidance message with a TimeField using the description slot and the Text component. Help text explains validation rules or context to the user. Requires no additional dependencies beyond standard TimeField, DateInput, DateSegment, and Text components, improving accessibility and UX.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField>\\n  <Label>Appointment time</Label>\\n  <DateInput>\\n    {segment => <DateSegment segment={segment} />}\\n  </DateInput>\\n  {/*- begin highlight -*/}\\n  <Text slot=\"description\">Please select a time between 9 AM and 5 PM.</Text>\\n  {/*- end highlight -*/}\\n</TimeField>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for React Aria Components Plugin (CSS, JS)\nDESCRIPTION: Shows how to import and activate the tailwindcss-react-aria-components plugin for both Tailwind v4 (imported in CSS) and Tailwind v3 (required in tailwind.config.js). The CSS import enables plugin utilities in the global stylesheet for v4. For v3, the JavaScript config includes the plugin using require([...]). Expects tailwindcss and tailwindcss-react-aria-components as dependencies; version compatibility is noted (v3 of Tailwind requires plugin v1.x).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/contact-list.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Class Functions in React Aria\nDESCRIPTION: This example shows how to use function-based className props to dynamically style components based on their states, which is useful with utility CSS frameworks like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_54\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: TextArea with onChange Event in React Spectrum\nDESCRIPTION: Demonstrates how to use the onChange event to update a separate element with the TextArea's content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [text, setText] = React.useState('');\n\n  return (\n    <Flex direction=\"column\">\n      <TextArea\n        onChange={setText}\n        label=\"Your text\"\n      />\n      <pre>Mirrored text: {text}</pre>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hour Cycle Format in DatePicker\nDESCRIPTION: Forces a DatePicker to use 24-hour time format regardless of the user's locale by setting the hourCycle property.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled DateField\nDESCRIPTION: This snippet demonstrates how to render a disabled DateField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField label=\"Birth date\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom View Component with Spectrum DNA Style Props (JSX)\nDESCRIPTION: This snippet showcases a custom View component in React Spectrum configured with background color, width, and height properties, all using Spectrum DNA variable values. The 'elementType' prop allows the underlying element to be a span for layout flexibility. Each prop ('backgroundColor', 'width', 'height') takes specific values from the Spectrum token system, ensuring cross-platform visual fidelity. The View component abstracts standard HTML elements and safely applies only allowed styling properties, outputting an appropriately styled container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-dom-props.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<View\\n  backgroundColor=\\\"negative\\\"\\n  width=\\\"single-line-width\\\"\\n  height=\\\"size-500\\\"\\n  elementType=\\\"span\\\" />\n```\n\n----------------------------------------\n\nTITLE: Picker with Custom Label Alignment (React/TypeScript)\nDESCRIPTION: This example demonstrates how to customize the label alignment and position for a Picker component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Choose frequency\" labelPosition=\"side\" labelAlign=\"end\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Using Context Providers for Conditional TagGroup Removal in TSX\nDESCRIPTION: This component, `Removable`, utilizes React Context (`ToggleButtonContext`, `TagGroupContext`) to control the `onRemove` prop of a nested `TagGroup`. It takes `children` and an `onRemove` callback. Internally, it uses `React.useState` to manage the `isSelected` state, controlled by a `ToggleButton` via `ToggleButtonContext`. The `TagGroupContext.Provider` conditionally passes the `onRemove` function only when `isSelected` is true, allowing a parent `ToggleButton` to toggle the removability of tags within the `TagGroup`. Depends on `react` and `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButtonContext, TagGroupContext} from 'react-aria-components';\n\nfunction Removable({children, onRemove}) {\n  let [isSelected, onChange] = React.useState(false);\n  return (\n    <ToggleButtonContext.Provider value={{isSelected, onChange}}>\n      {/*- begin highlight -*/}\n      <TagGroupContext.Provider value={{onRemove: isSelected && onRemove}}>\n      {/*- end highlight -*/}\n        {children}\n      </TagGroupContext.Provider>\n    </ToggleButtonContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to DateRangePicker\nDESCRIPTION: Example showing how to add contextual help to a DateRangePicker using the ContextualHelp component to provide additional information about the component's purpose.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<DateRangePicker\n  label=\"Trip dates\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Date changes</Heading>\n      <Content>Your trip dates cannot be changed once scheduled.</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Using the ContextualHelp Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'ContextualHelp' component. It renders a component that shows extra information or help text about an adjacent UI element, often triggered by an icon. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n<ContextualHelp />\n```\n\n----------------------------------------\n\nTITLE: Implementing Pending State in React Aria Button\nDESCRIPTION: Example of a Button with a pending state that shows a progress indicator while an action is in progress. Uses a timeout to simulate a long-running operation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState} from 'react';\n\nfunction PendingButton(props) {\n  let [isPending, setPending] = useState(false);\n\n  let handlePress = (e) => {\n    setPending(true);\n    setTimeout(() => {\n      setPending(false);\n    }, 5000);\n  };\n\n  return (\n    <Button\n      {...props}\n      isPending={isPending}\n      onPress={handlePress}>\n        {({isPending}) => (\n          <>\n            {!isPending && <span>Save</span>}\n            {isPending && (\n              // See below\n              <MyProgressCircle aria-label=\"Saving...\" isIndeterminate />\n            )}\n          </>\n        )}\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Spectrum ButtonGroup for Multiple Selection (Checkboxes)\nDESCRIPTION: This JSX snippet shows how to set up a React Spectrum `ButtonGroup` to allow multiple selections, similar to a group of checkboxes. The `selectionMode=\"multiple\"` prop enables this behavior. An `aria-label` is provided for the group, and each `Button` has a `value` and `aria-label`. This setup typically implements the WAI-ARIA Toolbar pattern where each button acts as a checkbox (`role=\"checkbox\"`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/ButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup\n  aria-label=\"Text Styling\"\n  selectionMode=\"multiple\">\n  <Button\n    value=\"Italic\"\n    aria-label=\"Italic\"\n    icon={<TextItalic />} />\n  <Button\n    value=\"Underline\"\n    aria-label=\"Underline\"\n    icon={<TextUnderline />} />\n  <Button\n    value=\"Strikethrough\"\n    aria-label=\"Strikethrough\"\n    icon={<TextStrikethrough />} />\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Controlled Expansion of TreeView Items - React Spectrum - TSX\nDESCRIPTION: Provides an example of controlling tree expansion via state using expandedKeys and onExpandedChange. State is managed by React's useState, and keys must correspond to item ids. This enables programmatic expansion and collapse of any tree node, suitable for advanced UI scenarios requiring synchronization or external triggers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ControlledExpansion() {\\n  let [expandedKeys, setExpandedKeys] = React.useState<Set<Key>>(new Set(['projects', 'reports']));\\n\\n  return (\\n    <ExampleTree\\n      aria-label=\\\"Example tree with controlled expanded items\\\"\\n      /*- begin highlight -*/\\n      expandedKeys={expandedKeys}\\n      onExpandedChange={setExpandedKeys}\\n      /*- end highlight -*/\\n    />\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Camera with Media Capture via FileTrigger - React Spectrum (TypeScript)\nDESCRIPTION: This code shows how to trigger a device’s camera (where supported) via the defaultCamera prop set to 'environment'. FileTrigger wraps a Button and will prompt the user to capture an image with the outward-facing camera on mobile devices. Only the defaultCamera prop is set; all other behavior is default. Dependency: react-aria-components. Limited to browsers and devices supporting the capture attribute on file input. Input is a captured media file, output is handled by the parent onSelect as usual.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/FileTrigger.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTrigger defaultCamera=\"environment\">\n  <Button>Open Camera</Button>\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Render Props Based on State in React Aria (JSX)\nDESCRIPTION: This JSX snippet demonstrates using a render prop pattern with the `DropZone` component. A function is passed as a child, receiving the component's state (`isDropTarget`). This function conditionally renders a `DropHighlight` component only when `isDropTarget` is true, allowing dynamic alteration of rendered elements based on state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<DropZone>\n  {({isDropTarget}) => (\n    <>\n      {isDropTarget && <DropHighlight/>}\n      Drop item here\n    </>\n  )}\n</DropZone>\n```\n\n----------------------------------------\n\nTITLE: Styling Toast Region and Components with CSS\nDESCRIPTION: This CSS code provides styling rules for the toast notification system. It positions the `toast-region` container fixed at the bottom-right of the viewport, styles the appearance of individual `toast` elements (layout, background, color, padding, border-radius), and defines styles for the close `button` within each toast, including its base appearance, focus-visible state, and active state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.toast-region {\n  position: fixed;\n  bottom: 16px;\n  right: 16px;\n  display: flex;\n  flex-direction: column-reverse;\n  gap: 8px;\n}\n\n.toast {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  background: slateblue;\n  color: white;\n  padding: 12px 16px;\n  border-radius: 8px;\n}\n\n.toast button {\n  background: none;\n  border: none;\n  appearance: none;\n  border-radius: 50%;\n  height: 32px;\n  width: 32px;\n  font-size: 16px;\n  border: 1px solid white;\n  color: white;\n  padding: 0;\n}\n\n.toast button:focus-visible {\n  outline: none;\n  box-shadow: 0 0 0 2px slateblue, 0 0 0 4px white;\n}\n\n.toast button:active {\n  background: rgba(255, 255, 255, 0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding React Aria Context to Custom Label Component - React TSX\nDESCRIPTION: Shows how to use useContextProps and LabelContext to merge props/ref from context and forward them to a custom label component, allowing it to participate in Select's accessibility and state propagation. Dependencies: react-aria-components, React. Inputs: props and ref to Label. Outputs: a Context-aware label for use within Select.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  ///- end highlight -///\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria ListBox Components with CSS\nDESCRIPTION: Examples of how to style React Aria ListBox components using CSS selectors. This demonstrates targeting the default component classes and using data attributes to style based on component states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_53\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox {\n  /* ... */\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-ListBoxItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Using CalendarValue Component within Calendar\nDESCRIPTION: This snippet shows how to use the custom CalendarValue component as a child within a Calendar component to display the currently selected date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar>\n  {/* ... */}\n  {/*- begin highlight -*/}\n  <CalendarValue />\n  {/*- end highlight -*/}\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Default Value in React\nDESCRIPTION: This example demonstrates how to set a default value for an uncontrolled RadioGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyRadioGroup label=\"Are you a wizard?\" defaultValue=\"yes\">\n  <Radio value=\"yes\">Yes</Radio>\n  <Radio value=\"no\">No</Radio>\n</MyRadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring ButtonGroup with Custom Tab Index Management in React\nDESCRIPTION: Example showing how to configure a ButtonGroup with disabled roving tab index behavior using manageTabIndex prop. Demonstrates setting up a toolbar with multiple buttons containing icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/ButtonGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup\n  aria-label=\"Tools\"\n  selectionMode=\"none\"\n  manageTabIndex={false}>\n  <Button\n    label=\"Brush\"\n    value=\"Brush\"\n    icon={<Brush />} />\n  <Button\n    label=\"Bell\"\n    value=\"Bell\"\n    icon={<Bell />} />\n  <Button\n    label=\"AddCircle\"\n    value=\"Add\"\n    icon={<AddCircle />} />\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Referencing the React Spectrum ToastQueue API\nDESCRIPTION: References the `ToastQueue` API class, which manages the state for a `<ToastRegion>`. This allows triggering toasts programmatically from anywhere in the application, outside of React component lifecycle. API details are likely available via the associated `<ClassAPI>`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nToastQueue\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for React Aria Locale Optimization\nDESCRIPTION: Configures Next.js to exclude all translation strings from the JavaScript bundle at build time using the @react-aria/optimize-locales-plugin.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst localesPlugin = require('@react-aria/optimize-locales-plugin');\n\nmodule.exports = {\n  // ...\n  webpack(config, {isServer}) {\n    if (!isServer) {\n      // Don't include any locale strings in the client JS bundle.\n      config.plugins.push(localesPlugin.webpack({locales: []}));\n    }\n    return config;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Rows in React Aria Table - TypeScript/React\nDESCRIPTION: This TypeScript/React snippet shows how to disable individual rows in a table by passing the isDisabled prop to MyRow. Disabled rows cannot be selected, and their checkboxes become disabled automatically, but further interaction styling is up to the developer. Dependencies include React and the Table suite of components. This approach is suitable for static row disabling; input is the isDisabled prop, and output is a row with its interactions limited.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Table with disabled rows\" selectionMode=\"multiple\">\n  <MyTableHeader>\n    <Column isRowHeader>Name</Column>\n    <Column>Type</Column>\n    <Column>Level</Column>\n  </MyTableHeader>\n  <TableBody>\n    <MyRow>\n      <Cell>Charizard</Cell>\n      <Cell>Fire, Flying</Cell>\n      <Cell>67</Cell>\n    </MyRow>\n    {/*- begin highlight -*/}\n    <MyRow isDisabled>\n    {/*- end highlight -*/}\n      <Cell>Venusaur</Cell>\n      <Cell>Grass, Poison</Cell>\n      <Cell>83</Cell>\n    </MyRow>\n    <MyRow>\n      <Cell>Pikachu</Cell>\n      <Cell>Electric</Cell>\n      <Cell>100</Cell>\n    </MyRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Component for Tag in TSX\nDESCRIPTION: This snippet shows how to create a custom `MyTag` component that wraps the standard React Aria `Tag` component. It allows passing custom props, such as `className`, to the underlying `Tag` by spreading the received props (`{...props}`) and adding specific customizations like `className=\"my-tag\"`. This pattern enables reusing the base component with consistent styling or behavior modifications.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyTag(props) {\n  return <Tag {...props} className=\"my-tag\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Actions in React Spectrum Table\nDESCRIPTION: This example demonstrates how to implement row actions in a React Spectrum table. It shows the usage of the onRowAction prop for both 'toggle' and 'replace' selection behaviors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', flexWrap: 'wrap', gap: '24px'}}>\n  <PokemonTable aria-label=\"Pokemon table with row actions and toggle selection behavior\" selectionMode=\"multiple\" onRowAction={key => alert(`Opening item ${key}...`)} />\n  <PokemonTable aria-label=\"Pokemon table with row actions and replace selection behavior\" selectionMode=\"multiple\" selectionBehavior=\"replace\" onRowAction={key => alert(`Opening item ${key}...`)} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: AlertDialog with Disabled Secondary Action in React Spectrum\nDESCRIPTION: Example showing how to disable the secondary action button in an AlertDialog using the isSecondaryActionDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Upgrade</ActionButton>\n  <AlertDialog\n    isSecondaryActionDisabled\n    variant=\"confirmation\"\n    title=\"Upgrade subscription\"\n    primaryActionLabel=\"Upgrade\"\n    secondaryActionLabel=\"Apply Coupon\"\n    cancelLabel=\"Cancel\">\n    Upgrade subscription for an additional $14.99 a month?\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Calendar Cell Component with TSX\nDESCRIPTION: Simple wrapper component example showing how to customize a CalendarCell with additional className prop\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyCalendarCell(props) {\n  return <CalendarCell {...props} className=\"my-item\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Date Picker Components in React (JSX)\nDESCRIPTION: This snippet shows how to import the DateField, Calendar, and RangeCalendar components from the '@react-spectrum/datepicker' and '@react-spectrum/calendar' packages. It enables usage of these components to build flexible date and range pickers within React applications. The expected input is a React project setup with the required dependencies installed, and the output is the availability of these components for use within JSX code.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/date-and-time-pickers-for-all.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {DateField} from '@react-spectrum/datepicker';\nimport {Calendar, RangeCalendar} from '@react-spectrum/calendar';\n```\n\n----------------------------------------\n\nTITLE: Displaying DateRangePicker with International Calendar via I18nProvider (React Spectrum, TypeScript/JSX)\nDESCRIPTION: This example wraps MyDateRangePicker in an I18nProvider configured for the Hindi language and Indian calendar via the locale prop. Selected ranges are controlled in React state and their Gregorian string representations are rendered. Dependencies: react-aria-components for DateRange, @react-aria/i18n for I18nProvider, and React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DateRange} from 'react-aria-components';\\nimport {I18nProvider} from '@react-aria/i18n';\\n\\nfunction Example() {\\n  let [range, setRange] = React.useState<DateRange | null>(null);\\n  return (\\n    /*- begin highlight -*/\\n    <I18nProvider locale=\\\"hi-IN-u-ca-indian\\\">\\n    {/*- end highlight -*/\\n      <MyDateRangePicker label=\\\"Date range\\\" value={range} onChange={setRange} />\\n      <p>Start date: {range?.start.toString()}</p>\\n      <p>End date: {range?.end.toString()}</p>\\n    </I18nProvider>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Item Data for Droppable List in React Spectrum\nDESCRIPTION: Sets up the initial items for a droppable ListView using useListData. The list includes files and a folder that will act as a drop target for dragged items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useListData({\n  initialItems: [\n    {id: 'f', type: 'file', name: 'Adobe AfterEffects'},\n    {id: 'g', type: 'file', name: 'Adobe Illustrator'},\n    {id: 'h', type: 'file', name: 'Adobe Lightroom'},\n    {id: 'i', type: 'file', name: 'Adobe Premiere Pro'},\n    {id: 'j', type: 'file', name: 'Adobe Fresco'},\n    {id: 'k', type: 'folder', name: 'Apps', childNodes: []}\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Submenu Popovers Based on Placement\nDESCRIPTION: CSS examples showing how to apply different transforms to submenu popovers based on their placement direction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_38\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=SubmenuTrigger][data-placement=\"right\"] {\n  transform: translateX(-5px);\n}\n\n.react-aria-Popover[data-trigger=SubmenuTrigger][data-placement=\"left\"] {\n  transform: translateX(5px);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Styling for Link Tags in React Aria using CSS\nDESCRIPTION: Applies basic CSS styles to React Aria tags that function as links, identified by the `data-href` attribute (`.react-aria-Tag[data-href]`). It removes the default text decoration and sets the cursor to a pointer to visually indicate that the tag is clickable and acts as a link.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n```css hidden\n.react-aria-Tag[data-href] {\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling DateField onChange Event in React (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `onChange` prop of a `DateField` component (represented as `MyDateField`). It updates the component's state with the selected date and displays a formatted version of the date using `useDateFormatter` and `getLocalTimeZone`. The date is converted to a native JavaScript `Date` object for formatting.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <MyDateField label=\"Birth date\" value={date} onChange={setDate} />\n      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ListView with Selection\nDESCRIPTION: Example demonstrating ListView with multiple selection mode and default selected keys\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ListView maxWidth=\"size-6000\" selectionMode=\"multiple\" defaultSelectedKeys={[\"Charizard\", \"Venusaur\"]} aria-label=\"ListView multiple selection example\">\n  <Item key=\"Charizard\">\n    Charizard\n  </Item>\n  <Item key=\"Blastoise\">\n    Blastoise\n  </Item>\n  <Item key=\"Venusaur\">\n    Venusaur\n  </Item>\n  <Item key=\"Pikachu\">\n    Pikachu\n  </Item>\n</ListView>\n```\n\n----------------------------------------\n\nTITLE: AlertDialog with Disabled Primary Action in React Spectrum\nDESCRIPTION: Example showing how to disable the primary action button in an AlertDialog using the isPrimaryActionDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Upgrade</ActionButton>\n  <AlertDialog\n    isPrimaryActionDisabled\n    variant=\"confirmation\"\n    title=\"Upgrade subscription\"\n    primaryActionLabel=\"Upgrade\"\n    cancelLabel=\"Cancel\">\n    Upgrade subscription for an additional $14.99 a month?\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Dialog Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @react-aria/dialog package in a markdown document. It shows the package name as a heading, indicating this file is likely a README or documentation for this specific package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dialog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-aria/dialog\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid States in NumberField - React Spectrum - CSS\nDESCRIPTION: Provides CSS rules to style NumberField component states when invalid, including border color adjustments for input and button components. Also styles the FieldError element for consistent error message appearance, adjusting font size and color. Uses CSS attribute selectors for [data-invalid] and descendant class selectors for targeted styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-NumberField {\n  &[data-invalid] {\n    .react-aria-Input,\n    .react-aria-Button {\n      border-color: var(--invalid-color);\n    }\n\n    &:focus-within {\n      .react-aria-Input,\n      .react-aria-Button {\n        border-color: var(--focus-ring-color);\n      }\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Selection State in React Aria Select Component\nDESCRIPTION: Demonstrates how to implement controlled selection in a Select component using the selectedKey prop and onSelectionChange handler. Shows how to derive ids from item data for selection management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from 'react-aria-components';\n\nfunction Example() {\n  let options = [\n    {name: 'Koala'},\n    {name: 'Kangaroo'},\n    {name: 'Platypus'},\n    {name: 'Bald Eagle'},\n    {name: 'Bison'},\n    {name: 'Skunk'}\n  ];\n  let [animal, setAnimal] = React.useState<Key>(\"Bison\");\n\n  return (\n    <MySelect\n      label=\"Pick an animal (controlled)\"\n      items={options}\n      selectedKey={animal}\n      onSelectionChange={selected => setAnimal(selected)}>\n      {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n    </MySelect>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing React Aria Table Selection\nDESCRIPTION: Demonstrates how to use React Aria test utilities to test table selection functionality in a React Aria Table component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_56\n\nLANGUAGE: ts\nCODE:\n```\n// Table.test.ts\nimport {render, within} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse', advanceTimer: jest.advanceTimersByTime});\n// ...\n\nit('Table can toggle row selection', async function () {\n  // Render your test component/app and initialize the table tester\n  let {getByTestId} = render(\n    <Table data-testid=\"test-table\" selectionMode=\"multiple\">\n     ...\n    </Table>\n  );\n  let tableTester = testUtilUser.createTester('Table', {root: getByTestId('test-table')});\n  expect(tableTester.selectedRows).toHaveLength(0);\n\n  await tableTester.toggleSelectAll();\n  expect(tableTester.selectedRows).toHaveLength(10);\n\n  await tableTester.toggleRowSelection({row: 2});\n  expect(tableTester.selectedRows).toHaveLength(9);\n  let checkbox = within(tableTester.rows[2]).getByRole('checkbox');\n  expect(checkbox).not.toBeChecked();\n\n  await tableTester.toggleSelectAll();\n  expect(tableTester.selectedRows).toHaveLength(10);\n  expect(checkbox).toBeChecked();\n\n  await tableTester.toggleSelectAll();\n  expect(tableTester.selectedRows).toHaveLength(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Handled Link with useLink\nDESCRIPTION: This example shows how to create a client-handled link using the useLink hook with a custom span element. It demonstrates how to use the isPressed state for styling and how to handle press events.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/link/docs/useLink.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Link(props) {\n  let ref = React.useRef(null);\n  let {linkProps, isPressed} = useLink({...props, elementType: 'span'}, ref);\n\n  return (\n    <span\n      {...linkProps}\n      ref={ref}\n      style={{\n        color: isPressed ? 'var(--blue)' : 'var(--spectrum-global-color-blue-700)',\n        textDecoration: 'underline',\n        cursor: 'pointer'\n      }}>\n      {props.children}\n    </span>\n  );\n}\n\n<Link onPress={() => alert('Pressed link')}>Adobe</Link>\n```\n\n----------------------------------------\n\nTITLE: Draggable Component Implementation\nDESCRIPTION: Custom Draggable component implementation using useDrag hook for drag operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dropzone/docs/DropZone.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Draggable() {\n  let {dragProps, isDragging} = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world',\n        'my-app-custom-type': JSON.stringify({message: 'hello world'})\n      }];\n    }\n  });\n\n  return (\n    <div {...dragProps} role=\"button\" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n      Drag me\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring 404 Error Message with React Spectrum Components in JSX\nDESCRIPTION: This JSX snippet defines the visual layout of the 404 error page. It uses a `Flex` container to center content both horizontally and vertically within 50% of the viewport height. Inside, an `IllustratedMessage` component displays the `NotFound` icon, a `Heading` with the error code, and `Content` text providing guidance to the user. Dependencies include the imported React Spectrum components: `Flex`, `IllustratedMessage`, `NotFound`, `Heading`, and `Content`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/error.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex alignItems=\"center\" direction=\"row\" height=\"50vh\" justifyContent=\"center\">\n  <IllustratedMessage>\n    <NotFound />\n    <Heading>Error 404: Page not found</Heading>\n    <Content>This page isn't available. Try checking the URL or visit a different page.</Content>\n  </IllustratedMessage>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Formatting NumberField with Units in React Spectrum (TSX)\nDESCRIPTION: Shows how to format a React Spectrum `NumberField` with units using `formatOptions`. Requires `style: 'unit'`, a `unit` identifier (e.g., 'inch'), and allows display customization via `unitDisplay` ('long', 'short', 'narrow'). Note potential Safari compatibility issues requiring a polyfill for `Intl.NumberFormat`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<NumberField\n  label=\"Package width\"\n  defaultValue={4}\n  formatOptions={{\n    style: 'unit',\n    unit: 'inch',\n    unitDisplay: 'long'\n  }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Nesting Flex Components for Complex Layouts in React Spectrum\nDESCRIPTION: Demonstrates how to nest Flex components to create more complex layouts, with the flex prop used on one child to expand and fill the remaining space.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Flex.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" height=\"size-800\" />\n  <Flex direction=\"row\" height=\"size-3000\" gap=\"size-100\">\n    <View backgroundColor=\"indigo-600\" width=\"size-2000\" />\n    <View backgroundColor=\"seafoam-600\" flex />\n  </Flex>\n  <View backgroundColor=\"magenta-600\" height=\"size-800\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Tags within a React Aria TagList using CSS\nDESCRIPTION: Provides CSS rules to style disabled tags within a `.react-aria-TagList`. It targets tags with the `data-disabled` attribute (`.react-aria-Tag[data-disabled]`), changing their border color and text color using CSS variables (`--border-color-disabled`, `--text-color-disabled`) to visually indicate the disabled state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-TagList {\n  .react-aria-Tag {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: ListBox with Multiple Selection and Replace Behavior\nDESCRIPTION: Implementation of a ListBox with multiple selection mode and replace selection behavior for link items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox aria-label=\"Links\" selectionMode=\"multiple\" selectionBehavior=\"replace\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Using Meter Component with Custom Value Scale\nDESCRIPTION: This example shows how to use the Meter component with a custom value scale by setting minValue and maxValue props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/meter/docs/useMeter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Meter\n  label=\"Widgets Used\"\n  minValue={50}\n  maxValue={150}\n  value={100} />\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom String Dictionary with LocalizedStringProvider in React Spectrum (tsx)\nDESCRIPTION: Shows how to pass a custom `LocalizedStringDictionary` (created using `createLocalizedStringDictionary`) to the `dictionary` prop of the `LocalizedStringProvider`. This ensures that only the strings for the specified components are loaded, further optimizing the application. Requires the `LocalizedStringProvider` component and a pre-generated dictionary.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<LocalizedStringProvider locale={locale} dictionary={dictionary} />\n```\n\n----------------------------------------\n\nTITLE: Initializing TimeField with Zoned DateTime in React Spectrum\nDESCRIPTION: This snippet demonstrates how to use the TimeField component with a parsed ZonedDateTime value. It uses the parseZonedDateTime function to create a time value in the America/Los_Angeles time zone.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Dialog with Hero Image in React Spectrum\nDESCRIPTION: Example showing how to add a hero image to a Dialog using the hero slot. The image is positioned at the top of the dialog for visual emphasis.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Upload</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Image slot=\"hero\" alt=\"\" src=\"https://i.imgur.com/Z7AzH2c.png\" objectFit=\"cover\" />\n      <Heading>Upload file</Heading>\n      <Divider />\n      <Content>Are you sure you want to upload this file?</Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Setting Calendar to Read Only in React Spectrum (TypeScript)\nDESCRIPTION: Uses the isReadOnly prop to prevent changes to the Calendar's value while maintaining keyboard accessibility. today(getLocalTimeZone()) sets the selected date. Input: Static date. Output: Calendar showing fixed date that can still receive focus. Limitation: No user modification allowed, but UI is not visually disabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n<MyCalendar aria-label=\"Event date\" value={today(getLocalTimeZone())} isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Styling the List Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the List component, including hover states, selection indicators, and focus styles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.list {\n  padding: 0;\n  list-style: none;\n  background: var(--page-background);\n  border: 1px solid var(--spectrum-global-color-gray-400);\n  max-width: 400px;\n  min-width: 200px;\n  max-height: 250px;\n  overflow: auto;\n}\n\n.list li {\n  padding: 8px;\n  outline: none;\n  cursor: default;\n}\n\n.list li:nth-child(2n) {\n  background: var(--spectrum-alias-highlight-hover);\n}\n\n.list li.pressed {\n  background: var(--spectrum-global-color-gray-200);\n}\n\n.list li[aria-selected=true] {\n  background: slateblue;\n  color: white;\n}\n\n.list li.focus-visible {\n  outline: 2px solid slateblue;\n  outline-offset: -3px;\n}\n\n.list li.focus-visible[aria-selected=true] {\n  outline-color: white;\n}\n\n.list li[aria-disabled] {\n  opacity: 0.4;\n}\n\n.list [role=gridcell] {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.list li button {\n  margin-left: auto;\n}\n\n/* iOS Safari has a bug that prevents accent-color: white from working. */\n@supports not (-webkit-touch-callout: none) {\n  .list li input[type=checkbox] {\n    accent-color: white;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Labeling Variations in React Spectrum\nDESCRIPTION: Demonstrates different labeling options for ProgressBar including default top position, side position, and hidden value label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <ProgressBar label=\"Loading…\" value={30} />\n  <ProgressBar label=\"Loading…\" labelPosition=\"side\" value={30} />\n  <ProgressBar label=\"Loading…\" showValueLabel={false} value={30} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Single Selection in React Spectrum ComboBox (TSX)\nDESCRIPTION: This snippet shows how to handle controlled single selection in a component like `ComboBox` that only supports selecting one item. It uses the `useState` hook to manage the `selectedKey` state (a single key or null). The `selectedKey` state and `setSelectedKey` updater function are passed to the `ComboBox` via the `selectedKey` and `onSelectionChange` props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/selection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlet [selectedKey, setSelectedKey] = useState(null);\n\n<ComboBox selectedKey={selectedKey} onSelectionChange={setSelectedKey}>\n  <Item key=\"one\">One</Item>\n  <Item key=\"two\">Two</Item>\n  <Item key=\"three\">Three</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous GridList Data Loading with useAsyncList Hook (TypeScript)\nDESCRIPTION: Details client-side asynchronous data loading for GridList using the useAsyncList hook. Loads character data from the Star Wars API, handling a cursor for pagination and proper switching to HTTPS URLs. The AsyncList function defines the complete integration from loading to rendering. Dependencies: '@react-stately/data', a custom MyGridList and MyItem, and fetch API. Outputs a live-updating list. Limitation: requires external data endpoint to be online.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\\nimport {useAsyncList} from '@react-stately/data';\\n\\ninterface Character {\\n  name: string\\n}\\n\\nfunction AsyncList() {\\n  let list = useAsyncList<Character>({\\n    async load({signal, cursor}) {\\n      if (cursor) {\\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\\n      }\\n\\n      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=`, {signal});\\n      let json = await res.json();\\n\\n      return {\\n        items: json.results,\\n        cursor: json.next\\n      };\\n    }\\n  });\\n\\n  return (\\n    <MyGridList\\n      selectionMode=\\\"multiple\\\"\\n      aria-label=\\\"Async loading ListView example\\\"\\n      items={list.items}>\\n      {(item) => (\\n        <MyItem id={item.name}>{item.name}</MyItem>\\n      )}\\n    </MyGridList>\\n  );\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Non-Contiguous Ranges in RangeCalendar (TSX)\nDESCRIPTION: This example shows how to allow non-contiguous date ranges in a RangeCalendar. It uses the allowsNonContiguousRanges prop and prevents selecting weekends while allowing ranges that span multiple weeks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return <RangeCalendar aria-label=\"Time off request\" isDateUnavailable={date => isWeekend(date, locale)} allowsNonContiguousRanges />\n}\n```\n\n----------------------------------------\n\nTITLE: Using the DateRangePicker Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'DateRangePicker' component. It renders a component combining two DateFields for start/end dates and a RangeCalendar popover for selection. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<DateRangePicker />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Simple DateField - React Spectrum - TypeScript/TSX\nDESCRIPTION: This example demonstrates a minimal DateField usage scenario, where only the label prop is provided. This initializes a DateField input with placeholder content, allowing users to input a date. No external dependencies are required beyond what is imported, and no controlled value or event handlers are used, making it a simple uncontrolled component demonstration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling a React Spectrum Checkbox\nDESCRIPTION: Demonstrates the use of the `isDisabled` prop to render the Checkbox in a disabled state, preventing user interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/Checkbox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox isDisabled>Subscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Creating Links in React Spectrum TreeItem (TSX)\nDESCRIPTION: Illustrates how to make `TreeItem` components function as hyperlinks by passing the `href` prop. The `target=\"_blank\"` attribute is used to open the link in a new tab. Link behavior follows the same interaction rules as item actions based on `selectionMode` and `selectionBehavior`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Tree aria-label=\"Tree with onAction applied on the items directly\" style={{height: '200px'}} defaultExpandedKeys={['bulbasaur', 'ivysaur']}>\n  <MyTreeItem\n    /*- begin highlight -*/\n    href=\"https://pokemondb.net/pokedex/bulbasaur\"\n    target=\"_blank\"\n    /*- end highlight -*/\n    id=\"bulbasaur\"\n    title=\"Bulbasaur\">\n    <MyTreeItem\n      id=\"ivysaur\"\n      title=\"Ivysaur\"\n      href=\"https://pokemondb.net/pokedex/ivysaur\"\n      target=\"_blank\">\n      <MyTreeItem\n        id=\"venusaur\"\n        title=\"Venusaur\"\n        href=\"https://pokemondb.net/pokedex/venusaur\"\n        target=\"_blank\" />\n    </MyTreeItem>\n  </MyTreeItem>\n</Tree>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling ToggleButton with Data Attributes (CSS)\nDESCRIPTION: This CSS snippet targets .react-aria-ToggleButton elements that have the data-selected attribute, for customizing the appearance of selected toggle buttons. It can be used standalone or alongside other selector-based CSS, and facilitates visual distinction based on selection state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButton[data-selected] {\\n  /* ... */\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Calendar Focused Date in React Spectrum (TypeScript)\nDESCRIPTION: Shows how to programmatically manage and reset the focused date in a Calendar using state and event handlers. Requires @internationalized/date for CalendarDate and assumes MyCalendar prop support for focusedValue and onFocusChange. Input: user interaction (date focus changes, button click). Output: Calendar with controlled focused date state. Useful for scenarios where the initial focus or focus resets are required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\\n\\nfunction Example() {\\n  let defaultDate = new CalendarDate(2021, 7, 1);\\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\\n\\n  return (\\n    <>\\n      <button style={{marginBottom: 20}} onClick={() => setFocusedDate(defaultDate)}>Reset focused date</button>\\n      <MyCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using Render Props to Show Unavailable Dates in CalendarCell (JavaScript JSX)\nDESCRIPTION: Leverages the render prop pattern to render different content in CalendarCell based on isUnavailable state (e.g., show an icon). Inputs: formattedDate, isUnavailable from CalendarCell's render context. Outputs: A span with the formatted date and an icon if unavailable. Requires a component UnavailableIcon and CalendarCell's support for render children.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n<CalendarCell>\\n  {({formattedDate, isUnavailable}) => (\\n    <>\\n      {isUnavailable && <UnavailableIcon />}\\n      <span>{formattedDate}</span>\\n    </>\\n  )}\\n</CalendarCell>\\n\n```\n\n----------------------------------------\n\nTITLE: Removing All Selected Items from List - useListData Hook - TypeScript\nDESCRIPTION: Demonstrates clearing all currently selected items using removeSelectedItems. This method updates both the list content and the selection state, ensuring all selected items are removed at once. No parameters are required, and the whole selection is cleared from the list upon execution.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove all selected items\nlist.removeSelectedItems();\n\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to a ColorSlider in React (TSX)\nDESCRIPTION: Shows how to add a `ContextualHelp` element to a `ColorSlider`. The `ContextualHelp` component, containing elements like `Heading` and `Content` from `@adobe/react-spectrum`, is passed to the `contextualHelp` prop of the `ColorSlider`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<ColorSlider\n  label=\"Accent Color\"\n  channel=\"hue\"\n  defaultValue=\"hsl(120, 100%, 50%)\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is an accent color?</Heading>\n      <Content>An accent color is the primary foreground color for your theme, used across all components.</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria ComboBox with Tailwind CSS Utilities (TSX)\nDESCRIPTION: This TSX snippet illustrates how to style a React Aria `ComboBox` component using Tailwind CSS utility classes. It shows applying classes directly to component parts like `Group`, `Input`, and `Button`, and utilizing Tailwind's state variants (e.g., `pressed:bg-gray-100`, `focus-visible:outline-blue-600`), potentially enhanced by a dedicated plugin for UI states. The `format=false` attribute suggests preserved formatting, and the surrounding `hidden` div indicates it might be part of an interactive example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox className=\"group flex ...\">\n  <Label>Assignee</Label>\n  {/* Tailwind plugin for all UI states. */}\n  <Group className=\"... focus-visible:outline-blue-600\">\n    <Input className=\"flex-1 ...\" />\n    <Button className=\"... pressed:bg-gray-100\">\n      <ChevronsUpDownIcon />\n    </Button>\n  </Group>\n  {/* Built-in entry and exit animation states. */}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in ToggleButton Using Render Props (JSX)\nDESCRIPTION: Utilizes the render props pattern to switch icons within a ToggleButton based on the isSelected state. Renders <PinnedIcon /> when selected or <UnpinnedIcon /> otherwise. Requires PinnedIcon, UnpinnedIcon, and the overall React setup; demonstrate flexibility in dynamic child content for ToggleButton.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButton>\n  {({isSelected}) => (\n    <>\n      {isSelected ? <PinnedIcon /> : <UnpinnedIcon />}\n      Pin\n    </>\n  )}\n</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with Select Component\nDESCRIPTION: Shows how to integrate Select components with HTML forms using the name prop. The id of the selected item will be submitted to the server when the form is submitted.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MySelect\n  label=\"Favorite Animal\"\n  ///- begin highlight -///\n  name=\"favoriteAnimalId\"\n  ///- end highlight -///\n>\n  <ListBoxItem id=\"panda\">Panda</ListBoxItem>\n  <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n  <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Styling Link Menu Items\nDESCRIPTION: CSS styles for making link menu items appear like regular menu items by removing the default link styling and applying the appropriate cursor. This ensures links in menus maintain a consistent visual appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n[role=menuitem][href] {\n  cursor: pointer;\n  text-decoration: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Button Component Using useButton Hook (TypeScript)\nDESCRIPTION: Shows how to create a Button component using the 'useButton' hook from '@react-aria/button' for accessible event handling and keyboard interactions. Requires React and @react-aria/button. Accepts props containing a ref, style, and children. Renders a native <button> with computed buttonProps and forwards style and ref from props. This wrapper ensures accessible and consistent button behavior throughout the UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\\n\\nfunction Button(props) {\\n  let ref = props.buttonRef;\\n  let {buttonProps} = useButton(props, ref);\\n  return <button {...buttonProps} ref={ref} style={props.style}>{props.children}</button>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Using routerOptions with React Spectrum Item Component\nDESCRIPTION: This example shows how to pass router-specific options to a React Spectrum Item component using the routerOptions prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Item href=\"/login\" routerOptions={{replace: true}}>{/* ...*/}</Item>\n```\n\n----------------------------------------\n\nTITLE: Form Component Anatomy in React Aria\nDESCRIPTION: Shows the basic structure of a Form component including submit and reset buttons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, Button} from 'react-aria-components';\n\n<Form>\n  {/* ... */}\n  <Button type=\"submit\" />\n  <Button type=\"reset\" />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Picker with Custom Widths (React/TypeScript)\nDESCRIPTION: This example shows how to customize the width of the Picker component and its menu.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" rowGap=\"size-150\">\n  <Picker label=\"Choose frequency\" width=\"size-3600\" maxWidth=\"100%\">\n    <Item key=\"rarely\">Rarely</Item>\n    <Item key=\"sometimes\">Sometimes</Item>\n    <Item key=\"always\">Always</Item>\n  </Picker>\n\n  <Picker label=\"Choose animal\" menuWidth=\"size-6000\">\n    <Item key=\"Emu\">Emu</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Platypus\">Platypus</Item>\n  </Picker>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Controlling CheckboxGroup Value with State in React Spectrum (TypeScript)\nDESCRIPTION: This example illustrates the use of controlled and uncontrolled CheckboxGroup components using React state hooks and defaultValue/value props. It leverages the Flex layout for side-by-side display, showcasing how to pre-select checkboxes with defaultValue or dynamically update selected items by modifying state via the onChange handler. Prerequisites include importing Checkbox, CheckboxGroup, Flex, and React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [selected, setSelected] = React.useState(['soccer', 'baseball']);\\n\\n  return (\\n    <Flex gap=\\\"size-300\\\">\\n      <CheckboxGroup label=\\\"Favorite sports (uncontrolled)\\\" defaultValue={['soccer', 'baseball']}>\\n        <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n        <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n        <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n      </CheckboxGroup>\\n\\n      <CheckboxGroup label=\\\"Favorite sports (controlled)\\\" value={selected} onChange={setSelected}>\\n        <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n        <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n        <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n      </CheckboxGroup>\\n    </Flex>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated, Hook-Based Button with Framer Motion and React Aria (TypeScript)\nDESCRIPTION: This TypeScript code defines an AnimatedButton component that integrates with React Aria's context and hook APIs, leveraging Framer Motion for animated visual feedback based on the isPressed state. It merges context props using useContextProps, applies useButton for ARIA-compliant event/state management, and animates scale using motion.button. Required dependencies are react-aria-components, react-aria, Framer Motion, and React. Inputs: props, ref. Output: animated button element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {ButtonProps} from 'react-aria-components';\nimport {ButtonContext, useContextProps} from 'react-aria-components';\nimport {useButton} from 'react-aria';\nimport {motion} from 'framer-motion';\n\nconst AnimatedButton = React.forwardRef((props: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, ButtonContext);\n  ///- end highlight -///\n\n  let {buttonProps, isPressed} = useButton(props, ref);\n  return (\n    <motion.button\n      {...buttonProps}\n      ref={ref}\n      animate={{\n        scale: isPressed ? 0.9 : 1\n      }}>\n      {props.children}\n    </motion.button>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled SearchAutocomplete in React Spectrum\nDESCRIPTION: This example shows how to create a disabled SearchAutocomplete component, which prevents user interaction and displays with a visual indication of the disabled state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Favorite Animal\" isDisabled>\n  <Item>Red Panda</Item>\n  <Item>Cat</Item>\n  <Item>Dog</Item>\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Disabling a TextField Component (TypeScript/React)\nDESCRIPTION: Shows how to render a read-only input by passing isDisabled to TextField, preventing user edits and interaction. Requires the imported TextField component, React, and TypeScript. Key prop is isDisabled; output is an input that cannot be interacted with. Used for non-editable presentations or blocked UI states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n<TextField label=\"Email\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Adding useHref for Next.js basePath Support\nDESCRIPTION: This code demonstrates how to add a custom useHref function to the Provider component to support Next.js basePath configuration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport function ClientProviders({children}) {\n  let router = useRouter();\n  let useHref = (href: string) => process.env.BASE_PATH + href;\n\n  return (\n    <Provider theme={defaultTheme} router={{navigate: router.push, useHref}}>\n      {children}\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Toolbar, Button, and Group Components in React Aria (TypeScript/TSX)\nDESCRIPTION: This code demonstrates how to compose a Toolbar with grouped toggle buttons, separators, buttons, and a custom-styled Checkbox using the react-aria-components library. The Toolbar is given an aria-label for accessibility, and elements are grouped for logical separation and navigation. Dependencies include the react-aria-components library and React. Inputs include aria labels and component children; outputs are rendered UI elements with accessible navigation and groupings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toolbar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Toolbar, Button, ToggleButton, Separator, Checkbox, Group} from 'react-aria-components';\\n\\n<Toolbar aria-label=\\\"Text formatting\\\">\\n  <Group aria-label=\\\"Style\\\">\\n    <ToggleButton aria-label=\\\"Bold\\\"><b>B</b></ToggleButton>\\n    <ToggleButton aria-label=\\\"Italic\\\"><i>I</i></ToggleButton>\\n    <ToggleButton aria-label=\\\"Underline\\\"><u>U</u></ToggleButton>\\n  </Group>\\n  <Separator orientation=\\\"vertical\\\" />\\n  <Group aria-label=\\\"Clipboard\\\">\\n    <Button>Copy</Button>\\n    <Button>Paste</Button>\\n    <Button>Cut</Button>\\n  </Group>\\n  <Separator orientation=\\\"vertical\\\" />\\n  <Checkbox>\\n    <div className=\\\"checkbox\\\">\\n      <svg viewBox=\\\"0 0 18 18\\\" aria-hidden=\\\"true\\\">\\n        <polyline points=\\\"1 9 7 14 15 4\\\" />\\n      </svg>\\n    </div>\\n    Night Mode\\n  </Checkbox>\\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Cycling Hours with HourCycle Option - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates cycling the hour field of a ZonedDateTime with the default 24-hour cycle and an optional 12-hour (AM/PM) cycle via the hourCycle option. Shows the difference in results when toggling hourCycle between 24 and 12. Requires @internationalized/date and parseZonedDateTime.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = parseZonedDateTime('2022-02-03T11:00[America/Los_Angeles]');\ndate.cycle('hour', 1); // 2022-02-03T12:00[America/Los_Angeles]\ndate.cycle('hour', 1, {hourCycle: 12}); // 2022-02-03T00:00[America/Los_Angeles]\n\nlet date = parseZonedDateTime('2022-02-03T23:00[America/Los_Angeles]');\ndate.cycle('hour', 1); // 2022-02-03T00:00[America/Los_Angeles]\ndate.cycle('hour', 1, {hourCycle: 12}); // 2022-02-03T12:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Styling for React Aria Select, ListBox, and Popover Components in CSS\nDESCRIPTION: This detailed CSS snippet provides styles for multiple React Aria components, including .react-aria-Select, .react-aria-Button, .react-aria-SelectValue, .react-aria-ListBox and related items. It covers custom properties, visual state styling (focus, pressed, selected), and includes a keyframes animation for popover transitions. Assumes @react-aria/example-theme is available and that the HTML structure matches the documented React Aria component usage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import \\\"@react-aria/example-theme\\\";\\n\\n.react-aria-Select {\\n  .react-aria-Button {\\n    color: var(--text-color);\\n    background: var(--button-background);\\n    border: 1px solid var(--border-color);\\n    box-shadow: 0 1px 2px rgba(0 0 0 / 0.1);\\n    forced-color-adjust: none;\\n    border-radius: 6px;\\n    appearance: none;\\n    vertical-align: middle;\\n    font-size: 1.072rem;\\n    padding: 0.286rem 0.286rem 0.286rem 0.571rem;\\n    margin: 0;\\n    outline: none;\\n    display: flex;\\n    align-items: center;\\n    max-width: 250px;\\n\\n    &[data-focus-visible] {\\n      outline: 2px solid var(--focus-ring-color);\\n      outline-offset: -1px;\\n    }\\n\\n    &[data-pressed] {\\n      background: var(--button-background-pressed);\\n    }\\n  }\\n\\n  .react-aria-SelectValue {\\n    &[data-placeholder] {\\n      font-style: italic;\\n      color: var(--text-color-placeholder);\\n    }\\n  }\\n\\n  span[aria-hidden] {\\n    width: 1.5rem;\\n    line-height: 1.375rem;\\n    margin-left: 1rem;\\n    padding: 1px;\\n    background: var(--highlight-background);\\n    color: var(--highlight-foreground);\\n    border-radius: 4px;\\n    font-size: 0.857rem;\\n  }\\n}\\n\\n.react-aria-ListBox {\\n  max-height: inherit;\\n  box-sizing: border-box;\\n  overflow: auto;\\n  padding: 2px;\\n  outline: none;\\n\\n  .react-aria-ListBoxItem {\\n    margin: 2px;\\n    padding: 0.286rem 0.571rem 0.286rem 1.571rem;\\n    border-radius: 6px;\\n    outline: none;\\n    cursor: default;\\n    color: var(--text-color);\\n    font-size: 1.072rem;\\n    position: relative;\\n    display: flex;\\n    flex-direction: column;\\n    forced-color-adjust: none;\\n\\n    &[data-selected] {\\n      font-weight: 600;\\n\\n      &::before {\\n        content: '✓';\\n        content: '✓' / '';\\n        alt: ' ';\\n        position: absolute;\\n        top: 4px;\\n        left: 4px;\\n      }\\n    }\\n\\n    &[data-focused],\\n    &[data-pressed] {\\n      background: var(--highlight-background);\\n      color: var(--highlight-foreground);\\n    }\\n  }\\n}\\n\\n.react-aria-Popover {\\n  border: 1px solid var(--gray-200);\\n  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);\\n  border-radius: 6px;\\n  background: var(--overlay-background);\\n  outline: none;\\n  min-width: var(--trigger-width);\\n  max-width: 250px;\\n  box-sizing: border-box;\\n\\n  &[data-placement=top] {\\n    --origin: translateY(8px);\\n  }\\n\\n  &[data-placement=bottom] {\\n    --origin: translateY(-8px);\\n  }\\n\\n  &[data-entering] {\\n    animation: slide 200ms;\\n  }\\n\\n  &[data-exiting] {\\n    animation: slide 200ms reverse ease-in;\\n  }\\n}\\n\\n@keyframes slide {\\n  from {\\n    transform: var(--origin);\\n    opacity: 0;\\n  }\\n\\n  to {\\n    transform: translateY(0);\\n    opacity: 1;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling specific options with disabledKeys - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates disabling individual list items in a Select using the disabledKeys prop, which takes a list of key values (matching ListBoxItem id props). Requires Select/ListBoxItem components and useOption for state. Inputs: items and a disabledKeys array. Outputs: A Select with some items disabled, non-interactive via keyboard/mouse.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<MySelect label=\\\"Favorite Animal\\\" disabledKeys={['cat', 'kangaroo']}>\\n  <ListBoxItem id=\\\"red panda\\\">Red Panda</ListBoxItem>\\n  <ListBoxItem id=\\\"cat\\\">Cat</ListBoxItem>\\n  <ListBoxItem id=\\\"dog\\\">Dog</ListBoxItem>\\n  <ListBoxItem id=\\\"aardvark\\\">Aardvark</ListBoxItem>\\n  <ListBoxItem id=\\\"kangaroo\\\">Kangaroo</ListBoxItem>\\n  <ListBoxItem id=\\\"snake\\\">Snake</ListBoxItem>\\n</MySelect>\\n\n```\n\n----------------------------------------\n\nTITLE: Directory Drop Handler Implementation in React Spectrum\nDESCRIPTION: Demonstrates how to handle directory drops in a React component using react-aria-components. Includes file listing and rendering logic for dropped directories.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nimport File from '@spectrum-icons/workflow/FileTxt';\nimport Folder from '@spectrum-icons/workflow/Folder';\nimport {DIRECTORY_DRAG_TYPE, isDirectoryDropItem} from 'react-aria-components';\n\ninterface DirItem {\n  name: string,\n  kind: string\n}\n\nfunction Example() {\n  let [files, setFiles] = React.useState<DirItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: [DIRECTORY_DRAG_TYPE],\n    async onRootDrop(e) {\n      let dir = e.items.find(isDirectoryDropItem)!;\n      let files = [];\n      for await (let entry of dir.getEntries()) {\n        files.push({\n          name: entry.name,\n          kind: entry.kind\n        });\n      }\n      setFiles(files);\n    }\n  });\n\n  return (\n    <MyGridList aria-label=\"Droppable list\" items={files} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop directory here\"}>\n      {item => (\n        <MyItem id={item.name} textValue={item.name}>\n          <div className=\"dir-item\">\n            {item.kind === 'directory' ? <Folder /> : <File />}\n            <span>{item.name}</span>\n          </div>\n        </MyItem>\n      )}\n    </MyGridList>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label Component within DateField in TSX\nDESCRIPTION: This snippet shows how to use the previously defined `MyCustomLabel` component within a React Aria `DateField`. By replacing the standard `Label` component with `MyCustomLabel`, it leverages the custom label implementation while still benefiting from the context provided by `DateField` thanks to the integration shown in the previous snippet.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<DateField>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/*- end highlight -*/}\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n</DateField>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Select All Checkbox in Table Header with React Aria\nDESCRIPTION: This snippet shows how to implement a select all checkbox in a table header using useTableSelectAllCheckbox hook. It handles selecting all rows and showing appropriate selected states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTableSelectAllCheckbox} from '@react-aria/table';\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\n\nfunction TableSelectAllCell({column, state}) {\n  let ref = useRef<HTMLTableCellElement | null>(null);\n  let {columnHeaderProps} = useTableColumnHeader({node: column}, state, ref);\n  let {checkboxProps} = useTableSelectAllCheckbox(state);\n\n  return (\n    <th\n      {...columnHeaderProps}\n      ref={ref}>\n      {state.selectionManager.selectionMode === 'single'\n        ? <VisuallyHidden>{checkboxProps['aria-label']}</VisuallyHidden>\n        : <Checkbox {...checkboxProps} />\n      }\n    </th>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled TextField in React\nDESCRIPTION: Example showing how to create a disabled TextField component using the isDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<MyTextField label=\"Email\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Tag Selection in React Spectrum TagGroup using TSX\nDESCRIPTION: Shows how to enable multiple selection in `MyTagGroup` using the `selectionMode=\"multiple\"` prop. It demonstrates controlled selection by managing the `selectedKeys` state (initialized with a default selection) using `React.useState` and updating it via the `onSelectionChange` callback. The `Selection` type is imported from `react-aria-components`. The current selection is displayed below the tag group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n import type {Selection} from 'react-aria-components';\n\n function Example() {\n   let [selected, setSelected] = React.useState<Selection>(new Set(['parking']));\n\n   return (\n     <>\n       <MyTagGroup\n         label=\"Amenities\"\n         ///- begin highlight -///\n         selectionMode=\"multiple\"\n         selectedKeys={selected}\n         onSelectionChange={setSelected}\n         ///- end highlight -///\n       >\n         <MyTag id=\"laundry\">Laundry</MyTag>\n         <MyTag id=\"fitness\">Fitness center</MyTag>\n         <MyTag id=\"parking\">Parking</MyTag>\n         <MyTag id=\"pool\">Swimming pool</MyTag>\n         <MyTag id=\"breakfast\">Breakfast</MyTag>\n       </MyTagGroup>\n       <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>\n     </>\n   );\n }\n ```\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-only SearchField\nDESCRIPTION: Example showing how to create a read-only SearchField that remains focusable but with immutable content using the isReadOnly prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<MySearchField label=\"Email\" defaultValue=\"abc@adobe.com\" isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Placement in Multiple Directions in React (TypeScript/TSX)\nDESCRIPTION: Lays out four TooltipTrigger/Button/MyTooltip instances in a flex container to demonstrate the 'placement' prop for positioning tooltips on different sides of the trigger. Supported values include 'start', 'top', 'bottom', and 'end', providing flexibility for LTR/RTL and accessibility requirements. Useful for visual testing and demonstration. Assumes the MyTooltip component is present in the codebase.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{display: 'flex', gap: 8}}>\n  <TooltipTrigger>\n    <Button>\\u2B05\\uFE0F</Button>\n    <MyTooltip placement=\\\"start\\\">In left-to-right, this is on the left. In right-to-left, this is on the right.</MyTooltip>\n  </TooltipTrigger>\n  <TooltipTrigger>\n    <Button>\\u2B06\\uFE0F</Button>\n    <MyTooltip placement=\\\"top\\\">This tooltip is above the button.</MyTooltip>\n  </TooltipTrigger>\n  <TooltipTrigger>\n    <Button>\\u2B07\\uFE0F</Button>\n    <MyTooltip placement=\\\"bottom\\\">This tooltip is below the button.</MyTooltip>\n  </TooltipTrigger>\n  <TooltipTrigger>\n    <Button>\\u27A1\\uFE0F</Button>\n    <MyTooltip placement=\\\"end\\\">In left-to-right, this is on the right. In right-to-left, this is on the left.</MyTooltip>\n  </TooltipTrigger>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Using the ColorSlider Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'ColorSlider' component. It renders a slider control allowing users to adjust an individual channel of a color value (e.g., hue, saturation, lightness, alpha). Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorSlider />\n```\n\n----------------------------------------\n\nTITLE: Label Position and Alignment in ColorField React Spectrum TypeScript\nDESCRIPTION: ColorField is rendered with labelPosition='side' and labelAlign='end', positioning the label to the right and aligning at the end of the field. Useful for customizing layout in accordance with UI design requirements. Applies to both left-to-right and right-to-left locales, flipping as needed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorField label=\\\"Primary Color\\\" labelPosition=\\\"side\\\" labelAlign=\\\"end\\\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Classes to React Spectrum Tag based on State using JSX\nDESCRIPTION: Shows how to dynamically apply CSS classes to a `Tag` component based on its internal state, such as whether it is selected (`isSelected`). It uses a function passed to the `className` prop. This function receives state properties as an argument and returns the appropriate class string(s), which is particularly useful when integrating with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<Tag className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</Tag>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Link Menu Items with CSS\nDESCRIPTION: CSS code for styling menu items that act as links. It removes text decoration and sets the cursor to pointer.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem[href] {\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Data in JavaScript\nDESCRIPTION: This code imports various documentation-related components and data, including the useRangeCalendarState documentation and package information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useRangeCalendarState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-stately/calendar';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/calendar/package.json';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic ListBox Collection from State in React Aria (TSX)\nDESCRIPTION: Illustrates how to render a dynamic collection in a `ListBox` component based on data stored in React state using `useState`. It uses the `items` prop and a function as children to map data items to `ListBoxItem` components. React Aria uses the default `id` property on each data item for identification.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet [animals, setAnimals] = useState([\n  {id: 1, name: 'Aardvark'},\n  {id: 2, name: 'Kangaroo'},\n  {id: 3, name: 'Snake'}\n]);\n\n<ListBox items={animals}>\n  {item => <ListBoxItem>{item.name}</ListBoxItem>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Rendering Highlights Component for Library Overview (JSX)\nDESCRIPTION: Renders the `Highlights` component from `@react-spectrum/docs`, passing an array of configuration objects via the `items` prop. Each object defines a highlight card with a title, description, target URL, and link text for one of the core React Spectrum libraries (React Spectrum, React Aria, React Stately, Internationalized). The `VisuallyHidden` component is used within the link text for improved accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Highlights items={[\n  {\n    title: 'React Spectrum',\n    description: 'A React implementation of Spectrum, Adobe’s design system. Spectrum provides adaptive, accessible, and cohesive experiences for all Adobe applications.',\n    url: './react-spectrum/index.html',\n    urlText: <>Explore<VisuallyHidden elementType=\"span\"> React Spectrum</VisuallyHidden></>\n  },\n  {\n    title: 'React Aria',\n    description: 'A library of unstyled React components and hooks that helps you build accessible, high quality UI components for your application or design system.',\n    url: './react-aria/index.html',\n    urlText: <>Learn more<VisuallyHidden elementType=\"span\"> about React Aria</VisuallyHidden></>\n  },\n  {\n    title: 'React Stately',\n    description: 'A library of React Hooks that provides cross-platform state management for your design system.',\n    url: './react-stately/index.html',\n    urlText: <>Get Started<VisuallyHidden elementType=\"span\"> with React Stately</VisuallyHidden></>\n  },\n  {\n    title: 'Internationalized',\n    description: 'A collection of framework-agnostic internationalization libraries for the web.',\n    url: './internationalized/index.html',\n    urlText: <>Show <VisuallyHidden elementType=\"span\">Internationalized</VisuallyHidden> Packages</>\n  }\n]} />\n```\n\n----------------------------------------\n\nTITLE: Inserting Items Before Specific Item - useListData Hook - TypeScript\nDESCRIPTION: Illustrates inserting single or multiple items before a specified item key in the list using insertBefore. This method updates the indices of subsequent items, preserving immutable state updates. Key parameters are the reference key and the items to insert; outputs an updated list with new items at the specified location.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Insert an item before another item\nlist.insertBefore('Kangaroo', {name: 'Horse'});\n\n// Insert multiple items before another item\nlist.insertBefore('Kangaroo', {name: 'Horse'}, {name: 'Giraffe'});\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Slider Values as Currency in React Spectrum with TypeScript\nDESCRIPTION: This example demonstrates how to format displayed slider values as currency by specifying the \\\"formatOptions\\\" prop with Intl.NumberFormat options. Here, the slider label is 'Currency', and values are formatted as Japanese Yen. \\\"defaultValue\\\" initializes the slider position. Requires the React Spectrum Slider component and proper locale configuration for full effect.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<Slider\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  defaultValue={60} />\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Quiet Accordion Variant - React Spectrum - TSX\nDESCRIPTION: This snippet displays the Accordion component with the isQuiet prop, enabling a quieter UI style for less visual prominence. Useful in visually dense interfaces. Inputs: isQuiet boolean and Disclosure children. Outputs a muted style Accordion with the same functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Accordion.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n<Accordion isQuiet>\n  <Disclosure id=\"personal\">\n    <DisclosureTitle>Personal Information</DisclosureTitle>\n    <DisclosurePanel>\n      Personal information form here.\n    </DisclosurePanel>\n  </Disclosure>\n  <Disclosure id=\"billing\">\n    <DisclosureTitle>Billing Address</DisclosureTitle>\n    <DisclosurePanel>\n      Billing address form here.\n    </DisclosurePanel>\n  </Disclosure>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Radio Buttons (CSS)\nDESCRIPTION: Provides CSS rules to style individual Radio components when they are disabled. It uses the `[data-disabled]` data attribute selector and CSS variables to adjust text color and border color.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Radio {\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n\n    &:before {\n      border-color: var(--border-color-disabled);\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Labeling Options for DatePicker\nDESCRIPTION: This example demonstrates various labeling options for the DatePicker component, including regular labels, required fields with different necessity indicators, and optional fields.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-150\" wrap>\n  <DatePicker label=\"Birth date\" />\n  <DatePicker label=\"Birth date\" isRequired necessityIndicator=\"icon\" />\n  <DatePicker label=\"Birth date\" isRequired necessityIndicator=\"label\" />\n  <DatePicker label=\"Birth date\" necessityIndicator=\"label\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Aligning Items in a Flex Layout with React Spectrum\nDESCRIPTION: Demonstrates how to use the alignItems prop to center items along the cross axis in a vertical flex container, which affects the horizontal alignment in this case.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Flex.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-100\" alignItems=\"center\">\n  <View backgroundColor=\"celery-600\" width=\"size-800\" height=\"size-800\" />\n  <View backgroundColor=\"blue-600\" width=\"size-2000\" height=\"size-800\" />\n  <View backgroundColor=\"magenta-600\" width=\"size-800\" height=\"size-800\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Keyboard Component for Menu Items\nDESCRIPTION: Example showing how to integrate an existing styled keyboard shortcut component with React Aria Components by using context and the useContextProps hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nimport {KeyboardContext, useContextProps} from 'react-aria-components';\n\nconst MyKeyboard = React.forwardRef((props: React.HTMLAttributes<HTMLElement>, ref: React.ForwardedRef<HTMLElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, KeyboardContext);\n\n  // ... your existing Keyboard component\n  return <kbd {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Labeling a Required ComboBox with Icon Indicator in TSX\nDESCRIPTION: Demonstrates how to label a ComboBox and indicate that it is a required field using the `isRequired` prop along with `necessityIndicator=\"icon\"`, which displays a standard required icon.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ntsx example\n<ComboBox label=\"Favorite Animal\" isRequired necessityIndicator=\"icon\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Basic TextArea Usage in React Spectrum\nDESCRIPTION: Shows a simple example of using the TextArea component with a label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TextArea label=\"Description\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Date Value for DatePicker Validation\nDESCRIPTION: This example shows how to use the minValue prop with DatePicker to restrict date selection to only dates after today, implementing date range validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DatePicker\n    label=\"Appointment date\"\n    /*- begin highlight -*/\n    minValue={today(getLocalTimeZone())}\n    /*- end highlight -*/\n    defaultValue={parseDate('2022-02-03')} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Rendering DateField with Indian Calendar in Hindi\nDESCRIPTION: This example demonstrates how to use the DateField component with the Indian calendar system in the Hindi language. It shows how to set up the Provider component with the appropriate locale and handle date changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <Provider locale=\"hi-IN-u-ca-indian\">\n      <DateField label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling All Row Interactions with disabledBehavior - TypeScript/React\nDESCRIPTION: This TypeScript/React snippet expands on row disabling by setting the disabledBehavior prop to 'all' on the Table, which disables not only selection but also focus, dragging, and other interactions for specified rows. Rows can still be individually disabled via the isDisabled prop. Required dependencies are React and the appropriate Table components. Use this configuration for stricter accessibility requirements or to prevent all possible user interactions on disabled rows.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<Table\n  aria-label=\"Table with disabled rows\"\n  selectionMode=\"multiple\"\n  /*- begin highlight -*/\n  disabledBehavior=\"all\"\n  /*- end highlight -*/\n>\n  <MyTableHeader>\n    <Column isRowHeader>Name</Column>\n    <Column>Type</Column>\n    <Column>Level</Column>\n  </MyTableHeader>\n  <TableBody>\n    <MyRow>\n      <Cell>Charizard</Cell>\n      <Cell>Fire, Flying</Cell>\n      <Cell>67</Cell>\n    </MyRow>\n    <MyRow isDisabled>\n      <Cell>Venusaur</Cell>\n      <Cell>Grass, Poison</Cell>\n      <Cell>83</Cell>\n    </MyRow>\n    <MyRow>\n      <Cell>Pikachu</Cell>\n      <Cell>Electric</Cell>\n      <Cell>100</Cell>\n    </MyRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Actions in React Spectrum Tree (TSX)\nDESCRIPTION: Demonstrates how to use the `onAction` prop on the `Tree` component to handle item clicks or Enter key presses. It shows examples for both default (`\"toggle\"`) and `\"replace\"` selection behaviors, triggering an alert with the item's key.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<div style={{display: 'flex', flexWrap: 'wrap', gap: '24px'}}>\n  <PokemonEvolutionTree\n    aria-label=\"Pokemon tree with item actions and toggle selection behavior\"\n    ///- begin highlight -///\n    onAction={key => alert(`Opening item ${key}...`)}\n    ///- end highlight -///\n    selectionMode=\"multiple\" />\n  <PokemonEvolutionTree\n    aria-label=\"Pokemon tree with item actions and replace selection behavior\"\n    ///- begin highlight -///\n    onAction={key => alert(`Opening item ${key}...`)}\n    selectionBehavior=\"replace\"\n    ///- end highlight -///\n    selectionMode=\"multiple\" />\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering the Reorderable TableView Example (TSX)\nDESCRIPTION: Renders the `ReorderableTable` component, which displays a TableView where users can drag and drop rows to change their order within the table.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<ReorderableTable />\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Selection in a Table\nDESCRIPTION: Demonstrates how to enforce at least one selected row at all times using the disallowEmptySelection prop, preventing users from deselecting all rows.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the example above\n<FileTable selectionMode=\"single\" defaultSelectedKeys={[2]} disallowEmptySelection />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Button Component with React Aria\nDESCRIPTION: This snippet shows the implementation of a reusable Button component using the useButton hook from React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/searchfield/docs/useSearchField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Handled Link Component\nDESCRIPTION: Example of a Link component without an href property, handling interactions through the onPress event instead of native navigation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Link onPress={() => alert('Pressed link')}>Adobe</Link>\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorSlider with HTML Forms in React Spectrum (TypeScript)\nDESCRIPTION: This code integrates ColorSlider with an HTML form by specifying the name prop, allowing the slider value to be submitted as a number within the channel range. The example uses the red channel by default and provides a hex string as the default value. Dependencies include ColorSlider and assumes form infrastructure surrounding the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSlider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\n<ColorSlider\\n  defaultValue=\"#7f0000\"\\n  channel=\"red\"\\n  name=\"red\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeField Granularity in React Spectrum\nDESCRIPTION: This example shows how to set the granularity of a TimeField component to seconds. By default, times are displayed with minute granularity, but this can be changed to show more precise time values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField\n  label=\"Event time\"\n  granularity=\"second\"\n  defaultValue={parseAbsoluteToLocal('2021-04-07T18:45:22Z')} />\n```\n\n----------------------------------------\n\nTITLE: Creating Linked GridList Items in React Spectrum (TypeScript)\nDESCRIPTION: Demonstrates how to make each GridList item function as a link by using the href and target props on custom MyItem components, supporting multiple selection modes. No external dependencies other than the MyGridList and MyItem (assumed wrappers from earlier documentation). The GridList renders items as links to external resources; accessibility is boosted by aria-label usage. Output is a clickable, accessible list. Limitation: Actual MyGridList and MyItem implementations are required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\\n<MyGridList aria-label=\\\"Links\\\" selectionMode=\\\"multiple\\\">\\n  <MyItem href=\\\"https://adobe.com/\\\" target=\\\"_blank\\\">Adobe</MyItem>\\n  <MyItem href=\\\"https://apple.com/\\\" target=\\\"_blank\\\">Apple</MyItem>\\n  <MyItem href=\\\"https://google.com/\\\" target=\\\"_blank\\\">Google</MyItem>\\n  <MyItem href=\\\"https://microsoft.com/\\\" target=\\\"_blank\\\">Microsoft</MyItem>\\n</MyGridList>\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchAutocomplete with Complex Items in React Spectrum\nDESCRIPTION: This example shows how to create a SearchAutocomplete component with sections, icons, and descriptions. Items are organized into sections (Productivity and Internet) with appropriate icons and descriptive text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Search apps\">\n  <Section title=\"Productivity\">\n    <Item textValue=\"Mail\">\n      <Email size=\"S\" />\n      <Text>Mail</Text>\n      <Text slot=\"description\">Send and recieve emails</Text>\n    </Item>\n    <Item textValue=\"File Explorer\">\n      <Folder size=\"S\" />\n      <Text>File Explorer</Text>\n      <Text slot=\"description\">Navigate directories and open files</Text>\n    </Item>\n    <Item textValue=\"Document Editor\">\n      <Document size=\"S\" />\n      <Text>Document Editor</Text>\n      <Text slot=\"description\">Edit documents</Text>\n    </Item>\n  </Section>\n  <Section title=\"Internet\">\n    <Item textValue=\"Web Browser\">\n      <WebPages size=\"S\" />\n      <Text>Web Browser</Text>\n      <Text slot=\"description\">Browse the internet</Text>\n    </Item>\n    <Item textValue=\"Social Media\">\n      <SocialNetwork size=\"S\" />\n      <Text>Social Media</Text>\n      <Text slot=\"description\">Connect with friends</Text>\n    </Item>\n    <Item textValue=\"Shopping\">\n      <ShoppingCart size=\"S\" />\n      <Text>Shopping</Text>\n      <Text slot=\"description\">Shop online</Text>\n    </Item>\n  </Section>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Controlling DatePicker Granularity in React\nDESCRIPTION: This TSX snippet demonstrates synchronizing two DatePicker components with the same date state but different 'granularity' settings. One picker displays seconds ('second'), while the other displays only the date ('day'). It uses React's useState hook to manage the shared date value ('2021-04-07T18:45:22Z') and updates it via the 'onChange' handler.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n\n  return (\n    <>\n      <MyDatePicker\n        label=\"Date and time\"\n        /*- begin highlight -*/\n        granularity=\"second\"\n        /*- end highlight -*/\n        value={date}\n        onChange={setDate} />\n      <MyDatePicker\n        label=\"Date\"\n        /*- begin highlight -*/\n        granularity=\"day\"\n        /*- end highlight -*/\n        value={date}\n        onChange={setDate} />\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling ContextualHelp Open/Close Events with onOpenChange in React\nDESCRIPTION: Demonstrates using the `onOpenChange` prop to track the open state of the ContextualHelp popover. The handler function updates a React state variable (`state`), which is then displayed as text next to the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/contextualhelp/docs/ContextualHelp.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [state, setState] = React.useState(false);\n\n  return (\n    <Flex alignItems=\"center\" gap=\"size-100\">\n      <ContextualHelp variant=\"info\" onOpenChange={(isOpen) => setState(isOpen)}>\n        <Heading>Permission required</Heading>\n        <Content><Text>Your admin must grant you permission before you can create a segment.</Text></Content>\n      </ContextualHelp>\n      <Text>Current open state: {state.toString()}</Text>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ToastRegion Component with useToastRegion in React (TSX)\nDESCRIPTION: This component, `ToastRegion`, uses the `useToastRegion` hook from `@react-aria/toast` to set up an accessible ARIA landmark region for displaying multiple toasts. It receives the toast state (`ToastState`) and other `AriaToastRegionProps`, applies the region props to a `div` element, and maps over the `visibleToasts` array from the state to render an individual `Toast` component for each one.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaToastRegionProps} from '@react-aria/toast';\nimport type {ToastState} from '@react-stately/toast';\nimport {useToastRegion} from '@react-aria/toast';\n\ninterface ToastRegionProps<T> extends AriaToastRegionProps {\n  state: ToastState<T>\n}\n\nfunction ToastRegion<T extends React.ReactNode>({state, ...props}: ToastRegionProps<T>) {\n  let ref = React.useRef(null);\n  let {regionProps} = useToastRegion(props, state, ref);\n\n  return (\n    <div {...regionProps} ref={ref} className=\"toast-region\">\n      {state.visibleToasts.map(toast => (\n        <Toast key={toast.key} toast={toast} state={state} />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Additional Description in DatePicker - React Aria - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the React Aria DatePicker component with an extra help text via the description slot. It composes various subcomponents such as Label, Group, DateInput, DateSegment, Button, Popover, Dialog, Calendar, and CalendarGrid, providing granular ARIA and accessibility support for date selection workflows. The description slot, which receives the Text child, is styled separately as shown in the accompanying CSS snippet. Dependencies include React, @adobe/react-spectrum or similar, and any required date management libraries. The main parameters are the granularity ('hour') and the use of slots for descriptive text. The expected output is a rich date picker UI with a contextual help description displayed and accessible for assistive technology.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<DatePicker granularity=\"hour\">\n  <Label>Appointment time</Label>\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button>▼</Button>\n  </Group>\n  {/*- begin highlight -*/}\n  <Text slot=\"description\">Please select a weekday between 9 AM and 5 PM.</Text>\n  {/*- end highlight -*/}\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Autocomplete State Hook in React\nDESCRIPTION: This code snippet demonstrates a state hook for an autocomplete component. It manages the component's state, including menu visibility, input value, selected index, and completions. The hook provides functions to update the state and perform common actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-architecture.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useMemo } from \"react\";\n\nexport function useAutocomplete(props) {\n  let [showMenu, setShowMenu] = useState(false);\n  let [value, setValue] = useState(props.value || \"\");\n  let [selectedIndex, setSelectedIndex] = useState(null);\n  let completions = useMemo(\n    () =>\n      props.options.filter(option =>\n        option.toLowerCase().startsWith(value.toLowerCase())\n      ),\n    [props.options, value]\n  );\n  \n  return {\n    showMenu: showMenu && completions.length > 0,\n    setShowMenu,\n    toggleMenu: () => setShowMenu(!showMenu),\n    value,\n    setValue: value => {\n      if (value && !showMenu) {\n        setShowMenu(true);\n      }\n      setSelectedIndex(null);\n      setValue(value);\n      props.onChange(value);\n    },\n    selectedIndex,\n    setSelectedIndex,\n    completions,\n    selectItem: index => {\n      setValue(completions[index]);\n      setShowMenu(false);\n      props.onChange(completions[index]);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Loading with useAsyncList in React Spectrum Picker (tsx)\nDESCRIPTION: Illustrates using the `useAsyncList` hook from `@react-stately/data` to fetch data asynchronously from an API (e.g., PokeAPI). The hook manages the loading state (`list.isLoading`) and the fetched items (`list.items`), which are then passed to a `Picker` component. The `load` function uses the browser's `fetch` API, handles the response, and returns an object containing the items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\nlet list = useAsyncList({\n  async load({signal}) {\n    let res = await fetch('https://pokeapi.co/api/v2/pokemon', {signal});\n    let json = await res.json();\n    return {items: json.results};\n  }\n});\n\n<Picker\n  label=\"Pick a Pokemon\"\n  items={list.items}\n  isLoading={list.isLoading}>\n  {item => <Item key={item.name}>{item.name}</Item>}\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Setting DateTime Fields - TypeScript\nDESCRIPTION: Demonstrates how to modify CalendarDateTime fields using the set method, including handling of out-of-range values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new CalendarDateTime(2022, 2, 3, 9, 45);\ndate.set({day: 10}); // 2022-02-10T09:45\ndate.set({month: 5}); // 2022-05-03T09:45\ndate.set({year: 2023, month: 10, day: 16}); // 2023-10-16T09:45\ndate.set({hour: 18}); // 2022-02-03T18:45\ndate.set({minute: 15}); // 2022-02-03T09:15\n```\n\n----------------------------------------\n\nTITLE: Customizing Meter Value Label\nDESCRIPTION: Shows how to use the valueLabel prop to display a custom string instead of the default percentage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Meter label=\"Progress\" marginBottom=\"size-300\" value={25} valueLabel=\"1 of 4\" variant=\"warning\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Component using Default and Named Slots with ButtonContext (TSX)\nDESCRIPTION: Creates a `MyCustomComponent` that utilizes `ButtonContext.Provider` and `DEFAULT_SLOT` from `react-aria-components`. It provides different `className` props via the `slots` object: one for the default slot (applied to un-slotted `Button` children) and another for the named 'end' slot.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button, ButtonContext, DEFAULT_SLOT} from 'react-aria-components';\n\nfunction MyCustomComponent({children}) {\n  return (\n    <ButtonContext.Provider\n      value={{\n        slots: {\n          [DEFAULT_SLOT]: {\n            className: \"left-button\"\n          },\n          end: {\n            className: \"right-button\"\n          }\n        }\n      }}>\n      {children}\n    </ButtonContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using View Component with Spectrum Style Props in TSX\nDESCRIPTION: Demonstrates using the `View` component as a container element with specific Spectrum styling props. It applies a thin dark border with medium radius and standard padding (`size-250`). The `View` wraps a `TextField` component, showcasing how `View` can structure and style content consistently with the Spectrum design system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/view/docs/View.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n  borderRadius=\"medium\"\n  padding=\"size-250\">\n  <TextField label=\"Name\" />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Disabling Tooltip Interactions Using isDisabled Prop - React TypeScript\nDESCRIPTION: This snippet demonstrates how to disable the tooltip functionality (while keeping the trigger active) by setting the isDisabled prop on the TooltipButton component. The tooltip will not appear even if its trigger is interacted with, implementing a conditional access pattern for tooltips. The rest of the accessibility and trigger handling logic remains unchanged.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tooltip/docs/useTooltipTrigger.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipButton tooltip=\"Print\" isDisabled>🖨</TooltipButton>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Time Objects in TypeScript\nDESCRIPTION: Demonstrates how to create Time objects using constructor and parsing from ISO 8601 strings\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Time.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Time} from '@internationalized/date';\n\nlet time = new Time(9, 45);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseTime} from '@internationalized/date';\n\nlet time = parseTime('09:45');\n```\n\n----------------------------------------\n\nTITLE: Column Alignment Example in TableView\nDESCRIPTION: This example demonstrates how to set different alignment options for columns in a TableView using the align prop with values 'start', 'center', and 'end'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\n<TableView aria-label=\"Example table for column alignment\">\n  <TableHeader>\n    <Column align=\"start\">Name</Column>\n    <Column align=\"center\">Type</Column>\n    <Column align=\"end\">Size</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2021406_Proposal</Cell>\n      <Cell>PDF</Cell>\n      <Cell>86 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Budget Template</Cell>\n      <Cell>XLS</Cell>\n      <Cell>120 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Onboarding</Cell>\n      <Cell>PPT</Cell>\n      <Cell>472 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Welcome</Cell>\n      <Cell>TXT</Cell>\n      <Cell>24 KB</Cell>\n    </Row>\n  </TableBody>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Creating Links in ComboBox Items\nDESCRIPTION: This example shows how to create ComboBox items that function as links by using the href prop. Clicking on these items navigates to the URL instead of updating selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox label=\"Tech company websites\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Implementing onItemDrop and shouldAcceptItemDrop for Folder Drops in React Spectrum\nDESCRIPTION: Defines handlers for dropping items onto folders. onItemDrop updates the target folder's childNodes with dropped items, while shouldAcceptItemDrop ensures drops are only accepted on items with childNodes (folders).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nlet onItemDrop = async (e) => {\n  let {\n    items,\n    target\n  } = e;\n  let processedItems = await Promise.all(\n    items.map(async item => JSON.parse(await item.getText('adobe-app')))\n  );\n  let targetItem = list.getItem(target.key);\n  list.update(target.key, {...targetItem, childNodes: [...targetItem.childNodes, ...processedItems]});\n}\n\nlet shouldAcceptItemDrop = (target) => !!list.getItem(target.key).childNodes;\n```\n\n----------------------------------------\n\nTITLE: DropZone Styling with CSS\nDESCRIPTION: CSS styling for the DropZone component, including state styles for focus and drop target states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-DropZone {\n  color: var(--text-color);\n  background: var(--overlay-background);\n  border: 1px solid var(--border-color);\n  forced-color-adjust: none;\n  border-radius: 4px;\n  appearance: none;\n  vertical-align: middle;\n  font-size: 1.2rem;\n  text-align: center;\n  margin: 0;\n  outline: none;\n  padding: 24px 12px;\n  width: 25%;\n  display: inline-block;\n\n  &[data-focus-visible],\n  &[data-drop-target] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n\n  &[data-drop-target] {\n    background: var(--highlight-overlay);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Value Label Customization Examples\nDESCRIPTION: Demonstrates multiple ways to customize the value label display, including hiding it, providing a custom string, or formatting with specific options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <Meter\n    label=\"Space used\"\n    showValueLabel={false}\n    value={90}\n    variant=\"critical\" />\n\n  <Meter\n    label=\"Space used\"\n    valueLabel=\"54 of 60GB\"\n    value={90} variant=\"critical\" />\n\n  <Meter\n    label=\"Space used\"\n    formatOptions={{style: 'percent', minimumFractionDigits: 2}}\n    value={89.123}\n    variant=\"critical\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining StatusLight Interface in TypeScript\nDESCRIPTION: TypeScript interface that extends DOMProps and StyleProps, defining the structure of the StatusLight component. It includes properties for children elements, variant styles with specific color options, and a disabled state flag.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/StatusLight.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StatusLight extends DOMProps, StyleProps {\n  children: ReactNode,\n  variant: 'positive' | 'negative' | 'notice' | 'info' | 'neutral' | 'celery' | 'chartreuse' | 'yellow' | 'magenta' | 'fuchsia' | 'purple' | 'indigo' | 'seafoam',\n  isDisabled?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Using Responsive Collapse Overflow in React Spectrum Tabs (TypeScript)\nDESCRIPTION: Demonstrates overflow handling by collapsing tabs into a Picker when width is reduced using a controlled state. React.useState manages the width of the container, and a Button toggles the container size. Requires @adobe/react-spectrum. Inputs: static tabs and interactive width toggle. Outputs: Tabs or Picker based on available space. Limitation: Works only for horizontal Tabs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\\n  let [collapse, setCollapse] = React.useState(false)\\n\\n  return (\\n    <>\\n      <div style={{width: collapse ? '150px' : '300px', marginBottom: '50px', height: '150px', maxWidth: '100%'}}>\\n        <Tabs aria-label=\"Chat log collapse example\">\\n          <TabList>\\n            <Item key=\"item1\">\\n              John Doe\\n            </Item>\\n            <Item key=\"item2\">\\n              Jane Doe\\n            </Item>\\n            <Item key=\"item3\">\\n              Joe Bloggs\\n            </Item>\\n          </TabList>\\n          <TabPanels>\\n            <Item key=\"item1\">\\n              There is no prior chat history with John Doe.\\n            </Item>\\n            <Item key=\"item2\">\\n              There is no prior chat history with Jane Doe.\\n            </Item>\\n            <Item key=\"item3\">\\n              There is no prior chat history with Joe Bloggs.\\n            </Item>\\n          </TabPanels>\\n        </Tabs>\\n      </div>\\n      <Button variant=\"primary\" onPress={() => setCollapse((collapse) => !collapse)}>\\n        Toggle tab container size.\\n      </Button>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization using RadioContext in React (TSX)\nDESCRIPTION: Demonstrates creating a custom `RadioDescription` component that utilizes `RadioContext.Provider` to pass the `aria-describedby` attribute to its child `Radio` component. This allows associating a description with a radio button programmatically using React Context and the `useId` hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {RadioContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface RadioDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction RadioDescription({children, description}: RadioDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <RadioContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </RadioContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<MyRadioGroup label=\"Show scrollbars\" defaultValue=\"automatic\">\n  <RadioDescription description=\"Scrollbars will always be visible when using a mouse, and only while scrolling when using a trackpad.\">\n    <Radio value=\"automatic\">Automatic</Radio>\n  </RadioDescription>\n  <RadioDescription description=\"Scrollbars will appear only while you are scrolling.\">\n    <Radio value=\"scrolling\">While scrolling</Radio>\n  </RadioDescription>\n  <RadioDescription description=\"Scrollbars will always be visible.\">\n    <Radio value=\"always\">Always</Radio>\n  </RadioDescription>\n</MyRadioGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing RangeCalendar with International Calendar Support in React\nDESCRIPTION: This example demonstrates the use of RangeCalendar component with support for international calendars, specifically showing a Hindi calendar using the Indian calendar system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [range, setRange] = React.useState(null);\n  return (\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n      <RangeCalendar aria-label=\"Date range\" value={range} onChange={setRange} />\n      <p>Start date: {range?.start.toString()}</p>\n      <p>End date: {range?.end.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in a Table\nDESCRIPTION: Shows how to enable multiple selection in a table by setting selectionMode to 'multiple', allowing users to select multiple rows simultaneously.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the example above\n<FileTable selectionMode=\"multiple\" defaultSelectedKeys={[2, 4]} />\n```\n\n----------------------------------------\n\nTITLE: Making RadioGroup Read-Only in React Spectrum (TSX)\nDESCRIPTION: Illustrates how to make a `RadioGroup` read-only using the `isReadOnly` prop. The selection (set via `defaultValue` or `value`) becomes immutable, meaning the user cannot change it, but the component remains focusable and is included in form submissions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite avatar\" defaultValue=\"wizard\" isReadOnly>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Breadcrumbs with React Aria Components\nDESCRIPTION: Demonstrates a basic implementation of breadcrumbs navigation with React Aria Components, importing and using the Breadcrumbs, Breadcrumb, and Link components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Breadcrumbs, Breadcrumb, Link} from 'react-aria-components';\n\n<Breadcrumbs>\n  <Breadcrumb><Link href=\"/\">Home</Link></Breadcrumb>\n  <Breadcrumb><Link href=\"/react-aria/\">React Aria</Link></Breadcrumb>\n  <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Selection in React Spectrum ListView\nDESCRIPTION: This example shows how to configure a ListView for single selection mode using the selectionMode prop set to 'single'. It uses the PokemonList component defined earlier.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonList selectionMode=\"single\" selectionStyle=\"highlight\" aria-label=\"ListView with single selection\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a NumberField Component\nDESCRIPTION: Creates a NumberField component using the useNumberField hook, handling state management and rendering input and buttons for incrementing/decrementing values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nfunction NumberField(props) {\n  let {locale} = useLocale();\n  let state = useNumberFieldState({...props, locale});\n  let inputRef = React.useRef(null);\n  let {\n    labelProps,\n    groupProps,\n    inputProps,\n    incrementButtonProps,\n    decrementButtonProps\n  } = useNumberField(props, state, inputRef);\n\n  return (\n    <div>\n      <label {...labelProps}>{props.label}</label>\n      <div {...groupProps}>\n        <Button {...decrementButtonProps}>-</Button>\n        <input {...inputProps} ref={inputRef} />\n        <Button {...incrementButtonProps}>+</Button>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HSB Color Model with ColorArea - React Spectrum - TypeScript/React\nDESCRIPTION: Illustrates the use of the HSB color model within React Spectrum by combining ColorArea and ColorSlider, managing color state with React, and updating UI based on color selection. Depends on '@react-stately/color', React, and Spectrum's color components. Inputs are mapped as HSB channels, and output is shown as a swatch and string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\\n\\nfunction Example() {\\n  let [\\n    color,\\n    setColor\\n  ] = React.useState(parseColor('hsb(219, 58%, 93%)'));\\n  let [\\n    hChannel,\\n    sChannel,\\n    bChannel\\n  ] = color.getColorChannels();\\n  return (\\n    <>\\n      <div style={{display: 'inline-flex', flexWrap: 'wrap'}}>\\n        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>\\n          <label id=\\\"sbh-label-id-1\\\">x: {color.getChannelName(sChannel, 'en-US')}, y: {color.getChannelName(bChannel, 'en-US')}</label>\\n          <ColorArea\\n            aria-labelledby=\\\"sbh-label-id-1\\\"\\n            value={color}\\n            onChange={setColor}\\n            xChannel={sChannel}\\n            yChannel={bChannel} />\\n          <ColorSlider\\n              channel={hChannel}\\n              value={color}\\n              onChange={setColor} />\\n        </div>\\n        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>\\n          <label id=\\\"bhs-label-id-1\\\">x: {color.getChannelName(hChannel, 'en-US')}, y: {color.getChannelName(bChannel, 'en-US')}</label>\\n          <ColorArea\\n            aria-labelledby=\\\"bhs-label-id-1\\\"\\n            value={color}\\n            onChange={setColor}\\n            xChannel={hChannel}\\n            yChannel={bChannel} />\\n          <ColorSlider\\n              channel={sChannel}\\n              value={color}\\n              onChange={setColor} />\\n        </div>\\n        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>\\n          <label id=\\\"hsb-label-id-2\\\">x: {color.getChannelName(hChannel, 'en-US')}, y: {color.getChannelName(sChannel, 'en-US')}</label>\\n          <ColorArea\\n            aria-labelledby=\\\"hsb-label-id-2\\\"\\n            value={color}\\n            onChange={setColor}\\n            xChannel={hChannel}\\n            yChannel={sChannel} />\\n          <ColorSlider\\n              channel={bChannel}\\n              value={color}\\n              onChange={setColor} />\\n        </div>\\n      </div>\\n      <p>Current HSB color value: <ColorSwatch color={color} style={{width: '16px', height: '16px', verticalAlign: 'text-bottom'}} /> {color.toString('hsb')}</p>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Basic ColorArea Implementation in React\nDESCRIPTION: Simple example showing how to implement a basic color area picker with React Aria Components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea, ColorThumb} from 'react-aria-components';\n\n<ColorArea>\n  <ColorThumb />\n</ColorArea>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Selectable TagGroup in React\nDESCRIPTION: This snippet demonstrates the basic usage of `TagGroup`, `TagList`, `Tag`, and `Label` components from `react-aria-components` to create a simple tag group. It sets `selectionMode` to `\"multiple\"` allowing multiple tags to be selected and renders a list of predefined tags.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {TagGroup, TagList, Tag, Label} from 'react-aria-components';\n\n<TagGroup selectionMode=\"multiple\">\n  <Label>Categories</Label>\n  <TagList>\n    <Tag>News</Tag>\n    <Tag>Travel</Tag>\n    <Tag>Gaming</Tag>\n    <Tag>Shopping</Tag>\n  </TagList>\n</TagGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label Component Compatible with React Aria Context in TSX\nDESCRIPTION: This snippet defines `MyCustomLabel`, a custom label component using `React.forwardRef`. It demonstrates how to make a custom component compatible with React Aria's context system. It uses the `useContextProps` hook from `react-aria-components` to merge props and refs passed locally with those provided via `LabelContext` from a parent component like `TagGroup`. This allows using existing styled components within React Aria structures while maintaining accessibility and state connections. Depends on `react` and `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  ///- end highlight -///\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Date Utilities for Custom Calendar in TSX\nDESCRIPTION: Imports required types and functions (`AnyCalendarDate`, `CalendarDate`, `startOfWeek`, `toCalendar`) from the `@internationalized/date` library. These are prerequisites for creating a custom calendar implementation in TypeScript, as shown in the subsequent example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx import\nimport type {AnyCalendarDate} from '@internationalized/date';\nimport {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling ColorPicker Swatch Size with Size Prop (TypeScript/TSX)\nDESCRIPTION: This example demonstrates setting the swatch size in ColorPicker using the `size` prop. Four swatch sizes (XS, S, M, L) are shown, each with its own ColorPicker and ColorEditor. These options allow for responsive UI design and consistent sizing across an application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-100\">\n  <ColorPicker label=\"Extra small\" size=\"XS\" defaultValue=\"#A00\">\n    <ColorEditor />\n  </ColorPicker>\n  <ColorPicker label=\"Small\" size=\"S\" defaultValue=\"#080\">\n    <ColorEditor />\n  </ColorPicker>\n  <ColorPicker label=\"Medium\" size=\"M\" defaultValue=\"#FB0\">\n    <ColorEditor />\n  </ColorPicker>\n  <ColorPicker label=\"Large\" size=\"L\" defaultValue=\"#00F\">\n    <ColorEditor />\n  </ColorPicker>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Disabling a ColorSlider in React (TSX)\nDESCRIPTION: Shows how to render a `ColorSlider` in a disabled state, preventing user interaction. This is achieved by adding the boolean `isDisabled` prop to the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSlider defaultValue=\"#7f0000\"  channel=\"red\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility for Icon-Only ToggleButton in TSX\nDESCRIPTION: Shows how to make an icon-only `ToggleButton` accessible by providing an `aria-label` prop. This label serves as the alternative text for screen readers when no visible text label is present. The example uses a `Pin` icon.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ToggleButton.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButton aria-label=\"Icon only\">\n  <Pin />\n</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Events on the React Aria ListBox Collection - TypeScript\nDESCRIPTION: Enables the ListBox component to accept drops at the collection level by providing the onRootDrop handler via useDragAndDrop. When items are dropped, their data is retrieved asynchronously (supporting both text and non-text items) and used to populate the ListBox. Integrates with DraggableListBox to allow cross-component drag and drop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Item {\\n  id: number,\\n  name: string\\n}\\n\\nfunction Example() {\\n  let [items, setItems] = React.useState<Item[]>([]);\\n\\n  let { dragAndDropHooks } = useDragAndDrop({\\n    /*- begin highlight -*/\\n    async onRootDrop(e) {\\n      let items = await Promise.all(e.items.map(async (item, i) => {\\n        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;\\n        return {id: i, name};\\n      }));\\n      setItems(items);\\n    }\\n    /*- end highlight -*/\\n  });\\n\\n  return (\\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\\n      <DraggableListBox />\\n      <ListBox aria-label=\\\"Droppable list\\\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => 'Drop items here'}>\\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\\n      </ListBox>\\n    </div>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Styling NumberField Components with CSS\nDESCRIPTION: CSS examples for styling NumberField components using class selectors and data attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-NumberField {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Read-only SearchWithin Component in React\nDESCRIPTION: This example demonstrates a SearchWithin component with a read-only SearchField.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchwithin/docs/SearchWithin.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchWithin label=\"Search\">\n  <SearchField value=\"Read Only\" isReadOnly />\n  <Picker defaultSelectedKey=\"all\">\n    <Item key=\"all\">All</Item>\n    <Item key=\"campaigns\">Campaigns</Item>\n    <Item key=\"audiences\">Audiences</Item>\n    <Item key=\"tags\">Tags</Item>\n  </Picker>\n</SearchWithin>\n```\n\n----------------------------------------\n\nTITLE: Slider Labeling Options in React Spectrum\nDESCRIPTION: Shows different label positioning and hiding options for the Slider component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" maxWidth=\"size-5000\" gap=\"size-300\">\n  <Slider label=\"Cookies to buy\" defaultValue={25} />\n  <Slider label=\"Donuts to buy\" labelPosition=\"side\" defaultValue={25} />\n  <Slider label=\"Pastries to buy\" showValueLabel={false} defaultValue={25} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Tooltip Cross Offset to the Right in React (TypeScript/TSX)\nDESCRIPTION: Demonstrates use of both 'crossOffset' and 'placement' props to display a tooltip 60px to the right of the button trigger below it. MyTooltip acts as a wrapper for props propagation. Use when additional control over tooltip alignment relative to the button is required. Requires MyTooltip and react-aria-components, intended for use in customized UI positioning scenarios.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger>\\n  <Button>\\uD83D\\uDC49</Button>\\n  <MyTooltip crossOffset={60} placement=\\\"bottom\\\">This will shift over to the right.</MyTooltip>\\n</TooltipTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Copying RFC Template in Markdown\nDESCRIPTION: This snippet shows how to copy the RFC template file into the newly created RFC directory, ensuring it's named README.md for easy viewing on GitHub.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n3. Copy the [template.md](template.md) file from this `rfcs` directory into your newly created subdirectory (such as `rfcs/2018-cyclebutton-new-component/README.md`). Be sure to name your file `README.md` so it is easily viewable in the GitHub interface.\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Range in React Spectrum\nDESCRIPTION: Demonstrates how to set custom minimum and maximum values for the Slider.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider\n  label=\"Cookies to buy\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={100} />\n```\n\n----------------------------------------\n\nTITLE: Integrating React Router with React Spectrum Provider\nDESCRIPTION: This code shows how to set up the React Spectrum Provider component to work with React Router, including type configuration for router options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {BrowserRouter, useNavigate, useHref, type NavigateOptions} from 'react-router-dom';\nimport {Provider, defaultTheme} from '@adobe/react-spectrum';\n\ndeclare module '@adobe/react-spectrum' {\n  interface RouterConfig {\n    routerOptions: NavigateOptions\n  }\n}\n\nfunction App() {\n  let navigate = useNavigate();\n\n  return (\n    <Provider theme={defaultTheme} router={{navigate, useHref}}>\n      {/* Your app here... */}\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        {/* ... */}\n      </Routes>\n    </Provider>\n  );\n}\n\n<BrowserRouter>\n  <App />\n</BrowserRouter>\n```\n\n----------------------------------------\n\nTITLE: Labeling an Optional ComboBox with Text Indicator in TSX\nDESCRIPTION: Shows how to indicate that a ComboBox is optional using `necessityIndicator=\"label\"` when `isRequired` is false or omitted. This appends a localized \"(optional)\" text string to the label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntsx example\n<ComboBox label=\"Favorite Animal\" necessityIndicator=\"label\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: ColorField with Specific Color Channel Editing\nDESCRIPTION: Demonstrates how to use multiple ColorField components to edit individual channels of a color in HSL color space.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#7f007f'));\n  return (\n    <>\n      <div style={{display: 'flex', gap: 8}}>\n        <MyColorField label=\"Hue\" value={color} onChange={setColor} colorSpace=\"hsl\" channel=\"hue\" />\n        <MyColorField label=\"Saturation\" value={color} onChange={setColor} colorSpace=\"hsl\" channel=\"saturation\" />\n        <MyColorField label=\"Lightness\" value={color} onChange={setColor} colorSpace=\"hsl\" channel=\"lightness\" />\n      </div>\n      <p>Current color value: {color?.toString('hex')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Start Date Functions with Locales in TypeScript/React\nDESCRIPTION: Demonstrates how to use startOfYear, startOfMonth, and startOfWeek functions to find the beginning of different time periods, with locale-specific handling for week starts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport {startOfYear, startOfMonth, startOfWeek} from '@internationalized/date';\n\nlet date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\n\nstartOfYear(date); // 2022-01-01T09:45[America/Los_Angeles]\nstartOfMonth(date); // 2022-02-01T09:45[America/Los_Angeles]\nstartOfWeek(date, 'en-US'); // 2022-01-30T09:45[America/Los_Angeles]\nstartOfWeek(date, 'fr-FR'); // 2022-01-31T09:45[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Disabling Items by Key in Dynamic Collections (TypeScript)\nDESCRIPTION: Shows how to disable items by specifying their keys using the disabledKeys prop at the GridList/PokemonList level. Accepts an array of keys; affected items are considered disabled either by key or their own isDisabled prop. Example assumes a PokemonList wrapper. Output: list with items disabled by key reference for scalable disables in dynamic data sets.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\\n// Using the example above\\n<PokemonList\\n  aria-label=\\\"List with disabled rows\\\"\\n  selectionMode=\\\"multiple\\\"\\n  /*- begin highlight -*/\\n  disabledKeys={[3]}\\n  /*- end highlight -*/\\n/>\\n```\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Indeterminate State\nDESCRIPTION: Shows how to set a checkbox to the indeterminate state using the isIndeterminate prop, which overrides the appearance regardless of selection state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckbox isIndeterminate>Subscribe</MyCheckbox>\n```\n\n----------------------------------------\n\nTITLE: TextField with Form Validation in React\nDESCRIPTION: This example shows how to use the TextField component with form validation in a Form component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextField label=\"Email\" name=\"email\" type=\"email\" isRequired />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Disabled ToggleButton\nDESCRIPTION: Shows how to create a disabled ToggleButton by using the isDisabled prop. This makes the button non-interactive while maintaining proper accessibility states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButton isDisabled>Pin</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 4-5-4 Calendar in TypeScript for React Spectrum\nDESCRIPTION: This code snippet demonstrates the implementation of a custom 4-5-4 calendar system by extending the GregorianCalendar class. It overrides methods like getDaysInMonth, fromJulianDay, and toJulianDay to handle the custom calendar logic.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Calendar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AnyCalendarDate, Calendar} from '@internationalized/date';\nimport {CalendarDate, GregorianCalendar, startOfWeek} from '@internationalized/date';\n\nconst weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n\nclass Custom454 extends GregorianCalendar {\n  // Months always have either 4 or 5 full weeks.\n  getDaysInMonth(date) {\n    return weekPattern[date.month - 1] * 7;\n  }\n\n  // Enable conversion between calendar systems.\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    // Start from the beginning of the first week of the gregorian year\n    // and add weeks until we find the month.\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < weekPattern.length; months++) {\n      let weeksInMonth = weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  isEqual(other: Calendar) {\n    return other instanceof Custom454;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZonedDateTime with Buddhist Calendar in React\nDESCRIPTION: Creates a ZonedDateTime in the Buddhist calendar system, which is equivalent to April 30th, 2020 at 9:15 AM in the Gregorian calendar system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {BuddhistCalendar} from '@internationalized/date';\n\nlet date = new ZonedDateTime(\n  new BuddhistCalendar(), 2563, 4, 30,\n  'America/Los_Angeles', -28800000,\n  9, 15\n);\n```\n\n----------------------------------------\n\nTITLE: Controlled Color Wheel with State Management\nDESCRIPTION: A controlled implementation of the ColorWheel component that uses React state to manage the color value. It parses the initial HSL color string and updates the state when the color changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorWheel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <>\n      <ColorWheel value={color} onChange={setColor} />\n      <p>Current color value: {color.toString('hsl')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Empty State for Tree (TSX)\nDESCRIPTION: Demonstrates how to provide a custom message or component to display when the `Tree` component has no items. This is achieved using the `renderEmptyState` prop, which accepts a function returning the content to render.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Tree aria-label=\"Search results\" renderEmptyState={() => 'No results found.'} style={{height: '100px'}}>\n  {[]}\n</Tree>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling FieldGroup and Error Message for DateRangePicker with CSS\nDESCRIPTION: This CSS snippet provides custom styles for the fieldset and error message classes used in the FieldGroup component. It adds padding, sizing, block display, and color for invalid states, using a CSS variable for the color. These classes are applied to structure and visually distinguish form groups and error indicators. There are no dependencies except browser support for CSS custom properties.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_25\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n\n.invalid {\n  color: var(--invalid-color);\n  margin-top: 1em;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-month Calendar Display Implementation\nDESCRIPTION: Shows how to implement a multi-month calendar view with pagination controls and multiple CalendarGrid components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar aria-label=\"Trip dates\" visibleDuration={{months: 3}}>\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>\n    <CalendarGrid>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 1}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 2}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n  </div>\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Item Selection Based on Loaded Data Using useAsyncList in React Spectrum (TypeScript)\nDESCRIPTION: Explains how to dynamically pre-select items during async load by returning selectedKeys derived from the API data in addition to the items. Useful when selection depends on server-side state. Keys required include useAsyncList and an API returning a results array with item IDs and isSelected flag. Input: API data; Output: items plus dynamically computed selectedKeys set.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useAsyncList.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useAsyncList({\n  async load({signal}) {\n    let res = await fetch('http://example.com/api', {signal});\n    let json = await res.json();\n\n    // Return items and compute selectedKeys based on the data and return a list of ids.\n    return {\n      items: json.results,\n      selectedKeys: json.results.filter(item => item.isSelected).map(item => item.id)\n    };\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Modal Component using useModalOverlay in React\nDESCRIPTION: This snippet demonstrates creating a `Modal` component using the `useModalOverlay` hook from `@react-aria/overlays`. It sets up the overlay and underlay elements with appropriate props for accessibility and styling, rendering children within a centered modal container. It utilizes `React.useRef` for the modal element and manages state via the passed `state` prop (likely from `useOverlayTriggerState`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/useModalOverlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Overlay, useModalOverlay} from '@react-aria/overlays';\n\nfunction Modal({state, children, ...props}) {\n  let ref = React.useRef(null);\n  let {modalProps, underlayProps} = useModalOverlay(props, state, ref);\n\n  return (\n    <Overlay>\n      <div\n        style={{\n          position: 'fixed',\n          zIndex: 100,\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: 'rgba(0, 0, 0, 0.5)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}\n        {...underlayProps}>\n        <div\n          {...modalProps}\n          ref={ref}\n          style={{\n            background: 'var(--page-background)',\n            border: '1px solid gray'\n          }}>\n          {children}\n        </div>\n      </div>\n    </Overlay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Router with React Aria Tabs and Links\nDESCRIPTION: Shows how to use the custom Router component to create linkable tabs that update the selected tab when clicked.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Link} from 'react-aria-components';\n\n<Router>\n  <Tabs>\n    <TabList aria-label=\"Mesozoic time periods\">\n      <Tab id=\"triassic\">Triassic</Tab>\n      <Tab id=\"jurassic\">Jurassic</Tab>\n      <Tab id=\"cretaceous\">Cretaceous</Tab>\n    </TabList>\n    <TabPanel id=\"triassic\">\n      The Triassic ranges roughly from 252 million to 201 million years ago,\n      preceding the <Link data-href=\"jurassic\">Jurassic Period</Link>.\n    </TabPanel>\n    <TabPanel id=\"jurassic\">\n      The Jurassic ranges from 200 million years to 145 million years ago,\n      preceding the <Link data-href=\"cretaceous\">Cretaceous Period</Link>.\n    </TabPanel>\n    <TabPanel id=\"cretaceous\">\n      The Cretaceous is the longest period of the Mesozoic, spanning from 145 million to 66 million years ago.\n    </TabPanel>\n  </Tabs>\n</Router>\n```\n\n----------------------------------------\n\nTITLE: Using disallowEmptySelection in TableView\nDESCRIPTION: This example demonstrates how to use the disallowEmptySelection prop, which forces the user to have at least one row selected at all times by preventing deselection of the last selected item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the same table as above\n<PokemonTable disallowEmptySelection />\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for ColorField Component\nDESCRIPTION: Provides CSS styling for the ColorField component, including input appearance, focus states, and color theming using CSS variables.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ColorField {\n  display: flex;\n  flex-direction: column;\n  color: var(--text-color);\n\n  .react-aria-Input {\n    padding: 0.286rem;\n    margin: 0;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    background: var(--field-background);\n    font-size: 1.143rem;\n    color: var(--field-text-color);\n    width: 100%;\n    max-width: 12ch;\n    box-sizing: border-box;\n\n    &[data-focused] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchAutocomplete with Side Label Alignment in React Spectrum\nDESCRIPTION: This example demonstrates how to configure the label position and alignment in a SearchAutocomplete component. The label is positioned to the side and aligned to the end of the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Favorite Animal\" labelPosition=\"side\" labelAlign=\"end\">\n  <Item>Red Panda</Item>\n  <Item>Cat</Item>\n  <Item>Dog</Item>\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: File Drop Implementation with Image Preview\nDESCRIPTION: Demonstrates file drag and drop functionality with image preview support for JPEG and PNG files. Includes URL object creation and cleanup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({});\n  let getItems = e => {\n    return Promise.all(\n      e.items.map(async item => ({\n        id: Math.random(),\n        url: URL.createObjectURL(await item.getFile()),\n        name: item.name\n      }))\n    );\n  };\n\n  let onRootDrop = async e => {\n    list.prepend(...await getItems(e));\n  };\n\n  let onInsert = async e => {\n    if (e.target.dropPosition === 'before') {\n      list.insertBefore(e.target.key, ...await getItems(e));\n    } else if (e.target.dropPosition === 'after') {\n      list.insertAfter(e.target.key, ...await getItems(e));\n    }\n  };\n\n  return (\n    <ListBox\n      aria-label=\"Images\"\n      items={list.items}\n      acceptedDragTypes={['image/jpeg', 'image/png']}\n      onRootDrop={onRootDrop}\n      onInsert={onInsert}>\n      {item => (\n        <Item textValue={item.name}>\n          <div className=\"image-item\">\n            <img src={item.url} />\n            <span>{item.name}</span>\n          </div>\n        </Item>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Component Stylesheets for Autocomplete Example in CSS\nDESCRIPTION: Imports necessary CSS stylesheets for related components (`Menu`, `Button`, `SearchField`) used within the Autocomplete example. These imports ensure that the base styles for these components are applied using `@import` with `layer` definitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Menu.mdx' layer(listbox);\n@import './Button.mdx' layer(button);\n@import './SearchField.mdx' layer(searchfield);\n```\n\n----------------------------------------\n\nTITLE: Styling a Vertical Slider with CSS in React Spectrum\nDESCRIPTION: CSS rules to style a vertical slider, including setting the height, hiding label and output elements, and positioning the track and thumb properly.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Slider {\n  &[data-orientation=vertical] {\n    height: 150px;\n    display: block;\n\n    .react-aria-Label,\n    .react-aria-SliderOutput {\n      display: none;\n    }\n\n    .react-aria-SliderTrack {\n      width: 30px;\n      height: 100%;\n\n      &:before {\n        width: 3px;\n        height: 100%;\n        left: 50%;\n        transform: translateX(-50%);\n      }\n    }\n\n    .react-aria-SliderThumb {\n      left: 50%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Cells in React Aria Calendar using CSS\nDESCRIPTION: This CSS snippet targets disabled date cells within a React Aria Calendar component. It uses the `data-disabled` attribute selector on `.react-aria-CalendarCell` to apply specific styling, changing the text color using the `--text-color-disabled` CSS variable to visually indicate that the cell represents a date outside the allowed selection range (e.g., before `minValue` or after `maxValue`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Calendar {\n  .react-aria-CalendarCell {\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling NumberField and Subcomponents with a Custom Theme in React Spectrum (CSS)\nDESCRIPTION: This stylesheet snippet defines custom styles for the .react-aria-NumberField component and its children using CSS variables and pseudo-classes for different interaction states. It imports a base theme, sets margin and color properties, and styles group wrapping, buttons (including different slots for increment/decrement), and the input for improved accessibility and appearance. Requires CSS custom properties support and may depend on the previously imported theme for variable resolution. It affects structure, colors, focus rings, and layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \\\"@react-aria/example-theme\\\";\\n\\n.react-aria-NumberField {\\n  margin-bottom: 8px;\\n  color: var(--text-color);\\n\\n  .react-aria-Group {\\n    display: flex;\\n    width: fit-content;\\n    border-radius: 4px;\\n\\n    &[data-focus-within] {\\n      outline: 1px solid var(--focus-ring-color);\\n      .react-aria-Input,\\n      .react-aria-Button {\\n        border-color: var(--focus-ring-color);\\n      }\\n    }\\n  }\\n\\n  .react-aria-Button {\\n    font-size: 1.4rem;\\n    width: 2.3rem;\\n    padding: 0;\\n\\n    &[slot=decrement] {\\n      border-start-end-radius: 0;\\n      border-end-end-radius: 0;\\n    }\\n\\n    &[slot=increment] {\\n      border-start-start-radius: 0;\\n      border-end-start-radius: 0;\\n    }\\n  }\\n\\n  .react-aria-Input {\\n    background: var(--field-background);\\n    border: 1px solid var(--border-color);\\n    border-radius: 0;\\n    color: var(--field-text-color);\\n    margin: 0 -1px;\\n    z-index: 1;\\n    font-size: 1rem;\\n    padding: 0.429rem 0.571rem;\\n    outline: none;\\n    width: 6rem;\\n    flex: 1;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic ListBox with Selection Using Item IDs\nDESCRIPTION: This example shows how to use ListBox with dynamic items, utilizing the id property of each item as the selected value without needing to specify a key prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction DynamicExample() {\n  let [animalId, setAnimalId] = React.useState<Selection>(new Set());\n  let options = [\n    {id: 1, name: 'Aardvark'},\n    {id: 2, name: 'Cat'},\n    {id: 3, name: 'Dog'},\n    {id: 4, name: 'Kangaroo'},\n    {id: 5, name: 'Koala'},\n    {id: 6, name: 'Penguin'},\n    {id: 7, name: 'Snake'},\n    {id: 8, name: 'Turtle'},\n    {id: 9, name: 'Wombat'}\n  ];\n\n  return (\n    <>\n      <ListBox\n        selectionMode=\"single\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        onSelectionChange={selected => setAnimalId(selected)}\n        width=\"size-2400\">\n        {item => <Item>{item.name}</Item>}\n      </ListBox>\n      <p>Your favorite animal has id: {[...animalId][0]}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DatePicker Granularity and Placeholder Time Zone in React\nDESCRIPTION: This TSX snippet shows two DatePicker instances configured with 'second' granularity. The first relies on default behavior where the time zone might not be set in the 'onChange' event if no initial value is provided. The second uses the 'placeholderValue' prop with 'now('America/New_York')' to explicitly set the time zone ('America/New_York') for the value emitted by 'onChange'. This ensures emitted values have the desired time zone.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {now} from '@internationalized/date';\n\n<MyDatePicker\n  label=\"Event date\"\n  granularity=\"second\" />\n<MyDatePicker\n  label=\"Event date\"\n  placeholderValue={now('America/New_York')}\n  granularity=\"second\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Takeover DialogContainer Example\nDESCRIPTION: This example demonstrates the fullscreenTakeover variant of DialogContainer, which covers the entire screen. This is the most immersive dialog type, completely hiding the underlying page content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogContainer.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example(props) {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <ActionButton onPress={() => setOpen(true)}>\n        <Edit />\n        <Text>Edit</Text>\n      </ActionButton>\n      <DialogContainer type=\"fullscreenTakeover\" onDismiss={() => setOpen(false)} {...props}>\n        {isOpen &&\n          <EditDialog />\n        }\n      </DialogContainer>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Disabled NumberField in React Spectrum\nDESCRIPTION: This example shows how to create a disabled NumberField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField label=\"Cookies\" isDisabled minValue={0} />\n```\n\n----------------------------------------\n\nTITLE: Disallowing Empty Selection in React Spectrum Table\nDESCRIPTION: This example illustrates how to force at least one row to be selected at all times in a React Spectrum table. It uses the disallowEmptySelection prop in combination with selectionMode and defaultSelectedKeys.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleTable selectionMode=\"single\" defaultSelectedKeys={[2]} disallowEmptySelection />\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Items in ListBox with isDisabled Prop\nDESCRIPTION: Example of creating a ListBox with disabled items using the isDisabled prop directly on ListBoxItem components. Disabled items are not focusable, selectable, or keyboard navigable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Choose sandwich contents with disabled items\"\n  selectionMode=\"multiple\">\n  <ListBoxItem>Lettuce</ListBoxItem>\n  <ListBoxItem>Tomato</ListBoxItem>\n  <ListBoxItem>Cheese</ListBoxItem>\n  <ListBoxItem isDisabled>Tuna Salad</ListBoxItem>\n  <ListBoxItem>Egg Salad</ListBoxItem>\n  <ListBoxItem>Ham</ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Customizing Value Formatting in Meter Component\nDESCRIPTION: This snippet demonstrates how to customize value formatting in the Meter component using the formatOptions prop, which is compatible with Intl.NumberFormat options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/meter/docs/useMeter.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Meter\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  value={60} />\n```\n\n----------------------------------------\n\nTITLE: Indeterminate ProgressCircle in React Spectrum\nDESCRIPTION: Demonstrates an indeterminate ProgressCircle which is used when progress is happening but the time to completion can't be determined.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressCircle.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressCircle aria-label=\"Loading…\" isIndeterminate />\n```\n\n----------------------------------------\n\nTITLE: Controlling Page Behavior in Multi-Month React Spectrum Calendar (TSX)\nDESCRIPTION: This TSX snippet shows how to modify the navigation behavior in a multi-month React Spectrum `Calendar`. By setting the `pageBehavior` prop to `\"single\"` while `visibleDuration` is set to show multiple months (e.g., 3), the previous/next navigation buttons will advance the calendar view by only one month at a time instead of the default behavior (advancing by the full visible duration). Requires React Spectrum components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Calendar aria-label=\"Appointment date\" visibleDuration={{months: 3}} pageBehavior=\"single\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <div style={{display: 'flex', gap: 30, overflow: 'auto'}}>\n    <CalendarGrid>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 1}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n    <CalendarGrid offset={{months: 2}}>\n      {date => <CalendarCell date={date} />}\n    </CalendarGrid>\n  </div>\n</Calendar>\n```\n```\n\n----------------------------------------\n\nTITLE: TextArea with Custom Width in React Spectrum\nDESCRIPTION: Shows how to set a custom width for the TextArea component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<TextArea label=\"Email\" width=\"size-3600\" maxWidth=\"100%\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering the Bi-directional TableView Drag and Drop Example in TypeScript\nDESCRIPTION: Renders the `DragBetweenTablesExample` component, which displays two React Spectrum `TableView` components allowing items to be dragged and dropped ('move' operation) between them. This snippet executes the setup defined in the previous, larger code block.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<DragBetweenTablesExample />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Simple Accent Button with Spectrum (TypeScript)\nDESCRIPTION: This example demonstrates how to render a Spectrum 'Button' with the 'accent' visual variant in a React component. The only required prop is the variant, with its children being a label string. The output is an accent-styled button labeled 'Save.' No props besides 'variant' and children are required. No additional dependencies are necessary beyond those shown in the import example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Button variant=\\\"accent\\\">Save</Button>\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled TextArea in React Spectrum\nDESCRIPTION: Demonstrates how to use TextArea in both controlled and uncontrolled modes with default and controlled values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState('This is on a wait list');\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <TextArea\n        label=\"Notes (Uncontrolled)\"\n        defaultValue=\"This is on a wait list\" />\n\n      <TextArea\n        label=\"Notes (Controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using RangeCalendar Component with Controlled and Uncontrolled Values\nDESCRIPTION: This example demonstrates how to use the RangeCalendar component with both controlled and uncontrolled values, using the parseDate function from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-12')\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 20, flexWrap: 'wrap'}}>\n      <RangeCalendar\n        aria-label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-12')\n        }} />\n      <RangeCalendar\n        aria-label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Label Position and Alignment in TimeField\nDESCRIPTION: Shows how to position and align the label relative to the TimeField input using labelPosition and labelAlign props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField label=\"Event time\" labelPosition=\"side\" labelAlign=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Quiet Styling in TableView\nDESCRIPTION: This example demonstrates how to apply the quiet styling variant to a TableView using the isQuiet prop, which creates a more visually subtle table appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\n// Using same setup as hide header example\n<TableExample isQuiet />\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in SearchField with React\nDESCRIPTION: Demonstrates how to use onChange, onSubmit, and onClear event handlers with a SearchField component to update and display text in multiple elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [currentText, setCurrentText] = React.useState('');\n  let [submittedText, setSubmittedText] = React.useState('');\n\n  return (\n    <div>\n      <MySearchField\n        onClear={() => setCurrentText('')}\n        onChange={setCurrentText}\n        onSubmit={setSubmittedText}\n        label=\"Your text\"\n        value={currentText}\n      />\n      <p>Mirrored text: {currentText}</p>\n      <p>Submitted text: {submittedText}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Keyboard Component in a Menu Item\nDESCRIPTION: Example showing how to use a custom keyboard component within a Menu Item, demonstrating the integration of custom components with React Aria Components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu>\n  <MenuItem textValue=\"Paste\">\n    <Text slot=\"label\">Paste</Text>\n    <MyKeyboard>⌘V</MyKeyboard>\n  </MenuItem>\n  {/* ... */}\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button with Non-Native Element using useButton\nDESCRIPTION: This example shows how to use useButton with a custom element type (span) instead of a native button. It also demonstrates handling the isPressed state for styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useButton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Button(props) {\n  let {children} = props;\n  let ref = useRef<HTMLButtonElement | null>(null);\n  let {buttonProps, isPressed} = useButton({\n    ...props,\n    elementType: 'span'\n  }, ref);\n\n  return (\n    <span\n      {...buttonProps}\n      style={{\n        background: isPressed ? 'darkgreen' : 'green',\n        color: 'white',\n        padding: 10,\n        cursor: 'pointer',\n        userSelect: 'none',\n        WebkitUserSelect: 'none'\n      }}\n      ref={ref}>\n      {children}\n    </span>\n  );\n}\n\n<Button onPress={() => alert('Button pressed!')}>Test</Button>\n```\n\n----------------------------------------\n\nTITLE: Styling Popover to Match Trigger Button Width in React Spectrum with CSS\nDESCRIPTION: Shows how to adjust the popover width to match that of its trigger by using the data-trigger attribute (specifically 'DialogTrigger') and the --trigger-width CSS custom property. Used for consistent popover sizing in conjunction with DialogTrigger. Input: Popover element with data-trigger=DialogTrigger; Output: popover that matches trigger width.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=DialogTrigger] {\\n  width: var(--trigger-width);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Button with FileTrigger - React Spectrum (TypeScript)\nDESCRIPTION: This code shows the minimal structure for composing a FileTrigger with a Button component. The FileTrigger wraps the Button and wires up native file selection via a visually hidden input. There are no event handlers or custom props in this example, demonstrating compositional basics. Dependencies are react-aria-components and its Button. The input is any user file selection; output is determined by parent props. Accessibility for the trigger depends on providing either a visible label, an 'aria-label', or 'aria-labelledby'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/FileTrigger.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FileTrigger, Button} from 'react-aria-components';\n\n<FileTrigger>\n  <Button />\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Radio Group in React\nDESCRIPTION: This example demonstrates how to set an initial, uncontrolled value for a RadioGroup component using the defaultValue prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Are you a wizard?\" defaultValue=\"yes\">\n  <Radio value=\"yes\">Yes</Radio>\n  <Radio value=\"no\">No</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Link Styling with Class Name Functions - JSX\nDESCRIPTION: Illustrates using the className prop as a function to apply different classes based on component state, specifically whether the Link is current. This is particularly useful for integrating with utility-first CSS frameworks like Tailwind CSS. Requires React Aria's Link component, React, and the desired CSS classes to be available.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Link className={({isCurrent}) => isCurrent ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Menu Items Based on State\nDESCRIPTION: Example demonstrating how to use render props to conditionally render elements based on component state, such as showing a checkmark icon when an item is selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuItem>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      Item\n    </>\n  )}\n</MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Converting CalendarDate to Native Date in TypeScript\nDESCRIPTION: Demonstrates how to convert a CalendarDate object to a native JavaScript Date object using the toDate method. It requires specifying a time zone identifier.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\ndate.toDate('America/Los_Angeles'); // Thu Feb 03 2022 00:00:00 GMT-0800 (Pacific Standard Time)\ndate.toDate(getLocalTimeZone()); // e.g. Thu Feb 03 2022 00:00:00 GMT-0500 (Eastern Standard Time)\n```\n\n----------------------------------------\n\nTITLE: Applying Default Theme with React Spectrum Provider (TSX)\nDESCRIPTION: Shows how to apply a predefined React Spectrum theme to an entire application. It imports the `theme` object (specifically the default theme) from `@react-spectrum/theme-default` and passes it to the `theme` prop of the root `Provider` component wrapping the main application component (`YourApp`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/theming.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {theme} from '@react-spectrum/theme-default';\n\n<Provider theme={theme}>\n  <YourApp />\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Setting Color Scheme in Provider\nDESCRIPTION: This snippet shows how to set a specific color scheme (light) using the Provider component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/provider/docs/Provider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Provider theme={theme} colorScheme=\"light\">\n  <ActionButton margin=\"size-100\">I'm a light button</ActionButton>\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: useLocale Hook Implementation Example\nDESCRIPTION: Example showing how to implement the useLocale hook to set language and direction attributes for internationalization in a React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/useLocale.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useLocale} from '@react-aria/i18n';\n\nfunction YourApp() {\n  let {locale, direction} = useLocale();\n\n  return (\n    <div lang={locale} dir={direction}>\n      {/* your app here */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumbs with Navigation Links in React Aria\nDESCRIPTION: Example showing how to create breadcrumb navigation with actual links using anchor elements. This approach enables direct page navigation through href attributes rather than event handlers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/breadcrumbs/docs/useBreadcrumbs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction BreadcrumbItem(props) {\n  let ref = React.useRef(null);\n  let {itemProps} = useBreadcrumbItem(props, ref);\n  return (\n    <li>\n      <a\n        {...itemProps}\n        ref={ref}\n        href={props.href}\n        style={{\n          color: props.isDisabled ? 'var(--gray)' : 'var(--blue)',\n          textDecoration: props.isCurrent || props.isDisabled ? 'none' : 'underline',\n          fontWeight: props.isCurrent ? 'bold' : null,\n          cursor: props.isCurrent || props.isDisabled ? 'default' : 'pointer'\n        }}>\n        {props.children}\n      </a>\n      {!props.isCurrent &&\n        <span aria-hidden=\"true\" style={{padding: '0 5px'}}>{'›'}</span>\n      }\n    </li>\n  );\n}\n\n<Breadcrumbs>\n  <BreadcrumbItem href=\"/\">Home</BreadcrumbItem>\n  <BreadcrumbItem href=\"/react-aria/\">React Aria</BreadcrumbItem>\n  <BreadcrumbItem>useBreadcrumbs</BreadcrumbItem>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Reusable EditDialog Component for Example\nDESCRIPTION: This snippet defines a reusable EditDialog component used in the examples. It demonstrates how to create a custom dialog with form controls and how to use the useDialogContainer hook for dismissal.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogContainer.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction EditDialog() {\n  let dialog = useDialogContainer();\n\n  return (\n    <Dialog>\n      <Heading>Edit</Heading>\n      <Divider />\n      <Content>\n        <Form width=\"100%\">\n          <TextField autoFocus label=\"First Name\" defaultValue=\"John\" />\n          <TextField label=\"Last Name\" defaultValue=\"Smith\" />\n        </Form>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={dialog.dismiss}>Cancel</Button>\n        <Button variant=\"accent\" onPress={dialog.dismiss}>Save</Button>\n      </ButtonGroup>\n    </Dialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Format Drag Data Implementation\nDESCRIPTION: Demonstrates how to implement drag functionality with multiple data formats including plain text, HTML, and custom app-specific formats.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrag.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Draggable() {\n  let {dragProps, isDragging} = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world',\n        'text/html': '<strong>hello world</strong>',\n        'my-app-custom-type': JSON.stringify({\n          message: 'hello world',\n          style: 'bold'\n        })\n      }, {\n        'text/plain': 'foo bar',\n        'text/html': '<em>foo bar</em>',\n        'my-app-custom-type': JSON.stringify({\n          message: 'foo bar',\n          style: 'italic'\n        })\n      }];\n    }\n  });\n\n  return (\n    <div {...dragProps} role=\"button\" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n      Drag me\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox and Layout Components in React Spectrum (JSX)\nDESCRIPTION: This snippet demonstrates how to import the Checkbox, CheckboxGroup, and Flex components from the @react-spectrum/checkbox and @react-spectrum/layout packages for use within React Spectrum applications. These are foundational dependencies for building forms and layout structures with consistent Spectrum design principles. All subsequent examples rely on the correct import of these modules.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Checkbox, CheckboxGroup} from '@react-spectrum/checkbox';\\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Testing Menu Interactions with MenuTester in React Spectrum\nDESCRIPTION: This snippet demonstrates how to use the MenuTester utility from @react-spectrum/test-utils to test menu interactions in a React component. It shows opening a menu, checking submenu triggers, opening a submenu, and selecting an option from the submenu. The test verifies that menus open and close as expected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/MenuTrigger.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Menu.test.ts\nimport {render} from '@testing-library/react';\nimport {theme} from '@react-spectrum/theme-default';\nimport {User} from '@react-spectrum/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// Other setup, be sure to check out the suggested mocks mentioned above in https://react-spectrum.adobe.com/react-spectrum/MenuTrigger.html#testing\n\nit('Menu can open its submenu via keyboard', async function () {\n  // Render your test component/app and initialize the menu tester\n  let {getByTestId} = render(\n    <Provider theme={defaultTheme}>\n      <MenuTrigger>\n        <Button data-testid=\"test-menutrigger\">Menu trigger</Button>\n        ...\n      </MenuTrigger>\n    </Provider>\n  );\n  let menuTester = testUtilUser.createTester('Menu', {root: getByTestId('test-menutrigger'), interactionType: 'keyboard'});\n\n  await menuTester.open();\n  expect(menuTester.menu).toBeInTheDocument();\n  let submenuTriggers = menuTester.submenuTriggers;\n  expect(submenuTriggers).toHaveLength(1);\n\n  let submenuTester = await menuTester.openSubmenu({submenuTrigger: 'Share…'});\n  expect(submenuTester.menu).toBeInTheDocument();\n\n  await submenuTester.selectOption({option: submenuTester.options()[0]});\n  expect(submenuTester.menu).not.toBeInTheDocument();\n  expect(menuTester.menu).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Composing a ColorWheel with Default Structure (React Spectrum, TSX)\nDESCRIPTION: Showcases the default structure for a ColorWheel instance using React Aria components, displaying an unconfigured ColorWheel with nested ColorWheelTrack and ColorThumb children. This baseline example is useful for rapid prototyping before adding props or state logic. No external dependencies aside from the listed React Aria packages are needed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorWheel, ColorWheelTrack, ColorThumb} from 'react-aria-components';\\n\\n<ColorWheel>\\n  <ColorWheelTrack />\\n  <ColorThumb />\\n</ColorWheel>\\n\n```\n\n----------------------------------------\n\nTITLE: Styling ColorWheel with Default CSS Class\nDESCRIPTION: This CSS snippet demonstrates how to target and style the ColorWheel component using its default React Aria CSS class name, `react-aria-ColorWheel`. This is the standard way to apply custom styles if not providing a specific `className` prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorWheel {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Checkbox Component with React Aria\nDESCRIPTION: Implementation of a controlled checkbox component where the selection state is managed externally. The component displays different text based on the checkbox state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckbox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelection] = React.useState(false);\n\n  return (\n    <>\n      <Checkbox isSelected={selected} onChange={setSelection}>\n        Subscribe\n      </Checkbox>\n      <p>{`You are ${selected ? 'subscribed' : 'unsubscribed'}`}</p>\n    </>\n  );\n }\n```\n\n----------------------------------------\n\nTITLE: Controlling the State of a Switch Component in TSX\nDESCRIPTION: This example shows how to create a controlled `Switch` component. The `isSelected` prop binds the switch's state to a React state variable (`selected`), and the `onChange` prop updates this state variable when the user interacts with the switch. This allows the parent component to manage the switch's state directly.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/switch/docs/useSwitch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [selected, setSelected] = React.useState(false);\n\n  return (\n    <>\n      <Switch onChange={setSelected}>Low power mode</Switch>\n      <p>{selected ? 'Low' : 'High'} power mode active.</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Link with External URL\nDESCRIPTION: Example showing Link component usage with Adobe.com URL\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/link/docs/Link.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Link href=\"https://adobe.com\" target=\"_blank\">Adobe.com</Link>\n```\n\n----------------------------------------\n\nTITLE: Basic DisclosureGroup Implementation in React\nDESCRIPTION: Demonstrates a basic implementation of a DisclosureGroup with two Disclosure components, each containing a button trigger and content panel.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DisclosureGroup, Disclosure, Button, DisclosurePanel, Heading} from 'react-aria-components';\n\n<DisclosureGroup defaultExpandedKeys={['personal']}>\n  <Disclosure id=\"personal\">\n    <Heading>\n      <Button slot=\"trigger\">\n        <svg viewBox=\"0 0 24 24\">\n          <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n        </svg>\n        Personal Information\n      </Button>\n    </Heading>\n    <DisclosurePanel>\n      <p>Personal information form here.</p>\n    </DisclosurePanel>\n  </Disclosure>\n  <Disclosure id=\"billing\">\n    <Heading>\n      <Button slot=\"trigger\">\n        <svg viewBox=\"0 0 24 24\">\n          <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n        </svg>\n        Billing Address\n      </Button>\n    </Heading>\n    <DisclosurePanel>\n      <p>Billing address form here.</p>\n    </DisclosurePanel>\n  </Disclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Disclosure Components with CSS\nDESCRIPTION: CSS styles for customizing the appearance of Disclosure components, including rotation animations for the disclosure arrow.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Disclosure.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Disclosure {\n  .react-aria-Button[slot=trigger] {\n    background: none;\n    border: none;\n    box-shadow: none;\n    font-weight: bold;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    svg {\n      rotate: 0deg;\n      transition: rotate 200ms;\n      width: 12px;\n      height: 12px;\n      fill: none;\n      stroke: currentColor;\n      stroke-width: 3px;\n    }\n  }\n\n  &[data-expanded] .react-aria-Button[slot=trigger] svg {\n    rotate: 90deg;\n  }\n}\n\n.react-aria-DisclosurePanel {\n  margin-left: 32px;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Locale to React Spectrum Provider (TypeScript/TSX)\nDESCRIPTION: Demonstrates how to wrap a React app in the React Spectrum Provider, explicitly setting the locale whenever using SSR. Ensures UI language consistency between server and client, which may use headers, settings, or locale-specific URLs for selection. Requires '@adobe/react-spectrum' and a locale string (e.g., 'en-US'); outputs a provider-wrapped React subtree.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider, defaultTheme} from '@adobe/react-spectrum';\n\nfunction App() {\n  return (\n    <Provider theme={defaultTheme} locale={yourLocaleHere}>\n      {/* your app here */}\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling SearchAutocomplete as Required with Text Indicator in TSX\nDESCRIPTION: Shows labeling a required `SearchAutocomplete` field using `isRequired` and appending \"(required)\" text to the label by setting `necessityIndicator=\"label\"`. The label is \"Favorite Animal\".\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Favorite Animal\" isRequired necessityIndicator=\"label\">\n  <Item>Red Panda</Item>\n  <Item>Cat</Item>\n  <Item>Dog</Item>\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Importing Package Metadata in JavaScript/JSX\nDESCRIPTION: Imports the contents of the 'package.json' file from the '@react-stately/table' package. This metadata, stored in the `packageData` variable, is likely used by the `HeaderInfo` component to display package information like name and version.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport packageData from '@react-stately/table/package.json';\n```\n\n----------------------------------------\n\nTITLE: Error Variant AlertDialog in React Spectrum\nDESCRIPTION: Example of an AlertDialog with the error variant, which is used to display error messages to the user.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Login</ActionButton>\n  <AlertDialog\n    variant=\"error\"\n    title=\"Unable to connect\"\n    primaryActionLabel=\"Retry\"\n    cancelLabel=\"Cancel\">\n    Something went wrong while connecting to the server.\n    Please try again in a couple minutes.\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Converting ZonedDateTime to Absolute UTC String - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates using the toAbsoluteString method on a ZonedDateTime object to generate a UTC (Z) representation, useful for exact timestamps. Requires a ZonedDateTime instance obtained via parsing or construction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\ndate.toAbsoluteString(); // '2022-02-03T20:24:45.000Z'\n```\n\n----------------------------------------\n\nTITLE: StatusLight Component with Different Variants\nDESCRIPTION: Example showing StatusLight components with different variants to indicate status. One uses semantic color (positive) and the other uses a label color (yellow).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/statuslight/docs/StatusLight.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<StatusLight variant=\"positive\">Semantic color</StatusLight>\n<StatusLight variant=\"yellow\">Label color</StatusLight>\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Layout for useSingleSelectListState (JSX)\nDESCRIPTION: This JSX code defines the structure and content of the documentation page for the useSingleSelectListState hook. It includes a page description, header information referencing the package data, and renders API and type interface documentation using components from @react-spectrum/docs. This relies on properties within the 'docs' object which contains API metadata, and uses TypeContext to provide type link data contextually.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/list/docs/useSingleSelectListState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<PageDescription>{docs.exports.useSingleSelectListState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={[\\'useSingleSelectListState\\']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useSingleSelectListState} links={docs.links} />\n\n## Interface\n\n<TypeContext.Provider value={docs.links}>\n  <InterfaceType properties={docs.links[docs.exports.useSingleSelectListState.return.base.id].properties} />\n</TypeContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Checkbox Based on Selected State (CSS)\nDESCRIPTION: This CSS example illustrates how to style a React Aria `Checkbox` specifically when it is selected by targeting the `data-selected` attribute using the selector `.react-aria-Checkbox[data-selected]`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Checkbox[data-selected] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Selection Toggle Button Group\nDESCRIPTION: Implementation of a controlled toggle button group where the selection state is managed by React state. Shows how to use the selectedKeys and onSelectionChange props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButtonGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from 'react-stately';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState(new Set<Key>(['bold']));\n\n  return (\n    <>\n      <ToggleButtonGroup selectionMode=\"multiple\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <ToggleButton id=\"bold\">Bold</ToggleButton>\n        <ToggleButton id=\"italic\">Italic</ToggleButton>\n        <ToggleButton id=\"underline\">Underline</ToggleButton>\n      </ToggleButtonGroup>\n      <p>Current selections (controlled): {[...selected].join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing React Aria Checkbox via Context Provider (TSX)\nDESCRIPTION: This TSX snippet illustrates advanced customization by creating a `CheckboxDescription` component. It uses `CheckboxContext.Provider` to pass down an `aria-describedby` prop, linking a description element (identified by `useId`) to the child `Checkbox` for improved accessibility. Requires `CheckboxContext`, `useId` from `react-aria` and `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CheckboxContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface CheckboxDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction CheckboxDescription({children, description}: CheckboxDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <CheckboxContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </CheckboxContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<MyCheckboxGroup label=\"Email settings\" defaultValue={['newsletter', 'deals', 'notifications']}>\n  <CheckboxDescription description=\"Receive our newsletter once per week.\">\n    <MyCheckbox value=\"newsletter\">Newsletter</MyCheckbox>\n  </CheckboxDescription>\n  <CheckboxDescription description=\"The best deals and sales for members.\">\n    <MyCheckbox value=\"deals\">Deals</MyCheckbox>\n  </CheckboxDescription>\n  <CheckboxDescription description=\"Notifications about your orders.\">\n    <MyCheckbox value=\"notifications\">Notifications</MyCheckbox>\n  </CheckboxDescription>\n</MyCheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Disabling and Styling NumberField Components - React Spectrum - TypeScript and CSS\nDESCRIPTION: Configures NumberField as a read-only field by passing isDisabled, which blocks user edits. The corresponding CSS stylizes disabled inputs and buttons using data-disabled attribute selectors to update color and border appearance. Ensures visual consistency for disabled states within form UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<MyNumberField label=\"Disabled\" isDisabled value={25} />\n```\n\n----------------------------------------\n\nTITLE: Styling Popover by Data Attribute (Placement State) in React Spectrum with CSS\nDESCRIPTION: Shows how to apply CSS styles conditionally based on the placement of the Popover via the data-placement attribute, which is provided out-of-the-box by React Spectrum. Input: element in .react-aria-Popover state; Output: targeted style for specific placement.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-placement=left] {\\n  /* ... */\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Responsive DimensionValue Type in React Spectrum v3\nDESCRIPTION: Shows the type definition for responsive dimension values used in various style props in React Spectrum v3, which are no longer available in Spectrum 2.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/s2/api-diff.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nResponsive<DimensionValue>\n```\n\n----------------------------------------\n\nTITLE: Styling Horizontal and Grid ListBox with CSS\nDESCRIPTION: CSS for styling horizontal and grid layouts in ListBox components, including item layouts, selection indicators, and focus states. Supports both horizontal orientation and grid layouts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox[data-orientation=horizontal],\n.react-aria-ListBox[data-layout=grid] {\n  flex-direction: row;\n  width: fit-content;\n  max-width: 100%;\n  padding: 4px;\n\n  .react-aria-ListBoxItem {\n    position: relative;\n    margin: 0;\n    padding: 4px;\n\n    & img {\n      object-fit: cover;\n      aspect-ratio: 1/1;\n      max-width: 150px;\n      margin-bottom: 4px;\n      border-radius: 4px;\n    }\n\n    &[data-selected] {\n      background: none;\n      color: inherit;\n\n      &:after {\n        content: '✓';\n        content: '✓' / '';\n        alt: ' ';\n        position: absolute;\n        top: 8px;\n        right: 8px;\n        background: var(--highlight-background);\n        border: 2px solid var(--highlight-foreground);\n        color: var(--highlight-foreground);\n        width: 22px;\n        height: 22px;\n        border-radius: 22px;\n        box-sizing: border-box;\n        font-size: 14px;\n        line-height: 1em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 0 8px rgb(0 0 0 / .5);\n      }\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -2px;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Date Value Validation in React Aria DateField (TSX)\nDESCRIPTION: This snippet demonstrates using the `minValue` prop on a `DateField` (represented as `MyDateField`) within a React Aria `Form`. It restricts the acceptable date range, ensuring the user can only select dates from today onwards, using `today(getLocalTimeZone())` from `@internationalized/date`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<Form>\n  <MyDateField\n    label=\"Appointment date\"\n    /*- begin highlight -*/\n    minValue={today(getLocalTimeZone())}\n    /*- end highlight -*/\n    defaultValue={parseDate('2022-02-03')} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Converting ZonedDateTime to CalendarDateTime - React Spectrum - TypeScript\nDESCRIPTION: Explains how to convert a ZonedDateTime to a CalendarDateTime (date and time without a time zone) using toCalendarDateTime from @internationalized/date. Needs import of toCalendarDateTime, parses a ZonedDateTime string. Outputs a string like '2022-02-03T09:45:00'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toCalendarDateTime} from '@internationalized/date';\n\nlet date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\ntoCalendarDateTime(date); // 2022-02-03T09:45:00\n```\n\n----------------------------------------\n\nTITLE: Picker with HTML Form Integration\nDESCRIPTION: Example showing how to integrate Picker with HTML forms using the name prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker\n  label=\"Favorite Animal\"\n  name=\"favoriteAnimalId\"\n>\n  <Item key=\"panda\">Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Styling Collection Drop Target (css)\nDESCRIPTION: This CSS rule targets a React Aria GridList (`.react-aria-GridList`) when it is an active drop target (indicated by the `[data-drop-target]` attribute). It applies an outline and a background overlay to visually indicate that the user can drop items onto the list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-GridList[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  outline-offset: -1px;\n  background: var(--highlight-overlay);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Radio Group with useRadioGroupState in React (JSX)\nDESCRIPTION: This JSX snippet demonstrates creating a simple `RadioGroup` component using the `useRadioGroupState` hook from `@react-stately/radio`. The hook manages the state, including the selected value and the group's name. The component renders standard HTML radio inputs, linking their `checked` status and `onChange` handlers to the state provided by the hook. It also shows how to instantiate the `RadioGroup` with a `defaultValue` and an `onChange` callback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-stately/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useRadioGroupState} from '@react-stately/radio';\n\nfunction RadioGroup(props) {\n  let state = useRadioGroupState(props);\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"radio\"\n          name={state.name}\n          checked={state.selectedValue === 'dogs'}\n          onChange={() => state.setSelectedValue('dogs')}\n        />\n        Dogs\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          name={state.name}\n          checked={state.selectedValue === 'cats'}\n          onChange={() => state.setSelectedValue('cats')}\n        />\n        Cats\n      </label>\n    </>\n  );\n}\n\n<RadioGroup\n  defaultValue=\"dogs\"\n  onChange={(value) => alert(`Selected ${value}`)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Components in JSX\nDESCRIPTION: Imports `BlogPostLayout` and `Hero` components from the '@react-spectrum/docs' package and sets `BlogPostLayout` as the default export for the module. This setup defines the primary layout structure for the blog post page displaying the release notes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-05-27.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* Copyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Basic ListBox Implementation in React Spectrum\nDESCRIPTION: A simple example of the ListBox component with static items representing alignment options. The ListBox has a fixed width and an accessibility label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox width=\"size-2400\" aria-label=\"Alignment\">\n  <Item>Left</Item>\n  <Item>Middle</Item>\n  <Item>Right</Item>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic RangeCalendar - React Spectrum - TypeScript/JSX\nDESCRIPTION: Shows a minimal usage example of the RangeCalendar component with an accessible aria-label. This snippet renders a RangeCalendar for users to select a date range, outputting no selection by default. Only the aria-label prop is required for accessibility. This example is self-contained and requires @react-spectrum/calendar and React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar aria-label=\\\"Trip dates\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining RadioGroup and Radio Interfaces in React Spectrum (TypeScript)\nDESCRIPTION: This snippet declares two TypeScript interfaces, RadioGroup and Radio, that combine common prop contracts for React Spectrum's radio button components. RadioGroup specifies layout, labeling, and child composition options, while Radio represents a single option's props, including value, content label, and disabled state. Requires React with TypeScript and assumes dependency on @react-stately/radio, @react-aria/radio, @react-spectrum/radio, as well as types/interfaces such as ValueBase, InputBase, Labelable, DOMProps, StyleProps, and FocusableProps, likely from React Spectrum. Inputs are props as described; outputs are typed objects—these ensure type safety and code completion for component implementers. Limitations: Specific types assumed to be imported or globally available.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Radio.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RadioGroup extends ValueBase<string>, InputBase, Labelable, DOMProps, StyleProps {\n  orientation?: 'horizontal' | 'vertical', // default vertical\n  labelPosition?: 'side' | 'bottom', // default side\n  children: ReactElement<Radio> | ReactElement<Radio>[],\n  name?: string, // HTML form name. Not displayed.\n  isEmphasized?: boolean\n}\n\ninterface Radio extends FocusableProps, DOMProps, StyleProps {\n  value: string, // HTML form value. Not displayed.\n  children?: ReactNode, // pass in children to render label\n  'aria-label'?: string, // if no children, aria-label is required\n  isDisabled?: boolean\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing View and TextField Components in JSX\nDESCRIPTION: This snippet imports the `View` component from `@react-spectrum/view` and the `TextField` component from `@react-spectrum/textfield`. These imports are necessary to use these components within a React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/view/docs/View.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {View} from '@react-spectrum/view';\nimport {TextField} from '@react-spectrum/textfield';\n```\n\n----------------------------------------\n\nTITLE: Styling ColorThumb Based on Data Attributes (CSS)\nDESCRIPTION: This CSS snippet illustrates how to style the `ColorThumb` component based on its interaction states using data attributes. It targets the `data-dragging` and `data-focused` attributes to apply specific styles when the thumb is being dragged or has focus, respectively. This uses the default `react-aria-ColorThumb` class selector.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorThumb[data-dragging] {\n  /* ... */\n}\n\n.react-aria-ColorThumb[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata using YAML Frontmatter\nDESCRIPTION: Specifies metadata for the blog post using YAML frontmatter syntax within a Markdown/MDX file. It includes keywords for searchability, a brief description, publication date, author information, and a featured image path, used by the build system or content management system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkeywords: [react aria, react spectrum, react, interactions, button, keyboard, focus, web development, javascript, css]\ndescription: This is the last post in our three part series on building a button component. In the [first post](https://react-spectrum.adobe.com/blog/building-a-button-part-1.html), we covered how React Spectrum and React Aria implement adaptive press events across mouse, touch, keyboard, and screen readers. In the [second post](https://react-spectrum.adobe.com/blog/building-a-button-part-2.html), we covered hover interactions. Today, we’ll cover keyboard focus behavior.\ndate: 2020-09-09\nauthor: '[Devon Govett](https://x.com/devongovett)'\nimage: ../assets/ReactAria_976x445_2x.png\n---\n```\n\n----------------------------------------\n\nTITLE: ListBox with Static Sections in React Spectrum\nDESCRIPTION: Shows how to group ListBox items into sections using the Section component. Each section has a title and contains multiple Item components with unique keys.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox width=\"size-2400\" aria-label=\"Pick your favorite\" selectionMode=\"single\">\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">Aardvark</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Snake\">Snake</Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">Danni</Item>\n    <Item key=\"Devon\">Devon</Item>\n    <Item key=\"Ross\">Ross</Item>\n  </Section>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Handling Basic ActionGroup Actions (TSX)\nDESCRIPTION: Demonstrates a basic ActionGroup with three items ('Add', 'Delete', 'Edit'). It uses the `onAction` prop to capture the key of the pressed item and updates the component's state using `React.useState` to display the last action triggered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [action, setAction] = React.useState(null);\n\n  return (\n    <>\n      <ActionGroup onAction={setAction}>\n        <Item key=\"add\">Add</Item>\n        <Item key=\"delete\">Delete</Item>\n        <Item key=\"edit\">Edit</Item>\n      </ActionGroup>\n      <p>Action: {action}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ContextualHelp Popover Placement in React\nDESCRIPTION: Shows how to customize the position of the ContextualHelp popover using the `placement` prop. This example sets the placement to 'top start', causing the popover to appear above and to the left of the trigger element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/contextualhelp/docs/ContextualHelp.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextualHelp variant=\"info\" placement=\"top start\">\n  <Heading>Placement</Heading>\n  <Content><Text>The placement of this contextual help popover has been customized to use top start.</Text></Content>\n</ContextualHelp>\n```\n\n----------------------------------------\n\nTITLE: Basic FileTrigger Component Import\nDESCRIPTION: Shows the basic import and structure for using FileTrigger with a button component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/filetrigger/docs/FileTrigger.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FileTrigger, Button} from '@adobe/react-spectrum';\n\n<FileTrigger>\n  <Button />\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: DateField Event Handling with Formatting\nDESCRIPTION: Shows how to handle onChange events and format dates using local time zone and date formatter\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <DateField label=\"Birth date\" value={date} onChange={setDate} />\n      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())) : '--'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Items in Picker (React/TypeScript)\nDESCRIPTION: This example demonstrates how to add complex items with icons, avatars, and descriptions to the Picker component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Options\">\n  <Section title=\"Permission\">\n    <Item textValue=\"Read\">\n      <Book size=\"S\" />\n      <Text>Read</Text>\n      <Text slot=\"description\">Read Only</Text>\n    </Item>\n    <Item textValue=\"Write\">\n      <Draw size=\"S\" />\n      <Text>Write</Text>\n      <Text slot=\"description\">Read and Write Only</Text>\n    </Item>\n    <Item textValue=\"Admin\">\n      <BulkEditUsers size=\"S\" />\n      <Text>Admin</Text>\n      <Text slot=\"description\">Full access</Text>\n    </Item>\n  </Section>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Setting Container Padding for Popover Dialogs in React Spectrum\nDESCRIPTION: This example shows how to use the 'containerPadding' prop to control the minimum padding between the Popover Dialog and the container, affecting positioning and flipping behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"popover\" placement=\"top\" containerPadding={50}>\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>The Heading</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a popover.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Error Messages in React Aria FieldError\nDESCRIPTION: Demonstrates providing a render prop function to the `FieldError` component to customize the displayed error message based on the `validationDetails` object, which includes the `ValidityState`. This allows for more specific and user-friendly error feedback tailored to the specific validation rule (e.g., `valueMissing`) compared to default browser messages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Form>\n  <TextField name=\"name\" isRequired>\n    <Label>Name</Label>\n    <Input />\n    {/*- begin highlight -*/}\n    <FieldError>\n      {({validationDetails}) => (\n        validationDetails.valueMissing ? 'Please enter a name.' : ''\n      )}\n    </FieldError>\n    {/*- end highlight -*/}\n  </TextField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Selection in React Spectrum Table\nDESCRIPTION: This snippet shows how to implement controlled selection in a React Spectrum table. It demonstrates the use of selectedKeys and onSelectionChange props to manage selection state programmatically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-stately';\n\nfunction PokemonTable(props) {\n  let columns = [\n    {name: 'Name', uid: 'name'},\n    {name: 'Type', uid: 'type'},\n    {name: 'Level', uid: 'level'}\n  ];\n\n  let rows = [\n    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));\n\n  return (\n    <Table aria-label=\"Table with controlled selection\" selectionMode=\"multiple\" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys} {...props}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column key={column.uid}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={rows}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Button Component with React Aria\nDESCRIPTION: A reusable Button component built with the useButton hook from React Aria. It handles focus state management and provides proper accessibility properties.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = useRef<HTMLButtonElement | null>(null);\n  let {focusProps, isFocusVisible} = useFocusRing();\n  let {buttonProps} = useButton(props, ref);\n  return <button {...mergeProps(buttonProps, focusProps)} ref={ref} className={`${props.className} ${isFocusVisible ? 'focus' : ''}`}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AXE Accessibility Rules for Testing - TypeScript (TSX)\nDESCRIPTION: This TypeScript (TSX) snippet demonstrates how to define a custom rule set for the AXE accessibility testing framework. It specifies a rule to ignore elements marked with 'data-a11y-ignore=\"aria-hidden-focus\"', helping to suppress known false positives related to focus management. Used in automated test runners or Storybook accessibility configuration, it expects integration with AXE and proper test environment setup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/accessibility.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  rules: [\n    {\n      id: 'aria-hidden-focus',\n      selector: 'body *:not([data-a11y-ignore=\"aria-hidden-focus\"])'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Color Variations\nDESCRIPTION: Demonstration of different semantic color options available for icons including negative, notice, positive, and informative.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/custom-icons.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\">\n  <CustomIcon aria-label=\"Default Star\" />\n  <CustomIcon aria-label=\"Negative Star\" color=\"negative\" />\n  <CustomIcon aria-label=\"Notification Star\" color=\"notice\" />\n  <CustomIcon aria-label=\"Positive Star\" color=\"positive\" />\n  <CustomIcon aria-label=\"Informative Star\" color=\"informative\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Draggable Component Styling\nDESCRIPTION: CSS styles for the Draggable component including hover and active states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dropzone/docs/DropZone.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.draggable {\n  display: inline-block;\n  vertical-align: top;\n  border: 1px solid gray;\n  padding: 10px;\n  margin-right: 20px;\n  margin-bottom: 20px;\n  border-radius: 4px;\n  height: fit-content;\n}\n\n.draggable.dragging {\n  opacity: 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Different Drop Operations in onItemDrop Event\nDESCRIPTION: This snippet shows how to handle different drop operations (move, copy, link) in an onItemDrop event handler. It processes each operation type differently by calling appropriate methods on a fictional MyAppFileService.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nlet onItemDrop = async (e) => {\n  let data = JSON.parse(await e.items[0].getText('my-app-file'));\n  /*- begin highlight -*/\n  switch (e.dropOperation) {\n    case 'move':\n      MyAppFileService.move(data.filePath, props.filePath);\n      break;\n    case 'copy':\n      MyAppFileService.copy(data.filePath, props.filePath);\n      break;\n    case 'link':\n      MyAppFileService.link(data.filePath, props.filePath);\n      break;\n  }\n  /*- end highlight -*/\n};\n```\n\n----------------------------------------\n\nTITLE: Nested Property Groups in Provider\nDESCRIPTION: This complex example demonstrates nested Providers with different property groups and conditional disabling based on user input.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/provider/docs/Provider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Register() {\n  let [email, setEmail] = React.useState('');\n\n  return (\n    <Flex direction=\"column\" gap=\"size-100\" alignItems=\"start\">\n      <Provider isQuiet>\n        <TextField\n          label=\"Email\"\n          value={email}\n          onChange={setEmail} />\n        <Provider isDisabled={email.length === 0}>\n          <Picker label=\"Favorite color\">\n            <Item key=\"magenta\">Magenta</Item>\n            <Item key=\"indigo\">Indigo</Item>\n            <Item key=\"chartreuse\">Chartreuse</Item>\n          </Picker>\n          <Button variant=\"primary\">Submit</Button>\n        </Provider>\n      </Provider>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Tailwind in React Aria Tabs\nDESCRIPTION: Demonstrates how to use a function to dynamically apply Tailwind CSS classes based on the component's state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Settings\n</Tab>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Tags in TagGroup with React Spectrum\nDESCRIPTION: Example showing how to use the disabledKeys prop in TagGroup to mark specific items as disabled based on their keys. Disabled items cannot be focused, selected, or navigated via keyboard.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tag/docs/useTagGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup label=\"Sandwich contents\" selectionMode=\"multiple\" disabledKeys={['tuna']}>\n  <Item key=\"lettuce\">Lettuce</Item>\n  <Item key=\"tomato\">Tomato</Item>\n  <Item key=\"cheese\">Cheese</Item>\n  <Item key=\"tuna\">Tuna Salad</Item>\n  <Item key=\"egg\">Egg Salad</Item>\n  <Item key=\"ham\">Ham</Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to DateField\nDESCRIPTION: This example shows how to add a ContextualHelp component to provide additional information about a DateField.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<DateField\n  label=\"Appointment date\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Appointment changes</Heading>\n      <Content>Your appointment date cannot be changed once it is scheduled.</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic ColorField React Spectrum TypeScript\nDESCRIPTION: Renders a standalone ColorField with a label of 'Primary Color'. This demonstrates the default, uncontrolled usage of the ColorField component. The label is shown above the field by default. No additional dependencies are required beyond React Spectrum and its peer dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorField label=\\\"Primary Color\\\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting RangeSlider Values in React\nDESCRIPTION: This example shows how to format the RangeSlider values using the formatOptions prop, which uses Intl.NumberFormat.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeSlider\n  label=\"Price range\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  defaultValue={{start: 75, end: 100}} />\n```\n\n----------------------------------------\n\nTITLE: Targeting Select Component via CSS ClassName - CSS\nDESCRIPTION: Styles the Select component using the built-in react-aria-Select CSS class. No dependencies are required beyond React Aria. The selector allows for global customization of all Select instances.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Select {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Toast Region in React Aria Components\nDESCRIPTION: Defines a custom ToastRegion component using React Aria Components. It creates a global ToastQueue and renders Toast components based on the queue content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/PortalProvider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {UNSTABLE_ToastRegion as ToastRegion, UNSTABLE_Toast as Toast, UNSTABLE_ToastQueue as ToastQueue, UNSTABLE_ToastContent as ToastContent, Button, Text} from 'react-aria-components';\n\n\n// Define the type for your toast content.\ninterface MyToastContent {\n  title: string,\n  description?: string\n}\n\n// Create a global ToastQueue.\nconst queue = new ToastQueue<MyToastContent>();\n\nfunction MyToastRegion() {\n  return (\n    <ToastRegion queue={queue}>\n      {({toast}) => (\n        <Toast toast={toast}>\n          <ToastContent>\n            <Text slot=\"title\">{toast.content.title}</Text>\n            <Text slot=\"description\">{toast.content.description}</Text>\n          </ToastContent>\n          <Button slot=\"close\">x</Button>\n        </Toast>\n      )}\n    </ToastRegion>\n\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Width on ColorField React Spectrum TypeScript\nDESCRIPTION: Renders a ColorField with explicit width and maxWidth set, useful for controlling layout and responsiveness. Ensures the input does not exceed the allowed width, improving consistency across different screen sizes. No extra dependencies beyond React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorField label=\\\"Primary Color\\\" width=\\\"size-3600\\\" maxWidth=\\\"100%\\\" />\n```\n\n----------------------------------------\n\nTITLE: Using the StatusLight Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'StatusLight' component. It renders a small visual indicator (light) to display the status or category of an entity, often using color coding. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_50\n\nLANGUAGE: jsx\nCODE:\n```\n<StatusLight />\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Actions in React Spectrum ListView\nDESCRIPTION: This example demonstrates how to implement row actions in a ListView using the onAction prop. It shows both checkbox and highlight selection styles with row actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\"size-300\">\n  <PokemonList onAction={key => alert(`Opening item ${key}...`)} aria-label=\"Checkbox selection ListView with row actions\" width=\"size-2400\" />\n  <PokemonList selectionStyle=\"highlight\" onAction={key => alert(`Opening item ${key}...`)} aria-label=\"Highlight selection ListView with row actions\" width=\"size-2400\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal LocalizedStringDictionary in React Aria (TSX)\nDESCRIPTION: Demonstrates how to create a `LocalizedStringDictionary` containing only the strings for specified React Aria components (e.g., `@react-aria/datepicker`) using `createLocalizedStringDictionary` from `react-aria-components/i18n`. This dictionary is used with `LocalizedStringProvider` for advanced bundle size optimization by including only necessary localization data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {createLocalizedStringDictionary} from 'react-aria-components/i18n';\n\nconst dictionary = createLocalizedStringDictionary(['@react-aria/datepicker']);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Label Component for CheckboxGroup in React\nDESCRIPTION: This snippet demonstrates how to create a custom label component that is compatible with React Aria Components' CheckboxGroup. It uses the useContextProps hook to merge local props and ref with those provided via context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, LabelContext);\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: DateField with Min/Max Value Validation\nDESCRIPTION: Shows how to implement date validation using minValue constraint\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<DateField\n  label=\"Appointment date\"\n  minValue={today(getLocalTimeZone())}\n  defaultValue={parseDate('2022-02-03')} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Checkbox for React Aria Table\nDESCRIPTION: Demonstrates how to create a custom Checkbox component that is compatible with React Aria Components by consuming the CheckboxContext.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_54\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\nimport {CheckboxContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCustomCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Forcing 24-Hour Cycle in React Spectrum DateField in TSX\nDESCRIPTION: Shows how to override the default locale-based hour format (12 or 24 hours) using the `hourCycle` prop. Setting `hourCycle={24}` forces the `DateField` to display time in a 24-hour format. The `granularity` prop must include time (e.g., 'minute') for this to be applicable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<DateField\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n```\n\n----------------------------------------\n\nTITLE: Disabled Breadcrumbs Implementation\nDESCRIPTION: Example showing how to disable breadcrumbs navigation with the isDisabled prop. When disabled, navigation is not available and links are marked as aria-disabled for assistive technologies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumbs isDisabled>\n  <Breadcrumb><Link href=\"/\">Home</Link></Breadcrumb>\n  <Breadcrumb><Link href=\"/react-aria/\">React Aria</Link></Breadcrumb>\n  <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Using I18nProvider Component in TSX\nDESCRIPTION: This example demonstrates how to wrap an application with the I18nProvider component to set a custom locale. The locale is set to 'fr-FR' (French).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/I18nProvider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<I18nProvider locale=\"fr-FR\">\n  <YourApp />\n</I18nProvider>\n```\n\n----------------------------------------\n\nTITLE: CSS for Disabled Link State\nDESCRIPTION: CSS styling for the disabled state of a Link component, changing cursor and text color.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Link {\n  &[data-disabled] {\n    cursor: default;\n    color: var(--text-color-disabled);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Classes Based on State in React Aria DateSegment (JSX)\nDESCRIPTION: This JSX snippet shows how to use a function as the value for the `className` prop on a `DateSegment`. This allows dynamically applying CSS classes (e.g., from Tailwind) based on the component's state, such as `isPlaceholder`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<DateSegment className={({isPlaceholder}) => isPlaceholder ? 'bg-gray-300' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Minimal GridList Anatomy Example - React Spectrum - TypeScript\nDESCRIPTION: Shows a concise TypeScript (TSX) example of assembling a GridList with both drag handle and selection checkbox using React Spectrum. The snippet includes importing core components and demonstrates the composition, slot assignment, and minimal configuration for extensibility. Required dependencies: 'react-aria-components'. No external state is used; this forms a conceptual template illustrating anatomy rather than production usage. Inputs are no props; default elements render as defined.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GridList, GridListItem, Checkbox, Button} from 'react-aria-components';\n\n<GridList>\n  <GridListItem>\n    <Button slot=\"drag\" />\n    <Checkbox slot=\"selection\" />\n  </GridListItem>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Creating Sectioned Menu with Static Items in React Spectrum\nDESCRIPTION: Demonstrates how to create a menu with sections using the MenuSection and Header components from React Spectrum. It shows static item grouping with headers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MenuSection, Header} from 'react-aria-components';\n\n<MyMenuButton label=\"Actions\">\n  <MenuSection>\n    <Header>Styles</Header>\n    <MenuItem>Bold</MenuItem>\n    <MenuItem>Underline</MenuItem>\n  </MenuSection>\n  <MenuSection>\n    <Header>Align</Header>\n    <MenuItem>Left</MenuItem>\n    <MenuItem>Middle</MenuItem>\n    <MenuItem>Right</MenuItem>\n  </MenuSection>\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Queuing Toasts from Anywhere Using Global Toast Queue\nDESCRIPTION: Shows how to add toasts to the global queue from anywhere in the application using the toastQueue.add method.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Button onPress={() => toastQueue.add('Toast is done!')}>Show toast</Button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Component using useDrag in React Aria (tsx)\nDESCRIPTION: Defines a React component `Draggable` that leverages the `useDrag` hook from `@react-aria/dnd` to make its children draggable. It also uses `useButton` from `@react-aria/button` for accessibility and `mergeProps` from `@react-aria/utils` to combine properties. The component provides data in 'text/plain' and a custom 'my-app-custom-type' format when dragged, and applies a 'dragging' class when active.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDrag} from '@react-aria/dnd';\nimport {mergeProps} from '@react-aria/utils';\nimport {useButton} from '@react-aria/button';\n\nfunction Draggable({children}) {\n  let {dragProps, dragButtonProps, isDragging} = useDrag({\n    getAllowedDropOperations: () => ['copy'],\n    getItems() {\n      return [{\n        'text/plain': children,\n        'my-app-custom-type': JSON.stringify({message: children})\n      }];\n    }\n  });\n\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton({...dragButtonProps, elementType: 'div'}, ref);\n\n  return (\n    <div {...mergeProps(dragProps, buttonProps)} ref={ref} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n      <span aria-hidden=\"true\">≡</span>{' '}\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Long Press Events in Jest Tests using TSX\nDESCRIPTION: Demonstrates simulating long press interactions, required for features like drag-and-drop or selection mode on mobile in components like ListView. It involves setting up global `PointerEvent` mocks using `installPointerEvent` from `@react-spectrum/test-utils`. The snippet shows two approaches: manually firing pointer events with `fireEvent` and advancing Jest timers, or using the simplified `triggerLongPress` utility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {fireEvent} from '@testing-library/react';\nimport {installPointerEvent, triggerLongPress} from '@react-spectrum/test-utils';\ninstallPointerEvent();\n\n// In test case\nlet button = getByRole('button');\n\n// With fireEvent and specific timing control\nfireEvent.pointerDown(el, {pointerType: 'touch'});\nact(() => jest.advanceTimersByTime(800));\nfireEvent.up(el, {pointerType: 'touch'});\n\n// With triggerLongPress\ntriggerLongPress(button);\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Rows in React Spectrum Table\nDESCRIPTION: This example demonstrates how to disable specific rows in a React Spectrum table. It uses the disabledKeys prop to prevent certain rows from being selectable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonTable selectionMode=\"multiple\" disabledKeys={[3]} />\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Menu Items with Text Slots - React Aria Components - TypeScript\nDESCRIPTION: Demonstrates a MenuButton configuration that uses special text slots (label and description) within each MenuItem for improved accessibility and visual layout. It uses React Aria's Text and Keyboard components to show action names, detailed descriptions, and associated keyboard shortcuts. Dependencies include 'react-aria-components'. Inputs are menu actions; outputs are rendered, accessible menu items with optional secondary descriptions and hotkeys.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Text, Keyboard} from 'react-aria-components';\n\n<MyMenuButton label=\"Actions\">\n  <MenuItem textValue=\"Copy\">\n    <Text slot=\"label\">Copy</Text>\n    <Text slot=\"description\">Copy the selected text</Text>\n    <Keyboard>⌘C</Keyboard>\n  </MenuItem>\n  <MenuItem textValue=\"Cut\">\n    <Text slot=\"label\">Cut</Text>\n    <Text slot=\"description\">Cut the selected text</Text>\n    <Keyboard>⌘X</Keyboard>\n  </MenuItem>\n  <MenuItem textValue=\"Paste\">\n    <Text slot=\"label\">Paste</Text>\n    <Text slot=\"description\">Paste the copied text</Text>\n    <Keyboard>⌘V</Keyboard>\n  </MenuItem>\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Checking for Weekdays and Weekends in TypeScript\nDESCRIPTION: Demonstrates the use of isWeekday and isWeekend functions to determine if a date is a weekday or weekend, considering locale-specific definitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekday, isWeekend} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 6); // a Sunday\n\nisWeekday(date, 'en-US'); // false\nisWeekday(date, 'he-IL'); // true\n\nisWeekend(date, 'en-US'); // true\nisWeekend(date, 'he-IL'); // false\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Component with usePopover in React\nDESCRIPTION: This snippet demonstrates how to create a Popover component using the usePopover hook from React Aria. It handles positioning, accessibility, and rendering of the popover content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaPopoverProps} from 'react-aria';\nimport type {OverlayTriggerState} from 'react-stately';\nimport {usePopover, Overlay, DismissButton} from '@react-aria/overlays';\n\ninterface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {\n  children: React.ReactNode,\n  state: OverlayTriggerState\n}\n\nfunction Popover({children, state, offset = 8, ...props}: PopoverProps) {\n  let popoverRef = React.useRef(null);\n  let {popoverProps, underlayProps, arrowProps, placement} = usePopover({\n    ...props,\n    offset,\n    popoverRef\n  }, state);\n\n  return (\n    <Overlay>\n      <div {...underlayProps} className=\"underlay\" />\n      <div\n        {...popoverProps}\n        ref={popoverRef}\n        className=\"popover\">\n        <svg {...arrowProps} className=\"arrow\" data-placement={placement} viewBox=\"0 0 12 12\">\n          <path d=\"M0 0 L6 6 L12 0\" />\n        </svg>\n        <DismissButton onDismiss={state.close} />\n        {children}\n        <DismissButton onDismiss={state.close} />\n      </div>\n    </Overlay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Errors with FieldError - React Spectrum - TypeScript\nDESCRIPTION: Shows custom NumberField usage within a Form, integrating FieldError to display validation messages when requirements are not met. Relies on react-aria-components for Form, FieldError, and related widgets. Highlights the use of isRequired and error slot for unified error styles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\nimport {Form, FieldError} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <NumberField name=\"width\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Width</Label>\n    <Group>\n       <Button slot=\"decrement\">-</Button>\n       <Input />\n       <Button slot=\"increment\">+</Button>\n     </Group>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n  </NumberField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Enabling Single Selection in GridList using selectionMode and defaultSelectedKeys (TypeScript)\nDESCRIPTION: This usage demonstrates enabling single row selection in a GridList by setting selectionMode to 'single' and specifying which row should be selected by default with defaultSelectedKeys. It references the ExampleList component defined in previous snippets and passes the required selectionMode and defaultSelectedKeys props. Key parameters include aria-label, selectionMode, and defaultSelectedKeys. Outputs a GridList with single selection behavior. Limitation: prerequisites include having ExampleList defined.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the example above\\n<ExampleList\\n  aria-label=\"List with single selection\"\\n  /*- begin highlight -*/\\n  selectionMode=\"single\"\\n  defaultSelectedKeys={[2]}\\n  /*- end highlight -*/\\n/>\\n\n```\n\n----------------------------------------\n\nTITLE: Using the TextArea Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'TextArea' component. It renders a text input area allowing a user to enter multiple lines of plain text using the keyboard. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\n<TextArea />\n```\n\n----------------------------------------\n\nTITLE: Form ARIA Validation Behavior in React Aria\nDESCRIPTION: Example demonstrating how to use the validationBehavior prop to configure form validation to use ARIA attributes instead of native HTML validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationBehavior=\"aria\">\n  <TextField\n    name=\"username\"\n    defaultValue=\"admin\"\n    isRequired\n    validate={value => value === 'admin' ? 'Nice try.' : null}>\n    <Label>Username</Label>\n    <Input />\n    <FieldError />\n  </TextField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefix for Tailwind Plugin (v3)\nDESCRIPTION: Example showing how to configure a prefix for all React Aria Components modifiers in the Tailwind plugin (v3).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  plugins: [\n    require('tailwindcss-react-aria-components')({prefix: 'rac'})\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a SliderDescription Component with Context\nDESCRIPTION: Example of using SliderContext to create a component that adds an accessible description to a slider, demonstrating advanced composition techniques with React Aria Components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SliderContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface SliderDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction SliderDescription({children, description}: SliderDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      <SliderContext.Provider value={{'aria-describedby': descriptionId}}>\n        {children}\n      </SliderContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<SliderDescription description=\"Keeping your display on may shorten its life.\">\n  <MySlider label=\"Turn off display after\" minValue={10} maxValue={60} defaultValue={45} formatOptions={{style: 'unit', unit: 'minute'}} />\n</SliderDescription>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Class Names to React Spectrum Slider\nDESCRIPTION: Demonstrates how to override the default className on a Slider component with your own custom class for styling purposes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Slider className=\"my-slider\">\n  {/* ... */}\n</Slider>\n```\n\n----------------------------------------\n\nTITLE: Quiet Picker (React/TypeScript)\nDESCRIPTION: This example shows how to create a quiet variant of the Picker component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Choose frequency\" isQuiet>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Creating an Implicit Grid with Auto-fit Columns in React Spectrum\nDESCRIPTION: Demonstrates how to create a responsive, auto-flowing grid layout using the repeat function with auto-fit. The grid automatically adjusts the number of columns based on available space and specified item size.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Grid.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Grid\n  columns={repeat('auto-fit', 'size-800')}\n  autoRows=\"size-800\"\n  justifyContent=\"center\"\n  gap=\"size-100\">\n  {colors.map(color =>\n    <View key={color} backgroundColor={color} />\n  )}\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Meter Value\nDESCRIPTION: Shows how to control the Meter component with the value prop, which represents the percentage of progress.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Meter\n  label=\"Storage space\"\n  value={25} />\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Drag Previews in React Spectrum ListView - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to implement a custom drag preview in a React Spectrum ListView by using the renderPreview prop via the dragAndDropHooks. It uses useListData for managing list state and useDragAndDrop for enabling drag-and-drop, passing keys and draggedKey to the renderPreview function. Dependencies include @react-spectrum/view, React, and drag-and-drop hooks; inputs include initial items in the list, output is an interactive ListView with custom previews during drag operations. The code is intended for TSX-based React apps and may require additional Spectrum components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_23\n\nLANGUAGE: TSX\nCODE:\n```\nimport {View} from '@react-spectrum/view';\\n\\nfunction CustomDragPreviewExample() {\\n  let list = useListData({\\n    initialItems: [\\n      {id: '1', type: 'file', name: 'Adobe Photoshop'},\\n      {id: '2', type: 'file', name: 'Adobe XD'},\\n      {id: '3', type: 'file', name: 'Adobe InDesign'},\\n      {id: '4', type: 'file', name: 'Adobe AfterEffects'}\\n    ]\\n  });\\n\\n  let {dragAndDropHooks} = useDragAndDrop({\\n    getItems: (keys) => [...keys].map(key => {\\n      let item = list.getItem(key);\\n      return {\\n        'custom-app-type': JSON.stringify(item),\\n        'text/plain': item.name\\n      };\\n    }),\\n    /*- begin highlight -*/\\n    renderPreview: (keys, draggedKey) => (\\n      <View backgroundColor=\\\"gray-50\\\" padding=\\\"size-100\\\" borderRadius=\\\"medium\\\" borderWidth=\\\"thin\\\" borderColor=\\\"blue-500\\\">\\n        <strong>Custom Preview</strong>\\n        <div>Keys: [{[...keys].join(', ')}]</div>\\n        <div>Dragged: {draggedKey}</div>\\n      </View>\\n    )\\n    /*- end highlight -*/\\n  });\\n\\n  return (\\n    <ListView\\n      aria-label=\\\"Draggable ListView with custom drag preview\\\"\\n      selectionMode=\\\"multiple\\\"\\n      width=\\\"size-3600\\\"\\n      height=\\\"size-2400\\\"\\n      dragAndDropHooks={dragAndDropHooks}\\n      items={list.items}>\\n      {item => (\\n        <Item textValue={item.name}>\\n          {item.name}\\n        </Item>\\n      )}\\n    </ListView>\\n  );\\n}\n```\n\nLANGUAGE: TSX\nCODE:\n```\n<CustomDragPreviewExample />\n```\n\n----------------------------------------\n\nTITLE: TimeField with Time Zone in React Spectrum\nDESCRIPTION: Example showing how to create a TimeField with a specific time zone using the parseZonedDateTime function from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<TimeField\n  label=\"Event time\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Loading State in ListBox\nDESCRIPTION: This example shows how to display a loading state in ListBox using the isLoading prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  isLoading\n  aria-label=\"Choose frequency\"\n  selectionMode=\"single\"\n  width=\"size-1200\">\n  {[]}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout and ToggleButton Components in JSX\nDESCRIPTION: This snippet imports the `Flex`, `ToggleButton`, and `View` components from their respective React Spectrum packages (`@react-spectrum/layout`, `@react-spectrum/button`, `@react-spectrum/view`). These imports make the components available for use within the documentation examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ToggleButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {ToggleButton} from '@react-spectrum/button';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Calendar Value Display Component\nDESCRIPTION: Component that displays the currently selected calendar date using CalendarStateContext\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarStateContext} from 'react-aria-components';\nimport {useDateFormatter} from 'react-aria';\n\nfunction CalendarValue() {\n  let state = React.useContext(CalendarStateContext)!;\n  let date = state.value?.toDate(getLocalTimeZone());\n  let {format} = useDateFormatter();\n  let formatted = date ? format(date) : 'None';\n  return <small>Selected date: {formatted}</small>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing I18nProvider for Server Side Rendering in React\nDESCRIPTION: Sets up the I18nProvider component with an explicit locale prop for server side rendering, and applies the locale and direction to the HTML element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider, useLocale} from 'react-aria-components';\n\nfunction App() {\n  let {locale, direction} = useLocale();\n\n  return (\n    <html lang={locale} dir={direction}>\n      {/* your app here */}\n    </html>\n  );\n}\n\n<I18nProvider locale={locale}>\n  <App />\n</I18nProvider>\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorArea with HTML Forms - React Spectrum - TypeScript/React\nDESCRIPTION: Demonstrates ColorArea form integration by setting xName and yName props, enabling the component's values to be submitted as part of a traditional HTML form. Appropriate for collecting channel values, like red and green, as numeric input. Only requires ColorArea React component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\n<ColorArea xName=\\\"red\\\" yName=\\\"green\\\" />\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorSlider with State Management\nDESCRIPTION: Illustrates how to implement a controlled ColorSlider using React state, with the color value being parsed and managed externally.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <>\n      <MyColorSlider\n        label=\"Hue (controlled)\"\n        value={value}\n        onChange={setValue}\n        channel=\"hue\" />\n      <p>Value: {value.toString('hex')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Open State Using isOpen and onOpenChange - React Spectrum - TypeScript\nDESCRIPTION: Illustrates the usage of React state hooks and isOpen/onOpenChange props on MenuButton to externally control the open/closed menu state. Input is a boolean state; output is a menu that reflects and controls this state. Dependencies include React and React Spectrum components. Limited to simple menu toggle UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <p>Menu is {open ? 'open' : 'closed'}</p>\n      <MyMenuButton\n        label=\"View\"\n        isOpen={open}\n        onOpenChange={setOpen}>\n        <MenuItem id=\"side\">Side bar</MenuItem>\n        <MenuItem id=\"options\">Page options</MenuItem>\n        <MenuItem id=\"edit\">Edit Panel</MenuItem>\n      </MyMenuButton>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Expanded Disclosure in TSX\nDESCRIPTION: This TSX example shows how to make a Disclosure component initially expanded when rendered by using the `defaultExpanded` prop. The user can still collapse it afterwards unless it's also disabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Disclosure.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Disclosure defaultExpanded>\n  <DisclosureTitle>System Requirements</DisclosureTitle>\n  <DisclosurePanel>\n    Details about system requirements here.\n  </DisclosurePanel>\n</Disclosure>\n```\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorSwatchPicker Component with Value Handling\nDESCRIPTION: Implementation of a controlled ColorSwatchPicker component with a value prop and state management using the parseColor function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 33.33%)'));\n\n  return (\n    <MyColorSwatchPicker value={color} onChange={setColor}>\n      <MyColorSwatchPickerItem color=\"#A00\" />\n      <MyColorSwatchPickerItem color=\"#f80\" />\n      <MyColorSwatchPickerItem color=\"#080\" />\n    </MyColorSwatchPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Toast and Region Styles for React Aria Components (CSS)\nDESCRIPTION: This CSS snippet provides custom styles for .react-aria-ToastRegion and .react-aria-Toast to control fixed positioning, flex layout, appearance, border radius, and accessibility outlines. It defines focus states, structured slot targeting (title, close button), and appearance for interactive elements like the close button. Dependencies include the @react-aria/example-theme, and the classes are intended to be applied to elements rendered by react-aria-components for Toast and ToastRegion. Inputs are classed DOM nodes; outputs are visually styled containers and controls for toasts in the UI. Limitations: relies on class names matching the exported structure of Toast components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ToastRegion {\n  position: fixed;\n  bottom: 16px;\n  right: 16px;\n  display: flex;\n  flex-direction: column-reverse;\n  gap: 8px;\n  border-radius: 8px;\n  outline: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid slateblue;\n    outline-offset: 2px;\n  }\n}\n\n.react-aria-Toast {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  background: slateblue;\n  color: white;\n  padding: 12px 16px;\n  border-radius: 8px;\n  outline: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid slateblue;\n    outline-offset: 2px;\n  }\n\n  .react-aria-ToastContent {\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n    min-width: 0px;\n\n    [slot=title] {\n      font-weight: bold;\n    }\n  }\n\n  .react-aria-Button[slot=close] {\n    flex: 0 0 auto;\n    background: none;\n    border: none;\n    appearance: none;\n    border-radius: 50%;\n    height: 32px;\n    width: 32px;\n    font-size: 16px;\n    border: 1px solid white;\n    color: white;\n    padding: 0;\n    outline: none;\n\n    &[data-focus-visible] {\n      box-shadow: 0 0 0 2px slateblue, 0 0 0 4px white;\n    }\n\n    &[data-pressed] {\n      background: rgba(255, 255, 255, 0.2);\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic TextField Usage in React\nDESCRIPTION: This example demonstrates the basic usage of the TextField component with a label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField label=\"Name\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Breakpoint Style Props in React Spectrum\nDESCRIPTION: This example shows how to update breakpoint-based style props from React Spectrum v3 to S2, including changes in breakpoint names and value representations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/codemods/src/s1-to-s2/UPGRADE.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- <View width={{ base: 'size-2000', L: 'size-5000' }} />\n+ <div className={style({width: {default: 160, lg: '[400px]'}) />\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorSlider with HTML Forms in React (TSX)\nDESCRIPTION: Shows how to make a `ColorSlider` integrate with native HTML forms. By providing the `name` prop (\"red\" in this case), the slider's current numeric value for the specified `channel` will be included upon form submission.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  name=\"red\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Sections in Select with Static Items\nDESCRIPTION: Example of grouping Select options into sections using ListBoxSection and Header components. This approach uses static items to create organized dropdown sections.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ListBoxSection, Header} from 'react-aria-components';\n\n<MySelect label=\"Preferred fruit or vegetable\">\n  <ListBoxSection>\n    <Header>Fruit</Header>\n    <ListBoxItem id=\"Apple\">Apple</ListBoxItem>\n    <ListBoxItem id=\"Banana\">Banana</ListBoxItem>\n    <ListBoxItem id=\"Orange\">Orange</ListBoxItem>\n    <ListBoxItem id=\"Honeydew\">Honeydew</ListBoxItem>\n    <ListBoxItem id=\"Grapes\">Grapes</ListBoxItem>\n    <ListBoxItem id=\"Watermelon\">Watermelon</ListBoxItem>\n    <ListBoxItem id=\"Cantaloupe\">Cantaloupe</ListBoxItem>\n    <ListBoxItem id=\"Pear\">Pear</ListBoxItem>\n  </ListBoxSection>\n  <ListBoxSection>\n    <Header>Vegetable</Header>\n    <ListBoxItem id=\"Cabbage\">Cabbage</ListBoxItem>\n    <ListBoxItem id=\"Broccoli\">Broccoli</ListBoxItem>\n    <ListBoxItem id=\"Carrots\">Carrots</ListBoxItem>\n    <ListBoxItem id=\"Lettuce\">Lettuce</ListBoxItem>\n    <ListBoxItem id=\"Spinach\">Spinach</ListBoxItem>\n    <ListBoxItem id=\"Bok Choy\">Bok Choy</ListBoxItem>\n    <ListBoxItem id=\"Cauliflower\">Cauliflower</ListBoxItem>\n    <ListBoxItem id=\"Potatoes\">Potatoes</ListBoxItem>\n  </ListBoxSection>\n</MySelect>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ClassName on React Spectrum TagGroup using JSX\nDESCRIPTION: Demonstrates how to replace the default `react-aria-TagGroup` class name with a custom one (`my-tag-group`). This is achieved by passing the desired class name as a string to the `className` prop on the `TagGroup` component, allowing for styling via the custom class selector.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<TagGroup className=\"my-tag-group\">\n  {/* ... */}\n</TagGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorSlider Component in React Spectrum\nDESCRIPTION: This snippet shows the implementation of a ColorSlider component using React Spectrum hooks. It controls a single color channel and can be used in conjunction with the ColorArea component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useColorSlider} from '@react-aria/color';\nimport {useColorSliderState} from '@react-stately/color';\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\nimport {useLocale} from '@react-aria/i18n';\nimport {useFocusRing} from '@react-aria/focus';\n\nfunction ColorSlider(props) {\n  let {locale} = useLocale();\n  let state = useColorSliderState({...props, locale});\n  let trackRef = React.useRef(null);\n  let inputRef = React.useRef(null);\n\n  // Default label to the channel name in the current locale\n  let label = props.label || state.value.getChannelName(props.channel, locale);\n\n  let {trackProps, thumbProps, inputProps, labelProps, outputProps} = useColorSlider({\n    ...props,\n    label,\n    trackRef,\n    inputRef\n  }, state);\n\n  let {focusProps, isFocusVisible} = useFocusRing();\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: SIZE\n      }}>\n      {/* Create a flex container for the label and output element. */}\n      <div style={{display: 'flex', alignSelf: 'stretch'}}>\n        <label {...labelProps}>{label}</label>\n        <output {...outputProps} style={{flex: '1 0 auto', textAlign: 'end'}}>\n          {state.value.formatChannelValue(props.channel, locale)}\n        </output>\n      </div>\n      {/* The track element holds the visible track line and the thumb. */}\n      <div\n        className=\"color-slider-track\"\n        {...trackProps}\n        ref={trackRef}\n        style={{\n          height: FOCUSED_THUMB_SIZE\n        }}>\n        <div className=\"color-slider-track-background\"></div>\n        <div\n          className=\"color-slider-track-color\"\n          style={{\n          ...trackProps.style\n          }}></div>\n        <div\n          className={`color-slider-thumb${isFocusVisible ? ' is-focused' : ''}`}\n          {...thumbProps}\n          style={{\n            ...thumbProps.style\n          }}>\n          <div className=\"color-slider-thumb-background\"></div>\n          <div\n            className=\"color-slider-thumb-color\"\n            style={{\n              background: state.getDisplayColor().toString('css')\n            }}></div>\n          <VisuallyHidden>\n            <input ref={inputRef} {...inputProps} {...focusProps} />\n          </VisuallyHidden>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value for React Spectrum DateField in TSX\nDESCRIPTION: Demonstrates how to use the `placeholderValue` prop in the `DateField` component to specify a default date that appears when no value is selected. It utilizes `CalendarDate` from `@internationalized/date` to set the placeholder to January 1, 1980.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {CalendarDate} from '@internationalized/date';\n\n<DateField label=\"Birth date\" placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Component with a Named Slot Button (TSX)\nDESCRIPTION: Shows using `MyCustomComponent` with a `Button` child that has `slot=\"end\"`. This button consumes the props specifically provided for the 'end' slot in the parent's `ButtonContext.Provider` (receiving `className: \"right-button\"`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCustomComponent>\n  {/* Consumes the props passed to the \"end\" slot */}\n  <Button slot=\"end\">Click me</Button>\n</MyCustomComponent>\n```\n\n----------------------------------------\n\nTITLE: Controlled DisclosureGroup with Expanded State\nDESCRIPTION: Illustrates how to implement a controlled DisclosureGroup with expandedKeys and onExpandedChange props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Key} from \"@react-types/shared\";\n\nfunction ControlledExpanded(){\n  let [expandedKeys, setExpandedKeys] = React.useState<Set<Key>>(new Set([\"system\"]));\n\n  return (\n    <>\n    <DisclosureGroup expandedKeys={expandedKeys} onExpandedChange={setExpandedKeys}>\n      <MyDisclosure id=\"system\" title=\"System Requirements\" >\n        Details about system requirements here\n      </MyDisclosure>\n      <MyDisclosure id=\"personal\" title=\"Personal Information\" >\n        Details about personal information here\n      </MyDisclosure>\n    </DisclosureGroup>\n    <div style={{ marginTop: '20px' }}>You have expanded: {expandedKeys}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Visually Styled Link as Button with React Aria Link Component (TypeScript)\nDESCRIPTION: This TypeScript example shows how to render a link that visually matches a button using the Link component from react-aria-components, applying the react-aria-Button class for consistent styles. Key parameters are href and target. Inputs are props and children content, output is a styled anchor tag. Requires react-aria-components and relevant CSS styles. The component is accessible and semantically remains a link.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Link} from 'react-aria-components';\n\n<Link className=\"react-aria-Button\" href=\"https://adobe.com/\" target=\"_blank\">\n  Adobe\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Listing Released React Spectrum Packages - Markdown\nDESCRIPTION: This Markdown code block enumerates the package release names and their versions for the React Spectrum ecosystem. It requires no dependencies and expects consumers to parse or read the listed package names and versions in bullet-point format. Inputs are package names and versions; output is a human-readable Markdown-formatted release list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-08-26.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- @adobe/react-spectrum@3.21.0\n- @react-aria/accordion@3.0.0-alpha.11\n- @react-aria/actiongroup@3.4.1\n- @react-aria/aria-modal-polyfill@3.5.3\n- @react-aria/autocomplete@3.0.0-alpha.10\n- @react-aria/breadcrumbs@3.3.1\n- @react-aria/button@3.6.1\n- @react-aria/calendar@3.0.2\n- @react-aria/checkbox@3.5.1\n- @react-aria/color@3.0.0-beta.15\n- @react-aria/combobox@3.4.1\n- @react-aria/datepicker@3.1.1\n- @react-aria/dialog@3.3.1\n- @react-aria/dnd@3.0.0-alpha.12\n- @react-aria/focus@3.8.0\n- @react-aria/grid@3.4.1\n- @react-aria/gridlist@3.0.0\n- @react-aria/i18n@3.6.0\n- @react-aria/interactions@3.11.0\n- @react-aria/label@3.4.1\n- @react-aria/landmark@3.0.0-alpha.2\n- @react-aria/link@3.3.3\n- @react-aria/listbox@3.6.1\n- @react-aria/menu@3.6.1\n- @react-aria/meter@3.3.1\n- @react-aria/numberfield@3.3.1\n- @react-aria/overlays@3.10.1\n- @react-aria/progress@3.3.1\n- @react-aria/radio@3.3.1\n- @react-aria/searchfield@3.4.1\n- @react-aria/select@3.8.1\n- @react-aria/selection@3.10.1\n- @react-aria/separator@3.2.3\n- @react-aria/slider@3.2.1\n- @react-aria/spinbutton@3.1.3\n- @react-aria/switch@3.2.3\n- @react-aria/table@3.4.1\n- @react-aria/tabs@3.3.1\n- @react-aria/tag@3.0.0-alpha.9\n- @react-aria/textfield@3.7.1\n- @react-aria/toggle@3.3.3\n- @react-aria/tooltip@3.3.1\n- @react-aria/utils@3.13.3\n- @react-aria/virtualizer@3.5.0\n- @react-aria/visually-hidden@3.4.1\n- @react-spectrum/accordion@3.0.0-alpha.12\n- @react-spectrum/actionbar@3.0.0-alpha.12\n- @react-spectrum/actiongroup@3.6.1\n- @react-spectrum/autocomplete@3.0.0-alpha.10\n- @react-spectrum/avatar@3.0.0-alpha.9\n- @react-spectrum/breadcrumbs@3.5.1\n- @react-spectrum/button@3.9.1\n- @react-spectrum/buttongroup@3.4.1\n- @react-spectrum/calendar@3.1.1\n- @react-spectrum/card@3.0.0-alpha.11\n- @react-spectrum/checkbox@3.5.1\n- @react-spectrum/color@3.0.0-beta.15\n- @react-spectrum/combobox@3.5.1\n- @react-spectrum/contextualhelp@3.2.1\n- @react-spectrum/datepicker@3.1.1\n- @react-spectrum/dialog@3.5.1\n- @react-spectrum/divider@3.4.1\n- @react-spectrum/dnd@3.0.0-alpha.6\n- @react-spectrum/form@3.4.1\n- @react-spectrum/icon@3.6.0\n- @react-spectrum/illustratedmessage@3.3.1\n- @react-spectrum/image@3.3.1\n- @react-spectrum/label@3.7.1\n- @react-spectrum/layout@3.4.1\n- @react-spectrum/link@3.4.1\n- @react-spectrum/list@3.0.0\n- @react-spectrum/listbox@3.7.1\n- @react-spectrum/menu@3.8.1\n- @react-spectrum/meter@3.3.1\n- @react-spectrum/numberfield@3.4.1\n- @react-spectrum/overlays@3.7.1\n- @react-spectrum/picker@3.7.1\n- @react-spectrum/progress@3.3.1\n- @react-spectrum/provider@3.5.1\n- @react-spectrum/radio@3.3.1\n- @react-spectrum/searchfield@3.5.1\n- @react-spectrum/searchwithin@3.0.0-alpha.10\n- @react-spectrum/slider@3.2.1\n- @react-spectrum/statuslight@3.4.1\n- @react-spectrum/switch@3.3.1\n- @react-spectrum/table@3.3.1\n- @react-spectrum/tabs@3.3.1\n- @react-spectrum/tag@3.0.0-alpha.9\n- @react-spectrum/text@3.3.1\n- @react-spectrum/textfield@3.7.0\n- @react-spectrum/theme-dark@3.3.3\n- @react-spectrum/theme-default@3.3.3\n- @react-spectrum/theme-light@3.2.3\n- @react-spectrum/tooltip@3.3.1\n- @react-spectrum/utils@3.7.3\n- @react-spectrum/view@3.3.1\n- @react-spectrum/well@3.3.1\n- @react-stately/calendar@3.0.2\n- @react-stately/checkbox@3.2.1\n- @react-stately/collections@3.4.3\n- @react-stately/color@3.1.1\n- @react-stately/combobox@3.2.1\n- @react-stately/data@3.6.1\n- @react-stately/datepicker@3.0.2\n- @react-stately/dnd@3.0.0-alpha.10\n- @react-stately/grid@3.3.1\n- @react-stately/layout@3.7.0\n- @react-stately/list@3.5.3\n- @react-stately/menu@3.4.1\n- @react-stately/numberfield@3.2.1\n- @react-stately/overlays@3.4.1\n- @react-stately/radio@3.5.1\n- @react-stately/searchfield@3.3.1\n- @react-stately/select@3.3.1\n- @react-stately/selection@3.10.3\n- @react-stately/slider@3.2.1\n- @react-stately/table@3.4.0\n- @react-stately/tabs@3.2.1\n- @react-stately/toggle@3.4.1\n- @react-stately/tooltip@3.2.1\n- @react-stately/tree@3.3.3\n- @react-stately/virtualizer@3.3.0\n- @react-types/accordion@3.0.0-alpha.9\n- @react-types/actionbar@3.0.0-alpha.9\n- @react-types/actiongroup@3.3.3\n- @react-types/autocomplete@3.0.0-alpha.8\n- @react-types/avatar@3.0.0-alpha.8\n- @react-types/breadcrumbs@3.4.3\n- @react-types/button@3.6.1\n- @react-types/buttongroup@3.2.3\n- @react-types/calendar@3.0.2\n- @react-types/card@3.0.0-alpha.9\n- @react-types/checkbox@3.3.3\n- @react-types/color@3.0.0-beta.12\n- @react-types/combobox@3.5.3\n- @react-types/contextualhelp@3.1.3\n- @react-types/datepicker@3.1.1\n- @react-types/dialog@3.4.3\n- @react-types/divider@3.2.3\n- @react-types/form@3.3.3\n- @react-types/grid@3.1.3\n- @react-types/illustratedmessage@3.2.3\n- @react-types/image@3.2.3\n- @react-types/label@3.6.3\n- @react-types/layout@3.3.3\n- @react-types/link@3.3.3\n- @react-types/list@3.0.0\n- @react-types/listbox@3.3.3\n- @react-types/menu@3.7.1\n- @react-types/meter@3.2.3\n- @react-types/numberfield@3.3.3\n- @react-types/overlays@3.6.3\n- @react-types/progress@3.2.3\n- @react-types/provider@3.5.3\n- @react-types/radio@3.2.3\n- @react-types/searchfield@3.3.3\n- @react-types/searchwithin@3.0.0-alpha.8\n- @react-types/select@3.6.3\n- @react-types/shared@3.14.1\n- @react-types/slider@3.2.1\n- @react-types/statuslight@3.2.3\n- @react-types/switch@3.2.3\n- @react-types/table@3.3.1\n- @react-types/tabs@3.1.3\n- @react-types/tag@3.0.0-alpha.7\n- @react-types/text@3.2.3\n- @react-types/textfield@3.5.3\n- @react-types/tooltip@3.2.3\n- @react-types/view@3.2.3\n- @react-types/well@3.2.3\n- @spectrum-icons/color@3.4.2\n- @spectrum-icons/illustrations@3.4.0\n- @spectrum-icons/ui@3.3.2\n- @spectrum-icons/workflow@4.0.2\n- react-aria@3.19.0\n- react-stately@3.17.0\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v4 with React Aria Components Plugin\nDESCRIPTION: Shows how to configure Tailwind CSS v4 by importing the base Tailwind styles and adding the `tailwindcss-react-aria-components` plugin using the `@plugin` directive within a CSS file. This plugin adds styles and utilities specifically tailored for styling `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/image-grid.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Converting CalendarDateTime to CalendarDate or Time (TypeScript/React)\nDESCRIPTION: Demonstrates the conversion of CalendarDateTime to CalendarDate or Time objects using toCalendarDate and toTime functions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toCalendarDate} from '@internationalized/date';\n\nlet date = new CalendarDateTime(2022, 2, 3, 9, 45);\ntoCalendarDate(date); // 2022-02-03\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toTime} from '@internationalized/date';\n\nlet date = new CalendarDateTime(2022, 2, 3, 9, 45);\ntoTime(date); // 09:45:00\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ToggleButton in TSX\nDESCRIPTION: Demonstrates the simplest implementation of a `ToggleButton` component, rendering it with the text label \"Pin\". This example assumes the `ToggleButton` component has been imported.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ToggleButton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButton>Pin</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 DateTime String - TypeScript\nDESCRIPTION: Demonstrates parsing an ISO 8601 formatted string into a CalendarDateTime object using parseDateTime function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDateTime} from '@internationalized/date';\n\nlet date = parseDateTime('2022-02-03T09:15');\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout in React Spectrum Docs - JavaScript\nDESCRIPTION: This snippet imports BlogPostLayout and Hero components from the @react-spectrum/docs package and re-exports BlogPostLayout as the default export. It enables the Markdown/MDX file to use a custom layout for rendering blog posts in the React Spectrum documentation site. The code depends on the @react-spectrum/docs package and presumes integration with Next.js or a similar React-based static site generator. There are no parameters, and the snippet sets the layout for the page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-06-27.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Styling a Disabled ColorArea with CSS\nDESCRIPTION: CSS styles to visually indicate when a ColorArea is disabled by changing the background and thumb colors to gray.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorArea {\n  &[data-disabled] {\n    background: gray !important;\n\n    .react-aria-ColorThumb {\n      background: gray !important;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Custom Drag Preview\nDESCRIPTION: CSS styles for the custom drag preview component. It creates a highlighted preview with a badge showing the number of dragged items, using a color scheme defined by CSS variables.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_32\n\nLANGUAGE: css\nCODE:\n```\n.drag-preview {\n  width: 150px;\n  padding: 4px 8px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 4px;\n  background: var(--highlight-background);\n  color: white;\n  border-radius: 4px;\n\n  .badge {\n    background: var(--highlight-foreground);\n    color: var(--highlight-background);\n    padding: 0 8px;\n    border-radius: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Default Selected State\nDESCRIPTION: Example showing how to set a checkbox to be selected by default using the defaultSelected prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckbox defaultSelected>Subscribe</MyCheckbox>\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled TextField in React\nDESCRIPTION: This example shows how to create controlled and uncontrolled TextField components using defaultValue and value props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState('me@email.com');\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <TextField\n        label=\"Email (Uncontrolled)\"\n        defaultValue=\"me@email.com\" />\n\n      <TextField\n        label=\"Email (Controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ColorSwatchPicker Density in TSX\nDESCRIPTION: Shows how to control the spacing between `ColorSwatch` elements within a `ColorSwatchPicker` using the `density` prop. This example applies 'compact' density for tighter spacing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatchPicker density=\"compact\">\n  <ColorSwatch color=\"#A00\" />\n  <ColorSwatch color=\"#f80\" />\n  <ColorSwatch color=\"#080\" />\n  <ColorSwatch color=\"#08f\" />\n</ColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Importing StepList Component from React Spectrum\nDESCRIPTION: Demonstrates how to import the StepList component from the @react-spectrum/steplist package. This is the basic import statement required before using the StepList component in a React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/steplist/docs/StepList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {StepList} from '@react-spectrum/steplist';\n```\n\n----------------------------------------\n\nTITLE: FileTrigger with Directory Selection\nDESCRIPTION: Example of using FileTrigger to select directories instead of individual files, with display of selected paths.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/filetrigger/docs/FileTrigger.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example () {\n  let [files, setFiles] = React.useState([]);\n\n  return (\n    <>\n      <FileTrigger\n        acceptDirectory\n        onSelect={(e) => {\n          if (e) {\n            let fileList = [...e].map(file => file.webkitRelativePath !== \"\" ? file.webkitRelativePath : file.name);\n            setFiles(fileList);\n          }\n        }} >\n        <Button variant=\"accent\">Upload</Button>\n      </FileTrigger>\n      {files && <ul>\n        {files.map((file, index) => (\n          <li key={index}>{file}</li>\n        ))}\n      </ul>}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessible Toggle Button Group with ARIA Label\nDESCRIPTION: Example showing how to make a toggle button group accessible by providing an aria-label. This helps screen reader users understand the purpose of the button group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButtonGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup aria-label=\"Text style\">\n  <ToggleButton id=\"bold\">Bold</ToggleButton>\n  <ToggleButton id=\"italic\">Italic</ToggleButton>\n  <ToggleButton id=\"underline\">Underline</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling ToggleButton Based on Selection State Using Data Attributes (CSS)\nDESCRIPTION: Targets ToggleButton elements with data-selected attribute for styling selected state. Use with React Aria ToggleButton components which automatically apply data-selected as the state changes. Intended for theming and customization of UI appearance for selection state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButton[data-selected] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling ColorPicker Swatch Rounding with Prop (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to control the rounding appearance of the color swatch in ColorPicker. It shows three variants: none, default, and full, affecting the swatch border radius. Each variant is rendered within a Flex column. The rounding prop can be used to align color selection UI with the overall application style.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-100\">\n  <ColorPicker label=\"None\" rounding=\"none\" defaultValue=\"#A00\">\n    <ColorEditor />\n  </ColorPicker>\n  <ColorPicker label=\"Default\" rounding=\"default\" defaultValue=\"#080\">\n    <ColorEditor />\n  </ColorPicker>\n  <ColorPicker label=\"Full\" rounding=\"full\" defaultValue=\"#00F\">\n    <ColorEditor />\n  </ColorPicker>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Comparing CalendarDateTime Objects (TypeScript/React)\nDESCRIPTION: Demonstrates various methods for comparing CalendarDateTime objects, including full comparison, partial comparison, and comparison across different calendar systems.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nlet a = new CalendarDateTime(2022, 2, 3, 9, 45);\nlet b = new CalendarDateTime(2022, 3, 4, 12, 20);\n\na.compare(b) < 0; // true\nb.compare(a) > 0; // true\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isSameMonth, IslamicUmalquraCalendar} from '@internationalized/date';\n\nisSameMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(2021, 4, 30, 5, 15)); // true\nisSameMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(2021, 8, 2, 5, 15)); // false\nisSameMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(new IslamicUmalquraCalendar(), 1442, 9, 4, 5, 15)); // true\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isEqualMonth, IslamicUmalquraCalendar} from '@internationalized/date';\n\nisEqualMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(2021, 4, 30, 5, 15)); // true\nisEqualMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(2021, 8, 2, 5, 15)); // false\nisEqualMonth(new CalendarDateTime(2021, 4, 16, 9, 45), new CalendarDateTime(new IslamicUmalquraCalendar(), 1442, 9, 4, 5, 15)); // false\n```\n\n----------------------------------------\n\nTITLE: Implementing a Ref-Forwarding Custom Trigger Component\nDESCRIPTION: Example of creating a custom trigger component that forwards refs and spreads props to a DOM element, which is necessary for proper tooltip functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomTrigger = React.forwardRef((props, ref) => (\n  <button {...props} ref={ref} />\n));\n```\n\n----------------------------------------\n\nTITLE: Styling a Custom Modal Overlay and Drawer with CSS\nDESCRIPTION: Provides CSS rules for the custom overlay example. It styles `.my-overlay` with a fixed position, background color, and backdrop filter, and styles `.my-modal` as a fixed-position side drawer with specific dimensions, background, shadow, and defines `mymodal-blur` and `mymodal-slide` animations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.my-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(45 0 0 / .3);\n  backdrop-filter: blur(10px);\n\n  &[data-entering] {\n    animation: mymodal-blur 300ms;\n  }\n\n  &[data-exiting] {\n    animation: mymodal-blur 300ms reverse ease-in;\n  }\n}\n\n.my-modal {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  width: 300px;\n  background: var(--overlay-background);\n  outline: none;\n  border-left: 1px solid var(--border-color);\n  box-shadow: -8px 0 20px rgba(0 0 0 / 0.1);\n\n  &[data-entering] {\n    animation: mymodal-slide 300ms;\n  }\n\n  &[data-exiting] {\n    animation: mymodal-slide 300ms reverse ease-in;\n  }\n}\n\n@keyframes mymodal-blur {\n  from {\n    background: rgba(45 0 0 / 0);\n    backdrop-filter: blur(0);\n  }\n\n  to {\n    background: rgba(45 0 0 / .3);\n    backdrop-filter: blur(10px);\n  }\n}\n\n@keyframes mymodal-slide {\n  from {\n    transform: translateX(100%);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Render Props in DateSegment\nDESCRIPTION: Example of using render props to conditionally render different elements based on the current state of a DateSegment component, handling placeholder visibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<DateSegment>\n  {({text, placeholder, isPlaceholder}) => (\n    <>\n      <span style={{visibility: isPlaceholder ? 'visible' : 'hidden'}}>{placeholder}</span>\n      {isPlaceholder ? '' : text}\n    </>\n  )}\n</DateSegment>\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboard Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useKeyboard hook to handle keyboard events in a React component. It creates an input element that logs key events to a list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useKeyboard.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useKeyboard} from '@react-aria/interactions';\n\nfunction Example() {\n  let [events, setEvents] = React.useState([]);\n  let {keyboardProps} = useKeyboard({\n    onKeyDown: e => setEvents(\n      events => [`key down: ${e.key}`, ...events]\n    ),\n    onKeyUp: e => setEvents(\n      events => [`key up: ${e.key}`, ...events]\n    )\n  });\n\n  return (\n    <>\n      <label htmlFor=\"example\">Example</label>\n      <input\n        {...keyboardProps}\n        id=\"example\" />\n      <ul style={{\n        height: 100,\n        overflow: 'auto',\n        border: '1px solid gray',\n        width: 200\n      }}>\n        {events.map((e, i) => <li key={i}>{e}</li>)}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting React Aria ProgressBar with Default CSS Class\nDESCRIPTION: Shows how to apply CSS styles to a `ProgressBar` component by targeting its default `react-aria-ProgressBar` class name. This is the standard way to style components using CSS selectors provided by React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ProgressBar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ProgressBar {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Orientation for RadioGroup in React (TSX)\nDESCRIPTION: Demonstrates how to change the layout of a RadioGroup from the default vertical to horizontal by setting the `orientation` prop to `\"horizontal\"`. Assumes `MyRadioGroup` is a wrapper around the base `RadioGroup` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyRadioGroup label=\"Favorite avatar\" orientation=\"horizontal\">\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</MyRadioGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Minimal ToggleButtonGroup with Single ToggleButton (TypeScript/JSX)\nDESCRIPTION: Shows a minimal example of ToggleButtonGroup containing a single ToggleButton using react-aria-components. Only imports and renders the group and one child button. Useful to demonstrate the minimal renderable usage or illustrate component nesting. Requires 'react-aria-components' and execution in a React context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ToggleButtonGroup, ToggleButton} from 'react-aria-components';\n\n<ToggleButtonGroup>\n  <ToggleButton />\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Invalid State\nDESCRIPTION: Shows how to display a validation state on a checkbox using the isInvalid prop to indicate that the current value is invalid.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckbox isInvalid>I accept the terms and conditions</MyCheckbox>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dismissable Modal with ModalTrigger in React\nDESCRIPTION: This example demonstrates using the `ModalTrigger` component with the `isDismissable` prop set to true. This configuration allows the user to close the modal by clicking on the underlay (outside the modal content).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/useModalOverlay.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ModalTrigger isDismissable label=\"Open Dialog\">\n  {() =>\n    <Dialog title=\"Notice\">\n      Click outside to close this dialog.\n    </Dialog>\n  }\n</ModalTrigger>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Date Validation\nDESCRIPTION: Example of implementing minimum date validation using minValue prop with current date\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<Form>\n  <MyDateRangePicker\n    label=\"Trip dates\"\n    minValue={today(getLocalTimeZone())}\n    defaultValue={{\n      start: parseDate('2022-02-03'),\n      end: parseDate('2022-05-03')\n    }} />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorField with State Management\nDESCRIPTION: Demonstrates how to implement a controlled ColorField component using React state to manage the color value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#7f007f'));\n  return (\n    <>\n      <MyColorField label=\"Color\" value={color} onChange={setColor} />\n      <p>Current color value: {color?.toString('hex')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic Collection with React State\nDESCRIPTION: Illustrates how to create a dynamic collection using React state and mapping over data to render Items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet [animals, setAnimals] = useState([\n  {id: 1, name: 'Aardvark'},\n  {id: 2, name: 'Kangaroo'},\n  {id: 3, name: 'Snake'}\n]);\n\n<ListBox items={animals}>\n  {item => <Item>{item.name}</Item>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Disabled Switch State - React Spectrum - TypeScript/TSX\nDESCRIPTION: Highlights the isDisabled prop to render a non-interactive Switch. The Switch with this prop cannot be toggled by users, often used to indicate unavailable options. Only isDisabled is required beyond the base Switch setup. The label is still visible but the control is visually and functionally disabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/docs/Switch.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch isDisabled>Switch Label</Switch>\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Individually Disabled Links\nDESCRIPTION: Example demonstrating how to disable individual links within a breadcrumbs component by passing the isDisabled prop to specific Link elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumbs>\n  <Breadcrumb><Link href=\"/\">Home</Link></Breadcrumb>\n  <Breadcrumb><Link isDisabled href=\"/react-aria/\">React Aria</Link></Breadcrumb>\n  <Breadcrumb><Link>Breadcrumbs</Link></Breadcrumb>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Get Day of Week with Locale Support in TypeScript/React\nDESCRIPTION: Demonstrates how to get the day of week index (0-6) for a date using different locales, where the index depends on the locale's first day of week.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getDayOfWeek} from '@internationalized/date';\n\nlet date = parseZonedDateTime('2022-02-06T08:30[America/Los_Angeles]'); // a Sunday\n\ngetDayOfWeek(date, 'en-US'); // 0\ngetDayOfWeek(locale, 'fr-FR'); // 6\n```\n\n----------------------------------------\n\nTITLE: Custom Empty State Rendering in GridList (TypeScript)\nDESCRIPTION: Shows the use of the renderEmptyState prop in GridList to display custom content when there are no items. The example component returns \\\"No results found.\\\" when rendered empty. This is useful for search or filtered results with no matches. No dependencies beyond a standard GridList implementation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\\n<GridList\\n  aria-label=\\\"Search results\\\"\\n  /*- begin highlight -*/\\n  renderEmptyState={() => 'No results found.'}\\n  /*- end highlight -*/\\n>\\n  {[]}\\n</GridList>\\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling List Row Selection - React Spectrum - TypeScript/JSX\nDESCRIPTION: Demonstrates a React component managing controlled selection state for a list using React.useState. The selectedKeys prop ensures that UI selection reflects the component's state, while the onSelectionChange callback updates the state when users interact. The list items are defined in a local array, and selection mode is set to multiple, allowing the user to select more than one item at once. Requires React and React Spectrum's List and Item components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction PokemonList(props) {\n  let rows = [\n    {id: 1, name: 'Charizard'},\n    {id: 2, name: 'Blastoise'},\n    {id: 3, name: 'Venusaur'},\n    {id: 4, name: 'Pikachu'}\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState(new Set([2]));\n\n  return (\n    <List aria-label=\"List with controlled selection\" items={rows} selectionMode=\"multiple\" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys} {...props}>\n      {item => <Item>{item.name}</Item>}\n    </List>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with className Function in React Spectrum\nDESCRIPTION: Demonstrates using a function for the className prop that receives state information and returns appropriate class names based on the current state, useful with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<SliderThumb className={({isDragging}) => isDragging ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ProgressBar in React Aria\nDESCRIPTION: This example demonstrates how to create a basic ProgressBar component using React Aria. It includes a label, value display, and a customizable fill bar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ProgressBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ProgressBar, Label} from 'react-aria-components';\n\n<ProgressBar value={80}>\n  {({percentage, valueText}) => <>\n    <Label>Loading…</Label>\n    <span className=\"value\">{valueText}</span>\n    <div className=\"bar\">\n      <div className=\"fill\" style={{width: percentage + '%'}} />\n    </div>\n  </>}\n</ProgressBar>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Slider in React Spectrum\nDESCRIPTION: Creates a disabled slider using the isDisabled prop, preventing user interaction while maintaining the display of the current value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  label=\"Cookies to share\"\n  defaultValue={25}\n  isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Picker with Dynamic Sections\nDESCRIPTION: Example demonstrating how to create sectioned Picker items using dynamic hierarchical data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {name: 'Australian', children: [\n      {id: 2, name: 'Koala'},\n      {id: 3, name: 'Kangaroo'},\n      {id: 4, name: 'Platypus'}\n    ]},\n    {name: 'American', children: [\n      {id: 6, name: 'Bald Eagle'},\n      {id: 7, name: 'Bison'},\n      {id: 8, name: 'Skunk'}\n    ]}\n  ];\n\n  return (\n    <Picker label=\"Pick an animal\" items={options} onSelectionChange={selected => alert(selected)}>\n      {item => (\n        <Section key={item.name} items={item.children} title={item.name}>\n          {item => <Item>{item.name}</Item>}\n        </Section>\n      )}\n    </Picker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Output Using Render Props\nDESCRIPTION: This JSX snippet demonstrates using a render prop as a child of the `SliderOutput` component. This allows for custom formatting of the displayed value by accessing the slider's state (`state`) and using its methods, like `getThumbValueLabel(0)`, within the function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<SliderOutput>\n  {state => `Value: ${state.getThumbValueLabel(0)}`}\n</SliderOutput>\n```\n\n----------------------------------------\n\nTITLE: Styling Boolean States with Tailwind Plugin\nDESCRIPTION: Example of styling boolean states like pressed using the Tailwind plugin for React Aria Components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Button className=\"pressed:bg-blue\">\n  {/* ... */}\n</Button>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for ColorSwatch Component\nDESCRIPTION: Basic CSS for styling the ColorSwatch component with width, height, border-radius, and shadow.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSwatch {\n  width: 32px;\n  height: 32px;\n  border-radius: 4px;\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Single Selection Mode in React Spectrum ListBox (TSX)\nDESCRIPTION: This snippet shows how to configure a `ListBox`, which normally supports multiple selections, to only allow single selection. It uses the `selectionMode=\"single\"` prop. Although selection is limited to one item, it still uses the `selectedKeys` prop (which will contain a Set with zero or one item) and `onSelectionChange` for state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/selection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet [selectedKeys, setSelectedKeys] = useState(new Set());\n\n<ListBox\n  /*- begin highlight -*/\n  selectionMode=\"single\"\n  /*- end highlight -*/\n  selectedKeys={selectedKeys}\n  onSelectionChange={setSelectedKeys}>\n  <ListBoxItem id=\"one\">One</ListBoxItem>\n  <ListBoxItem id=\"two\">Two</ListBoxItem>\n  <ListBoxItem id=\"three\">Three</ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Component Example\nDESCRIPTION: Demonstrates how to use the Checkbox component from react-aria-components with a custom SVG indicator for the checkmark.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Checkbox} from 'react-aria-components';\n\n<Checkbox>\n  <div className=\"checkbox\">\n    <svg viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n      <polyline points=\"1 9 7 14 15 4\" />\n    </svg>\n  </div>\n  Unsubscribe\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Text Component within a ListBox\nDESCRIPTION: This example demonstrates how to use a custom Text component (MyText) within a ListBox, replacing the built-in React Aria Components Text component. The custom component works with ListBox because it consumes the TextContext.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_60\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox>\n  <ListBoxItem>\n    <MyText slot=\"label\">Option</MyText>\n  </ListBoxItem>\n  {/* ... */}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Allowing Custom Values in React Spectrum ComboBox (TSX)\nDESCRIPTION: Shows how to enable users to enter values not present in the predefined list by setting the `allowsCustomValue` prop on the ComboBox. This prevents the input from reverting to the last selected value on blur if the entered text doesn't match an option.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<ComboBox label=\"Favorite Animal\" allowsCustomValue>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Unique IDs for Dynamic Collections in React Aria (TSX)\nDESCRIPTION: Shows how to provide a custom unique identifier for items in a dynamic `ListBox` collection using the `id` prop on the `ListBoxItem` element. This is useful when the data items do not have a default `id` property, allowing a different unique property (like `name`) to be used.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet [animals, setAnimals] = useState([\n  {name: 'Aardvark'},\n  {name: 'Kangaroo'},\n  {name: 'Snake'}\n]);\n\n<ListBox items={animals}>\n  {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: TimeField Usage Example with Controlled and Uncontrolled Values\nDESCRIPTION: Examples demonstrating how to use the TimeField component with both controlled and uncontrolled values using the @internationalized/date package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Time} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(new Time(11, 45));\n\n  return (\n    <>\n      <TimeField\n        label=\"Time (uncontrolled)\"\n        defaultValue={new Time(11, 45)} />\n      <TimeField\n        label=\"Time (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Props via ColorSliderContext in React (TSX)\nDESCRIPTION: Demonstrates creating a custom `ColorSliderDescription` component that wraps a `ColorSlider`. It utilizes `ColorSliderContext.Provider` to pass an `aria-describedby` attribute pointing to a generated ID for a description element, enhancing accessibility. Requires `react-aria-components` and `react-aria`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {ColorSliderContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface ColorSliderDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction ColorSliderDescription({children, description}: ColorSliderDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <ColorSliderContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </ColorSliderContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<ColorSliderDescription description=\"It's not easy being green.\">\n  <MyColorSlider channel=\"green\" defaultValue=\"#006\" />\n</ColorSliderDescription>\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Item Actions Directly to TreeItem (TSX)\nDESCRIPTION: Shows how to apply the `onAction` prop directly to individual `TreeItem` components within a static collection. This is useful for defining specific actions for each item. If the parent `Tree` also has an `onAction`, both will be triggered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Tree aria-label=\"Tree with onAction applied on the items directly\" style={{height: '300px'}} defaultExpandedKeys={['bulbasaur', 'ivysaur']}>\n  <MyTreeItem\n    /*- begin highlight -*/\n    onAction={() => alert(`Opening Bulbasaur...`)}\n    /*- end highlight -*/\n    id=\"bulbasaur\"\n    title=\"Bulbasaur\">\n    <MyTreeItem\n      onAction={() => alert(`Opening Ivysaur...`)}\n      id=\"ivysaur\"\n      title=\"Ivysaur\">\n      <MyTreeItem\n        onAction={() => alert(`Opening Venusaur...`)}\n        id=\"venusaur\"\n        title=\"Venusaur\" />\n    </MyTreeItem>\n  </MyTreeItem>\n</Tree>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Target ListBox Items (CSS)\nDESCRIPTION: CSS rule to style a `react-aria-ListBoxItem` component when it is identified as a valid drop target. It uses the `[data-drop-target]` selector to apply an outline and background highlight.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_38\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[data-drop-target] {\n  outline: 2px solid var(--highlight-background);\n  background: var(--highlight-overlay)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only RangeCalendar (TSX)\nDESCRIPTION: This example demonstrates how to create a read-only RangeCalendar using the isReadOnly prop. The calendar remains focusable but its value is immutable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar aria-label=\"Trip dates\" value={{start: today(getLocalTimeZone()), end: today(getLocalTimeZone()).add({ weeks: 1 })}} isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Labeling SearchAutocomplete as Optional with Text Indicator in TSX\nDESCRIPTION: Demonstrates how to explicitly mark a `SearchAutocomplete` field as optional by setting the `necessityIndicator` prop to `\"label\"`, which appends \"(optional)\" text to the label. The label is \"Favorite Animal\".\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Favorite Animal\" necessityIndicator=\"label\">\n  <Item>Red Panda</Item>\n  <Item>Cat</Item>\n  <Item>Dog</Item>\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection in a Table\nDESCRIPTION: Demonstrates how to enable single selection mode in a table using the selectionMode prop and defaultSelectedKeys to preselect a specific row by its ID.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the example above\n<FileTable selectionMode=\"single\" defaultSelectedKeys={[2]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Tooltips with TooltipTrigger in React Spectrum\nDESCRIPTION: Example showing how to disable a tooltip display while keeping the trigger element active by using the isDisabled prop on TooltipTrigger.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger isDisabled>\n  <Button>🖨</Button>\n  <MyTooltip>Print</MyTooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: NumberField for Currency Input\nDESCRIPTION: Demonstrates how to set up a NumberField for currency input with various formatting options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField\n  label=\"Transaction amount\"\n  defaultValue={45}\n  formatOptions={{\n    style: 'currency',\n    currency: 'EUR',\n    currencyDisplay: 'code',\n    currencySign: 'accounting'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Styling the Popover Component with CSS (CSS)\nDESCRIPTION: Provides CSS styles for the Popover component (`.react-aria-Popover`). It includes styling for background, border, shadow, transitions for entering/exiting states (`data-entering`, `data-exiting`), and positioning/styling of the optional arrow element (`.react-aria-OverlayArrow`) based on the `data-placement` attribute.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Popover {\n  --background-color: var(--overlay-background);\n\n  border: 1px solid var(--border-color);\n  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);\n  border-radius: 6px;\n  background: var(--background-color);\n  color: var(--text-color);\n  outline: none;\n  max-width: 250px;\n  transition: transform 200ms, opacity 200ms;\n\n  .react-aria-OverlayArrow svg {\n    display: block;\n    fill: var(--background-color);\n    stroke: var(--border-color);\n    stroke-width: 1px;\n  }\n\n  &[data-entering],\n  &[data-exiting] {\n    transform: var(--origin);\n    opacity: 0;\n  }\n\n  &[data-placement=top] {\n    --origin: translateY(8px);\n\n    &:has(.react-aria-OverlayArrow) {\n      margin-bottom: 6px;\n    }\n  }\n\n  &[data-placement=bottom] {\n    --origin: translateY(-8px);\n\n    &:has(.react-aria-OverlayArrow) {\n      margin-top: 6px;\n    }\n\n    .react-aria-OverlayArrow svg {\n      transform: rotate(180deg);\n    }\n  }\n\n  &[data-placement=right] {\n    --origin: translateX(-8px);\n\n    &:has(.react-aria-OverlayArrow) {\n      margin-left: 6px;\n    }\n\n    .react-aria-OverlayArrow svg {\n      transform: rotate(90deg);\n    }\n  }\n\n  &[data-placement=left] {\n    --origin: translateX(8px);\n\n    &:has(.react-aria-OverlayArrow) {\n      margin-right: 6px;\n    }\n\n    .react-aria-OverlayArrow svg {\n      transform: rotate(-90deg);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package Version List in React Spectrum Ecosystem\nDESCRIPTION: Comprehensive listing of all released packages and their versions in the React Spectrum project, including React Aria accessibility hooks, React Stately state management utilities, React Types type definitions, and Spectrum Icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-02-23.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- @adobe/react-spectrum@3.25.0\n- @internationalized/date@3.1.0\n- @internationalized/message@3.1.0\n- @internationalized/number@3.2.0\n- @internationalized/string-compiler@3.1.0\n- @internationalized/string@3.1.0\n- @react-aria/accordion@3.0.0-alpha.15\n- @react-aria/actiongroup@3.5.0\n- @react-aria/aria-modal-polyfill@3.7.0\n- @react-aria/autocomplete@3.0.0-alpha.14\n- @react-aria/breadcrumbs@3.5.0\n- @react-aria/button@3.7.0\n- @react-aria/calendar@3.1.0\n- @react-aria/checkbox@3.8.0\n- @react-aria/color@3.0.0-beta.19\n- @react-aria/combobox@3.5.0\n- @react-aria/datepicker@3.3.0\n- @react-aria/dialog@3.5.0\n- @react-aria/dnd@3.1.0\n- @react-aria/focus@3.11.0\n- @react-aria/grid@3.6.0\n- @react-aria/gridlist@3.2.0\n- @react-aria/i18n@3.7.0\n- @react-aria/interactions@3.14.0\n- @react-aria/label@3.5.0\n- @react-aria/landmark@3.0.0-alpha.6\n- @react-aria/link@3.4.0\n- @react-aria/listbox@3.8.0\n- @react-aria/live-announcer@3.2.0\n- @react-aria/menu@3.8.0\n- @react-aria/meter@3.4.0\n- @react-aria/numberfield@3.4.0\n- @react-aria/overlays@3.13.0\n- @react-aria/progress@3.4.0\n- @react-aria/radio@3.5.0\n- @react-aria/searchfield@3.5.0\n- @react-aria/select@3.9.0\n- @react-aria/selection@3.13.0\n- @react-aria/separator@3.3.0\n- @react-aria/slider@3.3.0\n- @react-aria/spinbutton@3.3.0\n- @react-aria/ssr@3.5.0\n- @react-aria/switch@3.4.0\n- @react-aria/table@3.8.0\n- @react-aria/tabs@3.4.0\n- @react-aria/tag@3.0.0-beta.2\n- @react-aria/textfield@3.9.0\n- @react-aria/toast@3.0.0-alpha.0\n- @react-aria/toggle@3.5.0\n- @react-aria/tooltip@3.4.0\n- @react-aria/utils@3.15.0\n- @react-aria/virtualizer@3.7.0\n- @react-aria/visually-hidden@3.7.0\n- @react-spectrum/accordion@3.0.0-alpha.17\n- @react-spectrum/actionbar@3.0.0-beta.0\n- @react-spectrum/actiongroup@3.8.0\n- @react-spectrum/autocomplete@3.0.0-alpha.15\n- @react-spectrum/avatar@3.0.0-beta.0\n- @react-spectrum/badge@3.1.0\n- @react-spectrum/breadcrumbs@3.7.0\n- @react-spectrum/button@3.12.0\n- @react-spectrum/buttongroup@3.6.0\n- @react-spectrum/calendar@3.2.0\n- @react-spectrum/card@3.0.0-alpha.16\n- @react-spectrum/checkbox@3.7.0\n- @react-spectrum/color@3.0.0-beta.20\n- @react-spectrum/combobox@3.8.0\n- @react-spectrum/contextualhelp@3.5.0\n- @react-spectrum/datepicker@3.4.0\n- @react-spectrum/dialog@3.7.0\n- @react-spectrum/divider@3.5.0\n- @react-spectrum/dnd@3.1.0\n- @react-spectrum/form@3.6.0\n- @react-spectrum/icon@3.7.0\n- @react-spectrum/illustratedmessage@3.4.0\n- @react-spectrum/image@3.4.0\n- @react-spectrum/label@3.11.0\n- @react-spectrum/labeledvalue@3.1.0\n- @react-spectrum/layout@3.5.0\n- @react-spectrum/link@3.5.0\n- @react-spectrum/list@3.3.0\n- @react-spectrum/listbox@3.9.0\n- @react-spectrum/menu@3.10.0\n- @react-spectrum/meter@3.4.0\n- @react-spectrum/numberfield@3.6.0\n- @react-spectrum/overlays@5.0.0\n- @react-spectrum/picker@3.10.0\n- @react-spectrum/progress@3.4.0\n- @react-spectrum/provider@3.7.0\n- @react-spectrum/radio@3.5.0\n- @react-spectrum/searchfield@3.7.0\n- @react-spectrum/slider@3.5.0\n- @react-spectrum/statuslight@3.5.0\n- @react-spectrum/switch@3.4.0\n- @react-spectrum/table@3.7.0\n- @react-spectrum/tabs@3.5.0\n- @react-spectrum/tag@3.0.0-beta.3\n- @react-spectrum/text@3.4.0\n- @react-spectrum/textfield@3.10.0\n- @react-spectrum/theme-dark@3.5.0\n- @react-spectrum/theme-default@3.5.0\n- @react-spectrum/theme-express@3.0.0-alpha.2\n- @react-spectrum/theme-light@3.4.0\n- @react-spectrum/toast@3.0.0-alpha.0\n- @react-spectrum/tooltip@3.4.0\n- @react-spectrum/utils@3.9.0\n- @react-spectrum/view@3.5.0\n- @react-spectrum/well@3.4.0\n- @react-stately/calendar@3.1.0\n- @react-stately/checkbox@3.4.0\n- @react-stately/collections@3.6.0\n- @react-stately/color@3.3.0\n- @react-stately/combobox@3.4.0\n- @react-stately/data@3.9.0\n- @react-stately/datepicker@3.3.0\n- @react-stately/dnd@3.1.0\n- @react-stately/grid@3.5.0\n- @react-stately/layout@3.11.0\n- @react-stately/list@3.7.0\n- @react-stately/menu@3.5.0\n- @react-stately/numberfield@3.4.0\n- @react-stately/overlays@3.5.0\n- @react-stately/radio@3.7.0\n- @react-stately/searchfield@3.4.0\n- @react-stately/select@3.4.0\n- @react-stately/selection@3.12.0\n- @react-stately/slider@3.3.0\n- @react-stately/table@3.8.0\n- @react-stately/tabs@3.3.0\n- @react-stately/tag@3.0.0-beta.0\n- @react-stately/toast@3.0.0-alpha.0\n- @react-stately/toggle@3.5.0\n- @react-stately/tooltip@3.3.0\n- @react-stately/tree@3.5.0\n- @react-stately/utils@3.6.0\n- @react-stately/virtualizer@3.5.0\n- @react-types/accordion@3.0.0-alpha.12\n- @react-types/actionbar@3.0.0-beta.0\n- @react-types/actiongroup@3.4.0\n- @react-types/autocomplete@3.0.0-alpha.12\n- @react-types/avatar@3.0.0-beta.0\n- @react-types/badge@3.1.0\n- @react-types/breadcrumbs@3.5.0\n- @react-types/button@3.7.1\n- @react-types/buttongroup@3.3.0\n- @react-types/calendar@3.1.0\n- @react-types/card@3.0.0-alpha.13\n- @react-types/checkbox@3.4.2\n- @react-types/color@3.0.0-beta.15\n- @react-types/combobox@3.6.0\n- @react-types/contextualhelp@3.2.0\n- @react-types/datepicker@3.2.0\n- @react-types/dialog@3.5.0\n- @react-types/divider@3.3.0\n- @react-types/form@3.4.2\n- @react-types/grid@3.1.6\n- @react-types/illustratedmessage@3.3.0\n- @react-types/image@3.3.0\n- @react-types/label@3.7.2\n- @react-types/layout@3.3.6\n- @react-types/link@3.4.0\n- @react-types/list@3.2.0\n- @react-types/listbox@3.4.0\n- @react-types/menu@3.8.0\n- @react-types/meter@3.3.0\n- @react-types/numberfield@3.4.0\n- @react-types/overlays@3.7.0\n- @react-types/progress@3.3.0\n- @react-types/provider@3.6.0\n- @react-types/radio@3.4.0\n- @react-types/searchfield@3.4.0\n- @react-types/select@3.7.0\n- @react-types/shared@3.17.0\n- @react-types/slider@3.4.0\n- @react-types/statuslight@3.3.0\n- @react-types/switch@3.3.0\n- @react-types/table@3.5.0\n- @react-types/tabs@3.2.0\n- @react-types/tag@3.0.0-beta.2\n- @react-types/text@3.3.0\n- @react-types/textfield@3.7.0\n- @react-types/tooltip@3.3.0\n- @react-types/view@3.4.0\n- @react-types/well@3.3.0\n- @spectrum-icons/color@3.5.0\n- @spectrum-icons/express@3.0.0-alpha.4\n- @spectrum-icons/illustrations@3.6.0\n- @spectrum-icons/ui@3.5.0\n- @spectrum-icons/workflow@4.1.0\n- react-aria@3.23.0\n- react-stately@3.21.0\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration for Slider Component\nDESCRIPTION: Demonstrates how to integrate a Slider component with HTML forms using the name prop on SliderThumb.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider defaultValue={50}>\n  <Label>Opacity</Label>\n  <SliderOutput />\n  <SliderTrack>\n    <SliderThumb name=\"opacity\" />\n  </SliderTrack>\n</Slider>\n```\n\n----------------------------------------\n\nTITLE: Adding Description to ColorField in React Aria\nDESCRIPTION: This example shows how to add a description to a ColorField using the description slot. It provides additional help text associated with the color field.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorField>\n  <Label>Color</Label>\n  <Input />\n  <Text slot=\"description\">Enter a background color.</Text>\n</ColorField>\n```\n\n----------------------------------------\n\nTITLE: Adding Description to a Checkbox Group\nDESCRIPTION: Example showing how to add a description to a checkbox group to provide additional context or instructions to users.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n<CheckboxGroup label=\"Favorite sports\" description=\"Select your favorite sports.\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Customizing Child Elements with childElementProps in React Spectrum (JSX)\nDESCRIPTION: This snippet illustrates passing custom properties to child elements of a React Spectrum component (here, SplitButton) using the 'childElementProps' prop. This allows for fine-grained DOM modification, including setting custom class names and data attributes for targeted styling or testing. Requires React Spectrum v3 (or above) with support for this prop. Key parameter: childElementProps takes a map of sub-element names to props. Input is a mapping of element names to DOM prop objects; output is richer customization and targeting of nested elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-theming.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SplitButton\n  {/* ... */}\n  childElementProps={{\n    menu: {\n      className: 'my-custom-class-name',\n      'data-test-id': 'my-split-button-menu'\n    }\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Column Dividers Example in TableView\nDESCRIPTION: This example demonstrates how to add column dividers in a TableView using the showDivider prop for each Column.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\n<TableView aria-label=\"Example table for column dividers\">\n  <TableHeader>\n    <Column align=\"start\" showDivider>Name</Column>\n    <Column showDivider>Type</Column>\n    <Column align=\"end\" showDivider>Size</Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>2021406_Proposal</Cell>\n      <Cell>PDF</Cell>\n      <Cell>86 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Budget Template</Cell>\n      <Cell>XLS</Cell>\n      <Cell>120 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Onboarding</Cell>\n      <Cell>PPT</Cell>\n      <Cell>472 KB</Cell>\n    </Row>\n    <Row>\n      <Cell>Welcome</Cell>\n      <Cell>TXT</Cell>\n      <Cell>24 KB</Cell>\n    </Row>\n  </TableBody>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Styling a Disabled Switch Component in React Aria\nDESCRIPTION: Provides CSS styles for customizing the appearance of a disabled Switch component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Switch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Switch {\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n\n    .indicator {\n      border-color: var(--border-color-disabled);\n\n      &:before {\n        background: var(--border-color-disabled);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ProgressCircle Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'ProgressCircle' component. It renders a circular progress indicator to visually represent the progress of an operation over time. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_47\n\nLANGUAGE: jsx\nCODE:\n```\n<ProgressCircle />\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value in TimeField\nDESCRIPTION: Demonstrates how to set a default placeholder value for an empty TimeField to guide user input.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField label=\"Appointment time\" placeholderValue={new Time(9)} />\n```\n\n----------------------------------------\n\nTITLE: CSS for Disabled Checkbox State\nDESCRIPTION: CSS code for styling the disabled state of a checkbox with muted colors for the text and border.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Checkbox {\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n\n    .checkbox {\n      border-color: var(--border-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing FieldGroup with Context for DateRangePicker Validation (TypeScript)\nDESCRIPTION: This code defines a FieldGroup component that wraps children with context values for validation and ARIA attributes, including an error message. It uses React Aria's DateRangePickerContext.Provider and the useId hook to associate ARIA error description. Inputs are FieldGroupProps with title, optional errorMessage, and children. Outputs a fieldset with proper labeling, context, and error markup. Dependencies are react-aria-components and react-aria. This pattern is useful for grouping date fields and ensuring consistent accessibility and validation display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DateRangePickerContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  errorMessage?: string\n}\n\nfunction FieldGroup({title, children, errorMessage}: FieldGroupProps) {\n  let errorId = useId();\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      {/*- begin highlight -*/}\n      <DateRangePickerContext.Provider value={{\n        isInvalid: !!errorMessage,\n        'aria-describedby': errorMessage ? errorId : undefined\n      }}>\n      {/*- end highlight -*/}\n        {children}\n      </DateRangePickerContext.Provider>\n      {errorMessage && <small id={errorId} className=\"invalid\">{errorMessage}</small>}\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Dates\" errorMessage=\"Ticket sale and event dates cannot overlap.\">\n  <MyDateRangePicker label=\"Ticket sale dates\" defaultValue={{start: parseDate('2023-07-12'), end: parseDate('2023-08-04')}} />\n  <MyDateRangePicker label=\"Event dates\" defaultValue={{start: parseDate('2023-08-01'), end: parseDate('2023-08-10')}} />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Blog Layout Component in JavaScript\nDESCRIPTION: This snippet imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports `BlogPostLayout` as the default export for the module, likely setting up the standard layout structure for a blog post page within the React Spectrum documentation website.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-05-03.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Custom Component Wrapper\nDESCRIPTION: Example of creating a wrapper component for customizing ListBox props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyListBox(props) {\n  return <ListBox {...props} className=\"my-listbox\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Reducing Bundle Size for React Spectrum DateField State with Custom Calendar in JSX\nDESCRIPTION: Provides an advanced example demonstrating bundle size reduction by implementing a custom `createCalendar` function. This function includes only the necessary calendar implementations (e.g., `GregorianCalendar` from `@internationalized/date`) and is passed to the `useDateFieldState` hook from `@react-stately/datepicker`. This allows tree-shaking to remove unused calendar systems. Depends on `@react-aria/i18n` for `useLocale`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\nimport {useDateFieldState} from '@react-stately/datepicker';\nimport {useLocale} from '@react-aria/i18n';\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction createCalendar(identifier) {\n  switch (identifier) {\n    case 'gregory':\n      return new GregorianCalendar();\n    default:\n      throw new Error(`Unsupported calendar ${identifier}`);\n  }\n}\n\nexport function DateField(props) {\n  let {locale} = useLocale();\n  let state = useDateFieldState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating DatePicker with HTML Forms in React\nDESCRIPTION: This TSX snippet shows a basic DatePicker component configured for use within an HTML form. By adding the 'name=\"birthday\"' prop, the selected date value will be included in the form submission data under the key 'birthday', formatted as an ISO 8601 string according to the picker's granularity.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyDatePicker label=\"Birth date\" name=\"birthday\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider with Custom Router in React\nDESCRIPTION: This snippet demonstrates how to set up the Provider component with a custom router object, including a navigate function and an optional useHref function for path conversion.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider, defaultTheme} from '@adobe/react-spectrum';\nimport {useNavigate, useHref} from 'your-router';\n\nfunction App() {\n  let navigate = useNavigate();\n\n  return (\n    <Provider theme={defaultTheme} router={{navigate, useHref}}>\n      {/* ... */}\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Custom Label Position and Alignment in React\nDESCRIPTION: This example demonstrates how to customize the label position and alignment in a TagGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup label=\"Categories\" labelPosition=\"side\" labelAlign=\"end\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering Anatomical Diagram of Drag and Drop Components\nDESCRIPTION: Renders the SVG component showing the anatomy of drag and drop interactions with proper accessibility attributes for screen readers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/dnd.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Anatomy role=\"img\" aria-label=\"Drag and drop anatomy diagram, showing drag source, drag preview, and drop target.\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting NumberField Values with Units - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates configuring NumberField to display numbers with a measurement unit using style: 'unit', unit, and unitDisplay format options. The example uses 'inch' as the unit in 'long' form. Note: Unit formatting is not supported in Safari without a polyfill.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<MyNumberField\n  label=\"Package width\"\n  defaultValue={4}\n  formatOptions={{\n    style: 'unit',\n    unit: 'inch',\n    unitDisplay: 'long'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Integrating React Spectrum CheckboxGroup with HTML Forms using TSX\nDESCRIPTION: Shows how to integrate a CheckboxGroup with standard HTML forms. The `name` prop ('sports') is set on the CheckboxGroup, and each Checkbox has a corresponding `value` prop ('soccer', 'baseball', 'basketball'). This configuration allows the selected checkbox values to be included when the form is submitted.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<CheckboxGroup label=\"Favorite sports\" name=\"sports\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria DateSegment Based on State Attributes (CSS)\nDESCRIPTION: This CSS snippet illustrates how to style the `DateSegment` component based on its state using data attributes. Selectors like `.react-aria-DateSegment[data-placeholder]` and `.react-aria-DateSegment[data-readonly]` allow applying specific styles when the segment is displaying a placeholder or is read-only.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateSegment[data-placeholder] {\n  /* ... */\n}\n\n.react-aria-DateSegment[data-readonly] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Date Format Help in DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Enables the showFormatHelpText prop to automatically provide users with formatting guidelines for their locale. Aims to improve user experience by clarifying the expected date input format, with no additional dependencies required. Best used for internationalized UIs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_22\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker label=\\\"Birth date\\\" showFormatHelpText />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Placement in React Spectrum\nDESCRIPTION: This example demonstrates how to adjust the placement of a tooltip relative to its trigger element using the placement prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger placement=\"end\">\n  <ActionButton aria-label=\"Foo\">Placement</ActionButton>\n  <Tooltip>In left-to-right, this is on the right. In right-to-left, this is on the left.</Tooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label Component in CheckboxGroup\nDESCRIPTION: This example shows how to use the custom MyCustomLabel component within a CheckboxGroup, replacing the built-in React Aria Components Label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup>\n  <MyCustomLabel>Favorite sports</MyCustomLabel>\n  <MyCheckbox value=\"soccer\">Soccer</MyCheckbox>\n  <MyCheckbox value=\"baseball\">Baseball</MyCheckbox>\n  <MyCheckbox value=\"basketball\">Basketball</MyCheckbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Disabling an Entire React Spectrum CheckboxGroup in TSX\nDESCRIPTION: Shows how to disable all checkboxes within a CheckboxGroup simultaneously by setting the `isDisabled` prop on the CheckboxGroup component itself. This prevents user interaction with any of the checkboxes (Soccer, Baseball, Basketball) in the group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<CheckboxGroup label=\"Favorite sports\" isDisabled>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: ProgressBar with Static Colors in React Spectrum\nDESCRIPTION: Demonstrates using the staticColor prop to adapt the ProgressBar for visibility on different colored backgrounds, with white for dark backgrounds and black for light backgrounds.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<View backgroundColor=\"static-blue-700\" padding=\"size-300\">\n  <ProgressBar label=\"Loading…\" staticColor=\"white\" value={5} />\n</View>\n<View backgroundColor=\"static-yellow-400\" padding=\"size-300\">\n  <ProgressBar label=\"Loading…\" staticColor=\"black\" value={5} />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Defining getItems Function for Draggable Items in React Spectrum\nDESCRIPTION: Creates a function that serializes item data for drag operations. It maps each selected key to a custom 'adobe-app' item type that contains the JSON-stringified item data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet getItems = (keys) => [...keys].map(key => {\n  let item = list.getItem(key);\n  return {\n    'adobe-app': JSON.stringify(item)\n  };\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tooltip Triggers with Focusable in React Spectrum\nDESCRIPTION: Example demonstrating how to create custom tooltip triggers by wrapping elements with the Focusable component to ensure they can receive focus and properly trigger tooltips.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Focusable} from 'react-aria-components';\n\n<TooltipTrigger>\n  {/*- begin highlight -*/}\n  <Focusable>\n    <span role=\"button\">Custom trigger</span>\n  </Focusable>\n  {/*- end highlight -*/}\n  <MyTooltip>Tooltip</MyTooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Integrating DropIndicator Between List Items in React (tsx)\nDESCRIPTION: Demonstrates how to render the `DropIndicator` component within an `Option` component to allow dropping between items. It places one indicator before the item (`dropPosition: 'before'`) and another after the last item in the list (`dropPosition: 'after'`), checking using `state.collection.getKeyAfter`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Option({ item, state, dropState }) {\n  // ...\n\n  return (\n    <>\n      {/*- begin highlight -*/}\n      <DropIndicator\n        target={{type: 'item', key: item.key, dropPosition: 'before'}}\n        dropState={dropState} />\n      {/*- end highlight -*/}\n      <li\n        {...mergeProps(optionProps, dropProps, focusProps)}\n        ref={ref}\n        className={`option ${isFocusVisible ? 'focus-visible' : ''} ${isDropTarget ? 'drop-target' : ''}`}>\n        {item.rendered}\n      </li>\n      {/*- begin highlight -*/}\n      {state.collection.getKeyAfter(item.key) == null &&\n        <DropIndicator\n          target={{type: 'item', key: item.key, dropPosition: 'after'}}\n          dropState={dropState} />\n      }\n      {/*- end highlight -*/}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Class Name Implementation\nDESCRIPTION: Shows how to override default className with custom class in CalendarGrid component\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarGrid className=\"my-calendar-grid\">\n  {/* ... */}\n</CalendarGrid>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing ColorSwatchPicker with ColorField using Context in React\nDESCRIPTION: An advanced example showing how to synchronize a ColorSwatchPicker with a ColorField component using React context for state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatchPickerContext} from 'react-aria-components';\nimport {MyColorField} from './ColorField';\n\nfunction ColorSelector({children}) {\n  let [value, setValue] = React.useState(parseColor('#A00'));\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', gap: 8}}>\n      <MyColorField label=\"Color\" value={value} onChange={setValue} />\n      <ColorSwatchPickerContext.Provider value={{value, onChange: setValue}}>\n        {children}\n      </ColorSwatchPickerContext.Provider>\n    </div>\n  );\n}\n\n<ColorSelector>\n  <MyColorSwatchPicker>\n    <MyColorSwatchPickerItem color=\"#A00\" />\n    <MyColorSwatchPickerItem color=\"#f80\" />\n    <MyColorSwatchPickerItem color=\"#080\" />\n  </MyColorSwatchPicker>\n</ColorSelector>\n```\n\n----------------------------------------\n\nTITLE: Justifying Content in a Flex Layout with React Spectrum\nDESCRIPTION: Shows how to use the justifyContent prop to vertically center items in a column-oriented flex container within a parent element of fixed height.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Flex.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<View height=\"size-3000\" borderWidth=\"thin\" borderColor=\"dark\">\n  <Flex direction=\"column\" gap=\"size-100\" justifyContent=\"center\" height=\"100%\">\n    <View backgroundColor=\"celery-600\" width=\"size-800\" height=\"size-800\" />\n    <View backgroundColor=\"blue-600\" width=\"size-2000\" height=\"size-800\" />\n    <View backgroundColor=\"magenta-600\" width=\"size-800\" height=\"size-800\" />\n  </Flex>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Form Events Handling Example in React Aria\nDESCRIPTION: Example demonstrating how to handle form submission and reset events with React Aria's Form component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [action, setAction] = React.useState(null);\n  return (\n    <Form\n      /*- begin highlight -*/\n      onSubmit={e => {\n        e.preventDefault();\n        let data = Object.fromEntries(new FormData(e.currentTarget));\n        setAction(`submit ${JSON.stringify(data)}`);\n      }}\n      onReset={() => setAction('reset')}\n      /*- end highlight -*/\n    >\n      <TextField name=\"username\" isRequired>\n        <Label>Username</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <TextField name=\"password\" type=\"password\" isRequired>\n        <Label>Password</Label>\n        <Input />\n        <FieldError />\n      </TextField>\n      <div style={{display: 'flex', gap: 8}}>\n        {/*- begin highlight -*/}\n        <Button type=\"submit\">Submit</Button>\n        <Button type=\"reset\">Reset</Button>\n        {/*- end highlight -*/}\n      </div>\n      {action && <div>Action: <code>{action}</code></div>}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling ColorSwatch Component in React\nDESCRIPTION: This example demonstrates how to provide custom labeling for the ColorSwatch component, including a specific color name and an additional context label for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSwatch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatch color=\"#f00\" aria-label=\"Background color\" colorName=\"Fire truck red\" />\n```\n\n----------------------------------------\n\nTITLE: RangeSlider with HTML Form Integration in React\nDESCRIPTION: This example demonstrates how to integrate RangeSlider with HTML forms using the startName and endName props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeSlider\n  label=\"Range\"\n  defaultValue={{start: 12, end: 36}}\n  startName=\"start\"\n  endName=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: NumberField with Unit Formatting\nDESCRIPTION: Shows how to use NumberField with unit formatting for measurements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField\n  label=\"Package width\"\n  defaultValue={4}\n  minValue={0}\n  formatOptions={{\n    style: 'unit',\n    unit: 'inch',\n    unitDisplay: 'long'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Customizing ListBox with Context and Hook Integration in React (JSX)\nDESCRIPTION: This snippet demonstrates creation of a MyListBox function component that integrates tightly with react-aria and react-aria-components using React context and custom props merging. It imports context and props-utility from 'react-aria-components' and a list box hook from 'react-aria', merges incoming props with context props, retrieves state from context, and applies the useListBox hook to derive list box behavior and props. Inputs are props and context, outputs a <div> element with the merged behavioral props. Dependencies include React, react-aria, and react-aria-components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ListBoxContext, useContextProps} from 'react-aria-components';\\nimport {useListBox} from 'react-aria';\\n\\nfunction MyListBox(props) {\\n  // Merge local props and ref with props from context.\\n  let ref = React.useRef();\\n  [props, ref] = useContextProps(props, ref, ListBoxContext);\\n\\n  // Get state sent from ComboBox via context, and call useListBox.\\n  let {state} = React.useContext(ListBoxContext);\\n  let {listBoxProps} = useListBox(props, state, ref);\\n\\n  // Render stuff\\n  return (\\n    <div {...listBoxProps}>\\n      {/* ... */}\\n    </div>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Class Names to DateInput Component\nDESCRIPTION: Example of how to apply a custom className to a DateInput component, overriding the default class name provided by React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<DateInput className=\"my-date-input\">\n  {/* ... */}\n</DateInput>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Checkbox in React Aria Table\nDESCRIPTION: Shows how to use a custom Checkbox component within a React Aria Table component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_55\n\nLANGUAGE: tsx\nCODE:\n```\n<Table>\n  <TableHeader>\n    {/* ... */}\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell><MyCustomCheckbox slot=\"selection\" /></Cell>\n      {/* ... */}\n    </Row>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: DropZone with Type-Specific Visual Feedback\nDESCRIPTION: Example of implementing type-specific drop acceptance in a DropZone using the getDropOperation prop to only accept PNG images.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [dropped, setDropped] = React.useState(false);\n\n  return (\n    <DropZone\n      getDropOperation={(types) => types.has('image/png') ? 'copy' : 'cancel'}\n      onDrop={() => setDropped(true)}>\n      {dropped ? 'Successful drop!' : 'Drop files here'}\n    </DropZone>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SearchWithin Component Usage in React\nDESCRIPTION: This example demonstrates the basic usage of the SearchWithin component with a SearchField and a Picker with multiple options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchwithin/docs/SearchWithin.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchWithin label=\"Search\">\n  <SearchField />\n  <Picker defaultSelectedKey=\"all\">\n    <Item key=\"all\">All</Item>\n    <Item key=\"campaigns\">Campaigns</Item>\n    <Item key=\"audiences\">Audiences</Item>\n    <Item key=\"tags\">Tags</Item>\n  </Picker>\n</SearchWithin>\n```\n\n----------------------------------------\n\nTITLE: Setting Fields in ZonedDateTime Objects in TypeScript\nDESCRIPTION: Shows how to use the set method to modify fields in ZonedDateTime objects. It includes examples of setting various date and time fields, and demonstrates how out-of-range values are constrained.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\ndate.set({day: 10}); // 2022-02-10T09:45[America/Los_Angeles]\ndate.set({month: 5}); // // 2022-05-03T09:45[America/Los_Angeles]\ndate.set({year: 2023, month: 10, day: 16}); // 2023-10-16T09:45[America/Los_Angeles]\ndate.set({hour: 18}); // 2022-02-03T18:45[America/Los_Angeles]\ndate.set({minute: 15}); // 2022-02-03T09:15[America/Los_Angeles]\n\nlet date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\ndate.set({day: 100}); // 2022-02-28T09:45[America/Los_Angeles]\ndate.set({month: 20}); // 2022-12-03T09:45[America/Los_Angeles]\ndate.set({hour: 30}); // 2022-02-03T23:45[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Slider with Gradient Track in React Spectrum\nDESCRIPTION: Demonstrates how to apply a gradient to the Slider's track.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider label=\"Filter density\" trackGradient={['white', 'rgba(177,141,32,1)']} defaultValue={.3} maxValue={1} step={0.01} formatOptions={{style: 'percent'}} isFilled  />\n```\n\n----------------------------------------\n\nTITLE: Using the ColorPicker Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'ColorPicker' component. It renders a component combining a color swatch preview with a customizable popover for editing the color. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorPicker />\n```\n\n----------------------------------------\n\nTITLE: Using Time Zones with DateField Component\nDESCRIPTION: Demonstrates how to use a DateField with a time zone-aware value using parseZonedDateTime from the @internationalized/date package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<MyDateField\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Divider in React Spectrum\nDESCRIPTION: Shows how to create a vertical divider between content elements by setting the orientation prop to 'vertical' within a horizontal Flex container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/divider/docs/Divider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-125\">\n  <Text>Content left</Text>\n  <Divider orientation=\"vertical\" />\n  <Text>Content right</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering with Render Props in SliderOutput\nDESCRIPTION: Shows how to use render props to customize what is displayed in the SliderOutput component based on the current state, implementing custom formatting for the value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<SliderOutput>\n  {state => `${state.getThumbValueLabel(0)} cookies`}\n</SliderOutput>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Disclosure in TSX\nDESCRIPTION: This TSX snippet demonstrates how to render a Disclosure component in a disabled state using the `isDisabled` prop. A disabled disclosure cannot be interacted with (expanded or collapsed) by the user.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Disclosure.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Disclosure isDisabled>\n  <DisclosureTitle>System Requirements</DisclosureTitle>\n  <DisclosurePanel>\n    Details about system requirements here.\n  </DisclosurePanel>\n</Disclosure>\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Focus within Tab Panels (TSX)\nDESCRIPTION: This example demonstrates the automatic focus management provided by `useTabPanel`. It shows a `Tabs` component where one panel contains a focusable `input` element (panel won't get `tabIndex`), while others contain static text (panels will get `tabIndex=\"0\"`), illustrating how keyboard navigation to panel content is handled based on its contents.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs aria-label=\"Notes app\">\n  <Item key=\"item1\" title=\"Jane Doe\">\n    <label>Leave a note for Jane: <input type=\"text\" /></label>\n  </Item>\n  <Item key=\"item2\" title=\"John Doe\">Senatus Populusque Romanus.</Item>\n  <Item key=\"item3\" title=\"Joe Bloggs\">Alea jacta est.</Item>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Checkbox Component\nDESCRIPTION: CSS code that styles the Checkbox component with various states including hover, focus, selected, indeterminate, and pressed states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Checkbox {\n  --selected-color: var(--highlight-background);\n  --selected-color-pressed: var(--highlight-background-pressed);\n  --checkmark-color: var(--highlight-foreground);\n\n  display: flex;\n  align-items: center;\n  gap: 0.571rem;\n  font-size: 1.143rem;\n  color: var(--text-color);\n  forced-color-adjust: none;\n\n  .checkbox {\n    width: 1.143rem;\n    height: 1.143rem;\n    border: 2px solid var(--border-color);\n    border-radius: 4px;\n    transition: all 200ms;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n  }\n\n  svg {\n    width: 1rem;\n    height: 1rem;\n    fill: none;\n    stroke: var(--checkmark-color);\n    stroke-width: 3px;\n    stroke-dasharray: 22px;\n    stroke-dashoffset: 66;\n    transition: all 200ms;\n  }\n\n  &[data-pressed] .checkbox {\n    border-color: var(--border-color-pressed);\n  }\n\n  &[data-focus-visible] .checkbox {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  &[data-selected],\n  &[data-indeterminate] {\n    .checkbox {\n      border-color: var(--selected-color);\n      background: var(--selected-color);\n    }\n\n    &[data-pressed] .checkbox {\n      border-color: var(--selected-color-pressed);\n      background: var(--selected-color-pressed);\n    }\n\n    svg {\n      stroke-dashoffset: 44;\n    }\n  }\n\n  &[data-indeterminate] {\n    & svg {\n      stroke: none;\n      fill: var(--checkmark-color);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pressable for Custom DialogTrigger in React Spectrum\nDESCRIPTION: Demonstrates how to create a custom trigger element for a `DialogTrigger` by wrapping a non-standard element (like a `<span>` with `role=\"button\"`) with the `<Pressable>` component from `react-aria-components`. This allows elements other than default pressable components to trigger the modal dialog.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Pressable} from 'react-aria-components';\n\n<DialogTrigger>\n  {/*- begin highlight -*/}\n  <Pressable>\n    <span role=\"button\">Custom trigger</span>\n  </Pressable>\n  {/*- end highlight -*/}\n  <Modal>\n    <Dialog>\n      <Heading slot=\"title\">Dialog</Heading>\n      <p>This dialog was triggered by a custom button.</p>\n      <Button slot=\"close\">Close</Button>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Styling Custom NativeSelect Component with CSS\nDESCRIPTION: This CSS code provides basic styling for the custom `NativeSelect` component example. It uses flexbox to arrange the label, select element, and error message vertically within the `.flex` container. It also adds specific styling (zero margin) to the error message identified by the `.invalid` class.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.flex {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n\n  .invalid {\n    margin: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Router-Specific Options to Link Components\nDESCRIPTION: Illustrates how to pass router-specific options to a React Aria link component (e.g., `MenuItem`) using the `routerOptions` prop. These options are forwarded to the router's `navigate` function, allowing control over behaviors like history replacement (`replace: true`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MenuItem href=\"/login\" routerOptions={{replace: true}}>{/* ...*/}</MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Disabled DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Uses the isDisabled prop to render a non-interactive DatePicker, visibly indicating it cannot be modified by the user. This prop is ideal for forms where a field should not be changed due to business logic or state. Accepts a label and disables all DatePicker interactions, but still displays the value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_18\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker label=\\\"Birth date\\\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ActionButton - React Spectrum - TypeScript (TSX)\nDESCRIPTION: Shows a simple usage of the ActionButton component to render a button with the label 'Edit'. No special properties or dependencies are required other than importing ActionButton. The component renders a clickable button labeled 'Edit'. Input: None. Output: A rendered ActionButton.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ActionButton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionButton>Edit</ActionButton>\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with DateField\nDESCRIPTION: Shows how to integrate DateField with HTML forms using the name prop, which enables the component to submit ISO 8601 formatted date strings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDateField label=\"Birth date\" name=\"birthday\" />\n```\n\n----------------------------------------\n\nTITLE: Basic RangeSlider Example in React\nDESCRIPTION: This example demonstrates a basic usage of the RangeSlider component with a label and default value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeSlider label=\"Range\" defaultValue={{start: 12, end: 36}} />\n```\n\n----------------------------------------\n\nTITLE: Using Built-in HTML Validation in React Aria Forms\nDESCRIPTION: Example showcasing the use of native HTML constraint validation attributes like `isRequired` and `type=\"email\"` on a `TextField`. The `FieldError` component from `react-aria-components` is used to display browser-generated validation errors with potentially custom styling when validation fails upon commit or submission.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FieldError} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <TextField name=\"email\" type=\"email\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Email</Label>\n    <Input />\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n  </TextField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Rendering the Folder Drop TableView Example (TSX)\nDESCRIPTION: Renders the `DragIntoTableFolder` component, which displays two TableViews side-by-side, demonstrating the drag-and-drop functionality for moving items from the source table into folders within the target table.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<DragIntoTableFolder />\n```\n\n----------------------------------------\n\nTITLE: Styling Vertical React Aria ColorSlider with CSS\nDESCRIPTION: This CSS snippet provides styles for a vertically oriented React Aria `ColorSlider`. It targets the component using the `data-orientation=\"vertical\"` attribute selector, sets its height, hides the label and output elements, and adjusts the width and positioning of the track and thumb.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSlider {\n  &[data-orientation=vertical] {\n    height: 150px;\n    display: block;\n\n    .react-aria-Label,\n    .react-aria-SliderOutput {\n      display: none;\n    }\n\n    .react-aria-SliderTrack {\n      width: 28px;\n      height: 100%;\n    }\n\n    .react-aria-ColorThumb {\n      left: 50%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Dynamic Items with Sections in SearchAutocomplete (TSX)\nDESCRIPTION: Illustrates creating sections with dynamic data in `SearchAutocomplete`. Hierarchical data (fruits and vegetables grouped by type) is passed via `defaultItems`, and the render function dynamically creates `<Section>` components using `item.name` for the key and title, and `item.children` for the section's items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {name: 'Fruit', children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Orange'},\n      {name: 'Honeydew'},\n      {name: 'Grapes'},\n      {name: 'Watermelon'},\n      {name: 'Cantaloupe'},\n      {name: 'Pear'}\n    ]},\n    {name: 'Vegetable', children: [\n      {name: 'Cabbage'},\n      {name: 'Broccoli'},\n      {name: 'Carrots'},\n      {name: 'Lettuce'},\n      {name: 'Spinach'},\n      {name: 'Bok Choy'},\n      {name: 'Cauliflower'},\n      {name: 'Potatoes'}\n    ]}\n  ];\n\n  return (\n    <SearchAutocomplete label=\"Preferred fruit or vegetable\" defaultItems={options}>\n      {item => (\n        <Section key={item.name} items={item.children} title={item.name}>\n          {item => <Item key={item.name}>{item.name}</Item>}\n        </Section>\n      )}\n    </SearchAutocomplete>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ColorSwatchPicker Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'ColorSwatchPicker' component. It renders a list or grid of color swatches, allowing a user to select one of them. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorSwatchPicker />\n```\n\n----------------------------------------\n\nTITLE: Styling Disclosure Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the disclosure component, including button appearance, icon rotation, and panel positioning.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/disclosure/docs/useDisclosure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.disclosure {\n  .trigger {\n    background: none;\n    border: none;\n    box-shadow: none;\n    font-weight: bold;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    color: var(--text-color);\n\n    svg {\n      rotate: 0deg;\n      transition: rotate 200ms;\n      width: 12px;\n      height: 12px;\n      fill: none;\n      stroke: currentColor;\n      stroke-width: 3px;\n    }\n\n    &[aria-expanded=\"true\"] svg {\n      rotate: 90deg;\n    }\n\n    &:disabled {\n      color: var(--gray-300);\n    }\n  }\n}\n\n.panel {\n  margin-left: 32px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Button Component Interfaces - React Spectrum - TypeScript\nDESCRIPTION: This snippet defines TypeScript interfaces for button-related components in Adobe React Spectrum, including the base props (ButtonBase), and specialized props for Button, ActionButton, and LogicButton. These interfaces specify key parameters such as variant, isQuiet, isSelected, and more, establishing consistent property contracts for button components. Prerequisites include React, the relevant props interfaces (DOMProps, StyleProps, etc.), and TypeScript support; the interfaces do not provide implementation but rather serve as blueprints for component props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Button.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ButtonBase extends DOMProps, StyleProps, PressEvents, FocusableProps {\n  isDisabled?: boolean,\n  elementType?: string | JSXElementConstructor<any>,\n  children?: ReactNode,\n  href?: string\n}\n\ninterface Button extends ButtonBase {\n  variant: 'cta' | 'overBackground' | 'primary' | 'secondary' | 'negative', // no default, must choose\n  isQuiet?: boolean\n}\n\ninterface ActionButton extends ButtonBase {\n  isQuiet?: boolean,\n  isSelected?: boolean,\n  holdAffordance?: boolean,\n  isEmphasized?: boolean\n}\n\ninterface LogicButton extends ButtonBase {\n  variant: 'and' | 'or'\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Absolute Date and Localizing to User Time Zone - React Spectrum - TypeScript/TSX\nDESCRIPTION: This code example shows how to supply a parsed absolute UTC date/time and display it localized to the user's time zone using the parseAbsoluteToLocal utility from @internationalized/date. The absolute date string is parsed and passed to the DateField as defaultValue. This is ideal for handling events that must respect the user's current time zone. Requires importing parseAbsoluteToLocal from the internationalized date package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Complete Calendar Component Anatomy in React Aria\nDESCRIPTION: Full anatomy of the Calendar component, showing the comprehensive structure with all available sub-components including grid headers and error messages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Calendar, Heading, Button, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Text} from 'react-aria-components';\n\n<Calendar>\n  <Button slot=\"previous\" />\n  <Heading />\n  <Button slot=\"next\" />\n  <CalendarGrid>\n    <CalendarGridHeader>\n      {day => <CalendarHeaderCell />}\n    </CalendarGridHeader>\n    <CalendarGridBody>\n      {date => <CalendarCell date={date} />}\n    </CalendarGridBody>\n  </CalendarGrid>\n  <Text slot=\"errorMessage\" />\n</Calendar>\n```\n\n----------------------------------------\n\nTITLE: Using the Tooltip Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'Tooltip' component. It renders a tooltip, which displays a description of an element when the user hovers over or focuses on it. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip />\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Styles to React Aria Button Component with CSS\nDESCRIPTION: This CSS snippet demonstrates how to target and style the default React Aria Button using the .react-aria-Button selector. Developers can customize backgrounds, colors, or layout here. No specific dependencies outside of correctly assigned className attributes. The snippet is intentionally minimal for developer extension.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Button {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Displaying Absolute Time with parseAbsoluteToLocal in TypeScript\nDESCRIPTION: Illustrates how to set up a TimeField component whose value is initialized by parsing an absolute UTC ISO 8601 string into the user's local time zone, using parseAbsoluteToLocal from @internationalized/date. Inputs are absolute time strings (e.g., '2021-11-07T07:45:00Z'), and the component will automatically localize them for display. This ensures correct handling of time data submitted from or to remote systems.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\\n\\n<MyTimeField\\n  label=\"Event time\"\\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Alert Dialog with React Aria Components\nDESCRIPTION: Example of creating an alert dialog that requires user confirmation before proceeding with an action. This implementation uses the role=\"alertdialog\" prop to indicate its special purpose to assistive technologies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Dialog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <Button>Delete…</Button>\n  <Modal>\n    <Dialog role=\"alertdialog\">\n      {({close}) => (\n        <>\n          <Heading slot=\"title\">Delete file</Heading>\n          <p>This will permanently delete the selected file. Continue?</p>\n          <div style={{display: 'flex', gap: 8}}>\n            <Button onPress={close}>Cancel</Button>\n            <Button onPress={close}>Delete</Button>\n          </div>\n        </>\n      )}\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Visual Variants in React Spectrum\nDESCRIPTION: These examples showcase different visual variants of tooltips, including positive, information, and negative styles with icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger>\n  <ActionButton aria-label=\"Approve\"><ThumbUp /></ActionButton>\n  <Tooltip variant=\"positive\" showIcon>Approve workflow.</Tooltip>\n</TooltipTrigger>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger>\n  <ActionButton aria-label=\"Information\"><Question /></ActionButton>\n  <Tooltip variant=\"info\" showIcon>More information menu.</Tooltip>\n</TooltipTrigger>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger>\n  <ActionButton aria-label=\"Danger Will Robinson\"><Delete /></ActionButton>\n  <Tooltip variant=\"negative\" showIcon>Dangerous action.</Tooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Documentation Metadata Configuration\nDESCRIPTION: Defines metadata for the documentation page including category, order, and description using YAML front matter.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncategory: Introduction\norder: 6\ndescription: Techniques for styling and animating React Aria Components, and integrating with other libraries.\n---\n```\n\n----------------------------------------\n\nTITLE: Labeling ColorSwatchPicker for Accessibility in TSX\nDESCRIPTION: Shows how to provide a specific accessibility label to the `ColorSwatchPicker` using the `aria-label` prop. This overrides the default localized label (\"Color swatches\") and improves screen reader support. Labels should be localized for internationalization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatchPicker aria-label=\"Fill color\">\n  <ColorSwatch color=\"#A00\" />\n  <ColorSwatch color=\"#f80\" />\n  <ColorSwatch color=\"#080\" />\n</ColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Customizable Color Picker Using React Spectrum (TypeScript)\nDESCRIPTION: This snippet shows how to render a ColorPicker component from React Spectrum using TypeScript, with a render prop that exposes the current color object. It composes the UI using ColorEditor and ColorSwatch child components, and shows a localized color name based on the user's language. The ColorPicker requires React Spectrum and suitable styling; ColorEditor and ColorSwatch are custom or library components. Key parameters include label (for accessibility) and defaultValue (the initial color hex). It outputs a custom UI arrangement updating optimally as the color changes, but depends on user language support for color naming.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx snippet\n<ColorPicker label=\\\"Fill\\\" defaultValue=\\\"#5100FF\\\">\\n  {({color}) =>\\n    <div style={{display: 'flex', flexWrap: 'wrap', gap: 24}}>{'\\n'}      <ColorEditor />{'\\n'}      <div style={{display: 'flex', flexDirection: 'column', gap: 8}}>{'\\n'}        <ColorSwatch size=\\\"L\\\" />{'\\n'}        <span>{color.getColorName(navigator.language || 'en-US')}</span>{'\\n'}      </div>{'\\n'}    </div>\\n  }\\n</ColorPicker>\\n```\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with Default Class Names in CSS\nDESCRIPTION: Example of targeting a React Aria component using its default class name pattern (react-aria-ComponentName) in CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Select {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Date Changes Around Daylight Saving Time in ZonedDateTime\nDESCRIPTION: Shows how changing the date portion of a ZonedDateTime object around a daylight saving time transition can affect the hour. It demonstrates a \"spring forward\" transition example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// A \"spring forward\" transition\nlet date = parseZonedDateTime('2020-03-07T02:00-08:00[America/Los_Angeles]');\ndate.add({days: 1}); // 2020-03-08T03:00-07:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Single Selection in React Spectrum ComboBox (TSX)\nDESCRIPTION: This snippet illustrates controlled single selection using the `selectedKey` and `onSelectionChange` props, typically used in components like ComboBox where only one item can be selected. It uses `useState` to manage the single selected item's ID (or null if none). The `selectedKey` prop reflects the current selection, and `onSelectionChange` updates the state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/selection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlet [selectedKey, setSelectedKey] = useState(null);\n\n<MyComboBox\n  /*- begin highlight -*/\n  selectedKey={selectedKey}\n  /*- end highlight -*/\n  onSelectionChange={setSelectedKey}>\n  <ListBoxItem id=\"one\">One</ListBoxItem>\n  <ListBoxItem id=\"two\">Two</ListBoxItem>\n  <ListBoxItem id=\"three\">Three</ListBoxItem>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Defining a React Server Action for Form Handling (TSX)\nDESCRIPTION: Server-side TypeScript function (`createTodo`) defined as a React Server Action using the `'use server'` directive. It takes the previous state and form data, attempts to process the data (e.g., create a resource), and returns an object containing potential validation errors in a structure compatible with the `useFormState` hook on the client.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// app/actions.ts\n'use server';\n\nexport async function createTodo(prevState: any, formData: FormData) {\n  try {\n    // Create the todo...\n  } catch (err) {\n    return {\n      errors: {\n        /*- begin highlight -*/\n        todo: 'Invalid todo.'\n        /*- end highlight -*/\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Daylight Saving Time When Setting ZonedDateTime Fields\nDESCRIPTION: Illustrates how setting fields in ZonedDateTime objects handles daylight saving time transitions. It includes examples of setting date fields across transitions and resolving ambiguous times.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = parseZonedDateTime('2020-03-01T10:00-08:00[America/Los_Angeles]');\ndate.set({day: 14}); // 2020-03-14T10:00-07:00[America/Los_Angeles]\n\n// A \"spring forward\" transition\nlet date = parseZonedDateTime('2020-03-01T02:00-08:00[America/Los_Angeles]');\ndate.set({day: 8}); // 2020-03-08T03:00:00-07:00[America/Los_Angeles]\ndate.set({day: 8}, 'earlier'); // 2020-03-08T01:00:00-08:00[America/Los_Angeles]\ndate.set({day: 8}, 'later'); // 2020-03-08T03:00:00-07:00[America/Los_Angeles]\n\n// A \"fall back\" transition\nlet date = parseZonedDateTime('2020-10-01T01:00-07:00[America/Los_Angeles]');\ndate.set({month: 11}); // 2020-11-01T01:00:00-07:00[America/Los_Angeles]\ndate.set({month: 11}, 'earlier'); // 2020-11-01T01:00:00-07:00[America/Los_Angeles]\ndate.set({month: 11}, 'later'); // 2020-11-01T01:00:00-08:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Dynamically Applying Tailwind Classes Based on State\nDESCRIPTION: This JSX snippet shows how to use a function for the `className` prop on a `ColorThumb` component. This allows dynamically applying utility classes (like Tailwind's `scale-150` or `scale-100`) based on the component's state, such as `isDragging`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorThumb className={({isDragging}) => isDragging ? 'scale-150' : 'scale-100'} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Wrapper for SliderOutput\nDESCRIPTION: Demonstrates how to create a wrapper component to customize a Slider sub-component (SliderOutput) with specific props or class names, enabling advanced customization without changing the core component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MySliderOutput(props) {\n  return <SliderOutput {...props} className=\"my-slider-output\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout Component - React Spectrum - JavaScript\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the '@react-spectrum/docs' package and sets BlogPostLayout as the default export. It is used to provide consistent layout and styling for blog posts within the React Spectrum documentation site. Requires the @react-spectrum/docs package as a dependency, and the exported layout is intended for integration with page-level Markdown or MDX content. The code expects to be run in a JavaScript/React project, and includes no special configuration beyond the import.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-06-15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Selection State with ToggleButton\nDESCRIPTION: Demonstrates how to control the selection state of a ToggleButton using React state. The component's selection is managed through the isSelected prop and onChange handler.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isSelected, setSelected] = React.useState(false);\n\n  return (\n    <ToggleButton\n      isSelected={isSelected}\n      onChange={setSelected}\n      aria-label=\"Star\">\n      ★\n    </ToggleButton>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Divider in React Spectrum\nDESCRIPTION: Demonstrates how to create a horizontal divider between content elements using the Divider component within a Flex container with column direction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/divider/docs/Divider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-125\">\n  <Text>Content above</Text>\n  <Divider />\n  <Text>Content below</Text>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing Base Component Styles for DatePicker Example using CSS Layers\nDESCRIPTION: This CSS snippet imports styles defined in other MDX files for related components (Button, Popover, Dialog, DateField, Calendar, Form) using the `@import` rule with CSS layers. This ensures that the necessary base styles are available for the DatePicker example without repeating definitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n@import './Popover.mdx' layer(popover);\n@import './Dialog.mdx' layer(dialog);\n@import './DateField.mdx' layer(datefield);\n@import './Calendar.mdx' layer(calendar);\n@import './Form.mdx' layer(form);\n```\n\n----------------------------------------\n\nTITLE: Reusable ColorArea Component Wrapper\nDESCRIPTION: Example of creating a reusable wrapper component for ColorArea with consistent styling and behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorAreaProps} from 'react-aria-components';\n\nexport function MyColorArea(props: ColorAreaProps) {\n  return (\n    <ColorArea {...props}>\n      <ColorThumb />\n    </ColorArea>\n  );\n}\n\n<MyColorArea defaultValue=\"hsl(30, 100%, 50%)\" />\n```\n\n----------------------------------------\n\nTITLE: SearchField with Custom Icon in React\nDESCRIPTION: This example demonstrates how to use a custom icon in the SearchField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField label=\"Search for users\" icon={<User />} />\n```\n\n----------------------------------------\n\nTITLE: Importing LogicButton from React Spectrum (JavaScript/JSX)\nDESCRIPTION: Demonstrates how to import the LogicButton component from the @react-spectrum/button package. This is the standard import pattern for using the LogicButton in a React application. It assumes that @react-spectrum/button is installed as a dependency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/LogicButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {LogicButton} from '@react-spectrum/button';\n```\n\n----------------------------------------\n\nTITLE: Styling Empty Table States - React Spectrum (CSS)\nDESCRIPTION: This CSS targets an empty table body in the React Spectrum Table component by selecting .react-aria-TableBody elements with the data-empty attribute. It centers text and applies italic font for clearer visual distinction of the empty state message. The rule is meant for use alongside the table’s empty state rendering logic.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_23\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-TableBody {\n  &[data-empty] {\n    text-align: center;\n    font-style: italic;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the Calendar Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'Calendar' component. It renders a calendar grid allowing users to select a single date. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Calendar />\n```\n\n----------------------------------------\n\nTITLE: Implementing MenuSection with Header in React Spectrum v3\nDESCRIPTION: Example of how to use the new MenuSection component with a Header that contains both a Heading and descriptive Text. This demonstrates the v3 pattern that replaced the Section component with title prop from v2.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/s2/api-diff.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuSection>\n  <Header>\n    <Heading>Publish and export</Heading>\n    <Text slot=\"description\">Social media, other formats</Text>\n  </Header>\n  <MenuItem>Item</MenuItem>\n</MenuSection>\n```\n\n----------------------------------------\n\nTITLE: Implementing ListView with ActionBar Selection (TypeScript, React Spectrum)\nDESCRIPTION: This example showcases how to manage user selections in a ListView and display an ActionBar for performing bulk actions on those selections. It initializes a controlled selection state and wires up event handlers for item actions and clearing selections. Required dependencies include '@adobe/react-spectrum', '@react-spectrum/actionbar', '@react-spectrum/list', related icons, and @react-spectrum/text. The key parameters are selectedKeys, setSelectedKeys, and onAction. The component returns a UI with selectable items and an ActionBar with Edit, Copy, and Delete operations. The input is user selection, and output actions are communicated via alerts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actionbar/docs/ActionBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['photoshop']));\n\n  return (\n    <ActionBarContainer height={300} maxWidth=\"size-6000\">\n      <ListView aria-label=\"ListView with action bar\" selectionMode=\"multiple\" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        isEmphasized\n        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}\n        onAction={(key) => alert(`Performing ${key} action...`)}\n        onClearSelection={() => setSelectedKeys(new Set())}>\n        <Item key=\"edit\">\n          <Edit />\n          <Text>Edit</Text>\n        </Item>\n        <Item key=\"copy\">\n          <Copy />\n          <Text>Copy</Text>\n        </Item>\n        <Item key=\"delete\">\n          <Delete />\n          <Text>Delete</Text>\n        </Item>\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Example />\n```\n\n----------------------------------------\n\nTITLE: Disabling an Entire RadioGroup in React Spectrum (TSX)\nDESCRIPTION: Demonstrates how to disable the entire `RadioGroup`, including all its `Radio` options, using the `isDisabled` prop on the `RadioGroup` component. This prevents user interaction with any radio button within the group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite sport\" isDisabled>\n  <Radio value=\"soccer\">Soccer</Radio>\n  <Radio value=\"baseball\">Baseball</Radio>\n  <Radio value=\"basketball\">Basketball</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing CalendarGrid Component in React with useCalendarGrid\nDESCRIPTION: This snippet demonstrates how to create a CalendarGrid component using the useCalendarGrid hook from React Aria. It renders a table with weekdays and dates, handling null values for dates outside the current month.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCalendarGrid} from '@react-aria/calendar';\n\nfunction CalendarGrid({state, ...props}) {\n  let {gridProps, headerProps, weekDays, weeksInMonth} = useCalendarGrid(props, state);\n\n  return (\n    <table {...gridProps}>\n      <thead {...headerProps}>\n        <tr>\n          {weekDays.map((day, index) =>\n            <th key={index}>{day}</th>\n          )}\n        </tr>\n      </thead>\n      <tbody>\n        {[...new Array(weeksInMonth).keys()].map(weekIndex => (\n          <tr key={weekIndex}>\n            {state.getDatesInWeek(weekIndex).map((date, i) => (\n              date ? (\n                <CalendarCell\n                  key={i}\n                  state={state}\n                  date={date} />\n              ) : <td key={i} />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple ColorSwatch Variants by Size - TypeScript/JSX\nDESCRIPTION: This example demonstrates creating a horizontal row of ColorSwatch instances, each with a different size prop value (XS, S, M, L) to illustrate the visual scaling options. Dependencies: ColorSwatch and Flex. Input: Hex color and size option; output: a Flex layout of swatches at varying sizes to compare dimensionally. This highlights the supported size spectrum as per Adobe's guidelines.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatch.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\\\"size-100\\\">\\n  <ColorSwatch color=\\\"#ff0\\\" size=\\\"XS\\\" />\\n  <ColorSwatch color=\\\"#ff0\\\" size=\\\"S\\\" />\\n  <ColorSwatch color=\\\"#ff0\\\" size=\\\"M\\\" />\\n  <ColorSwatch color=\\\"#ff0\\\" size=\\\"L\\\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Avatars in React\nDESCRIPTION: This example shows how to add avatars to tags in a TagGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup aria-label=\"TagGroup with avatars example\">\n  <Item textValue=\"Person 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 1</Text>\n  </Item>\n  <Item textValue=\"Person 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 2</Text>\n  </Item>\n  <Item textValue=\"Person 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 3</Text>\n  </Item>\n  <Item textValue=\"Person 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>Person 4</Text>\n  </Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering Drop Operation Visual Example with Accessible Caption\nDESCRIPTION: Creates a figure with the DropOperation SVG and an accessible caption explaining the visual feedback for a copy drop operation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/dnd.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<figure style={{display: 'flex', flexDirection: 'column', alignItems: 'center', margin: '20px 0'}}>\n  <DropOperation role=\"img\" aria-labelledby=\"drop-operation-caption\" />\n  <figcaption id=\"drop-operation-caption\" style={{fontStyle: 'italic'}}>Visual feedback for a copy drop operation.</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Styling ComboBox with CSS Selectors\nDESCRIPTION: Example showing how to style a ComboBox component using CSS selectors with the default react-aria class naming convention.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ComboBox {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Horizontal Grid ListBox with CSS\nDESCRIPTION: Complex CSS for styling a horizontal grid layout in ListBox components, including grid structure, item layout, and image positioning for a horizontally scrolling multi-row grid.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox[data-layout=grid][data-orientation=horizontal] {\n  width: 100%;\n  max-width: none;\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-rows: 58px 58px;\n  grid-template-columns: none;\n  grid-auto-columns: 250px;\n  max-height: 200px;\n  gap: 8px;\n\n  .react-aria-ListBoxItem {\n    display: grid;\n    grid-template-areas: \"image .\"\n                         \"image title\"\n                         \"image description\"\n                         \"image .\";\n    grid-template-columns: auto 1fr;\n    grid-template-rows: 1fr auto auto 1fr;\n    column-gap: 8px;\n\n    & img {\n      width: 50px;\n      height: 50px;\n      grid-area: image;\n      margin-bottom: 0;\n    }\n\n    [slot=label] {\n      grid-area: title;\n    }\n\n    [slot=description] {\n      grid-area: description;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Draggable Element Implementation in React\nDESCRIPTION: Demonstrates how to create a basic draggable element using the useDrag hook that provides data as plain text, with support for keyboard and screen reader interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrag.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Draggable() {\n  let {dragProps, isDragging} = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world'\n      }];\n    }\n  });\n\n  return (\n    <div {...dragProps} role=\"button\" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n      Drag me\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Keyboard Activation for React Spectrum Tabs\nDESCRIPTION: This snippet shows how to configure the keyboard activation behavior of the React Spectrum `Tabs` component. By setting the `keyboardActivation` prop to \"manual\", the selection will not change immediately upon pressing arrow keys. Instead, focus moves to the adjacent tab, and the user must press Enter or Space to confirm the selection and switch the active tab panel.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs aria-label=\"Input settings\" keyboardActivation=\"manual\">\n  <Item key=\"mouse\">Mouse Settings</Item>\n  <Item key=\"keyboard\">Keyboard Settings</Item>\n  <Item key=\"gamepad\">Gamepad Settings</Item>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Styling DateRangePicker Popover with Custom Widths\nDESCRIPTION: CSS example showing how to style a popover specifically for DateRangePicker using data attributes and CSS custom properties to match the trigger's width.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=DateRangePicker] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Description Slot in TimeField with CSS\nDESCRIPTION: Shows how to style elements with slot='description' within the TimeField using CSS. Sets font size specifically for help or description text. This ensures that users see supplementary guidance in a visually distinct way.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-TimeField {\\n  [slot=description] {\\n    font-size: 12px;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Drag Preview Components - CSS\nDESCRIPTION: Applies custom visual styles to the drag-preview component, including size, padding, flex layout, and color schemes. Also styles the embedded badge, using theme variables for color and border radius. Enables distinct drag preview presentation that integrates seamlessly with the rest of the UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_33\n\nLANGUAGE: CSS\nCODE:\n```\n.drag-preview {\\n  width: 150px;\\n  padding: 4px 8px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n  gap: 4px;\\n  background: var(--highlight-background);\\n  color: var(--highlight-foreground);\\n  border-radius: 4px;\\n\\n  .badge {\\n    background: var(--highlight-foreground);\\n    color: var(--highlight-background);\\n    padding: 0 8px;\\n    border-radius: 4px;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DateField State via Context in TSX\nDESCRIPTION: This example defines a `DateFormat` component that displays the expected date format within a `DateField`. It accesses the `DateField`'s state using `React.useContext(DateFieldStateContext)`. It then utilizes the `useLocale` hook and `Intl.DisplayNames` to construct a user-friendly representation of the date format based on the field's segments and the current locale. This component can be placed inside a `DateField` to provide helpful formatting hints to the user.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {DateFieldStateContext} from 'react-aria-components';\nimport {useLocale} from 'react-aria';\n\nfunction DateFormat() {\n  /*- begin highlight -*/\n  let state = React.useContext(DateFieldStateContext)!;\n  /*- end highlight -*/\n  let {locale} = useLocale();\n  let displayNames = new Intl.DisplayNames(locale, {type: 'dateTimeField'});\n  let format = state.segments.map(segment => segment.type === 'literal' ? segment.text : displayNames.of(segment.type)).join(' ');\n  return <small>{format}</small>;\n}\n\n<DateField defaultValue={today(getLocalTimeZone())}>\n  <Label>Date</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  {/*- begin highlight -*/}\n  <DateFormat />\n  {/*- end highlight -*/}\n</DateField>\n```\n```\n\n----------------------------------------\n\nTITLE: Utilizing Slots in React Spectrum Picker Component using TSX\nDESCRIPTION: This TSX snippet showcases how to use slots within a React Spectrum `Picker` component to structure `Item` content. It includes icons (e.g., `Book`, `Draw`, `BulkEditUsers`) and primary `Text` elements placed in default slots, and secondary `Text` elements assigned to the named 'description' slot using the `slot=\"description\"` prop. Dependencies include `Picker`, `Item`, `Text`, and icon components from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/layout.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Permission\" defaultSelectedKey=\"read\">\n  <Item textValue=\"Read\" key=\"read\">\n    <Book />\n    <Text>Read</Text>\n    <Text slot=\"description\">Read only</Text>\n  </Item>\n  <Item textValue=\"Write\" key=\"write\">\n    <Draw />\n    <Text>Write</Text>\n    <Text slot=\"description\">Read and write only</Text>\n  </Item>\n  <Item textValue=\"Admin\" key=\"admin\">\n    <BulkEditUsers />\n    <Text>Admin</Text>\n    <Text slot=\"description\">Full access</Text>\n  </Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Date Validation Logic in React Aria DateField (TSX)\nDESCRIPTION: This example showcases custom validation using the `validate` prop on a `DateField` (represented as `MyDateField`). The provided function checks if the selected date falls on a weekend using `isWeekend` from `@internationalized/date` and the current locale obtained via `useLocale`. If it's a weekend, it returns an error message string; otherwise, it returns `null`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from 'react-aria';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return (\n    <Form>\n      <MyDateField\n        label=\"Appointment date\"\n        /*- begin highlight -*/\n        validate={date => date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}\n        /*- end highlight -*/\n        defaultValue={parseDate('2023-10-28')} />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ComboBox Validation States with CSS\nDESCRIPTION: This CSS snippet shows how to style the invalid state of a ComboBox input and the associated error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ComboBox {\n  .react-aria-Input {\n    &[data-invalid]:not([data-focused]) {\n      border-color: var(--invalid-color);\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Picker Implementation\nDESCRIPTION: Simple example showing how to create a basic Picker component with static options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Choose frequency\">\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Styling RangeCalendar Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the RangeCalendar component, including the calendar layout, header, and individual cells.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.calendar {\n  width: 220px;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin: 0 8px;\n}\n\n.header h2 {\n  flex: 1;\n  margin: 0;\n}\n\n.calendar table {\n  width: 100%;\n}\n\n.cell {\n  cursor: default;\n  text-align: center;\n}\n\n.selected {\n  background: var(--blue);\n  color: white;\n}\n\n.unavailable {\n  color: var(--spectrum-global-color-red-600);\n}\n\n.disabled {\n  color: gray;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Picker Option Selection Using @react-spectrum/test-utils (TypeScript)\nDESCRIPTION: This test snippet validates Picker's keyboard-based option selection using test utilities from @react-spectrum/test-utils in a TypeScript environment. It sets up a \\\"User\\\" tester, renders the Picker inside a themed Provider, and simulates keyboard selection of an option, verifying resulting text content. Dependencies: React, React Testing Library, @react-spectrum/theme-default, @react-spectrum/test-utils. Inputs: Tester simulates user selection; Outputs: Picker option updates. Constraints: requires a test environment set up for React components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\n// Picker.test.ts\nimport {render} from '@testing-library/react';\nimport {theme} from '@react-spectrum/theme-default';\nimport {User} from '@react-spectrum/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// Other setup, be sure to check out the suggested mocks mentioned above in https://react-spectrum.adobe.com/react-spectrum/Picker.html#testing\n\nit('Picker can select an option via keyboard', async function () {\n  // Render your test component/app and initialize the select tester\n  let {getByTestId} = render(\n    <Provider theme={defaultTheme}>\n      <Picker data-testid=\"test-select\">\n      ...\n      </Picker>\n    </Provider>\n  );\n  let selectTester = testUtilUser.createTester('Select', {root: getByTestId('test-select'), interactionType: 'keyboard'});\n  let trigger = selectTester.trigger;\n  expect(trigger).toHaveTextContent('Select…');\n\n  await selectTester.selectOption({option: 'Cat'});\n  expect(trigger).toHaveTextContent('Cat');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pasteable Component for Text in React\nDESCRIPTION: This snippet demonstrates how to create a Pasteable component that handles pasting of text data, including custom app-specific formats. It uses the useClipboard hook to handle paste events and render the pasted content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useClipboard.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Pasteable() {\n  let [pasted, setPasted] = React.useState(null);\n  let {clipboardProps} = useClipboard({\n    async onPaste(items) {\n      let pasted = await Promise.all(\n        items\n          .filter(item => item.kind === 'text' && (item.types.has('text/plain') || item.types.has('my-app-custom-type')))\n          .map(async (item: TextDropItem) => {\n            if (item.types.has('my-app-custom-type')) {\n              return JSON.parse(await item.getText('my-app-custom-type'));\n            } else {\n              return {message: await item.getText('text/plain')};\n            }\n          })\n      );\n      setPasted(pasted);\n    }\n  });\n\n  let message = ['Paste here'];\n  if (pasted) {\n    message = pasted.map(d => {\n      let message = d.message;\n      if (d.style === 'bold') {\n        message = <strong>{message}</strong>;\n      } else if (d.style === 'italic') {\n        message = <em>{message}</em>;\n      }\n      return <div>{message}</div>;\n    });\n  }\n\n  return (\n    <div role=\"textbox\" tabIndex={0} {...clipboardProps}>\n      <div>{message || 'Paste here'}</div>\n      <kbd>⌘V</kbd>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ZonedDateTime to Time - React Spectrum - TypeScript\nDESCRIPTION: Shows extracting the time of day from a ZonedDateTime object using toTime from @internationalized/date. Must import toTime and use a valid ZonedDateTime. Output is the time string (e.g., '09:45').\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toTime} from '@internationalized/date';\n\nlet date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\ntoTime(date); // 09:45\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Stack with Flex in React Spectrum\nDESCRIPTION: Shows how to create a horizontal stack layout using the Flex component with row direction and consistent spacing between items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Flex.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"row\" height=\"size-800\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" width=\"size-800\" />\n  <View backgroundColor=\"blue-600\" width=\"size-800\" />\n  <View backgroundColor=\"magenta-600\" width=\"size-800\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Handling Drops on the Collection Root with React Spectrum (tsx)\nDESCRIPTION: This snippet illustrates how to handle drop events on the entire `GridList` collection using the `onRootDrop` callback in `useDragAndDrop`. The function asynchronously processes the dropped items, extracts their text content (plain text if available, otherwise the item name), and updates the component's state (`items`) to display the dropped content within the list. It assumes the presence of a `DraggableGridList` component elsewhere.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Item {\n  id: number,\n  name: string\n}\n\nfunction Example() {\n  let [items, setItems] = React.useState<Item[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    /*- begin highlight -*/\n    async onRootDrop(e) {\n      let items = await Promise.all(e.items.map(async (item, i) => {\n        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;\n        return {id: i, name};\n      }));\n      setItems(items);\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableGridList />\n      <MyGridList aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => 'Drop items here'}>\n        {item => <GridListItem>{item.name}</GridListItem>}\n      </MyGridList>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Individual MenuItems within a MenuButton - React Spectrum - TypeScript\nDESCRIPTION: Shows how to disable a single MenuItem (in this case, Paste) using the isDisabled prop. The disabled item is not focusable, keyboard navigable, nor does it trigger actions. No third-party dependencies required. Inputs are menu items; outputs are a rendered menu with specified disabled entry.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n<MyMenuButton label=\"Actions\">\n  <MenuItem>Copy</MenuItem>\n  <MenuItem>Cut</MenuItem>\n  {/*- begin highlight -*/}\n  <MenuItem isDisabled>Paste</MenuItem>\n  {/*- end highlight -*/}\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Using Calendar Picker Component\nDESCRIPTION: Demonstration of using the CalendarPicker component with preset date options\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {startOfWeek, startOfMonth} from '@internationalized/date';\nimport {useLocale} from 'react-aria';\n\nfunction Example() {\n  let {locale} = useLocale();\n  let now = today(getLocalTimeZone());\n\n  return (\n    <CalendarPicker>\n      <Preset date={now}>Today</Preset>\n      <Preset date={startOfWeek(now.add({weeks: 1}), locale)}>Next week</Preset>\n      <Preset date={startOfMonth(now.add({months: 1}))}>Next month</Preset>\n      <MyCalendar aria-label=\"Meeting date\" />\n    </CalendarPicker>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Calendar Components with CSS Selectors in React Spectrum (CSS)\nDESCRIPTION: Targets specific Calendar and cell states using built-in class naming conventions and data attributes in React Aria for custom styling. Usable in any CSS setup. Affects states such as selected or invalid, enabling fine-grained design customization for Calendar UI elements. There are no functional dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Calendar {\\n  /* ... */\\n}\\n\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-CalendarCell[data-selected] {\\n  /* ... */\\n}\\n\\n.react-aria-CalendarCell[data-invalid] {\\n  /* ... */\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Tag States (Selected, Focused) using CSS Data Attributes\nDESCRIPTION: Illustrates how to style different interaction states of a `Tag` component using CSS data attribute selectors provided by React Aria. It shows examples for targeting selected tags (`.react-aria-Tag[data-selected]`) and focused tags (`.react-aria-Tag[data-focused]`) to apply specific styles based on their current state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Tag[data-selected] {\n  /* ... */\n}\n\n.react-aria-Tag[data-focused] {\n  /* ... */\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Drop Operation to 'Copy' in ListViews (TSX)\nDESCRIPTION: Defines three React components: `DraggableListViewDefaultCopy`, `DroppableListViewDefaultCopy`, and `DragIntoListDefaultCopy`. `DraggableListViewDefaultCopy` sets up a source ListView using `useDragAndDrop`, defining the data format ('custom-app-type-copy-default') and handling item removal on 'move' operations in `onDragEnd`. `DroppableListViewDefaultCopy` sets up a target ListView that accepts the custom type and crucially overrides the default drop behavior using `getDropOperation: () => 'copy'`. Its `onInsert` and `onRootDrop` handlers process the dropped items, assigning new random IDs to ensure items are copied rather than moved. `DragIntoListDefaultCopy` initializes two lists with `useListData` and renders the draggable and droppable ListViews using a Flex layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true render=false\nfunction DraggableListViewDefaultCopy(props: DndListViewProps) {\n  let {list} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    getItems: (keys) => [...keys].map(key => {\n      let item = list.getItem(key);\n      // Setup the drag types and associated info for each dragged item.\n      return {\n        'custom-app-type-copy-default': JSON.stringify(item),\n        'text/plain': item.name\n      };\n    }),\n    onDragEnd: (e) => {\n      let {\n        dropOperation,\n        keys\n      } = e;\n\n      if (dropOperation === 'move') {\n        list.remove(...keys);\n      }\n    }\n  });\n\n  return (\n    <ListView\n      aria-label=\"Draggable ListView in default copy operation example\"\n      selectionMode=\"multiple\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}>\n      {item => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DroppableListViewDefaultCopy(props: DndListViewProps) {\n  let {list} = props;\n  let {dragAndDropHooks} = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type-copy-default'],\n    /*- begin highlight -*/\n    getDropOperation: () => 'copy',\n    /*- end highlight -*/\n    onInsert: async (e) => {\n      let {\n        items,\n        target\n      } = e;\n\n      /*- begin highlight -*/\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {...JSON.parse(await (item as TextDropItem).getText('custom-app-type-copy-default')), id: Math.random().toString(36).slice(2)}\n        ))\n      );\n      /*- end highlight -*/\n      if (target.dropPosition === 'before') {\n        list.insertBefore(target.key, ...processedItems);\n      } else if (target.dropPosition === 'after') {\n        list.insertAfter(target.key, ...processedItems);\n      }\n    },\n    onRootDrop: async (e) => {\n      let {\n        items\n      } = e;\n\n      /*- begin highlight -*/\n      // Create random id to allow for multiple copies of the same item\n      let processedItems = await Promise.all(\n        items.map(async (item) => (\n          {...JSON.parse(await (item as TextDropItem).getText('custom-app-type-copy-default')), id: Math.random().toString(36).slice(2)}\n        ))\n      );\n      /*- end highlight -*/\n      list.append(...processedItems);\n    }\n  });\n\n\n  return (\n    <ListView\n      aria-label=\"Droppable ListView in default copy operation example\"\n      width=\"size-3600\"\n      height=\"size-2400\"\n      dragAndDropHooks={dragAndDropHooks}\n      items={list.items}>\n      {item => (\n        <Item textValue={item.name}>\n          <Text>{item.name}</Text>\n        </Item>\n      )}\n    </ListView>\n  );\n}\n\nfunction DragIntoListDefaultCopy() {\n  let sourceList = useListData({\n    initialItems: [\n      {id: '1', type: 'file', name: 'Adobe Photoshop'},\n      {id: '2', type: 'file', name: 'Adobe XD'},\n      {id: '3', type: 'file', name: 'Adobe InDesign'},\n      {id: '4', type: 'file', name: 'Adobe AfterEffects'}\n    ]\n  });\n\n  let targetList = useListData({\n    initialItems: [\n      {id: '5', type: 'file', name: 'Adobe Dreamweaver'},\n      {id: '6', type: 'file', name: 'Adobe Fresco'},\n      {id: '7', type: 'file', name: 'Adobe Connect'},\n      {id: '8', type: 'file', name: 'Adobe Lightroom'}\n    ]\n  });\n\n\n  return (\n    <Flex wrap gap=\"size-300\">\n      <DraggableListViewDefaultCopy list={sourceList} />\n      <DroppableListViewDefaultCopy list={targetList} />\n    </Flex>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering LogicButton with Alternative Variant (TypeScript/TSX)\nDESCRIPTION: Illustrates rendering a LogicButton with the 'or' variant, using 'Or' as the visible label via children. Confirms that the component supports multiple logical variants. No external state or handlers required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/LogicButton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<LogicButton variant=\"or\">Or</LogicButton>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Draggable Rows and Drop Indicators\nDESCRIPTION: CSS styles for draggable rows and drop indicators in a React table. It adds opacity to dragging elements, styles the drag handle button, and highlights drop target indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Row {\n  &[data-dragging] {\n    opacity: 0.6;\n    transform: translateZ(0);\n  }\n\n  [slot=drag] {\n    all: unset;\n    width: 15px;\n    text-align: center;\n\n    &[data-focus-visible] {\n      border-radius: 4px;\n      outline: 2px solid var(--focus-ring-color);\n    }\n  }\n}\n\n.react-aria-DropIndicator[data-drop-target] {\n  outline: 1px solid var(--highlight-background);\n  transform: translateZ(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing InlineAlert Component in React Spectrum\nDESCRIPTION: Demonstrates how to import the InlineAlert component along with other related components from React Spectrum libraries.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/inlinealert/docs/InlineAlert.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {InlineAlert} from '@react-spectrum/inlinealert';\nimport {Content} from '@adobe/react-spectrum';\nimport {Heading} from '@react-spectrum/text';\n```\n\n----------------------------------------\n\nTITLE: Setting Date Fields Across Time Zone Transitions Using @internationalized/date - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates handling ambiguous time zone transitions, such as daylight saving time changes, using parseZonedDateTime and set methods from @internationalized/date. It shows how setting the month over a 'fall back' transition allows explicit control over which ambiguous hour is selected ('earlier' or 'later'). Dependencies include @internationalized/date. Input is a string representing a zoned date-time; output is a ZonedDateTime instance adjusted appropriately.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/date-and-time-pickers-for-all.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\\n\\n// A \"fall back\" transition\\nlet date = parseZonedDateTime('2020-10-01T01:00-07:00[America/Los_Angeles]');\\n\\ndate.set({ month: 11 }, 'earlier');\\n// => 2020-11-01T01:00:00-07:00[America/Los_Angeles]\\n\\ndate.set({ month: 11 }, 'later');\\n// => 2020-11-01T01:00:00-08:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Styling Vertical Toolbar and Non-Vertical Separator (CSS)\nDESCRIPTION: This snippet modifies the appearance of the react-aria-Toolbar when in vertical orientation and customizes the react-aria-Separator for non-vertical (horizontal) use. The toolbar adapts its layout direction and alignment, and the separator becomes a horizontal line with specific dimensions and margin. Designed to work alongside the component structure provided by React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toolbar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Toolbar {\\n  width: fit-content;\\n\\n  &[data-orientation=vertical] {\\n    flex-direction: column;\\n    align-items: start;\\n  }\\n}\\n\\n.react-aria-Separator {\\n  &:not([aria-orientation=vertical]) {\\n    border: none;\\n    height: 1px;\\n    width: 100%;\\n    margin: 10px 0;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Meter Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'Meter' component. It renders a component to represent a quantity within a known range or a fractional value (like a gauge). Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_48\n\nLANGUAGE: jsx\nCODE:\n```\n<Meter />\n```\n\n----------------------------------------\n\nTITLE: Embedding Mobile Demo Video with Captions (JSX)\nDESCRIPTION: Embeds a mobile drag and drop demonstration video (`dndMobile`) using the `Video` component, similar to the previous example, starting at time `0.1s`. It includes a nested `Track` component to add captions from a VTT file (`dndMobileVTT`), specifying source, type (`text/vtt`), language (`en-us`), label, and marking it as default. This demonstrates embedding accessible video content with captions for mobile/VoiceOver usage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/drag-and-drop.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Video\n  src={dndMobile + '#t=0.1'}\n  preload=\"metadata\"\n  controls\n  aria-label=\"Demo of drag and drop using VoiceOver on iOS\"\n  style={{maxHeight: '600px', maxWidth: 'min(100%, 1920px)', display: 'block', margin: '40px auto'}}>\n  <Track src={dndMobileVTT} default kind=\"captions\" label=\"English Captions\" srclang=\"en-us\" type=\"text/vtt\" />\n</Video>\n```\n\n----------------------------------------\n\nTITLE: Converting ZonedDateTime to CalendarDate - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates extracting only the calendar date component from a ZonedDateTime using toCalendarDate from @internationalized/date. Requires importing toCalendarDate and parsing the ZonedDateTime. Output is a date-only string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toCalendarDate} from '@internationalized/date';\n\nlet date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\ntoCalendarDate(date); // 2022-02-03\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Icons in React\nDESCRIPTION: This example demonstrates how to add icons to tags in a TagGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup aria-label=\"TagGroup with icons example\">\n  <Item textValue=\"News\">\n    <News />\n    <Text>News</Text>\n  </Item>\n  <Item textValue=\"Travel\">\n    <Airplane />\n    <Text>Travel</Text>\n  </Item>\n  <Item textValue=\"Gaming\">\n    <Game />\n    <Text>Gaming</Text>\n  </Item>\n  <Item textValue=\"Shopping\">\n    <ShoppingCart />\n    <Text>Shopping</Text>\n  </Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Language Options for Searchable Select\nDESCRIPTION: Defines an array of language objects, each containing an id and name. This data is used as options in the Searchable Select component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/searchable-select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst languages = [\n  {\"id\": \"ar\", \"name\": \"Arabic\"},\n  {\"id\": \"bn\", \"name\": \"Bengali\"},\n  {\"id\": \"bs\", \"name\": \"Bosnian\"},\n  // ... (more language entries)\n  {\"id\": \"zh\", \"name\": \"Chinese\"},\n];\n```\n\n----------------------------------------\n\nTITLE: Applying CSS States to Group Component via Data Attributes\nDESCRIPTION: These CSS snippets target the .react-aria-Group class with state-specific data attributes (data-hovered, data-focus-visible) to alter styles based on UI state. Intended for styling hover and focus indications in accessibility-friendly ways. Requires components to provide these data attributes—output is dynamic styling as user interacts with Group elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Group[data-hovered] {\\n  /* ... */\\n}\\n\\n.react-aria-Group[data-focus-visible] {\\n  /* ... */\\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Tree Components with React Aria Test Utils\nDESCRIPTION: This code demonstrates how to use @react-aria/test-utils to test Tree components. It creates a TreeTester instance to interact with the tree and verify selection behavior in a test environment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\n// Tree.test.ts\nimport {render, within} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('Tree can select a item via keyboard', async function () {\n  // Render your test component/app and initialize the Tree tester\n  let {getByTestId} = render(\n     <Tree data-testid=\"test-tree\" selectionMode=\"multiple\">\n      ...\n    </Tree>\n  );\n  let treeTester = testUtilUser.createTester('Tree', {root: getByTestId('test-tree'), interactionType: 'keyboard'});\n\n  await treeTester.toggleRowSelection({row: 0});\n  expect(treeTester.selectedRows).toHaveLength(1);\n  expect(within(treeTester.rows[0]).getByRole('checkbox')).toBeChecked();\n\n  await treeTester.toggleRowSelection({row: 1});\n  expect(treeTester.selectedRows).toHaveLength(2);\n  expect(within(treeTester.rows[1]).getByRole('checkbox')).toBeChecked();\n\n  await treeTester.toggleRowSelection({row: 0});\n  expect(treeTester.selectedRows).toHaveLength(1);\n  expect(within(treeTester.rows[0]).getByRole('checkbox')).not.toBeChecked();\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating MyColorWheel with HTML Form Input (React Spectrum, TSX)\nDESCRIPTION: Demonstrates the use of the name prop on MyColorWheel to enable form integration. When included inside a form element, this component will submit the hue value (0-360) alongside other form fields. Useful for color pickers in form-driven UIs and requires no additional dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorWheel name=\"hue\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drop Handling for Directories and Files in React\nDESCRIPTION: This example demonstrates how to implement custom drop handling for a list of directories. It allows directories to be dropped between items and only specific file types to be dropped into existing directories. The code uses the low-level 'getDropOperation' and 'onDrop' functions for fine-grained control over the drop behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DIRECTORY_DRAG_TYPE} from '@react-aria/dnd';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Images', contains: 0, accept: ['image/png', 'image/jpeg']},\n      {id: 2, name: 'Videos', contains: 0, accept: ['video/mp4']},\n      {id: 3, name: 'Documents', contains: 0, accept: ['text/plain', 'application/pdf']}\n    ]\n  });\n\n  let getDropOperation = (target, types, allowedOperations) => {\n    // When dropping on an item, check whether the item accepts the drag types and cancel if not.\n    if (target.dropPosition === 'on') {\n      let item = list.getItem(target.key);\n      return item.accept && item.accept.some(type => types.has(type)) ? allowedOperations[0] : 'cancel';\n    }\n\n    // If dropping between items, support a copy operation.\n    return types.has(DIRECTORY_DRAG_TYPE) ? 'copy' : 'cancel';\n  };\n\n  let onDrop = async e => {\n    let items = await Promise.all(\n      e.items\n        .filter(item => {\n          // Check if dropped item is accepted.\n          if (e.target.dropPosition === 'on') {\n            let folder = list.getItem(e.target.key);\n            return folder.accept.includes(item.type)\n          }\n\n          return item.kind === 'directory';\n        })\n        .map(async item => {\n          // Collect child count from dropped directories.\n          let contains = 0;\n          if (item.kind === 'directory') {\n            for await (let _ of item.getEntries()) {\n              contains++;\n            }\n          }\n\n          return {\n            id: Math.random(),\n            name: item.name,\n            contains\n          };\n        })\n    );\n\n    // Update item count if dropping on an item, otherwise insert the new items in the list.\n    if (e.target.dropPosition === 'on') {\n      let item = list.getItem(e.target.key);\n      list.update(e.target.key, {\n        ...item,\n        contains: item.contains + items.length\n      });\n    } else if (e.target.dropPosition === 'before') {\n      list.insertBefore(e.target.key, ...items);\n    } else if (e.target.dropPosition === 'after') {\n      list.insertAfter(e.target.key, ...items);\n    }\n  };\n\n  return (\n    <ListBox\n      aria-label=\"Folders\"\n      items={list.items}\n      getDropOperation={getDropOperation}\n      onDrop={onDrop}>\n      {item => (\n        <Item textValue={item.name}>\n          <div className=\"dir-item\">\n            <Folder />\n            <span>{item.name} ({item.contains} items)</span>\n          </div>\n        </Item>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ListBoxItem for Selected and Focused States - CSS\nDESCRIPTION: Applies custom styles to ListBoxItem components when they are selected or focused by targeting data attributes. No dependencies beyond CSS and React Aria's attribute interface. Used to visually indicate item states within a ListBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-ListBoxItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Compact Density in ActionGroup with React Spectrum\nDESCRIPTION: This example demonstrates how to create an ActionGroup with compact density by using the density=\"compact\" prop, which reduces spacing between buttons and merges their borders in the default style.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup density=\"compact\">\n  <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n  <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Simplified State Styling with Tailwind Plugin\nDESCRIPTION: Example showing how to use the Tailwind CSS plugin for React Aria Components to style states with simplified selectors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className=\"selected:bg-blue-400 disabled:bg-gray-100\">\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Link Component with Press Events\nDESCRIPTION: Implementation demonstrating how to handle press events with a Link component, showing different states based on interaction method.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [pointerType, setPointerType] = React.useState('');\n\n  return (\n    <>\n      <Link\n        onPressStart={e => setPointerType(e.pointerType)}\n        onPressEnd={() => setPointerType('')}>\n        Press me\n      </Link>\n      <p>{pointerType ? `You are pressing the link with a ${pointerType}!` : 'Ready to be pressed.'}</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the SearchField Component with CSS\nDESCRIPTION: Defines CSS rules to style the `SearchField` container and its child elements (`.react-aria-Input`, `.react-aria-Button`). It uses CSS variables, grid layout, and attribute selectors (`[data-focused]`, `[data-pressed]`, `[data-empty]`) to handle different states and appearance. Imports the `@react-aria/example-theme`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-SearchField {\n  display: grid;\n  grid-template-areas: \"label label\"\n                       \"input button\"\n                       \"help  help\";\n  grid-template-columns: 1fr auto;\n  align-items: center;\n  width: fit-content;\n  color: var(--text-color);\n\n  .react-aria-Input {\n    grid-area: input;\n    width: 100%;\n    padding: 0.286rem 1.714rem 0.286rem 0.286rem;\n    margin: 0;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    background: var(--field-background);\n    font-size: 1.143rem;\n    color: var(--field-text-color);\n    outline: none;\n\n    &::-webkit-search-cancel-button,\n    &::-webkit-search-decoration {\n      -webkit-appearance: none;\n    }\n\n    &::placeholder {\n      color: var(--text-color-placeholder);\n      opacity: 1;\n    }\n\n    &[data-focused] {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: -1px;\n    }\n  }\n\n  .react-aria-Button {\n    grid-area: button;\n    width: 1.143rem;\n    height: 1.143rem;\n    border-radius: 1.143rem;\n    margin-left: -1.429rem;\n    font-size: 0.857rem;\n    line-height: 0.857rem;\n    vertical-align: middle;\n    text-align: center;\n    background: var(--gray-500);\n    color: var(--gray-50);\n    border: none;\n    padding: 0;\n\n    &[data-pressed] {\n      background: var(--gray-600);\n    }\n  }\n\n  &[data-empty] button {\n    display: none;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Limited Rows in React\nDESCRIPTION: This example shows how to limit the number of initially visible rows in a TagGroup using the maxRows prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<View maxWidth=\"size-3400\" minHeight=\"size-2000\" padding=\"size-150\" borderWidth=\"thin\" borderColor=\"dark\" borderRadius=\"medium\">\n  <TagGroup\n    maxRows={2}\n    aria-label=\"Static TagGroup items example with maxRows set\">\n    <Item>News</Item>\n    <Item>Travel</Item>\n    <Item>Gaming</Item>\n    <Item>Shopping</Item>\n    <Item>Business</Item>\n    <Item>Entertainment</Item>\n    <Item>Food</Item>\n    <Item>Technology</Item>\n    <Item>Politics</Item>\n    <Item>Health</Item>\n    <Item>Science</Item>\n  </TagGroup>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Importing External Button and Form Stylesheets for React Spectrum Components (CSS)\nDESCRIPTION: This snippet demonstrates how to import external CSS files for button and form styling using CSS layers. These stylesheets are meant to extend or override default styles for Button and Form components used in React Spectrum. Prerequisites include support for CSS @import and layer features, and the corresponding external .mdx files must be present and accessible during the build process. No direct parameters are used; the result is enhanced or scoped styling for components in the current CSS context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\\n@import './Form.mdx' layer(form);\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API for Column in JSX\nDESCRIPTION: Uses the `FunctionAPI` component to render the detailed API documentation for the `Column` type or component associated with the table state. It receives the specific API definition (`docs.exports.Column`) and related documentation links (`docs.links`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.Column} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Slider with HTML Form Integration in React Spectrum\nDESCRIPTION: Demonstrates how to use the name prop for HTML form integration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider\n  label=\"Opacity\"\n  defaultValue={50}\n  name=\"opacity\" />\n```\n\n----------------------------------------\n\nTITLE: Custom First Day of Week Calendar\nDESCRIPTION: Shows how to customize the first day of the week in a Calendar component using the firstDayOfWeek prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <Calendar aria-label=\"Event date\" firstDayOfWeek=\"mon\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar Component Example\nDESCRIPTION: This snippet shows how to render the Calendar component with an aria-label for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar aria-label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Toast Container in React Spectrum\nDESCRIPTION: Shows how to render a ToastContainer at the root of a React Spectrum application to display queued toasts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/toast/docs/Toast.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx example hidden\nCODE:\n```\n<ToastContainer />\n```\n\n----------------------------------------\n\nTITLE: Default Expansion of TreeView Items - React Spectrum - TSX\nDESCRIPTION: Shows how to predefine expanded items in a TreeView using the defaultExpandedKeys prop, providing an accessible tree with a subset of items initially open. The keys must match the id props of corresponding TreeViewItems. This approach is suitable for uncontrolled expansion scenarios.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleTree\\n  aria-label=\\\"Example tree with default expanded items\\\"\\n  /*- begin highlight -*/\\n  defaultExpandedKeys={['projects', 'reports']}\\n  /*- end highlight -*/\\n/>\n```\n\n----------------------------------------\n\nTITLE: Reducing Bundle Size with Custom Calendar Creation (JSX)\nDESCRIPTION: This advanced example demonstrates how to reduce the application's bundle size by providing a custom `createCalendar` function to the `useCalendarState` hook (from `@react-stately/datepicker`). Instead of importing all calendar systems from `@internationalized/date`, this custom function only imports and handles the necessary ones (e.g., `GregorianCalendar`). This allows bundlers to tree-shake unused calendar implementations. The `useLocale` hook from `@react-aria/i18n` is used to get the current locale.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCalendarState} from '@react-stately/datepicker';\nimport {useLocale} from '@react-aria/i18n';\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction createCalendar(identifier) {\n  switch (identifier) {\n    case 'gregory':\n      return new GregorianCalendar();\n    default:\n      throw new Error(`Unsupported calendar ${identifier}`);\n  }\n}\n\nfunction Calendar(props) {\n  let {locale} = useLocale();\n  let state = useCalendarState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom NumberField with Standard Components\nDESCRIPTION: This example shows how to use the custom NumberField implementation with standard React Aria Components. The custom component provides context values, allowing the standard components to be reused.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<CustomNumberField>\n  <Label>Width</Label>\n  <Group>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n    <Button slot=\"decrement\">-</Button>\n  </Group>\n</CustomNumberField>\n```\n\n----------------------------------------\n\nTITLE: Using the Checkbox Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'Checkbox' component. It renders a checkbox, allowing a user to select or deselect an individual option. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox />\n```\n\n----------------------------------------\n\nTITLE: Applying the Quiet Style to a Disclosure in TSX\nDESCRIPTION: This TSX snippet illustrates how to apply the 'quiet' visual variant to a Disclosure component using the `isQuiet` prop. This typically results in a less prominent visual appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Disclosure.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Disclosure isQuiet>\n  <DisclosureTitle>System Requirements</DisclosureTitle>\n  <DisclosurePanel>\n    Details about system requirements here.\n  </DisclosurePanel>\n</Disclosure>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in JavaScript\nDESCRIPTION: This snippet imports the `Layout` component from `@react-spectrum/docs` and immediately exports it as the default export. This is likely used as the standard page layout for the documentation site.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/Collection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Disabled RadioGroup in React\nDESCRIPTION: Demonstrates how to disable an entire RadioGroup or individual Radio options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite avatar\" isDisabled>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite avatar\">\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\" isDisabled>Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependent Component Styles in CSS\nDESCRIPTION: Imports CSS styles for Button and Form components from their respective MDX files using the `@import` rule with layering. This ensures the necessary base styles are available for the `SearchField` example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n@import './Form.mdx' layer(form);\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Directory Items in ListBox\nDESCRIPTION: CSS styles for directory items in a ListBox component, providing proper layout and text overflow handling for displaying file and folder items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_47\n\nLANGUAGE: css\nCODE:\n```\n.dir-item {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.dir-item {\n  flex: 0 0 auto;\n}\n\n.dir-item {\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing React Aria Tabs className\nDESCRIPTION: Shows how to override the default className of a React Aria Tabs component with a custom one.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs className=\"my-tabs\">\n  {/* ... */}\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Components with Spectrum Styles\nDESCRIPTION: Illustrates how to use the View component to create a custom container with Spectrum-defined styling variables.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/styling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  borderWidth=\"thin\"\n  borderColor=\"dark\"\n  borderRadius=\"medium\"\n  padding=\"size-250\">\n  <TextField label=\"Name\" />\n</View>\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Composition with Custom Input\nDESCRIPTION: Shows how to create a wrapper component to customize the Input component within a SearchField while preserving the original functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyInput(props) {\n  return <Input {...props} className=\"my-input\" />\n}\n```\n\n----------------------------------------\n\nTITLE: FileTrigger with Specific File Type Acceptance\nDESCRIPTION: Demonstrates how to configure FileTrigger to accept only specific file types (PNG images in this example).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/filetrigger/docs/FileTrigger.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTrigger acceptedFileTypes={['image/png']}>\n  <Button variant=\"primary\">Select files</Button>\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: TextField with Visual Options in React\nDESCRIPTION: These examples demonstrate various visual options for the TextField component, including quiet, disabled, and read-only states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField label=\"Email\" isQuiet />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField label=\"Email\" isDisabled />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField label=\"Email\" defaultValue=\"abc@adobe.com\" isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Button in React Aria Components\nDESCRIPTION: Basic example showing how to implement a Button component from React Aria Components with a simple press handler.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button} from 'react-aria-components';\n\n<Button onPress={() => alert('Hello world!')}>Press me</Button>\n```\n\n----------------------------------------\n\nTITLE: Disabling a ToggleButton in TSX\nDESCRIPTION: Illustrates how to disable a `ToggleButton` using the `isDisabled` boolean prop. A disabled button is visually indicated and does not respond to user interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ToggleButton.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButton isDisabled>Pin</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Enforcing Step Increments with and without Bounds - React Spectrum - TypeScript\nDESCRIPTION: Illustrates configuring NumberField with the step prop alone or in combination with minValue and maxValue. The first field snaps values to multiples of 10 from zero. The second starts at 2 with steps of 3. The third restricts stepping to between 2 and 21. Intermediate values are rounded to the nearest step on blur.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<MyNumberField\n  label=\"Step\"\n  step={10} />\n<MyNumberField\n  label=\"Step + minValue\"\n  minValue={2}\n  step={3} />\n<MyNumberField\n  label=\"Step + minValue + maxValue\"\n  minValue={2}\n  maxValue={21}\n  step={3} />\n```\n\n----------------------------------------\n\nTITLE: Associating Help Text with NumberField via Description Slot - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates how to provide auxiliary guidance to users with the description slot, associating a Text component to offer contextual help (e.g., units) for a NumberField instance. Isolates the description using the slot prop for accessibility and custom style attachment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<NumberField>\n  <Label>Width</Label>\n  <Group>\n    <Button slot=\"decrement\">-</Button>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n  </Group>\n  {/*- begin highlight -*/}\n  <Text slot=\"description\">Enter a width in centimeters.</Text>\n  {/*- end highlight -*/}\n</NumberField>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of Well Component in React Spectrum with TSX\nDESCRIPTION: This example shows how to render a basic `Well` component with simple text content passed as children. It visually sets apart the enclosed content with a distinct background and border.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/well/docs/Well.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Well>Better a little which is well done, than a great deal imperfectly.</Well>\n```\n\n----------------------------------------\n\nTITLE: Partial Date Comparison in TypeScript\nDESCRIPTION: Shows how to use the isSameMonth function for partial date comparison, which works across different calendar systems.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isSameMonth, IslamicUmalquraCalendar} from '@internationalized/date';\n\nisSameMonth(new CalendarDate(2021, 4, 16), new CalendarDate(2021, 4, 30)); // true\nisSameMonth(new CalendarDate(2021, 4, 16), new CalendarDate(2021, 8, 2)); // false\nisSameMonth(new CalendarDate(2021, 4, 16), new CalendarDate(new IslamicUmalquraCalendar(), 1442, 9, 4)); // true\n```\n\n----------------------------------------\n\nTITLE: Styling Link State with CSS Attribute Selectors - CSS\nDESCRIPTION: Demonstrates targeting the Link component's current state using a data attribute selector in CSS. Adding a style rule for .react-aria-Link[data-current] allows custom visual cues for the current breadcrumb or navigation item. This requires the Link component from React Aria and properly configured CSS inclusion in your build system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Link[data-current] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Keyboard Dismissal for a Modal with react-aria-components in TSX\nDESCRIPTION: Illustrates how to prevent a modal from being closed by pressing the Escape key. This is done by setting the `isKeyboardDismissDisabled` prop to true on the `Modal` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <Button>Open dialog</Button>\n  <Modal isKeyboardDismissDisabled>\n    <Dialog>\n      <Heading slot=\"title\">Notice</Heading>\n      <p>You must close this dialog using the button below.</p>\n      <Button slot=\"close\">Close</Button>\n    </Dialog>\n  </Modal>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using Vertical Orientation for React Spectrum Tabs\nDESCRIPTION: This example demonstrates how to change the orientation of the React Spectrum `Tabs` component from the default horizontal layout to a vertical one. This is achieved by setting the `orientation` prop to `\"vertical\"`. Note that this only affects the internal logic and accessibility attributes; custom styling is required to visually render the tabs vertically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs aria-label=\"Chat log orientation example\" orientation=\"vertical\">\n  <Item key=\"item1\" title=\"John Doe\">\n    There is no prior chat history with John Doe.\n  </Item>\n  <Item key=\"item2\" title=\"Jane Doe\">\n    There is no prior chat history with Jane Doe.\n  </Item>\n  <Item key=\"item3\" title=\"Joe Bloggs\">\n    There is no prior chat history with Joe Bloggs.\n  </Item>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Link with useLink\nDESCRIPTION: This example demonstrates how to create a disabled link using the useLink hook. It shows how to handle the isDisabled prop and apply appropriate styling for the disabled state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/link/docs/useLink.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Link(props) {\n  let ref = React.useRef(null);\n  let {linkProps} = useLink(props, ref);\n\n  return (\n    <a\n      {...linkProps}\n      ref={ref}\n      style={{\n        color: props.isDisabled ? 'var(--gray)' : 'var(--blue)',\n        cursor: props.isDisabled ? 'default' : 'pointer'\n      }}>\n      {props.children}\n    </a>\n  );\n}\n\n<Link href=\"https://adobe.com\" target=\"_blank\" isDisabled>Disabled link</Link>\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Flex Direction in React Spectrum using TSX\nDESCRIPTION: This TSX snippet shows how to set the `direction` prop for a React Spectrum `Flex` component using object syntax for responsiveness. The direction is 'row' on smaller screens (base) and changes to 'column' at the large (L) breakpoint and above. Requires the `Flex` component from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/layout.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction={{base: 'row', L: 'column'}} />\n```\n\n----------------------------------------\n\nTITLE: Handling File Drop Data in React Spectrum Tables\nDESCRIPTION: This example demonstrates how to accept and handle dropped image files in a table. It filters for JPEG and PNG files using acceptedDragTypes, retrieves the file data using getFile, and renders the images by creating object URLs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isFileDropItem} from 'react-aria-components';\n\ninterface ImageItem {\n  id: number,\n  url: string,\n  name: string,\n  type: string,\n  lastModified: number\n}\n\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['image/jpeg', 'image/png'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items.filter(isFileDropItem).map(async item => {\n          let file = await item.getFile();\n          return {\n            id: Math.random(),\n            url: URL.createObjectURL(file),\n            name: item.name,\n            type: file.type,\n            lastModified: file.lastModified\n          };\n        })\n      );\n      setItems(items);\n    }\n  });\n\n  return (\n    <Table\n      aria-label=\"Droppable table\"\n      dragAndDropHooks={dragAndDropHooks}>\n      <TableHeader>\n        <Column>Image</Column>\n        <Column isRowHeader>Name</Column>\n        <Column>Type</Column>\n        <Column>Last Modified</Column>\n      </TableHeader>\n      <TableBody items={items} renderEmptyState={() => 'Drop images here'}>\n        {item => (\n          <Row>\n            <Cell><img src={item.url} /></Cell>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.type}</Cell>\n            <Cell>{new Date(item.lastModified).toLocaleString()}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Cell img {\n  height: 30px;\n  width: 30px;\n  object-fit: cover;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Basic Modal Overlay and Content with CSS\nDESCRIPTION: Provides CSS rules for styling the `.react-aria-ModalOverlay` and `.react-aria-Modal` classes. It includes styles for positioning, background, shadow, border, and defines `modal-fade` and `modal-zoom` keyframe animations for entry and exit transitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ModalOverlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: var(--visual-viewport-height);\n  background: rgba(0 0 0 / .5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 100;\n\n  &[data-entering] {\n    animation: modal-fade 200ms;\n  }\n\n  &[data-exiting] {\n    animation: modal-fade 150ms reverse ease-in;\n  }\n}\n\n.react-aria-Modal {\n  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);\n  border-radius: 6px;\n  background: var(--overlay-background);\n  color: var(--text-color);\n  border: 1px solid var(--gray-400);\n  outline: none;\n  max-width: 300px;\n\n  &[data-entering] {\n    animation: modal-zoom 300ms cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n\n  .react-aria-TextField {\n    margin-bottom: 8px;\n  }\n}\n\n@keyframes modal-fade {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes modal-zoom {\n  from {\n    transform: scale(0.8);\n  }\n\n  to {\n    transform: scale(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Image with Object Fit in React Spectrum\nDESCRIPTION: Demonstrates how to use the objectFit property to control how the image fits within its container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/image/docs/Image.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex width=\"100%\" height=\"200px\">\n  <Image\n    src=\"https://i.imgur.com/c3gTKSJ.jpg\"\n    alt=\"Eiffel Tower at sunset\"\n    objectFit=\"cover\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: DateField with Placeholder Values and Time Zones\nDESCRIPTION: Demonstrates setting placeholder values with specific time zones\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {now} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  granularity=\"second\" />\n<DateField\n  label=\"Event date\"\n  placeholderValue={now('America/New_York')}\n  granularity=\"second\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Value Label in Meter Component\nDESCRIPTION: This example shows how to use a custom value label in the Meter component by setting the valueLabel prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/meter/docs/useMeter.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Meter\n  label=\"Space used\"\n  valueLabel=\"54 of 60GB\"\n  value={90} />\n```\n\n----------------------------------------\n\nTITLE: Managing Selection with Dynamic Data using useListData Hook (TSX)\nDESCRIPTION: This snippet demonstrates using the `useListData` hook from `react-stately` to manage both collection data and selection state dynamically. The hook handles updates to the selection state automatically when items are added or removed. The example shows initializing the list with items and selected keys, and how removing an item (`list.remove`) also updates the `list.selectedKeys` state, which is then passed to the `ListBox` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/selection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from 'react-stately';\n\nlet list = useListData({\n  initialItems: [\n    {name: 'Aardvark'},\n    {name: 'Kangaroo'},\n    {name: 'Snake'}\n  ],\n  initialSelectedKeys: ['Kangaroo'],\n  getKey: item => item.name\n});\n\nfunction removeItem() {\n  /*- begin highlight -*/\n  // Removing the list item will also remove it from the selection state.\n  list.remove('Kangaroo');\n  /*- end highlight -*/\n}\n\n<ListBox\n  items={list.items}\n  selectedKeys={list.selectedKeys}\n  onSelectionChange={list.setSelectedKeys}>\n  {item => <ListBoxItem id={item.name}>{item.name}</ListBoxItem>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: IllustratedMessage for 500 Internal Server Error\nDESCRIPTION: Example using the Error illustration to display a 500 internal server error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport Error from '@spectrum-icons/illustrations/Error';\n\n<IllustratedMessage>\n  <Error />\n  <Heading>Error 500: Internal server error</Heading>\n  <Content>Something went wrong. Please try again later.</Content>\n</IllustratedMessage>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria DatePicker Validation States with CSS\nDESCRIPTION: This CSS snippet provides styles for a React Aria DatePicker, specifically targeting validation states. It adds a '🚫' symbol using a pseudo-element (`::after`) to the `.react-aria-DateInput` when the parent `.react-aria-DatePicker` has the `data-invalid` attribute. It also styles the `.react-aria-FieldError` component with a smaller font size and a custom color variable (`--invalid-color`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-DatePicker {\n  &[data-invalid] {\n    .react-aria-DateInput:after {\n      content: '🚫' / '';\n      content: '🚫';\n      alt: ' ';\n      flex: 1;\n      text-align: end;\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n  ```\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalizedStringProvider in Next.js App Router\nDESCRIPTION: Adds the LocalizedStringProvider component to the root layout in Next.js App Router to include locale-specific strings in the initial HTML.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/[lang]/layout.tsx\nimport {LocalizedStringProvider} from 'react-aria-components/i18n';\n\nexport default function RootLayout(\n  {children, params: {lang}}:\n  {children: React.ReactNode, params: {lang: string}}\n) {\n  return (\n    <html lang={lang}>\n      <body>\n        <LocalizedStringProvider locale={lang} />\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TreeView and Supporting Components - JSX/JavaScript\nDESCRIPTION: Imports the TreeView, TreeViewItem, and TreeViewItemContent components from '@react-spectrum/tree', along with icons and layout utilities from the React Spectrum library. This sets up the required dependencies and visual assets to render and visually enhance tree navigation UIs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Folder from '@spectrum-icons/workflow/Folder';\\nimport {Flex} from '@react-spectrum/layout';\\nimport FileTxt from '@spectrum-icons/workflow/FileTxt';\\nimport GlobeOutline from '@spectrum-icons/workflow/GlobeOutline';\\nimport Image from '@spectrum-icons/workflow/Image';\\nimport Edit from '@spectrum-icons/workflow/Edit';\\nimport Delete from '@spectrum-icons/workflow/Delete';\\nimport {Text} from '@react-spectrum/text';\\nimport {Collection, TreeView, TreeViewItem, TreeViewItemContent} from '@react-spectrum/tree';\\nimport {JSX} from \\\"react\\\";\\nimport {Key} from \\\"@react-types/shared\\\";\\nimport {ActionGroup, Item} from '@react-spectrum/actiongroup';\\nimport {ActionMenu} from '@react-spectrum/menu';\n```\n\n----------------------------------------\n\nTITLE: Handling Text Drop Data in React Spectrum Tables\nDESCRIPTION: This example shows how to handle text drop data in a custom format using the acceptedDragTypes prop. The dropped items are filtered to include only items with the specified type, and the custom format is retrieved using getText.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\nfunction DroppableTable() {\n  let [items, setItems] = React.useState<Pokemon[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['pokemon'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('pokemon')))\n      );\n      setItems(items);\n    }\n  });\n\n  return (\n    <PokemonTable\n      items={items}\n      dragAndDropHooks={dragAndDropHooks}\n      renderEmptyState={() => 'Drop items here'} />\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  {/* see above */}\n  <DraggableTable />\n  <DroppableTable />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Controlled MenuTrigger Example\nDESCRIPTION: Example showing controlled behavior of MenuTrigger using isOpen prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/MenuTrigger.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [open, setOpen] = React.useState(false);\n\n  return (\n    <MenuTrigger\n      isOpen={open}\n      onOpenChange={setOpen}>\n      <ActionButton>\n        View\n      </ActionButton>\n      <Menu selectionMode=\"multiple\">\n        <Item key=\"side\">Side bar</Item>\n        <Item key=\"options\">Page options</Item>\n        <Item key=\"edit\">Edit Panel</Item>\n      </Menu>\n    </MenuTrigger>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing TreeView Selection with Test Utils in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to test row selection functionality in a React Spectrum TreeView component using `@react-spectrum/test-utils`. It initializes a `User` instance for simulating interactions, renders the TreeView component within a `Provider`, creates a `TreeTester` instance associated with the rendered TreeView, and then simulates keyboard actions (`toggleRowSelection`) to select and deselect rows, verifying the selection state using `expect` assertions with `@testing-library/react` helpers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Tree.test.ts\nimport {render, within} from '@testing-library/react';\nimport {theme} from '@react-spectrum/theme-default';\nimport {User} from '@react-spectrum/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// Other setup, be sure to check out the suggested mocks mentioned above in https://react-spectrum.adobe.com/react-spectrum/TreeView.html#testing\n\nit('TreeView can select a row via keyboard', async function () {\n  // Render your test component/app and initialize the Tree tester\n  let {getByTestId} = render(\n    <Provider theme={defaultTheme}>\n      <TreeView data-testid=\"test-tree\" selectionMode=\"multiple\">\n        ...\n      </TreeView>\n    </Provider>\n  );\n  let treeTester = testUtilUser.createTester('Tree', {root: getByTestId('test-tree'), interactionType: 'keyboard'});\n\n  await treeTester.toggleRowSelection({row: 0});\n  expect(treeTester.selectedRows).toHaveLength(1);\n  expect(within(treeTester.rows[0]).getByRole('checkbox')).toBeChecked();\n\n  await treeTester.toggleRowSelection({row: 1});\n  expect(treeTester.selectedRows).toHaveLength(2);\n  expect(within(treeTester.rows[1]).getByRole('checkbox')).toBeChecked();\n\n  await treeTester.toggleRowSelection({row: 0});\n  expect(treeTester.selectedRows).toHaveLength(1);\n  expect(within(treeTester.rows[0]).getByRole('checkbox')).not.toBeChecked();\n});\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom String Dictionary with getLocalizationScript in Remix (tsx)\nDESCRIPTION: Illustrates passing a custom `LocalizedStringDictionary` as the second argument to the `getLocalizationScript` function when using React Spectrum within a Remix application. This is an alternative way to apply the optimized string dictionary, specific to Remix integration. Requires the `getLocalizationScript` function and a pre-generated dictionary.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ngetLocalizationScript(locale, dictionary)\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Date Formatting\nDESCRIPTION: Example of handling onChange events in RangeCalendar and formatting the selected date range using the user's locale.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: parseDate('2020-07-03'),\n    end: parseDate('2020-07-10')\n  });\n  let formatter = useDateFormatter({dateStyle: 'long'});\n\n  return (\n    <>\n      <MyRangeCalendar aria-label=\"Date range\" value={range} onChange={setRange} />\n      <p>\n        Selected date:{' '}\n        {formatter.formatRange(\n          range.start.toDate(getLocalTimeZone()),\n          range.end.toDate(getLocalTimeZone())\n        )}\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: MenuTrigger with Open State Management\nDESCRIPTION: Example demonstrating how to handle open state changes in a MenuTrigger component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/MenuTrigger.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <Flex gap=\"size-100\" alignItems=\"center\">\n      <MenuTrigger onOpenChange={setIsOpen}>\n        <ActionButton>\n            Edit\n        </ActionButton>\n        <Menu>\n          <Item key=\"cut\">Cut</Item>\n          <Item key=\"copy\">Copy</Item>\n          <Item key=\"paste\">Paste</Item>\n        </Menu>\n      </MenuTrigger>\n      <div>Currently open: {isOpen.toString()}</div>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Droppable ListBox with CSS\nDESCRIPTION: This CSS snippet provides styles for the droppable ListBox component, including styles for the listbox container, individual options, selected items, focus states, and drop target indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[role=listbox] {\n  padding: 0;\n  margin: 5px 0;\n  list-style: none;\n  box-shadow: inset 0 0 0 1px gray;\n  max-width: 250px;\n  outline: none;\n  min-height: 50px;\n  overflow: auto;\n}\n\n[role=listbox]:empty {\n  box-sizing: border-box;\n  border: 1px dashed gray;\n  box-shadow: none;\n}\n\n.option {\n  padding: 3px 6px;\n  outline: none;\n}\n\n.option[aria-selected=true] {\n  background: blueviolet;\n  color: white;\n}\n\n.option.focus-visible {\n  box-shadow: inset 0 0 0 2px orange;\n}\n\n.option.drop-target {\n  border-color: transparent;\n  box-shadow: inset 0 0 0 2px var(--blue);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Form Alert Element\nDESCRIPTION: CSS code that styles an alert element within a Form component to provide visual feedback for validation errors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Form [role=alert] {\n  border: 2px solid var(--invalid-color);\n  background: var(--overlay-background);\n  border-radius: 6px;\n  padding: 12px;\n  max-width: 250px;\n  outline: none;\n\n  &:focus-visible {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  h3 {\n    margin-top: 0;\n  }\n\n  p {\n    margin-bottom: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'help' Variant for ContextualHelp in React\nDESCRIPTION: Shows an example of the ContextualHelp component using `variant=\"help\"`. This variant displays a help icon as the trigger and is intended for more detailed guidance, potentially including links or richer content within the popover.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/contextualhelp/docs/ContextualHelp.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ContextualHelp variant=\"help\">\n  <Heading>What is a segment?</Heading>\n  <Content><Text>Segments identify who your visitors are, what devices and services they use, where they navigated from, and much more.</Text></Content>\n  <Footer><Link>Learn more about segments</Link></Footer>\n</ContextualHelp>\n```\n\n----------------------------------------\n\nTITLE: Custom Label Component Implementation\nDESCRIPTION: Example of creating a custom label component using LabelContext and useContextProps.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Focused Date in React Spectrum RangeCalendar using TSX\nDESCRIPTION: Demonstrates controlling the focused date and visible month using the `focusedValue` prop bound to React state and updating it via the `onFocusChange` callback. An initial focused date is set using `useState` and a button allows resetting the focus back to this initial date. Requires `CalendarDate` from `@internationalized/date` and `React.useState`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\n\n  return (\n    <>\n      <button style={{marginBottom: 20}} onClick={() => setFocusedDate(defaultDate)}>Reset focused date</button>\n      <MyRangeCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet DateRangePicker\nDESCRIPTION: Example showing how to create a DateRangePicker with the quiet visual styling using the isQuiet prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" isQuiet />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Disabled ColorArea Component in React Spectrum\nDESCRIPTION: This example demonstrates how to create a disabled ColorArea component using React Spectrum. The component is initialized with a default hex color value (#7f0000) and the isDisabled property set to true.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea} from '@react-spectrum/color';\n\n<ColorArea defaultValue=\"#7f0000\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Component in React with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Dialog component using the useDialog hook from React Aria. It provides a reusable dialog structure with title support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaDialogProps} from '@react-aria/dialog';\nimport {useDialog} from '@react-aria/dialog';\n\ninterface DialogProps extends AriaDialogProps {\n  title?: React.ReactNode,\n  children: React.ReactNode\n}\n\nfunction Dialog({title, children, ...props}: DialogProps) {\n  let ref = React.useRef(null);\n  let {dialogProps, titleProps} = useDialog(props, ref);\n\n  return (\n    <div {...dialogProps} ref={ref} style={{padding: 30}}>\n      {title &&\n        <h3 {...titleProps} style={{marginTop: 0}}>\n          {title}\n        </h3>\n      }\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Quiet Styled ListView in React Spectrum - TypeScript/TSX\nDESCRIPTION: This snippet presents a ListView in a 'quiet' appearance by passing the isQuiet prop. It shows how to encapsulate ListView rendering in a reusable ListExample function component, allowing additional props and maintaining code modularity. Inputs include arbitrary props and hardcoded list items, while outputs are styled ListView components suitable for compact or subtle UIs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_24\n\nLANGUAGE: TSX\nCODE:\n```\nfunction ListExample(props) {\\n  return (\\n    <ListView selectionMode=\\\"multiple\\\" aria-label=\\\"Quiet ListView example\\\" width=\\\"size-3000\\\" {...props}>\\n      <Item>Adobe AfterEffects</Item>\\n      <Item>Adobe Dreamweaver</Item>\\n      <Item>Adobe Acrobat</Item>\\n    </ListView>\\n  );\\n}\\n\\n<ListExample isQuiet />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Keys for Dynamic Collection Items\nDESCRIPTION: Demonstrates how to specify custom keys for items in a dynamic collection when the default id or key properties are not available.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet [animals, setAnimals] = useState([\n  {name: 'Aardvark'},\n  {name: 'Kangaroo'},\n  {name: 'Snake'}\n]);\n\n<ListBox items={animals}>\n  {item => <Item key={item.name}>{item.name}</Item>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Importing Button from Individually Versioned React Spectrum Package - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to import the Button component from the individually versioned @react-spectrum/button package in a TypeScript React app. This pattern allows projects to selectively update or test a single component's version. You must have @react-spectrum/button installed in your project, and should ensure version compatibility between this and other related packages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/versioning.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button} from '@react-spectrum/button';\n```\n\n----------------------------------------\n\nTITLE: Rendering Sortable Table Column Headers with Focus Management - TypeScript/React\nDESCRIPTION: Implements the TableColumnHeader component, combining useTableColumnHeader (for ARIA and keyboard navigation) and useFocusRing (for visible focus outlines) hooks, with logic for rendering sorting indicators. Handles showing an ascending or descending icon based on state, using visually hidden spaces to preserve layout. Requires @react-aria/table, @react-aria/focus, @react-aria/utils, React, and receives column definition and table state as props. Used within header rows for sortable and static headers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTableColumnHeader} from '@react-aria/table';\\n\\nfunction TableColumnHeader({column, state}) {\\n  let ref = useRef<HTMLTableCellElement | null>(null);\\n  let {columnHeaderProps} = useTableColumnHeader({node: column}, state, ref);\\n  let {isFocusVisible, focusProps} = useFocusRing();\\n  let arrowIcon = state.sortDescriptor?.direction === 'ascending' ? '▲' : '▼';\\n\\n  return (\\n    <th\\n      {...mergeProps(columnHeaderProps, focusProps)}\\n      style={{\\n        textAlign: column.colSpan > 1 ? 'center' : 'left',\\n        padding: '5px 10px',\\n        outline: 'none',\\n        boxShadow: isFocusVisible ? 'inset 0 0 0 2px orange' : 'none',\\n        cursor: 'default'\\n      }}\\n      ref={ref}>\\n      {column.rendered}\\n      {column.props.allowsSorting &&\\n        <span aria-hidden=\"true\" style={{padding: '0 2px', visibility: state.sortDescriptor?.column === column.key ? 'visible' : 'hidden'}}>\\n          {arrowIcon}\\n        </span>\\n      }\\n    </th>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ColorArea Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'ColorArea' component. It renders an area control allowing users to adjust two channels of a color value simultaneously (e.g., saturation and brightness). Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorArea />\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-only DateField\nDESCRIPTION: This example shows how to create a read-only DateField component with a preset value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField label=\"Birth date\" value={today(getLocalTimeZone())} isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Migration Guide - NumberField v2 to v3\nDESCRIPTION: Markdown table showing the property changes between v2 and v3 of the NumberField component, including renamed properties and new additions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/NumberField.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **v2**           | **v3**               | **Notes** |\n| ---------------- | -------------------- | --------- |\n| `<NumberInput>`  | `<NumberField>`      |           |\n| `min`            | `minValue`           |           |\n| `max`            | `maxValue`           |           |\n| `decrementTitle` | `decrementAriaLabel` |           |\n| `incrementTitle` | `incrementAriaLabel` |           |\n| -                | `hideStepper`        | added     |\n| -                | `formatOptions`      | added     |\n```\n\n----------------------------------------\n\nTITLE: Targeting Slider States with CSS Data Attributes\nDESCRIPTION: Shows how to use CSS selectors with data attributes to target different UI states of Slider components, such as dragging or focused states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-SliderThumb[data-dragging] {\n  /* ... */\n}\n\n.react-aria-SliderThumb[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Variants of CheckboxGroup Labeling and Requirement States (TypeScript)\nDESCRIPTION: This code demonstrates four CheckboxGroup variants, highlighting the use of isRequired and necessityIndicator props to visually communicate field requirement status. The Flex component arranges multiple CheckboxGroups with different prop combinations, enabling testing of label display logic and how required/optional states are conveyed. Useful for testing accessibility and UI consistency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\\\"size-300\\\" wrap>\\n  <CheckboxGroup label=\\\"Favorite sports\\\">\\n    <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n    <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n    <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n  </CheckboxGroup>\\n  <CheckboxGroup label=\\\"Favorite sports\\\" isRequired necessityIndicator=\\\"icon\\\">\\n    <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n    <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n    <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n  </CheckboxGroup>\\n  <CheckboxGroup label=\\\"Favorite sports\\\" isRequired necessityIndicator=\\\"label\\\">\\n    <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n    <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n    <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n  </CheckboxGroup>\\n  <CheckboxGroup label=\\\"Favorite sports\\\" necessityIndicator=\\\"label\\\">\\n    <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n    <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n    <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n  </CheckboxGroup>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Name in Markdown\nDESCRIPTION: This snippet shows how to format the package name @react-aria/select as a code block in Markdown, which is commonly used in documentation to highlight package names or technical terms.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/select\n```\n\n----------------------------------------\n\nTITLE: Handling ColorSwatchPicker onChange Events in TSX\nDESCRIPTION: Demonstrates using the `onChange` event handler prop for `ColorSwatchPicker`. The handler function receives the selected color as a `Color` object (from `@react-types/color`). This example updates the component's state with the new color and displays the selected color value as an RGB string elsewhere in the UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from '@react-spectrum/color';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('#A00'));\n\n  return (\n    <div>\n      <ColorSwatchPicker value={value} onChange={setValue}>\n        <ColorSwatch color=\"#A00\" />\n        <ColorSwatch color=\"#f80\" />\n        <ColorSwatch color=\"#080\" />\n        <ColorSwatch color=\"#08f\" />\n        <ColorSwatch color=\"#088\" />\n        <ColorSwatch color=\"#008\" />\n      </ColorSwatchPicker>\n      <p>Selected color: {value.toString('rgb')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: DropZone with FileTrigger Integration\nDESCRIPTION: Example of integrating a FileTrigger component within a DropZone to allow both drag-and-drop and file selection interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FileTrigger, Button} from 'react-aria-components';\nimport type {FileDropItem} from 'react-aria'\n\nfunction Example() {\n  let [files, setFiles] = React.useState(null);\n\n  return(\n    <DropZone\n      onDrop={(e) => {\n        let files = e.items.filter((file) => file.kind === 'file') as FileDropItem[];\n        let filenames = files.map((file) => file.name);\n        setFiles(filenames.join(', '));\n      }}>\n      <FileTrigger\n        allowsMultiple\n        onSelect={(e) => {\n          let files = Array.from(e);\n          let filenames = files.map((file) => file.name);\n          setFiles(filenames.join(', '));\n        }}>\n        <Button>Select files</Button>\n      </FileTrigger>\n      <Text slot=\"label\" style={{display: 'block'}}>\n        {files || 'Drop files here'}\n      </Text>\n    </DropZone>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Spectrum Feature Highlights\nDESCRIPTION: Displays a list of key features of React Spectrum, including accessibility, adaptiveness, color schemes, and internationalization support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Highlights items={[\n  {\n    title: 'Accessible',\n    description: 'React Spectrum components are designed with accessibility top-of-mind and include full screen reader and keyboard navigation support.',\n  },\n  {\n    title: 'Adaptive',\n    description: 'React Spectrum components are designed to work with mouse, touch, and keyboard interactions. They're built with responsive design principles to deliver a great experience, no matter the device.',\n  },\n  {\n    title: 'Color schemes',\n    description: 'React Spectrum includes automatic support for dark and light mode based on operating system settings.'\n  },\n  {\n    title: 'International',\n    description: 'React Spectrum components are designed to support over 30 languages, including support for right-to-left languages, date and number formatting, and more.'\n  }\n]} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical ColorSlider in React (TSX)\nDESCRIPTION: Demonstrates how to change the orientation of a `ColorSlider` from its default horizontal layout to a vertical one. This is done by setting the `orientation` prop to `\"vertical\"`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSlider defaultValue=\"#7f0000\" channel=\"red\" orientation=\"vertical\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing First Day of Week in DatePicker\nDESCRIPTION: Sets a custom first day of the week in a DatePicker calendar by using the firstDayOfWeek property.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker label=\"Appointment time\" firstDayOfWeek=\"mon\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing ColorWheel with Context Provider (TSX)\nDESCRIPTION: This TSX example defines a custom component `ColorWheelDescription` that wraps a `ColorWheel` (passed as children, e.g., `<MyColorWheel />`). It uses `ColorWheelContext.Provider` to pass down an `aria-describedby` prop, linking the `ColorWheel` to a description element generated with a unique ID via the `useId` hook. This demonstrates advanced compositional API creation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorWheelContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface ColorWheelDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction ColorWheelDescription({children, description}: ColorWheelDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <ColorWheelContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </ColorWheelContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<ColorWheelDescription description=\"Choose a background color for your profile.\">\n  <MyColorWheel />\n</ColorWheelDescription>\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Text Drop Data (TSX)\nDESCRIPTION: Example demonstrating how to handle dropped text data with a specific custom format (`custom-app-type`) in a ListBox. It uses the `acceptedDragTypes` prop to filter allowed items and the `onRootDrop` handler to process dropped items. It filters for text items using `isTextDropItem`, retrieves the custom data using `item.getText('custom-app-type')`, parses it as JSON, and updates the component's state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface TextItem {\n  id: string,\n  name: string,\n  style: string\n}\n\nfunction DroppableListBox() {\n  let [items, setItems] = React.useState<TextItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    /*- begin highlight -*/\n    acceptedDragTypes: ['custom-app-type'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      setItems(items);\n    }\n    /*- end highlight -*/\n  });\n\n  return (\n    <ListBox aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop items here\"}>\n      {item => <ListBoxItem textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</ListBoxItem>}\n    </ListBox>\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  {/* see above */}\n  <DraggableListBox />\n  <DroppableListBox />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Tree Data - useTreeData API (TypeScript)\nDESCRIPTION: These code snippets illustrate how to remove single, multiple, or selected items from a tree managed by useTreeData, using remove and removeSelectedItems. The remove function accepts one or more keys to delete corresponding nodes; removeSelectedItems deletes all currently selected nodes as tracked by selection state. Inputs are the keys (strings); outputs are immutable updates to the tree state. Suitable for React contexts where user-driven removal is needed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useTreeData.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n// Remove an item\nlist.remove('Kangaroo');\n\n// Remove multiple items\nlist.remove('Kangaroo', 'Snake');\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// Remove all selected items\nlist.removeSelectedItems();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in React Spectrum Forms\nDESCRIPTION: Shows how to use custom validation logic in React Spectrum form components using the validate prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextField\n    label=\"Username\"\n    validate={value => value === 'admin' ? 'Nice try!' : null}\n  />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Using Prefixed Modifiers with Tailwind Plugin\nDESCRIPTION: Example of using prefixed modifiers for React Aria Components states with the Tailwind plugin.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className=\"rac-selected:bg-blue-400 rac-disabled:bg-gray-100\">\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone Display in TimeField\nDESCRIPTION: Shows how to hide the time zone abbreviation when using ZonedDateTime values in a TimeField.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Tree Item Component in React Aria Components\nDESCRIPTION: This snippet shows how to create a reusable TreeItem component that accepts a title prop and automatically renders the TreeItemContent. It extends the TreeItemProps interface.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TreeItemProps} from 'react-aria-components';\n\ninterface MyTreeItemProps extends Partial<TreeItemProps> {\n  title: string\n}\n\nfunction MyTreeItem(props: MyTreeItemProps) {\n  return (\n    <TreeItem textValue={props.title} {...props}>\n      <MyTreeItemContent>\n        {props.title}\n      </MyTreeItemContent>\n      {props.children}\n    </TreeItem>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for ColorSwatchPicker Components\nDESCRIPTION: CSS styles for customizing the appearance of ColorSwatchPicker and its items, including hover, focus, and selection states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ColorSwatchPicker {\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n\n.react-aria-ColorSwatchPickerItem {\n  position: relative;\n  outline: none;\n  border-radius: 4px;\n  width: fit-content;\n  forced-color-adjust: none;\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  &[data-selected]::after {\n    content: '';\n    position: absolute;\n    inset: 0;\n    border: 2px solid black;\n    outline: 2px solid white;\n    outline-offset: -4px;\n    border-radius: inherit;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Card Component with Slots in React\nDESCRIPTION: Shows how an end user can use the Card component with custom slots and styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-slots.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from './CustomCardStyles.css';\n\n<Card slots={styles}>\n  <Image slot=\"preview\" />\n  <Avatar slot=\"avatar\" />\n  <Flex slot=\"title\">\n    <Title>Title</Title>\n    <Button>More</Button>\n  </Flex>\n  <Description slot=\"description\">Description</Description>\n  <Footer slot=\"footer\">Final remarks</Footer>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Applying Theme and Styling Tooltip Component (CSS)\nDESCRIPTION: Provides CSS for styling the tooltip component, including theming, transitions, placement adjustments, and color customization. Depends on an imported theme file and CSS variable definitions from @react-aria/example-theme. Carefully manages shadow, color, border-radius, and transforms for correct visual feedback. Placement attributes are used to rotate the arrow in the correct direction relative to the tooltip's position.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \\\"@react-aria/example-theme\\\";\\n\\n.react-aria-Tooltip {\\n  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);\\n  border-radius: 4px;\\n  background: var(--highlight-background);\\n  color: var(--highlight-foreground);\\n  forced-color-adjust: none;\\n  outline: none;\\n  padding: 2px 8px;\\n  max-width: 150px;\\n  /* fixes FF gap */\\n  transform: translate3d(0, 0, 0);\\n  transition: transform 200ms, opacity 200ms;\\n\\n  &[data-entering],\\n  &[data-exiting] {\\n    transform: var(--origin);\\n    opacity: 0;\\n  }\\n\\n  &[data-placement=top] {\\n    margin-bottom: 8px;\\n    --origin: translateY(4px);\\n  }\\n\\n  &[data-placement=bottom] {\\n    margin-top: 8px;\\n    --origin: translateY(-4px);\\n    & .react-aria-OverlayArrow svg {\\n      transform: rotate(180deg);\\n    }\\n  }\\n\\n  &[data-placement=right] {\\n    margin-left: 8px;\\n    --origin: translateX(-4px);\\n    & .react-aria-OverlayArrow svg {\\n      transform: rotate(90deg);\\n    }\\n  }\\n\\n  &[data-placement=left] {\\n    margin-right: 8px;\\n    --origin: translateX(4px);\\n    & .react-aria-OverlayArrow svg {\\n      transform: rotate(-90deg);\\n    }\\n  }\\n\\n  & .react-aria-OverlayArrow svg {\\n    display: block;\\n    fill: var(--highlight-background);\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Tabs with Icons in React Spectrum\nDESCRIPTION: Shows how to integrate icons with text labels in Tabs using Slots for styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs aria-label=\"History of Ancient Rome\">\n  <TabList>\n    <Item key=\"FoR\" textValue=\"FoR\"><Bookmark /><Text>Founding of Rome</Text></Item>\n    <Item key=\"MaR\" textValue=\"MaR\"><Calendar /><Text>Monarchy and Republic</Text></Item>\n    <Item key=\"Emp\" textValue=\"Emp\"><Dashboard /><Text>Empire</Text></Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"FoR\">\n      Arma virumque cano, Troiae qui primus ab oris.\n    </Item>\n    <Item key=\"MaR\">\n      Senatus Populusque Romanus.\n    </Item>\n    <Item key=\"Emp\">\n      Alea jacta est.\n    </Item>\n  </TabPanels>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Styling a ComboBox Clear Button with CSS\nDESCRIPTION: CSS styling for the custom clear button component in a ComboBox. It defines the button's appearance, including its size, color, and interactive states like pressed and focused.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n.clear-button {\n  width: 1.143rem;\n  height: 1.143rem;\n  border-radius: 1.143rem;\n  margin-left: -3.143rem;\n  font-size: 0.857rem;\n  line-height: 0.857rem;\n  vertical-align: middle;\n  text-align: center;\n  background: gray;\n  color: white;\n  border: none;\n  padding: 0;\n  outline: none;\n\n  &[data-pressed] {\n    background: dimgray;\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  + .react-aria-Button {\n    margin-left: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Sizing Options in React Spectrum\nDESCRIPTION: Demonstration of the various size options available for Spectrum icons, ranging from XXS to XXL, using the Beaker icon as an example within a Flex container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/workflow-icons.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Beaker from '@spectrum-icons/workflow/Beaker';\n\n<Flex gap=\"size-100\">\n  <Beaker aria-label=\"XXS Beaker\" size=\"XXS\" />\n  <Beaker aria-label=\"XS Beaker\" size=\"XS\" />\n  <Beaker aria-label=\"S Beaker\" size=\"S\" />\n  <Beaker aria-label=\"M Beaker\" size=\"M\" />\n  <Beaker aria-label=\"L Beaker\" size=\"L\" />\n  <Beaker aria-label=\"XL Beaker\" size=\"XL\" />\n  <Beaker aria-label=\"XXL Beaker\" size=\"XXL\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Styling React Spectrum Components with Macros\nDESCRIPTION: Example of applying Spectrum 2 styles to a React Spectrum Button component using the style() macro. The styles are applied using the styles prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-next-macros/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button styles={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing ProgressBar and Related Components in React Spectrum\nDESCRIPTION: Shows how to import the ProgressBar component along with Flex and View components from the React Spectrum library for layout and organization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {ProgressBar} from '@react-spectrum/progress';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Formatting NumberField as Percentages - React Spectrum - TypeScript\nDESCRIPTION: Configures NumberField to display and edit values as percentages using the formatOptions prop with style set to 'percent'. The display multiplies the value by 100 (e.g., 0.45 to 45%), and onChange divides by 100 for storage. The step is 0.01 by default for percent mode, but can be customized.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<MyNumberField\n  label=\"Sales tax\"\n  defaultValue={0.05}\n  formatOptions={{\n    style: 'percent'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Creating Blue Gradient in OKLCH\nDESCRIPTION: This CSS snippet creates a linear gradient from white to blue using the OKLCH color space. It shows how OKLCH maintains a consistent hue across all lightness levels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\nbackground: 'linear-gradient(in oklab to right, hsl(240, 0%, 100%), hsl(240, 100%, 50%))'\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation and Type Metadata - JavaScript\nDESCRIPTION: This snippet imports documentation metadata for useDroppableCollectionState from @react-stately/dnd via a custom docs: loader. It also brings in UI and type components from @react-spectrum/docs, as well as package.json data for the Drag and Drop state library. These imports are foundational for rendering contextual documentation and structured API/type details later in the page content. The snippet assumes a build system supporting these custom importers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/dnd/docs/useDroppableCollectionState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-stately/dnd';\nimport {HeaderInfo, TypeContext, InterfaceType, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/dnd/package.json';\n```\n\n----------------------------------------\n\nTITLE: Referencing React Stately Autocomplete Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @react-stately/autocomplete package using Markdown syntax. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/autocomplete/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-stately/autocomplete\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Implementing an Opacity Slider with React Aria Components and Tailwind CSS\nDESCRIPTION: Creates an opacity slider component using React Aria Components with Tailwind CSS classes. The slider includes a label, output display, track, fill, and a customized thumb.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/opacity-slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Slider, Label, SliderOutput, SliderTrack, SliderThumb} from 'react-aria-components';\n\n<div className=\"bg-linear-to-r from-purple-600 to-pink-600 p-12 rounded-lg flex justify-center\">\n  <Slider defaultValue={30} className=\"w-[250px]\">\n    <div className=\"flex text-white\">\n      <Label className=\"flex-1\">Opacity</Label>\n      <SliderOutput />\n    </div>\n    <SliderTrack className=\"relative w-full h-7\">\n      {({state}) => <>\n        {/* track */}\n        <div className=\"absolute h-2 top-[50%] translate-y-[-50%] w-full rounded-full bg-white/40\" />\n        {/* fill */}\n        <div className=\"absolute h-2 top-[50%] translate-y-[-50%] rounded-full bg-white\" style={{width: state.getThumbPercent(0) * 100 + '%'}} />\n        <SliderThumb className=\"h-7 w-7 top-[50%] rounded-full border border-solid border-purple-800/75 bg-white transition dragging:bg-purple-100 outline-hidden focus-visible:ring-2 ring-black\" />\n      </>}\n    </SliderTrack>\n  </Slider>\n</div>\n```\n\n----------------------------------------\n\nTITLE: useDraggableItem Hook Interface Definition\nDESCRIPTION: TypeScript interfaces for handling individual draggable items within a collection, working in conjunction with useDraggableCollectionState.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2020-v3-dnd.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DraggableItemProps {\n  key: Key\n}\n\ninterface DraggableItemResult {\n  dragProps: HTMLAttributes<HTMLElement>,\n  dragButtonProps: AriaButtonProps\n}\n\ndeclare function useDraggableItem(props: DraggableItemProps, state: DraggableCollectionState): DraggableItemResult;\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value for SearchField in React (TSX)\nDESCRIPTION: Demonstrates setting an initial, uncontrolled value for the `SearchField` component (using the `MySearchField` wrapper) via the `defaultValue` prop. The field will initially contain \"Puppies\".\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MySearchField\n  label=\"Search\"\n  defaultValue=\"Puppies\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Columns in React Spectrum Table\nDESCRIPTION: This example shows how to create nested columns in a React Spectrum Table, resulting in multiple header rows. It also demonstrates the use of the isRowHeader prop for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Example table with nested columns\">\n  <TableHeader>\n    <Column title=\"Name\">\n      <Column isRowHeader>First Name</Column>\n      <Column isRowHeader>Last Name</Column>\n    </Column>\n    <Column title=\"Information\">\n      <Column>Age</Column>\n      <Column>Birthday</Column>\n    </Column>\n  </TableHeader>\n  <TableBody>\n    <Row>\n      <Cell>Sam</Cell>\n      <Cell>Smith</Cell>\n      <Cell>36</Cell>\n      <Cell>May 3</Cell>\n    </Row>\n    <Row>\n      <Cell>Julia</Cell>\n      <Cell>Jones</Cell>\n      <Cell>24</Cell>\n      <Cell>February 10</Cell>\n    </Row>\n    <Row>\n      <Cell>Peter</Cell>\n      <Cell>Parker</Cell>\n      <Cell>28</Cell>\n      <Cell>September 7</Cell>\n    </Row>\n    <Row>\n      <Cell>Bruce</Cell>\n      <Cell>Wayne</Cell>\n      <Cell>32</Cell>\n      <Cell>December 18</Cell>\n    </Row>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Applying Classes to React Aria Checkbox with Function Prop (JSX)\nDESCRIPTION: Demonstrates using a function as the value for the `className` prop in a React Aria Checkbox. The function receives the component's state (e.g., `isPressed`) and returns the appropriate class string(s). This approach is particularly useful for integrating with utility CSS libraries like Tailwind CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: FileTrigger with Multiple File Selection\nDESCRIPTION: Shows how to enable multiple file selection using the allowsMultiple prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/filetrigger/docs/FileTrigger.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTrigger allowsMultiple>\n  <Button variant=\"primary\">Upload your files</Button>\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled CheckboxGroup in React Spectrum\nDESCRIPTION: Example showing how to disable an entire CheckboxGroup by using the isDisabled prop. This prevents users from interacting with any checkboxes in the group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup label=\"Favorite sports\" isDisabled>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling the Reusable Autocomplete Wrapper Example in CSS\nDESCRIPTION: Contains CSS rules specifically for the reusable `MyAutocomplete` wrapper example. It styles the `.my-autocomplete` container and targets nested React Aria components like `SearchField`, `Label`, and `Menu` (including styling for the empty state) to provide a consistent appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.my-autocomplete {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-width: 300px;\n  height: 180px;\n  border: 1px solid var(--border-color);\n  padding: 16px;\n  border-radius: 10px;\n  background: var(--overlay-background);\n}\n\n.react-aria-SearchField {\n  width: 100%;\n}\n\n.react-aria-Label {\n  margin-bottom: .5em;\n}\n\n.react-aria-Menu {\n  &[data-empty] {\n    align-items: center;\n    justify-content: center;\n    font-style: italic;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Row States with CSS\nDESCRIPTION: Illustrates how to target different states of a React Aria Row component using CSS selectors and data attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_49\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Row[data-selected] {\n  /* ... */\n}\n\n.react-aria-Row[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Color Variables for Flex Wrapping Example\nDESCRIPTION: Helper code to generate an array of color variables used in the wrapping example, combining base colors with different intensity levels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Flex.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet baseColors = ['celery', 'chartreuse', 'yellow', 'magenta', 'fuchsia', 'purple', 'indigo', 'seafoam', 'red', 'orange', 'green', 'blue'];\nlet colors = [];\nfor (let color of baseColors) {\n  for (let i = 4; i <= 7; i++) {\n    colors.push(`${color}-${i}00`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Subtracting Time Durations\nDESCRIPTION: Examples of manipulating Time objects by adding and subtracting durations\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Time.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet time = new Time(9, 45);\ntime.add({hours: 1}); // 10:45:00\ntime.add({minutes: 1}); // 09:46:00\ntime.add({seconds: 1}); // 09:45:01\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Overlay with useUNSAFE_PortalContext in React\nDESCRIPTION: Shows how to create a custom overlay component using useUNSAFE_PortalContext to ensure consistent portalling throughout the app.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/PortalProvider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useUNSAFE_PortalContext} from '@react-aria/overlays';\n\nfunction MyOverlay(props) {\n  let {children} = props;\n  let {getContainer} = useUNSAFE_PortalContext();\n  return ReactDOM.createPortal(children, getContainer());\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Populating ActionBar via Function as Child (TypeScript, React Spectrum)\nDESCRIPTION: This sample demonstrates providing ActionBar with a set of items through a data array and a function as its children, using TypeScript and React. It utilizes the 'items' prop for ActionBar and a render function to produce Item components, supporting more complex or dynamic customization. Upstream dependencies are '@adobe/react-spectrum' and '@react-spectrum/actionbar' and related UI packages. Input parameters include a data array for actions and selected item keys. The ActionBar displays action items labeled from supplied data, and adapts its interface based on user selections.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actionbar/docs/ActionBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let barItems = [\n    {key: 'edit', label: 'Edit'},\n    {key: 'copy', label: 'Copy'},\n    {key: 'delete', label: 'Delete'}\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['photoshop']));\n\n  return (\n    <ActionBarContainer height={300} maxWidth=\"size-6000\">\n      <ListView aria-label=\"ListView with action bar\" selectionMode=\"multiple\" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys}>\n        <Item key=\"photoshop\">Adobe Photoshop</Item>\n        <Item key=\"illustrator\">Adobe Illustrator</Item>\n        <Item key=\"xd\">Adobe XD</Item>\n      </ListView>\n      <ActionBar\n        items={barItems}\n        selectedItemCount={selectedKeys === 'all' ? 'all' : selectedKeys.size}\n        onAction={(key) => alert(`Performing ${key} action...`)}\n        onClearSelection={() => setSelectedKeys(new Set())}\n        isEmphasized>\n        {item => (\n          <Item key={item.key}>\n            {item.label}\n          </Item>\n        )}\n      </ActionBar>\n    </ActionBarContainer>\n  );\n}\n\n<Example />\n```\n\n----------------------------------------\n\nTITLE: Importing Layered CSS Files for CheckboxGroup Styling in CSS\nDESCRIPTION: This hidden CSS snippet illustrates the import of modular layer-based stylesheets for Checkbox, Form, and Button components, supporting theme cohesion and easy overrides. It relies on CSS support for @import and layering, and is used to structure the default and themed styling of CheckboxGroup components and related controls.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@import './Checkbox.mdx' layer(checkbox);\n@import './Form.mdx' layer(form);\n@import './Button.mdx' layer(button);\n```\n\n----------------------------------------\n\nTITLE: Importing IllustratedMessage Component in JSX\nDESCRIPTION: Example showing how to import the necessary components for using IllustratedMessage including Content, Heading, and the IllustratedMessage itself.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Content} from '@react-spectrum/view';\nimport {Heading} from '@react-spectrum/text';\nimport {IllustratedMessage} from '@react-spectrum/illustratedmessage';\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with ColorSlider\nDESCRIPTION: Shows how to integrate the ColorSlider with HTML forms using the name prop, which allows the component's value to be submitted as part of form data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSlider\n  defaultValue=\"#7f0000\"\n  channel=\"red\"\n  name=\"red\" />\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with State Render Props\nDESCRIPTION: Example showing how to conditionally render children elements based on component states using render props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      <span>Item</span>\n    </>\n  )}\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Integrating React Spectrum Tabs with React Router for Navigation\nDESCRIPTION: This example shows how to integrate React Spectrum `Tabs` with `react-router-dom` for client-side routing. It uses `useLocation` to get the current pathname and sets it as the `selectedKey` on the `Tabs` component. Each `Tab` component is given an `href` prop corresponding to a route path. The `RouterProvider` from `react-aria` is configured with the `useNavigate` hook to handle link navigation within the React application, ensuring clicks on tab links trigger router navigation instead of full page reloads. `BrowserRouter`, `Routes`, and `Route` are used to define the application's routing structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLocation, useNavigate, BrowserRouter, Routes, Route} from 'react-router-dom';\nimport {RouterProvider} from 'react-aria';\n\nfunction AppTabs() {\n  let {pathname} = useLocation();\n\n  return (\n    <Tabs selectedKey={pathname}>\n      <TabList aria-label=\"Tabs\">\n        <Tab id=\"/\" href=\"/\">Home</Tab>\n        <Tab id=\"/shared\" href=\"/shared\">Shared</Tab>\n        <Tab id=\"/deleted\" href=\"/deleted\">Deleted</Tab>\n      </TabList>\n      <TabPanel id={pathname}>\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/shared\" element={<SharedPage />} />\n          <Route path=\"/deleted\" element={<DeletedPage />} />\n        </Routes>\n      </TabPanel>\n    </Tabs>\n  );\n}\n\nfunction App() {\n  let navigate = useNavigate();\n  return (\n    <RouterProvider navigate={navigate}>\n      <Routes>\n        <Route path=\"/*\" element={<AppTabs />} />\n      </Routes>\n    </RouterProvider>\n  );\n}\n\n<BrowserRouter>\n  <App />\n</BrowserRouter>\n```\n\n----------------------------------------\n\nTITLE: Icon Size Demonstration\nDESCRIPTION: Example showing different icon sizes using t-shirt sizing from XXS to XXL within a Flex container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/custom-icons.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\">\n  <CustomIcon aria-label=\"XXS Star\" size=\"XXS\" />\n  <CustomIcon aria-label=\"XS Star\" size=\"XS\" />\n  <CustomIcon aria-label=\"S Star\" size=\"S\" />\n  <CustomIcon aria-label=\"M Star\" size=\"M\" />\n  <CustomIcon aria-label=\"L Star\" size=\"L\" />\n  <CustomIcon aria-label=\"XL Star\" size=\"XL\" />\n  <CustomIcon aria-label=\"XXL Star\" size=\"XXL\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Collection Renderers with CollectionRendererContext (TSX)\nDESCRIPTION: Demonstrates defining a custom `CollectionRenderer` object implementing the `CollectionRoot` and `CollectionBranch` methods to manually control how collection items are rendered. This custom renderer must be memoized and is applied by wrapping the target collection component (e.g., `ListBox`) in a `CollectionRendererContext.Provider`. Ensure added DOM elements use appropriate ARIA roles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CollectionRenderer} from 'react-aria-components';\nimport {CollectionRendererContext} from 'react-aria-components';\n\nconst renderer: CollectionRenderer = {\n  CollectionRoot({collection}) {\n    let items = [];\n    for (let item of collection) {\n      items.push(item.render(item));\n    }\n    return items;\n  },\n  CollectionBranch({collection, parent}) {\n    let items = [];\n    for (let item of collection.getChildren(parent.key)) {\n      items.push(item.render(item));\n    }\n    return items;\n  }\n};\n\n<CollectionRendererContext.Provider value={renderer}>\n  <ListBox>\n    {/* ... */}\n  </ListBox>\n</CollectionRendererContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Rendering Collection Description using PageDescription Component in JSX\nDESCRIPTION: Uses the `PageDescription` component from `@react-spectrum/docs` to render the description of the `Collection` interface. The description text is dynamically sourced from the imported `collectionsDocs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/Collection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PageDescription>{collectionsDocs.exports.Collection.description}</PageDescription>\n```\n\n----------------------------------------\n\nTITLE: Styling ListBoxItem States\nDESCRIPTION: Shows how to style ListBoxItem components based on their data attributes for different states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[data-selected] {\n  /* ... */\n}\n\n.react-aria-ListBoxItem[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Toolbar Layout and Visual Styling with CSS\nDESCRIPTION: This CSS snippet provides basic visual styling for a container with [role=toolbar], such as layout (flexbox with wrapping), consistent gaps, and a customizable separator color. It is intended to be used alongside the toolbar component to ensure proper spacing and consistent look. Requires CSS variables for color theming and works in conjunction with the role attribute set by the useToolbar hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toolbar/docs/useToolbar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n[role=toolbar] {\\n  --separator-color: var(--spectrum-global-color-gray-500);\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 5px;\\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Applying CSS Classes based on State in JSX\nDESCRIPTION: This JSX snippet demonstrates using a function as the value for the `className` prop to dynamically apply CSS classes based on the component's state. The example applies either 'border-blue-500' or 'border-gray-600' to a `Disclosure` component depending on its `isExpanded` state. This pattern is particularly useful with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Disclosure className={({isExpanded}) => isExpanded ? 'border-blue-500' : 'border-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Tabs with Default Selection\nDESCRIPTION: Shows how to set a default selected tab using the defaultSelectedKey prop. This example demonstrates setting the default selected tab to 'keyboard' in an input settings interface.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs defaultSelectedKey=\"keyboard\">\n  <TabList aria-label=\"Input settings\">\n    <Tab id=\"mouse\">Mouse Settings</Tab>\n    <Tab id=\"keyboard\">Keyboard Settings</Tab>\n    <Tab id=\"gamepad\">Gamepad Settings</Tab>\n  </TabList>\n  <TabPanel id=\"mouse\">Mouse Settings</TabPanel>\n  <TabPanel id=\"keyboard\">Keyboard Settings</TabPanel>\n  <TabPanel id=\"gamepad\">Gamepad Settings</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value for DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Displays a placeholder date using the placeholderValue prop, with an explicit CalendarDate instance set to 1980-01-01. Demonstrates initializing a date without a value and customizing defaults for user guidance. Requires CalendarDate from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_24\n\nLANGUAGE: TSX\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\\n\\n<DatePicker label=\\\"Birth date\\\" placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slider with Custom Value Range in React Spectrum\nDESCRIPTION: Creates a slider with a custom value range from 50 to 150 instead of the default 0-100 range, with a default value set to 100.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<MySlider\n  label=\"Cookies to buy\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={100} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Pages Router to Exclude Client Locale Strings (TypeScript)\nDESCRIPTION: Shows how to add '@react-aria/optimize-locales-plugin' for a Next.js app using the Pages Router. The configuration ensures that only relevant localization data is included, not all locales, reducing client bundle size. The webpack and i18n configuration blocks may need adjustments as per Next.js Docs, and the plugin is conditionally included based on whether the code runs on server or client.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// next.config.js\nconst localesPlugin = require('@react-aria/optimize-locales-plugin');\n\nmodule.exports = {\n  // ...\n  i18n: {\n    // See Next.js i18n docs...\n  },\n  webpack(config, {isServer}) {\n    if (!isServer) {\n      // Don't include any locale strings in the client JS bundle.\n      /*- begin highlight -*/\n      config.plugins.push(localesPlugin.webpack({locales: []}));\n      /*- end highlight -*/\n    }\n    return config;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Class Assignment in DateSegment - React Spectrum (JSX)\nDESCRIPTION: Provides an example of assigning classes dynamically based on the isPlaceholder state inside the DateSegment component by passing a function to className. Especially useful when integrating utility CSS frameworks (e.g., Tailwind CSS) for conditionally styled components. Requires the hook support in DateSegment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_23\n\nLANGUAGE: JSX\nCODE:\n```\n<DateSegment className={({isPlaceholder}) => isPlaceholder ? 'bg-gray-300' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Handling Tooltip Open State Changes in React Spectrum\nDESCRIPTION: This example demonstrates how to use the onOpenChange event handler to track and display the open state of a tooltip.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [isOpen, setOpen] = React.useState(false);\n\n  return (\n    <Flex alignItems=\"center\" gap=\"size-100\">\n      <TooltipTrigger isOpen={isOpen} onOpenChange={setOpen}>\n        <ActionButton aria-label=\"Resize\"><Resize /></ActionButton>\n        <Tooltip>Resize text.</Tooltip>\n      </TooltipTrigger>\n      <Text>Tooltip is {isOpen ? 'showing' : 'not showing'}</Text>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in React Spectrum Table\nDESCRIPTION: This snippet demonstrates how to enable multiple selection in a React Spectrum table. It sets the selectionMode prop to 'multiple' and shows how to use defaultSelectedKeys to pre-select multiple rows.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleTable selectionMode=\"multiple\" defaultSelectedKeys={[2, 4]} />\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Color Wheel with Default Value\nDESCRIPTION: An example showing how to use the ColorWheel component in an uncontrolled manner with a specific default value, represented as an HSL color string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorWheel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorWheel defaultValue=\"hsl(80, 100%, 50%)\" />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Class Name Functions in React Aria\nDESCRIPTION: Example demonstrating how to use className as a function to apply conditional styling based on component states, useful with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<OverlayArrow className={({placement}) => placement === 'left' || placement === 'right' ? 'rotate-90' : 'rotate-0'}>\n  {/* ... */}\n</OverlayArrow>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled TimeField in React Spectrum\nDESCRIPTION: Example showing how to disable a TimeField to prevent user interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField label=\"Event time\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Styling Description Text in React Aria CheckboxGroup (CSS)\nDESCRIPTION: This CSS code targets the description text element within a `CheckboxGroup` using the attribute selector `[slot=description]`. It applies specific styles, such as font size, to the descriptive text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-CheckboxGroup {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Breadcrumbs with Custom CSS - CSS\nDESCRIPTION: Defines a CSS selector for the .react-aria-Breadcrumbs class, allowing custom styling of the Breadcrumbs component rendered by React Aria in an application. Targeting this class applies the specified styles to the <ol> element generated by the Breadcrumbs component. No dependencies are required other than the Breadcrumbs component and a CSS processor in your build.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Breadcrumbs {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: useDrop Hook Interface Definition\nDESCRIPTION: TypeScript interfaces for the useDrop hook that enables drop targets. Includes definitions for drop events, items, operations, and hook options and results.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2020-v3-dnd.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DropEnterEvent extends DragDropEvent {\n  type: 'dropenter'\n}\n\ninterface DropMoveEvent extends DragDropEvent {\n  type: 'dropmove'\n}\n\ninterface DropActivateEvent extends DragDropEvent {\n  type: 'dropactivate'\n}\n\ninterface DropExitEvent extends DragDropEvent {\n  type: 'dropexit'\n}\n\ninterface DropItem {\n  types: Set<string>,\n  getData(type: string): Promise<string>\n}\n\ninterface DropEvent extends DragDropEvent {\n  type: 'drop',\n  dropOperation: DropOperation,\n  items: DropItem[]\n}\n\ninterface DropOptions {\n  ref: RefObject<HTMLElement>,\n  getDropOperation?: (types: string[], allowedOperations: DropOperation[]) => DropOperation,\n  getDropOperationForPoint?: (types: string[], allowedOperations: DropOperation[], x: number, y: number) => DropOperation,\n  onDropEnter?: (e: DropEnterEvent) => void,\n  onDropMove?: (e: DropMoveEvent) => void,\n  onDropActivate?: (e: DropActivateEvent) => void,\n  onDropExit?: (e: DropExitEvent) => void,\n  onDrop?: (e: DropEvent) => void\n}\n\ninterface DropResult {\n  dropProps: HTMLAttributes<HTMLElement>,\n  isDropTarget: boolean\n}\n\ndeclare function useDrop(options: DropOptions): DropResult;\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Page CSS\nDESCRIPTION: Required CSS import statement for React Spectrum theme support in the application root.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-esbuild-starter-app/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@react-spectrum/s2/page.css\";\n```\n\n----------------------------------------\n\nTITLE: Implementing onChange Event Handler for NumberField in React\nDESCRIPTION: This example demonstrates how to use the onChange prop of NumberField to update a separate element with the entered value. It also shows how to handle NaN values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(null);\n\n  return (\n    <Flex direction=\"column\" gap=\"size-150\">\n      <NumberField\n        onChange={setValue}\n        label=\"Number of cookies to buy\"\n        minValue={0} />\n      <pre>How many cookies you are ordering: {isNaN(value) ? 0 : value}</pre>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Breadcrumbs\nDESCRIPTION: CSS styling for disabled breadcrumbs, handling cursor appearance and text color for disabled states while preserving current page styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Breadcrumbs {\n  .react-aria-Link {\n    &[data-disabled] {\n      cursor: default;\n\n      &:not([data-current]) {\n        color: var(--text-color-disabled);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatars with Different Sizes in TSX\nDESCRIPTION: This example showcases how to control the size of the `Avatar` component using the `size` prop within a `Flex` layout. It demonstrates rendering avatars with various predefined sizes (e.g., `avatar-size-100` to `avatar-size-700`) by mapping over an array of size numbers, and also shows rendering an avatar with a custom pixel value (50).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/avatar/docs/Avatar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\" wrap>\n  {[50, 75, 100, 200, 300, 400, 500, 600, 700].map(size => (\n    <Avatar key={size} src=\"https://i.imgur.com/kJOwAdv.png\" alt=\"default Adobe avatar\" size={`avatar-size-${size}`} />\n  ))}\n  <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" alt=\"avatar with custom size\" size={50} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Applying Emphasized Style to React Spectrum Checkbox\nDESCRIPTION: Illustrates how to use the `isEmphasized` prop to apply a visually distinct, emphasized style to the Checkbox. In this example, it's combined with `defaultSelected`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/Checkbox.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox isEmphasized defaultSelected>Subscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Menu Components in React Aria\nDESCRIPTION: Demonstrates how to create reusable menu components by wrapping MenuTrigger and its children into a single component. Includes type definitions for props and customized rendering with state-based styling for menu items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {MenuProps, MenuTriggerProps, MenuItemProps} from 'react-aria-components';\n\ninterface MyMenuButtonProps<T> extends MenuProps<T>, Omit<MenuTriggerProps, 'children'> {\n  label?: string\n}\n\nfunction MyMenuButton<T extends object>({label, children, ...props}: MyMenuButtonProps<T>) {\n  return (\n    <MenuTrigger {...props}>\n      <Button>{label}</Button>\n      <Popover>\n        <Menu {...props}>\n          {children}\n        </Menu>\n      </Popover>\n    </MenuTrigger>\n  );\n}\n\nexport function MyItem(props: MenuItemProps) {\n  let textValue = props.textValue || (typeof props.children === 'string' ? props.children : undefined);\n  return (\n    <MenuItem\n      {...props}\n      textValue={textValue}\n      className={({isFocused, isSelected, isOpen}) => `my-item ${isFocused ? 'focused' : ''} ${isOpen ? 'open' : ''}`}>\n      {({hasSubmenu}) => (\n        <>\n          {props.children}\n          {hasSubmenu && (\n            <svg className=\"chevron\" viewBox=\"0 0 24 24\"><path d=\"m9 18 6-6-6-6\" /></svg>\n          )}\n        </>\n      )}\n    </MenuItem>\n  );\n}\n\n<MyMenuButton label=\"Edit\">\n  <MyItem>Cut</MyItem>\n  <MyItem>Copy</MyItem>\n  <MyItem>Paste</MyItem>\n</MyMenuButton>\n```\n\n----------------------------------------\n\nTITLE: Styling ListBox Item Text Slots with CSS\nDESCRIPTION: This CSS snippet targets the `Text` components placed within the 'label' and 'description' slots inside a `ListBoxItem`. It applies bold font weight to the label and a smaller font size to the description, visually distinguishing the two.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem {\n  [slot=label] {\n    font-weight: bold;\n  }\n\n  [slot=description] {\n    font-size: small;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Unit Values with NumberParser\nDESCRIPTION: Example showing how to parse values with units of measurement using the NumberParser with the unit style and different unit display options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberParser.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nlet parser = new NumberParser('en-US', {\n  style: 'unit',\n  unit: 'inch',\n  unitDisplay: 'long'\n});\n\nparser.parse('12'); // 12\nparser.parse('12 inches'); // 12\nparser.parse('1 inch'); // 1\nparser.parse('12 in'); // NaN (partial unit)\nparser.parse('23 ft'); // NaN (different unit)\n```\n\n----------------------------------------\n\nTITLE: Querying Locale-Specific Date Information with @internationalized/date - TypeScript/TSX\nDESCRIPTION: Demonstrates how to use @internationalized/date utilities such as isWeekend and startOfWeek to query locale-specific calendar information. Shows how weekend status and start-of-week differ by locale. Requires @internationalized/date and construction of a CalendarDate object. Inputs are CalendarDate and locale strings; outputs are booleans or CalendarDate objects denoting weekend status or week starts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/date-and-time-pickers-for-all.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport {isWeekend, startOfWeek} from '@internationalized/date';\\n\\n// a Sunday\\nlet date = new CalendarDate(2022, 2, 6);\\n\\nisWeekend(date, 'en-US');\\n// => true\\nisWeekend(date, 'he-IL');\\n// => false\\nstartOfWeek(date, 'en-US');\\n// => 2022-02-06\\nstartOfWeek(date, 'fr-FR');\\n// => 2022-01-31\n```\n\n----------------------------------------\n\nTITLE: Forcing 24-hour Format in TimeField for React Spectrum\nDESCRIPTION: This example shows how to force a TimeField component to use a 24-hour time format, regardless of the user's locale. The hourCycle prop is used to override the default locale-based formatting.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField\n  label=\"Appointment time\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Styling Submenu Popovers for Horizontal Placement - React Aria Popover - CSS\nDESCRIPTION: Defines CSS rules to adjust margins of submenu popovers depending on their placement (left or right), enhancing visual stacking for nested menus. Targets react-aria-Popover with data attributes for SubmenuTrigger and placement. Requires HTML structure from React Aria's Popover component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=SubmenuTrigger][data-placement=\"right\"] {\n  margin-left: -5px;\n}\n\n.react-aria-Popover[data-trigger=SubmenuTrigger][data-placement=\"left\"] {\n  margin-right: -5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Sections in ActionMenu with React Spectrum\nDESCRIPTION: Shows how to create hierarchical menus with sections populated from a nested data structure, using the items prop on both ActionMenu and Section components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let openWindows = [\n    {\n      name: 'Reversion',\n      id: 'reversion',\n      children: [\n        {id: 'undo', name: 'Undo'},\n        {id: 'redo', name: 'Redo'}\n      ]\n    },\n    {\n      name: 'Clipboard',\n      id: 'clipboard',\n      children: [\n        {id: 'cut', name: 'Cut'},\n        {id: 'copy', name: 'Copy'},\n        {id: 'paste', name: 'Paste'}\n      ]\n    }\n  ];\n\n  return (\n    <ActionMenu\n      items={openWindows}>\n      {item => (\n        <Section items={item.children} title={item.name}>\n          {item => <Item>{item.name}</Item>}\n        </Section>\n      )}\n    </ActionMenu>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Empty State in React Spectrum TagList using TSX\nDESCRIPTION: Illustrates how to display custom content when a `TagList` contains no items (tags). It uses the `renderEmptyState` prop on the `TagList` component, providing a function that returns the JSX or string ('No categories.') to be rendered in place of the tags.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<TagGroup>\n  <Label>Categories</Label>\n  {/*- begin highlight -*/}\n  <TagList renderEmptyState={() => 'No categories.'}>\n  {/*- end highlight -*/}\n    {[]}\n  </TagList>\n</TagGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying macOS Keyboard Settings Image using JSX\nDESCRIPTION: This JSX snippet renders an Image component to visually illustrate the macOS keyboard accessibility settings discussed in the context of Safari's focus behavior. It uses a variable (`keyboardSettingsImageUrl`) for the image source and applies inline styles for maximum width and centering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-3.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src={keyboardSettingsImageUrl} alt=\"Screenshot of macOS keyboard system preferences\" style={{maxWidth: 'min(100%, 780px)', display: 'block', margin: '20px auto'}} />\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Color and Layout Components in JSX\nDESCRIPTION: Imports `ColorArea`, `ColorSlider`, `ColorWheel` from `@react-spectrum/color`, layout components (`Flex`, `Grid`) from `@react-spectrum/layout`, `Label` from `@react-spectrum/label`, and `View` from `@react-spectrum/view`. These imports are prerequisites for using the components demonstrated in the subsequent examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ColorArea, ColorSlider, ColorWheel} from '@react-spectrum/color';\nimport {Flex, Grid} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Date Manipulation Example\nDESCRIPTION: Demonstrates basic date manipulation using CalendarDate object, including adding weeks and finding the start of a week for a given locale. Shows construction, addition, and week calculation operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate, startOfWeek} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\ndate = date.add({weeks: 1});\ndate = startOfWeek(date, 'en-US');\ndate.toString(); // 2022-02-06\n```\n\n----------------------------------------\n\nTITLE: Importing ColorSlider and Flex Components in React\nDESCRIPTION: Imports the `ColorSlider` component from `@react-spectrum/color` and the `Flex` layout component from `@react-spectrum/layout`. These imports are necessary for using the color slider and arranging components in the examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ColorSlider} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Styles\nDESCRIPTION: Imports the global Tailwind CSS styles required for the dialog component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/destructive-dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: ListBox Test Utility Usage\nDESCRIPTION: This example shows how to use the ListBox test utility from @react-spectrum/test-utils to test ListBox interactions in a test suite.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n// ListBox.test.ts\nimport {render} from '@testing-library/react';\nimport {theme} from '@react-spectrum/theme-default';\nimport {User} from '@react-spectrum/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// Other setup, be sure to check out the suggested mocks mentioned above in https://react-spectrum.adobe.com/react-spectrum/ListBox.html#testing\n\nit('ListBox can select an option via keyboard', async function () {\n  // Render your test component/app and initialize the listbox tester\n  let {getByTestId} = render(\n    <Provider theme={defaultTheme}>\n      <ListBox selectionMode=\"single\" data-testid=\"test-listbox\">\n        ...\n      </ListBox>\n    </Provider>\n  );\n  let listboxTester = testUtilUser.createTester('ListBox', {root: getByTestId('test-listbox'), interactionType: 'keyboard'});\n\n  await listboxTester.toggleOptionSelection({option: 4});\n  expect(listboxTester.options()[4]).toHaveAttribute('aria-selected', 'true');\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Released Packages - Markdown\nDESCRIPTION: This snippet provides a comprehensive, bullet-pointed markdown list of all recently released package versions within the React Spectrum and related libraries. There are no computation steps—it's a declarative release log for reference. The snippet is self-contained and can be embedded in documentation without additional dependencies. No parameters or inputs are required, and package names and versions are presented as static content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-02-13.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- @adobe/react-spectrum@3.34.0\\n- @react-aria/accordion@3.0.0-alpha.26\\n- @react-aria/actiongroup@3.7.2\\n- @react-aria/autocomplete@3.0.0-alpha.26\\n- @react-aria/breadcrumbs@3.5.10\\n- @react-aria/button@3.9.2\\n- @react-aria/calendar@3.5.5\\n- @react-aria/checkbox@3.14.0\\n- @react-aria/color@3.0.0-beta.30\\n- @react-aria/combobox@3.8.3\\n- @react-aria/datepicker@3.9.2\\n- @react-aria/dialog@3.5.11\\n- @react-aria/dnd@3.5.2\\n- @react-aria/focus@3.16.1\\n- @react-aria/form@3.0.2\\n- @react-aria/grid@3.8.7\\n- @react-aria/gridlist@3.7.4\\n- @react-aria/i18n@3.10.1\\n- @react-aria/interactions@3.21.0\\n- @react-aria/label@3.7.5\\n- @react-aria/landmark@3.0.0-beta.9\\n- @react-aria/link@3.6.4\\n- @react-aria/listbox@3.11.4\\n- @react-aria/menu@3.13.0\\n- @react-aria/meter@3.4.10\\n- @react-aria/numberfield@3.11.0\\n- @react-aria/overlays@3.21.0\\n- @react-aria/progress@3.4.10\\n- @react-aria/radio@3.10.1\\n- @react-aria/searchfield@3.7.2\\n- @react-aria/select@3.14.2\\n- @react-aria/selection@3.17.4\\n- @react-aria/separator@3.3.10\\n- @react-aria/slider@3.7.5\\n- @react-aria/spinbutton@3.6.2\\n- @react-aria/steplist@3.0.0-alpha.2\\n- @react-aria/switch@3.6.1\\n- @react-aria/table@3.13.4\\n- @react-aria/tabs@3.8.4\\n- @react-aria/tag@3.3.2\\n- @react-aria/textfield@3.14.2\\n- @react-aria/toast@3.0.0-beta.9\\n- @react-aria/toggle@3.10.1\\n- @react-aria/toolbar@3.0.0-beta.2\\n- @react-aria/tooltip@3.7.1\\n- @react-aria/utils@3.23.1\\n- @react-aria/virtualizer@3.9.9\\n- @react-aria/visually-hidden@3.8.9\\n- @react-spectrum/accordion@3.0.0-alpha.28\\n- @react-spectrum/actionbar@3.4.2\\n- @react-spectrum/actiongroup@3.10.2\\n- @react-spectrum/autocomplete@3.0.0-alpha.29\\n- @react-spectrum/avatar@3.0.9\\n- @react-spectrum/badge@3.1.10\\n- @react-spectrum/breadcrumbs@3.9.4\\n- @react-spectrum/button@3.16.1\\n- @react-spectrum/buttongroup@3.6.10\\n- @react-spectrum/calendar@3.4.6\\n- @react-spectrum/card@3.0.0-alpha.30\\n- @react-spectrum/checkbox@3.9.3\\n- @react-spectrum/color@3.0.0-beta.31\\n- @react-spectrum/combobox@3.12.2\\n- @react-spectrum/contextualhelp@3.6.8\\n- @react-spectrum/datepicker@3.9.3\\n- @react-spectrum/dialog@3.8.8\\n- @react-spectrum/divider@3.5.10\\n- @react-spectrum/dnd@3.3.7\\n- @react-spectrum/dropzone@3.0.0-rc.2\\n- @react-spectrum/form@3.7.3\\n- @react-spectrum/icon@3.7.10\\n- @react-spectrum/illustratedmessage@3.4.10\\n- @react-spectrum/image@3.4.10\\n- @react-spectrum/inlinealert@3.2.2\\n- @react-spectrum/label@3.16.3\\n- @react-spectrum/labeledvalue@3.1.11\\n- @react-spectrum/layout@3.6.2\\n- @react-spectrum/link@3.6.4\\n- @react-spectrum/list@3.7.7\\n- @react-spectrum/listbox@3.12.6\\n- @react-spectrum/menu@3.18.0\\n- @react-spectrum/meter@3.4.10\\n- @react-spectrum/numberfield@3.9.0\\n- @react-spectrum/overlays@5.5.4\\n- @react-spectrum/picker@3.14.2\\n- @react-spectrum/progress@3.7.4\\n- @react-spectrum/provider@3.9.4\\n- @react-spectrum/radio@3.7.3\\n- @react-spectrum/searchfield@3.8.3\\n- @react-spectrum/slider@3.6.6\\n- @react-spectrum/statuslight@3.5.10\\n- @react-spectrum/steplist@3.0.0-alpha.2\\n- @react-spectrum/switch@3.5.2\\n- @react-spectrum/table@3.12.7\\n- @react-spectrum/tabs@3.8.7\\n- @react-spectrum/tag@3.2.3\\n- @react-spectrum/text@3.5.2\\n- @react-spectrum/textfield@3.11.3\\n- @react-spectrum/toast@3.0.0-beta.9\\n- @react-spectrum/tooltip@3.6.4\\n- @react-spectrum/utils@3.11.4\\n- @react-spectrum/view@3.6.7\\n- @react-spectrum/well@3.4.10\\n- @react-stately/checkbox@3.6.2\\n- @react-stately/color@3.5.2\\n- @react-stately/data@3.11.1\\n- @react-stately/layout@3.13.6\\n- @react-stately/numberfield@3.9.0\\n- @react-stately/slider@3.5.1\\n- @react-stately/steplist@3.0.0-alpha.2\\n- @react-stately/table@3.11.5\\n- @react-stately/toggle@3.7.1\\n- @react-stately/virtualizer@3.6.7\\n- @react-types/card@3.0.0-alpha.23\\n- @react-types/checkbox@3.7.0\\n- @react-types/color@3.0.0-beta.22\\n- @react-types/list@3.2.14\\n- @react-types/numberfield@3.8.0\\n- @spectrum-icons/color@3.5.10\\n- @spectrum-icons/express@3.0.0-alpha.14\\n- @spectrum-icons/illustrations@3.6.10\\n- @spectrum-icons/ui@3.6.4\\n- @spectrum-icons/workflow@4.2.9\\n- react-aria@3.32.0\\n- react-aria-components@1.1.0\\n- react-stately@3.30.0\\n- tailwindcss-react-aria-components@1.1.0\n```\n\n----------------------------------------\n\nTITLE: Dialog Children Prop in Spectrum 2 and React Spectrum v3\nDESCRIPTION: Demonstrates the change in the Dialog children prop type between Spectrum 2 and React Spectrum v3, showing the removal of the render prop pattern in Spectrum 2.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/s2/api-diff.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Spectrum 2\nchildren: (DialogRenderProps) => ReactNode | ReactNode\n\n// React Spectrum v3\nchildren: ReactNode\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from @react-spectrum/docs (JavaScript)\nDESCRIPTION: Imports the Layout component from the @react-spectrum/docs package to serve as the base layout for the documentation page. This component wraps the page contents and ensures consistent structure and styling across documentation pages. There are no required parameters or outputs other than the rendered React component tree.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/list/docs/useListState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Listing Released React Spectrum Ecosystem Packages (Text)\nDESCRIPTION: This snippet provides a comprehensive list of released npm packages and their corresponding versions within the Adobe React Spectrum ecosystem. It includes packages from `@adobe/react-spectrum`, `@react-aria`, `@react-stately`, `@internationalized`, and `@react-types`, crucial for dependency management and understanding the release state. This list represents the state of the project at a specific release point (e.g., version 3.19.0 for `@adobe/react-spectrum`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-06-15.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- @adobe/react-spectrum@3.19.0\n- @internationalized/date@3.0.0\n- @internationalized/message@3.0.8\n- @react-aria/accordion@3.0.0-alpha.9\n- @react-aria/actiongroup@3.3.1\n- @react-aria/aria-modal-polyfill@3.5.1\n- @react-aria/autocomplete@3.0.0-alpha.8\n- @react-aria/breadcrumbs@3.2.1\n- @react-aria/button@3.5.1\n- @react-aria/calendar@3.0.0\n- @react-aria/checkbox@3.4.1\n- @react-aria/color@3.0.0-beta.13\n- @react-aria/combobox@3.3.1\n- @react-aria/datepicker@3.0.0\n- @react-aria/dialog@3.2.1\n- @react-aria/dnd@3.0.0-alpha.10\n- @react-aria/focus@3.6.1\n- @react-aria/grid@3.3.1\n- @react-aria/i18n@3.4.1\n- @react-aria/interactions@3.9.1\n- @react-aria/label@3.3.1\n- @react-aria/landmark@3.0.0-alpha.0\n- @react-aria/link@3.3.1\n- @react-aria/list@3.0.0-beta.0\n- @react-aria/listbox@3.5.1\n- @react-aria/menu@3.5.1\n- @react-aria/meter@3.2.1\n- @react-aria/numberfield@3.2.1\n- @react-aria/overlays@3.9.1\n- @react-aria/progress@3.2.1\n- @react-aria/radio@3.2.1\n- @react-aria/searchfield@3.3.1\n- @react-aria/select@3.7.1\n- @react-aria/selection@3.9.1\n- @react-aria/separator@3.2.1\n- @react-aria/slider@3.1.1\n- @react-aria/spinbutton@3.1.1\n- @react-aria/switch@3.2.1\n- @react-aria/tabs@3.2.1\n- @react-aria/tag@3.0.0-alpha.7\n- @react-aria/textfield@3.6.1\n- @react-aria/toggle@3.3.1\n- @react-aria/tooltip@3.2.1\n- @react-aria/utils@3.13.1\n- @react-aria/virtualizer@3.4.1\n- @react-aria/visually-hidden@3.3.1\n- @react-spectrum/accordion@3.0.0-alpha.10\n- @react-spectrum/actionbar@3.0.0-alpha.10\n- @react-spectrum/actiongroup@3.5.1\n- @react-spectrum/autocomplete@3.0.0-alpha.8\n- @react-spectrum/avatar@3.0.0-alpha.7\n- @react-spectrum/breadcrumbs@3.4.1\n- @react-spectrum/button@3.8.1\n- @react-spectrum/buttongroup@3.3.1\n- @react-spectrum/calendar@3.0.0\n- @react-spectrum/card@3.0.0-alpha.9\n- @react-spectrum/checkbox@3.4.1\n- @react-spectrum/color@3.0.0-beta.13\n- @react-spectrum/combobox@3.4.1\n- @react-spectrum/contextualhelp@3.1.1\n- @react-spectrum/datepicker@3.0.0\n- @react-spectrum/dialog@3.4.1\n- @react-spectrum/divider@3.3.1\n- @react-spectrum/dnd@3.0.0-alpha.4\n- @react-spectrum/form@3.3.1\n- @react-spectrum/icon@3.4.1\n- @react-spectrum/illustratedmessage@3.2.1\n- @react-spectrum/image@3.2.1\n- @react-spectrum/label@3.6.1\n- @react-spectrum/layout@3.3.1\n- @react-spectrum/link@3.3.1\n- @react-spectrum/list@3.0.0-beta.0\n- @react-spectrum/listbox@3.6.1\n- @react-spectrum/menu@3.7.1\n- @react-spectrum/meter@3.2.1\n- @react-spectrum/numberfield@3.3.1\n- @react-spectrum/overlays@3.6.1\n- @react-spectrum/picker@3.6.1\n- @react-spectrum/progress@3.2.1\n- @react-spectrum/provider@3.4.1\n- @react-spectrum/radio@3.2.1\n- @react-spectrum/searchfield@3.4.1\n- @react-spectrum/searchwithin@3.0.0-alpha.8\n- @react-spectrum/slider@3.1.1\n- @react-spectrum/statuslight@3.3.1\n- @react-spectrum/switch@3.2.1\n- @react-spectrum/tabs@3.2.1\n- @react-spectrum/tag@3.0.0-alpha.7\n- @react-spectrum/text@3.2.1\n- @react-spectrum/textfield@3.5.1\n- @react-spectrum/theme-dark@3.3.1\n- @react-spectrum/theme-default@3.3.1\n- @react-spectrum/theme-light@3.2.1\n- @react-spectrum/tooltip@3.2.1\n- @react-spectrum/utils@3.7.1\n- @react-spectrum/view@3.2.1\n- @react-spectrum/well@3.2.1\n- @react-stately/calendar@3.0.0\n- @react-stately/checkbox@3.1.1\n- @react-stately/collections@3.4.1\n- @react-stately/color@3.0.0\n- @react-stately/combobox@3.1.1\n- @react-stately/data@3.5.1\n- @react-stately/datepicker@3.0.0\n- @react-stately/dnd@3.0.0-alpha.8\n- @react-stately/grid@3.2.1\n- @react-stately/list@3.5.1\n- @react-stately/menu@3.3.1\n- @react-stately/numberfield@3.1.1\n- @react-stately/overlays@3.3.1\n- @react-stately/radio@3.4.1\n- @react-stately/searchfield@3.2.1\n- @react-stately/select@3.2.1\n- @react-stately/selection@3.10.1\n- @react-stately/slider@3.1.1\n- @react-stately/tabs@3.1.1\n- @react-stately/toggle@3.3.1\n- @react-stately/tooltip@3.1.1\n- @react-stately/tree@3.3.1\n- @react-stately/virtualizer@3.2.1\n- @react-types/accordion@3.0.0-alpha.7\n- @react-types/actionbar@3.0.0-alpha.7\n- @react-types/actiongroup@3.3.1\n- @react-types/autocomplete@3.0.0-alpha.6\n- @react-types/avatar@3.0.0-alpha.6\n- @react-types/breadcrumbs@3.4.1\n- @react-types/button@3.5.1\n- @react-types/buttongroup@3.2.1\n- @react-types/calendar@3.0.0\n- @react-types/card@3.0.0-alpha.7\n- @react-types/checkbox@3.3.1\n- @react-types/color@3.0.0-beta.10\n- @react-types/combobox@3.5.1\n- @react-types/contextualhelp@3.1.1\n- @react-types/datepicker@3.0.0\n- @react-types/dialog@3.4.1\n- @react-types/divider@3.2.1\n- @react-types/form@3.3.1\n- @react-types/grid@3.1.1\n- @react-types/illustratedmessage@3.2.1\n- @react-types/image@3.2.1\n- @react-types/label@3.6.1\n- @react-types/layout@3.3.1\n- @react-types/link@3.3.1\n- @react-types/list@3.0.0-alpha.1\n- @react-types/listbox@3.3.1\n- @react-types/menu@3.6.1\n- @react-types/meter@3.2.1\n- @react-types/numberfield@3.3.1\n- @react-types/overlays@3.6.1\n- @react-types/progress@3.2.1\n- @react-types/provider@3.5.1\n- @react-types/radio@3.2.1\n- @react-types/searchfield@3.3.1\n- @react-types/searchwithin@3.0.0-alpha.6\n- @react-types/select@3.6.1\n- @react-types/shared@3.13.1\n- @react-types/slider@3.1.1\n- @react-types/statuslight@3.2.1\n- @react-types/switch@3.2.1\n- @react-types/tabs@3.1.1\n- @react-types/tag@3.0.0-alpha.5\n- @react-types/text@3.2.1\n- @react-types/textfield@3.5.1\n- @react-types/tooltip@3.2.1\n- @react-types/view@3.2.1\n- @react-types/well@3.2.1\n- react-aria@3.17.0\n- react-stately@3.15.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Empty State for React Spectrum TagGroup (TSX)\nDESCRIPTION: This example demonstrates how to provide a custom user interface for a `TagGroup` component when it has no tags. It defines a function `renderEmptyState` that returns JSX, including a `Link` component from `@react-spectrum/link`, and assigns this function to the `renderEmptyState` prop of the `TagGroup`. The `TagGroup` is explicitly rendered with an empty array `{[]}` as children to trigger the empty state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Link} from '@react-spectrum/link';\n\nfunction renderEmptyState() {\n  return (\n    <span>\n      No categories. <Link><a href=\"//react-spectrum.com\">Click here</a></Link> to add some.\n    </span>\n  );\n}\n\n<TagGroup\n  label=\"Categories\"\n  renderEmptyState={renderEmptyState}>\n  {[]}\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Structuring Component Example Cards for Documentation - MDX\nDESCRIPTION: This snippet demonstrates the use of MDX with embedded React components to display categorized groups of component usages via ExampleCard elements. Each ExampleCard provides a title, description, a link, and visualizes the component illustration for the documentation site. Dependencies include the imported SVGs, styles object, and ExampleCard from previous snippets. Inputs are card properties and components; outputs are rendered documentation UI sections grouped by category. Usage assumes a build tool supporting MDX and React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n## Buttons\n\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"Button.html\"\n  title=\"Button\"\n  description=\"A button allows a user to perform an action with a mouse, touch, or keyboard.\">\n  <Button />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ToggleButton.html\"\n  title=\"ToggleButton\"\n  description=\"A toggle button allows a user to toggle between two states.\">\n  <ToggleButton />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ToggleButtonGroup.html\"\n  title=\"ToggleButtonGroup\"\n  description=\"A toggle button group allows a user to toggle multiple options, with single or multiple selection.\">\n  <ToggleButtonGroup />\n</ExampleCard>\n\n<ExampleCard\n  url=\"FileTrigger.html\"\n  title=\"FileTrigger\"\n  description=\"A file trigger allows a user to access the file system with a Button.\">\n  <FileTrigger />\n</ExampleCard>\n\n</section>\n\n## Pickers\n\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"ComboBox.html\"\n  title=\"ComboBox\"\n  description=\"A combobox combines a text input with a listbox, and allows a user to filter a list of options.\">\n  <ComboBoxAnatomy />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Select.html\"\n  title=\"Select\"\n  description=\"A select displays a collapsible list of options, and allows a user to select one of them.\">\n  <SelectAnatomy />\n</ExampleCard>\n\n</section>\n\n## Collections\n\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"Menu.html\"\n  title=\"Menu\"\n  description=\"A menu displays a list of actions or options that a user can choose.\">\n  <Menu />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ListBox.html\"\n  title=\"ListBox\"\n  description=\"A listbox displays a list of options, and allows a user to select one or more of them.\">\n  <ListBox />\n</ExampleCard>\n\n<ExampleCard\n  url=\"GridList.html\"\n  title=\"GridList\"\n  description=\"A grid list displays a list of interactive items, with keyboard navigation, row selection, and actions.\">\n  <ListView />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Table.html\"\n  title=\"Table\"\n  description=\"A table displays data in rows and columns, with row selection and sorting.\">\n  <Table />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Tree.html\"\n  title=\"Tree\"\n  description=\"A tree displays heirarchical data with selection and collapsing.\">\n  <Tree />\n</ExampleCard>\n\n<ExampleCard\n  url=\"TagGroup.html\"\n  title=\"TagGroup\"\n  description=\"A tag group displays a list of items, with support for keyboard navigation, selection, and removal.\">\n  <TagGroup />\n</ExampleCard>\n\n</section>\n\n## Date and time\n\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"DatePicker.html\"\n  title=\"DatePicker\"\n  description=\"A date picker combines a DateField and a Calendar popover.\">\n  <DatePicker />\n</ExampleCard>\n\n<ExampleCard\n  url=\"DateRangePicker.html\"\n  title=\"DateRangePicker\"\n  description=\"A date range picker combines two DateFields and a RangeCalendar popover.\">\n  <DateRangePicker />\n</ExampleCard>\n\n<ExampleCard\n  url=\"DateField.html\"\n  title=\"DateField\"\n  description=\"A date field allows a user to enter and edit date values using a keyboard.\">\n  <DateField />\n</ExampleCard>\n\n<ExampleCard\n  url=\"TimeField.html\"\n  title=\"TimeField\"\n  description=\"A time field allows a user to enter and edit time values using a keyboard.\">\n  <TimeField />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Calendar.html\"\n  title=\"Calendar\"\n  description=\"A calendar allows a user to select a single date from a date grid.\">\n  <Calendar />\n</ExampleCard>\n\n<ExampleCard\n  url=\"RangeCalendar.html\"\n  title=\"RangeCalendar\"\n  description=\"A range calendar allows a user to select a contiguous range of dates.\">\n  <RangeCalendar />\n</ExampleCard>\n\n</section>\n\n## Color\n\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"ColorPicker.html\"\n  title=\"ColorPicker\"\n  description=\"A color picker synchronizes a color value between multiple React Aria color components.\">\n  <ColorPicker />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ColorArea.html\"\n  title=\"ColorArea\"\n  description=\"A color area allows users to adjust two channels of a color value.\">\n  <ColorArea />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ColorSlider.html\"\n  title=\"ColorSlider\"\n  description=\"A color slider allows users to adjust an individual channel of a color value.\">\n  <ColorSlider />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ColorWheel.html\"\n  title=\"ColorWheel\"\n  description=\"A color wheel allows users to adjust the hue of a color value on a circular track.\">\n  <ColorWheel />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ColorField.html\"\n  title=\"ColorField\"\n  description=\"A color field allows users to edit a hex color or individual color channel value.\">\n  <ColorField />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ColorSwatch.html\"\n  title=\"ColorSwatch\"\n  description=\"A color swatch displays a preview of a selected color.\">\n  <ColorSwatch />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ColorSwatchPicker.html\"\n  title=\"ColorSwatchPicker\"\n  description=\"A color swatch picker displays a list of color swatches and allows a user to select one of them.\">\n  <ColorSwatchPicker />\n</ExampleCard>\n\n</section>\n\n```\n\n----------------------------------------\n\nTITLE: Popover Dialog Example\nDESCRIPTION: Creates a dialog without an underlay that displays information in a popover style, ideal for showing non-critical information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"popover\">\n  <ActionButton>Info</ActionButton>\n  <Dialog>\n    <Heading>Version Info</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Version 1.0.0, Copyright 2020\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using Render Props for Dynamic Class Names Based on States\nDESCRIPTION: Example of using a function to dynamically set class names based on component states like selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className={({isSelected}) => isSelected ? 'selected' : 'unselected'}>\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Highlight Selection Mode in TreeView (TSX)\nDESCRIPTION: This example configures a TreeView to use a highlight selection style instead of the default checkbox style, by setting the selectionStyle prop to 'highlight'. Multiple items can be selected. Dependencies include ExampleTree. Parameters to note are selectionStyle and defaultSelectedKeys. The input is an array of default selected keys, and the output is a visual and behavioral change in selection mode. Useful for UIs that favor highlighted backgrounds over checkboxes for selection feedback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleTree\n  aria-label=\"Example tree with highlight selection\"\n  defaultExpandedKeys={['projects', 'project-2']}\n  selectionMode=\"multiple\"\n  defaultSelectedKeys={['document-a', 'document-b']}\n  /*- begin highlight -*/\n  selectionStyle=\"highlight\"\n  /*- end highlight -*/\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Min/Max Values in DateRangePicker\nDESCRIPTION: Shows how to set minimum and maximum date constraints in DateRangePicker using minValue prop with today's date as minimum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Trip dates\"\n  minValue={today(getLocalTimeZone())}\n  defaultValue={{\n    start: parseDate('2022-02-03'),\n    end: parseDate('2022-05-03')\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Menu Items Implementation\nDESCRIPTION: Example showing how to create a menu with dynamically generated items from an array.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let menuItems = [\n    {name: 'Cut'},\n    {name: 'Copy'},\n    {name: 'Paste'},\n    {name: 'Replace'}\n  ];\n\n  return (\n    <MenuTrigger>\n      <ActionButton>\n        Edit\n      </ActionButton>\n      <Menu items={menuItems}>\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </Menu>\n    </MenuTrigger>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DatePicker Usage Example in React Spectrum\nDESCRIPTION: Simple example showing how to render a DatePicker component with a label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker label=\"Event date\" />\n```\n\n----------------------------------------\n\nTITLE: Styling the Empty State of Tree with CSS\nDESCRIPTION: Provides example CSS to style the empty state of the `Tree` component. It targets the `react-aria-Tree` element when it has the `data-empty` attribute, centering the text and applying italic styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Tree {\n  &[data-empty] {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-style: italic;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex Menu Items with Icons and Descriptions in React Spectrum\nDESCRIPTION: This example demonstrates how to create menu items with additional content such as icons, descriptions, and keyboard shortcuts using React Spectrum components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Keyboard, Text} from '@react-spectrum/text';\n<MenuTrigger>\n  <ActionButton>\n    Edit\n  </ActionButton>\n  <Menu>\n    <Item key=\"cut\" textValue=\"cut\">\n      <Cut />\n      <Text>Cut</Text>\n      <Keyboard>⌘X</Keyboard>\n    </Item>\n    <Item key=\"copy\" textValue=\"copy\">\n      <Copy />\n      <Text>Copy</Text>\n      <Keyboard>⌘C</Keyboard>\n    </Item>\n    <Item key=\"paste\" textValue=\"paste\">\n      <Paste />\n      <Text>Paste</Text>\n      <Keyboard>⌘V</Keyboard>\n    </Item>\n  </Menu>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Customized Tabs Layout in React Spectrum\nDESCRIPTION: Demonstrates a more complex Tabs layout with dynamic tab management and additional UI elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example () {\n  let [tabs, setTabs] = React.useState([\n    {name: 'Tab 1', children: 'Tab Body 1'},\n    {name: 'Tab 2', children: 'Tab Body 2'},\n    {name: 'Tab 3', children: 'Tab Body 3'}\n  ]);\n  type Tab = typeof tabs[0];\n\n  let addTab = () => {\n    let newTabs = [...tabs];\n    newTabs.push({\n      name: `Tab ${tabs.length + 1}`,\n      children: `Tab Body ${tabs.length + 1}`\n    });\n\n    setTabs(newTabs);\n  };\n\n  let removeTab = () => {\n    if (tabs.length > 1) {\n      let newTabs = [...tabs];\n      newTabs.pop();\n      setTabs(newTabs);\n    }\n  };\n\n  return (\n    <Tabs aria-label=\"Tab example\" items={tabs}>\n      <Flex>\n        <TabList flex=\"1 1 auto\" minWidth=\"0px\">\n          {(item: Tab) => (\n            <Item key={item.name}>\n              {item.name}\n            </Item>\n          )}\n        </TabList>\n        <div style={{display: 'flex', flex: '0 0 auto', borderBottom: 'var(--spectrum-alias-border-size-thick) solid var(--spectrum-global-color-gray-300)'}}>\n          <ActionGroup disabledKeys={tabs.length === 1 ? ['remove'] : undefined} onAction={val => val === 'add' ? addTab() : removeTab()}>\n            <Item key=\"add\">\n              Add Tab\n            </Item>\n            <Item key=\"remove\">\n              Remove Tab\n            </Item>\n          </ActionGroup>\n        </div>\n      </Flex>\n      <TabPanels>\n        {(item: Tab) => (\n          <Item key={item.name}>\n            {item.children}\n          </Item>\n        )}\n      </TabPanels>\n    </Tabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the DateField Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'DateField' component. It renders a field allowing users to enter and edit date values using the keyboard, often with locale-specific formatting. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<DateField />\n```\n\n----------------------------------------\n\nTITLE: CSS for Styling Disabled ColorSwatchPickerItems\nDESCRIPTION: CSS styling for disabled color swatch items, applying reduced opacity to indicate the disabled state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSwatchPickerItem {\n  &[data-disabled] {\n    opacity: 0.2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Button Component with React Aria\nDESCRIPTION: This snippet shows how to implement a reusable Button component using the useButton hook from React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Allowed Drop Operations\nDESCRIPTION: This example demonstrates how to restrict the allowed drop operations for draggable items using the getAllowedDropOperations function. Here, only copy operations are allowed, preventing items from being moved.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_49\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  ///- begin collapse -///\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Adobe Photoshop'},\n      {id: 2, name: 'Adobe XD'},\n      {id: 3, name: 'Adobe Dreamweaver'},\n      {id: 4, name: 'Adobe InDesign'},\n      {id: 5, name: 'Adobe Connect'}\n    ]\n  });\n  ///- end collapse -///\n  // ...\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    ///- begin collapse -///\n    renderDragPreview(items) {\n      return (\n        <div className=\"drag-preview\">\n          {items[0]['text/plain']}\n          <span className=\"badge\">{items.length}</span>\n        </div>\n      );\n    },\n    getItems(keys) {\n      return [...keys].map(key => {\n        let item = list.getItem(key);\n        return {\n          'text/plain': item.name,\n          'custom-app-type': JSON.stringify(item)\n        };\n      });\n    },\n    ///- end collapse -///\n    // ...\n    /*- begin highlight -*/\n    getAllowedDropOperations: () => ['copy']\n    /*- end highlight -*/\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <ListBox aria-label=\"Draggable list\" selectionMode=\"multiple\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </ListBox>\n      <DroppableListBox />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Button in React Aria\nDESCRIPTION: Simple example showing how to create a disabled button using the isDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button isDisabled>Pin</Button>\n```\n\n----------------------------------------\n\nTITLE: Styling DateField Component with CSS\nDESCRIPTION: This CSS snippet provides basic styling for the DateField component, including layout, colors, and focus states for the field and its segments.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.field {\n  display: block;\n  padding: 2px 4px;\n  border-radius: 2px;\n  border: 1px solid var(--gray);\n  background: var(--spectrum-global-color-gray-50);\n}\n\n.field:focus-within {\n  border-color: var(--blue);\n}\n\n.segment {\n  padding: 0 2px;\n  font-variant-numeric: tabular-nums;\n  text-align: end;\n}\n\n.segment.placeholder {\n  color: var(--spectrum-gray-600);\n}\n\n.segment:focus {\n  color: white;\n  background: var(--blue);\n  outline: none;\n  border-radius: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria ColorThumb Based on State Attributes\nDESCRIPTION: This CSS snippet demonstrates how to style the `ColorThumb` component based on its interaction states using data attributes. It targets the `data-dragging` and `data-focused` attributes to apply specific styles when the thumb is being dragged or has focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorThumb[data-dragging] {\n  /* ... */\n}\n\n.react-aria-ColorThumb[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-only Checkbox with React Aria\nDESCRIPTION: Example showing how to create a read-only checkbox using the isReadOnly prop. The checkbox remains focusable but its state cannot be changed by the user.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckbox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox isSelected isReadOnly>Agree</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Star Icon Component\nDESCRIPTION: Implementation of a custom star icon component using SVG wrapped in the Icon component. Demonstrates proper usage of viewBox and path attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/custom-icons.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomIcon(props) {\n  return(\n    <Icon {...props}>\n      <svg viewBox=\"0 0 36 36\">\n        <path d=\"M18.477.593,22.8,12.029l12.212.578a.51.51,0,0,1,.3.908l-9.54,7.646,3.224,11.793a.51.51,0,0,1-.772.561L18,26.805,7.78,33.515a.51.51,0,0,1-.772-.561l3.224-11.793L.692,13.515a.51.51,0,0,1,.3-.908L13.2,12.029,17.523.593A.51.51,0,0,1,18.477.593Z\" />\n      </svg>\n    </Icon>\n  );\n}\n\n<CustomIcon aria-label=\"Star\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Area Component Using useTextField in React (TypeScript)\nDESCRIPTION: Shows how to implement a multi-line text area using useTextField with inputElementType set to 'textarea'. Dependencies are React, TypeScript, and @react-aria/textfield. Key props include label and any others from AriaTextFieldProps, plus the distinction of using 'textarea' instead of 'input'. Accepts props and returns a text area wrapped in the accessibility-enabled context. Limited to text area input; analogous to the TextField example for single-line input.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport type {AriaTextFieldProps} from '@react-aria/textfield';\\nimport {useTextField} from '@react-aria/textfield';\\n\\nfunction TextArea(props: AriaTextFieldProps<HTMLTextAreaElement>) {\\n  let {label} = props;\\n  let ref = React.useRef(null);\\n  let {labelProps, inputProps} = useTextField({...props, inputElementType: 'textarea'}, ref);\\n\\n  return (\\n    <div style={{display: 'flex', flexDirection: 'column', width: 200}}>\\n      <label {...labelProps}>{label}</label>\\n      <textarea {...inputProps} ref={ref} />\\n    </div>\\n  );\\n}\\n\\n<TextArea label=\"Description\" />\n```\n\n----------------------------------------\n\nTITLE: Importing BlogPostLayout Component in React\nDESCRIPTION: Imports the BlogPostLayout component from the @react-spectrum/docs package and exports it as the default export. This is used to structure the layout of the blog post.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-11-30.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: IllustratedMessage for No Search Results\nDESCRIPTION: Example using the NoSearchResults illustration to display a message when search returns no results.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport NoSearchResults from '@spectrum-icons/illustrations/NoSearchResults';\n\n<IllustratedMessage>\n  <NoSearchResults />\n  <Heading>No matching results</Heading>\n  <Content>Try another search.</Content>\n</IllustratedMessage>\n```\n\n----------------------------------------\n\nTITLE: Integrating a Slider with HTML Forms via the name Prop (React Spectrum, TypeScript)\nDESCRIPTION: This snippet demonstrates using the \\\"name\\\" prop on a React Spectrum Slider to integrate the input value with standard HTML form submission. The slider is labeled 'Opacity', initialized to 50, and will submit its value as 'opacity' in the form data. This pattern requires no special dependencies beyond React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<Slider\n  label=\"Opacity\"\n  defaultValue={50}\n  name=\"opacity\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Using the MenuButton Component in TypeScript\nDESCRIPTION: This example demonstrates how to use the previously defined `MenuButton` component. It renders a `MenuButton` with the label \"Actions\" and passes an `onAction` prop (an alert function in this case) to handle item selection. Three `Item` components from `@react-stately/collections` are provided as children, representing the menu items \"Copy\", \"Cut\", and \"Paste\".\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MenuButton label=\"Actions\" onAction={alert}>\n  <Item key=\"copy\">Copy</Item>\n  <Item key=\"cut\">Cut</Item>\n  <Item key=\"paste\">Paste</Item>\n</MenuButton>\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Label Component with React Aria Context in TSX\nDESCRIPTION: This snippet illustrates how to create a custom label component (`MyCustomLabel`) that works seamlessly within React Aria components like `DateField`. It uses `React.forwardRef` for ref forwarding and the `useContextProps` hook along with `LabelContext` to merge props and refs provided by the parent React Aria component (e.g., `DateField`) with the local props of `MyCustomLabel`. This allows reusing existing styled label components while ensuring compatibility with React Aria's context-based prop passing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  ///- end highlight -///\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Styling description slot in Select - React Spectrum - CSS\nDESCRIPTION: Applies a reduced font size to any element with slot=description inside a .react-aria-Select, to standardize appearance of help text. Requires slot attributes and CSS scope structure. Input: description slot element. Output: visually styled description, unobtrusive and standardized.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Select {\\n  [slot=description] {\\n    font-size: 12px;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using the TreeView Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'TreeView' component (rendered as '<Tree />'). It is used for displaying hierarchical data with selection and collapsing capabilities. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Tree />\n```\n\n----------------------------------------\n\nTITLE: Using Uncontrolled Color Area Component\nDESCRIPTION: Shows how to use the ColorArea component in an uncontrolled manner with a custom default value and color space. The example uses HSB color space with hue and saturation mapped to x and y axes respectively.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<label id=\"hsb-label-id\">x: Hue, y: Saturation</label>\n<ColorArea\n  aria-labelledby=\"hsb-label-id\"\n  defaultValue=\"hsb(219, 58%, 93%)\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Component Illustrations, Styles, and Example Cards - JavaScript\nDESCRIPTION: This snippet imports various SVG component illustrations, CSS styles, and the ExampleCard and Layout components used for documentation. It prepares the visualization resources necessary for rendering categorized, interactive documentation entries. Dependencies include the @react-spectrum/docs package and local SVG assets, with each import mapped to a variable for use in the documentation layout. Inputs are import/require paths, and the outputs are named module bindings used elsewhere in the documentation file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport styles from '@react-spectrum/docs/src/docs.css';\n\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ComboBoxAnatomy from '../assets/component-illustrations/ComboBox.svg';\nimport SelectAnatomy from '../assets/component-illustrations/Picker.svg';\nimport Button from '../assets/component-illustrations/Button.svg';\nimport ToggleButton from '../assets/component-illustrations/ToggleButton.svg';\nimport ToggleButtonGroup from '../assets/component-illustrations/ActionGroup.svg';\nimport Checkbox from '../assets/component-illustrations/Checkbox.svg';\nimport CheckboxGroup from '../assets/component-illustrations/CheckboxGroup.svg';\nimport RadioGroup from '../assets/component-illustrations/RadioGroup.svg';\nimport Switch from '../assets/component-illustrations/Switch.svg';\nimport TextField from '../assets/component-illustrations/TextField.svg';\nimport NumberField from '../assets/component-illustrations/NumberField.svg';\nimport SearchField from '../assets/component-illustrations/SearchField.svg';\nimport Meter from '../assets/component-illustrations/Meter.svg';\nimport ProgressBar from '../assets/component-illustrations/ProgressCircle.svg';\nimport Tabs from '../assets/component-illustrations/Tabs.svg';\nimport Link from '../assets/component-illustrations/Link.svg';\nimport Breadcrumbs from '../assets/component-illustrations/Breadcrumbs.svg';\nimport Slider from '../assets/component-illustrations/Slider.svg';\nimport Dialog from '../assets/component-illustrations/Dialog.svg';\nimport Tooltip from '../assets/component-illustrations/Tooltip.svg';\nimport Popover from '../assets/component-illustrations/Popover.svg';\nimport Menu from '../assets/component-illustrations/Menu.svg';\nimport ListBox from '../assets/component-illustrations/ListBox.svg';\nimport ListView from '../assets/component-illustrations/ListView.svg';\nimport Table from '../assets/component-illustrations/Table.svg';\nimport Tree from '../assets/component-illustrations/Tree.svg';\nimport Calendar from '../assets/component-illustrations/Calendar.svg';\nimport RangeCalendar from '../assets/component-illustrations/RangeCalendar.svg';\nimport DateField from '../assets/component-illustrations/DateField.svg';\nimport TimeField from '../assets/component-illustrations/TimeField.svg';\nimport DatePicker from '../assets/component-illustrations/DatePicker.svg';\nimport DateRangePicker from '../assets/component-illustrations/DateRangePicker.svg';\nimport Press from '../assets/component-illustrations/usePress.svg';\nimport LongPress from '../assets/component-illustrations/useLongPress.svg';\nimport Hover from '../assets/component-illustrations/useHover.svg';\nimport Move from '../assets/component-illustrations/useMove.svg';\nimport Keyboard from '../assets/component-illustrations/useKeyboard.svg';\nimport FocusRing from '../assets/component-illustrations/useFocusRing.svg';\nimport FocusScope from '../assets/component-illustrations/FocusScope.svg';\nimport FocusWithin from '../assets/component-illustrations/useFocusWithin.svg';\nimport Focus from '../assets/component-illustrations/useFocus.svg';\nimport TagGroup from '../assets/component-illustrations/TagGroup.svg';\nimport DropZone from '../assets/component-illustrations/DropZone.svg';\nimport FileTrigger from '../assets/component-illustrations/FileTrigger.svg'\nimport Form from '../assets/component-illustrations/Form.svg';\nimport ColorSlider from '../assets/component-illustrations/ColorSlider.svg';\nimport ColorWheel from '../assets/component-illustrations/ColorWheel.svg';\nimport ColorArea from '../assets/component-illustrations/ColorArea.svg';\nimport ColorField from '../assets/component-illustrations/ColorField.svg';\nimport ColorSwatch from '../assets/component-illustrations/ColorSwatch.svg';\nimport ColorSwatchPicker from '../assets/component-illustrations/ColorSwatchPicker.svg';\nimport ColorPicker from '../assets/component-illustrations/ColorPicker.svg';\nimport Disclosure from '../assets/component-illustrations/Disclosure.svg';\nimport DisclosureGroup from '../assets/component-illustrations/DisclosureGroup.svg';\nimport Toast from '../assets/component-illustrations/Toast.svg';\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight Selection in React Spectrum ListView\nDESCRIPTION: This snippet shows how to use the selectionStyle prop to enable highlight selection in a ListView, which changes both the appearance and behavior of selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonList selectionStyle=\"highlight\" aria-label=\"Highlight selection ListView\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Item Data for Draggable List in React Spectrum\nDESCRIPTION: Sets up the initial list of items for a draggable ListView using useListData. This provides helper methods for modifying the list during drag and drop operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlet list = useListData({\n  initialItems: [\n    {id: 'a', type: 'file', name: 'Adobe Photoshop'},\n    {id: 'b', type: 'file', name: 'Adobe XD'},\n    {id: 'c', type: 'file', name: 'Adobe Dreamweaver'},\n    {id: 'd', type: 'file', name: 'Adobe InDesign'},\n    {id: 'e', type: 'file', name: 'Adobe Connect'}\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CalendarCell Component in React with useCalendarCell\nDESCRIPTION: This snippet shows the implementation of a CalendarCell component using the useCalendarCell hook from React Aria. It renders individual cells in the calendar, handling various states like selected, disabled, and unavailable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCalendarCell} from '@react-aria/calendar';\n\nfunction CalendarCell({state, date}) {\n  let ref = React.useRef(null);\n  let {\n    cellProps,\n    buttonProps,\n    isSelected,\n    isOutsideVisibleRange,\n    isDisabled,\n    isUnavailable,\n    formattedDate\n  } = useCalendarCell({date}, state, ref);\n\n  return (\n    <td {...cellProps}>\n      <div\n        {...buttonProps}\n        ref={ref}\n        hidden={isOutsideVisibleRange}\n        className={`cell ${isSelected ? 'selected' : ''} ${isDisabled ? 'disabled' : ''} ${isUnavailable ? 'unavailable' : ''}`}>\n        {formattedDate}\n      </div>\n    </td>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ColorSwatchPickerItem Wrapper in React\nDESCRIPTION: Shows how to create a wrapper component for ColorSwatchPickerItem to customize its props, such as adding a custom className.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyColorSwatchPickerItem(props) {\n  return <ColorSwatchPickerItem {...props} className=\"my-swatch\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Anatomy of a TimeField Component in TSX\nDESCRIPTION: Illustrates the structural composition of a TimeField, including the main input elements (Label, DateInput, DateSegment) and optional accessibility/feedback elements like Text (for description) and FieldError (for validation messages).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TimeField, Label, DateInput, DateSegment, Text, FieldError} from 'react-aria-components';\n\n<TimeField>\n  <Label />\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  <Text slot=\"description\" />\n  <FieldError />\n</TimeField>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SelectItem Component for Searchable Select\nDESCRIPTION: Defines a custom SelectItem component used within the ListBox of the Searchable Select. It includes styling and conditional rendering for selected items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/searchable-select.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction SelectItem(props: ListBoxItemProps & {children: string}) {\n  return (\n    <ListBoxItem\n      {...props}\n      textValue={props.children}\n      className=\"group flex items-center gap-2 cursor-default select-none py-2 px-4 outline-hidden rounded-sm text-gray-900 focus:bg-sky-600 focus:text-white\">\n      {({ isSelected }) => (\n        <>\n          <span className=\"flex-1 flex items-center gap-2 truncate font-normal group-selected:font-medium\">{props.children}</span>\n          <span className=\"w-5 flex items-center text-sky-600 group-focus:text-white\">\n            {isSelected && <CheckIcon size=\"S\" />}\n          </span>\n        </>\n      )}\n    </ListBoxItem>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating CheckboxGroup with HTML Forms in React Spectrum (TypeScript)\nDESCRIPTION: This snippet shows how to utilize the name prop in CheckboxGroup to integrate it into standard HTML forms, ensuring the selected checkbox values are submitted with the given name. Each Checkbox receives a value for form serialization. This approach works seamlessly with form submission and enables backend parsing of array data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup label=\\\"Condiments\\\" name=\\\"condiments\\\">\\n  <Checkbox value=\\\"mayo\\\">Mayo</Checkbox>\\n  <Checkbox value=\\\"mustart\\\">Mustard</Checkbox>\\n  <Checkbox value=\\\"ketchup\\\">Ketchup</Checkbox>\\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only TextField\nDESCRIPTION: Example showing how to create a read-only TextField with default value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<MyTextField label=\"Email\" defaultValue=\"abc@adobe.com\" isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Visualizing Spectrum Color Values with Interactive Controls in React (TSX)\nDESCRIPTION: This React component demonstrates Spectrum color values (v5 and v6). It allows users to switch between light/dark color schemes and color versions (v5/v6) using Pickers. The component dynamically fetches the appropriate color list (`dnaDocs.exports.ColorValue` or `dnaDocs.exports.ColorValueV6`) based on the selected version and renders color swatches using the `View` component with corresponding `backgroundColor` props and the selected `colorVersion`. It relies on `useState` for managing the selected scheme and version, and `ReactDOM` to render the component into the DOM element with id 'color-viewer'. Requires React, ReactDOM, and React Spectrum components (`View`, `Flex`, `Picker`, `Item`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/styling.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport\nfunction ColorViewer() {\n  let [selectedKey, setSelectedKey] = useState();\n  let [colorVersion, setColorVersion] = useState('5');\n  let colors = colorVersion === '6'\n    ? dnaDocs.exports.ColorValueV6.id\n    : dnaDocs.exports.ColorValue.id;\n\n  return (\n    <Example colorScheme={selectedKey}>\n      <Flex gap=\"size-100\">\n        <Picker label=\"Color Scheme\" selectedKey={selectedKey} onSelectionChange={setSelectedKey}>\n          <Item key=\"light\">Light</Item>\n          <Item key=\"dark\">Dark</Item>\n        </Picker>\n        <Picker label=\"Color Version\" selectedKey={colorVersion} onSelectionChange={setColorVersion}>\n          <Item key=\"5\">v5 (default)</Item>\n          <Item key=\"6\">v6</Item>\n        </Picker>\n      </Flex>\n      <ul style={{columnWidth: 160, listStyle: 'none', padding: 0}}>\n        {dnaDocs.links[colors].value.elements.filter(v => v.value && !v.value.startsWith('static')).map(v =>\n          <li key={v.value}>\n            <Flex alignItems=\"center\" marginBottom=\"size-25\">\n              <View colorVersion={+colorVersion} backgroundColor={v.value} width=\"size-250\" height=\"size-250\" marginEnd=\"size-100\" flexShrink={0} />\n              {v.value}\n            </Flex>\n          </li>\n        )}\n      </ul>\n    </Example>\n  );\n}\n\nReactDOM.createRoot(document.getElementById('color-viewer')).render(<ColorViewer />);\n```\n\n----------------------------------------\n\nTITLE: Using the Custom OptionMenuTrigger Component\nDESCRIPTION: Example usage of the custom OptionMenuTrigger component with standard React Aria components like Button, Popover, and Menu. The menu will only open when the Alt key is held while interacting with the button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\n<OptionMenuTrigger>\n  <Button>Save</Button>\n  <Popover>\n    <Menu>\n      <MenuItem>Save</MenuItem>\n      <MenuItem>Save as…</MenuItem>\n      <MenuItem>Rename…</MenuItem>\n      <MenuItem>Delete…</MenuItem>\n    </Menu>\n  </Popover>\n</OptionMenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled SearchField\nDESCRIPTION: Simple example showing how to create a disabled SearchField component using the isDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<MySearchField label=\"Email\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ComboBoxClearButton Component with React Context in TypeScript\nDESCRIPTION: This example demonstrates how to create a clear button component for a ComboBox by accessing the component's state through ComboBoxStateContext. The button allows users to clear the selected value by setting the selectedKey to null.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ComboBoxStateContext} from 'react-aria-components';\n\nfunction ComboBoxClearButton() {\n  /*- begin highlight -*/\n  let state = React.useContext(ComboBoxStateContext);\n  /*- end highlight -*/\n  return (\n    <Button\n      // Don't inherit default Button behavior from ComboBox.\n      slot={null}\n      className=\"clear-button\"\n      aria-label=\"Clear\"\n      onPress={() => state?.setSelectedKey(null)}>\n      ✕\n    </Button>\n  );\n}\n\n<ComboBox defaultSelectedKey=\"cat\">\n  <Label>Favorite Animal</Label>\n  <div>\n    <Input />\n    {/*- begin highlight -*/}\n    <ComboBoxClearButton />\n    {/*- end highlight -*/}\n    <Button>▼</Button>\n  </div>\n  <Popover>\n    <ListBox>\n      <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n      <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n      <ListBoxItem id=\"kangaroo\">Kangaroo</ListBoxItem>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Defining Ripple Animation with CSS\nDESCRIPTION: This CSS snippet defines the keyframes animation for the ripple effect used in the RippleButton component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ripple-button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@keyframes ripple {\n  from {\n    transform: scale(0);\n    opacity: 1;\n  }\n  to {\n    transform: scale(6);\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ColorSlider Component Structure\nDESCRIPTION: Shows the basic structure of the ColorSlider component with its child components, demonstrating how the different parts fit together.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSlider>\n  <Label />\n  <SliderOutput />\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Handling Directory Drops in React with TypeScript\nDESCRIPTION: This snippet demonstrates how to handle directory drops in a React component using the useDrop hook. It iterates through the contents of a dropped directory and displays the file names in a grid.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DirectoryDropItem} from '@react-aria/dnd';\nimport File from '@spectrum-icons/workflow/FileTxt';\nimport Folder from '@spectrum-icons/workflow/Folder';\n\nfunction DropTarget() {\n  let [files, setFiles] = React.useState(null);\n  let ref = React.useRef(null);\n  let {dropProps, isDropTarget} = useDrop({\n    ref,\n    async onDrop(e) {\n      // Find the first dropped item that is a directory.\n      let dir = e.items.find(item => item.kind === 'directory') as DirectoryDropItem;\n      if (dir) {\n        // Read entries in directory and update state with relevant info.\n        let files = [];\n        for await (let entry of dir.getEntries()) {\n          files.push({\n            name: entry.name,\n            kind: entry.kind\n          });\n        }\n        setFiles(files);\n      }\n    }\n  });\n\n  let contents = <>Drop directory here</>;\n  if (files) {\n    contents = (\n      <ul>\n        {files.map(f => (\n          <li key={f.name}>\n            {f.kind === 'directory' ? <Folder /> : <File />}\n            <span>{f.name}</span>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  return (\n    <div {...dropProps} role=\"button\" tabIndex={0} ref={ref} className={`droppable grid ${isDropTarget ? 'target' : ''}`}>\n      {contents}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing a Custom DateSegment Wrapper - React Spectrum (TypeScript)\nDESCRIPTION: Shows how to compose a custom wrapper component around DateSegment for additional prop customization or styling. Useful for extending or specializing behavior of React Aria's segment rendering while passing down required props and a custom className. Requires a pre-existing MyDateSegment component and TypeScript support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction MyDateSegment(props) {\n  return <MyDateSegment {...props} className=\"my-date-segment\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Button Styles for RangeCalendar Example in CSS\nDESCRIPTION: Imports CSS styles defined in `./Button.mdx` into the main CSS block using the `@import` rule, applying them specifically to the `button` layer. This is part of the styling for the example `RangeCalendar`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n```\n\n----------------------------------------\n\nTITLE: Providing Popover Open State and Trigger Reference via Context in React Spectrum with TypeScript\nDESCRIPTION: Illustrates advanced usage of React Contexts to provide handlers, refs, and state (isOpen, onOpenChange, triggerRef) to nested components like Popover or Button. The HelpTrigger example integrates ButtonContext and PopoverContext, allowing the popover to be opened via keyboard shortcuts (e.g. '?'). Requires react-aria-components for contexts and Button/MyPopover components. Inputs: children rendered inside HelpTrigger; Output: compositional API for context-based triggering and open-state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ButtonContext, PopoverContext} from 'react-aria-components';\\n\\ninterface HelpTriggerProps {\\n  children?: React.ReactNode\\n}\\n\\nfunction HelpTrigger({children}: HelpTriggerProps) {\\n  let triggerRef = React.useRef(null);\\n  let [isOpen, setOpen] = React.useState(false);\\n  let onKeyDown = (e: React.KeyboardEvent) => {\\n    if (e.key === '?') {\\n      setOpen(true);\\n    }\\n  };\\n\\n  return (\\n    <ButtonContext.Provider value={{onKeyDown, ref: triggerRef}}>\\n      {/*- begin highlight -*/}\\n      <PopoverContext.Provider value={{triggerRef, isOpen, onOpenChange: setOpen}}>\\n      {/*- end highlight -*/}\\n        {children}\\n      </PopoverContext.Provider>\\n    </ButtonContext.Provider>\\n  );\\n}\\n\\n<HelpTrigger>\\n  <Button>Press ? for help</Button>\\n  <MyPopover>\\n    <Heading slot=\\\"title\\\">Help</Heading>\\n    <div>Do you need help?</div>\\n  </MyPopover>\\n</HelpTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a DisclosureGroup Component using DisclosureContext in TypeScript\nDESCRIPTION: Defines a reusable `DisclosureGroup` component in TypeScript using React. It utilizes `DisclosureContext.Provider` from `react-aria-components` to pass an `isDisabled` prop down to its children, effectively disabling all nested `Disclosure` components within the group when `isDisabled` is true. The example demonstrates wrapping custom `MyDisclosure` components inside the `DisclosureGroup`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Disclosure.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nimport {DisclosureContext} from 'react-aria-components';\n\ninterface DisclosureGroupProps {\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction DisclosureGroup({children, isDisabled}: DisclosureGroupProps) {\n  return (\n    <div style={{display: 'flex', flexDirection: 'column'}}>\n      <DisclosureContext.Provider value={{isDisabled}}>\n        {children}\n      </DisclosureContext.Provider>\n    </div>\n  )\n}\n\n<DisclosureGroup isDisabled>\n  <MyDisclosure title=\"How to make a return\" >\n    Details about returning items\n  </MyDisclosure>\n  <MyDisclosure title=\"How to cancel an order\" >\n    Details on canceling an order\n  </MyDisclosure>\n</DisclosureGroup>\n\n```\n```\n\n----------------------------------------\n\nTITLE: Importing React Aria Components and Dependencies\nDESCRIPTION: Sets up the necessary imports for building the iOS List View component, including React Spectrum documentation utilities, component illustrations, and workflow icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ios-list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ExampleLayout} from '@react-spectrum/docs';\nexport default ExampleLayout;\n\nimport docs from 'docs:react-aria-components';\nimport {TypeLink} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport Button from '@react-spectrum/docs/pages/assets/component-illustrations/ActionButton.svg';\nimport ListView from '@react-spectrum/docs/pages/assets/component-illustrations/ListView.svg';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Date String in TypeScript\nDESCRIPTION: Shows how to create a CalendarDate by parsing an ISO 8601 formatted string using the parseDate function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nlet date = parseDate('2022-02-03');\n```\n\n----------------------------------------\n\nTITLE: Setting Hour Cycle in DateRangePicker\nDESCRIPTION: Demonstrates forcing 24-hour time format in DateRangePicker regardless of locale settings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker\n  label=\"Date range\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Expanded Disclosure Component Example\nDESCRIPTION: Examples showing both uncontrolled (defaultExpanded) and controlled (isExpanded + onExpandedChange) ways to manage the expanded state of a Disclosure component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Disclosure.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDisclosure title=\"Download, Install, and Set Up\" defaultExpanded>\n  Instructions on how to download, install, and set up\n</MyDisclosure>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ControlledExpanded() {\n  let [isExpanded, setIsExpanded] = React.useState(true);\n\n  return (\n    <MyDisclosure title=\"Download, Install, and Set Up\" isExpanded={isExpanded} onExpandedChange={setIsExpanded}>\n      Instructions on how to download, install, and set up\n    </MyDisclosure>\n  )\n}\n\n<ControlledExpanded />\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout for MDX Page\nDESCRIPTION: This JavaScript code snippet, likely within an MDX file, imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports `BlogPostLayout` as the default export for the page, establishing the primary layout structure for the release notes content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-12-20.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring React Spectrum ButtonGroup for No Selection (Toolbar)\nDESCRIPTION: This JSX snippet illustrates configuring a React Spectrum `ButtonGroup` where no buttons can be selected, functioning as a standard toolbar of action buttons. The `selectionMode=\"none\"` prop achieves this. An `aria-label` describes the toolbar's purpose. Each `Button` within the group includes `label`, `value`, and an `icon`. This configuration implements the WAI-ARIA Toolbar design pattern.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/ButtonGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup\n  aria-label=\"Tools\"\n  selectionMode=\"none\">\n  <Button\n    label=\"Brush\"\n    value=\"Brush\"\n    icon={<Brush />} />\n  <Button\n    label=\"Bell\"\n    value=\"Bell\"\n    icon={<Bell />} />\n  <Button\n    label=\"AddCircle\"\n    value=\"Add\"\n    icon={<AddCircle />} />\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection Mode in TableView\nDESCRIPTION: This example shows how to configure the PokemonTable component with single selection mode, limiting users to selecting only one row at a time using the selectionMode prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the same table as above\n<PokemonTable selectionMode=\"single\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Global Styles for Tailwind CSS in React (TypeScript)\nDESCRIPTION: This snippet imports a global Tailwind CSS stylesheet for use with the example React project. The import ensures that all Tailwind-based classnames used throughout the UI are correctly recognized and applied. No additional configuration is shown, but having this import at the entry point or example file is required to apply Tailwind styles globally.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/account-menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Behavior for Selection in GridList (TypeScript)\nDESCRIPTION: Demonstrates how to set disabledBehavior=\\\"selection\\\" on a GridList, which allows focus, drag, and actions on disabled items. The isDisabled prop disables one item, but disabledBehavior modifies interaction rules. Output is a multi-select GridList with overridden interaction constraints on disabled items. Dependencies: MyGridList and MyItem implementations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\\n<MyGridList\\n  aria-label=\\\"List with disabled rows\\\" selectionMode=\\\"multiple\\\"\\n  /*- begin highlight -*/\\n  disabledBehavior=\\\"selection\\\"\\n  /*- end highlight -*/\\n>\\n  <MyItem>Charizard</MyItem>\\n  <MyItem>Blastoise</MyItem>\\n  {/*- begin highlight -*/}\\n  <MyItem isDisabled>Venusaur</MyItem>\\n  {/*- end highlight -*/}\\n  <MyItem>Pikachu</MyItem>\\n</MyGridList>\\n```\n```\n\n----------------------------------------\n\nTITLE: Adding an Auto-Dismissing Toast in React (TSX)\nDESCRIPTION: This example demonstrates how to add a toast that automatically closes after a specified time. Inside the `ToastProvider`'s render prop, the `state.add` method is called with an options object containing a `timeout` property set to 5000 (milliseconds). This configures the toast to automatically dismiss after 5 seconds unless interacted with.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ToastProvider>\n  {state => (\n    ///- begin highlight -///\n    <Button onPress={() => state.add('Toast still toasting!', {timeout: 5000})}>\n    {/*- end highlight -*/}\n      Show toast\n    </Button>\n  )}\n</ToastProvider>\n```\n\n----------------------------------------\n\nTITLE: Importing ContextualHelp and Related Components in React\nDESCRIPTION: Imports necessary components from various React Spectrum packages to use the ContextualHelp component and structure its content. This includes `ContextualHelp` itself, layout components like `Content`, `Footer`, and `Flex`, text components `Heading` and `Text`, and the `Link` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/contextualhelp/docs/ContextualHelp.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ContextualHelp} from '@react-spectrum/contextualhelp';\nimport {Content, Footer} from '@react-spectrum/view';\nimport {Heading, Text} from '@react-spectrum/text';\nimport {Link} from '@react-spectrum/link';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ClassName on TreeItem (JSX)\nDESCRIPTION: Illustrates how to provide a custom CSS class name to a `TreeItem` component using the `className` prop. This overrides the default `react-aria-TreeItem` class.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<TreeItem className=\"my-tree-item\">\n  {/* ... */}\n</TreeItem>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Badge from React Spectrum in JSX\nDESCRIPTION: Demonstrates how to import the Badge component from the @react-spectrum/badge package using ES module import syntax. This is a prerequisite for using the Badge component in any React application. No additional dependencies are required beyond @react-spectrum/badge and React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/badge/docs/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Badge} from '@react-spectrum/badge';\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization with ColorAreaContext in React\nDESCRIPTION: Example of creating a custom ColorAreaDescription component that uses Context API to pass accessibility attributes to a ColorArea component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorAreaContext} from 'react-aria-components';\nimport {useId} from 'react-aria';\n\ninterface ColorAreaDescriptionProps {\n  children?: React.ReactNode,\n  description?: string\n}\n\nfunction ColorAreaDescription({children, description}: ColorAreaDescriptionProps) {\n  let descriptionId = useId();\n  return (\n    <div>\n      {/*- begin highlight -*/}\n      <ColorAreaContext.Provider value={{'aria-describedby': descriptionId}}>\n      {/*- end highlight -*/}\n        {children}\n      </ColorAreaContext.Provider>\n      <small id={descriptionId}>{description}</small>\n    </div>\n  );\n}\n\n<ColorAreaDescription description=\"Choose a background color for your profile.\">\n  <MyColorArea />\n</ColorAreaDescription>\n```\n\n----------------------------------------\n\nTITLE: Styling Drag and Drop States in React Aria ListBox - CSS\nDESCRIPTION: Defines visual styles for ListBox items during drag interactions and drop target highlighting. Items being dragged have reduced opacity, and active drop indicators gain a highlighted outline to make their states visually distinct. These CSS rules rely on data attributes set by React Aria components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_31\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-ListBoxItem {\\n  &[data-dragging] {\\n    opacity: 0.6;\\n  }\\n}\\n\\n.react-aria-DropIndicator[data-drop-target] {\\n  outline: 1px solid var(--highlight-background);\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SSRProvider for Server Side Rendering - React Aria - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to use the SSRProvider component from the @react-aria/ssr package to wrap a React application, ensuring that auto-generated IDs are consistent between the client and server during server side rendering (SSR). The SSRProvider must wrap the application root when using React 16 or 17. This approach is primarily intended for use with SSR frameworks like Next.js or Gatsby. The only dependency is @react-aria/ssr, and the usage must occur at the root level. The expected input is a React element-tree, and the output is a tree with proper SSR ID consistency. For React 18 or newer, SSRProvider is unnecessary.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/ssr/docs/SSRProvider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SSRProvider} from '@react-aria/ssr';\\n\\n<SSRProvider>\\n  <YourApp />\\n</SSRProvider>\\n\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Components\nDESCRIPTION: Basic imports from React Spectrum documentation components and utilities\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video using an iframe element within a responsive container. It includes accessibility attributes and allows for various playback features.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/architecture.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className={style.responsiveVideo}>\n  <iframe\n    title=\"YouTube embedded video: Design system and accessibility - Devon Govett aka @devongovett at @ReactEurope 2020\"\n    width=\"840\"\n    height=\"471\"\n    src=\"https://www.youtube.com/embed/dxDcBB7Xoxs\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Assets and Styles for Documentation - JavaScript\nDESCRIPTION: This snippet imports various components, images, and CSS style modules required for rendering the documentation homepage. It includes hero images in multiple resolutions and formats, as well as CSS classes for links and typography, leveraging both local and Spectrum CSS resources. Dependencies include @react-spectrum/docs, @adobe/spectrum-css-temp, and asset files. No runtime inputs/outputs; these are used by the React components for presentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-stately/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Highlights, Hero} from '@react-spectrum/docs';\nimport heroNarrow from 'url:../assets/ReactStately_Mobile_976x1025_1x.png';\nimport heroNarrow2x from 'url:../assets/ReactStately_Mobile_976x1025_2x.png';\nimport heroNarrowWebp from 'url:../assets/ReactStately_Mobile_976x1025_1x.webp';\nimport heroNarrow2xWebp from 'url:../assets/ReactStately_Mobile_976x1025_2x.webp';\nimport heroWide from 'url:../assets/ReactStately_976x445_1x.png';\nimport heroWide2x from 'url:../assets/ReactStately_976x445_2x.png';\nimport heroWideWebp from 'url:../assets/ReactStately_976x445_1x.webp';\nimport heroWide2xWebp from 'url:../assets/ReactStately_976x445_2x.webp';\nimport clsx from 'clsx';\nimport linkStyle from '@adobe/spectrum-css-temp/components/link/vars.css';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport typographyStyles from '@adobe/spectrum-css-temp/components/typography/vars.css';\n```\n\n----------------------------------------\n\nTITLE: Importing BlogPostLayout Component in React\nDESCRIPTION: This code snippet imports the BlogPostLayout component from the @react-spectrum/docs package and exports it as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-05-05.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Disabling React Spectrum RangeCalendar using TSX\nDESCRIPTION: Shows how to make the entire `RangeCalendar` non-interactive by setting the boolean `isDisabled` prop to true. This prevents focusing or selecting any dates within the calendar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyRangeCalendar aria-label=\"Trip dates\" isDisabled />\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding a Video with the Video Component in JSX\nDESCRIPTION: Uses the custom `Video` component (imported from `@react-spectrum/docs`) to embed a video illustrating focus rings. The `src` prop points to the imported `focusRingVideoUrl`. Attributes like `loop`, `autoPlay`, `muted`, and inline `style` are used to control playback behavior and appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-3.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Video src={focusRingVideoUrl} loop autoPlay muted style={{maxWidth: 'min(100%, 640px)', display: 'block', margin: '20px auto'}} />\n```\n\n----------------------------------------\n\nTITLE: Styling Waterfall Layout Example in CSS\nDESCRIPTION: This hidden CSS snippet provides styles for the `ListBox` component used within the `WaterfallLayout` example. It sets a fixed height for the ListBox container and ensures that images within list items do not exceed their container width by default, allowing the layout to control sizing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox[aria-label~=waterfall] {\n  height: 400px;\n  max-height: none;\n  .react-aria-ListBoxItem img {\n    max-width: none;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BlogPostLayout Component in React\nDESCRIPTION: This code snippet imports the BlogPostLayout component from the @react-spectrum/docs package and exports it as the default export. It's used to structure the layout of blog posts in the React Spectrum documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-03-24.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hero and Highlight Content for Docs Homepage - JSX\nDESCRIPTION: This snippet defines the documentation homepage using JSX syntax, providing Markdown and React components to render the title, description, navigation links, hero image, and feature highlights. It employs special components like Hero and Highlights, which receive asset and feature data via props. Inputs are statically defined props for images and highlight items; output is rendered homepage UI. Requires React, @react-spectrum/docs, and assets.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-stately/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n---\ncategory: Libraries\ndescription: A library of React Hooks that provides cross-platform state management for your design system.\n---\n\n# React Stately\n\nA library of React Hooks that provides cross-platform state management for your design system.\n\n<p className={clsx(typographyStyles['spectrum-Body2'], styles.homeLinks)}>\n  <a href=\"getting-started.html\" className={clsx(linkStyle['spectrum-Link'], styles.link)}>Get started</a>\n  <span aria-hidden=\"true\">•</span>\n  <a href=\"https://github.com/adobe/react-spectrum\" className={clsx(linkStyle['spectrum-Link'], styles.link)}>GitHub</a>\n</p>\n\n<Hero\n  narrow={heroNarrow}\n  narrow2x={heroNarrow2x}\n  narrowWebp={heroNarrowWebp}\n  narrow2xWebp={heroNarrow2xWebp}\n  wide={heroWide}\n  wide2x={heroWide2x}\n  wideWebp={heroWideWebp}\n  wide2xWebp={heroWide2xWebp}\n  alt=\"React Stately hero image\" />\n\n<Highlights items={[{\n  title: 'Foundational',\n  description: 'React Stately provides the foundation and core logic for your component library. It handles state management for common components through an easy-to-use interface.',\n},{\n  title: 'Powered by React Hooks',\n  description: 'React Stately is implemented as a library of React Hooks, which allows you to adapt them to your needs through composition.',\n},{\n  title: 'Cross-platform',\n  description: 'React Stately only provides state management, with no assumptions about the DOM or other view systems.'\n},{\n  title: 'Design agnostic',\n  description: 'React Stately doesn\\u2019t make any assumptions about your design. It provides state management that\\u2019s intrinsic to the functionality of the component.'\n}]} />\n```\n\n----------------------------------------\n\nTITLE: React Component Layout Import\nDESCRIPTION: Import and export statement for the Layout component from React Spectrum docs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useFocusVisible.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Component State\nDESCRIPTION: Demonstrates how to use render props to conditionally render elements based on component state, such as showing a checkmark icon when an item is selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_55\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      Item\n    </>\n  )}\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Styling the Remove Button within a React Aria Tag using CSS\nDESCRIPTION: Provides CSS rules for styling the remove button element identified by the `slot=\"remove\"` attribute within a `.react-aria-Tag`. It styles the button's default appearance, its hover state using the `[data-hovered]` attribute, and ensures the color inherits correctly when the parent tag is selected (`[data-selected]`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Tag {\n  [slot=remove] {\n    background: none;\n    border: none;\n    padding: 0;\n    margin-left: 8px;\n    color: var(--text-color-base);\n    transition: color 200ms;\n    outline: none;\n    font-size: 0.95em;\n\n    &[data-hovered] {\n      color: var(--text-color-hover);\n    }\n  }\n\n  &[data-selected] {\n    [slot=remove] {\n      color: inherit;\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering the Reorderable ListView Component (TSX)\nDESCRIPTION: Renders the previously defined `ReorderableList` component. This snippet shows how to use the component in a React application, displaying a ListView where items can be reordered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<ReorderableList />\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Component in React\nDESCRIPTION: This snippet demonstrates how to create a Dialog component using the useDialog hook from React Aria. It's rendered within the Popover component for the DateRangePicker.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaDialogProps} from '@react-aria/dialog';\nimport {useDialog} from '@react-aria/dialog';\n\ninterface DialogProps extends AriaDialogProps {\n  title?: React.ReactNode,\n  children: React.ReactNode\n}\n\nfunction Dialog({title, children, ...props}: DialogProps) {\n  let ref = React.useRef(null);\n  let {dialogProps, titleProps} = useDialog(props, ref);\n\n  return (\n    <div {...dialogProps} ref={ref} style={{padding: 30}}>\n      {title &&\n        <h3 {...titleProps} style={{marginTop: 0}}>\n          {title}\n        </h3>\n      }\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TextField with HTML Form Integration in React\nDESCRIPTION: This example demonstrates how to use the TextField component with HTML form attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField label=\"Email\" name=\"email\" type=\"email\" />\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Size Variations in React Spectrum\nDESCRIPTION: Shows different size options for the ProgressBar component: small (S) and large (L) variants.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-300\">\n  <ProgressBar label=\"Small\" size=\"S\" value={70} />\n  <ProgressBar label=\"Large\" size=\"L\" value={70} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing React Aria Components with Yarn (Command Line)\nDESCRIPTION: This snippet demonstrates how to install the entire React Aria Components package using yarn. The command ensures all accessible component primitives are available in a single dependency. No special configuration or project setup outside of a JavaScript/Node environment is required. Input is the yarn command, and on completion, the library is accessible from node_modules.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nyarn add react-aria-components\n```\n\n----------------------------------------\n\nTITLE: Defining Well Component Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Well component that extends DOMProps and StyleProps interfaces. The component requires a children prop of type ReactNode for content rendering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Well.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Well extends DOMProps, StyleProps {\n  children: ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Client Provider in Next.js App Router Layout\nDESCRIPTION: Shows how to apply the previously defined `ClientProviders` component within the root layout (`app/layout.tsx`) of a Next.js App Router application. This ensures `RouterProvider` wraps the application content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// app/layout.tsx\nimport {ClientProviders} from './provider';\n\nexport default function RootLayout({children}) {\n  return (\n    <html>\n      <body>\n        <ClientProviders>{children}</ClientProviders>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Selection Behavior in React Spectrum Table\nDESCRIPTION: This snippet shows how to change the selection behavior in a React Spectrum table. It sets the selectionBehavior prop to 'replace' to modify how selection works with mouse and keyboard interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonTable selectionMode=\"multiple\" selectionBehavior=\"replace\" />\n```\n\n----------------------------------------\n\nTITLE: SearchField with Custom Width in React\nDESCRIPTION: This example shows how to set a custom width for the SearchField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField label=\"Search\" width=\"size-3600\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Sectioned Menu with CSS\nDESCRIPTION: CSS code for styling a sectioned menu. It adds spacing between sections and styles the section headers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Menu {\n  .react-aria-MenuSection:not(:first-child) {\n    margin-top: 12px;\n  }\n\n  .react-aria-Header {\n    font-size: 1.143rem;\n    font-weight: bold;\n    padding: 0 0.714rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ColorSwatchPicker Stack Layout with CSS\nDESCRIPTION: CSS code to style the ColorSwatchPicker component when the layout is set to 'stack'. It changes the flex direction to column for vertical arrangement.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSwatchPicker {\n  &[data-layout=stack] {\n    flex-direction: column;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Stateful NumberField Component with useNumberField and useNumberFieldState (TSX)\nDESCRIPTION: Provides an example of building a stateful NumberField component using hooks from `react-aria` and `react-stately`. It imports `useNumberFieldState` for state management, `useLocale` and `useNumberField` for behavior/accessibility. The example shows creating state, passing it to the aria hook, using refs (`inputRef`), and spreading props (`labelProps`, `groupProps`, `inputProps`, `incrementButtonProps`, `decrementButtonProps`) onto the appropriate elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/hooks.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useNumberFieldState} from 'react-stately';\nimport {useLocale, useNumberField} from 'react-aria';\n\nfunction NumberField(props) {\n  let {locale} = useLocale();\n  let state = useNumberFieldState({...props, locale});\n  let inputRef = React.useRef(null);\n  let {\n    labelProps,\n    groupProps,\n    inputProps,\n    incrementButtonProps,\n    decrementButtonProps\n  } = useNumberField(props, state, inputRef);\n\n  return (\n    <div>\n      <label {...labelProps}>{props.label}</label>\n      <div {...groupProps} style={{display: 'flex', gap: 4}}>\n        <Button {...decrementButtonProps}>-</Button>\n        <input {...inputProps} ref={inputRef} />\n        <Button {...incrementButtonProps}>+</Button>\n      </div>\n    </div>\n  );\n}\n\n<NumberField\n  label=\"Price\"\n  defaultValue={6}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD'\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling DateField Component with CSS\nDESCRIPTION: This CSS snippet provides styles for the DateField component, including layout, colors, and focus states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.field {\n  display: inline-flex;\n  padding: 2px 4px;\n  border-radius: 2px;\n  border: 1px solid var(--gray);\n  background: var(--spectrum-global-color-gray-50);\n}\n\n.field:focus-within {\n  border-color: var(--blue);\n}\n\n.segment {\n  padding: 0 2px;\n  font-variant-numeric: tabular-nums;\n  text-align: end;\n}\n\n.segment.placeholder {\n  color: var(--spectrum-gray-600);\n}\n\n.segment:focus {\n  color: white;\n  background: var(--blue);\n  outline: none;\n  border-radius: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Quiet Styling for ColorField React Spectrum TypeScript\nDESCRIPTION: Renders a ColorField with the 'isQuiet' prop, which reduces its visual prominence for inline or subtle input needs. The field still functions as a normal ColorField. Useful for UIs where input fields should blend into the background.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorField label=\\\"Primary Color\\\" isQuiet />\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in JSX\nDESCRIPTION: Imports the `Layout` component from `@react-spectrum/docs` and exports it as the default export for the documentation page structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/overlays/docs/useOverlayTriggerState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing useField Hook from React Aria\nDESCRIPTION: This snippet shows how to import the useField hook from the @react-aria/label package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/label/docs/useField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useField} from '@react-aria/label';\n```\n\n----------------------------------------\n\nTITLE: Styling Draggable ListBox in CSS\nDESCRIPTION: This CSS snippet provides styles for the draggable ListBox component, including styles for the listbox container, options, selected items, and focus states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[role=listbox] {\n  padding: 0;\n  margin: 5px 0;\n  list-style: none;\n  box-shadow: inset 0 0 0 1px gray;\n  max-width: 250px;\n  outline: none;\n  min-height: 50px;\n  overflow: auto;\n}\n\n.option {\n  padding: 3px 6px;\n  outline: none;\n}\n\n.option[aria-selected=true] {\n  background: blueviolet;\n  color: white;\n}\n\n.option.focus-visible {\n  box-shadow: inset 0 0 0 2px orange;\n}\n\n.option.drop-target {\n  border-color: transparent;\n  box-shadow: inset 0 0 0 2px var(--blue);\n}\n```\n\n----------------------------------------\n\nTITLE: AlertDialog with Auto-Focus Button in React Spectrum\nDESCRIPTION: Example showing how to specify which button should be automatically focused when the dialog opens using the autoFocusButton prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Save</ActionButton>\n  <AlertDialog\n    variant=\"confirmation\"\n    title=\"Save file\"\n    primaryActionLabel=\"Save\"\n    cancelLabel=\"Cancel\"\n    autoFocusButton=\"primary\">\n    A file with the same name already exists. Overwrite?\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables from React Aria Components\nDESCRIPTION: Example showing how to use CSS variables provided by components, specifically using the trigger width variable from a Select component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Sort Indicators for Table Columns - React Spectrum (CSS)\nDESCRIPTION: This CSS snippet styles the sort indicator (typically an icon or visual cue) in React Spectrum table columns. It applies padding to the indicator and hides it if the column lacks a data-sort-direction attribute, ensuring consistent UI for sortable headers. The snippet targets elements using class selectors and data attributes, and is intended for use within the React Spectrum/Aria table component styling context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_21\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-Column {\n  .sort-indicator {\n    padding: 0 2px;\n  }\n\n  &:not([data-sort-direction]) .sort-indicator {\n    visibility: hidden;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Meter Component Example\nDESCRIPTION: Demonstrates the simplest implementation of the Meter component with a label and value property.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Meter label=\"Storage space\" value={35} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup with Macros Plugin for React Spectrum\nDESCRIPTION: Rollup configuration file setup including macros plugin for React Spectrum and other necessary plugins for React development.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-rollup-starter-app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport macrosPlugin from 'unplugin-parcel-macros';\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    file: 'public/bundle.js',\n    format: 'iife', // immediately-invoked function expression — suitable for <script> tags\n    sourcemap: true\n  },\n  plugins: [\n    nodeResolve({\n      extensions: ['.js', '.jsx', '.mjs']\n    }), // from https://www.codeguage.com/blog/setup-rollup-for-react\n    macrosPlugin.rollup(), // added for style macros, has to be before babel\n    babel({\n      babelHelpers: 'bundled',\n      presets: ['@babel/preset-react'],\n      extensions: ['.js', '.jsx']\n    }), // from https://www.codeguage.com/blog/setup-rollup-for-react\n    commonjs(), // converts date-fns to ES modules\n    replace({\n      preventAssignment: false,\n      'process.env.NODE_ENV': '\"development\"'\n    }), // from https://www.codeguage.com/blog/setup-rollup-for-react\n    css({\n      output: 'bundle.css'\n    }), // added to bundle React Spectrum's Spectrum 2 css\n    reactSvg(), // added for illustration svg's\n    production && terser() // minify, but only in production\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled DateField in React\nDESCRIPTION: Demonstrates basic usage of DateField component with both controlled and uncontrolled values using parseDate from @internationalized/date\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseDate('2020-02-03'));\n\n  return (\n    <>\n      <DateField\n        label=\"Date (uncontrolled)\"\n        defaultValue={parseDate('2020-02-03')} />\n      <DateField\n        label=\"Date (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: IllustratedMessage with Upload Illustration\nDESCRIPTION: Example showing an IllustratedMessage with an Upload illustration, heading and multi-line content for a file upload interface.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Upload from '@spectrum-icons/illustrations/Upload';\n\n<IllustratedMessage>\n  <Upload />\n  <Heading>Drag and Drop your file</Heading>\n  <Content>Select a File from your computer<br /> or Search Adobe Stock</Content>\n</IllustratedMessage>\n```\n\n----------------------------------------\n\nTITLE: Disabled Toggle Button Group\nDESCRIPTION: Example of a completely disabled toggle button group using the isDisabled prop on the group container. This disables all buttons within the group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButtonGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup isDisabled>\n  <ToggleButton id=\"grid\">Grid view</ToggleButton>\n  <ToggleButton id=\"list\">List view</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery view</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Disabled Picker (React/TypeScript)\nDESCRIPTION: This example demonstrates how to disable a Picker component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Choose frequency\" isDisabled>\n  <Item key=\"rarely\">Rarely</Item>\n  <Item key=\"sometimes\">Sometimes</Item>\n  <Item key=\"always\">Always</Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Linear Progress Bar with React Aria\nDESCRIPTION: This example demonstrates how to create a linear progress bar component using the useProgressBar hook. It includes labeling, value formatting, and visual representation of progress.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/progress/docs/useProgressBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useProgressBar} from '@react-aria/progress';\n\nfunction ProgressBar(props) {\n  let {\n    label,\n    showValueLabel = !!label,\n    value,\n    minValue = 0,\n    maxValue = 100\n  } = props;\n  let {\n    progressBarProps,\n    labelProps\n  } = useProgressBar(props);\n\n  // Calculate the width of the progress bar as a percentage\n  let percentage = (value - minValue) / (maxValue - minValue);\n  let barWidth = `${Math.round(percentage * 100)}%`;\n\n  return (\n    <div {...progressBarProps} style={{width: 200}}>\n      <div style={{display: 'flex', justifyContent: 'space-between'}}>\n        {label &&\n          <span {...labelProps}>\n            {label}\n          </span>\n        }\n        {showValueLabel &&\n          <span>\n            {progressBarProps['aria-valuetext']}\n          </span>\n        }\n      </div>\n      <div style={{height: 10, background: 'lightgray'}}>\n        <div style={{width: barWidth, height: 10, background: 'orange'}} />\n      </div>\n    </div>\n  );\n}\n\n<ProgressBar label=\"Loading…\" value={80} />\n```\n\n----------------------------------------\n\nTITLE: Handling Server-side Validation and Error Mapping in Forms with React Spectrum - TypeScript/TSX\nDESCRIPTION: Demonstrates how to capture and display server-side validation errors in forms by passing an error map to the 'validationErrors' prop of the React Spectrum Form component. The code manages error state with React's useState, handles form submission asynchronously, and sets errors returned from the fake server. Dependencies include React and @adobe/react-spectrum; expects data from form fields and displays errors mapped by field name.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\n  /*- begin highlight -*/\n  let [errors, setErrors] = React.useState({});\n  /*- end highlight -*/\n  let onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    let data = Object.fromEntries(new FormData(e.currentTarget));\n    let result = await callServer(data)\n    /*- begin highlight -*/\n    setErrors(result.errors);\n    /*- end highlight -*/\n  };\n\n  return (\n    <Form\n      validationBehavior=\"native\"\n      maxWidth=\"size-3000\"\n      onSubmit={onSubmit}\n      /*- begin highlight -*/\n      validationErrors={errors}\n      /*- end highlight -*/\n    >\n      <TextField label=\"Username\" name=\"username\" isRequired />\n      <TextField label=\"Password\" name=\"password\" type=\"password\" isRequired />\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">Submit</Button>\n        <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n\n// Fake server used in this example.\nfunction callServer(data) {\n  return {\n    errors: {\n      username: 'Sorry, this username is taken.'\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling the ColorWheel Component in TSX\nDESCRIPTION: Shows how to render a `ColorWheel` in a disabled state using the `isDisabled` boolean prop. A disabled ColorWheel cannot be interacted with.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorWheel.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorWheel isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Disabled RangeSlider in React\nDESCRIPTION: This example demonstrates how to create a disabled RangeSlider component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeSlider label=\"Price filter\" defaultValue={{start: 25, end: 50}} isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Horizontal Layout Example in CSS\nDESCRIPTION: This hidden CSS snippet provides basic styling for the items (`.item`) within the custom `HorizontalLayout` example. It sets a gray background, padding, uses `content-box` for background clipping, ensures items fill the container height, and applies `box-sizing: border-box` for predictable sizing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.item {\n  background: gray;\n  padding: 4px;\n  background-clip: content-box;\n  height: 100%;\n  box-sizing: border-box;\n}\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled ColorField with Default Value\nDESCRIPTION: Shows how to use ColorField in an uncontrolled manner with a default value specified.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n<MyColorField label=\"Color\" defaultValue=\"#7f007f\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Operations with Switch Statement in React\nDESCRIPTION: This example demonstrates how to handle different drop operations (move, copy, link) when implementing drag and drop functionality. The code uses a switch statement to perform different actions based on the dropOperation value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\nlet onItemDrop = async (e) => {\n  let data = JSON.parse(await e.items[0].getText('my-app-file'));\n  /*- begin highlight -*/\n  switch (e.dropOperation) {\n    case 'move':\n      MyAppFileService.move(data.filePath, props.filePath);\n      break;\n    case 'copy':\n      MyAppFileService.copy(data.filePath, props.filePath);\n      break;\n    case 'link':\n      MyAppFileService.link(data.filePath, props.filePath);\n      break;\n  }\n  /*- end highlight -*/\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Value on TextField Component (TypeScript/React)\nDESCRIPTION: Illustrates using the defaultValue prop on the TextField component for uncontrolled initial input. This requires the TextField implementation from the prior example, React, and TypeScript. The key parameter is defaultValue, which initializes the component's value. Resulting output is a pre-filled input box. No external dependencies or advanced handling required; only relevant to uncontrolled scenarios.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<TextField\\n  label=\"Email\"\\n  defaultValue=\"me@email.com\" />\n```\n\n----------------------------------------\n\nTITLE: Vertical Orientation for ToggleButtonGroup with Directional Styling (JSX)\nDESCRIPTION: Sets the orientation prop of ToggleButtonGroup to 'vertical' to enable column layout and vertical keyboard navigation. Displays toggle buttons for three options. Input: JSX with orientation attribute; required: react-aria-components and execution in React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButtonGroup orientation=\"vertical\">\n  <ToggleButton id=\"grid\">Grid</ToggleButton>\n  <ToggleButton id=\"list\">List</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Using useId Hook to Generate IDs in TypeScript/React\nDESCRIPTION: This example demonstrates the usage of the `useId` hook from `@react-aria/utils`. The first call, `useId()`, generates a unique, stable ID automatically. The second call, `useId(props.id)`, attempts to use the `id` passed via props, falling back to an auto-generated ID if `props.id` is not provided. This ensures elements have unique identifiers, crucial for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/utils/docs/useId.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useId} from '@react-aria/utils';\n\nlet elementId = useId();\nlet componentId = useId(props.id);\n```\n\n----------------------------------------\n\nTITLE: DropZone with Accessible Labeling\nDESCRIPTION: Example showing how to implement accessible labeling for a DropZone component using the Text slot.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from 'react-aria-components';\n\nfunction Example() {\n  let [dropped, setDropped] = React.useState(false);\n\n  return (\n    <DropZone\n      onDrop={() => setDropped(true)}>\n      <Text slot=\"label\">\n        {dropped ? 'Successful drop!' : 'Drop files here'}\n      </Text>\n    </DropZone>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Text Component Compatible with React Aria Contexts\nDESCRIPTION: This snippet shows how to consume TextContext in a custom component to make it compatible with React Aria Components. It uses useContextProps to merge local props with those provided via context from parent components like ListBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_59\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextProps} from 'react-aria-components';\nimport {TextContext, useContextProps} from 'react-aria-components';\n\nconst MyText = React.forwardRef((props: TextProps, ref: React.ForwardedRef<HTMLElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, TextContext);\n\n  // ... your existing Text component\n  return <span {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Target State in React Aria ListBox - CSS\nDESCRIPTION: Applies a highlighted outline and overlay background to the ListBox when it is in a drop target state, indicated by data-drop-target. Uses theme variables for consistent styling with the rest of the UI and visually communicates to users that the collection accepts drops.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_36\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-ListBox[data-drop-target] {\\n  outline: 2px solid var(--highlight-background);\\n  outline-offset: -1px;\\n  background: var(--highlight-overlay)\\n}\n```\n\n----------------------------------------\n\nTITLE: ListBox with Selectable Links using Replace Behavior (TypeScript)\nDESCRIPTION: This snippet demonstrates a `ListBox` where items are links (`href` prop) and also selectable. This is achieved by setting `selectionMode=\"multiple\"` and `selectionBehavior=\"replace\"`. Single-clicking or Space selects the item, while double-clicking or Enter navigates to the link.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox aria-label=\"Links\" selectionMode=\"multiple\" selectionBehavior=\"replace\">\n  <ListBoxItem href=\"https://adobe.com/\" target=\"_blank\">Adobe</ListBoxItem>\n  <ListBoxItem href=\"https://apple.com/\" target=\"_blank\">Apple</ListBoxItem>\n  <ListBoxItem href=\"https://google.com/\" target=\"_blank\">Google</ListBoxItem>\n  <ListBoxItem href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</ListBoxItem>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid Radio and FieldError Components (CSS)\nDESCRIPTION: Provides CSS rules to style Radio components and their associated FieldError when the RadioGroup is in an invalid state. It uses data attributes like `[data-invalid]` and `[data-pressed]` along with CSS variables for styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Radio {\n  &[data-invalid] {\n    &:before {\n      border-color: var(--invalid-color);\n    }\n\n    &[data-pressed]:before {\n      border-color: var(--invalid-color-pressed);\n    }\n  }\n}\n\n.react-aria-RadioGroup {\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled SearchField in React (TSX)\nDESCRIPTION: Shows how to create a controlled `SearchField` (using the `MySearchField` wrapper) by managing its state with `React.useState`. The `onChange` prop updates the state variable `text`, which is then displayed elsewhere, demonstrating state synchronization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [text, setText] = React.useState('');\n\n  return (\n    <>\n      <MySearchField label=\"Search\" onChange={setText} />\n      <p>Mirrored text: {text}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid SearchField Input with CSS\nDESCRIPTION: CSS styles for customizing the appearance of invalid inputs in a SearchField component and styling the error message display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-SearchField {\n  .react-aria-Input{\n    &[data-invalid] {\n      border-color: var(--invalid-color);\n    }\n  }\n\n  .react-aria-FieldError {\n    grid-area: help;\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook API Documentation using FunctionAPI Component in JSX\nDESCRIPTION: Employs the `FunctionAPI` component to render the detailed API documentation for the `useOverlayTriggerState` function. It passes the function's API definition and related links from the imported `docs` object as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/overlays/docs/useOverlayTriggerState.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.useOverlayTriggerState} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Converting Between Calendar Systems\nDESCRIPTION: Shows how to convert a date from the Gregorian calendar system to the Hebrew calendar system using the toCalendar function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toCalendar, HebrewCalendar} from '@internationalized/date';\n\nlet gregorianDate = new CalendarDate(2020, 9, 19);\nlet hebrewDate = toCalendar(gregorianDate, new HebrewCalendar());\n// => new CalendarDate(new HebrewCalendar(), 5781, 1, 1)\n```\n\n----------------------------------------\n\nTITLE: Importing useMove Hook from React Aria Interactions\nDESCRIPTION: This snippet shows how to import the useMove hook from the @react-aria/interactions package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useMove.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useMove} from '@react-aria/interactions';\n```\n\n----------------------------------------\n\nTITLE: Rendering Type Links using TypeLink Component in JSX\nDESCRIPTION: Uses the `TypeLink` component from `@react-spectrum/docs` to render interactive links to specific type definitions or hook documentation within the documentation site. It takes `links` data (likely for resolving references) and the `type` object (representing the specific interface, class, or hook) as props. These are used throughout the document to link to related concepts like `Collection`, `Node`, `useCollection`, `useListState`, `useTreeState`, `useListBox`, and `useSelect`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/Collection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeLink links={collectionsDocs.links} type={collectionsDocs.exports.Collection} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeLink links={docs.links} type={docs.exports.useCollection} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeLink links={collectionsDocs.links} type={collectionsDocs.exports.Node} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeLink links={listDocs.links} type={listDocs.exports.useListState} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeLink links={treeDocs.links} type={treeDocs.exports.useTreeState} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeLink links={listboxDocs.links} type={listboxDocs.exports.useListBox} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeLink links={selectDocs.links} type={selectDocs.exports.useSelect} />\n```\n\n----------------------------------------\n\nTITLE: Installing @react-spectrum/test-utils Package\nDESCRIPTION: This snippet shows the package name for the React Spectrum test utilities. This package is part of the react-spectrum repository and contains utilities for testing React Spectrum components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/test-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/test-utils\n```\n\n----------------------------------------\n\nTITLE: Parsing Percentage Values with NumberParser\nDESCRIPTION: Example showing how to parse percentage values using the NumberParser with style set to 'percent' and a maximum fraction digits constraint.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberParser.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nlet parser = new NumberParser('en-US', {\n  style: 'percent',\n  maximumFractionDigits: 2\n});\n\nparser.parse('45%'); // 0.45\nparser.parse('62.3333%'); // 0.6233\n```\n\n----------------------------------------\n\nTITLE: Logging Drag and Drop Events in React with TypeScript\nDESCRIPTION: This example demonstrates how to log all drag and drop events occurring within a drop target using React hooks and the useDrop function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrop.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction DropTarget() {\n  let [events, setEvents] = React.useState([]);\n  let onEvent = e => setEvents(events => [JSON.stringify(e), ...events]);\n  let ref = React.useRef(null);\n  let {dropProps, isDropTarget} = useDrop({\n    ref,\n    onDropEnter: onEvent,\n    onDropMove: onEvent,\n    onDropExit: onEvent,\n    onDrop: onEvent\n  });\n\n  return (\n    <ul {...dropProps} role=\"button\" tabIndex={0} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`} style={{display: 'block', width: 'auto'}}>\n      {events.map((e, i) => <li key={i}>{e}</li>)}\n    </ul>\n  );\n}\n\n<Draggable />\n<DropTarget />\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Disclosure Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @react-aria/disclosure package in a Markdown file. It provides a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/disclosure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/disclosure\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Class Names to React Aria Components\nDESCRIPTION: Shows how to override the default class name provided by React Aria with a custom one, useful for CSS modules or utility CSS libraries.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Select className=\"my-select\">\n  {/* ... */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Integrating TextField with Native HTML Form Elements (TypeScript/React)\nDESCRIPTION: Displays embedding the TextField component in a native HTML form using the name and type props for form integration. Requires TextField, React, TypeScript. Key parameters: name, type (e.g., 'email'), and any other input attributes. Output: accessible, form-compatible input ready for HTML form submission.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\n<TextField label=\"Email\" name=\"email\" type=\"email\" />\n```\n\n----------------------------------------\n\nTITLE: Styling a ListBoxItem with React Aria CSS Classes\nDESCRIPTION: This CSS snippet assigns colors to the .react-aria-ListBoxItem class and modifies styling based on the data-selected attribute. Items marked as selected receive a distinctive background and text color. This example demonstrates state-driven styling patterns and assumes the use of React Aria classes and attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem {\\n  color: black;\\n\\n  &[data-selected] {\\n    background: slateblue;\\n    color: white;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Layout Component\nDESCRIPTION: Basic import and export of Layout component from React Spectrum docs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/useLocale.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Color Components from React Spectrum and React Aria - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to import the 'ColorEditor' and 'ColorSwatch' components from the '@react-spectrum/color' package, as well as the 'ColorPicker' component from 'react-aria-components'. These imports are necessary for building color input interfaces with advanced accessibility support within a React application utilizing React Spectrum. There are no additional parameters required, but the host project should have both '@react-spectrum/color' and 'react-aria-components' installed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {ColorEditor, ColorSwatch} from '@react-spectrum/color';\nimport {ColorPicker} from 'react-aria-components';\n```\n\n----------------------------------------\n\nTITLE: Using the Custom FieldGroup Component (TSX)\nDESCRIPTION: Shows how to use the custom `FieldGroup` component. Any `TextField` components placed inside, even deeply nested ones like within `CreditCardFields`, will automatically receive the `isDisabled` prop provided by the `FieldGroup`'s context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FieldGroup isDisabled={isSubmitting}>\n  <MyTextField label=\"Name\" />\n  <MyTextField label=\"Email\" />\n  <CreditCardFields />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: React Aria useFocusVisible Basic Implementation\nDESCRIPTION: Example demonstrating the useFocusVisible hook usage in a React component. Shows focus visible state changes based on user interactions and includes text input fields with the isTextInput option enabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useFocusVisible.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useFocusVisible} from '@react-aria/interactions';\n\nfunction Example() {\n  let {isFocusVisible} = useFocusVisible({isTextInput: true});\n\n  return (\n    <>\n      <div>Focus visible: {String(isFocusVisible)}</div>\n      <label style={{display: 'block'}}>\n        First Name: <input />\n      </label>\n      <label style={{display: 'block'}}>\n        Last Name: <input />\n      </label>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling DateField Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the DateField component, including the wrapper, field, and individual date segments.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.field {\n  display: inline-flex;\n  padding: 2px 4px;\n  border-radius: 2px;\n  border: 1px solid var(--gray);\n  background: var(--spectrum-global-color-gray-50);\n  max-width: 100%;\n  overflow: auto;\n}\n\n.field:focus-within {\n  border-color: var(--blue);\n}\n\n.field .field {\n  all: initial;\n  display: inline-flex;\n  color: inherit;\n}\n\n.segment {\n  padding: 0 2px;\n  font-variant-numeric: tabular-nums;\n  text-align: end;\n}\n\n.segment.placeholder {\n  color: var(--spectrum-gray-600);\n}\n\n.segment:focus {\n  color: white;\n  background: var(--blue);\n  outline: none;\n  border-radius: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to CheckboxGroup in React Spectrum\nDESCRIPTION: Example showing how to add contextual help to a CheckboxGroup using the ContextualHelp component. It includes importing required components and demonstrates proper structure with heading and content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<CheckboxGroup\n  label=\"Favorite genres\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What does this do?</Heading>\n      <Content>Your musical taste is used to train our machine learning recommendation algorithm.</Content>\n    </ContextualHelp>\n  }>\n  <Checkbox value=\"rock\">Rock</Checkbox>\n  <Checkbox value=\"pop\">Pop</Checkbox>\n  <Checkbox value=\"classical\">Classical</Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Using DateRangePicker onChange to Format Selected Range (React Spectrum, TypeScript/JSX)\nDESCRIPTION: This code demonstrates using DateRangePicker's onChange event to synchronize selected date ranges in state and display a formatted version using Intl.DateTimeFormat. It utilizes getLocalTimeZone (from @internationalized/date) and useDateFormatter (from @react-aria/i18n) for locale-aware formatting. State is controlled with React, and the selected range is shown with long date style in the local time zone.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\\nimport {useDateFormatter} from '@react-aria/i18n';\\n\\nfunction Example() {\\n  let [range, setRange] = React.useState({\\n    start: parseDate('2020-07-03'),\\n    end: parseDate('2020-07-10')\\n  });\\n  let formatter = useDateFormatter({dateStyle: 'long'});\\n\\n  return (\\n    <>\\n      <MyDateRangePicker label=\\\"Date range\\\" value={range} onChange={setRange} />\\n      <p>Selected date: {range ? formatter.formatRange(range.start.toDate(getLocalTimeZone()), range.end.toDate(getLocalTimeZone())) : '--'}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled State Breadcrumbs Navigation - React Spectrum - TypeScript\nDESCRIPTION: This code block demonstrates rendering Breadcrumbs with isDisabled=true, which displays the breadcrumbs in a disabled, non-interactive state. This is useful when navigation is unavailable but visual continuity must be preserved. Requires only @react-spectrum/breadcrumbs. Key input is isDisabled prop. No output/action aside from a visually disabled UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Breadcrumbs isDisabled>\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n  <Item key=\"march 2020 assets\">March 2020 Assets</Item>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Setting the Default State of a Switch Component in TSX\nDESCRIPTION: This snippet demonstrates how to use the `defaultSelected` prop on the custom `Switch` component (built using `useSwitch`). Setting `defaultSelected` initializes the switch in the 'on' or selected state when it first renders, without making it a controlled component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/switch/docs/useSwitch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch defaultSelected>Wi-Fi</Switch>\n```\n\n----------------------------------------\n\nTITLE: Applying Props via Context in React Aria ProgressBar (TSX)\nDESCRIPTION: Shows how to use the `ProgressBarContext.Provider` to pass props, such as `formatOptions`, to all descendant `ProgressBar` components within the provider. This enables centralized configuration for multiple components and requires importing the specific context (`ProgressBarContext`) from `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ProgressBar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ProgressBarContext} from 'react-aria-components';\n\n<ProgressBarContext.Provider value={{formatOptions: {style: 'decimal'}}}>\n  <MyProgressBar label=\"Converting…\" value={28.5} />\n  <MyProgressBar label=\"Uploading…\" value={68.75} />\n</ProgressBarContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Styling ListBox Sections and Headers with CSS\nDESCRIPTION: This CSS snippet styles `ListBoxSection` and `Header` components within a `ListBox`. It adds top margin to sections (except the first) for separation and styles the header text (font size, weight, padding).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox {\n  .react-aria-ListBoxSection:not(:first-child) {\n    margin-top: 12px;\n  }\n\n  .react-aria-Header {\n    font-size: 1.143rem;\n    font-weight: bold;\n    padding: 0 0.714rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Theme Variables with Spectrum CSS (CSS)\nDESCRIPTION: This snippet demonstrates creating a custom theme class in CSS by defining spectrum global theme variables for colors and component-specific overrides. The variables declared within the \".coca-cola-theme\" class ensure consistent coloring and enable granular customizations for individual components, such as buttons. Requires use in conjunction with React Spectrum and proper CSS module/class application in the provider.\nThe theme class must be applied at the root level via the provider for variable scoping to propagate to child components. Inputs are CSS variable definitions, and the output is consistent theming across the app. All required variable names should match those expected by Spectrum CSS; omitting required variables can break appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-theming.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.coca-cola-theme {\n  // definitions for all spectrum global theme variables\n  --spectrum-global-color-gray-100: rgb(255, 255, 255);\n  --spectrum-global-color-gray-200: rgb(244, 244, 244);\n  --spectrum-global-color-gray-300: rgb(234, 234, 234);\n  // ...\n\n  // definitions for individual component overrides\n  --spectrum-button-background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ComboBox Menu Trigger Behavior (TSX)\nDESCRIPTION: Demonstrates setting the `menuTrigger` prop to `focus`. This causes the ComboBox dropdown menu to open automatically when the input field receives focus, rather than the default behavior of opening on input.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<ComboBox label=\"Favorite Animal\" menuTrigger=\"focus\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring `useStepListState` Documentation Content using MDX\nDESCRIPTION: Uses MDX syntax (Markdown with JSX) to structure the documentation page content. It renders the hook's description using `<PageDescription>`, package and component information via `<HeaderInfo>`, the function's API signature using `<FunctionAPI>`, and the return type's interface details with `<ClassAPI>`. It also provides a link to an example usage within the `useStepList` documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/steplist/docs/useStepListState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n# useStepListState\n\n<PageDescription>{docs.exports.useStepListState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useStepListState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useStepListState} links={docs.links} />\n\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useStepListState.return.base.id]} />\n\n## Example\n\nSee the docs for [useStepList](../react-aria/useStepList.html) in react-aria for an example of `useStepListState`.\n```\n\n----------------------------------------\n\nTITLE: Rendering List with Disabled Rows - React Spectrum - TypeScript/JSX\nDESCRIPTION: Shows how to instantiate the PokemonList component with specified rows disabled via the disabledKeys prop. Disables interaction on designated key(s), and updates the selection and accessibility behavior accordingly. Intended to demonstrate prop-based control of disabled behavior for specific rows. Requires the previously defined PokemonList component and React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Using the example above\n<PokemonList aria-label=\"List with disabled rows\" selectionMode=\"multiple\" disabledKeys={[3]} />\n```\n\n----------------------------------------\n\nTITLE: InlineAlert with Negative Variant in React Spectrum\nDESCRIPTION: Demonstrates an InlineAlert with the negative variant, used to display an error message about payment processing failure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/inlinealert/docs/InlineAlert.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<InlineAlert variant=\"negative\">\n  <Heading>Unable to process payment</Heading>\n  <Content>There was an error processing your payment. Please check that your credit card information is correct, then try again.</Content>\n</InlineAlert>\n```\n\n----------------------------------------\n\nTITLE: Importing Static Image Asset for Datepicker Example - JavaScript\nDESCRIPTION: This snippet imports a static image asset (datepicker-rtl.png) using a URL loader for inclusion within the blog post. The imported value 'datepickerImage' contains the resolved URL or data of the image, which can be passed as a src prop to an Image component. The build tool or bundler (e.g., webpack, Vite) must support URL asset imports for this to work.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2025-03-05.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport datepickerImage from 'url:../assets/datepicker-rtl.png';\n```\n\n----------------------------------------\n\nTITLE: Adding Description Text to React Spectrum TagGroup using TSX\nDESCRIPTION: Demonstrates how to add supplementary descriptive text to a `TagGroup` for accessibility and user guidance. A `Text` component with the `slot=\"description\"` prop is placed as a child of the `TagGroup`, associating the provided text ('Your selected categories.') with the group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<TagGroup>\n  <Label>Categories</Label>\n  <TagList>\n    <Tag>News</Tag>\n    <Tag>Travel</Tag>\n    <Tag>Gaming</Tag>\n    <Tag>Shopping</Tag>\n  </TagList>\n  {/*- begin highlight -*/}\n  <Text slot=\"description\">Your selected categories.</Text>\n  {/*- end highlight -*/}\n</TagGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to React Aria Component in JSX\nDESCRIPTION: This JSX snippet shows how to override the default React Aria class name by providing a custom string to the `className` prop on a component. Here, the `DisclosureGroup` component is assigned the custom class `my-accordion`, allowing for specific styling via `.my-accordion` selector.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<DisclosureGroup className=\"my-accordion\">\n  {/* ... */}\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Field Validation in React Aria DateField (TSX)\nDESCRIPTION: This example shows how to implement basic validation in a React Aria `Form`. The `DateField` component uses the `isRequired` prop to mark the field as mandatory. A `FieldError` component is included within the `DateField` to automatically display validation error messages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  {/*- begin highlight -*/}\n  <DateField name=\"date\" isRequired>\n  {/*- end highlight -*/}\n    <Label>Appointment date</Label>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    {/*- begin highlight -*/}\n    <FieldError />\n    {/*- end highlight -*/}\n  </DateField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Components with CSS Selectors\nDESCRIPTION: Example showing how to style React Aria menu components using CSS selectors that target the default class names following the react-aria-ComponentName naming convention.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Menu {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Single Selection ToggleButtonGroup with Default Selected Key (JSX)\nDESCRIPTION: Initializes a ToggleButtonGroup in single selection mode (default) and sets one item as selected using defaultSelectedKeys. The keys correspond to the id of each ToggleButton. Input: React JSX with props for ToggleButtonGroup. Output: a toggle group with one preselected item. Must be used in a React environment and 'react-aria-components' must be present.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButtonGroup defaultSelectedKeys={['list']}>\n  <ToggleButton id=\"grid\">Grid view</ToggleButton>\n  <ToggleButton id=\"list\">List view</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery view</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Creates an optimized production build in the build folder with minified bundles and hashed filenames.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/rsp-cra-18/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Importing Stock Data in TypeScript\nDESCRIPTION: This snippet imports a CSS file and defines an array of stock objects containing various properties such as symbol, name, sector, market cap, and industry.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/stock-table.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n\nconst stocks = [{\"id\":1,\"symbol\":\"PAACR\",\"name\":\"Pacific Special Acquisition Corp.\",\"sector\":\"Finance\",\"marketCap\":\"n/a\",\"industry\":\"Business Services\"},\n{\"id\":2,\"symbol\":\"DCM\",\"name\":\"NTT DOCOMO, Inc\",\"sector\":\"Technology\",\"marketCap\":\"$96.67B\",\"industry\":\"Radio And Television Broadcasting And Communications Equipment\"},\n// ... more stock objects ...\n{\"id\":50,\"symbol\":\"MARK\",\"name\":\"Remark Holdings, Inc.\",\"sector\":\"Consumer Services\",\"marketCap\":\"$57.31M\",\"industry\":\"Telecommunications Equipment\"}];\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with Tailwind CSS Data Attributes\nDESCRIPTION: Example of using Tailwind CSS data attribute modifiers to style component states like selected and disabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBoxItem className=\"data-[selected]:bg-blue-400 data-[disabled]:bg-gray-100\">\n  Item\n</ListBoxItem>\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component in React Spectrum (JavaScript)\nDESCRIPTION: This snippet imports the Layout component from the @react-spectrum/docs package and re-exports it as the default export. This sets the page's visual and structural wrapper, allowing content defined in the rest of the file to inherit standardized styling and structure. It requires @react-spectrum/docs to be installed as a dependency, and is used in MDX-based documentation setups.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/checkbox/docs/useCheckboxGroupState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Long Press MenuTrigger Implementation\nDESCRIPTION: Example showing how to implement a MenuTrigger with long press behavior and custom icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/MenuTrigger.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MenuTrigger trigger=\"longPress\">\n  <ActionButton\n    aria-label=\"Crop tool\"\n    onPress={() => alert('Cropping!')}>\n    <Crop />\n  </ActionButton>\n  <Menu>\n    <Item textValue=\"Crop Rotate\">\n      <CropRotate />\n      <Text>Crop Rotate</Text>\n    </Item>\n    <Item textValue=\"Slice\">\n      <Slice />\n      <Text>Slice</Text>\n    </Item>\n    <Item textValue=\"Clone stamp\">\n      <CloneStamp />\n      <Text>Clone Stamp</Text>\n    </Item>\n  </Menu>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to React Aria Checkbox (JSX)\nDESCRIPTION: Shows how to override the default React Aria class name by providing a custom string to the `className` prop of the Checkbox component. This allows integration with custom CSS frameworks or specific naming conventions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox className=\"my-checkbox\">\n  {/* ... */}\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Individual Component Packages in React Spectrum Monolith (JavaScript)\nDESCRIPTION: Demonstrates how files within the main `react-spectrum` package (e.g., `Button.js`) will re-export the entire contents of the corresponding individual component package (`@react-spectrum/button`). This allows users to continue importing components from the monolith package (e.g., `react-spectrum/Button`) while the underlying implementation comes from the separately versioned package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-versioning.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from '@react-spectrum/button';\n```\n\n----------------------------------------\n\nTITLE: Customizing Disabled Appearance for ColorWheel and Track (CSS)\nDESCRIPTION: Adds CSS targeting the .react-aria-ColorWheel and descendant elements in the disabled state, dimming the wheel track and thumb via color and opacity. Uses attribute selectors for [data-disabled] state and ensures visual feedback aligns with the disabled logic in the TSX components. No special dependencies; add to a global stylesheet as needed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorWheel {\\n  &[data-disabled] {\\n    .react-aria-ColorWheelTrack {\\n      background: gray !important;\\n    }\\n\\n    .react-aria-ColorThumb {\\n      background: gray !important;\\n      opacity: 0.5;\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Radio Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @react-spectrum/radio package in a Markdown file. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/radio\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Controlled NumberField Example\nDESCRIPTION: Shows how to create a controlled NumberField component with state management using React hooks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(6);\n\n  return (\n    <>\n      <NumberField\n        label=\"Controlled value\"\n        value={value}\n        onChange={setValue} />\n      <div>Current value prop: {value}</div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Layout Component in JavaScript/JSX\nDESCRIPTION: Exports the BlogPostLayout component, imported previously, as the default export for this module. This component likely defines the overall structure and styling for the blog post page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-2.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Form Components\nDESCRIPTION: Shows how to import the necessary components from React Spectrum packages for form creation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/form/docs/Form.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Checkbox} from '@react-spectrum/checkbox';\nimport {Form} from '@react-spectrum/form';\nimport {Radio, RadioGroup} from '@react-spectrum/radio';\nimport {TextField} from '@react-spectrum/textfield';\n```\n\n----------------------------------------\n\nTITLE: Detecting and Using Numbering Systems\nDESCRIPTION: Example showing how to detect the numbering system from input and use it to format numbers appropriately with NumberFormatter.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberParser.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport {NumberParser, NumberFormatter} from '@internationalized/number';\n\nlet parser = new NumberParser('en-US', {style: 'decimal'});\nlet numberingSystem = parser.getNumberingSystem('١٢'); // -> 'arab'\n\nlet formatter = new NumberFormatter('en-US', {style: 'decimal', numberingSystem});\nformatter.format(12); // '١٢'\n```\n\n----------------------------------------\n\nTITLE: Styling Button Focus States with CSS in React Aria\nDESCRIPTION: CSS styling for a button that includes a focus ring style applied by the FocusRing component. The focus-ring class adds a blue outline with offset when the button receives keyboard focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/focus/docs/FocusRing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.button {\n  -webkit-appearance: none;\n  appearance: none;\n  background: green;\n  border: none;\n  color: white;\n  font-size: 14px;\n  padding: 4px 8px;\n}\n\n.button.focus-ring {\n  outline: 2px solid dodgerblue;\n  outline-offset: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a Directory with FileTrigger - React Spectrum (TypeScript)\nDESCRIPTION: This functional React example demonstrates how FileTrigger can be configured to allow for directory selection with the acceptDirectory prop. The onSelect handler processes the resulting FileList, extracting either webkitRelativePath (for browsers supporting it) or file name. Selected files are listed in a bulleted list below the button. Key dependencies are react and react-aria-components. Requires a browser that supports input[type=file] directory selection. Inputs include potentially nested file selections; output is a rendered list of relative file paths or names. Cross-browser support may vary.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/FileTrigger.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example () {\n  let [files, setFiles] = React.useState([]);\n\n  return (\n    <>\n      <FileTrigger\n        acceptDirectory\n        onSelect={(e) => {\n          if (e) {\n            let fileList = [...e].map(file => file.webkitRelativePath !== \"\" ? file.webkitRelativePath : file.name);\n            setFiles(fileList);\n          }\n        }} >\n        <Button>Upload</Button>\n      </FileTrigger>\n      {files && <ul>\n        {files.map((file, index) => (\n          <li key={index}>{file}</li>\n        ))}\n      </ul>}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Making React Spectrum RangeCalendar Read-Only using TSX\nDESCRIPTION: Illustrates using the boolean `isReadOnly` prop to prevent changes to the selected date range while still allowing the calendar cells to be focusable. A `value` prop is typically provided to display the immutable range. Requires `@internationalized/date` for `today()`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyRangeCalendar aria-label=\"Trip dates\" value={{start: today(getLocalTimeZone()), end: today(getLocalTimeZone()).add({ weeks: 1 })}} isReadOnly />\n```\n```\n\n----------------------------------------\n\nTITLE: Importing RadioGroup and Radio Components in React\nDESCRIPTION: Shows how to import the RadioGroup and Radio components from the @react-spectrum/radio package, along with the Flex component from @react-spectrum/layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Radio, RadioGroup} from '@react-spectrum/radio';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Items in React Spectrum Tabs\nDESCRIPTION: This example illustrates how to disable individual tabs within a React Spectrum `Tabs` component. The `disabledKeys` prop accepts an iterable (like an array) containing the keys of the items that should be disabled. The keys correspond to the `key` prop provided to each `<Item>` component. In this case, the 'Gamepad Settings' tab is disabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs aria-label=\"Input settings\" disabledKeys={['gamepad']}>\n  <Item key=\"mouse\">Mouse Settings</Item>\n  <Item key=\"keyboard\">Keyboard Settings</Item>\n  <Item key=\"gamepad\">Gamepad Settings</Item>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Medium Size Breadcrumbs Navigation - React Spectrum - TypeScript\nDESCRIPTION: This example shows Breadcrumbs rendered with medium size by setting size=\"M\". Like the previous examples, it uses Item components as children and demonstrates how to adjust visual size via the size prop. No parameters besides the keys and size are required. Outputs breadcrumbs suited for mid-sized UI needs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Breadcrumbs size=\"M\">\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Sorting in Table - React Spectrum (TypeScript)\nDESCRIPTION: This TypeScript/React example defines an asynchronous client-side sorting mechanism for a table displaying Star Wars character data using the useAsyncList hook from @react-stately/data. The load function fetches data, and the sort function compares rows by the chosen sortable column, supporting both string and numeric types based on the sortDescriptor. Dependencies include React, @react-stately/data, and React Spectrum Table components. The Table utilizes highlighted props sortDescriptor and onSortChange for controlled sorting; user actions dynamically update sorting order. Inputs include column metadata and fetched character objects; outputs are sorted list items displayed in the table. Limitations: sample uses client-side sorting; for large datasets, server-side sorting is recommended.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string,\n  height: number,\n  mass: number,\n  birth_year: number\n}\n\nfunction AsyncSortTable() {\n  let list = useAsyncList<Character>({\n    async load({signal}) {\n      let res = await fetch(`https://swapi.py4e.com/api/people/?search`, {signal});\n      let json = await res.json();\n      return {\n        items: json.results\n      };\n    },\n    async sort({items, sortDescriptor}) {\n      return {\n        items: items.sort((a, b) => {\n          let first = a[sortDescriptor.column];\n          let second = b[sortDescriptor.column];\n          let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;\n          if (sortDescriptor.direction === 'descending') {\n            cmp *= -1;\n          }\n          return cmp;\n        })\n      };\n    }\n  });\n\n  return (\n    <Table\n      aria-label=\"Example table with client side sorting\"\n      /*- begin highlight -*/\n      sortDescriptor={list.sortDescriptor}\n      onSortChange={list.sort}\n      /*- end highlight -*/\n    >\n      <TableHeader>\n        <MyColumn id=\"name\" isRowHeader allowsSorting>Name</MyColumn>\n        <MyColumn id=\"height\" allowsSorting>Height</MyColumn>\n        <MyColumn id=\"mass\" allowsSorting>Mass</MyColumn>\n        <MyColumn id=\"birth_year\" allowsSorting>Birth Year</MyColumn>\n      </TableHeader>\n      <TableBody items={list.items}>\n        {item => (\n          <Row id={item.name}>\n            <Cell>{item.name}</Cell>\n            <Cell>{item.height}</Cell>\n            <Cell>{item.mass}</Cell>\n            <Cell>{item.birth_year}</Cell>\n          </Row>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider for Next.js Pages Router\nDESCRIPTION: This snippet shows how to set up the Provider component for use with Next.js Pages Router, including type configuration for router options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AppProps} from 'next/app';\nimport {useRouter, type NextRouter} from 'next/router';\nimport {Provider, defaultTheme} from '@adobe/react-spectrum';\n\ndeclare module '@adobe/react-spectrum' {\n  interface RouterConfig {\n    routerOptions: NonNullable<Parameters<NextRouter['push']>[2]>\n  }\n}\n\nexport default function MyApp({Component, pageProps}: AppProps) {\n  let router = useRouter();\n\n  return (\n    <Provider \n      theme={defaultTheme}\n      router={{\n        navigate: (href, opts) => router.push(href, undefined, opts),\n      }}>\n      <Component {...pageProps} />\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Heading Component inside React Aria Dialog (TSX)\nDESCRIPTION: Illustrates how to use the previously defined `MyCustomHeading` component within a React Aria `Dialog`. This replaces the built-in `Heading` component, demonstrating the integration of custom components using the context pattern.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Dialog.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog>\n  {/*- begin highlight -*/}\n  <MyCustomHeading>Dialog title</MyCustomHeading>\n  {/*- end highlight -*/}\n  {/* ... */}\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component for Calendar Navigation\nDESCRIPTION: This snippet shows how to create a reusable Button component using the useButton hook from React Aria, which can be used for calendar navigation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces for Selection Mechanisms in TypeScript\nDESCRIPTION: This snippet provides TypeScript interfaces (`SelectionOptions`, `MultipleSelectionBase`, `SingleSelectionBase`) for managing selection state in components. It covers options for allowing selection (single, multiple, empty), handling selected items (controlled and uncontrolled via `selectedItems`/`defaultSelectedItems` or `selectedItem`/`defaultSelectedItem`), and providing callbacks (`onSelectionChange`) for selection changes. The `typeToSelect` property suggests functionality related to keyboard navigation or type-ahead selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Shared.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SelectionOptions {\n  allowsSelection?: boolean,\n  allowsMultipleSelection?: boolean,\n  allowsEmptySelection?: boolean,\n  typeToSelect?: boolean // ???\n}\n\ninterface MultipleSelectionBase extends SelectionOptions {\n  selectedItems?: Array<any>,\n  defaultSelectedItems?: Array<any>,\n  onSelectionChange?: (selectedItems: Array<any>) => void\n}\n\ninterface SingleSelectionBase {\n  selectedItem?: any,\n  defaultSelectedItem?: any,\n  onSelectionChange?: (selectedItem: any) => void,\n  typeToSelect?: boolean // or is it really typeToFocus?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Index for ComboBox Button in HTML/JSX\nDESCRIPTION: This snippet demonstrates setting the `tabIndex` attribute to `-1` for the 'Open' icon button associated with a ComboBox. This ensures the button is removed from the standard Tab navigation order, as recommended by accessibility guidelines for combobox patterns where the input field itself should be the primary focusable element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Autocomplete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\ntabIndex={-1}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Disabled ActionButton - React Spectrum - TypeScript (TSX)\nDESCRIPTION: Shows how to disable the ActionButton by setting the isDisabled prop, making it non-interactive and visually indicating the disabled state. Inputs: None. Outputs: Disabled ActionButton labeled 'Action!'. Dependencies: ActionButton.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ActionButton.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionButton isDisabled>Action!</ActionButton>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Checkbox in GridList\nDESCRIPTION: This snippet shows how to use a custom checkbox component within a GridList, replacing the built-in React Aria Components Checkbox with a custom implementation via the 'selection' slot.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_48\n\nLANGUAGE: tsx\nCODE:\n```\n<GridList>\n  <GridListItem>\n    {/*- begin highlight -*/}\n    <MyCustomCheckbox slot=\"selection\" />\n    {/*- end highlight -*/}\n    {/* ... */}\n  </GridListItem>\n</GridList>\n```\n\n----------------------------------------\n\nTITLE: Adjusting TreeItem Indentation with CSS Custom Property\nDESCRIPTION: Demonstrates using the `--tree-item-level` CSS custom property exposed by `TreeItem` to dynamically adjust the left padding, creating visual indentation for nested items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n```css render=false\n.react-aria-TreeItem {\n  padding-left: calc((var(--tree-item-level) - 1) * 20px);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Calendar Component with CSS\nDESCRIPTION: This CSS snippet provides styles for the Calendar component, including layout, colors, and cell states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.calendar {\n  width: 220px;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin: 0 8px;\n}\n\n.header h2 {\n  flex: 1;\n  margin: 0;\n}\n\n.calendar table {\n  width: 100%;\n}\n\n.cell {\n  cursor: default;\n  text-align: center;\n}\n\n.selected {\n  background: var(--blue);\n  color: white;\n}\n\n.unavailable {\n  color: var(--spectrum-global-color-red-600);\n}\n\n.disabled {\n  color: gray;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with DatePicker Component\nDESCRIPTION: Example showing how to integrate DatePicker with HTML forms using the name prop, which enables submitting the selected date in ISO 8601 format.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker label=\"Birth date\" name=\"birthday\" />\n```\n\n----------------------------------------\n\nTITLE: React Spectrum Package Version List\nDESCRIPTION: A detailed list of released packages in the React Spectrum ecosystem with their version numbers. This includes all components from @adobe/react-spectrum, @react-aria, @react-stately, @react-types, @spectrum-icons namespaces, and related utilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2025-01-15.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n - @adobe/react-spectrum@3.39.0\n - @internationalized/date@3.7.0\n - @react-aria/accordion@3.0.0-alpha.37\n - @react-aria/actiongroup@3.7.12\n - @react-aria/autocomplete@3.0.0-alpha.37\n - @react-aria/breadcrumbs@3.5.20\n - @react-aria/button@3.11.1\n - @react-aria/calendar@3.7.0\n - @react-aria/checkbox@3.15.1\n - @react-aria/collections@3.0.0-alpha.7\n - @react-aria/color@3.0.3\n - @react-aria/combobox@3.11.1\n - @react-aria/datepicker@3.13.0\n - @react-aria/dialog@3.5.21\n - @react-aria/disclosure@3.0.1\n - @react-aria/dnd@3.8.1\n - @react-aria/focus@3.19.1\n - @react-aria/form@3.0.12\n - @react-aria/grid@3.11.1\n - @react-aria/gridlist@3.10.1\n - @react-aria/i18n@3.12.5\n - @react-aria/interactions@3.23.0\n - @react-aria/label@3.7.14\n - @react-aria/landmark@3.0.0-beta.18\n - @react-aria/link@3.7.8\n - @react-aria/listbox@3.14.0\n - @react-aria/menu@3.17.0\n - @react-aria/meter@3.4.19\n - @react-aria/numberfield@3.11.10\n - @react-aria/overlays@3.25.0\n - @react-aria/progress@3.4.19\n - @react-aria/radio@3.10.11\n - @react-aria/searchfield@3.8.0\n - @react-aria/select@3.15.1\n - @react-aria/selection@3.22.0\n - @react-aria/separator@3.4.5\n - @react-aria/slider@3.7.15\n - @react-aria/spinbutton@3.6.11\n - @react-aria/steplist@3.0.0-alpha.13\n - @react-aria/switch@3.6.11\n - @react-aria/table@3.16.1\n - @react-aria/tabs@3.9.9\n - @react-aria/tag@3.4.9\n - @react-aria/test-utils@1.0.0-alpha.4\n - @react-aria/textfield@3.16.0\n - @react-aria/toast@3.0.0-beta.19\n - @react-aria/toggle@3.10.11\n - @react-aria/toolbar@3.0.0-beta.12\n - @react-aria/tooltip@3.7.11\n - @react-aria/tree@3.0.0-beta.3\n - @react-aria/utils@3.27.0\n - @react-aria/virtualizer@4.1.1\n - @react-aria/visually-hidden@3.8.19\n - @react-spectrum/accordion@3.0.2\n - @react-spectrum/actionbar@3.6.3\n - @react-spectrum/actiongroup@3.10.11\n - @react-spectrum/autocomplete@3.0.0-alpha.39\n - @react-spectrum/avatar@3.0.18\n - @react-spectrum/badge@3.1.19\n - @react-spectrum/breadcrumbs@3.9.13\n - @react-spectrum/button@3.16.10\n - @react-spectrum/buttongroup@3.6.18\n - @react-spectrum/calendar@3.6.0\n - @react-spectrum/card@3.0.0-alpha.39\n - @react-spectrum/checkbox@3.9.12\n - @react-spectrum/color@3.0.3\n - @react-spectrum/combobox@3.14.1\n - @react-spectrum/contextualhelp@3.6.17\n - @react-spectrum/datepicker@3.12.0\n - @react-spectrum/dialog@3.8.17\n - @react-spectrum/divider@3.5.19\n - @react-spectrum/dnd@3.5.1\n - @react-spectrum/dropzone@3.0.7\n - @react-spectrum/filetrigger@3.0.7\n - @react-spectrum/form@3.7.11\n - @react-spectrum/icon@3.8.1\n - @react-spectrum/illustratedmessage@3.5.6\n - @react-spectrum/image@3.5.7\n - @react-spectrum/inlinealert@3.2.11\n - @react-spectrum/label@3.16.11\n - @react-spectrum/labeledvalue@3.1.19\n - @react-spectrum/layout@3.6.11\n - @react-spectrum/link@3.6.13\n - @react-spectrum/list@3.9.1\n - @react-spectrum/listbox@3.14.1\n - @react-spectrum/menu@3.21.1\n - @react-spectrum/meter@3.5.6\n - @react-spectrum/numberfield@3.9.9\n - @react-spectrum/overlays@5.7.1\n - @react-spectrum/picker@3.15.5\n - @react-spectrum/progress@3.7.12\n - @react-spectrum/provider@3.10.1\n - @react-spectrum/radio@3.7.12\n - @react-spectrum/s2@0.6.0\n - @react-spectrum/searchfield@3.8.12\n - @react-spectrum/slider@3.7.1\n - @react-spectrum/statuslight@3.5.18\n - @react-spectrum/steplist@3.0.0-alpha.11\n - @react-spectrum/switch@3.5.11\n - @react-spectrum/table@3.15.1\n - @react-spectrum/tabs@3.8.16\n - @react-spectrum/tag@3.2.12\n - @react-spectrum/test-utils@1.0.0-alpha.4\n - @react-spectrum/text@3.5.11\n - @react-spectrum/textfield@3.12.8\n - @react-spectrum/theme-dark@3.5.15\n - @react-spectrum/theme-default@3.5.15\n - @react-spectrum/theme-express@3.0.0-alpha.17\n - @react-spectrum/theme-light@3.4.15\n - @react-spectrum/toast@3.0.0-beta.18\n - @react-spectrum/tooltip@3.7.1\n - @react-spectrum/tree@3.0.0-beta.3\n - @react-spectrum/utils@3.12.1\n - @react-spectrum/view@3.6.15\n - @react-spectrum/well@3.4.19\n - @react-stately/autocomplete@3.0.0-alpha.0\n - @react-stately/calendar@3.7.0\n - @react-stately/checkbox@3.6.11\n - @react-stately/collections@3.12.1\n - @react-stately/color@3.8.2\n - @react-stately/combobox@3.10.2\n - @react-stately/data@3.12.1\n - @react-stately/datepicker@3.12.0\n - @react-stately/disclosure@3.0.1\n - @react-stately/dnd@3.5.1\n - @react-stately/form@3.1.1\n - @react-stately/grid@3.10.1\n - @react-stately/layout@4.1.1\n - @react-stately/list@3.11.2\n - @react-stately/menu@3.9.1\n - @react-stately/numberfield@3.9.9\n - @react-stately/overlays@3.6.13\n - @react-stately/radio@3.10.10\n - @react-stately/searchfield@3.5.9\n - @react-stately/select@3.6.10\n - @react-stately/selection@3.19.0\n - @react-stately/slider@3.6.1\n - @react-stately/steplist@3.0.0-alpha.11\n - @react-stately/table@3.13.1\n - @react-stately/tabs@3.7.1\n - @react-stately/toggle@3.8.1\n - @react-stately/tooltip@3.5.1\n - @react-stately/tree@3.8.7\n - @react-stately/virtualizer@4.2.1\n - @react-types/accordion@3.0.0-alpha.26\n - @react-types/actionbar@3.1.12\n - @react-types/actiongroup@3.4.14\n - @react-types/autocomplete@3.0.0-alpha.28\n - @react-types/avatar@3.0.12\n - @react-types/badge@3.1.14\n - @react-types/breadcrumbs@3.7.10\n - @react-types/button@3.10.2\n - @react-types/buttongroup@3.3.14\n - @react-types/calendar@3.6.0\n - @react-types/card@3.0.0-alpha.32\n - @react-types/checkbox@3.9.1\n - @react-types/color@3.0.2\n - @react-types/combobox@3.13.2\n - @react-types/contextualhelp@3.2.15\n - @react-types/datepicker@3.10.0\n - @react-types/dialog@3.5.15\n - @react-types/divider@3.3.14\n - @react-types/form@3.7.9\n - @react-types/grid@3.2.11\n - @react-types/illustratedmessage@3.3.14\n - @react-types/image@3.4.6\n - @react-types/label@3.9.8\n - @react-types/layout@3.3.20\n - @react-types/link@3.5.10\n - @react-types/list@3.2.23\n - @react-types/listbox@3.5.4\n - @react-types/menu@3.9.14\n - @react-types/meter@3.4.6\n - @react-types/numberfield@3.8.8\n - @react-types/overlays@3.8.12\n - @react-types/progress@3.5.9\n - @react-types/provider@3.8.6\n - @react-types/radio@3.8.6\n - @react-types/searchfield@3.5.11\n - @react-types/select@3.9.9\n - @react-types/shared@3.27.0\n - @react-types/slider@3.7.8\n - @react-types/statuslight@3.3.14\n - @react-types/switch@3.5.8\n - @react-types/table@3.10.4\n - @react-types/tabs@3.3.12\n - @react-types/text@3.3.14\n - @react-types/textfield@3.11.0\n - @react-types/tooltip@3.4.14\n - @react-types/view@3.4.14\n - @react-types/well@3.3.14\n - @spectrum-icons/color@3.5.18\n - @spectrum-icons/express@3.0.0-alpha.22\n - @spectrum-icons/illustrations@3.6.18\n - @spectrum-icons/ui@3.6.12\n - @spectrum-icons/workflow@4.2.17\n - @react-spectrum/codemods@0.4.0\n - @react-aria/optimize-locales-plugin@1.1.4\n - @react-spectrum/s2-icon-builder@0.2.1\n - react-aria@3.37.0\n - react-aria-components@1.6.0\n - react-stately@3.35.0\n```\n\n----------------------------------------\n\nTITLE: Using a Custom className Prop with Group Component in React (JSX)\nDESCRIPTION: This JSX snippet illustrates how to use a custom className on the Group component to fully override default styles. It demonstrates extensibility and style isolation using user-defined class selectors. Inputs are any valid React children and 'className' string. The output is a Group node with custom classes applied, allowing complete visual control.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Group className=\\\"my-group\\\">\\n  {/* ... */}\\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Semantic Variant Badges in a Flex Layout (TypeScript/JSX)\nDESCRIPTION: Demonstrates rendering several Badge components with distinct semantic variants (positive, info, negative, neutral), each communicating a different status, and organized vertically using the Flex component from @react-spectrum/layout. This setup aids in illustrating the visual differentiation between status badges. Inputs are the variant props and respective label strings; output is a vertical stack of styled badges.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/badge/docs/Badge.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\n\n<Flex direction=\"column\" gap={8}>\n  <Badge variant=\"positive\">Green: Approved, Complete, Success, New, Purchased, Licensed</Badge>\n  <Badge variant=\"info\">Blue: Active, In Use, Live, Published</Badge>\n  <Badge variant=\"negative\">Red: Error, Alert, Rejected, Failed</Badge>\n  <Badge variant=\"neutral\">Gray: Archived, Deleted, Paused, Draft, Not Started, Ended</Badge>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using SearchFieldContext for Advanced Composition\nDESCRIPTION: Demonstrates creating a FieldGroup component that can disable multiple SearchField components at once using the SearchFieldContext provider.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SearchFieldContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isDisabled?: boolean\n}\n\nfunction FieldGroup({title, children, isDisabled}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <SearchFieldContext.Provider value={{isDisabled}}>\n        {children}\n      </SearchFieldContext.Provider>\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Filters\" isDisabled>\n  <MySearchField label=\"Name\" defaultValue=\"Devon\" />\n  <MySearchField label=\"Email\" defaultValue=\"devon@example.com\" />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Using an Uncontrolled ColorField Component\nDESCRIPTION: Shows how to use the ColorField component in an uncontrolled manner with a default value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ColorField aria-label=\"Color\" defaultValue=\"#7f007f\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Component with useDialog Hook\nDESCRIPTION: Implementation of a Dialog component using the useDialog hook to create accessible dialogs with proper ARIA attributes and focus management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dialog/docs/useDialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport type {AriaDialogProps} from '@react-aria/dialog';\nimport {useDialog} from '@react-aria/dialog';\n\n// Reuse the Button and Modal from your component library. See below for details.\nimport {Button, Modal, ModalTrigger} from 'your-component-library';\n\ninterface DialogProps extends AriaDialogProps {\n  title?: React.ReactNode,\n  children: React.ReactNode\n}\n\nfunction Dialog({title, children, ...props}: DialogProps) {\n  let ref = React.useRef(null);\n  let {dialogProps, titleProps} = useDialog(props, ref);\n\n  return (\n    <div {...dialogProps} ref={ref} style={{padding: 30}}>\n      {title &&\n        <h3 {...titleProps} style={{marginTop: 0}}>\n          {title}\n        </h3>\n      }\n      {children}\n    </div>\n  );\n}\n\n<ModalTrigger label=\"Open Dialog\">\n  {close =>\n    <Dialog title=\"Enter your name\">\n      <form style={{display: 'flex', flexDirection: 'column'}}>\n        <label htmlFor=\"first-name\">First Name:</label>\n        <input id=\"first-name\" />\n        <label htmlFor=\"last-name\">Last Name:</label>\n        <input id=\"last-name\" />\n        <Button\n          onPress={close}\n          style={{marginTop: 10}}>\n          Submit\n        </Button>\n      </form>\n    </Dialog>\n  }\n</ModalTrigger>\n```\n\n----------------------------------------\n\nTITLE: Formatting Slider Value in React Spectrum\nDESCRIPTION: Shows how to use formatOptions to display the Slider value as currency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  defaultValue={60} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only TimeField in React Spectrum\nDESCRIPTION: Demonstrates how to create a read-only TimeField that remains focusable but with immutable value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField label=\"Event time\" value={new Time(11)} isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Adding Description Text to SearchField\nDESCRIPTION: Shows how to add descriptive help text to a SearchField using the description slot with the Text component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField>\n  <Label>Email</Label>\n  <Input />\n  <Button>✕</Button>\n  <Text slot=\"description\">Enter an email for us to contact you about your order.</Text>\n</SearchField>\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Separators with CSS\nDESCRIPTION: CSS code for styling separators in a menu. It sets the height, background color, and margins for the separator elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Menu {\n  .react-aria-Separator {\n    height: 1px;\n    background: var(--border-color);\n    margin: 2px 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Text Component Example in React Spectrum\nDESCRIPTION: Demonstrates a simple implementation of the Text component displaying the word 'Paste'. This shows the most basic usage of the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/text/docs/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Text>Paste</Text>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Modal with CSS Selectors\nDESCRIPTION: Illustrates basic styling of the `Modal` component by targeting its default CSS class name, `.react-aria-Modal`. This allows applying custom styles using standard CSS rules.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Modal {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: InlineAlert with Positive Variant in React Spectrum\nDESCRIPTION: Demonstrates an InlineAlert with the positive variant, which changes the style and adds an icon. It contains a heading and content about payment information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/inlinealert/docs/InlineAlert.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<InlineAlert variant=\"positive\">\n  <Heading>Payment Information</Heading>\n  <Content>Enter your billing address, shipping address, and payment method to complete your purchase.</Content>\n</InlineAlert>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New Components or Hooks\nDESCRIPTION: Command to run the plop tool that generates template files for new components or hooks in the React Spectrum project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn plop\n```\n\n----------------------------------------\n\nTITLE: Webpack Locale Optimization Configuration\nDESCRIPTION: Configuration for optimizing locale bundles using webpack plugin\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/internationalization.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst optimizeLocales = require('@react-aria/optimize-locales-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    optimizeLocales.webpack({\n      locales: ['en-US', 'fr-FR']\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Slider Package in Markdown\nDESCRIPTION: This snippet shows how to reference the @react-aria/slider package using Markdown syntax. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/slider\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a ListBoxExample Component in TSX\nDESCRIPTION: This TSX snippet imports the `ListBoxExample` component from './home/ListBoxExample' and renders it. Its placement within a card discussing keyboard-friendly features suggests it demonstrates keyboard navigation or interaction within a listbox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx snippet\nimport {ListBoxExample} from './home/ListBoxExample';\n<ListBoxExample />\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vertical Color Slider Component in React\nDESCRIPTION: This example shows how to create a vertical color slider component using the useColorSlider hook. It demonstrates the use of the 'orientation' option and omits the visible label and output elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSlider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nfunction ColorSlider(props) {\n  let {locale} = useLocale();\n  let state = useColorSliderState({...props, locale});\n  let trackRef = React.useRef(null);\n  let inputRef = React.useRef(null);\n  let {trackProps, thumbProps, inputProps} = useColorSlider({\n    ...props,\n    orientation: 'vertical',\n    trackRef,\n    inputRef\n  }, state);\n\n  let {focusProps, isFocusVisible} = useFocusRing();\n\n  return (\n    <div\n      style={{\n        height: 200\n      }}>\n      <div\n        {...trackProps}\n        ref={trackRef}\n        style={{\n          ...trackProps.style,\n          width: TRACK_THICKNESS,\n          height: '100%',\n          borderRadius: 4\n        }}>\n        <div\n          {...thumbProps}\n          style={{\n            ...thumbProps.style,\n            left: TRACK_THICKNESS / 2,\n            border: '2px solid white',\n            boxShadow: '0 0 0 1px black, inset 0 0 0 1px black',\n            width: isFocusVisible ? TRACK_THICKNESS + 4 : THUMB_SIZE,\n            height: isFocusVisible ? TRACK_THICKNESS + 4 : THUMB_SIZE,\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            background: state.getDisplayColor().toString('css')\n          }}>\n          <input ref={inputRef} {...inputProps} {...focusProps} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n<ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross Offset Popover Dialog in React Spectrum\nDESCRIPTION: This example shows how to use the 'crossOffset' prop to position a Popover Dialog 100px to the right of its trigger button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"popover\" placement=\"top\" crossOffset={100}>\n  <ActionButton>Trigger</ActionButton>\n  <Dialog>\n    <Heading>Cross offset</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        Offset by an additional 100px.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Importing React Aria Hook from Monopackage (TSX)\nDESCRIPTION: Demonstrates importing the `useButton` hook from the `react-aria` monopackage. This import style is used when the main `react-aria` package is installed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/hooks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Monopackage\nimport {useButton} from 'react-aria';\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Render Props Values\nDESCRIPTION: Example demonstrating how to modify default values provided by React Aria via render props options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectValue>\n  {({defaultChildren}) => <span>{defaultChildren}</span>}\n</SelectValue>\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Title and Description in JSX/Markdown\nDESCRIPTION: This snippet defines the main heading for the page (`useCalendarState`) using Markdown syntax and renders the hook's description using the imported `PageDescription` component, feeding it data extracted from the `docs` object. This displays the primary title and introductory text.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useCalendarState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n# useCalendarState\n\n<PageDescription>{docs.exports.useCalendarState.description}</PageDescription>\n```\n\n----------------------------------------\n\nTITLE: Custom Render Function with Provider Wrapper\nDESCRIPTION: Defines a custom render function that wraps components with a Provider, useful for setting up React Spectrum tests with necessary context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {RenderOptions as BaseRenderOptions, render} from '@testing-library/react';\nimport {Provider, defaultTheme} from '@adobe/react-spectrum';\nimport React, {ReactElement} from 'react';\n\n// export everything from React Testing Library\nexport * from '@testing-library/react';\n\nfunction ProviderWrapper(props) {\n  let {children, ...providerProps} = props;\n  return (\n    <Provider theme={defaultTheme} scale=\"medium\" {...providerProps}>\n      {props.children}\n    </Provider>\n  );\n}\n\ninterface RenderOptions extends BaseRenderOptions {\n  providerProps: Omit<ProviderProps, 'children'>\n}\n\nfunction customRender(ui: ReactElement, options?: RenderOptions) {\n  let rendered = render(ui, {wrapper: (props) => <ProviderWrapper {...props} {...options?.providerProps} />, ...options});\n  return {\n    ...rendered,\n    rerender: (ui, options) => providerWrapperRender(ui, {container: rendered.container, ...options})\n  };\n}\n\n// override render method\nexport {customRender as render};\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to React Aria Modal\nDESCRIPTION: Demonstrates how to assign a custom CSS class name to the `Modal` component using the `className` prop. This overrides the default `react-aria-Modal` class and allows for more specific or customized styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Modal className=\"my-modal\">\n  {/* ... */}\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only NumberField in TSX\nDESCRIPTION: Example showing how to create a read-only NumberField component using the isReadOnly prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<MyNumberField label=\"Read only\" isReadOnly value={32} />\n```\n\n----------------------------------------\n\nTITLE: Converting Time to DateTime Objects\nDESCRIPTION: Shows how to combine Time with CalendarDate and convert to different DateTime formats\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Time.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toCalendarDateTime, CalendarDate} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\nlet time = new Time(8, 30);\n\ntoCalendarDateTime(date, time); // 2022-02-03T08:30:00\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toZoned, toCalendarDateTime, CalendarDate} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\nlet time = new Time(8, 30);\n\nlet dateTime = toCalendarDateTime(date, time); // 2022-02-03T08:30:00\ntoZoned(dateTime, 'America/Los_Angeles'); // 2021-02-03T08:30-07:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Value in DatePicker\nDESCRIPTION: Configures a DatePicker with a custom placeholder value, which controls the default display and initial calendar view.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\n<DatePicker label=\"Birth date\" placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n\n----------------------------------------\n\nTITLE: Custom First Day of Week in DateRangePicker\nDESCRIPTION: Shows how to set a custom first day of the week in DateRangePicker calendar view.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" firstDayOfWeek=\"mon\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Link ListBox Items with CSS\nDESCRIPTION: This CSS snippet provides basic styling for `ListBoxItem` components that have an `href` attribute, turning them into clickable links. It removes the default text decoration, sets the cursor to a pointer, and disables the touch callout on WebKit browsers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[href] {\n  text-decoration: none;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Using A4U Packaged Custom Icons in React Spectrum\nDESCRIPTION: Shows how to directly use A4U packaged custom icons that are integrated with React Spectrum's Provider. This method works specifically with properly packaged A4U icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport CustomSVGComponent from 'path/to/custom-icons/CustomSVGComponent';\n\n<CustomSVGComponent />\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label Component in TimeField - React Spectrum (JSX)\nDESCRIPTION: Demonstrates how to use a custom label component, MyCustomLabel, as a child in TimeField. This pattern replaces the default label, enabling reuse of application-specific styles and behaviors while retaining accessibility. Supports further customization by combining with DateInput and DateSegment composition.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_29\n\nLANGUAGE: JSX\nCODE:\n```\n<TimeField>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/*- end highlight -*/}\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n</TimeField>\n```\n\n----------------------------------------\n\nTITLE: Styling HTML Elements with Spectrum Macros\nDESCRIPTION: Example of using style macro with HTML elements in React Spectrum, applying margin styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-esbuild-starter-app/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using MeterContext for Global Meter Formatting in React Aria\nDESCRIPTION: This snippet shows how to use MeterContext to set global formatting options for all nested Meter components, in this case setting a decimal style for the values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Meter.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MeterContext} from 'react-aria-components';\n\n<MeterContext.Provider value={{formatOptions: {style: 'decimal'}}}>\n  <MyMeter label=\"Widgets\" value={28.5} />\n  <MyMeter label=\"Cookies\" value={68.75} />\n</MeterContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Disabled ColorArea in React Spectrum\nDESCRIPTION: Shows how to disable a ColorArea component using the isDisabled prop, which prevents the thumb from being focused or dragged.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorArea defaultValue=\"#ff0\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Providing Contextual Help to ColorField Label React Spectrum TypeScript\nDESCRIPTION: Integrates ContextualHelp from @adobe/react-spectrum next to the ColorField label, displaying extra information on demand. Utilizes Content and Heading for rich contextual information about the field, improving user comprehension. Useful for complex or critical color selections in UIs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\\n\\n<ColorField\\n  label=\\\"Accent Color\\\"\\n  defaultValue=\\\"#e73623\\\"\\n  contextualHelp={\\n    <ContextualHelp>\\n      <Heading>What is an accent color?</Heading>\\n      <Content>An accent color is the primary foreground color for your theme, used across all components.</Content>\\n    </ContextualHelp>\\n  } />\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled DefaultValue in MyTextField - React Aria - TypeScript/TSX\nDESCRIPTION: Shows how to provide an initial value for an uncontrolled MyTextField instance using defaultValue. No React state is required. Requires the custom MyTextField component as defined previously. The 'label' and 'defaultValue' props are supplied.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n<MyTextField\\n  label=\"Email\"\\n  defaultValue=\"me@email.com\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages in TagGroup with React Spectrum\nDESCRIPTION: Example showing how to use the errorMessage prop in TagGroup to help users fix validation errors, providing feedback when the selected tags don't meet required criteria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tag/docs/useTagGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup label=\"Categories\" errorMessage=\"Invalid set of categories.\">\n  <Item key=\"news\">News</Item>\n  <Item key=\"travel\">Travel</Item>\n  <Item key=\"gaming\">Gaming</Item>\n  <Item key=\"shopping\">Shopping</Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Grid Layout for Card Component\nDESCRIPTION: Defines the CSS Grid layout for a Card component, specifying grid areas and styles for different elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-slots.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.spectrum-Card {\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  background: white;\n}\n\n.container {\n  display: grid;\n  grid-template-columns: 14px auto 1fr 1fr 14px;\n  grid-template-rows: auto 32px 16px minmax(30px, auto) auto auto 10px;\n  grid-template-areas:\n    \"preview preview    preview  preview   preview\"\n    \".       avatar     .        .         .\"\n    \".       avatar     .        .         .\"\n    \".       title      title    title     .\"\n    \".       body       body     body      .\"\n    \".       divider    divider  divider   .\"\n    \".       footer     footer   footer    .\"\n    \".       .          .        .         .\";\n}\n\n.preview {\n  grid-area: preview-start / preview-start / span 2 /preview-end;\n  height: 200px;\n}\n\n.avatar {\n  grid-area: avatar;\n  z-index: 1;\n  height: 48px;\n  width: 48px;\n}\n\n.title {\n  grid-area: title;\n}\n\n.body {\n  grid-area: body;\n}\n\n.divider {\n  grid-area: divider;\n}\n\n.footer {\n  grid-area: footer;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing for Custom Calendar Implementation - @internationalized/date - TypeScript\nDESCRIPTION: Imports necessary types and utilities for constructing a custom calendar system compatible with RangeCalendar. AnyCalendarDate is used for calendar date typing, while CalendarDate, startOfWeek, and toCalendar are helpers for date arithmetic and conversion. Required when extending calendar logic. Dependencies: @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AnyCalendarDate} from '@internationalized/date';\\nimport {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Runs the React application in development mode on localhost:3000 with hot reload functionality and error reporting.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/rsp-cra-18/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Styling the Drop Indicator Component (css)\nDESCRIPTION: CSS rules for the `.drop-indicator` class. It styles the indicator as a thin horizontal line and provides specific styling (`.drop-target`) for when it's the active drop location, using a variable (`--blue`) for the background color. Adjustments are made for the last indicator's margin.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.drop-indicator {\n  width: 100%;\n  margin-left: 0;\n  height: 2px;\n  margin-bottom: -2px;\n  outline: none;\n  background: transparent;\n}\n\n.drop-indicator:last-child {\n  margin-bottom: 0;\n  margin-top: -2px;\n}\n\n.drop-indicator.drop-target {\n  background: var(--blue);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Overlay State Animations with Tailwind CSS Utilities - JSX\nDESCRIPTION: This JSX snippet demonstrates how to use Tailwind CSS utility classes with the tailwindcss-animate plugin for animating the entry and exit of a Popover. The className attribute leverages data attribute selectors, applying fade-in and fade-out effects automatically as component state changes. Requires Tailwind CSS and the tailwindcss-animate plugin installed and configured. The main input is the Popover's open/close state; applies standard animation variants for smooth transitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover className=\"data-[entering]:animate-in data-[entering]:fade-in data-[exiting]:animate-out data-[exiting]:fade-out\">\n  {/* ... */}\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipable Email List with React Aria Components and Framer Motion\nDESCRIPTION: Creates a swipable email list component using React Aria Components for accessibility and Framer Motion for animations. Features include item selection, deletion, and edit mode toggling. The component manages its own state and handles the UI for email items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ios-list.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, GridListItem, GridList } from \"react-aria-components\";\nimport type {Selection, SelectionMode} from 'react-aria-components';\nimport {\n  motion,\n  animate,\n  AnimatePresence,\n  useMotionValue,\n  useIsPresent,\n  useMotionTemplate,\n  useMotionValueEvent\n} from \"framer-motion\";\nimport { useRef, useState } from \"react\";\nimport type {CSSProperties} from 'react';\n\nconst MotionItem = motion(GridListItem);\nconst inertiaTransition = {\n  type: \"inertia\" as const,\n  bounceStiffness: 300,\n  bounceDamping: 40,\n  timeConstant: 300\n};\n\nfunction SwipableList() {\n  let [items, setItems] = useState(messages.emails);\n  let [selectedKeys, setSelectedKeys] = useState<Selection>(new Set());\n  let [selectionMode, setSelectionMode] = useState<SelectionMode>(\"none\");\n  let onDelete = () => {\n    setItems(items.filter((i) => selectedKeys !== 'all' && !selectedKeys.has(i.id)));\n    setSelectedKeys(new Set());\n    setSelectionMode(\"none\");\n  };\n\n  return (\n    <div className=\"flex flex-col h-full max-h-[500px] sm:w-[400px] -mx-[14px] sm:mx-0\">\n      {/* Toolbar */}\n      <div className=\"flex pb-4 justify-between\">\n        <Button\n          className=\"text-blue-600 text-lg outline-hidden bg-transparent border-none transition pressed:text-blue-700 focus-visible:ring-3 disabled:text-gray-400\"\n          style={{ opacity: selectionMode === \"none\" ? 0 : 1 }}\n          isDisabled={selectedKeys !== 'all' && selectedKeys.size === 0}\n          onPress={onDelete}\n        >\n          Delete\n        </Button>\n        <Button\n          className=\"text-blue-600 text-lg outline-hidden bg-transparent border-none transition pressed:text-blue-700 focus-visible:ring-3\"\n          onPress={() => {\n            setSelectionMode((m) => (m === \"none\" ? \"multiple\" : \"none\"));\n            setSelectedKeys(new Set());\n          }}\n        >\n          {selectionMode === \"none\" ? \"Edit\" : \"Cancel\"}\n        </Button>\n      </div>\n      <GridList\n        className=\"relative flex-1 overflow-auto\"\n        aria-label=\"Inbox\"\n        onAction={selectionMode === \"none\" ? () => {} : undefined}\n        selectionMode={selectionMode}\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <AnimatePresence>\n          {items.map((item) => (\n            <ListItem\n              key={item.id}\n              id={item.id}\n              textValue={[item.sender, item.date, item.subject, item.message].join('\\n')}\n              onRemove={() => setItems(items.filter((i) => i !== item))}\n            >\n              <div className=\"flex flex-col text-md cursor-default\">\n                <div className=\"flex justify-between\">\n                  <p className=\"font-bold text-lg m-0\">{item.sender}</p>\n                  <p className=\"text-gray-500 m-0\">{item.date}</p>\n                </div>\n                <p className=\"m-0\">{item.subject}</p>\n                <p className=\"line-clamp-2 text-gray-500 dark:text-gray-400 m-0\">{item.message}</p>\n              </div>\n            </ListItem>\n          ))}\n        </AnimatePresence>\n      </GridList>\n    </div>\n  );\n}\n\nfunction ListItem({ id, children, textValue, onRemove }) {\n  let ref = useRef(null);\n  let x = useMotionValue(0);\n  let isPresent = useIsPresent();\n  let xPx = useMotionTemplate`${x}px`;\n\n  // Align the text in the remove button to the left if the\n  // user has swiped at least 80% of the width.\n  let [align, setAlign] = useState(\"end\");\n  useMotionValueEvent(x, \"change\", (x) => {\n    let a = x < -ref.current?.offsetWidth * 0.8 ? \"start\" : \"end\";\n    setAlign(a);\n  });\n\n  return (\n    <MotionItem\n      id={id}\n      textValue={textValue}\n      className=\"outline-hidden group relative overflow-clip border-t border-0 border-solid last:border-b border-gray-200 dark:border-gray-800 pressed:bg-gray-200 dark:pressed:bg-gray-800 selected:bg-gray-200 dark:selected:bg-gray-800 focus-visible:outline focus-visible:outline-blue-600 focus-visible:-outline-offset-2\"\n      layout\n      transition={{ duration: 0.25 }}\n      exit={{ opacity: 0 }}\n```\n\n----------------------------------------\n\nTITLE: Get Weeks in Month with Locale Support in TypeScript/React\nDESCRIPTION: Demonstrates how to calculate the number of weeks in a month, which varies based on the locale's first day of week.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getWeeksInMonth} from '@internationalized/date';\n\nlet date = parseZonedDateTime('2023-01-01T08:30[America/Los_Angeles]');\n\ngetWeeksInMonth(date, 'en-US'); // 5\ngetWeeksInMonth(date, 'fr-FR'); // 6\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorField with HTML Forms React Spectrum TypeScript\nDESCRIPTION: Shows how to use the 'name' prop for HTML form integration. When inside a form and submitted, the field's value is sent as a hex string. If a 'channel' prop is given, the value will be sent as a numeric value instead. Useful for submitting color data to a backend endpoint.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorField label=\\\"Color\\\" name=\\\"color\\\" />\n```\n\n----------------------------------------\n\nTITLE: Styling a ProgressBar with CSS\nDESCRIPTION: This CSS snippet provides styling for the ProgressBar component, including layout, colors, and dimensions for the bar and fill elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ProgressBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-ProgressBar {\n  display: grid;\n  grid-template-areas: \"label value\"\n                       \"bar bar\";\n  grid-template-columns: 1fr auto;\n  gap: 4px;\n  width: 250px;\n  color: var(--text-color);\n\n  .value {\n    grid-area: value;\n  }\n\n  .bar {\n    grid-area: bar;\n    box-shadow: inset 0px 0px 0px 1px var(--border-color);\n    forced-color-adjust: none;\n    height: 10px;\n    border-radius: 5px;\n    overflow: hidden;\n    will-change: transform;\n  }\n\n  .fill {\n    background: var(--highlight-background);\n    height: 100%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Video Assets and Doc Components in JavaScript/JSX\nDESCRIPTION: Imports MP4 video assets using URL loaders (`url:`) and necessary layout/component elements (BlogPostLayout, Video) from the '@react-spectrum/docs' package for use within the blog post component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-2.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport hoverVideoUrl from 'url:../assets/button-hover.mp4';\nimport hoveriPadVideoUrl from 'url:../assets/button-hover-ipad.mp4';\n\nimport {BlogPostLayout, Video} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Importing TextField Component in React\nDESCRIPTION: This snippet shows how to import the TextField component from the @react-spectrum/textfield package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {TextField} from '@react-spectrum/textfield';\n```\n\n----------------------------------------\n\nTITLE: Styling FieldError within React Aria CheckboxGroup (CSS)\nDESCRIPTION: This CSS snippet targets the `FieldError` component nested within a `CheckboxGroup` using class selectors (`.react-aria-CheckboxGroup .react-aria-FieldError`). It applies specific styles like font size and color to the error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-CheckboxGroup {\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled SearchField in React\nDESCRIPTION: This example demonstrates how to create a disabled SearchField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchField label=\"Search\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Basic ColorSwatch Component Usage in React\nDESCRIPTION: Simple example of using the ColorSwatch component to display a red color.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatch} from 'react-aria-components';\n\n<ColorSwatch color=\"#f00\" />\n```\n\n----------------------------------------\n\nTITLE: Synchronizing ColorSwatch with a ColorSlider using HSL Parsing - TypeScript/JSX\nDESCRIPTION: This snippet demonstrates interactive usage of ColorSwatch together with ColorSlider. It uses parseColor from @react-spectrum/color to initialize a color in HSL space, storing the color in the React state. ColorSlider updates the color's 'hue' channel, and the current color value is previewed by ColorSwatch. Required dependencies: @react-spectrum/color, React useState, parseColor, ColorSlider, and Flex for layout. The key inputs are HSL color strings and user Slider changes; output is an updated swatch matching the selected hue. Limitations: Only the 'hue' channel is adjustable in this example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor, ColorSlider} from '@react-spectrum/color';\\n\\nfunction Example() {\\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));\\n  return (\\n    <Flex direction=\\\"column\\\" gap=\\\"size-100\\\">\\n      <ColorSlider value={color} onChange={setColor} channel=\\\"hue\\\" />\\n      <ColorSwatch color={color} />\\n    </Flex>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook Description using PageDescription Component in MDX\nDESCRIPTION: Uses the imported `PageDescription` React component to display the description text for the `useDateRangePickerState` hook. The description content itself is sourced dynamically from the imported `docs` object (`docs.exports.useDateRangePickerState.description`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<PageDescription>{docs.exports.useDateRangePickerState.description}</PageDescription>\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar System Table in React\nDESCRIPTION: A React component that renders a table displaying different calendar system implementations with their class names, identifiers, and descriptions. The table uses Spectrum CSS classes for styling and includes TypeLink components for type references.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Calendar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<table className={`${tableStyles['spectrum-Table']} ${tableStyles['spectrum-Table--quiet']} ${styles.propTable}`}>\n  <thead>\n    <tr>\n      <th className={tableStyles['spectrum-Table-headCell']}>Class</th>\n      <th className={tableStyles['spectrum-Table-headCell']}>Identifier</th>\n      <th className={tableStyles['spectrum-Table-headCell']}>Description</th>\n    </tr>\n  </thead>\n  <tbody className={tableStyles['spectrum-Table-body']}>\n    <tr className={tableStyles['spectrum-Table-row']}>\n      <td className={tableStyles['spectrum-Table-cell']}><TypeLink links={docs.links} type={docs.exports.GregorianCalendar} /></td>\n      <td className={tableStyles['spectrum-Table-cell']}>\n        <code className={typographyStyles['spectrum-Code4']}>\n          <span className=\"token hljs-string\">'gregory'</span>\n        </code>\n      </td>\n      <td className={tableStyles['spectrum-Table-cell']}>{docs.exports.GregorianCalendar.description}</td>\n    </tr>\n    <!-- Additional calendar system rows follow the same pattern -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Handling Text Drop Data in GridList with React\nDESCRIPTION: This code demonstrates how to handle text drop data in a GridList using the acceptedDragTypes prop. It filters for a custom app-specific type and processes the dropped items into the component state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isTextDropItem} from 'react-aria-components';\n\ninterface TextItem {\n  id: string,\n  name: string,\n  style: string\n}\n\nfunction DroppableGridList() {\n  let [items, setItems] = React.useState<TextItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    acceptedDragTypes: ['custom-app-type'],\n    async onRootDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(isTextDropItem)\n          .map(async item => JSON.parse(await item.getText('custom-app-type')))\n      );\n      setItems(items);\n    }\n  });\n\n  return (\n    <MyGridList aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop items here\"}>\n      {item => <MyItem textValue={item.name}>{React.createElement(item.style || 'span', null, item.name)}</MyItem>}\n    </MyGridList>\n  );\n}\n\n<div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n  {/* see above */}\n  <DraggableGridList />\n  <DroppableGridList />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar and Flex Components in JSX\nDESCRIPTION: This snippet shows how to import the `Avatar` component from `@react-spectrum/avatar` and the `Flex` component from `@react-spectrum/layout`. These imports are typically required for using and arranging avatars within a React Spectrum application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/avatar/docs/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Avatar} from '@react-spectrum/avatar';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Using the ColorField Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'ColorField' component. It renders an input field allowing users to edit a hex color value or individual color channel values. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorField />\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Months in RangeCalendar (TSX)\nDESCRIPTION: This example shows how to display multiple months in a RangeCalendar using the visibleMonths prop. It displays 3 months at a time.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <RangeCalendar aria-label=\"Trip dates\" visibleMonths={3} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering the Composite Drag-and-Drop ListView Example in React Spectrum (TypeScript)\nDESCRIPTION: This snippet renders the DragIntoList React component, which stitches together the DraggableListView and DroppableListView into a live demo. It is dependent on the preceding definitions of DragIntoList and its child components. The only input is the instantiation of the <DragIntoList /> component, and the resulting output is a user interface for dragging items between two lists. There are no external parameters required, and it serves as the example entry-point for the basic drag-and-drop ListView functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<DragIntoList />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v4 with React Aria Components Plugin (css)\nDESCRIPTION: This CSS code shows how to configure Tailwind CSS v4 by importing the base Tailwind styles and adding the `tailwindcss-react-aria-components` plugin using the `@plugin` directive. This plugin provides necessary styles and utilities for styling React Aria Components with Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/category-tabs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Disclosure with Interactive Elements\nDESCRIPTION: Example of a Disclosure component with additional interactive elements placed alongside the disclosure heading.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Disclosure.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Disclosure>\n  <div style={{display: 'flex', alignItems: 'center'}}>\n    <Heading>\n      <Button slot=\"trigger\">\n        <svg viewBox=\"0 0 24 24\">\n          <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n        </svg>\n        System Requirements\n      </Button>\n    </Heading>\n    <Button>Click me</Button>\n  </div>\n  <DisclosurePanel>\n    <p>Details about system requirements here.</p>\n  </DisclosurePanel>\n</Disclosure>\n```\n\n----------------------------------------\n\nTITLE: Querying Elements by Role in React Testing Library\nDESCRIPTION: Demonstrates how to use React Testing Library to query elements by their ARIA role, which is a recommended approach for testing React Aria Components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/testing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {render} from '@testing-library/react';\n\nlet tree = render(<MyComponent />);\nlet option = tree.getByRole('button');\n```\n\n----------------------------------------\n\nTITLE: Disabled Calendar Implementation\nDESCRIPTION: Shows how to create a disabled Calendar component using the isDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar aria-label=\"Event date\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Importing Button and Dependencies in Spectrum React (JSX)\nDESCRIPTION: This snippet shows how to import the Button component and related dependencies such as icons and layout primitives from the Spectrum library for use in React projects. It requires the respective Spectrum packages installed via npm. These imports are foundational for all the button examples and ensure consistent theme usage throughout the application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Button} from '@react-spectrum/button';\\nimport Bell from '@spectrum-icons/workflow/Bell';\\nimport {View} from '@react-spectrum/view';\\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Button Component with useButton in React (TSX)\nDESCRIPTION: This snippet defines a basic, reusable `Button` component leveraging the `useButton` hook from `@react-aria/button`. It takes standard button props, obtains accessibility attributes and event handlers from the `useButton` hook using a ref, and applies them to a native HTML `<button>` element, ensuring proper accessibility and interaction handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom ClassNames to ColorArea Components\nDESCRIPTION: Example of overriding the default className of a ColorArea component with a custom class for styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorArea className=\"my-color-area\">\n  {/* ... */}\n</ColorArea>\n```\n\n----------------------------------------\n\nTITLE: TextField Description Styling - CSS\nDESCRIPTION: CSS selector for styling the description (help text) slot of .react-aria-TextField, reducing font size for subtle appearance. Expects usage of [slot=description] for placement.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-TextField {\\n  [slot=description] {\\n    font-size: 12px;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Events and Formatting in React\nDESCRIPTION: This snippet shows how to handle calendar events and format selected dates using the useDateFormatter hook and the getLocalTimeZone function from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('2022-07-04'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <Calendar aria-label=\"Event date\" value={date} onChange={setDate} />\n      <p>Selected date: {formatter.format(date.toDate(getLocalTimeZone()))}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DateSegment Wrapper Component in TSX\nDESCRIPTION: This snippet shows how to create a simple wrapper component `MyDateSegment` in TypeScript/React. It forwards all received props (`{...props}`) to the underlying `DateSegment` while adding a custom `className` (\"my-date-segment\") for specific styling or behavior overrides. This composition pattern allows for targeted customization without modifying the original component directly.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nfunction MyDateSegment(props) {\n  return <MyDateSegment {...props} className=\"my-date-segment\" />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: List of Released Adobe React Spectrum Packages and Versions (Plaintext)\nDESCRIPTION: A list of released npm packages belonging to the Adobe React Spectrum ecosystem, including core libraries like react-spectrum, react-aria, and react-stately, along with various component, utility, and icon packages. Each line specifies the package name and its corresponding released version.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-10-01.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n - @adobe/react-spectrum@3.4.0\n - react-aria@3.0.0\n - react-stately@3.0.0\n - @react-aria/actiongroup@3.1.1\n - @react-aria/aria-modal-polyfill@3.2.1\n - @react-aria/breadcrumbs@3.1.1\n - @react-aria/button@3.2.2\n - @react-aria/checkbox@3.2.1\n - @react-aria/dialog@3.1.2\n - @react-aria/focus@3.2.2\n - @react-aria/i18n@3.1.2\n - @react-aria/interactions@3.2.1\n - @react-aria/label@3.1.1\n - @react-aria/link@3.1.2\n - @react-aria/listbox@3.2.1\n - @react-aria/menu@3.1.2\n - @react-aria/meter@3.1.1\n - @react-aria/overlays@3.4.0\n - @react-aria/progress@3.1.1\n - @react-aria/radio@3.1.2\n - @react-aria/searchfield@3.1.1\n - @react-aria/select@3.2.1\n - @react-aria/selection@3.2.1\n - @react-aria/separator@3.1.1\n - @react-aria/slider@3.0.0-alpha.2\n - @react-aria/ssr@3.0.1\n - @react-aria/switch@3.1.1\n - @react-aria/table@3.0.0-alpha.7\n - @react-aria/tabs@3.0.0-alpha.1\n - @react-aria/textfield@3.2.1\n - @react-aria/toggle@3.1.1\n - @react-aria/tooltip@3.0.0\n - @react-aria/utils@3.3.0\n - @react-aria/virtualizer@3.2.0\n - @react-aria/visually-hidden@3.2.1\n - @react-spectrum/actiongroup@3.1.1\n - @react-spectrum/breadcrumbs@3.1.3\n - @react-spectrum/button@3.2.1\n - @react-spectrum/buttongroup@3.1.2\n - @react-spectrum/checkbox@3.2.1\n - @react-spectrum/dialog@3.3.0\n - @react-spectrum/divider@3.1.1\n - @react-spectrum/form@3.2.1\n - @react-spectrum/icon@3.2.0\n - @react-spectrum/illustratedmessage@3.1.1\n - @react-spectrum/image@3.1.1\n - @react-spectrum/label@3.2.1\n - @react-spectrum/layout@3.1.3\n - @react-spectrum/link@3.1.1\n - @react-spectrum/listbox@3.2.1\n - @react-spectrum/menu@3.2.1\n - @react-spectrum/meter@3.1.1\n - @react-spectrum/overlays@3.2.2\n - @react-spectrum/picker@3.2.1\n - @react-spectrum/progress@3.1.1\n - @react-spectrum/provider@3.1.2\n - @react-spectrum/radio@3.1.1\n - @react-spectrum/searchfield@3.1.1\n - @react-spectrum/statuslight@3.1.1\n - @react-spectrum/switch@3.1.1\n - @react-spectrum/table@3.0.0-alpha.7\n - @react-spectrum/tabs@3.0.0-alpha.2\n - @react-spectrum/text@3.1.1\n - @react-spectrum/textfield@3.1.3\n - @react-spectrum/theme-light@3.0.0\n - @react-spectrum/tooltip@3.0.0\n - @react-spectrum/utils@3.3.0\n - @react-spectrum/view@3.1.1\n - @react-spectrum/well@3.1.1\n - @react-stately/checkbox@3.0.1\n - @react-stately/collections@3.2.1\n - @react-stately/data@3.1.1\n - @react-stately/layout@3.1.2\n - @react-stately/list@3.2.1\n - @react-stately/menu@3.2.1\n - @react-stately/overlays@3.1.1\n - @react-stately/radio@3.2.1\n - @react-stately/searchfield@3.1.1\n - @react-stately/select@3.1.1\n - @react-stately/selection@3.2.1\n - @react-stately/slider@3.0.0-alpha.2\n - @react-stately/table@3.0.0-alpha.6\n - @react-stately/toggle@3.2.1\n - @react-stately/tooltip@3.0.0\n - @react-stately/tree@3.1.2\n - @react-stately/utils@3.1.1\n - @react-stately/virtualizer@3.1.2\n - @react-types/actiongroup@3.1.1\n - @react-types/breadcrumbs@3.1.1\n - @react-types/button@3.2.1\n - @react-types/buttongroup@3.1.1\n - @react-types/checkbox@3.2.1\n - @react-types/dialog@3.3.0\n - @react-types/divider@3.1.1\n - @react-types/form@3.2.1\n - @react-types/illustratedmessage@3.1.1\n - @react-types/image@3.1.1\n - @react-types/label@3.2.1\n - @react-types/layout@3.1.1\n - @react-types/link@3.1.1\n - @react-types/listbox@3.1.1\n - @react-types/menu@3.1.1\n - @react-types/meter@3.1.1\n - @react-types/overlays@3.2.1\n - @react-types/progress@3.1.1\n - @react-types/provider@3.1.1\n - @react-types/radio@3.1.1\n - @react-types/searchfield@3.1.1\n - @react-types/select@3.1.1\n - @react-types/shared@3.2.1\n - @react-types/slider@3.0.0-alpha.1\n - @react-types/statuslight@3.1.1\n - @react-types/switch@3.1.1\n - @react-types/table@3.0.0-rc.5\n - @react-types/tabs@3.0.0-alpha.1\n - @react-types/text@3.1.1\n - @react-types/textfield@3.2.1\n - @react-types/tooltip@3.0.0\n - @react-types/view@3.1.1\n - @react-types/well@3.1.1\n - @spectrum-icons/color@3.2.0\n - @spectrum-icons/illustrations@3.2.0\n - @spectrum-icons/ui@3.2.0\n - @spectrum-icons/workflow@3.2.0\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Switch Package in Markdown\nDESCRIPTION: This code snippet shows how to reference the @react-spectrum/switch package in a Markdown file. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/switch\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v3 for React Aria Components\nDESCRIPTION: Shows how to configure Tailwind v3 by adding required plugins to the tailwind.config.js file, necessary for React Aria Components and animations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/notifications-popover.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria I18n Package in Markdown\nDESCRIPTION: This code snippet shows how to reference the @react-aria/i18n package using Markdown syntax. It's a simple inline code block that identifies the package name.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@react-aria/i18n`\n```\n\n----------------------------------------\n\nTITLE: LabeledValue with Component Value\nDESCRIPTION: Example showing how to use a React component as a value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/labeledvalue/docs/LabeledValue.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Link} from '@adobe/react-spectrum';\n\n<LabeledValue label=\"Website\" value={<Link href=\"https://www.adobe.com/\">Adobe.com</Link>} />\n```\n\n----------------------------------------\n\nTITLE: Linking to Example Usage in Markdown\nDESCRIPTION: This Markdown snippet provides a link to a related documentation page (`useCalendar` in `react-aria`) which contains examples demonstrating how to use the `useCalendarState` hook. It serves as a pointer to practical implementation guidance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useCalendarState.mdx#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## Example\n\nSee the docs for [useCalendar](/react-aria/useCalendar.html) in react-aria for an example of `useCalendarState`.\n```\n\n----------------------------------------\n\nTITLE: Importing Button Styles with CSS @import (CSS)\nDESCRIPTION: Demonstrates how to import external button styles using the CSS @import rule. This import statement assumes a module system that allows CSS files to reference each other, and is intended to be placed at the top of a CSS file to layer in button styles from './Button.mdx'. The code may depend on build tooling that supports CSS layering and file resolution.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\\n\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout for Documentation Rendering - React (JavaScript)\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the '@react-spectrum/docs' package and sets BlogPostLayout as the default export. The primary purpose is to structure the documentation page rendering logic in a React-based documentation system. Dependencies include the '@react-spectrum/docs' package and a compatible JavaScript/React runtime environment; there are no function parameters or external inputs or outputs, as this code serves as a module boundary for the documentation layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-08-09.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring HSL Color Model with ColorArea - React Spectrum - TypeScript/React\nDESCRIPTION: Shows how to use the HSL color model with ColorArea and ColorSlider in React Spectrum, using state hooks for color management. Uses '@react-stately/color' and React, and demonstrates interactive adjustment of hue, saturation, and lightness with localization of channel names. Outputs the current value visually and as a string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\\n\\nfunction Example() {\\n  let [\\n    color,\\n    setColor\\n  ] = React.useState(parseColor('hsl(219, 79%, 66%)'));\\n  let [\\n    hChannel,\\n    sChannel,\\n    lChannel\\n  ] = color.getColorChannels();\\n  return (\\n    <>\\n      <div style={{display: 'inline-flex', flexWrap: 'wrap'}}>\\n        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>\\n          <label id=\\\"slh-label-id-1\\\">x: {color.getChannelName(sChannel, 'en-US')}, y: {color.getChannelName(lChannel, 'en-US')}</label>\\n          <ColorArea\\n            aria-labelledby=\\\"slh-label-id-1\\\"\\n            value={color}\\n            onChange={setColor}\\n            xChannel={sChannel}\\n            yChannel={lChannel} />\\n          <ColorSlider\\n              channel={hChannel}\\n              value={color}\\n              onChange={setColor} />\\n        </div>\\n        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>\\n          <label id=\\\"lhs-label-id-1\\\">x: {color.getChannelName(hChannel, 'en-US')}, y: {color.getChannelName(lChannel, 'en-US')}</label>\\n          <ColorArea\\n            aria-labelledby=\\\"lhs-label-id-1\\\"\\n            value={color}\\n            onChange={setColor}\\n            xChannel={hChannel}\\n            yChannel={lChannel} />\\n          <ColorSlider\\n              channel={sChannel}\\n              value={color}\\n              onChange={setColor} />\\n        </div>\\n        <div style={{marginRight: '2rem', marginBottom: '2rem'}}>\\n          <label id=\\\"hsl-label-id-1\\\">x: {color.getChannelName(hChannel, 'en-US')}, y: {color.getChannelName(sChannel, 'en-US')}</label>\\n          <ColorArea\\n            aria-labelledby=\\\"hsl-label-id-1\\\"\\n            value={color}\\n            onChange={setColor}\\n            xChannel={hChannel}\\n            yChannel={sChannel} />\\n          <ColorSlider\\n              channel={lChannel}\\n              value={color}\\n              onChange={setColor} />\\n        </div>\\n      </div>\\n      <p>Current HSL color value: <ColorSwatch color={color} aria-hidden=\\\"true\\\" style={{width: '16px', height: '16px', verticalAlign: 'text-bottom'}} /> {color.toString('hsl')}</p>\\n    </>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Components\nDESCRIPTION: Basic imports required for using the DropZone component and related utilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dropzone/docs/DropZone.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {DropZone} from '@react-spectrum/dropzone';\nimport {Heading} from '@react-spectrum/text';\nimport {Content} from '@react-spectrum/view';\nimport {IllustratedMessage} from '@react-spectrum/illustratedmessage';\nimport {Button} from '@react-spectrum/button';\n```\n\n----------------------------------------\n\nTITLE: DateField with International Calendar Support\nDESCRIPTION: Example showing DateField usage with Indian calendar system and Hindi language\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {I18nProvider} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(null);\n  return (\n    <I18nProvider locale=\"hi-IN-u-ca-indian\">\n      <DateField label=\"Date\" value={date} onChange={setDate} />\n      <p>Selected date: {date?.toString()}</p>\n    </I18nProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for TimeField Component\nDESCRIPTION: CSS styles for the TimeField component that define the layout, appearance, and focus states of the time field and its segments.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.field {\n  display: inline-flex;\n  padding: 2px 4px;\n  border-radius: 2px;\n  border: 1px solid var(--gray);\n  background: var(--spectrum-global-color-gray-50);\n}\n\n.field:focus-within {\n  border-color: var(--blue);\n}\n\n.segment {\n  padding: 0 2px;\n  font-variant-numeric: tabular-nums;\n  text-align: end;\n}\n\n.segment.placeholder {\n  color: var(--spectrum-gray-600);\n}\n\n.segment:focus {\n  color: white;\n  background: var(--blue);\n  outline: none;\n  border-radius: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: ColorSwatch with ColorSlider Integration\nDESCRIPTION: Example showing how to use ColorSwatch with ColorSlider to display a preview of the selected color.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor, ColorSlider, SliderTrack, ColorThumb} from 'react-aria-components';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', gap: 8}}>\n      <ColorSlider value={color} onChange={setColor} channel=\"hue\">\n        <SliderTrack>\n          <ColorThumb />\n        </SliderTrack>\n      </ColorSlider>\n      <MyColorSwatch color={color} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting CalendarDate to CalendarDateTime in TypeScript\nDESCRIPTION: Shows how to convert a CalendarDate to a CalendarDateTime using the toCalendarDateTime function. It allows setting a specific time or defaulting to midnight.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toCalendarDateTime, Time} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\n\ntoCalendarDateTime(date); // 2022-02-03T00:00:00\ntoCalendarDateTime(date, new Time(8, 30)); // 2022-02-03T08:30:00\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for useDisclosureState Documentation (YAML)\nDESCRIPTION: This YAML frontmatter block sets metadata for the documentation page. It categorizes the page under \"Navigation\" and provides keywords \"disclosure\" and \"state\" for searchability and organization within the documentation system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/disclosure/docs/useDisclosureState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncategory: Navigation\nkeywords: [disclosure, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Popover Triggers Using Pressable in React Spectrum with TypeScript\nDESCRIPTION: Demonstrates how to use custom pressable elements as popover triggers by wrapping them with the Pressable component from react-aria-components. The trigger element must have an interactive ARIA role, and passes props and refs appropriately. Suitable for non-standard, third-party, or plain DOM elements as triggers. Inputs are custom triggers wrapped in <Pressable>; output is a popover that responds to custom activation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Pressable} from 'react-aria-components';\\n\\n<DialogTrigger>\\n  {/*- begin highlight -*/}\\n  <Pressable>\\n    <span role=\\\"button\\\">Custom trigger</span>\\n  </Pressable>\\n  {/*- end highlight -*/}\\n  <MyPopover>\\n    <Heading slot=\\\"title\\\">Dialog</Heading>\\n    <p>This popover was triggered by a custom button.</p>\\n  </MyPopover>\\n</DialogTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Dialog Example\nDESCRIPTION: Implements a fullscreen dialog variant for complex workflows that don't fit in standard modal sizes while still showing a portion of the background.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"fullscreen\">\n  <ActionButton>See Details</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Package details</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sit amet tristique risus. In sit amet suscipit lorem. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In condimentum imperdiet metus non condimentum. Duis eu velit et quam accumsan tempus at id velit. Duis elementum elementum purus, id tempus mauris posuere a. Nunc vestibulum sapien pellentesque lectus commodo ornare.\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Buy</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Button Component with useButton\nDESCRIPTION: Implementation of a reusable Button component using React Aria's useButton hook. This button can be used across various components including the DateRangePicker to trigger the calendar popover.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Popover Container Padding in React Spectrum with TypeScript\nDESCRIPTION: Shows how to use the containerPadding prop with the Popover component to enforce a minimum distance (50px) between the edge of the popover and the browser window or surrounding container. This alters positioning breakpoints and influences flip behavior. Needs React, DialogTrigger, Button, and MyPopover components. The main parameter is containerPadding, and the output is a popover that never gets closer than 50px to the container edge.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\\n  <Button>Container padding</Button>\\n  <MyPopover placement=\\\"top\\\" containerPadding={50}>\\n    This is a popover.\\n  </MyPopover>\\n</DialogTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: LabeledValue with Custom Label Positioning\nDESCRIPTION: Example showing custom label positioning and alignment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/labeledvalue/docs/LabeledValue.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<LabeledValue label=\"File name\" value=\"Onboarding.pdf\" labelPosition=\"side\" labelAlign=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: Basic DateRangePicker Implementation\nDESCRIPTION: Demonstrates a basic implementation of the DateRangePicker component with a label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" />\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for React Aria Components in v4\nDESCRIPTION: Shows how to import the tailwindcss-react-aria-components plugin for Tailwind CSS v4 using the @plugin directive.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/wifi-switch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Converting CalendarDate to ISO 8601 String\nDESCRIPTION: Demonstrates how to convert a CalendarDate object to an ISO 8601 formatted string using the toString method.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new CalendarDate(2022, 2, 3);\ndate.toString(); // '2022-02-03'\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Data and Rendering Components in JavaScript\nDESCRIPTION: Imports pre-generated documentation data (`docs`) for the datepicker stately package, specific rendering components (`ClassAPI`, `HeaderInfo`, `TypeContext`, `FunctionAPI`, `TypeLink`, `PageDescription`) from `@react-spectrum/docs`, and package metadata (`packageData`) from `@react-stately/datepicker/package.json`. These imports are used to construct the documentation page content dynamically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/datepicker';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/datepicker/package.json';\n```\n\n----------------------------------------\n\nTITLE: Styling Clipboard-Enabled Components with CSS\nDESCRIPTION: CSS styles for the clipboard-enabled textbox components, providing visual cues for focus states and styling for keyboard shortcut indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useClipboard.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[role=textbox] {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  background: var(--spectrum-global-color-gray-50);\n  border: 1px solid var(--spectrum-global-color-gray-400);\n  padding: 10px;\n  margin-right: 20px;\n  border-radius: 8px;\n}\n\n[role=textbox]:focus {\n  outline: none;\n  border-color: var(--blue);\n  box-shadow: 0 0 0 1px var(--blue);\n}\n\n[role=textbox] kbd {\n  display: inline-block;\n  margin-left: 10px;\n  padding: 0 4px;\n  background: var(--spectrum-global-color-gray-100);\n  border: 1px solid var(--spectrum-global-color-gray-300);\n  border-radius: 4px;\n  font-size: small;\n  letter-spacing: .2em;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic IllustratedMessage Example with NotFound Icon\nDESCRIPTION: A simple example demonstrating how to use the IllustratedMessage component with a NotFound illustration, heading, and content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\n\n<IllustratedMessage>\n  <NotFound />\n  <Heading>No results</Heading>\n  <Content>Try another search</Content>\n</IllustratedMessage>\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Menu Items with Accessibility Support\nDESCRIPTION: This example demonstrates how to implement a MenuItem component that properly handles complex content with labeled elements, descriptions, and keyboard shortcuts. It uses useMenuItem hook to apply proper ARIA attributes to enhance screen reader accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MenuItem({item, state}) {\n  // Get props for the menu item element and child elements\n  let ref = React.useRef(null);\n  let {\n    menuItemProps,\n    labelProps,\n    descriptionProps,\n    keyboardShortcutProps\n  } = useMenuItem({key: item.key}, state, ref);\n\n  // Pull out the three expected children. We will clone them\n  // and add the necessary props for accessibility.\n  let [title, description, shortcut] = item.rendered;\n\n  return (\n    <li {...menuItemProps} ref={ref}>\n      <div>\n        {React.cloneElement(title, labelProps)}\n        {React.cloneElement(description, descriptionProps)}\n      </div>\n      {React.cloneElement(shortcut, keyboardShortcutProps)}\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Breadcrumbs with Collection API\nDESCRIPTION: Example of implementing dynamic breadcrumbs that update based on navigation. Uses React Aria's Collection API with the items prop and onAction handler to manage navigation state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Key} from 'react-aria-components';\n\nfunction Example() {\n  let [breadcrumbs, setBreadcrumbs] = React.useState([\n    {id: 1, label: 'Home'},\n    {id: 2, label: 'Trendy'},\n    {id: 3, label: 'March 2022 Assets'}\n  ]);\n\n  let navigate = (id: Key) => {\n    let i = breadcrumbs.findIndex(item => item.id === id);\n    setBreadcrumbs(breadcrumbs.slice(0, i + 1));\n  };\n\n  return (\n    <Breadcrumbs items={breadcrumbs} onAction={navigate}>\n      {item => <Breadcrumb><Link>{item.label}</Link></Breadcrumb>}\n    </Breadcrumbs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Range Calendar with Unavailable Dates in React\nDESCRIPTION: This snippet demonstrates how to create a RangeCalendar component with unavailable date ranges. It uses the @internationalized/date library for date manipulation and the useLocale hook from React Spectrum for localization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/date-and-time-pickers-for-all.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today, getLocalTimeZone} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let now = today(getLocalTimeZone()).set({day: 8});\n  let disabledRanges = [\n    [now, now.add({days: 2})],\n    [now.add({days: 10}), now.add({days: 14})],\n    [now.add({days: 23}), now.add({days: 28})],\n  ];\n\n  let {locale} = useLocale();\n  let isDateUnavailable = (date) => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0);\n\n  return (\n    <Flex direction=\"column\" alignItems=\"center\">\n      <RangeCalendar\n        aria-label=\"Trip dates\"\n        minValue={now}\n        isDateUnavailable={isDateUnavailable}\n        defaultValue={{start: now.add({days: 5}), end: now.add({days: 8})}} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Directory Paste Grid in CSS\nDESCRIPTION: This CSS snippet provides styling for the grid layout used in the directory paste example. It creates a responsive grid for displaying file and folder names.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useClipboard.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  display: block;\n  width: auto;\n  height: auto;\n  min-height: 80px;\n}\n\n.grid ul {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 100px);\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  gap: 20px;\n}\n\n.grid li {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.grid li svg {\n  flex: 0 0 auto;\n}\n\n.grid li span {\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone Display in DatePicker with ZonedDateTime Value (TypeScript/TSX)\nDESCRIPTION: Demonstrates use of hideTimeZone to suppress display of time zone abbreviation when a ZonedDateTime is used as the value. Utilizes parseZonedDateTime for initialization; ideal for cases where time zone is displayed elsewhere or implicit in the context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_27\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker\\n  label=\\\"Appointment time\\\"\\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Styling HTML Elements with Spectrum 2 Macros\nDESCRIPTION: Example of using the style() macro to apply Spectrum 2 styles to an HTML div element. The styles are applied using the className prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-next-macros/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-release Version of React Spectrum Component - Bash\nDESCRIPTION: This command installs a pre-release version (3.0.0-rc.2) of the @react-spectrum/button package using yarn. The snippet is intended for cases where you want to test features or bugfixes before stable release. Ensuring compatibility with other versions in your project is the developer's responsibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/versioning.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-spectrum/button@3.0.0-rc.2\n```\n\n----------------------------------------\n\nTITLE: Styling FieldGroup with CSS\nDESCRIPTION: CSS styles for customizing the appearance of a FieldGroup component that contains SearchField components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled Selection TableView Component in React\nDESCRIPTION: This example demonstrates how to implement controlled selection in TableView using the selectedKeys prop with the onSelectionChange callback. It creates a reusable Pokemon table component with customizable selection behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction PokemonTable(props) {\n  let columns = [\n    {name: 'Name', uid: 'name'},\n    {name: 'Type', uid: 'type'},\n    {name: 'Level', uid: 'level'}\n  ];\n\n  let rows = [\n    {id: 1, name: 'Charizard', type: 'Fire, Flying', level: '67'},\n    {id: 2, name: 'Blastoise', type: 'Water', level: '56'},\n    {id: 3, name: 'Venusaur', type: 'Grass, Poison', level: '83'},\n    {id: 4, name: 'Pikachu', type: 'Electric', level: '100'}\n  ];\n\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([2]));\n\n  return (\n    <TableView aria-label=\"Table with controlled selection\" selectionMode=\"multiple\" selectedKeys={selectedKeys} onSelectionChange={setSelectedKeys} {...props}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column key={column.uid} align={column.uid === 'level' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={rows}>\n        {item => (\n          <Row>\n            {columnKey => <Cell>{item[columnKey]}</Cell>}\n          </Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: View Transition Animations for Toasts (CSS)\nDESCRIPTION: This CSS snippet defines keyframes and class-based rules for animating toast entry and exit using the View Transition API and view-transition-* pseudo-elements. It assigns a custom view-transition-class to .react-aria-Toast and specifies keyframes for sliding in and out toasts with opacity and translation changes. This code expects that toasts rendered by react-aria-components use the specified classes, and that the browser supports the View Transition API for advanced animations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-Toast {\n  view-transition-class: toast;\n}\n\n::view-transition-new(.toast):only-child {\n  animation: slide-in 400ms;\n}\n\n::view-transition-old(.toast):only-child {\n  animation: slide-out 400ms;\n}\n\n@keyframes slide-out {\n  to {\n    translate: 100% 0;\n    opacity: 0;\n  }\n}\n\n@keyframes slide-in {\n  from {\n    translate: 100% 0;\n    opacity: 0;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with Tailwind's Arbitrary Value Syntax\nDESCRIPTION: Example showing how to access React Aria CSS variables in Tailwind using the arbitrary value syntax.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover className=\"w-[--trigger-width]\">\n  {/* ... */}\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Importing ProgressCircle Component in React Spectrum\nDESCRIPTION: Shows how to import the ProgressCircle component from the React Spectrum library along with the View component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressCircle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ProgressCircle} from '@react-spectrum/progress';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorWheel with HTML Forms using `name` prop in TSX\nDESCRIPTION: Illustrates how to make the `ColorWheel` component compatible with standard HTML forms by adding the `name` prop. The selected hue value (a number between 0 and 360) will be included in the form submission data under the specified name ('hue' in this case).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorWheel.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorWheel name=\"hue\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria GridList Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-aria/gridlist package in a Markdown file. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/gridlist\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: DateField with Time Zone Support\nDESCRIPTION: Example of DateField using ZonedDateTime with explicit time zone specification\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Generating Lightness Gradient in OKLCH\nDESCRIPTION: This CSS snippet creates a vertical gradient showing different lightness levels in OKLCH. It visually represents the ranges used for lightness descriptors like very light, light, dark, and very dark.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\nbackground: 'linear-gradient(in oklch to bottom, oklch(100% 0.25 0), oklch(0% 0.25 0))'\n```\n\n----------------------------------------\n\nTITLE: Importing TimeField Component in React Spectrum\nDESCRIPTION: Shows how to import the TimeField component from the React Spectrum datepicker package along with the Flex layout component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {TimeField} from '@react-spectrum/datepicker';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Configuring optimize-locales-plugin with Next.js (JavaScript)\nDESCRIPTION: Demonstrates configuring the `@react-aria/optimize-locales-plugin` within a Next.js project (`next.config.js`). Since Next.js uses Webpack internally, the configuration modifies the Webpack config by pushing the plugin (`optimizeLocales.webpack`) with the desired locales ('en-US', 'fr-FR') into the `config.plugins` array.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/optimize-locales-plugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// next.config.js\nconst optimizeLocales = require('@react-aria/optimize-locales-plugin');\n\nmodule.exports = {\n  webpack(config) {\n    config.plugins.push(\n      optimizeLocales.webpack({\n        locales: ['en-US', 'fr-FR']\n      })\n    );\n    return config;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ToastProvider with a Global Queue in React (TSX)\nDESCRIPTION: This snippet shows an alternative implementation of `ToastProvider` which delegates toast state management to a pre-existing global `toastQueue` object (implementation not shown). It simply renders its children, passing the global `toastQueue` as the state via a render prop. This approach is noted as the actual implementation used in the documentation's context, suggesting a global state management strategy.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Actual implementation we use in the docs, using global queue.\nfunction ToastProvider({children}) {\n  return children(toastQueue);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Custom ListBox Wrappers with State-based CSS - CSS\nDESCRIPTION: This CSS snippet targets custom .my-listbox and .my-item classes for enhanced appearance and interactive feedback. It provides base layout, scrolling, highlight styling, focus/selected state indication, and forced-colors accessibility. Intended to be used in conjunction with the reusable React components from above; it assumes the presence of relevant classes on rendered elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.my-listbox {\\n  max-height: inherit;\\n  overflow: auto;\\n  padding: 4px;\\n  gap: 4px;\\n  border: 1px solid var(--border-color);\\n  border-radius: 6px;\\n  background: var(--overlay-background);\\n  outline: none;\\n  max-width: 250px;\\n  max-height: 300px;\\n  box-sizing: border-box;\\n}\\n\\n.my-item {\\n  --highlight: #e70073;\\n\\n  padding: 0.286rem 0.571rem;\\n  border-radius: 6px;\\n  outline: none;\\n  cursor: default;\\n  color: var(--text-color);\\n  font-size: 1.072rem;\\n\\n  &.selected {\\n    background: var(--highlight);\\n    color: var(--highlight-foreground);\\n  }\\n\\n  &.focused {\\n    outline: 2px solid var(--highlight);\\n    outline-offset: 2px;\\n  }\\n}\\n\\n@media (forced-colors: active) {\\n  .my-item {\\n    forced-color-adjust: none;\\n    --highlight: Highlight;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: ColorSlider with onChange and onChangeEnd Events\nDESCRIPTION: Demonstrates how to use both onChange and onChangeEnd events with ColorSlider to track current value during dragging and final value when dragging ends.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n  let [finalValue, setFinalValue] = React.useState(currentValue);\n\n  return (\n    <div>\n      <MyColorSlider\n        value={currentValue}\n        channel=\"hue\"\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue} />\n      <p>Current value: {currentValue.toString('hsl')}</p>\n      <p>Final value: {finalValue.toString('hsl')}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection in ActionGroup (TSX)\nDESCRIPTION: Demonstrates single selection mode in an ActionGroup using `selectionMode=\"single\"`. It sets a default selected item using `defaultSelectedKeys`. Only one item can be selected at a time.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup selectionMode=\"single\" defaultSelectedKeys={['list']}>\n  <Item key=\"grid\">Grid view</Item>\n  <Item key=\"list\">List view</Item>\n  <Item key=\"gallery\">Gallery view</Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Headers in TableView\nDESCRIPTION: This example demonstrates how to hide specific column headers using the hideHeader prop on Column components. This is particularly useful for columns containing action buttons instead of text content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TableExample(props) {\n  let columns = [\n    {name: 'First Name', key: 'firstName'},\n    {name: 'Last Name', key: 'lastName'},\n    {name: 'Add Info', key: 'addInfo'},\n    {name: 'Age', key: 'age'}\n  ];\n\n  let rows = [\n    {id: '1', firstName: 'John', lastName: 'Doe', age: '45'},\n    {id: '2', firstName: 'Jane', lastName: 'Doe', age: '37'},\n    {id: '3', firstName: 'Joe', lastName: 'Schmoe', age: '67'},\n    {id: '4', firstName: 'Joe', lastName: 'Bloggs', age: '12'},\n    {id: '5', firstName: 'Taylor', lastName: 'Rodriguez Lloyd-Atkinson', age: '83'}\n  ];\n\n  return (\n    <TableView aria-label=\"Example table with hidden headers\" maxWidth=\"size-6000\" {...props}>\n      <TableHeader columns={columns}>\n        {column => (\n          <Column\n            hideHeader={column.key === 'addInfo'}\n            align={column.key === 'age' ? 'end' : 'start'}\n            showDivider={column.key === 'addInfo'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody items={rows}>\n        {item =>\n          (<Row key={item.id}>\n            {key =>\n              key === 'addInfo'\n              ? <Cell><ActionButton aria-label=\"Add Info\" isQuiet><Add /></ActionButton></Cell>\n              : <Cell>{item[key]}</Cell>\n            }\n          </Row>)\n        }\n      </TableBody>\n    </TableView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog-Related Components in React Spectrum\nDESCRIPTION: This snippet shows the required imports for using dialog components in React Spectrum, including DialogContainer, Dialog, and AlertDialog, along with supporting components like buttons and text fields.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogContainer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Content} from '@react-spectrum/view';\nimport {Form} from '@react-spectrum/form';\nimport {Heading, Text} from '@react-spectrum/text';\nimport {TextField} from '@react-spectrum/textfield';\nimport {Divider} from '@react-spectrum/divider';\nimport {DialogContainer, Dialog, AlertDialog} from '@react-spectrum/dialog';\nimport {ActionButton, Button} from '@react-spectrum/button';\nimport {ButtonGroup} from '@react-spectrum/buttongroup';\nimport {MenuTrigger, Menu, Item} from '@react-spectrum/menu';\nimport More from '@spectrum-icons/workflow/More';\nimport Delete from '@spectrum-icons/workflow/Delete';\nimport Edit from '@spectrum-icons/workflow/Edit';\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Class Name in React Aria Table\nDESCRIPTION: Shows how to override the default class name of a React Aria Table component with a custom class name.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_48\n\nLANGUAGE: jsx\nCODE:\n```\n<Table className=\"my-table\">\n  {/* ... */}\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Checkbox with React Aria Hooks\nDESCRIPTION: This example demonstrates how to build a custom checkbox implementation using the useContextProps hook from react-aria-components and the useCheckbox hook from react-aria. It shows the pattern for accessing context while using lower-level hooks for behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\nimport {CheckboxContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n  ///- end highlight -///\n\n  // Follow the hook docs and implement your customizations...\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing @react-spectrum/overlays Package in Markdown\nDESCRIPTION: A markdown reference to the @react-spectrum/overlays package, indicating it's part of the react-spectrum repository with a link to the main repository for more details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/overlays/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/overlays\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Basic ColorSlider Implementation Example\nDESCRIPTION: Demonstrates a basic implementation of the ColorSlider component for adjusting the hue channel of a color, including label, output, track, and thumb elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\">\n  <Label />\n  <SliderOutput />\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout Component - JavaScript/React\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and exports BlogPostLayout as the default export for the module. This enables the page to use a predefined layout when rendered in the documentation site. There are no input parameters, and the exported layout is used as a React component wrapper for the MDX content that follows. Requires React and @react-spectrum/docs as dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-09-02.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Structuring a React Aria DatePicker Component (TSX)\nDESCRIPTION: This TSX snippet demonstrates the compositional structure of a React Aria `DatePicker`. It highlights how the component is built using various sub-components like `Label`, `Group`, `DateInput`, `Popover`, and `Calendar`, allowing for fine-grained control over styling and layout. The `format=false` attribute suggests the formatting is preserved as is, and the surrounding `hidden` div indicates it might be part of an interactive example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker>\n  <Label>Date Planted</Label>\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    <Button><CalendarIcon /></Button>\n  </Group>\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <Button slot=\"previous\"><LeftIcon /></Button>\n        <Heading />\n        <Button slot=\"next\"><RightIcon /></Button>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Installing @react-spectrum/test-utils using Yarn\nDESCRIPTION: Provides the command to install the `@react-spectrum/test-utils` package using the Yarn package manager. This package includes utilities specifically designed for testing React Spectrum components, including ARIA pattern testers and helpers for simulating events and environments.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn add --dev @react-spectrum/test-utils\n```\n\n----------------------------------------\n\nTITLE: Styling the Clear Button for DateRangePicker with CSS\nDESCRIPTION: This stylesheet snippet details the presentation for the .clear-button class used by DateRangePickerClearButton, covering size, color, state focus, and pressed appearance. Additional selectors target pressed and focus-visible interaction states, and adjust margin alongside other buttons. The styles depend on defined CSS custom properties and are intended to match accessibility and UX patterns.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.clear-button {\n  width: 1.143rem;\n  height: 1.143rem;\n  border-radius: 1.143rem;\n  font-size: 0.857rem;\n  line-height: 0.857rem;\n  vertical-align: middle;\n  text-align: center;\n  background: gray;\n  color: white;\n  border: none;\n  padding: 0;\n  outline: none;\n\n  &[data-pressed] {\n    background: dimgray;\n  }\n\n  &[data-focus-visible] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: 2px;\n  }\n\n  + .react-aria-Button {\n    margin-left: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Link Component\nDESCRIPTION: CSS styling for the Link component including hover, pressed, and focus states with proper theming support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Link {\n  color: var(--link-color);\n  font-size: 18px;\n  transition: all 200ms;\n  text-decoration: underline;\n  cursor: pointer;\n  outline: none;\n  position: relative;\n\n  &[data-hovered] {\n    text-decoration-style: wavy;\n  }\n\n  &[data-pressed] {\n    color: var(--link-color-pressed);\n  }\n\n  &[data-focus-visible]:after {\n    content: '';\n    position: absolute;\n    inset: -3px -6px;\n    border-radius: 6px;\n    border: 2px solid var(--focus-ring-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Required TextField (TypeScript/React)\nDESCRIPTION: Shows inclusion of the isRequired prop to indicate a mandatory field to assistive technologies. Depends on TextField, React, TypeScript. Key param: isRequired. Results in semantic accessibility markup, but does not add visual required indicator, which must be managed separately.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/textfield/docs/useTextField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\n<TextField label=\"Email\" isRequired />\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Date Constraint on DateField\nDESCRIPTION: This example shows how to set a minimum allowed date for a DateField using the minValue prop, in this case only accepting dates after today.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <DateField\n    label=\"Appointment date\"\n    minValue={today(getLocalTimeZone())}\n    defaultValue={parseDate('2022-02-03')} />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Allowing Selection on Disabled Tree Items (TSX)\nDESCRIPTION: Shows how to use the `disabledBehavior=\"selection\"` prop on the `Tree` component. This modifies the default behavior, allowing interactions like focus, dragging, or actions on items marked as `isDisabled`, while still preventing selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Tree\n  aria-label=\"Tree with disabled items\"\n  style={{height: '100px'}}\n  selectionMode=\"multiple\"\n  defaultExpandedKeys={['bulbasaur']}\n  /*- begin highlight -*/\n  disabledBehavior=\"selection\"\n  /*- end highlight -*/\n>\n  <MyTreeItem id=\"bulbasaur\" title=\"Bulbasaur\">\n    {/*- begin highlight -*/}\n    <MyTreeItem id=\"ivysaur\" title=\"Ivysaur\" isDisabled>\n    {/*- end highlight -*/}\n      <MyTreeItem id=\"venusaur\" title=\"Venusaur\" />\n    </MyTreeItem>\n  </MyTreeItem>\n</Tree>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Form and Label Interfaces - TypeScript\nDESCRIPTION: This snippet defines TypeScript interfaces for Form and Label components, extending common properties such as DOMProps, StyleProps, and LabelableProps. These interfaces specify required and optional attributes for configuring forms and labels, including support for accessibility, style, requirement indication, and validation state. Inputs are interface properties; there is no executable output, but these interfaces ensure type safety for component usage throughout the React Spectrum design system. Key dependencies include React types (ReactElement, ReactNode) and internally defined prop types.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Form.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Form extends DOMProps, StyleProps, LabelableProps {\n  children: ReactElement<FormItem> | ReactElement<FormItem>[]\n  isQuiet?: boolean,\n  isEmphasized?: boolean,\n  isDisabled?: boolean,\n  isRequired?: boolean,\n  isReadOnly?: boolean,\n  validationState?: ValidationState\n}\n\ninterface Label extends DOMProps, StyleProps {\n  children?: ReactNode,\n  htmlFor?: string, // for compatibility with React\n  for?: string,\n  labelPosition?: LabelPosition, // default top\n  labelAlign?: Alignment, // default start\n  isRequired?: boolean,\n  necessityIndicator?: NecessityIndicator // default icon\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Bidirectional Drag and Drop Example (TSX)\nDESCRIPTION: Renders the `DragBetweenListsExample` component. This displays two ListViews side-by-side, allowing users to drag and drop items between them, demonstrating the bidirectional drag and drop functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<DragBetweenListsExample />\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Disclosure Component with Default Expanded State\nDESCRIPTION: Shows how to create a custom Disclosure component and use it within a DisclosureGroup with a default expanded state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DisclosureProps} from 'react-aria-components';\n\ninterface MyDisclosureProps extends Omit<DisclosureProps, 'children'> {\n  title?: string,\n  children?: React.ReactNode\n}\n\nfunction MyDisclosure({title, children, ...props}: MyDisclosureProps) {\n  return (\n    <Disclosure {...props}>\n      <Heading>\n        <Button slot=\"trigger\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          {title}\n        </Button>\n      </Heading>\n      <DisclosurePanel>\n        <p>{children}</p>\n      </DisclosurePanel>\n    </Disclosure>\n  )\n}\n\n<DisclosureGroup defaultExpandedKeys={[\"system\"]}>\n  <MyDisclosure id=\"system\" title=\"System Requirements\" >\n    Details about system requirements here\n  </MyDisclosure>\n  <MyDisclosure id=\"personal\" title=\"Personal Information\" >\n    Details about personal information here\n  </MyDisclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Using description slot for help text in Select - React Spectrum - TypeScript\nDESCRIPTION: Shows how to associate additional help text with a Select using the description slot via the Text component. Requires Select, Label, Button, SelectValue, Popover, ListBox, ListBoxItem from React Spectrum, and Text from react-aria-components. Input: slot description via child. Output: Accessible help text rendered and announced to users.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<Select>\\n  <Label>Favorite Animal</Label>\\n  <Button>\\n    <SelectValue />\\n    <span aria-hidden=\\\"true\\\">▼</span>\\n  </Button>\\n  {/*- begin highlight -*/}\\n  <Text slot=\\\"description\\\">Please select an animal.</Text>\\n  {/*- end highlight -*/}\\n  <Popover>\\n    <ListBox>\\n      <ListBoxItem>Aardvark</ListBoxItem>\\n      <ListBoxItem>Cat</ListBoxItem>\\n      <ListBoxItem>Dog</ListBoxItem>\\n      <ListBoxItem>Kangaroo</ListBoxItem>\\n      <ListBoxItem>Panda</ListBoxItem>\\n      <ListBoxItem>Snake</ListBoxItem>\\n    </ListBox>\\n  </Popover>\\n</Select>\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Checkbox with React Aria\nDESCRIPTION: Example showing how to disable a checkbox using the isDisabled prop, which prevents user interaction with the checkbox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckbox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox isDisabled>Subscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Disclosure Component with React Aria\nDESCRIPTION: This snippet demonstrates how to create a basic disclosure component using the useDisclosure hook from React Aria. It includes support for accessibility, keyboard interactions, and focus management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/disclosure/docs/useDisclosure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDisclosureState} from '@react-stately/disclosure';\nimport {useDisclosure} from '@react-aria/disclosure';\nimport {useButton} from '@react-aria/button';\nimport {mergeProps, useFocusRing} from 'react-aria';\n\nfunction Disclosure(props) {\n  let state = useDisclosureState(props);\n  let panelRef = React.useRef<HTMLDivElement | null>(null);\n  let triggerRef = React.useRef<HTMLButtonElement | null>(null);\n  let {buttonProps: triggerProps, panelProps} = useDisclosure(props, state, panelRef);\n  let {buttonProps} = useButton(triggerProps, triggerRef);\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  return (\n    <div className=\"disclosure\">\n      <h3>\n        <button \n          className=\"trigger\" \n          ref={triggerRef}\n          {...mergeProps(buttonProps, focusProps)}\n          style={{outline: isFocusVisible ? '2px solid dodgerblue' : 'none'}}>\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          {props.title}\n        </button>\n      </h3>\n      <div className=\"panel\" ref={panelRef} {...panelProps}>\n        <p>\n          {props.children}\n        </p>\n      </div>\n    </div>\n  );\n};\n\n<Disclosure title=\"System Requirements\">\n  Details about system requirements here.\n</Disclosure>\n```\n\n----------------------------------------\n\nTITLE: Weekday/Weekend Detection in TypeScript/React\nDESCRIPTION: Shows how to use isWeekday and isWeekend functions to determine if a date falls on a weekday or weekend, with locale-specific handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekday, isWeekend} from '@internationalized/date';\n\nlet date = parseZonedDateTime('2022-02-06T08:30[America/Los_Angeles]'); // a Sunday\n\nisWeekday(date, 'en-US'); // false\nisWeekday(date, 'he-IL'); // true\n\nisWeekend(date, 'en-US'); // true\nisWeekend(date, 'he-IL'); // false\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled ColorField Input in CSS\nDESCRIPTION: This CSS snippet shows how to style a disabled ColorField input. It changes the border color and text color when the input is disabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorField {\n  .react-aria-Input {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Menu Items - React Aria MenuItem - CSS\nDESCRIPTION: Defines a CSS rule that visually distinguishes disabled menu items by altering their text color using a CSS custom property. Applicable when elements have a data-disabled attribute. The output is visually styled disabled menu items within the .react-aria-MenuItem scope.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-MenuItem {\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a NumberParser for Unit Values\nDESCRIPTION: Example showing how to create a NumberParser instance for parsing values with the unit 'inch' in the en-US locale.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberParser.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {NumberParser} from '@internationalized/number';\n\nlet parser = new NumberParser('en-US', {style: 'unit', unit: 'inch'});\nparser.parse('10 in'); // 10\n```\n\n----------------------------------------\n\nTITLE: Applying Emphasized Style and Default Selection to ToggleButton in TSX\nDESCRIPTION: Demonstrates using the `isEmphasized` boolean prop for a visually prominent `ToggleButton` and setting its initial state to selected using the `defaultSelected` boolean prop. This creates an uncontrolled component that starts in the selected state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ToggleButton.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButton isEmphasized defaultSelected>Pin</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: SearchField Labeling Options in React\nDESCRIPTION: This example shows various labeling options for the SearchField component, including required fields and necessity indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-300\" wrap>\n  <SearchField label=\"Search\" />\n  <SearchField label=\"Search\" isRequired necessityIndicator=\"icon\" />\n  <SearchField label=\"Search\" isRequired necessityIndicator=\"label\" />\n  <SearchField label=\"Search\" necessityIndicator=\"label\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Checkbox Group with Default Values\nDESCRIPTION: Example showing how to create an uncontrolled checkbox group with default selected values using the defaultValue prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<CheckboxGroup label=\"Favorite sports (uncontrolled)\" defaultValue={['soccer', 'baseball']}>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Listing Released React Spectrum Packages (May 3, 2022)\nDESCRIPTION: This block lists all the packages released as part of the May 3, 2022, update for the React Spectrum ecosystem. It includes packages from `@adobe/react-spectrum`, `@internationalized`, `@react-aria`, `@react-spectrum`, `@react-stately`, `@react-types`, and `@spectrum-icons`, specifying the exact version number for each released package. This serves as a reference for the updated dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-05-03.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- @adobe/react-spectrum@3.17.0\n- @internationalized/date@3.0.0-rc.0\n- @internationalized/message@3.0.6\n- @internationalized/number@3.1.0\n- @react-aria/accordion@3.0.0-alpha.7\n- @react-aria/actiongroup@3.2.6\n- @react-aria/aria-modal-polyfill@3.4.4\n- @react-aria/autocomplete@3.0.0-alpha.6\n- @react-aria/breadcrumbs@3.1.10\n- @react-aria/button@3.4.4\n- @react-aria/calendar@3.0.0-rc.0\n- @react-aria/checkbox@3.3.4\n- @react-aria/color@3.0.0-beta.11\n- @react-aria/combobox@3.2.6\n- @react-aria/datepicker@3.0.0-rc.0\n- @react-aria/dialog@3.1.9\n- @react-aria/dnd@3.0.0-alpha.8\n- @react-aria/focus@3.5.5\n- @react-aria/grid@3.2.6\n- @react-aria/i18n@3.3.9\n- @react-aria/interactions@3.8.4\n- @react-aria/label@3.2.5\n- @react-aria/link@3.2.5\n- @react-aria/listbox@3.4.5\n- @react-aria/live-announcer@3.0.6\n- @react-aria/menu@3.4.4\n- @react-aria/meter@3.1.8\n- @react-aria/numberfield@3.1.6\n- @react-aria/overlays@3.8.2\n- @react-aria/progress@3.1.8\n- @react-aria/radio@3.1.11\n- @react-aria/searchfield@3.2.7\n- @react-aria/select@3.6.5\n- @react-aria/selection@3.8.2\n- @react-aria/separator@3.1.7\n- @react-aria/slider@3.0.8\n- @react-aria/spinbutton@3.0.6\n- @react-aria/switch@3.1.8\n- @react-aria/tabs@3.1.5\n- @react-aria/tag@3.0.0-alpha.5\n- @react-aria/textfield@3.5.5\n- @react-aria/toggle@3.2.4\n- @react-aria/tooltip@3.1.8\n- @react-aria/utils@3.12.0\n- @react-aria/virtualizer@3.3.10\n- @react-aria/visually-hidden@3.2.8\n- @react-spectrum/accordion@3.0.0-alpha.8\n- @react-spectrum/actionbar@3.0.0-alpha.8\n- @react-spectrum/actiongroup@3.4.4\n- @react-spectrum/autocomplete@3.0.0-alpha.6\n- @react-spectrum/avatar@3.0.0-alpha.5\n- @react-spectrum/breadcrumbs@3.3.0\n- @react-spectrum/button@3.7.4\n- @react-spectrum/buttongroup@3.2.8\n- @react-spectrum/calendar@3.0.0-rc.0\n- @react-spectrum/card@3.0.0-alpha.7\n- @react-spectrum/checkbox@3.3.4\n- @react-spectrum/color@3.0.0-beta.11\n- @react-spectrum/combobox@3.3.0\n- @react-spectrum/contextualhelp@3.0.4\n- @react-spectrum/datepicker@3.0.0-rc.0\n- @react-spectrum/dialog@3.3.9\n- @react-spectrum/divider@3.2.4\n- @react-spectrum/dnd@3.0.0-alpha.2\n- @react-spectrum/form@3.2.9\n- @react-spectrum/icon@3.3.7\n- @react-spectrum/illustratedmessage@3.1.9\n- @react-spectrum/image@3.1.9\n- @react-spectrum/label@3.5.0\n- @react-spectrum/layout@3.2.6\n- @react-spectrum/link@3.2.5\n- @react-spectrum/list@3.0.0-alpha.10\n- @react-spectrum/listbox@3.5.8\n- @react-spectrum/menu@3.6.4\n- @react-spectrum/meter@3.1.8\n- @react-spectrum/numberfield@3.2.0\n- @react-spectrum/overlays@3.5.0\n- @react-spectrum/picker@3.5.5\n- @react-spectrum/progress@3.1.8\n- @react-spectrum/provider@3.3.4\n- @react-spectrum/radio@3.1.10\n- @react-spectrum/searchfield@3.3.0\n- @react-spectrum/searchwithin@3.0.0-alpha.6\n- @react-spectrum/slider@3.0.9\n- @react-spectrum/statuslight@3.2.7\n- @react-spectrum/switch@3.1.8\n- @react-spectrum/tabs@3.1.6\n- @react-spectrum/tag@3.0.0-alpha.5\n- @react-spectrum/text@3.1.8\n- @react-spectrum/textfield@3.4.0\n- @react-spectrum/theme-dark@3.2.7\n- @react-spectrum/theme-default@3.2.7\n- @react-spectrum/theme-light@3.1.7\n- @react-spectrum/tooltip@3.1.9\n- @react-spectrum/utils@3.6.8\n- @react-spectrum/view@3.1.8\n- @react-spectrum/well@3.1.8\n- @react-stately/calendar@3.0.0-rc.0\n- @react-stately/checkbox@3.0.7\n- @react-stately/collections@3.3.8\n- @react-stately/color@3.0.0-beta.10\n- @react-stately/combobox@3.0.5\n- @react-stately/data@3.4.7\n- @react-stately/datepicker@3.0.0-rc.0\n- @react-stately/dnd@3.0.0-alpha.6\n- @react-stately/grid@3.1.4\n- @react-stately/list@3.4.5\n- @react-stately/menu@3.2.7\n- @react-stately/numberfield@3.0.7\n- @react-stately/overlays@3.2.0\n- @react-stately/radio@3.3.6\n- @react-stately/searchfield@3.1.7\n- @react-stately/select@3.1.7\n- @react-stately/selection@3.9.4\n- @react-stately/slider@3.0.8\n- @react-stately/tabs@3.0.5\n- @react-stately/toggle@3.2.7\n- @react-stately/tooltip@3.0.9\n- @react-stately/tree@3.2.4\n- @react-stately/virtualizer@3.1.9\n- @react-types/accordion@3.0.0-alpha.5\n- @react-types/actionbar@3.0.0-alpha.5\n- @react-types/actiongroup@3.2.5\n- @react-types/autocomplete@3.0.0-alpha.4\n- @react-types/avatar@3.0.0-alpha.4\n- @react-types/breadcrumbs@3.3.0\n- @react-types/button@3.4.5\n- @react-types/buttongroup@3.1.6\n- @react-types/calendar@3.0.0-rc.0\n- @react-types/card@3.0.0-alpha.5\n- @react-types/checkbox@3.2.7\n- @react-types/color@3.0.0-beta.8\n- @react-types/combobox@3.4.0\n- @react-types/contextualhelp@3.0.3\n- @react-types/datepicker@3.0.0-rc.0\n- @react-types/dialog@3.3.5\n- @react-types/divider@3.1.6\n- @react-types/form@3.2.6\n- @react-types/grid@3.0.4\n- @react-types/illustratedmessage@3.1.6\n- @react-types/image@3.1.7\n- @react-types/label@3.5.4\n- @react-types/layout@3.2.4\n- @react-types/link@3.2.5\n- @react-types/listbox@3.2.5\n- @react-types/menu@3.5.3\n- @react-types/meter@3.1.6\n- @react-types/numberfield@3.2.0\n- @react-types/overlays@3.5.5\n- @react-types/progress@3.1.6\n- @react-types/provider@3.4.3\n- @react-types/radio@3.1.6\n- @react-types/searchfield@3.2.0\n- @react-types/searchwithin@3.0.0-alpha.4\n- @react-types/select@3.5.5\n- @react-types/shared@3.12.0\n- @react-types/slider@3.0.6\n- @react-types/statuslight@3.1.6\n- @react-types/switch@3.1.6\n- @react-types/tabs@3.0.5\n- @react-types/tag@3.0.0-alpha.3\n- @react-types/text@3.1.7\n- @react-types/textfield@3.4.0\n- @react-types/tooltip@3.1.6\n- @react-types/view@3.1.6\n- @react-types/well@3.1.6\n- @spectrum-icons/color@3.3.6\n- @spectrum-icons/ui@3.2.6\n- @spectrum-icons/workflow@3.2.5\n- react-aria@3.15.0\n- react-stately@3.13.0\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment with Yarn in Parcel project\nDESCRIPTION: Commands to install dependencies and start the development server for a Parcel project with React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-parcel-example/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing DatePicker and Flex Components in React Spectrum\nDESCRIPTION: Basic import statement for the DatePicker component from @react-spectrum/datepicker and Flex from @react-spectrum/layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {DatePicker} from '@react-spectrum/datepicker';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Basic Virtualizer Anatomy (TSX)\nDESCRIPTION: This snippet shows the basic structure for using the Virtualizer component. It demonstrates wrapping a collection component (like ListBox) within the Virtualizer component and providing a layout object (ListLayout) via the `layout` prop. This setup enables virtualized scrolling for the child collection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Virtualizer, ListLayout} from 'react-aria-components';\n\n<Virtualizer layout={ListLayout}>\n  <ListBox>\n    {/* ... */}\n  </ListBox>\n</Virtualizer>\n```\n\n----------------------------------------\n\nTITLE: Listing Released Package Versions - Markdown\nDESCRIPTION: This snippet presents a Markdown-formatted list enumerating the names and versions of released packages for the React Spectrum project. It is intended for documentation and version-tracking purposes, with no executable code, and does not require any software dependencies. Inputs are the set of published packages, and output is a human-readable Markdown bullet list. There are no programmatic constraints since it is purely for informational display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-05-27.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\n - @adobe/react-spectrum@3.18.0\n - @internationalized/date@3.0.0-rc.1\n - @internationalized/message@3.0.7\n - @internationalized/number@3.1.1\n - @react-aria/accordion@3.0.0-alpha.8\n - @react-aria/actiongroup@3.3.0\n - @react-aria/aria-modal-polyfill@3.5.0\n - @react-aria/autocomplete@3.0.0-alpha.7\n - @react-aria/breadcrumbs@3.2.0\n - @react-aria/button@3.5.0\n - @react-aria/calendar@3.0.0-rc.1\n - @react-aria/checkbox@3.4.0\n - @react-aria/color@3.0.0-beta.12\n - @react-aria/combobox@3.3.0\n - @react-aria/datepicker@3.0.0-rc.1\n - @react-aria/dialog@3.2.0\n - @react-aria/dnd@3.0.0-alpha.9\n - @react-aria/focus@3.6.0\n - @react-aria/grid@3.3.0\n - @react-aria/i18n@3.4.0\n - @react-aria/interactions@3.9.0\n - @react-aria/label@3.3.0\n - @react-aria/link@3.3.0\n - @react-aria/list@3.0.0-alpha.0\n - @react-aria/listbox@3.5.0\n - @react-aria/live-announcer@3.1.0\n - @react-aria/menu@3.5.0\n - @react-aria/meter@3.2.0\n - @react-aria/numberfield@3.2.0\n - @react-aria/overlays@3.9.0\n - @react-aria/progress@3.2.0\n - @react-aria/radio@3.2.0\n - @react-aria/searchfield@3.3.0\n - @react-aria/select@3.7.0\n - @react-aria/selection@3.9.0\n - @react-aria/separator@3.2.0\n - @react-aria/slider@3.1.0\n - @react-aria/spinbutton@3.1.0\n - @react-aria/ssr@3.2.0\n - @react-aria/switch@3.2.0\n - @react-aria/table@3.3.0\n - @react-aria/tabs@3.2.0\n - @react-aria/tag@3.0.0-alpha.6\n - @react-aria/textfield@3.6.0\n - @react-aria/toggle@3.3.0\n - @react-aria/tooltip@3.2.0\n - @react-aria/utils@3.13.0\n - @react-aria/virtualizer@3.4.0\n - @react-aria/visually-hidden@3.3.0\n - @react-spectrum/accordion@3.0.0-alpha.9\n - @react-spectrum/actionbar@3.0.0-alpha.9\n - @react-spectrum/actiongroup@3.5.0\n - @react-spectrum/autocomplete@3.0.0-alpha.7\n - @react-spectrum/avatar@3.0.0-alpha.6\n - @react-spectrum/breadcrumbs@3.4.0\n - @react-spectrum/button@3.8.0\n - @react-spectrum/buttongroup@3.3.0\n - @react-spectrum/calendar@3.0.0-rc.1\n - @react-spectrum/card@3.0.0-alpha.8\n - @react-spectrum/checkbox@3.4.0\n - @react-spectrum/color@3.0.0-beta.12\n - @react-spectrum/combobox@3.4.0\n - @react-spectrum/contextualhelp@3.1.0\n - @react-spectrum/datepicker@3.0.0-rc.1\n - @react-spectrum/dialog@3.4.0\n - @react-spectrum/divider@3.3.0\n - @react-spectrum/dnd@3.0.0-alpha.3\n - @react-spectrum/form@3.3.0\n - @react-spectrum/icon@3.4.0\n - @react-spectrum/illustratedmessage@3.2.0\n - @react-spectrum/image@3.2.0\n - @react-spectrum/label@3.6.0\n - @react-spectrum/layout@3.3.0\n - @react-spectrum/link@3.3.0\n - @react-spectrum/list@3.0.0-alpha.11\n - @react-spectrum/listbox@3.6.0\n - @react-spectrum/menu@3.7.0\n - @react-spectrum/meter@3.2.0\n - @react-spectrum/numberfield@3.3.0\n - @react-spectrum/overlays@3.6.0\n - @react-spectrum/picker@3.6.0\n - @react-spectrum/progress@3.2.0\n - @react-spectrum/provider@3.4.0\n - @react-spectrum/radio@3.2.0\n - @react-spectrum/searchfield@3.4.0\n - @react-spectrum/searchwithin@3.0.0-alpha.7\n - @react-spectrum/slider@3.1.0\n - @react-spectrum/statuslight@3.3.0\n - @react-spectrum/switch@3.2.0\n - @react-spectrum/table@3.2.0\n - @react-spectrum/tabs@3.2.0\n - @react-spectrum/tag@3.0.0-alpha.6\n - @react-spectrum/text@3.2.0\n - @react-spectrum/textfield@3.5.0\n - @react-spectrum/theme-dark@3.3.0\n - @react-spectrum/theme-default@3.3.0\n - @react-spectrum/theme-light@3.2.0\n - @react-spectrum/tooltip@3.2.0\n - @react-spectrum/utils@3.7.0\n - @react-spectrum/view@3.2.0\n - @react-spectrum/well@3.2.0\n - @react-stately/calendar@3.0.0-rc.1\n - @react-stately/checkbox@3.1.0\n - @react-stately/collections@3.4.0\n - @react-stately/color@3.0.0-beta.11\n - @react-stately/combobox@3.1.0\n - @react-stately/data@3.5.0\n - @react-stately/datepicker@3.0.0-rc.1\n - @react-stately/dnd@3.0.0-alpha.7\n - @react-stately/grid@3.2.0\n - @react-stately/layout@3.5.0\n - @react-stately/list@3.5.0\n - @react-stately/menu@3.3.0\n - @react-stately/numberfield@3.1.0\n - @react-stately/overlays@3.3.0\n - @react-stately/radio@3.4.0\n - @react-stately/searchfield@3.2.0\n - @react-stately/select@3.2.0\n - @react-stately/selection@3.10.0\n - @react-stately/slider@3.1.0\n - @react-stately/table@3.2.0\n - @react-stately/tabs@3.1.0\n - @react-stately/toggle@3.3.0\n - @react-stately/tooltip@3.1.0\n - @react-stately/tree@3.3.0\n - @react-stately/utils@3.5.0\n - @react-stately/virtualizer@3.2.0\n - @react-types/accordion@3.0.0-alpha.6\n - @react-types/actionbar@3.0.0-alpha.6\n - @react-types/actiongroup@3.3.0\n - @react-types/autocomplete@3.0.0-alpha.5\n - @react-types/avatar@3.0.0-alpha.5\n - @react-types/breadcrumbs@3.4.0\n - @react-types/button@3.5.0\n - @react-types/buttongroup@3.2.0\n - @react-types/calendar@3.0.0-rc.1\n - @react-types/card@3.0.0-alpha.6\n - @react-types/checkbox@3.3.0\n - @react-types/color@3.0.0-beta.9\n - @react-types/combobox@3.5.0\n - @react-types/contextualhelp@3.1.0\n - @react-types/datepicker@3.0.0-rc.1\n - @react-types/dialog@3.4.0\n - @react-types/divider@3.2.0\n - @react-types/form@3.3.0\n - @react-types/grid@3.1.0\n - @react-types/illustratedmessage@3.2.0\n - @react-types/image@3.2.0\n - @react-types/label@3.6.0\n - @react-types/layout@3.3.0\n - @react-types/link@3.3.0\n - @react-types/list@3.0.0-alpha.0\n - @react-types/listbox@3.3.0\n - @react-types/menu@3.6.0\n - @react-types/meter@3.2.0\n - @react-types/numberfield@3.3.0\n - @react-types/overlays@3.6.0\n - @react-types/progress@3.2.0\n - @react-types/provider@3.5.0\n - @react-types/radio@3.2.0\n - @react-types/searchfield@3.3.0\n - @react-types/searchwithin@3.0.0-alpha.5\n - @react-types/select@3.6.0\n - @react-types/shared@3.13.0\n - @react-types/slider@3.1.0\n - @react-types/statuslight@3.2.0\n - @react-types/switch@3.2.0\n - @react-types/table@3.2.0\n - @react-types/tabs@3.1.0\n - @react-types/tag@3.0.0-alpha.4\n - @react-types/text@3.2.0\n - @react-types/textfield@3.5.0\n - @react-types/tooltip@3.2.0\n - @react-types/view@3.2.0\n - @react-types/well@3.2.0\n - @spectrum-icons/color@3.4.0\n - @spectrum-icons/illustrations@3.3.0\n - @spectrum-icons/ui@3.3.0\n - @spectrum-icons/workflow@4.0.0\n - react-aria@3.16.0\n - react-stately@3.14.0\n ```\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component - React Spectrum - JavaScript\nDESCRIPTION: This code snippet imports a Layout component from the @react-spectrum/docs package and immediately exports it as the default export. It enables consistent documentation page layout and ensures the Layout component is available for routing or rendering documentation pages in the React Spectrum documentation infrastructure. There are no external parameters required, but consumers must have the @react-spectrum/docs package installed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/menu/docs/useMenuTriggerState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Button Variant Types in Spectrum 2 and React Spectrum v3\nDESCRIPTION: Compares the button variant types between Spectrum 2 and React Spectrum v3, highlighting the changes in available options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/s2/api-diff.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Spectrum 2\nvariant: 'accent' | 'negative' | 'primary' | 'secondary'\n\n// React Spectrum v3\nvariant: 'accent' | 'negative' | 'primary' | 'secondary' | LegacyButtonVariant\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Slider with React useState in TypeScript\nDESCRIPTION: This example shows how to implement a controlled Slider in React Spectrum using the React.useState hook. The slider's value is stored in state and updated using the \\\"onChange\\\" handler, which is called with the new value as users interact with the component. It demonstrates how to bind the slider's value and update state in response, along with displaying the current value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\nfunction Example() {\n  let [value, setValue] = React.useState(25);\n  return (\n    <>\n      <Slider\n        label=\"Cookies to buy\"\n        value={value}\n        onChange={setValue} />\n      <p>Current value: {value}</p>\n    </>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Global RouterOptions Type with TypeScript\nDESCRIPTION: Shows how to use TypeScript declaration merging to define the structure of the `routerOptions` prop globally. This enhances type safety and enables autocompletion for router-specific options when using React Aria link components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {RouterOptions} from 'your-router';\n\ndeclare module 'react-aria-components' {\n  interface RouterConfig {\n    routerOptions: RouterOptions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Various Labeling Options\nDESCRIPTION: Shows different ways to label a RadioGroup, including required fields and necessity indicators.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-300\" wrap>\n  <RadioGroup label=\"Favorite avatar\">\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n\n  <RadioGroup label=\"Favorite avatar\" isRequired necessityIndicator=\"icon\">\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n\n  <RadioGroup label=\"Favorite avatar\" isRequired necessityIndicator=\"label\">\n    <Radio value=\"wizard\">Wizard</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n\n  <RadioGroup label=\"Favorite avatar\" necessityIndicator=\"label\">\n   <Radio value=\"wizard\">Wizard</Radio>\n   <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Handling DateField onChange Events\nDESCRIPTION: This example shows how to use the onChange event of DateField to update a separate element with a formatted version of the selected date in the user's locale and time zone.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseDate('1985-07-03'));\n  let formatter = useDateFormatter({dateStyle: 'full'});\n\n  return (\n    <>\n      <DateField label=\"Birth date\" value={date} onChange={setDate} />\n      <p>Selected date: {date ? formatter.format(date.toDate(getLocalTimeZone())): '--'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-month Calendar Display\nDESCRIPTION: Shows how to display multiple months in a Calendar component using the visibleMonths prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <Calendar aria-label=\"Event date\" visibleMonths={3} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Week in TypeScript\nDESCRIPTION: Shows how to use the getDayOfWeek function to determine the day of the week for a given date and locale.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getDayOfWeek} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 6); // a Sunday\n\ngetDayOfWeek(date, 'en-US'); // 0\ngetDayOfWeek(date, 'fr-FR'); // 6\n```\n\n----------------------------------------\n\nTITLE: Using the ListView Component in JSX\nDESCRIPTION: This JSX snippet illustrates the basic usage of the React Spectrum 'ListView' component. It renders a list view, designed for displaying a list of interactive items with features like keyboard navigation, row selection, and actions. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ListView />\n```\n\n----------------------------------------\n\nTITLE: Handling basePath in Next.js App Router Provider\nDESCRIPTION: Updates the `ClientProviders` component for Next.js App Router to handle a `basePath`. It defines a custom `useHref` function that reads the `BASE_PATH` environment variable and prepends it to the hrefs used by React Aria components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// app/provider.tsx\n// ...\n\nexport function ClientProviders({children}) {\n  let router = useRouter();\n  /*- begin highlight -*/\n  let useHref = (href: string) => process.env.BASE_PATH + href;\n  /*- end highlight -*/\n\n  return (\n    <RouterProvider navigate={router.push} useHref={useHref}>\n      {children}\n    </RouterProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Plugin for react-aria-components in tailwind.config.js - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to add the tailwindcss-react-aria-components plugin to Tailwind CSS version 3 via the tailwind.config.js file. The code requires Tailwind CSS v3 and the version 1.x of the plugin. Place the plugin entry in the plugins list in your configuration file. There are no complex parameters; it statically includes the plugin using require. The result is plugin activation for all Tailwind builds using this config.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ios-list.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Table Component and Dependencies in React\nDESCRIPTION: This snippet shows how to import the necessary components and dependencies for creating a Table in React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Table, TableHeader, TableBody, Column, Row, Cell} from 'react-aria-components';\nimport {MyCheckbox} from './Checkbox';\n```\n\n----------------------------------------\n\nTITLE: Example Usage Note and External Doc Reference (Markdown)\nDESCRIPTION: Provides a reference to related documentation for practical examples of useListState usage, specifically directing users to useListBox in react-aria. It is a Markdown/MDX section with contextual linking, and does not directly produce code. Limitations are that it relies on the existence and accuracy of the target documentation link.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/list/docs/useListState.mdx#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## Example\n\nSee the docs for [useListBox](/react-aria/useListBox.html) in react-aria for an example of `useListState`.\n```\n\n----------------------------------------\n\nTITLE: Styling FieldGroup in CSS\nDESCRIPTION: This CSS snippet shows how to style the FieldGroup component. It sets padding and width for the fieldset element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n```\n\n----------------------------------------\n\nTITLE: InlineAlert with Positive Variant for Success Message\nDESCRIPTION: Demonstrates an InlineAlert with the positive variant used to display a success message for a completed purchase.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/inlinealert/docs/InlineAlert.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<InlineAlert variant=\"positive\">\n  <Heading>Purchase completed</Heading>\n  <Content>You'll get a confirmation email with your order details shortly.</Content>\n</InlineAlert>\n```\n\n----------------------------------------\n\nTITLE: Integrating React Spectrum Provider with TanStack Router (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates integrating React Spectrum's `Provider` within a TanStack Router setup. It uses `useRouter` to get the router instance and passes custom functions wrapping `router.navigate` and `router.buildLocation` to the `Provider`'s `router` prop for navigation and href generation respectively. It also includes TypeScript module augmentation for `RouterConfig` using types from `@tanstack/react-router` to provide autocomplete for the `href` prop and router options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRouter, type NavigateOptions, type ToOptions} from '@tanstack/react-router';\nimport {Provider, defaultTheme} from '@adobe/react-spectrum';\n\ndeclare module '@adobe/react-spectrum' {\n  interface RouterConfig {\n    href: ToOptions['to'];\n    routerOptions: Omit<NavigateOptions, keyof ToOptions>;\n  }\n}\n\nfunction RootRoute() {\n  let router = useRouter();\n  return (\n    <Provider\n      theme={defaultTheme}\n      router={{\n        navigate: (to, options) => router.navigate({to, ...options}),\n        useHref: to => router.buildLocation({to}).href\n      }}>\n      {/* ...*/}\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessibility Example Link\nDESCRIPTION: Example showing Link with accessible event handling\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/link/docs/Link.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Link onPress={e => alert(`clicked \"${e.target.textContent}\" Link`)}>\n  I forgot my password\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Button Component with useButton in React\nDESCRIPTION: This snippet shows a simple `Button` component implementation using the `useButton` hook from `@react-aria/button`. It applies necessary accessibility props and handles press events, making it suitable for use as a trigger or action button within other components like `ModalTrigger` or `Dialog`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/useModalOverlay.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = props.buttonRef;\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref} style={props.style}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default className in React Aria ProgressBar (JSX)\nDESCRIPTION: Illustrates overriding the default React Aria `className` by providing a custom `className` prop to the `ProgressBar` component. This allows using custom CSS selectors like `.my-progressbar` instead of the default `.react-aria-ProgressBar`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ProgressBar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ProgressBar className=\"my-progressbar\">\n  {/* ... */}\n</ProgressBar>\n```\n\n----------------------------------------\n\nTITLE: Importing ActionMenu Components in React Spectrum\nDESCRIPTION: Shows how to import the ActionMenu, Item, Section components from React Spectrum, along with necessary icons and layout components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionMenu, Item, Section} from '@react-spectrum/menu';\nimport Copy from '@spectrum-icons/workflow/Copy';\nimport Cut from '@spectrum-icons/workflow/Cut';\nimport {Flex} from '@react-spectrum/layout';\nimport Paste from '@spectrum-icons/workflow/Paste';\n```\n\n----------------------------------------\n\nTITLE: Creating a ZonedDateTime with Constructor in React\nDESCRIPTION: Creates a ZonedDateTime object representing February 3rd, 2022 at 9:15 AM in the America/Los Angeles time zone using the Gregorian calendar system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ZonedDateTime} from '@internationalized/date';\n\nlet date = new ZonedDateTime(\n  // Date\n  2022, 2, 3,\n  // Time zone and UTC offset\n  'America/Los_Angeles', -28800000,\n  // Time\n  9, 15, 0\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Resources for React Aria Calendar\nDESCRIPTION: Imports documentation resources for React Aria calendar components, React Stately calendar state, and the internationalized date library, along with various documentation-related components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-aria/calendar';\nimport statelyDocs from 'docs:@react-stately/calendar';\nimport i18nDocs from 'docs:@internationalized/date';\nimport {FunctionAPI, HeaderInfo, InterfaceType, TypeContext, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/calendar/package.json';\nimport Anatomy from './rangecalendar-anatomy.svg';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {Keyboard} from '@react-spectrum/text';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport tailwindExample from 'url:./tailwind.png';\n```\n\n----------------------------------------\n\nTITLE: Styling Search Fields Inside Submenu Popovers - React Aria Popover - CSS\nDESCRIPTION: Adjusts margin for search fields within popovers triggered by SubmenuTrigger. Targets .react-aria-SearchField only when inside such a popover. Ensures consistent interior spacing for Autocomplete-based submenus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=SubmenuTrigger] .react-aria-SearchField {\n  margin: 4px 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Sections in ActionMenu with React Spectrum\nDESCRIPTION: Demonstrates how to group menu items into sections using the Section component with title and key props for better organization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionMenu>\n  <Section title=\"File\">\n    <Item key=\"new\">New</Item>\n    <Item key=\"open\">Open...</Item>\n  </Section>\n  <Section title=\"Save\">\n    <Item key=\"save\">Save</Item>\n    <Item key=\"saveAs\">Save As...</Item>\n    <Item key=\"saveAll\">Save All</Item>\n  </Section>\n</ActionMenu>\n```\n\n----------------------------------------\n\nTITLE: Importing DateField and Layout Components - React Spectrum - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the DateField component from the @react-spectrum/datepicker package and the Flex layout component from @react-spectrum/layout. These imports are prerequisites for utilizing the DateField within layout containers throughout the examples in this documentation. No UI is rendered in this snippet; rather, it is meant to show the correct import statements required to use these components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {DateField} from '@react-spectrum/datepicker';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom CSS Class to React Aria ColorSlider\nDESCRIPTION: This JSX snippet demonstrates how to apply a custom CSS class name to a `ColorSlider` component using the `className` prop. This overrides the default `react-aria-ColorSlider` class, allowing for custom styling scopes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorSlider className=\"my-color-slider\">\n  {/* ... */}\n</ColorSlider>\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Link with Styled Paragraph - JSX\nDESCRIPTION: This snippet renders a styled paragraph that contains a link to the project's GitHub repository. The class names for the paragraph and link are dynamically composed using the 'clsx' utility and imported CSS module references. Assumes 'clsx', 'typographyStyles', 'styles', and 'linkStyle' are available and properly imported. Inputs: none; Outputs: HTML paragraph element with a styled link.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/internationalized/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<p className={clsx(typographyStyles['spectrum-Body2'], styles.homeLinks)}>\n  <a href=\"https://github.com/adobe/react-spectrum\" className={clsx(linkStyle['spectrum-Link'], styles.link)}>GitHub</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing FocusRing Component with React Aria\nDESCRIPTION: Example of using the FocusRing component from @react-aria/focus to wrap a button element. The component applies a 'focus-ring' class when the button receives keyboard focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/focus/docs/FocusRing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FocusRing} from '@react-aria/focus';\n\n<FocusRing focusRingClass=\"focus-ring\">\n  <button className=\"button\">Test</button>\n</FocusRing>\n```\n\n----------------------------------------\n\nTITLE: Embedding Keyboard Demo Video with Controls (JSX)\nDESCRIPTION: Embeds a demonstration video (`dndKeyboard`) using the `Video` component. It sets the source with a time fragment (`#t=0.1`) to potentially start slightly after the beginning, enables preload (`metadata`), adds browser controls (`controls`), provides an `aria-label`, and applies inline styles. This shows how to embed controllable video content demonstrating keyboard interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/drag-and-drop.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Video\n  src={dndKeyboard + '#t=0.1'}\n  preload=\"metadata\"\n  controls\n  aria-label=\"Demo of drag and drop using a keyboard, showing list items being selected and dragged to corresponding drop targets.\"\n  style={{maxWidth: 'min(100%, 1920px)', display: 'block', margin: '40px auto'}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Tabs Component\nDESCRIPTION: This example demonstrates how to disable an entire tabs component using the isDisabled prop. When disabled, users cannot interact with any of the tabs or their content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs isDisabled>\n  <TabList aria-label=\"Input settings\">\n    <Tab id=\"mouse\">Mouse Settings</Tab>\n    <Tab id=\"keyboard\">Keyboard Settings</Tab>\n    <Tab id=\"gamepad\">Gamepad Settings</Tab>\n  </TabList>\n  <TabPanel id=\"mouse\">Mouse Settings</TabPanel>\n  <TabPanel id=\"keyboard\">Keyboard Settings</TabPanel>\n  <TabPanel id=\"gamepad\">Gamepad Settings</TabPanel>\n</Tabs>\n```\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tab {\n  &[data-disabled] {\n    color: var(--text-color-disabled);\n    &[data-selected] {\n      --border-color: var(--border-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing RangeSlider Min and Max Values in React\nDESCRIPTION: This example demonstrates how to set custom minimum and maximum values for the RangeSlider.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeSlider\n  label=\"Range\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={{start: 75, end: 100}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboBox Behavior Hook in React\nDESCRIPTION: This code snippet shows a behavior hook for a combo box component. It provides theme-agnostic props for various elements, implementing keyboard and mouse interactions, accessibility attributes, and other behavior. The hook uses the state from the autocomplete state hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-architecture.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef } from \"react\";\nimport { useId } from \"./utils\";\n\nexport function useComboBox(props, autocomplete) {\n  let id = useId(props.id);\n  let listboxId = useId();\n  let textfieldRef = useRef();\n  let values = { ...autocomplete, id, listboxId, textfieldRef };\n  return {\n    wrapperProps: getWrapperProps(values),\n    textfieldProps: getTextfieldProps(values),\n    buttonProps: getButtonProps(values),\n    menuProps: getMenuProps(values),\n    getMenuItemProps: index => getMenuItemProps(values, index)\n  };\n}\n\nfunction getWrapperProps({ listboxId, showMenu }) {\n  return {\n    role: \"combobox\",\n    \"aria-controls\": showMenu ? listboxId : undefined,\n    \"aria-owns\": showMenu ? listboxId : undefined,\n    \"aria-expanded\": showMenu,\n    \"aria-haspopup\": \"true\"\n  };\n}\n\nfunction getTextfieldProps({\n  selectedIndex,\n  setSelectedIndex,\n  completions,\n  value,\n  setValue,\n  selectItem,\n  listboxId,\n  showMenu,\n  setShowMenu,\n  textfieldRef\n}) {\n  let onKeyDown = e => {\n    switch (e.key) {\n      case \"ArrowDown\":\n        setSelectedIndex(\n          selectedIndex == null ? 0 : (selectedIndex + 1) % completions.length\n        );\n        break;\n      case \"ArrowUp\":\n        setSelectedIndex(\n          selectedIndex == null\n            ? completions.length - 1\n            : (selectedIndex - 1 + completions.length) % completions.length\n        );\n        break;\n      case \"Enter\":\n        selectItem(selectedIndex);\n        break;\n      case \"Escape\":\n        setShowMenu(false);\n        break;\n    }\n  };\n  \n  return {\n    value,\n    ref: textfieldRef,\n    onChange: e => setValue(e.target.value),\n    \"aria-controls\": showMenu ? listboxId : undefined,\n    \"aria-autocomplete\": \"list\",\n    \"aria-activedescendant\":\n      showMenu && selectedIndex !== null\n        ? listboxId + \"-option-\" + selectedIndex\n        : undefined,\n    role: \"textbox\",\n    autoComplete: \"off\",\n    onKeyDown: onKeyDown,\n    onBlur: () => setShowMenu(false),\n    onFocus: () => {\n      if (value) {\n        setShowMenu(true);\n      }\n    }\n  };\n}\n\nfunction getButtonProps({ toggleMenu, textfieldRef }) {\n  return {\n    tabIndex: \"-1\",\n    onMouseDown: e => e.preventDefault(),\n    onMouseUp: e => e.preventDefault(),\n    onClick: () => {\n      textfieldRef.current.focus();\n      toggleMenu();\n    }\n  };\n}\n\nfunction getMenuProps({ listboxId }) {\n  return {\n    id: listboxId,\n    role: \"listbox\"\n  };\n}\n\nfunction getMenuItemProps(\n  { listboxId, selectedIndex, setSelectedIndex, selectItem },\n  index\n) {\n  return {\n    role: \"option\",\n    id: listboxId + \"-option-\" + index,\n    tabIndex: selectedIndex === index ? 0 : -1,\n    \"aria-selected\": selectedIndex === index,\n    onMouseEnter: () => setSelectedIndex(index),\n    onMouseDown: e => e.preventDefault(),\n    onClick: () => selectItem(index)\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled StatusLight Component\nDESCRIPTION: Example of a disabled StatusLight component. The isDisabled prop changes the visual appearance but does not convey state information to assistive technology.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/statuslight/docs/StatusLight.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<StatusLight variant=\"yellow\" isDisabled >Yellow</StatusLight>\n```\n\n----------------------------------------\n\nTITLE: Disabling Tree Items Dynamically with disabledKeys (TSX)\nDESCRIPTION: Illustrates using the `disabledKeys` prop on the `Tree` component to disable items based on their keys (IDs). This is particularly useful for dynamic collections where the disabled state might change. An item is disabled if its key is in `disabledKeys` or if it has the `isDisabled` prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n// Using the same tree as above\n<PokemonEvolutionTree selectionMode=\"multiple\" disabledKeys={[3]} />\n```\n```\n\n----------------------------------------\n\nTITLE: Metadata for useTreeState Documentation\nDESCRIPTION: Defines the metadata for the documentation page, including category and keywords for search and organization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tree/docs/useTreeState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ncategory: Collections\nkeywords: [tree, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook State Interface Documentation (JSX)\nDESCRIPTION: JSX code block using the `ClassAPI` component from `@react-spectrum/docs` to display the interface definition (properties, methods) of the state object returned by the `useTooltipTriggerState` hook, referencing the imported documentation data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tooltip/docs/useTooltipTriggerState.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useTooltipTriggerState.return.id]} />\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled States for NumberField and Inputs - React Spectrum - CSS\nDESCRIPTION: CSS snippet for visually differentiating disabled state of NumberField components and their inputs/buttons. Uses [data-disabled] attribute selectors to set border and text color to disabled theme variables, applying styles for both react-aria-Button and react-aria-Input subcomponents.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-NumberField {\n  .react-aria-Button {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n\n  .react-aria-Input {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n  \n```\n\n----------------------------------------\n\nTITLE: Disallowing Empty Selection in TreeView (TSX)\nDESCRIPTION: This code snippet sets up a TreeView that forces at least one item to remain selected, by enabling disallowEmptySelection and assigning a defaultSelectedKeys value. It requires ExampleTree, with selectionMode='single'. Inputs are default selected keys; output prevents deselecting the last selected item. Use this when users must always have an item selected in the tree.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/docs/TreeView.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleTree\n  aria-label=\"Example tree with disallowed empty selection\"\n  defaultExpandedKeys={['projects', 'project-2']}\n  selectionMode=\"single\"\n  defaultSelectedKeys={['document-a']}\n  /*- begin highlight -*/\n  disallowEmptySelection\n  /*- end highlight -*/\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the TimeField Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'TimeField' component. It renders a field allowing users to enter and edit time values using the keyboard. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<TimeField />\n```\n\n----------------------------------------\n\nTITLE: ActionMenu with Disabled Items in React Spectrum\nDESCRIPTION: Shows how to selectively disable specific menu items by using the disabledKeys prop with an array of item keys to disable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionMenu\n  items={[\n    {name: 'Undo', id: 'undo'},\n    {name: 'Redo', id: 'redo'},\n    {name: 'Cut', id: 'cut'},\n    {name: 'Copy', id: 'copy'},\n    {name: 'Paste', id: 'paste'}\n  ]}\n  disabledKeys={['redo', 'paste']}>\n  {item => <Item>{item.name}</Item>}\n</ActionMenu>\n```\n\n----------------------------------------\n\nTITLE: Applying Cross Axis Offset to Popover using PopoverTrigger in TSX\nDESCRIPTION: This snippet demonstrates the `crossOffset` prop on `PopoverTrigger`, which adjusts the popover's position along the axis perpendicular to the main placement axis. Here, the popover is placed 'top' and shifted 100 pixels horizontally (cross axis).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<PopoverTrigger placement=\"top\" crossOffset={100} label=\"Trigger\">\n  <Dialog>\n    Offset by an additional 100px.\n  </Dialog>\n</PopoverTrigger>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Sizes for ColorSliders in React (TSX)\nDESCRIPTION: Illustrates applying custom dimensions to `ColorSlider` components. The `height` prop is used for vertically oriented sliders, while the `width` prop (along with `maxWidth` for responsiveness) is used for horizontal sliders. `Flex` is used for layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSlider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-300\">\n  <ColorSlider defaultValue=\"#7f0000\" channel=\"red\" orientation=\"vertical\" height=\"size-3600\" />\n  <ColorSlider defaultValue=\"#7f0000\" channel=\"red\" width=\"size-3600\" maxWidth=\"100%\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Implementing DateField Component in React\nDESCRIPTION: This snippet demonstrates how to create a DateField component using React Aria hooks. It utilizes useDateFieldState, useDateField, and useDateSegment hooks to manage the date input functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLocale} from '@react-aria/i18n';\nimport {useDateFieldState} from '@react-stately/datepicker';\nimport {useDateField, useDateSegment} from '@react-aria/datepicker';\n\nfunction DateField(props) {\n  let {locale} = useLocale();\n  let state = useDateFieldState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  let ref = React.useRef(null);\n  let {labelProps, fieldProps} = useDateField(props, state, ref);\n\n  return (\n    <div className=\"wrapper\">\n      <span {...labelProps}>{props.label}</span>\n      <div {...fieldProps} ref={ref} className=\"field\">\n        {state.segments.map((segment, i) =>\n          <DateSegment key={i} segment={segment} state={state} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction DateSegment({segment, state}) {\n  let ref = React.useRef(null);\n  let {segmentProps} = useDateSegment(segment, state, ref);\n\n  return (\n    <div\n      {...segmentProps}\n      ref={ref}\n      className={`segment ${segment.isPlaceholder ? 'placeholder' : ''}`}>\n      {segment.text}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cycling Fields with Rounding Option - React Spectrum - TypeScript\nDESCRIPTION: Shows how to use the cycle method with a round option, cycling a ZonedDateTime field (minute) to a specified increment with or without rounding. Requires @internationalized/date; uses parseZonedDateTime. Demonstrates passing an options object with {round: true} to align output to the nearest increment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = parseZonedDateTime('2022-02-03T09:22[America/Los_Angeles]');\n\ndate.cycle('minute', 15); // 2022-02-03T09:37:00-08:00[America/Los_Angeles]\ndate.cycle('minute', 15, {round: true}); // 2022-02-03T09:30:00-08:00[America/Los_Angeles]\n\ndate.cycle('minute', -15); // 2022-02-03T09:07:00-08:00[America/Los_Angeles]\ndate.cycle('minute', -15, {round: true}); // 2022-02-03T09:15:00-08:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Consuming Context Values using useSlottedContext Hook (TSX)\nDESCRIPTION: Shows how to directly consume context values using the `useSlottedContext` hook from `react-aria-components`. It demonstrates getting the context value for the default (un-slotted) case and for a specific named slot ('increment') by passing the slot name as the second argument.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useSlottedContext} from 'react-aria-components';\n\n// Consume the un-slotted value.\nlet buttonContext = useSlottedContext(ButtonContext);\n\n// Consume the value for a specific slot name.\nlet incrementButtonContext = useSlottedContext(ButtonContext, 'increment');\n```\n\n----------------------------------------\n\nTITLE: Styling FieldError List Elements (CSS)\nDESCRIPTION: CSS rules to style the unordered list (`ul`) within a `react-aria-FieldError` component. It removes default left padding and sets the list style position to `inside` for better alignment of error messages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-FieldError ul {\n  padding-left: 0;\n  list-style-position: inside;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing List Data with useListData Hook\nDESCRIPTION: Shows how to use the useListData hook to manage and update data for a list of items, including appending new items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from '@react-stately/data';\n\nlet list = useListData({\n  initialItems: [\n    {name: 'Aardvark'},\n    {name: 'Kangaroo'},\n    {name: 'Snake'}\n  ],\n  initialSelectedKeys: ['Kangaroo'],\n  getKey: item => item.name\n});\n\nfunction addAnimal(name) {\n  list.append({name});\n}\n\n<ListBox items={list.items}>\n  {item => <Item key={item.name}>{item.name}</Item>}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling of ColorSwatchPickerItem in React\nDESCRIPTION: Demonstrates how to apply dynamic styling to a ColorSwatchPickerItem based on its selected state using a function for the className prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorSwatchPickerItem className={({isSelected}) => isSelected ? 'border-black' : 'border-transparent'} />\n```\n\n----------------------------------------\n\nTITLE: Styling DateRangePicker with CSS Classes\nDESCRIPTION: Example of how to style a DateRangePicker component using CSS selectors. This demonstrates targeting the root component with the default class name provided by React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateRangePicker {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Orientation ActionGroup in React Spectrum\nDESCRIPTION: This example shows an ActionGroup with items aligned vertically along the y-axis by setting the orientation prop to \"vertical\". This creates a column of action buttons instead of the default row layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup orientation=\"vertical\">\n  <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n  <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n  <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling DatePicker Popover Width with CSS\nDESCRIPTION: This CSS rule targets the React Aria Popover component using its default class name (`.react-aria-Popover`) and a specific data attribute (`data-trigger=DatePicker`). It sets the popover's width to match the trigger element (likely the input group) using the `--trigger-width` CSS custom property, ensuring visual consistency between the input and the calendar popover.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover[data-trigger=DatePicker] {\n  width: var(--trigger-width);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using Frontmatter\nDESCRIPTION: This snippet uses YAML frontmatter syntax, common in Markdown-based documentation systems (like MDX), to set the title of the page to 'Page not found'. This metadata is typically processed by the documentation site generator.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/error.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Page not found\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Released React Spectrum Packages (Markdown)\nDESCRIPTION: This Markdown snippet lists the React Spectrum, React Aria, and associated packages and their version numbers that were released as part of the July 12, 2021 release. The list provides package names and their respective versions for easy reference by developers seeking to update or install these packages. There are no dependencies; this is documentation for informational purposes only. Inputs and outputs are not applicable, and it is intended for reference within the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-07-12.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- @adobe/react-spectrum@3.12.0\n- @react-aria/aria-modal-polyfill@3.3.2\n- @react-aria/combobox@3.0.0\n- @react-aria/listbox@3.3.0\n- @react-aria/overlays@3.7.1\n- @react-aria/searchfield@3.1.4\n- @react-aria/select@3.4.0\n- @react-spectrum/combobox@3.0.0\n- @react-spectrum/listbox@3.5.0\n- @react-spectrum/picker@3.3.0\n- @react-stately/combobox@3.0.0\n- @react-types/combobox@3.0.0\n- @react-types/listbox@3.2.0\n- @react-types/select@3.3.0\n- react-aria@3.8.0\n- react-stately@3.7.0\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing DatePicker Pagination Behavior in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Adjusts the pageBehavior prop to customize whether the DatePicker paginates by single months or by the number of visible months when navigating. This example shows single-month pagination with maxVisibleMonths set to 3, balancing overview and control.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_26\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker label=\\\"Appointment date\\\" maxVisibleMonths={3} pageBehavior=\\\"single\\\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding Documentation Metadata and Blog Listing in React Spectrum (Markdown)\nDESCRIPTION: This snippet defines documentation metadata (category, description) and embeds a Blog header along with a dynamic post listing using the PostListing component with a 'blog' type. It requires the React Spectrum documentation infrastructure to interpret and render custom components in Markdown. Inputs include static text and the PostListing component tag. Outputs are rendered blog listings in the documentation UI. Limitations include dependency on the React Spectrum docs system and lack of interactive features in pure Markdown.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncategory: Foundation\ndescription: React Spectrum blog\n---\n\n# Blog\n\n<PostListing type=\"blog\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Options in React Spectrum ComboBox (TSX)\nDESCRIPTION: Shows how to disable specific items in the ComboBox dropdown by passing an array of their keys to the `disabledKeys` prop. In this example, 'Cat' and 'Kangaroo' options are made non-interactive.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<ComboBox label=\"Favorite Animal\" disabledKeys={['cat', 'kangaroo']}>\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>\n```\n```\n\n----------------------------------------\n\nTITLE: Converting CalendarDateTime to ZonedDateTime (TypeScript/React)\nDESCRIPTION: Shows how to convert a CalendarDateTime to a ZonedDateTime using the toZoned function, including handling of ambiguous times during daylight saving transitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toZoned} from '@internationalized/date';\n\nlet date = new CalendarDateTime(2022, 2, 3, 9, 45);\ntoZoned(date, 'America/Los_Angeles'); // 2022-02-03T09:45-07:00[America/Los_Angeles]\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// A \"spring forward\" transition\nlet date = new CalendarDateTime(2020, 3, 8, 2);\ntoZoned(date, 'America/Los_Angeles'); // 2020-03-08T03:00:00-07:00[America/Los_Angeles]\ntoZoned(date, 'America/Los_Angeles', 'earlier'); // 2020-03-08T01:00:00-08:00[America/Los_Angeles]\ntoZoned(date, 'America/Los_Angeles', 'later'); // 2020-03-08T03:00:00-07:00[America/Los_Angeles]\n\n// A \"fall back\" transition\nlet date = new CalendarDateTime(2020, 11, 1, 1);\ntoZoned(date, 'America/Los_Angeles'); // 2020-11-01T01:00:00-07:00[America/Los_Angeles]\ntoZoned(date, 'America/Los_Angeles', 'earlier'); // 2020-11-01T01:00:00-07:00[America/Los_Angeles]\ntoZoned(date, 'America/Los_Angeles', 'later'); // 2020-11-01T01:00:00-08:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML block specifies frontmatter metadata for the blog post page. The `description` field provides a short summary of the release content, often used for SEO and previews. The `date` field indicates the publication date (April 11, 2025). This metadata is typically processed by a static site generator or framework (like Gatsby, Next.js with MDX) to configure the page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2025-04-11.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: In today's release we are excited to announce custom calendar support across all React Spectrum libraries! We have also added enhanced support for React Suspense and performance optimizations for collections in React Aria Components, reduced the bundle sizes of our libraries as a whole, and now support `onClick` as an alias for `onPress`.\ndate: 2025-04-11\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Orientation for React Spectrum ColorSlider\nDESCRIPTION: This example shows how to configure a `MyColorSlider` component for vertical orientation by setting the `orientation` prop to `\"vertical\"`. It also demonstrates hiding the default visual label, relying on the default `aria-label` (e.g., 'Hue') for accessibility. The `defaultValue` prop is used for uncontrolled state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSlider\n  orientation=\"vertical\"\n  defaultValue=\"hsb(0, 100%, 100%)\"\n  channel=\"hue\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation in ColorField with React Aria\nDESCRIPTION: This snippet demonstrates how to add validation to a ColorField component using the isRequired prop and FieldError element. It shows the basic structure of a form with a ColorField and submit button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, FieldError, Button} from 'react-aria-components';\n\n<Form>\n  <ColorField name=\"color\" isRequired>\n    <Label>Color</Label>\n    <Input />\n    <FieldError />\n  </ColorField>\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Slider in React Spectrum\nDESCRIPTION: Shows how to use Slider in both controlled and uncontrolled states with React hooks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [value, setValue] = React.useState(25);\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <Slider\n        label=\"Cookies to buy (Uncontrolled)\"\n        defaultValue={25} />\n      <Slider\n        label=\"Cookies to buy (Controlled)\"\n        value={value}\n        onChange={setValue} />\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fields in CalendarDate\nDESCRIPTION: Demonstrates how to use the set method to modify specific fields of a CalendarDate, returning a new CalendarDate with updated values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new CalendarDate(2022, 2, 3);\ndate.set({day: 10}); // 2022-02-10\ndate.set({month: 5}); // 2022-05-03\ndate.set({year: 2023, month: 10, day: 16}); // 2023-10-16\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection ActionGroup with Default Selection in React Spectrum\nDESCRIPTION: This example shows a single selectable ActionGroup for text alignment that enforces a default selection. When collapsed, the selected item is displayed inside the menu button without requiring a summaryIcon.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup\n  aria-label=\"Text alignment\"\n  overflowMode=\"collapse\"\n  selectionMode=\"single\"\n  defaultSelectedKeys={['left']}\n  disallowEmptySelection\n  buttonLabelBehavior=\"hide\"\n  isEmphasized\n  maxWidth={100}>\n  <Item key=\"left\">\n    <TextAlignLeft />\n    <Text>Align Left</Text>\n  </Item>\n  <Item key=\"center\">\n    <TextAlignCenter />\n    <Text>Align Center</Text>\n  </Item>\n  <Item key=\"right\">\n    <TextAlignRight />\n    <Text>Align Right</Text>\n  </Item>\n  <Item key=\"justify\">\n    <TextAlignJustify />\n    <Text>Justify</Text>\n  </Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Dialog with Close Function Pattern\nDESCRIPTION: Demonstrates how to pass the DialogTrigger's close function to the Dialog's buttons for proper dialog dismissal.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/DialogTrigger.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Checkout</ActionButton>\n  {(close) => (\n    <Dialog>\n      <Heading>Confirm checkout?</Heading>\n      <Divider />\n      <Content>\n        <Text>\n          You have 5 items in your cart. Proceed to checkout?\n        </Text>\n      </Content>\n      <ButtonGroup>\n        <Button variant=\"secondary\" onPress={close}>Cancel</Button>\n        <Button variant=\"accent\" onPress={close} autoFocus>Confirm</Button>\n      </ButtonGroup>\n    </Dialog>\n  )}\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Converting Custom Calendar Date to Gregorian Calendar in TypeScript\nDESCRIPTION: This code snippet shows how to convert a date from the custom 4-5-4 calendar to the Gregorian calendar using the toCalendar function from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Calendar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar, toCalendar} from '@internationalized/date';\n\nlet date = new CalendarDate(new Custom454(), 2024, 2, 1);\nlet gregorianDate = toCalendar(date, new GregorianCalendar());\n// => new CalendarDate(new GregorianCalendar(), 2024, 1, 29);\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to React Aria DateField (TSX)\nDESCRIPTION: This snippet demonstrates how to add supplementary help text to a `DateField` component. A `Text` component with the `slot=\"description\"` attribute is nested within the `DateField` to provide users with additional context or instructions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField granularity=\"hour\">\n  <Label>Appointment time</Label>\n  <DateInput>\n    {segment => <DateSegment segment={segment} />}\n  </DateInput>\n  {/*- begin highlight -*/}\n  <Text slot=\"description\">Please select a weekday between 9 AM and 5 PM.</Text>\n  {/*- end highlight -*/}\n</DateField>\n```\n\n----------------------------------------\n\nTITLE: Styling DateField Description Text (CSS)\nDESCRIPTION: This CSS snippet targets the description text within a React Aria `DateField`. It uses the attribute selector `[slot=description]` within the `.react-aria-DateField` scope to apply specific styling, such as setting the font size.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateField {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling basePath in Next.js Pages Router\nDESCRIPTION: Shows how to handle the `basePath` configuration in Next.js Pages Router when using `RouterProvider`. It adds the `useHref` prop, providing a function that prepends `router.basePath` to the hrefs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/_app.tsx\n// ...\n\nexport default function MyApp({Component, pageProps}: AppProps) {\n  let router = useRouter();\n\n  return (\n    <RouterProvider \n      navigate={(href, opts) => router.push(href, undefined, opts)}\n      /*- begin highlight -*/\n      useHref={(href: string) => router.basePath + href}\n      /*- end highlight -*/\n    >\n      <Component {...pageProps} />\n    </RouterProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS v4 Configuration for React Aria Components\nDESCRIPTION: Configures Tailwind CSS v4 by importing the core Tailwind styles and the tailwindcss-react-aria-components plugin via CSS import statements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/loading-progress.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Using Custom Context-Aware Label in a Select - React TSX\nDESCRIPTION: Demonstrates replacing the default Select label with a custom implementation that correctly consumes context props to ensure accessibility. Requires a custom label component built as described in the previous snippet. The Select will render with the supplied MyCustomLabel as its label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\n<Select>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/*- end highlight -*/}\n  {/* ... */}\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook Documentation using React Spectrum Components (JSX)\nDESCRIPTION: Utilizes React Spectrum documentation components to display information about the `useDraggableCollectionState` hook. `PageDescription` shows the general description, `HeaderInfo` displays package data, `FunctionAPI` details the hook's signature and parameters, and `InterfaceType` (within a `TypeContext.Provider`) outlines the structure of the hook's return value, using data imported via the `docs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/dnd/docs/useDraggableCollectionState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PageDescription>{docs.exports.useDraggableCollectionState.description}</PageDescription>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useDraggableCollectionState']} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.useDraggableCollectionState} links={docs.links} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeContext.Provider value={docs.links}>\n  <InterfaceType properties={docs.links[docs.exports.useDraggableCollectionState.return.id].properties} />\n</TypeContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Styling the Basic Autocomplete Example Container in CSS\nDESCRIPTION: Provides custom CSS styles for the basic Autocomplete example. It styles the main container `.autocomplete`, sets layout properties, dimensions, borders, padding, and background. It also styles the nested `SearchField` and `Menu` components using their specific React Aria CSS classes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.autocomplete {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-width: 300px;\n  height: 180px;\n  border: 1px solid var(--border-color);\n  padding: 16px;\n  border-radius: 10px;\n  background: var(--overlay-background);\n\n  .react-aria-SearchField {\n    width: 100%;\n  }\n\n  .react-aria-Menu {\n    flex: 1;\n    overflow: auto;\n  }\n\n  .react-aria-Label {\n    margin-bottom: .5em;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Time Durations\nDESCRIPTION: Demonstrates parsing ISO 8601 duration strings into Duration objects\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Time.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nparseDuration('PT20H35M15S')\n// => {hours: 20, minutes: 35, seconds: 15}\n\nparseDuration('-PT20H35M15S')\n// =>  {hours: -20, minutes: -35, seconds: -15}\n\nparseDuration('PT20H35M15,75S')\n// => {hours: 20, minutes: 35, seconds: 15.75}\n```\n\n----------------------------------------\n\nTITLE: Implementing Low-level Drag and Drop in ListView - React Spectrum (TypeScript/TSX)\nDESCRIPTION: This TypeScript/TSX snippet demonstrates a ListView component in React Spectrum that leverages the useDragAndDrop hook for sophisticated drag and drop handling. It defines custom drop operations and handles dropped files and directories based on type constraints, updating list state accordingly. Dependencies include @react-spectrum/dnd for drag/drop types and hooks, and standard React Spectrum ListView components. Key parameters managed in the code include dropped item metadata, drop target position, allowed drop operations, and type checks. The main output is a ListView that supports controlled drag and drop insertion and file filtering, with real-time updates to item counts and structure. Limitations include assumptions about the context (React environment, ListView and Item components, and handler method availability).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {FileDropItem, DirectoryDropItem} from '@react-spectrum/dnd';\\nimport {DIRECTORY_DRAG_TYPE} from '@react-spectrum/dnd';\\n\\nfunction DroppableListLowLevelAPI() {\\n  let list = useListData({\\n    initialItems: [\\n      {id: 1, name: 'Images', contains: 0, accept: ['image/png', 'image/jpeg']},\\n      {id: 2, name: 'Videos', contains: 0, accept: ['video/mp4']},\\n      {id: 3, name: 'Documents', contains: 0, accept: ['text/plain', 'application/pdf']}\\n    ]\\n  });\\n\\n  let {dragAndDropHooks} = useDragAndDrop({\\n    onDrop: async (e) => {\\n      let items = await Promise.all(\\n        e.items\\n          .filter((item) => {\\n            // Check if dropped item is accepted.\\n            if (item.kind === 'file' && e.target.type === 'item' && e.target.dropPosition === 'on') {\\n              let folder = list.getItem(e.target.key);\\n              return folder.accept.includes(item.type);\\n            }\\n\\n            return item.kind === 'directory';\\n          })\\n          .map(async (item: FileDropItem | DirectoryDropItem) => {\\n            // Collect child count from dropped directories.\\n            let contains = 0;\\n            let accept;\\n            if (item.kind === 'directory') {\\n              for await (let _ of item.getEntries()) {\\n                contains++;\\n                accept = [];\\n              }\\n            }\\n\\n            return {\\n              id: Math.random(),\\n              name: item.name,\\n              contains,\\n              accept\\n            };\\n          })\\n      );\\n\\n      // Update item count if dropping on an item, otherwise insert the new items in the list.\\n      if (e.target.type === 'item') {\\n        if (e.target.dropPosition === 'on') {\\n          let item = list.getItem(e.target.key);\\n          list.update(e.target.key, {\\n            ...item,\\n            contains: item.contains + items.length\\n          });\\n        } else if (e.target.dropPosition === 'before') {\\n          list.insertBefore(e.target.key, ...items);\\n        } else if (e.target.dropPosition === 'after') {\\n          list.insertAfter(e.target.key, ...items);\\n        }\\n      } else {\\n        // If dropping on the root, append the directory to the bottom of the list\\n        list.append(...items);\\n      }\\n    },\\n    getDropOperation: (target, types, allowedOperations) => {\\n      // When dropping on an item, check whether the item accepts the drag types and cancel if not.\\n      if (target.type === 'item' && target.dropPosition === 'on') {\\n        let item = list.getItem(target.key);\\n        return item.accept && item.accept.some((type) => types.has(type))\\n          ? allowedOperations[0]\\n          : 'cancel';\\n      }\\n\\n      // If dropping a directory between items, support a copy operation.\\n      return types.has(DIRECTORY_DRAG_TYPE) ? 'copy' : 'cancel';\\n    }\\n  });\\n\\n  return (\\n    <ListView\\n      aria-label=\\\"Low-level api droppable list view example\\\"\\n      width=\\\"size-3600\\\"\\n      height=\\\"size-3600\\\"\\n      selectionMode=\\\"multiple\\\"\\n      items={list.items}\\n      dragAndDropHooks={dragAndDropHooks}>\\n      {item => (\\n        <Item textValue={item.name} hasChildItems>\\n          <Folder />\\n          <Text>{item.name}</Text>\\n          <Text slot=\\\"description\\\">{`contains ${item.contains} item(s)`}</Text>\\n        </Item>\\n      )}\\n    </ListView>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Cycling Fields in CalendarDate\nDESCRIPTION: Shows how to use the cycle method to increment or decrement a single field in a CalendarDate, with examples of wrapping behavior and rounding options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new CalendarDate(2022, 12, 31);\ndate.cycle('day', 1); // 2022-12-01\ndate.cycle('month', 1); // 2022-01-31\n\nlet date = new CalendarDate(2022, 1, 1);\ndate.cycle('day', -1); // 2022-01-31\ndate.cycle('month', -1); // 2022-12-01\n\nlet date = new CalendarDate(2022, 2, 3);\n\ndate.cycle('year', 5); // 2027-02-03\ndate.cycle('year', 5, {round: true}); // 2025-02-03\n\ndate.cycle('year', -5); // 2017-02-03\ndate.cycle('year', -5, {round: true}); // 2020-02-03\n```\n\n----------------------------------------\n\nTITLE: Importing Core React Spectrum Components and Icons - TypeScript\nDESCRIPTION: This snippet imports picker, text, icon components, and hooks from React Spectrum and related libraries. '@react-spectrum/picker' and '@react-spectrum/text' offer UI components, while icons are pulled from '@spectrum-icons/workflow'. Accessibility and state-management hooks such as useSwitch, useToggleState, useFocusRing, and VisuallyHidden are also imported, enabling adaptive, accessible users experiences. These imports are foundational for building interactive, accessible React UIs, and require installation of the specified libraries. Inputs are not required—this is a configuration-only code block.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/introducing-react-spectrum.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Picker, Item, Section} from '@react-spectrum/picker';\\nimport {Text} from '@react-spectrum/text';\\nimport Book from '@spectrum-icons/workflow/Book';\\nimport BulkEditUsers from '@spectrum-icons/workflow/BulkEditUsers';\\nimport Draw from '@spectrum-icons/workflow/Draw';\\nimport {useSwitch} from '@react-aria/switch';\\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\\nimport {useToggleState} from '@react-stately/toggle';\\nimport {useFocusRing} from '@react-aria/focus';\n```\n\n----------------------------------------\n\nTITLE: Targeting Toolbar Component with CSS Selector for Customization (CSS)\nDESCRIPTION: Highlights how to use the .react-aria-Toolbar CSS selector to target the Toolbar for custom styling. The empty block indicates a location for either overriding default styles or adding new ones. The react-aria-components library must be included, and className attributes should be present on components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toolbar.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Toolbar {\\n  /* ... */\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Stack with Flex in React Spectrum\nDESCRIPTION: Demonstrates creating a simple vertical stack layout using the Flex component with column direction and predefined spacing using Spectrum dimension variables.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Flex.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" width=\"size-2000\" gap=\"size-100\">\n  <View backgroundColor=\"celery-600\" height=\"size-800\" />\n  <View backgroundColor=\"blue-600\" height=\"size-800\" />\n  <View backgroundColor=\"magenta-600\" height=\"size-800\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in React\nDESCRIPTION: This snippet imports the Layout component from @react-spectrum/docs and exports it as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useKeyboard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorSwatch Component in React Spectrum\nDESCRIPTION: This snippet demonstrates the implementation of a ColorSwatch component using the useColorSwatch hook from React Aria. It provides a visual preview of a color value with support for transparency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useColorSwatch} from '@react-aria/color';\n\nfunction ColorSwatch(props) {\n  let {colorSwatchProps, color} = useColorSwatch(props);\n\n  return (\n    <span \n      {...colorSwatchProps}\n      style={{\n        ...colorSwatchProps.style,\n        display: 'inline-block',\n        width: 32,\n        height: 32,\n        borderRadius: 4,\n        background: `linear-gradient(${color}, ${color}),\n          repeating-conic-gradient(#CCC 0% 25%, white 0% 50%) 50% / 16px 16px`,\n        ...props.style\n      }} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Popover Flipping Behavior with React Spectrum in TypeScript\nDESCRIPTION: Demonstrates how to create two popover examples using React Spectrum, where one popover uses the default flipping behavior (automatically adjusts its position if it can't fully render below the trigger) and another with flipping explicitly turned off (using shouldFlip={false}). Requires React and React Spectrum components such as Button, DialogTrigger, and a custom MyPopover. The main parameter of interest is shouldFlip, which influences popover positioning. Inputs are button presses, and outputs are visible popovers whose position depends on available space and flip settings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\\\"flex-row\\\">\\n  <DialogTrigger>\\n    <Button>Default</Button>\\n    <MyPopover placement=\\\"bottom\\\">\\n      This is a popover that will flip if it can't fully render below the button.\\n    </MyPopover>\\n  </DialogTrigger>\\n\\n  <DialogTrigger>\\n    <Button>shouldFlip=false</Button>\\n    <MyPopover placement=\\\"bottom\\\" shouldFlip={false}>\\n      This is a popover that won't flip if it can't fully render below the button.\\n    </MyPopover>\\n  </DialogTrigger>\\n</div>\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled ColorField Component\nDESCRIPTION: Demonstrates how to create a controlled ColorField component using React state and the parseColor function from React Stately.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('#7f007f'));\n  return (\n    <>\n      <ColorField aria-label=\"Color\" value={color} onChange={setColor} />\n      <p>Current color value: {color.toString('hex')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling DateField Components with CSS\nDESCRIPTION: CSS styles for customizing the appearance of DateField, DateInput, and DateSegment components, including focus states and placeholders.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-DateField {\n  color: var(--text-color);\n  display: flex;\n  flex-direction: column;\n}\n\n.react-aria-DateInput {\n  display: inline;\n  padding: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--field-background);\n  width: fit-content;\n  min-width: 150px;\n  white-space: nowrap;\n  forced-color-adjust: none;\n\n  &[data-focus-within] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n}\n\n.react-aria-DateSegment {\n  padding: 0 2px;\n  font-variant-numeric: tabular-nums;\n  text-align: end;\n  color: var(--text-color);\n\n  &[data-type=literal] {\n    padding: 0;\n  }\n\n  &[data-placeholder] {\n    color: var(--text-color-placeholder);\n    font-style: italic;\n  }\n\n  &:focus {\n    color: var(--highlight-foreground);\n    background: var(--highlight-background);\n    outline: none;\n    border-radius: 4px;\n    caret-color: transparent;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling HTML Elements with Style Macro\nDESCRIPTION: Example of using style macros with a standard HTML div element. The style macro is used within the className prop to apply styles like margin.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-vite-project/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS for React Aria Components\nDESCRIPTION: Imports a global Tailwind CSS stylesheet to be used with the component example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/status-select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Generating Chroma Gradient in OKLCH\nDESCRIPTION: This CSS snippet creates a vertical gradient showing different chroma levels in OKLCH. It visually represents the ranges used for chroma descriptors like grayish, pale, and vibrant.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\nbackground: 'linear-gradient(in oklab to bottom, oklch(70% 0 0), oklch(70% 0.37 0))'\n```\n\n----------------------------------------\n\nTITLE: Rendering LogicButton with Variant Property (TypeScript/TSX)\nDESCRIPTION: Shows a basic example of rendering a LogicButton with the 'and' variant. The button will be labeled 'And', demonstrating passing a visible label as a child. No additional dependencies are required aside from React and @react-spectrum/button. The 'variant' prop determines the logic operator displayed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/LogicButton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<LogicButton variant=\"and\">And</LogicButton>\n```\n\n----------------------------------------\n\nTITLE: Importing Keyboard Component for Inline Use - JavaScript\nDESCRIPTION: This snippet imports the 'Keyboard' component from the '@react-spectrum/text' package, enabling usage of special inline icons or formatting for keyboard keys (such as Escape). Typically used in JSX documentation or examples, it requires React and the '@react-spectrum/text' package. No parameters are needed for the import itself.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/accessibility.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Keyboard} from '@react-spectrum/text';\n```\n\n----------------------------------------\n\nTITLE: Drag End Operation Handler in React Spectrum\nDESCRIPTION: Implementation of onDragEnd handler to manage drag operations completion, specifically handling move operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Adobe Photoshop'},\n      {id: 2, name: 'Adobe XD'},\n      {id: 3, name: 'Adobe Dreamweaver'},\n      {id: 4, name: 'Adobe InDesign'},\n      {id: 5, name: 'Adobe Connect'}\n    ]\n  });\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    onDragEnd(e) {\n      if (e.dropOperation === 'move') {\n        list.remove(...e.keys);\n      }\n    }\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <MyGridList aria-label=\"Draggable list\" selectionMode=\"multiple\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <MyItem>{item.name}</MyItem>}\n      </MyGridList>\n      <DroppableGridList />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying OKLCH Color Wheel in CSS\nDESCRIPTION: This CSS snippet creates a circular color wheel using the OKLCH color space. It shows how OKLCH provides more uniform lightness across all hues compared to HSL.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\nbackground: `radial-gradient(var(--page-background) 0% 25%, transparent 20%), conic-gradient(in oklch longer hue, oklch(70% 0.25 0), oklch(70% 0.25 360))`\n```\n\n----------------------------------------\n\nTITLE: Using the MenuHeading Component in React Spectrum Menus (JSX)\nDESCRIPTION: Represents a non-interactive heading within a React Spectrum Menu, used to visually group related menu items. It is mentioned as an element used inside a Menu.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuHeading/>\n```\n\n----------------------------------------\n\nTITLE: useDrag Hook Interface Definition\nDESCRIPTION: TypeScript interfaces for the useDrag hook that enables draggable elements. Includes definitions for drag items, events, operations, and hook options and results.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2020-v3-dnd.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DragItem {\n  types: Iterable<string>,\n  getData: (type: string) => string\n}\n\ninterface DragDropEvent {\n  x: number,\n  y: number\n}\n\ninterface DragStartEvent extends DragDropEvent {\n  type: 'dragstart'\n}\n\ninterface DragMoveEvent extends DragDropEvent {\n  type: 'dragmove'\n}\n\ntype DropOperation = 'copy' | 'link' | 'move' | 'cancel';\ninterface DragEndEvent extends DragDropEvent {\n  type: 'dragend',\n  dropOperation: DropOperation\n}\n\ninterface DragOptions {\n  onDragStart?: (e: DragStartEvent) => void,\n  onDragMove?: (e: DragMoveEvent) => void,\n  onDragEnd?: (e: DragEndEvent) => void,\n  getItems: () => DragItem[],\n  renderPreview?: (items: DragItem[]) => JSX.Element,\n  getAllowedDropOperations?: () => DropOperation[]\n}\n\ninterface DragResult {\n  dragProps: HTMLAttributes<HTMLElement>,\n  dragButtonProps: ButtonHTMLAttributes<HTMLButtonElement>,\n  isDragging: boolean\n}\n\ndeclare function useDrag(options: DragOptions): DragResult;\n```\n\n----------------------------------------\n\nTITLE: Using Icon and Text in a ToggleButton in TSX\nDESCRIPTION: This example shows how to render a `ToggleButton` containing both an icon (imported as `Pin` from `@spectrum-icons/workflow`) and a visible text label using the `Text` component from `@react-spectrum/text`. Both the icon and text are passed as children.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ToggleButton.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from '@react-spectrum/text';\nimport Pin from '@spectrum-icons/workflow/PinOff';\n\n<ToggleButton>\n  <Pin />\n  <Text>Icon + Label</Text>\n</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Using the TagGroup Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'TagGroup' component. It renders a group for displaying a list of tags (items), with support for keyboard navigation and item removal. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<TagGroup />\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Months in DatePicker in React Spectrum (TypeScript/TSX)\nDESCRIPTION: Sets the maxVisibleMonths prop to display up to three months in the calendar popover, allowing users to browse wider date ranges efficiently. Stateless, requires only maxVisibleMonths and label. Useful in booking and scheduling interfaces.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_25\n\nLANGUAGE: TSX\nCODE:\n```\n<DatePicker label=\\\"Appointment date\\\" maxVisibleMonths={3} />\n```\n\n----------------------------------------\n\nTITLE: CSS for Invalid Checkbox State\nDESCRIPTION: CSS code that styles the invalid state of a checkbox with different colors for the border and background.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Checkbox {\n  &[data-invalid] {\n    .checkbox {\n      --checkmark-color: var(--gray-50);\n      border-color: var(--invalid-color);\n    }\n\n    &[data-pressed] .checkbox {\n      border-color: var(--invalid-color-pressed);\n    }\n\n    &[data-selected],\n    &[data-indeterminate] {\n      .checkbox {\n        background: var(--invalid-color);\n      }\n\n      &[data-pressed] .checkbox {\n        background: var(--invalid-color-pressed);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Focus-Managed Popover Dialog in TSX\nDESCRIPTION: This TSX snippet demonstrates creating an accessible popover dialog using React Aria components (`DialogTrigger`, `Popover`, `Dialog`, `Button`, `Heading`) and Tailwind Starter components (`TextField`). It includes an icon button trigger, a popover with an arrow, form fields within the dialog, and automatic focus management (`autoFocus` conditionally applied). This example is used to illustrate focus management features.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx snippet\nimport {TextField} from 'tailwind-starter/TextField';\nimport {Popover} from 'tailwind-starter/Popover';\nimport {Button} from 'tailwind-starter/Button';\nimport {Dialog, DialogTrigger, Heading} from 'react-aria-components';\nimport {CircleUser} from 'lucide-react';\n\n<div className=\"flex items-center justify-center h-full\">\n  <DialogTrigger>\n    <Button variant=\"secondary\" className=\"w-9 h-9 p-0\" aria-label=\"Account\"><CircleUser aria-hidden className=\"inline w-5 h-5\" /></Button>\n    <Popover showArrow className=\"w-[250px]\">\n      <Dialog className=\"outline outline-0 p-4 overflow-auto flex flex-col gap-2\">\n        <Heading slot=\"title\" className=\"text-lg font-semibold mb-2\">Your Account</Heading>\n        <TextField label=\"First Name\" defaultValue=\"Devon\" autoFocus={navigator.maxTouchPoints === 0} />\n        <TextField label=\"Last Name\" defaultValue=\"Govett\" />\n      </Dialog>\n    </Popover>\n  </DialogTrigger>\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in React Spectrum Docs\nDESCRIPTION: Imports the `Layout` component from `@react-spectrum/docs`. This component likely provides the overall page structure and styling for the documentation page within the React Spectrum documentation site. It is then immediately exported as the default export for this module, making it the main component rendered for this documentation route.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/utils/docs/mergeProps.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Breadcrumbs Render Props - JSX\nDESCRIPTION: Demonstrates use of render props in Breadcrumbs to render either a <strong> element for the current item or a Link for others, based on item state. This enables custom rendering and accessibility of breadcrumb navigation. The snippet requires React, Breadcrumbs, Breadcrumb, and Link components, and expects an array of items as a prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumbs items={items}>\n  {(item) => (\n    <Breadcrumb>\n      {({isCurrent}) => isCurrent ? <strong>{item.label}</strong> : <Link>{item.label}</Link>}\n    </Breadcrumb>\n  )}\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Component for DateSegment Using React (TypeScript)\nDESCRIPTION: This snippet shows how to create a custom wrapper component for DateSegment that allows passing a custom className to extend styling or behavior. The function receives props and uses them to re-render MyDateSegment while appending a new class. There are no additional dependencies beyond React itself. The input props are those of DateSegment; the output is a React element for a styled segment. This method should be used for light customization at the component level.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyDateSegment(props) {\n  return <MyDateSegment {...props} className=\"my-date-segment\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Assets and Layout Components in React\nDESCRIPTION: This snippet imports various assets (MP4 videos and PNG images) using URL imports and layout components (BlogPostLayout, Video, Image) from '@react-spectrum/docs'. It sets up the necessary resources and layout structure for the blog post.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-combobox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport comboboxAccessibilityUrl from 'url:../assets/combobox-accessibility.mp4';\nimport comboboxScrollingUrl from 'url:../assets/combobox-scrolling-safari.mp4';\nimport comboboxVisualViewportUrl from 'url:../assets/combobox-visual-viewport.mp4';\nimport comboboxExampleImageUrl from 'url:../assets/combobox-example.png';\nimport screenreaderSpreadsheetImageUrl from 'url:../assets/screenreader-spreadsheet-combobox.png';\nimport comboboxVideoUrl from 'url:../assets/combobox.mp4';\n\nimport {BlogPostLayout, Video, Image} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple LogicButtons with Different Variants and Styling (TypeScript/TSX)\nDESCRIPTION: Provides an example of placing two LogicButtons side by side, each with different variants ('or' and 'and') and applying margin styling to the first button. Demonstrates layout and variant options for building logical input groups. Requires support for styling props such as marginEnd in the LogicButton component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/LogicButton.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<LogicButton variant=\"or\" marginEnd=\"20px\">Or</LogicButton>\n<LogicButton variant=\"and\">And</LogicButton>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Toolbar ClassName Based on Orientation Render Prop (JSX)\nDESCRIPTION: Illustrates using a render-prop function for the className attribute on Toolbar to apply different classes based on the orientation prop (vertical or horizontal). This enables responsive and utility-driven style approaches such as those provided by Tailwind CSS. Inputs are orientation state; outputs are dynamic class assignment. React and react-aria-components are required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toolbar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Toolbar className={({orientation}) => orientation === 'vertical' ? 'flex-col' : 'flex-row'}>\\n  {/* ... */}\\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Importing Client-Side Setup for React Spectrum Documentation in JSX\nDESCRIPTION: This snippet demonstrates how to import the client-side setup for the documentation site using a JSX import from '@react-spectrum/docs/src/client'. This prepares client-side scripts necessary for enabling interactive features within the documentation. No parameters are accepted, and the only prerequisite is access to the @react-spectrum/docs package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/SelectionManager.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@react-spectrum/docs/src/client';\n```\n\n----------------------------------------\n\nTITLE: Styling FieldGroup and Error Message for Grouped DatePickers in CSS\nDESCRIPTION: This CSS code styles the `fieldset` element used in the `FieldGroup` component example, adding padding and setting width to fit content. It also styles the error message element (identified by the `.invalid` class), setting its color, margin, and display property to provide visual feedback for the error state. It assumes the HTML structure generated by the corresponding TSX example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_32\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n\n.invalid {\n  color: var(--invalid-color);\n  margin-top: 1em;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-format Drag Data in React Spectrum\nDESCRIPTION: This snippet demonstrates how to provide multiple data formats for dragged items using the getItems function. It includes plain text, HTML, and a custom app-specific format.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet getItems = (keys) => (\n  [...keys].map(key => {\n    let item = items.get(key);\n    return {\n      'text/plain': item.name,\n      'text/html': `<${item.style}>${item.name}</${item.style}>`,\n      'my-app-custom-type': JSON.stringify(item)\n    };\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Checkbox with React Aria Components Context\nDESCRIPTION: This example demonstrates how to create a custom checkbox component that works with GridList by consuming from CheckboxContext. It uses useContextProps to merge local props with those provided via context, and implements checkbox functionality using useToggleState and useCheckbox hooks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_47\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {CheckboxProps} from 'react-aria-components';\nimport {CheckboxContext, useContextProps} from 'react-aria-components';\nimport {useToggleState} from 'react-stately';\nimport {useCheckbox} from 'react-aria';\n\nconst MyCustomCheckbox = React.forwardRef((props: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, CheckboxContext);\n  ///- end highlight -///\n\n  let state = useToggleState(props);\n  let {inputProps} = useCheckbox(props, state, ref);\n  return <input {...inputProps} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Simulating Mouse Drag/Move Events in Jest Tests using TSX\nDESCRIPTION: Shows how to simulate drag/move interactions for components like Slider or ColorArea. It requires setting up global `MouseEvent` mocks using `installMouseEvent` from `@react-spectrum/test-utils` and mocking `getBoundingClientRect` to provide necessary dimensions. The simulation uses `fireEvent` from `@testing-library/react` to dispatch `mouseDown`, `mouseMove`, and `mouseUp` events with specific coordinates.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {fireEvent} from '@testing-library/react';\nimport {installMouseEvent} from '@react-spectrum/test-utils';\ninstallMouseEvent();\n\nbeforeAll(() => {\n  jest.spyOn(window.HTMLElement.prototype, 'getBoundingClientRect').mockImplementation(() => ({top: 0, left: 0, width: 100, height: 10}));\n})\n\n// In test case\nlet sliderThumb = getByRole('slider').parentElement;\n\n// With fireEvent, move thumb from 0 to 50\nfireEvent.mouseDown(thumb, {clientX: 0, pageX: 0});\nfireEvent.mouseMove(thumb, {pageX: 50});\nfireEvent.mouseUp(thumb, {pageX: 50});\n```\n\n----------------------------------------\n\nTITLE: Partial Comparison of ZonedDateTime Using isSameMonth - React Spectrum - TypeScript\nDESCRIPTION: Shows how to perform partial comparisons (e.g., isSameMonth) between ZonedDateTime instances possibly in different calendar systems with @internationalized/date's isSameMonth. Demonstrates both matching and non-matching cases. Requires import of isSameMonth and parseZonedDateTime.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isSameMonth} from '@internationalized/date';\n\nisSameMonth(\n  parseZonedDateTime('2022-04-16T09:45[America/Los_Angeles]'),\n  parseZonedDateTime('2022-04-30T05:15[America/Los_Angeles]'),\n); // true\n\nisSameMonth(\n  parseZonedDateTime('2022-04-16T09:45[America/Los_Angeles]'),\n  parseZonedDateTime('2022-08-020T05:15[America/Los_Angeles]'),\n); // false\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Wrapper for TooltipTrigger\nDESCRIPTION: Example showing how to add a custom wrapper element inside a TooltipTrigger for styling purposes since TooltipTrigger itself doesn't render DOM elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<TooltipTrigger>\n  <div className=\"my-tooltip-trigger\">\n    {/* ... */}\n  </div>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label Component with Context Integration - React Spectrum (TypeScript)\nDESCRIPTION: Illustrates how to create a custom label component that consumes context from React Aria using useContextProps and LabelContext. This enables the seamless use of custom components for labels within TimeField while automatically receiving relevant props from context. Before returning the <label> element, props and ref are merged using the useContextProps hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  ///- end highlight -///\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Drops on Individual Items with React Spectrum (tsx)\nDESCRIPTION: This example shows how to enable dropping onto specific items within a `GridList` using the `onItemDrop` callback provided by `useDragAndDrop`. When an item is dropped onto another item, this function is triggered, receiving event details (`e`) which include the target item's key (`e.target.key`). In this specific case, it simply displays an alert indicating which item was dropped on.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    ///- begin highlight -///\n    onItemDrop(e) {\n      alert(`Dropped on ${e.target.key}`);\n    }\n    ///- end highlight -///\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      {/* see above */}\n      <DraggableGridList />\n      <MyGridList aria-label=\"Droppable list\" dragAndDropHooks={dragAndDropHooks}>\n        <MyItem id=\"applications\">Applications</MyItem>\n        <MyItem id=\"documents\">Documents</MyItem>\n        <MyItem id=\"pictures\">Pictures</MyItem>\n      </MyGridList>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Column Component with Sort Indicator\nDESCRIPTION: Implementation of a reusable Column component that includes a directional sort indicator. The component displays an upward arrow for ascending sort and a downward arrow otherwise.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColumnProps} from 'react-aria-components';\n\nexport function MyColumn(props: ColumnProps) {\n  return (\n    <Column {...props}>\n      {({allowsSorting, sortDirection}) => <>\n        {props.children}\n        {allowsSorting && (\n          <span aria-hidden=\"true\" className=\"sort-indicator\">\n            {sortDirection === 'ascending' ? '▲' : '▼'}\n          </span>\n        )}\n      </>}\n    </Column>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Link Component with External URL\nDESCRIPTION: Example showing a Link component with an external URL to Adobe's website, opening in a new tab.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Link href=\"https://adobe.com\" target=\"_blank\">Adobe.com</Link>\n```\n\n----------------------------------------\n\nTITLE: Vertical Collapsing ActionGroup in React Spectrum\nDESCRIPTION: This example shows a vertical ActionGroup with collapsing behavior when the height is too small to fit all buttons. The orientation prop is set to \"vertical\" and maxHeight limits the visible space.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup overflowMode=\"collapse\" orientation=\"vertical\" buttonLabelBehavior=\"hide\" maxHeight={150}>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>Duplicate</Text>\n  </Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component in React Aria\nDESCRIPTION: Basic import statement for the Link component from React Aria Components and defining the default Layout export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering React Spectrum Button Components Gallery\nDESCRIPTION: Creates a section showcasing various button components available in React Spectrum, including Button, ActionButton, ToggleButton, ButtonGroup, ActionGroup, and FileTrigger.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"Button.html\"\n  title=\"Button\"\n  description=\"A button allows a user to perform an action or to navigate to another page.\">\n  <Button />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ActionButton.html\"\n  title=\"ActionButton\"\n  description=\"An action button allows a user to perform an action.\">\n  <ActionButton />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ToggleButton.html\"\n  title=\"ToggleButton\"\n  description=\"A toggle button allows a user to toggle between two states.\">\n  <ToggleButton />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ButtonGroup.html\"\n  title=\"ButtonGroup\"\n  description=\"A button group is a grouping of buttons whose actions are related to each other.\">\n  <ButtonGroup />\n</ExampleCard>\n\n<ExampleCard\n  url=\"ActionGroup.html\"\n  title=\"ActionGroup\"\n  description=\"An action group is a grouping of action buttons that are related to each other.\">\n  <ActionGroup />\n</ExampleCard>\n\n<ExampleCard\n  url=\"FileTrigger.html\"\n  title=\"FileTrigger\"\n  description=\"A file trigger allows a user to access the file system with a Button.\">\n  <FileTrigger />\n</ExampleCard>\n\n</section>\n```\n\n----------------------------------------\n\nTITLE: Styling ColorThumb States with CSS Data Attributes\nDESCRIPTION: CSS examples showing how to target different states of a ColorThumb component using data attributes for styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorThumb[data-dragging] {\n  /* ... */\n}\n\n.react-aria-ColorThumb[data-focused] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in DateRangePicker\nDESCRIPTION: Example showing how to hide the time zone abbreviation when using ZonedDateTime objects as values in a DateRangePicker using the hideTimeZone prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]'),\n    end: parseZonedDateTime('2022-11-08T19:45[America/Los_Angeles]')\n  }}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in React Aria Column\nDESCRIPTION: Shows how to use render props to conditionally render content in a React Aria Column component based on sorting state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_51\n\nLANGUAGE: jsx\nCODE:\n```\n<Column>\n  {({allowsSorting, sortDirection}) => (\n    <>\n      Column Title\n      {allowsSorting && <MySortIndicator direction={sortDirection} />}\n    </>\n  )}\n</Column>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing React Spectrum Repository\nDESCRIPTION: Commands for forking, cloning the React Spectrum repository, and installing dependencies with yarn. Requires node v14.15.0+ and yarn v1.22.0+.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/react-spectrum\ncd react-spectrum\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Referencing the @react-spectrum/s2 Package Path\nDESCRIPTION: Shows the package name and path within the React Spectrum ecosystem. This indicates the module is part of Adobe's React Spectrum component library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/s2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@react-spectrum/s2\n```\n\n----------------------------------------\n\nTITLE: Configuring ComboBox Menu Trigger Behavior\nDESCRIPTION: This example shows how to set the menuTrigger prop to 'focus' for a ComboBox, which opens the menu when the input receives focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<MyComboBox label=\"Favorite Animal\" menuTrigger=\"focus\">\n  <ListBoxItem id=\"red panda\">Red Panda</ListBoxItem>\n  <ListBoxItem id=\"cat\">Cat</ListBoxItem>\n  <ListBoxItem id=\"dog\">Dog</ListBoxItem>\n  <ListBoxItem id=\"aardvark\">Aardvark</ListBoxItem>\n  <ListBoxItem id=\"kangaroo\">Kangaroo</ListBoxItem>\n  <ListBoxItem id=\"snake\">Snake</ListBoxItem>\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Theme with Provider and CSS modules (JSX)\nDESCRIPTION: This snippet demonstrates how to import dark and medium scale CSS themes as modules, and apply them to a React Spectrum “Provider” component using its “theme” and “scale” props. All children of the provider receive the variable definitions via the applied class names. Requires React, React Spectrum, and the spectrum-css theme packages as dependencies. Key parameters: “theme” and “scale”, which are the imported CSS modules. Provides consistent theming/scaling for everything rendered inside “Provider”; input is your app, output is a themed React UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-theming.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport dark from '@adobe/spectrum-css/dist/vars/spectrum-dark-unique.css';\nimport medium from '@adobe/spectrum-css/dist/vars/spectrum-medium-unique.css';\nimport {Provider} from '@react-spectrum/provider';\n\nfunction App() {\n  return (\n    <Provider theme={dark} scale={medium}>\n      {/* YOUR APP HERE */}\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination for Carousel Component in React Aria\nDESCRIPTION: Shows how to implement pagination for a carousel component by importing the Pagination component and connecting it to a carousel element via its ID. The pagination is conditionally shown only on smaller screen sizes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Pagination} from './home/Pagination';\n\n<Pagination carousel={document.getElementById('customizable-carousel')} className=\"max-w-3xl lg:hidden\" />\n```\n\n----------------------------------------\n\nTITLE: Providing Localized Strings with LocalizedStringProvider in Next.js Pages Router (TypeScript/TSX)\nDESCRIPTION: Demonstrates including 'LocalizedStringProvider' in 'pages/_document.tsx' of a Next.js Pages Router app to inject server-rendered localized strings for the configured locale into the output HTML before the NextScript. The locale is accessed from props and is necessary for proper internationalization during SSR.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/_document.tsx\nimport {Html, Head, Main, NextScript, DocumentProps} from 'next/document'\n /*- begin highlight -*/\nimport {LocalizedStringProvider} from '@adobe/react-spectrum/i18n';\n/*- end highlight -*/\n\nexport default function Document(props: DocumentProps) {\n  return (\n    <Html lang={props.locale}>\n      <Head />\n      <body>\n        <Main />\n        {/*- begin highlight -*/}\n        <LocalizedStringProvider locale={props.locale} />\n        {/*- end highlight -*/}\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Linked Rows in React Spectrum Table\nDESCRIPTION: This snippet illustrates how to create table rows that act as links in a React Spectrum table. It demonstrates the use of the href prop on Row components to make them navigable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<Table aria-label=\"Bookmarks\" selectionMode=\"multiple\">\n  <TableHeader>\n    <Column isRowHeader>Name</Column>\n    <Column>URL</Column>\n    <Column>Date added</Column>\n  </TableHeader>\n  <TableBody>\n    <Row href=\"https://adobe.com/\" target=\"_blank\">\n      <Cell>Adobe</Cell>\n      <Cell>https://adobe.com/</Cell>\n      <Cell>January 28, 2023</Cell>\n    </Row>\n    <Row href=\"https://google.com/\" target=\"_blank\">\n      <Cell>Google</Cell>\n      <Cell>https://google.com/</Cell>\n      <Cell>April 5, 2023</Cell>\n    </Row>\n    <Row href=\"https://nytimes.com/\" target=\"_blank\">\n      <Cell>New York Times</Cell>\n      <Cell>https://nytimes.com/</Cell>\n      <Cell>July 12, 2023</Cell>\n    </Row>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with ColorField\nDESCRIPTION: Shows how to integrate ColorField with HTML forms using the name prop for server submission.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\n<MyColorField label=\"Color\" name=\"color\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Dragging in React Spectrum\nDESCRIPTION: This example demonstrates how to temporarily disable dragging by using the isDisabled option in the useDrag hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrag.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDrag} from '@react-aria/dnd';\n\nfunction Draggable() {\n  let {dragProps, isDragging} = useDrag({\n    getItems() {\n      return [{\n        'text/plain': 'hello world'\n      }];\n    },\n    isDisabled: true\n  });\n\n  return (\n    <div {...dragProps} role=\"button\" tabIndex={0} className={`draggable ${isDragging ? 'dragging' : ''}`}>\n      Drag me\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TextArea Component in React Spectrum\nDESCRIPTION: Demonstrates how to import the TextArea component from the React Spectrum library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {TextArea} from '@react-spectrum/textfield';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Detecting Numbering System with NumberParser in JavaScript\nDESCRIPTION: Illustrates how to use the NumberParser class to detect the numbering system of a given input string. The parser is initialized for 'en-US' locale with decimal style, and then used to identify the numbering system of an Arabic numeral string.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {NumberParser} from '@internationalized/number';\n\nlet parser = new NumberParser('en-US', {style: 'decimal'});\nparser.getNumberingSystem('١٢') // -> 'arabic'\n```\n\n----------------------------------------\n\nTITLE: Simulating Mobile/Desktop Viewports in Jest Tests using TSX\nDESCRIPTION: Illustrates setting up Jest tests to simulate mobile or desktop viewports using `simulateMobile` and `simulateDesktop` utilities from `@react-spectrum/test-utils`. `simulateMobile` is called in `beforeAll` to mock the screen width, and `jest.restoreAllMocks` in `afterAll` cleans up the mocks. This helps test responsive behavior in components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {simulateDesktop, simulateMobile} from '@react-spectrum/test-utils';\n\nbeforeAll(() => {\n  simulateMobile();\n});\n\nafterAll(() => {\n  jest.restoreAllMocks();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS Plugins via CSS @plugin Directives (CSS)\nDESCRIPTION: This snippet shows how to import Tailwind CSS and its plugins using the @import and @plugin directives in a CSS file, suitable for Tailwind v4. Required plugins include 'tailwindcss-react-aria-components' and 'tailwindcss-animate'. Ensure these packages are installed and the CSS is processed by the Tailwind compiler. No parameters are required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/datepicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: RangeCalendar CSS Styling\nDESCRIPTION: CSS styling for disabled calendar dates in RangeCalendar component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-RangeCalendar {\n  .react-aria-CalendarCell {\n    &[data-disabled] {\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Popover ClassName via Prop in React Spectrum with JSX\nDESCRIPTION: Demonstrates how to apply a custom class name to the Popover component by passing a className prop, which replaces the default. This enables integration with user-defined CSS rather than built-in styles. Requirements: Popover component supporting className. Inputs: arbitrary child components in Popover body.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover className=\\\"my-popover\\\">\\n  {/* ... */}\\n</Popover>\\n\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Tree Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @react-spectrum/tree package in a Markdown file. It includes a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tree/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/tree\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Common React Spectrum Property Definitions\nDESCRIPTION: Defines common property patterns and naming conventions used across React Spectrum components, including variants, density settings, orientations, sizes, and alignment options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvariant = 'a' | 'b' // options dependent on component\nisQuiet, isEmphasized\ndensity = 'compact' | 'regular' | 'spacious'\norientation = 'horizontal' | 'vertical'\nsize = 'XS' | 'S' | 'M' | 'L' | 'XL'\nalign = 'start' | 'end'\nlabelPosition = 'top' | 'side'\nisIndeterminate\n```\n\n----------------------------------------\n\nTITLE: Using the ListBox Component in JSX\nDESCRIPTION: This JSX snippet shows how to use the React Spectrum 'ListBox' component. It renders a listbox, which displays a list of options and allows a user to select one or more of them. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ListBox />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label with LabelContext in React (TSX)\nDESCRIPTION: Defines a `MyCustomLabel` component using `React.forwardRef`. It consumes props and refs provided by a parent React Aria component (like `ColorSlider`) via `LabelContext` using the `useContextProps` hook, allowing integration of custom styled labels. Depends on `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  ///- begin highlight -///\n  [props, ref] = useContextProps(props, ref, LabelContext);\n  ///- end highlight -///\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Finding Start Dates of Time Units in TypeScript\nDESCRIPTION: Shows how to use functions like startOfYear, startOfMonth, and startOfWeek to find the beginning of specific time units, considering locale-specific details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {startOfYear, startOfMonth, startOfWeek} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\n\nstartOfYear(date); // 2022-01-01\nstartOfMonth(date); // 2022-02-01\nstartOfWeek(date, 'en-US'); // 2022-01-30\nstartOfWeek(date, 'fr-FR'); // 2022-01-31\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Week with @internationalized/date in TypeScript\nDESCRIPTION: Shows how to use the `getDayOfWeek` function from `@internationalized/date` to get the numerical day of the week (0-6) for a given `CalendarDateTime`. The result depends on the provided locale, as the first day of the week (day 0) varies (e.g., Sunday for 'en-US', Monday for 'fr-FR').\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {getDayOfWeek} from '@internationalized/date';\n\nlet date = new CalendarDateTime(2022, 2, 6, 8, 30); // a Sunday\n\ngetDayOfWeek(date, 'en-US'); // 0\ngetDayOfWeek(date, 'fr-FR'); // 6\n```\n```\n\n----------------------------------------\n\nTITLE: Composing React Aria Components for a ComboBox\nDESCRIPTION: Demonstrates how to compose React Aria Components to create a ComboBox, showcasing the component-based API and its composability.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboBox>\n  <Label>Favorite Animal</Label>\n  <div>\n    <Input />\n    <Button>▼</Button>\n  </div>\n  <Popover>\n    <ListBox>\n      <Item>Cat</Item>\n      <Item>Dog</Item>\n      <Item>Kangaroo</Item>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Creating a CalendarDate in TypeScript\nDESCRIPTION: Demonstrates how to create a CalendarDate object representing February 3rd, 2022 in the Gregorian calendar system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for React Aria Components in v4\nDESCRIPTION: CSS import configuration for Tailwind v4 with required plugins for React Aria Components and animations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/status-select.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Table with CSS\nDESCRIPTION: Demonstrates how to style a React Aria Table component using CSS selectors. The example shows targeting the default class name provided by React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_47\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Table {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Uncontrolled ComboBox\nDESCRIPTION: Example showing how to use the ComboBox component in an uncontrolled manner with defaultInputValue prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox label=\"Favorite Animal\" defaultInputValue=\"red\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Theme Default Package in Markdown\nDESCRIPTION: This code snippet shows how to reference the @react-spectrum/theme-default package in a Markdown file. It includes a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/theme-default/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/theme-default\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Picker with Static Sections\nDESCRIPTION: Example showing how to group Picker items into sections using static content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Pick your favorite\">\n  <Section title=\"Animals\">\n    <Item key=\"Aardvark\">Aardvark</Item>\n    <Item key=\"Kangaroo\">Kangaroo</Item>\n    <Item key=\"Snake\">Snake</Item>\n  </Section>\n  <Section title=\"People\">\n    <Item key=\"Danni\">Danni</Item>\n    <Item key=\"Devon\">Devon</Item>\n    <Item key=\"Ross\">Ross</Item>\n  </Section>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Using Different Divider Sizes in React Spectrum\nDESCRIPTION: Demonstrates how to use the size prop to create dividers in different sizes (L, M, S) within a column Flex container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/divider/docs/Divider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-125\">\n  <Text>Content above large Divider</Text>\n  <Divider size=\"L\" />\n  <Text>Content above medium Divider</Text>\n  <Divider size=\"M\" />\n  <Text>Content above small Divider</Text>\n  <Divider size=\"S\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using MyColorWheel with Uncontrolled Default Value (React Spectrum, TSX)\nDESCRIPTION: Shows how to render the MyColorWheel reusable component with a defaultValue prop for an uncontrolled use case (no React state management). The initial color is set using an HSL string. This allows rapid instantiation of default color wheels without tracking state externally.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorWheel defaultValue=\"hsl(80, 100%, 50%)\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Styling Link ListBoxItems - React Spectrum - CSS\nDESCRIPTION: This CSS snippet customizes the appearance of ListBoxItems that function as links within the ComboBox, removing underlines and showing a pointer cursor. No dependencies beyond typical CSS and HTML. Selector targets elements with the \\\"href\\\" attribute to distinguish them from regular items. Expects that ComboBox and ListBoxItem are rendered in the DOM.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n```css hidden\n.react-aria-ListBoxItem[href] {\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Targeting Default React Aria Component CSS Class\nDESCRIPTION: This CSS snippet demonstrates how to apply styles to a React Aria component using its default built-in CSS class name. The example targets the `DisclosureGroup` component using the `.react-aria-DisclosureGroup` selector. This follows the standard `react-aria-ComponentName` naming convention.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DisclosureGroup {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MenuTrigger TypeScript Interface\nDESCRIPTION: TypeScript interface definition for MenuTrigger component that specifies props for controlling menu trigger behavior, alignment, and state management. Includes properties for trigger type, alignment, direction, and open state control.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/MenuTrigger.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MenuTrigger {\n  children: ReactNode, // figure out if we can type the children\n  trigger: 'press' | 'longPress',\n  align?: 'start' | 'end',\n  direction?: 'bottom' | 'top', // left right?\n  isOpen?: boolean,\n  defaultOpen?: boolean,\n  onOpenChange?: (isOpen: boolean) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Disclosure in TSX\nDESCRIPTION: This example demonstrates the fundamental structure of a Disclosure component in TSX. It includes a DisclosureTitle (the clickable header) and a DisclosurePanel (the collapsible content area).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Disclosure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<Disclosure>\n  <DisclosureTitle>System Requirements</DisclosureTitle>\n  <DisclosurePanel>\n    Details about system requirements here.\n  </DisclosurePanel>\n</Disclosure>\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling Granularity in DateField Components\nDESCRIPTION: Example showing how to control the level of detail displayed in DateField components using the granularity prop, with two synchronized fields showing different granularities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n\n  return (\n    <>\n      <MyDateField\n        label=\"Date and time\"\n        /*- begin highlight -*/\n        granularity=\"second\"\n        /*- end highlight -*/\n        value={date}\n        onChange={setDate} />\n      <MyDateField\n        label=\"Date\"\n        /*- begin highlight -*/\n        granularity=\"day\"\n        /*- end highlight -*/\n        value={date}\n        onChange={setDate} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Tree Item Content in React Aria Components\nDESCRIPTION: This snippet demonstrates how to create a reusable TreeItemContent component with custom rendering for selection, chevron, and children. It uses TypeScript and React Aria Components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TreeItemContentProps, TreeItemContentRenderProps} from 'react-aria-components';\nimport {Button} from 'react-aria-components';\n\nfunction MyTreeItemContent(props: TreeItemContentProps) {\n  return (\n    <TreeItemContent>\n      {({hasChildItems, selectionBehavior, selectionMode}: TreeItemContentRenderProps) => (\n        <>\n          {selectionBehavior === 'toggle' && selectionMode !== 'none' && <MyCheckbox slot=\"selection\" />}\n          <Button slot=\"chevron\">\n            <svg viewBox=\"0 0 24 24\">\n              <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n            </svg>\n          </Button>\n          {props.children}\n        </>\n      )}\n    </TreeItemContent>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring optimize-locales-plugin with Esbuild (JavaScript)\nDESCRIPTION: Shows how to use the `@react-aria/optimize-locales-plugin` with Esbuild's build API. The plugin is imported using ES Modules `import` and added to the `plugins` array within the `build` function call using `optimizeLocales.esbuild`, specifying the supported locales ('en-US', 'fr-FR').\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/optimize-locales-plugin/README.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {build} from 'esbuild';\nimport optimizeLocales from '@react-aria/optimize-locales-plugin';\n\nbuild({\n  plugins: [\n    optimizeLocales.esbuild({\n      locales: ['en-US', 'fr-FR']\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API Documentation using JSX\nDESCRIPTION: Uses the `FunctionAPI` component to render the API documentation for the `useComboBoxState` hook. It passes the function's definition and relevant links, both accessed from the imported `docs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/combobox/docs/useComboBoxState.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.useComboBoxState} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for React Aria Components\nDESCRIPTION: Instructions for including the tailwindcss-react-aria-components plugin in a project. It shows setup options for both Tailwind v4 (via CSS import) and Tailwind v3 (via configuration file).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/file-system.mdx#2025-04-23_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Items from List - useListData Hook - TypeScript\nDESCRIPTION: Illustrates removing one or more items from the list by their keys using the remove method. This ensures both the item and its selection state (if selected) are removed, and the component updates as needed. Accepts single or multiple keys as parameters and returns the list with specified items removed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove an item\nlist.remove('Kangaroo');\n\n// Remove multiple items\nlist.remove('Kangaroo', 'Snake');\n\n```\n\n----------------------------------------\n\nTITLE: Composing Group and Label with React Contexts for Advanced Labeling (TypeScript/JSX)\nDESCRIPTION: This advanced JSX/TSX snippet defines a LabeledGroup component that uses React Context to share label IDs with nested Group elements for accessible labeling patterns. It imports LabelContext and GroupContext from react-aria-components, uses useId for unique label IDs, and demonstrates compositional customization. Expects React Aria Components in scope, and returns a labeled group ensuring correct ARIA labeling inheritance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {LabelContext, GroupContext} from 'react-aria-components';\\nimport {useId} from 'react-aria';\\n\\nfunction LabeledGroup({children}) {\\n  let labelId = useId();\\n\\n  return (\\n    <LabelContext.Provider value={{id: labelId, elementType: 'span'}} >\\n      <GroupContext.Provider value={{'aria-labelledby': labelId}} >\\n        {children}\\n      </GroupContext.Provider>\\n    </LabelContext.Provider>\\n  );\\n}\\n\\n<LabeledGroup>\\n  <Label>Expiration date</Label>\\n  <Group>\\n    <Input size={3} aria-label=\\\"Month\\\" placeholder=\\\"mm\\\" />\\n    /\\n    <Input size={4} aria-label=\\\"Year\\\" placeholder=\\\"yyyy\\\" />\\n  </Group>\\n</LabeledGroup>\n```\n\n----------------------------------------\n\nTITLE: Applying Rounding to ColorSwatchPicker in TSX\nDESCRIPTION: Demonstrates how to apply rounding to the corners of the `ColorSwatch` elements within a `ColorSwatchPicker` using the `rounding` prop. This example sets `rounding` to 'full' for circular swatches. According to guidelines, full rounding should only be used when the picker is displayed on a single row.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatchPicker rounding=\"full\">\n  <ColorSwatch color=\"#A00\" />\n  <ColorSwatch color=\"#f80\" />\n  <ColorSwatch color=\"#080\" />\n  <ColorSwatch color=\"#08f\" />\n</ColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Importing ListView Dependencies\nDESCRIPTION: Essential imports required for using the ListView component and related utilities in React Spectrum\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionMenu} from '@react-spectrum/menu';\nimport Delete from '@spectrum-icons/workflow/Delete';\nimport Edit from '@spectrum-icons/workflow/Edit';\nimport {Flex} from '@react-spectrum/layout';\nimport {Heading, Text} from '@react-spectrum/text';\nimport {Image} from '@react-spectrum/image';\nimport {Item, ListView} from '@react-spectrum/list';\n```\n\n----------------------------------------\n\nTITLE: Toggle Button Group with Individual Disabled Buttons\nDESCRIPTION: Example showing how to disable individual buttons within a toggle button group by applying the isDisabled prop to specific ToggleButton components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButtonGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButtonGroup>\n  <ToggleButton id=\"grid\">Grid view</ToggleButton>\n  <ToggleButton id=\"list\" isDisabled>List view</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery view</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Custom Drop Indicator Styling with CSS\nDESCRIPTION: This CSS code styles a custom drop indicator for a GridList. It sets a specific outline color for active indicators and includes a fallback for browsers that don't support the :has selector.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_33\n\nLANGUAGE: css\nCODE:\n```\n.my-drop-indicator {\n  &.active {\n    outline: 1px solid #e70073;\n  }\n\n  @supports not selector(:has(.foo)) {\n    /* Undo gap in browsers that don't support :has */\n    margin-bottom: -2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Pagination Component for a Carousel in TSX\nDESCRIPTION: This TSX snippet imports a `Pagination` component from './home/Pagination' and renders it. It passes a reference to a carousel element (`interactions-carousel`) via the `carousel` prop and includes a responsive class (`md:hidden`) to hide it on medium screens and above. This component likely controls the preceding interactions carousel.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx snippet\nimport {Pagination} from './home/Pagination';\n\n<Pagination carousel={document.getElementById('interactions-carousel')} className=\"md:hidden\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component (JavaScript/JSX)\nDESCRIPTION: Imports the `Layout` component from `@react-spectrum/docs` and exports it as the default export for this documentation module. This sets up the basic page structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tooltip/docs/useTooltipTriggerState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Styling ListBox Items Containing Images (CSS)\nDESCRIPTION: CSS rules for styling list items that contain images, referenced by the `.image-item` class. It uses flexbox to arrange the image and its name, sets a fixed height, controls image aspect ratio and fit, and handles text overflow for the name.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_45\n\nLANGUAGE: css\nCODE:\n```\n.image-item {\n  display: flex;\n  height: 50px;\n  gap: 10px;\n  align-items: center;\n}\n\n.image-item img {\n  height: 100%;\n  aspect-ratio: 1/1;\n  object-fit: contain;\n}\n\n.image-item span {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Link Component Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the props accepted by the React Spectrum `Link` component. It extends `DOMProps`, `StyleProps`, and `PressEvents` and includes specific props like `variant` (accepting 'primary', 'secondary', or 'overBackground', defaulting to 'primary'), `children` (which must be a ReactNode), and the optional boolean `isQuiet`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Link.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Link extends DOMProps, StyleProps, PressEvents {\n  variant?: 'primary' | 'secondary' | 'overBackground', // default primary\n  children: ReactNode,\n  isQuiet?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for Tree Component Styling\nDESCRIPTION: CSS code block showing `@import` statements used to include necessary styles for the Tree example. It imports a base example theme (`@react-aria/example-theme`) and specific styles related to Button, ToggleButton, and Checkbox components (presumably defined in separate MDX files) using CSS layers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n@import './Button.mdx' layer(button);\n@import './ToggleButton.mdx' layer(togglebutton);\n@import './Checkbox.mdx' layer(checkbox);\n```\n\n----------------------------------------\n\nTITLE: Implementing RangeCalendar Component in React\nDESCRIPTION: This snippet shows how to create a RangeCalendar component using React Aria hooks. It implements the month grid shown within the DateRangePicker popover.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRangeCalendarState} from '@react-stately/calendar';\nimport {useRangeCalendar, useCalendarGrid, useCalendarCell} from '@react-aria/calendar';\nimport {createCalendar, getWeeksInMonth} from '@internationalized/date';\n\nfunction RangeCalendar(props) {\n  let {locale} = useLocale();\n  let state = useRangeCalendarState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  let ref = React.useRef(null);\n  let {calendarProps, prevButtonProps, nextButtonProps, title} = useRangeCalendar(props, state, ref);\n\n  return (\n    <div {...calendarProps} ref={ref} className=\"calendar\">\n      <div className=\"header\">\n        <h2>{title}</h2>\n        <Button {...prevButtonProps}>&lt;</Button>\n        <Button {...nextButtonProps}>&gt;</Button>\n      </div>\n      <CalendarGrid state={state} firstDayOfWeek={props.firstDayOfWeek} />\n    </div>\n  );\n}\n\nfunction CalendarGrid({state, ...props}) {\n  let {locale} = useLocale();\n  let {gridProps, headerProps, weekDays} = useCalendarGrid(props, state);\n\n  let weeksInMonth = getWeeksInMonth(state.visibleRange.start, locale, props.firstDayOfWeek);\n\n  return (\n    <table {...gridProps}>\n      <thead {...headerProps}>\n        <tr>\n          {weekDays.map((day, index) =>\n            <th key={index}>{day}</th>\n          )}\n        </tr>\n      </thead>\n      <tbody>\n        {[...new Array(weeksInMonth).keys()].map(weekIndex => (\n          <tr key={weekIndex}>\n            {state.getDatesInWeek(weekIndex).map((date, i) => (\n              date ? (\n                <CalendarCell\n                  key={i}\n                  state={state}\n                  date={date} />\n              ) : <td key={i} />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction CalendarCell({state, date}) {\n  let ref = React.useRef(null);\n  let {\n    cellProps,\n    buttonProps,\n    isSelected,\n    isOutsideVisibleRange,\n    isDisabled,\n    isUnavailable,\n    formattedDate\n  } = useCalendarCell({date}, state, ref);\n\n  return (\n    <td {...cellProps}>\n      <div\n        {...buttonProps}\n        ref={ref}\n        hidden={isOutsideVisibleRange}\n        className={`cell ${isSelected ? 'selected' : ''} ${isDisabled ? 'disabled' : ''} ${isUnavailable ? 'unavailable' : ''}`}>\n        {formattedDate}\n      </div>\n    </td>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Dialog Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'Dialog' component. It renders a dialog, which is an overlay shown above other content in an application, typically used for modal interactions. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog />\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic Hierarchical Data with useTreeData Hook in React Stately (TSX)\nDESCRIPTION: Shows how to manage hierarchical data for collections using the `useTreeData` hook from `@react-stately/data`. This hook simplifies state management for tree-like structures, providing methods like `append` to add items to specific parent nodes. It requires `getKey` and `getChildren` functions to understand the data structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTreeData} from '@react-stately/data';\n\nlet tree = useTreeData({\n  initialItems: [\n    {\n      name: 'People',\n      items: [\n        {name: 'David'},\n        {name: 'Sam'},\n        {name: 'Jane'}\n      ]\n    },\n    {\n      name: 'Animals',\n      items: [\n        {name: 'Aardvark'},\n        {name: 'Kangaroo'},\n        {name: 'Snake'}\n      ]\n    }\n  ],\n  getKey: item => item.name,\n  getChildren: item => item.items\n});\n\nfunction addPerson(name) {\n  tree.append('People', {name}); // Appends to the node with key 'People'\n}\n\n<ListBox items={tree.items}>\n  {node =>\n    <Section id={node.key} items={node.children}> // Using node.key and node.children provided by useTreeData\n      <Header>{node.value.name}</Header> // Accessing original data via node.value\n      <Collection items={node.children}>\n        {item => <ListBoxItem id={item.key}>{item.value.name}</ListBoxItem>} // Using item.key and item.value\n      </Collection>\n    </Section>\n  }\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata in Markdown\nDESCRIPTION: Specifies metadata for the blog post using YAML frontmatter in a Markdown file. It includes a description of the release and the publication date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-07-23.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ndescription: A new release has landed! The response to our release last week has been incredible. Thank you to all of the amazing contributors! This release contains some bug fixes, updates to how we handle hover state in React Spectrum, and documentation improvements.\ndate: 2020-07-23\n---\n```\n\n----------------------------------------\n\nTITLE: Running Verdaccio for Package Testing\nDESCRIPTION: Command to start Verdaccio, a private npm registry for testing React Spectrum packages in example applications.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/verdaccio.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a New Remix Project with Vite Template\nDESCRIPTION: Command to create a new Remix project using the unstable Vite template via npx and create-remix.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/remix/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpx create-remix@latest --template remix-run/remix/templates/unstable-vite\n```\n\n----------------------------------------\n\nTITLE: Listing Released Adobe React Spectrum and Related Package Versions\nDESCRIPTION: This code block lists the specific versions of various packages released under the Adobe React Spectrum umbrella, including @react-aria, @react-stately, @react-types, and @spectrum-icons libraries. Each line indicates a package name and its corresponding version number for this release cycle.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-11-15.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n- @adobe/react-spectrum@3.23.0\n- @react-aria/accordion@3.0.0-alpha.13\n- @react-aria/actiongroup@3.4.3\n- @react-aria/aria-modal-polyfill@3.6.1\n- @react-aria/autocomplete@3.0.0-alpha.12\n- @react-aria/breadcrumbs@3.4.0\n- @react-aria/button@3.6.3\n- @react-aria/calendar@3.0.4\n- @react-aria/checkbox@3.7.0\n- @react-aria/color@3.0.0-beta.17\n- @react-aria/combobox@3.4.3\n- @react-aria/datepicker@3.2.0\n- @react-aria/dialog@3.4.1\n- @react-aria/dnd@3.0.0\n- @react-aria/focus@3.10.0\n- @react-aria/grid@3.5.1\n- @react-aria/gridlist@3.1.1\n- @react-aria/i18n@3.6.2\n- @react-aria/interactions@3.13.0\n- @react-aria/label@3.4.3\n- @react-aria/landmark@3.0.0-alpha.4\n- @react-aria/link@3.3.5\n- @react-aria/listbox@3.7.1\n- @react-aria/menu@3.7.0\n- @react-aria/meter@3.3.3\n- @react-aria/numberfield@3.3.3\n- @react-aria/overlays@3.12.0\n- @react-aria/progress@3.3.3\n- @react-aria/radio@3.4.1\n- @react-aria/searchfield@3.4.3\n- @react-aria/select@3.8.3\n- @react-aria/selection@3.12.0\n- @react-aria/separator@3.2.5\n- @react-aria/slider@3.2.3\n- @react-aria/spinbutton@3.2.0\n- @react-aria/ssr@3.4.0\n- @react-aria/switch@3.3.0\n- @react-aria/table@3.6.0\n- @react-aria/tabs@3.3.3\n- @react-aria/tag@3.0.0-beta.0\n- @react-aria/textfield@3.8.0\n- @react-aria/toggle@3.4.1\n- @react-aria/tooltip@3.3.3\n- @react-aria/utils@3.14.1\n- @react-aria/virtualizer@3.6.0\n- @react-aria/visually-hidden@3.6.0\n- @react-spectrum/accordion@3.0.0-alpha.14\n- @react-spectrum/actionbar@3.0.0-alpha.14\n- @react-spectrum/actiongroup@3.7.1\n- @react-spectrum/autocomplete@3.0.0-alpha.12\n- @react-spectrum/avatar@3.0.0-alpha.11\n- @react-spectrum/badge@3.0.1\n- @react-spectrum/breadcrumbs@3.6.0\n- @react-spectrum/button@3.11.0\n- @react-spectrum/buttongroup@3.5.0\n- @react-spectrum/calendar@3.1.3\n- @react-spectrum/card@3.0.0-alpha.13\n- @react-spectrum/checkbox@3.6.1\n- @react-spectrum/color@3.0.0-beta.17\n- @react-spectrum/combobox@3.7.0\n- @react-spectrum/contextualhelp@3.4.0\n- @react-spectrum/datepicker@3.3.0\n- @react-spectrum/dialog@3.6.0\n- @react-spectrum/divider@3.4.3\n- @react-spectrum/dnd@3.0.0\n- @react-spectrum/form@3.5.1\n- @react-spectrum/icon@3.6.2\n- @react-spectrum/illustratedmessage@3.3.3\n- @react-spectrum/image@3.3.3\n- @react-spectrum/label@3.9.0\n- @react-spectrum/labeledvalue@3.0.1\n- @react-spectrum/layout@3.4.3\n- @react-spectrum/link@3.4.3\n- @react-spectrum/list@3.2.0\n- @react-spectrum/listbox@3.8.1\n- @react-spectrum/menu@3.9.0\n- @react-spectrum/meter@3.3.3\n- @react-spectrum/numberfield@3.5.0\n- @react-spectrum/overlays@4.0.0\n- @react-spectrum/picker@3.9.0\n- @react-spectrum/progress@3.3.3\n- @react-spectrum/provider@3.6.0\n- @react-spectrum/radio@3.4.1\n- @react-spectrum/searchfield@3.6.0\n- @react-spectrum/searchwithin@3.0.0-alpha.12\n- @react-spectrum/slider@3.4.0\n- @react-spectrum/statuslight@3.4.3\n- @react-spectrum/switch@3.3.3\n- @react-spectrum/table@3.5.0\n- @react-spectrum/tabs@3.3.3\n- @react-spectrum/tag@3.0.0-beta.0\n- @react-spectrum/text@3.3.3\n- @react-spectrum/textfield@3.9.0\n- @react-spectrum/theme-dark@3.4.0\n- @react-spectrum/theme-default@3.4.0\n- @react-spectrum/theme-express@3.0.0-alpha.0\n- @react-spectrum/theme-light@3.3.0\n- @react-spectrum/tooltip@3.3.3\n- @react-spectrum/utils@3.8.0\n- @react-spectrum/view@3.4.0\n- @react-spectrum/well@3.3.3\n- @react-stately/calendar@3.0.4\n- @react-stately/checkbox@3.3.1\n- @react-stately/collections@3.5.0\n- @react-stately/color@3.2.1\n- @react-stately/combobox@3.3.0\n- @react-stately/data@3.8.0\n- @react-stately/datepicker@3.2.0\n- @react-stately/dnd@3.0.0\n- @react-stately/grid@3.4.1\n- @react-stately/layout@3.9.0\n- @react-stately/list@3.6.0\n- @react-stately/menu@3.4.3\n- @react-stately/numberfield@3.3.0\n- @react-stately/overlays@3.4.3\n- @react-stately/radio@3.6.1\n- @react-stately/searchfield@3.3.3\n- @react-stately/select@3.3.3\n- @react-stately/selection@3.11.1\n- @react-stately/slider@3.2.3\n- @react-stately/table@3.6.0\n- @react-stately/tabs@3.2.3\n- @react-stately/toggle@3.4.3\n- @react-stately/tooltip@3.2.3\n- @react-stately/tree@3.4.0\n- @react-stately/virtualizer@3.4.0\n- @react-types/accordion@3.0.0-alpha.11\n- @react-types/actionbar@3.0.0-alpha.11\n- @react-types/actiongroup@3.3.5\n- @react-types/autocomplete@3.0.0-alpha.10\n- @react-types/avatar@3.0.0-alpha.10\n- @react-types/badge@3.0.1\n- @react-types/breadcrumbs@3.4.5\n- @react-types/button@3.7.0\n- @react-types/buttongroup@3.2.5\n- @react-types/calendar@3.0.4\n- @react-types/card@3.0.0-alpha.11\n- @react-types/checkbox@3.4.1\n- @react-types/color@3.0.0-beta.14\n- @react-types/combobox@3.5.5\n- @react-types/contextualhelp@3.1.5\n- @react-types/datepicker@3.1.3\n- @react-types/dialog@3.4.5\n- @react-types/divider@3.2.5\n- @react-types/form@3.4.1\n- @react-types/grid@3.1.5\n- @react-types/illustratedmessage@3.2.5\n- @react-types/image@3.2.5\n- @react-types/label@3.7.1\n- @react-types/layout@3.3.5\n- @react-types/link@3.3.5\n- @react-types/list@3.1.1\n- @react-types/listbox@3.3.5\n- @react-types/menu@3.7.3\n- @react-types/meter@3.2.5\n- @react-types/numberfield@3.3.5\n- @react-types/overlays@3.6.5\n- @react-types/progress@3.2.5\n- @react-types/provider@3.5.5\n- @react-types/radio@3.3.1\n- @react-types/searchfield@3.3.5\n- @react-types/searchwithin@3.0.0-alpha.10\n- @react-types/select@3.6.5\n- @react-types/shared@3.16.0\n- @react-types/slider@3.3.1\n- @react-types/statuslight@3.2.5\n- @react-types/switch@3.2.5\n- @react-types/table@3.3.3\n- @react-types/tabs@3.1.5\n- @react-types/tag@3.0.0-beta.0\n- @react-types/text@3.2.5\n- @react-types/textfield@3.6.1\n- @react-types/tooltip@3.2.5\n- @react-types/view@3.3.0\n- @react-types/well@3.2.5\n- @spectrum-icons/color@3.4.4\n- @spectrum-icons/express@3.0.0-alpha.0\n- @spectrum-icons/illustrations@3.5.1\n- @spectrum-icons/ui@3.4.0\n- @spectrum-icons/workflow@4.0.4\n- react-aria@3.21.0\n- react-stately@3.19.0\n```\n\n----------------------------------------\n\nTITLE: Using the NumberField Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'NumberField' component. It renders an input field allowing a user to enter, increment, or decrement a numeric value. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\n<NumberField />\n```\n\n----------------------------------------\n\nTITLE: Using Test IDs with React Spectrum Components\nDESCRIPTION: Shows how to add and query for test IDs on React Spectrum components using the TextField component as an example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {render} from '@testing-library/react';\nimport {TextField} from '@react-spectrum/textfield';\n\nfunction LoginForm() {\n  return (\n    <>\n      <TextField label=\"Username\" data-testid=\"username\" />\n      <TextField label=\"Password\" data-testid=\"password\" />\n    </>\n  );\n}\n\nlet tree = render(<LoginForm />);\nlet username = tree.getByTestId('username');\nlet password = tree.getByTestId('password');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Read-only NumberField in React Spectrum\nDESCRIPTION: This snippet demonstrates how to create a read-only NumberField using the isReadOnly prop, which makes the content immutable but still focusable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField label=\"Cookies\" defaultValue={15} isReadOnly minValue={0} />\n```\n\n----------------------------------------\n\nTITLE: Initializing RouterProvider with Router Hooks (General)\nDESCRIPTION: This snippet demonstrates the basic setup of `RouterProvider` from `react-aria-components`. It wraps the application content and receives `navigate` and `useHref` functions (obtained from the specific router library being used, here represented by 'your-router') to handle client-side navigation for React Aria components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RouterProvider} from 'react-aria-components';\nimport {useNavigate, useHref} from 'your-router';\n\nfunction App() {\n  let navigate = useNavigate();\n\n  return (\n    <RouterProvider navigate={navigate} useHref={useHref}>\n      {/* ... */}\n    </RouterProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ColorPicker with ColorWheel and ColorArea (TypeScript/TSX)\nDESCRIPTION: This snippet customizes ColorPicker by providing ColorWheel and ColorArea as children, replacing the default ColorEditor. It utilizes the colorSpace, xChannel, yChannel, and size props for configuring ColorArea layout and functionality. Both ColorWheel and ColorArea must be imported from @react-spectrum/color. Useful for advanced scenarios requiring custom color selection UIs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorWheel, ColorArea} from '@react-spectrum/color';\n\n<ColorPicker label=\"Fill\" defaultValue=\"#08f\">\n  <ColorWheel />\n  <ColorArea\n    colorSpace=\"hsb\"\n    xChannel=\"saturation\"\n    yChannel=\"brightness\"\n    size=\"size-400\"\n    position=\"absolute\"\n    top=\"calc(50% - size-400)\"\n    left=\"calc(50% - size-400)\" />\n</ColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Checkbox with Default CSS Class\nDESCRIPTION: Demonstrates how to apply CSS styles to a React Aria Checkbox component by targeting its default class name. React Aria components include a default `className` following the `react-aria-ComponentName` naming convention, allowing styling via standard CSS selectors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Checkbox {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ColorWheel Wrapper Component (React Spectrum, TSX)\nDESCRIPTION: Defines and exports a generic MyColorWheel React function component, accepting most ColorWheelProps (except radii) and preconfiguring the wheel's size and structure. This pattern enables consistent behavior and styling in multiple locations; the code uses TypeScript's Omit utility and prop spreading. Includes an inline usage example instantiating MyColorWheel with a default color value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorWheelProps} from 'react-aria-components';\\n\\ninterface MyColorWheelProps extends Omit<ColorWheelProps, 'outerRadius' | 'innerRadius'> {}\\n\\nexport function MyColorWheel(props: MyColorWheelProps) {\\n  return (\\n    <ColorWheel {...props} outerRadius={100} innerRadius={74}>\\n      <ColorWheelTrack />\\n      <ColorThumb />\\n    </ColorWheel>\\n  );\\n}\\n\\n<MyColorWheel defaultValue=\"hsl(30, 100%, 50%)\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Styling Resizable Columns in React Spectrum Table\nDESCRIPTION: This CSS snippet provides styles for the resizable columns table, including a wrapper for scrolling and fixed table layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.aria-table-wrapper {\n  width: 300px;\n  overflow: auto;\n}\n\n.aria-table {\n  border-collapse: collapse;\n  table-layout: fixed;\n  width: fit-content;\n\n  & td {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Parcel Macros\nDESCRIPTION: Configuration for setting up macros in a Vite project. This snippet shows how to import the macros plugin and add it to the Vite configuration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-vite-project/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport macrosPlugin from 'unplugin-parcel-macros';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    // ...\n    macrosPlugin.vite()\n    // ..\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Drop Indicator (TSX)\nDESCRIPTION: Shows how to provide a custom drop indicator component using the `renderDropIndicator` function in the `useDragAndDrop` hook configuration. It imports and uses the `DropIndicator` component from `react-aria-components`, passing the `target` prop and applying custom CSS classes based on the `isDropTarget` state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\n///- begin highlight -///\nimport {DropIndicator} from 'react-aria-components';\n///- end highlight -///\n\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    // ...\n    ///- begin collapse -///\n    async onInsert(e) {\n      let items = await Promise.all(e.items.map(async item => {\n        let name = item.kind === 'text' ? await item.getText('text/plain') : item.name;\n        return {id: Math.random(), name};\n      }));\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items);\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items);\n      }\n    },\n    ///- end collapse -///\n    ///- begin highlight -///\n    renderDropIndicator(target) {\n      return (\n        <DropIndicator\n          target={target}\n          className={({isDropTarget}) => `my-drop-indicator ${isDropTarget ? 'active' : ''}`} />\n      );\n    }\n    ///- end highlight -///\n  });\n\n  ///- begin collapse -///\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Illustrator'},\n      {id: 2, name: 'Premiere'},\n      {id: 3, name: 'Acrobat'}\n    ]\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      <DraggableListBox />\n      <ListBox aria-label=\"Droppable list\" items={list.items} dragAndDropHooks={dragAndDropHooks}>\n        {item => <ListBoxItem>{item.name}</ListBoxItem>}\n      </ListBox>\n    </div>\n  );\n  ///- end collapse -///\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Overlays Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-aria/overlays package in a Markdown document. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/overlays\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Using the Disclosure Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'Disclosure' component. It renders a collapsible section of content, often used to hide/show details on demand. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\n<Disclosure />\n```\n\n----------------------------------------\n\nTITLE: Using the SearchField Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'SearchField' component. It renders an input field specifically designed for entering search queries, often including a clear button. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\n<SearchField />\n```\n\n----------------------------------------\n\nTITLE: Styling the RangeCalendar Component Example in CSS\nDESCRIPTION: Defines CSS rules to style the `RangeCalendar` component and its sub-elements (header, heading, buttons, table, cells). It includes styles for various states like focus, press, selection start/end, and handling cells outside the current month, using custom properties from an example theme.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-RangeCalendar {\n  width: fit-content;\n  max-width: 100%;\n  color: var(--text-color);\n\n  & header {\n    display: flex;\n    align-items: center;\n    margin: 0 4px .5rem 4px;\n\n    .react-aria-Heading {\n      flex: 1;\n      margin: 0;\n      text-align: center;\n      font-size: 1.375rem;\n    }\n  }\n\n  .react-aria-Button {\n    width: 2rem;\n    height: 2rem;\n    padding: 0;\n  }\n\n  & table {\n    border-collapse: collapse;\n\n    & td {\n      padding: 2px 0;\n    }\n  }\n\n  .react-aria-CalendarCell {\n    width: 2.286rem;\n    line-height: 2.286rem;\n    text-align: center;\n    border-radius: 6px;\n    cursor: default;\n    outline: none;\n    forced-color-adjust: none;\n\n    &[data-outside-month] {\n      display: none;\n    }\n\n    &[data-pressed] {\n      background: var(--gray-100);\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--highlight-background);\n      outline-offset: -2px;\n    }\n\n    &[data-selected] {\n      background: var(--highlight-background);\n      color: var(--highlight-foreground);\n      border-radius: 0;\n\n      &[data-focus-visible] {\n        outline-color: var(--highlight-foreground);\n        outline-offset: -3px;\n      }\n    }\n\n    &[data-selection-start] {\n      border-start-start-radius: 6px;\n      border-end-start-radius: 6px;\n    }\n\n    &[data-selection-end] {\n      border-start-end-radius: 6px;\n      border-end-end-radius: 6px;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting CalendarDate to ZonedDateTime in TypeScript\nDESCRIPTION: Illustrates the conversion of a CalendarDate to a ZonedDateTime using the toZoned function. It requires specifying a time zone and can include a specific time.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toZoned, toCalendarDateTime, Time} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\ntoZoned(date, 'America/Los_Angeles'); // 2021-02-03T00:00-07:00[America/Los_Angeles]\n\nlet dateTime = toCalendarDateTime(date, new Time(8, 30));\ntoZoned(dateTime, 'America/Los_Angeles'); // 2021-02-03T08:30-07:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Strict Date Comparison in TypeScript\nDESCRIPTION: Demonstrates the use of isEqualMonth function for strict date comparison, which requires dates to be in the same calendar system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isEqualMonth, IslamicUmalquraCalendar} from '@internationalized/date';\n\nisEqualMonth(new CalendarDate(2021, 4, 16), new CalendarDate(2021, 4, 30)); // true\nisEqualMonth(new CalendarDate(2021, 4, 16), new CalendarDate(2021, 8, 2)); // false\nisEqualMonth(new CalendarDate(2021, 4, 16), new CalendarDate(new IslamicUmalquraCalendar(), 1442, 9, 4)); // false\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Provider and Button Components (TSX)\nDESCRIPTION: Imports the `Provider` component from `@react-spectrum/provider` and the `ActionButton` component from `@react-spectrum/button`. These components are fundamental for applying themes and demonstrating themed elements in the subsequent examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/theming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Provider} from '@react-spectrum/provider';\nimport {ActionButton} from '@react-spectrum/button';\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for Avatar and AvatarGroup\nDESCRIPTION: Defines the TypeScript interfaces `Avatar`, `AvatarGroup`, and `AvatarGroupOverflow`. `Avatar` specifies properties like `src`, `alt`, `size`, and `isDisabled`. `AvatarGroup` defines properties for managing a collection of Avatars, including `children`, layout options (`orientation`, `stackTop`), overflow handling (`onOverflowClick`, `overflowMode`, `visibleItems`), and shared state (`isDisabled`, `size`). `AvatarGroupOverflow` defines properties for the overflow indicator component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Avatar {\n  src: string,\n  alt?: string,\n  size?: 'S' | 'M' | 'L',\n  isDisabled?: boolean\n}\n\ninterface AvatarGroup {\n  children: ReactElement<Avatar>[],\n  isDisabled?: boolean,\n  onOverflowClick?: () => void,\n  orientation?: 'horizontal' | 'vertical',\n  shouldExpand?: boolean,\n  overflowMode?: 'remaining' | 'total',\n  size?: 'S' | 'M' | 'L',\n  stackTop?: boolean,\n  visibleItems?: number\n}\n\ninterface AvatarGroupOverflow {\n  children?: ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Released Packages for React Spectrum Update\nDESCRIPTION: This code block lists the packages released as part of the December 22, 2020 update for React Spectrum. It includes version numbers for various @adobe/react-spectrum, @react-aria, @react-spectrum, @react-stately, and @react-types packages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-12-22.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n - @adobe/react-spectrum@3.7.0\n - @react-aria/breadcrumbs@3.1.2\n - @react-aria/slider@3.0.0\n - @react-aria/utils@3.5.0\n - @react-spectrum/slider@3.0.0\n - @react-stately/slider@3.0.0\n - @react-types/breadcrumbs@3.2.0\n - @react-types/slider@3.0.0\n - react-aria@3.3.0\n - react-stately@3.2.0\n```\n\n----------------------------------------\n\nTITLE: Composing a Custom ComboBox with Nested Components Using Context Providers (JSX)\nDESCRIPTION: This code displays how to use the custom MyComboBox component, wrapping imported Button, Input, Item, Label, ListBox, and Popover components from react-aria-components. It composes MyComboBox by placing Label, Input, Button, and Popover (containing ListBox with Item children) within it, relying on context providers set up by MyComboBox for correct interoperation and behavioral wiring. Inputs are child components, and the output is a full ComboBox with subcomponents that use custom or default behavior. Relies on context and react-aria-components interoperability.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Button, Input, Item, Label, ListBox, Popover} from 'react-aria-components';\\nimport {MyComboBox} from './MyComboBox';\\n\\n<MyComboBox>\\n  <Label>Favorite Animal</Label>\\n  <div>\\n    <Input />\\n    <Button>▼</Button>\\n  </div>\\n  <Popover>\\n    <ListBox>\\n      <Item>Cat</Item>\\n      <Item>Dog</Item>\\n    </ListBox>\\n  </Popover>\\n</MyComboBox>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Disabled LogicButton (TypeScript/TSX)\nDESCRIPTION: Shows how to render a LogicButton in a disabled state using the isDisabled prop. The button is labeled 'Or' and will not respond to user input. This pattern is common for conditionally interactive UI components. No special setup required beyond passing the isDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/LogicButton.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<LogicButton variant=\"or\" isDisabled>Or</LogicButton>\n```\n\n----------------------------------------\n\nTITLE: Customizing Alignment and Direction in ActionMenu\nDESCRIPTION: Demonstrates various combinations of align and direction props to control the positioning of the menu relative to the trigger button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\">\n  <ActionMenu align=\"start\">\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu align=\"end\" direction=\"top\" shouldFlip={false}>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu direction=\"start\" align=\"start\">\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu direction=\"end\" align=\"end\">\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Link Items in React\nDESCRIPTION: This example shows how to create tags that act as links using the href prop on Item components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup label=\"Links\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component for React Spectrum Docs\nDESCRIPTION: Imports and exports the Layout component from @react-spectrum/docs for structuring documentation pages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Value for ProgressBar in React Spectrum\nDESCRIPTION: Shows how to set a specific percentage value (25%) for the ProgressBar component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressBar label=\"Loading…\" value={25} />\n```\n\n----------------------------------------\n\nTITLE: Basic ProgressCircle Example in React Spectrum\nDESCRIPTION: Demonstrates basic usage of the ProgressCircle component with a specified value and aria-label for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressCircle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressCircle aria-label=\"Loading…\" value={50} />\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for `useStepListState` Documentation Page (YAML)\nDESCRIPTION: Sets metadata using MDX frontmatter (YAML format). It specifies the documentation category as 'Collections', includes an empty list for keywords, and indicates that the feature is available after version 3.0.0. This metadata helps organize and manage the documentation site.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/steplist/docs/useStepListState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncategory: Collections\nkeywords: []\nafter_version: 3.0.0\n---\n```\n\n----------------------------------------\n\nTITLE: Handling String Keys with Explicit Item Key Prop in React Spectrum (TSX)\nDESCRIPTION: This example demonstrates that when the `key` prop is explicitly set on each `Item` component, the `selectedKey` prop (and `onSelectionChange` callback) expects the key to be a string, even if the original data used for the key was a different type (like a number). Here, `item.dataId` is a number, but the `selectedKey` state is initialized and managed as the string `\"2\"`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/selection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet items = [\n  {name: 'Aardvark', dataId: 1},\n  {name: 'Kangaroo', dataId: 2},\n  {name: 'Snake', dataId: 3}\n];\n\nlet [selectedKey, setSelectedKey] = useState(\"2\");\n<ComboBox selectedKey={selectedKey} onSelectionChange={setSelectedKey}>\n  {item => <Item key={item.dataId}>{item.name}</Item>}\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: Basic robots.txt configuration that allows unrestricted access to all user agents/web crawlers. The empty Disallow directive indicates no restrictions are placed on crawler access.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/rsp-cra-18/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Importing SearchAutocomplete Components and Dependencies in JSX\nDESCRIPTION: This snippet imports the `SearchAutocomplete`, `Section`, and `Item` components from `@react-spectrum/autocomplete`, the `useFilter` hook from `@react-aria/i18n`, various Spectrum icons, and utility components like `Text` and `Avatar` needed for the documentation examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {SearchAutocomplete, Section, Item} from '@react-spectrum/autocomplete';\nimport {useFilter} from '@react-aria/i18n';\nimport Email from '@spectrum-icons/workflow/Email';\nimport Document from '@spectrum-icons/workflow/Document';\nimport WebPages from '@spectrum-icons/workflow/WebPages';\nimport SocialNetwork from '@spectrum-icons/workflow/SocialNetwork';\nimport ShoppingCart from '@spectrum-icons/workflow/ShoppingCart';\nimport Folder from '@spectrum-icons/workflow/Folder';\nimport {Text} from '@react-spectrum/text';\nimport {Avatar} from \"@react-spectrum/avatar\";\n```\n\n----------------------------------------\n\nTITLE: NumberField Labeling and Requirement Indicators\nDESCRIPTION: Shows various ways to label a NumberField and indicate if it's required or optional.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-150\" wrap>\n  <NumberField label=\"Cookies\" minValue={0} />\n  <NumberField label=\"Cookies\" isRequired necessityIndicator=\"icon\" minValue={0}  />\n  <NumberField label=\"Cookies\" isRequired necessityIndicator=\"label\" minValue={0}  />\n  <NumberField label=\"Cookies\" necessityIndicator=\"label\" minValue={0}  />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Creating a Selectable Table Component with React Aria Contexts\nDESCRIPTION: Demonstrates how to create a custom component that uses React Aria contexts to control the selection mode of a nested Table component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_52\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SelectionMode} from 'react-aria-components';\nimport {ToggleButtonContext, TableContext} from 'react-aria-components';\n\nfunction Selectable({children}) {\n  let [isSelected, onChange] = React.useState(false);\n  let selectionMode: SelectionMode = isSelected ? 'multiple' : 'none';\n  return (\n    <ToggleButtonContext.Provider value={{isSelected, onChange}}>\n      <TableContext.Provider value={{selectionMode}}>\n        {children}\n      </TableContext.Provider>\n    </ToggleButtonContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Disclosure Component\nDESCRIPTION: Example of wrapping the Disclosure component into a reusable component with custom props for better code organization and reusability.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Disclosure.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {DisclosureProps} from 'react-aria-components';\n\ninterface MyDisclosureProps extends Omit<DisclosureProps, 'children'> {\n  title?: string,\n  children?: React.ReactNode\n}\n\nfunction MyDisclosure({title, children, ...props}: MyDisclosureProps) {\n  return (\n    <Disclosure {...props}>\n      <Heading>\n        <Button slot=\"trigger\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          {title}\n        </Button>\n      </Heading>\n      <DisclosurePanel>\n        <p>{children}</p>\n      </DisclosurePanel>\n    </Disclosure>\n  )\n}\n\n<MyDisclosure title=\"Manage your account\">\n  Details on managing your account\n</MyDisclosure>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in React Spectrum Menu\nDESCRIPTION: Demonstrates how to implement multiple selection mode in a React Spectrum Menu component. It uses the selectionMode prop set to 'multiple' and manages selected items with state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-aria-components';\n\nfunction Example() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['sidebar', 'console']));\n\n  return (\n    <>\n      <MyMenuButton label=\"View\" selectionMode=\"multiple\" selectedKeys={selected} onSelectionChange={setSelected}>\n        <MenuItem id='sidebar'>Sidebar</MenuItem>\n        <MenuItem id='searchbar'>Searchbar</MenuItem>\n        <MenuItem id='tools'>Tools</MenuItem>\n        <MenuItem id='console'>Console</MenuItem>\n      </MyMenuButton>\n      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Anatomy of RangeCalendar with React Aria Components in TSX\nDESCRIPTION: Outlines the component structure of `RangeCalendar` using various sub-components from `react-aria-components`. It demonstrates the typical layout including previous/next buttons, heading, grid header/body/cells, and an optional error message text element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RangeCalendar, Heading, Button, CalendarGrid, CalendarGridHeader, CalendarHeaderCell, CalendarGridBody, CalendarCell, Text} from 'react-aria-components';\n\n<RangeCalendar>\n  <Button slot=\"previous\" />\n  <Heading />\n  <Button slot=\"next\" />\n  <CalendarGrid>\n    <CalendarGridHeader>\n      {day => <CalendarHeaderCell />}\n    </CalendarGridHeader>\n    <CalendarGridBody>\n      {date => <CalendarCell date={date} />}\n    </CalendarGridBody>\n  </CalendarGrid>\n  <Text slot=\"errorMessage\" />\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Styling FieldGroup and Error Message in CSS\nDESCRIPTION: This CSS snippet provides basic styling for the `FieldGroup` example. It styles the `fieldset` element by adding padding and adjusting its width. It also defines styles for the error message element (with class `invalid`), setting its color, adding top margin, and making it a block-level element. Requires a CSS variable `--invalid-color` to be defined elsewhere.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n```css\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n\n.invalid {\n  color: var(--invalid-color);\n  margin-top: 1em;\n  display: block;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Accordion Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'Accordion' component. It renders a container for grouping related 'Disclosure' components, typically allowing only one section to be expanded at a time. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_45\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion />\n```\n\n----------------------------------------\n\nTITLE: Creating a CalendarDate in Buddhist Calendar\nDESCRIPTION: Shows how to create a CalendarDate in the Buddhist calendar system, equivalent to April 30th, 2020 in the Gregorian calendar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {BuddhistCalendar} from '@internationalized/date';\n\nlet date = new CalendarDate(new BuddhistCalendar(), 2563, 4, 30);\n```\n\n----------------------------------------\n\nTITLE: Handling TimeField onChange Events in React Spectrum\nDESCRIPTION: This snippet demonstrates how to handle onChange events from a TimeField component. It updates a separate element with a formatted version of the selected time using a date formatter.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n  let formatter = useDateFormatter({dateStyle: 'long', timeStyle: 'long'});\n\n  return (\n    <>\n      <TimeField label=\"Time\" value={date} onChange={setDate} />\n      <p>Selected date and time: {(date?.toDate && formatter.format(date.toDate())) || (date && date.toString()) || '--'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Layout and Exporting in React Spectrum (JavaScript)\nDESCRIPTION: Imports the Layout component from the @react-spectrum/docs package and immediately exports it as the default export. This sets up the foundational layout wrapper for any documentation page that uses this file. No additional wrapping or parameters are required, and the dependency is @react-spectrum/docs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/slider/docs/useSliderState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Interface Documentation using ClassAPI Component in JSX\nDESCRIPTION: Uses the `ClassAPI` component to display the interface or type definition associated with the return value of the `useSelectState` hook. It accesses the relevant class/interface definition and type links from the imported `docs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/select/docs/useSelectState.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useSelectState.return.base.id]} />\n```\n\n----------------------------------------\n\nTITLE: Combining Icon and Label in a Badge with React Spectrum (TypeScript/JSX)\nDESCRIPTION: Illustrates the use of a Badge component containing both an icon (CheckmarkCircle) and a textual label, leveraging components from @react-spectrum/text and @spectrum-icons/workflow. The icon is given an aria-label for accessibility, and the Text component is used as the label. Inputs include icon and text components as children, producing an accessible badge element with combined content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/badge/docs/Badge.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Text} from '@react-spectrum/text';\nimport CheckmarkCircle from '@spectrum-icons/workflow/CheckmarkCircle';\n\n<Badge variant=\"positive\">\n  <CheckmarkCircle aria-label=\"Done\" />\n  <Text>Icon + Label</Text>\n</Badge>\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker with Validation and Event Handling\nDESCRIPTION: Implementation of DateRangePicker with onChange events and date formatting\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: parseDate('2020-07-03'),\n    end: parseDate('2020-07-10')\n  });\n  let formatter = useDateFormatter({dateStyle: 'long'});\n\n  return (\n    <>\n      <DateRangePicker label=\"Date range\" value={range} onChange={setRange} />\n      <p>Selected date: {range ? formatter.formatRange(range.start.toDate(getLocalTimeZone()), range.end.toDate(getLocalTimeZone())) : '--'}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RFC Directory in Markdown\nDESCRIPTION: This snippet demonstrates how to create a directory for a new RFC, using a specific naming convention that includes the year and a descriptive title.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n2. Create a directory inside this `rfcs` directory. The directory name should begin with the year and include a meaningful description, such as `rfcs/2018-cyclebutton-new-component`.\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout Component in JavaScript/JSX\nDESCRIPTION: This JavaScript snippet, typically found at the beginning of an MDX file, imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports the `BlogPostLayout` component as the default export for the file, likely setting it up as the primary layout structure for rendering the surrounding Markdown content as a blog post.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2025-01-15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Importing Slider Component in React Spectrum\nDESCRIPTION: Shows how to import the Slider component and other necessary modules for the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {Slider} from '@react-spectrum/slider';\n```\n\n----------------------------------------\n\nTITLE: Applying Main Axis Offset to Popover using PopoverTrigger in TSX\nDESCRIPTION: This snippet shows how to use the `offset` prop on `PopoverTrigger` to adjust the popover's distance from the trigger element along the main placement axis. In this case, the popover is placed 'top' and offset by an additional 50 pixels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<PopoverTrigger placement=\"top\" offset={50} label=\"Trigger\">\n  <Dialog>\n    Offset by an additional 50px.\n  </Dialog>\n</PopoverTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using the MenuItem Component in React Spectrum Menus (JSX)\nDESCRIPTION: Represents a selectable choice or action within a React Spectrum Menu or Submenu. It's a focusable element potentially having roles like 'menuitem', 'menuitemradio', or 'menuitemcheckbox' according to the WAI-ARIA pattern.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuItem/>\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Component State with CSS Data Attributes\nDESCRIPTION: This CSS snippet illustrates how to style a React Aria `DropZone` component specifically when it is an active drop target. It uses a CSS attribute selector `[data-drop-target]` to target the component's state, as React Aria exposes UI states via data attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DropZone[data-drop-target] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling RangeCalendar Component with CSS\nDESCRIPTION: This CSS snippet provides styles for the RangeCalendar component, including layout, colors, and state-based styling for calendar cells.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.calendar {\n  width: 220px;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin: 0 8px;\n}\n\n.header h2 {\n  flex: 1;\n  margin: 0;\n}\n\n.calendar table {\n  width: 100%;\n}\n\n.cell {\n  cursor: default;\n  text-align: center;\n}\n\n.selected {\n  background: var(--blue);\n  color: white;\n}\n\n.unavailable {\n  color: var(--spectrum-global-color-red-600);\n}\n\n.disabled {\n  color: gray;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Positive Variant Badge in React Spectrum (TypeScript/JSX)\nDESCRIPTION: Shows a simple example of rendering a Badge component with the variant property set to 'positive', displaying the text 'Licensed'. This snippet demonstrates the minimal setup for using a semantic status badge. The input is the variant prop and child content string; the output is a styled badge element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/badge/docs/Badge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Badge variant=\"positive\">Licensed</Badge>\n```\n\n----------------------------------------\n\nTITLE: Configuring optimize-locales-plugin with Vite (JavaScript)\nDESCRIPTION: Provides an example of using the `@react-aria/optimize-locales-plugin` in a Vite configuration file (`vite.config.js`). It imports the plugin using ES Modules `import` and adds it to the `plugins` array using the `optimizeLocales.vite` function, specifying the locales ('en-US', 'fr-FR').\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/optimize-locales-plugin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// vite.config.js\nimport optimizeLocales from '@react-aria/optimize-locales-plugin';\n\nexport default {\n  plugins: [\n    optimizeLocales.vite({\n      locales: ['en-US', 'fr-FR']\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Selector for Styling React Aria CheckboxGroup (CSS)\nDESCRIPTION: This CSS snippet provides the default class selector (`.react-aria-CheckboxGroup`) used to target and style the `CheckboxGroup` component from React Aria Components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-CheckboxGroup {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumbs Components in React Spectrum - TypeScript/JSX\nDESCRIPTION: This snippet demonstrates how to import the Breadcrumbs and Item components from the @react-spectrum/breadcrumbs package and View from @react-spectrum/view, making them available for use in React applications. There are no extra dependencies required besides these packages themselves. No parameters are involved; it is purely for importing and setup, with no output.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {Breadcrumbs, Item} from '@react-spectrum/breadcrumbs';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Importing Component Styles for Checkbox, Button, and ToggleButton (CSS)\nDESCRIPTION: This snippet imports CSS layers specific to Checkbox, Button, and ToggleButton components for styling within a larger documentation or Storybook context. It relies on the CSS layer feature and assumes these component styles exist as separate .mdx files in the same directory and are compatible with layer targeting. Inputs are relative path references; output is the inclusion of these styles for correct component rendering and visual separation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toolbar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Checkbox.mdx' layer(checkbox);\\n@import './Button.mdx' layer(button);\\n@import './ToggleButton.mdx' layer(togglebutton);\n```\n\n----------------------------------------\n\nTITLE: Importing Themes and Layered CSS for ToggleButtonGroup (CSS)\nDESCRIPTION: Illustrates how to import theme and modular CSS files for styling toggle button groups. The code imports an example theme and two CSS modules (Button.mdx and ToggleButton.mdx) into the stylesheet. Prerequisite: referenced files must exist and CSS layers should be supported by your bundler. This hidden CSS snippet is intended for applying default or custom styles to button and toggle button groups.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n@import './Button.mdx' layer(button);\n@import './ToggleButton.mdx' layer(togglebutton);\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for ColorSlider Component\nDESCRIPTION: Provides CSS styling for the ColorSlider component, including layout using CSS Grid, track and thumb styling, and support for horizontal orientation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSlider {\n  display: grid;\n  grid-template-areas: \"label output\"\n                       \"track track\";\n  grid-template-columns: 1fr auto;\n  gap: 4px;\n  max-width: 300px;\n\n  .react-aria-Label {\n    grid-area: label;\n  }\n\n  .react-aria-SliderOutput {\n    grid-area: output;\n  }\n\n  .react-aria-SliderTrack {\n    grid-area: track;\n    border-radius: 4px;\n  }\n\n  &[data-orientation=horizontal] {\n    .react-aria-SliderTrack {\n      height: 28px;\n    }\n\n    .react-aria-ColorThumb {\n      top: 50%;\n    }\n  }\n}\n\n.react-aria-ColorThumb {\n  border: 2px solid white;\n  box-shadow: 0 0 0 1px black, inset 0 0 0 1px black;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    width: 24px;\n    height: 24px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing DatePicker with Context Access in React Aria\nDESCRIPTION: Example of extending a DatePicker component with a clear button by accessing the component's state context. This demonstrates how React Aria allows extending components with new features or replacing individual parts with custom implementations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// Add a clear button to a DatePicker.\nfunction DatePickerClearButton() {\n  /*- begin highlight -*/\n  let state = useContext(DatePickerStateContext);\n  /*- end highlight -*/\n\n  return (\n    <Button\n      slot={null}\n      aria-label=\"Clear\"\n      onPress={() => state.setValue(null)}>\n      ✕\n    </Button>\n  );\n}\n\n<DatePicker>\n  <Label>Date</Label>\n  <Group>\n    <DateInput>\n      {segment => <DateSegment segment={segment} />}\n    </DateInput>\n    {/*- begin highlight -*/}\n    <DatePickerClearButton />\n    {/*- end highlight -*/}\n    <Button>▼</Button>\n  </Group>\n  <Popover>\n    <Dialog>\n      <Calendar>\n        <header>\n          <Button slot=\"previous\">◀</Button>\n          <Heading />\n          <Button slot=\"next\">▶</Button>\n        </header>\n        <CalendarGrid>\n          {date => <CalendarCell date={date} />}\n        </CalendarGrid>\n      </Calendar>\n    </Dialog>\n  </Popover>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components - React Spectrum - JSX\nDESCRIPTION: This snippet shows how to import Accordion and its subcomponents (Disclosure, DisclosureTitle, DisclosurePanel) from @react-spectrum/accordion for usage within a React project. A valid React app and installation of @react-spectrum/accordion are required. No inputs or outputs; this enables usage of these components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {Accordion, Disclosure, DisclosureTitle, DisclosurePanel} from '@react-spectrum/accordion';\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v4 for React Aria Components\nDESCRIPTION: Shows how to set up Tailwind CSS v4 to work with React Aria Components by importing the plugin in CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/opacity-slider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Proposed Monorepo Package Structure for React Spectrum\nDESCRIPTION: Illustrates the proposed Lerna-based monorepo structure. Each UI component (like Button, ComboBox) resides in its own package under the `packages/` directory, containing its source (`src`), tests (`test`), documentation (`docs`), and `package.json`. A separate `react-spectrum` package acts as the monolith, containing simple re-export files and its own `package.json` listing dependencies on the individual component packages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-versioning.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npackages\n├── button\n│   ├── package.json\n│   ├── src\n│   │   └── Button.js\n│   ├── test\n│   │   └── Button.test.js\n│   └── docs\n│       └── Button.mdx\n├── combo-box\n│   ├── package.json\n│   ├── src\n│   │   └── ComboBox.js\n│   ├── test\n│   │   └── ComboBox.test.js\n│   └── docs\n│       └── ComboBox.mdx\n├── ...\n└── react-spectrum\n    ├── Button.js\n    ├── ComboBox.js\n    ├── ...\n    └── package.json\n```\n\n----------------------------------------\n\nTITLE: License Header Comment (JavaScript/JSX)\nDESCRIPTION: Standard Apache 2.0 License comment block defining the terms under which the file is licensed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tooltip/docs/useTooltipTriggerState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale Optimization Plugin for Esbuild - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to integrate the @react-aria/optimize-locales-plugin with Esbuild. It imports necessary modules and sets up the build process to include the locale optimization plugin, specifying supported locales in the configuration. Dependencies required include esbuild and @react-aria/optimize-locales-plugin. The main parameters are the 'locales' array, and the output is an optimized Esbuild build process supporting the listed locales. Ensure plugins are installed and configured in your project's build pipeline.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/internationalization.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {build} from 'esbuild';\\nimport optimizeLocales from '@react-aria/optimize-locales-plugin';\\n\\nbuild({\\n  plugins: [\\n    optimizeLocales.esbuild({\\n      locales: ['en-US', 'fr-FR']\\n    })\\n  ]\\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in React Aria Tabs\nDESCRIPTION: Shows how to use render props to conditionally render elements based on the tab's selected state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Tab>\n  {({isSelected}) => (\n    <>\n      {isSelected && <SelectionIndicator />}\n      Item\n    </>\n  )}\n</Tab>\n```\n\n----------------------------------------\n\nTITLE: Creating CalendarDateTime Instance - TypeScript\nDESCRIPTION: Creates a CalendarDateTime object representing February 3rd, 2022 at 9:15 AM in the Gregorian calendar system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDateTime} from '@internationalized/date';\n\nlet date = new CalendarDateTime(2022, 2, 3, 9, 15);\n```\n\n----------------------------------------\n\nTITLE: Defining Accepted Drag Types for Droppable List in React Spectrum\nDESCRIPTION: Creates an array that specifies the custom drag type ('adobe-app') that the droppable list will accept, ensuring it only handles compatible dragged items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nlet acceptedDragTypes = ['adobe-app'];\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Table Package in Markdown\nDESCRIPTION: Shows the package name and repository reference for the React Spectrum table component. The snippet provides a link to the main repository where more detailed information about the package can be found.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/table\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component in React Spectrum\nDESCRIPTION: Imports and exports the Layout component from the @react-spectrum/docs package, which is likely used for structuring the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Styling the Meter Component with CSS\nDESCRIPTION: This CSS snippet provides styling for the Meter component, including layout, colors, and responsive design considerations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Meter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Meter {\n  --fill-color: forestgreen;\n\n  display: grid;\n  grid-template-areas: \"label value\"\n                       \"bar bar\";\n  grid-template-columns: 1fr auto;\n  gap: 4px;\n  width: 250px;\n  color: var(--text-color);\n\n  .value {\n    grid-area: value;\n  }\n\n  .bar {\n    grid-area: bar;\n    box-shadow: inset 0px 0px 0px 1px var(--border-color);\n    forced-color-adjust: none;\n    height: 10px;\n    border-radius: 5px;\n    overflow: hidden;\n  }\n\n  .fill {\n    background: var(--fill-color);\n    height: 100%;\n  }\n}\n\n@media (forced-colors: active) {\n  .react-aria-Meter {\n    --fill-color: Highlight;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Spectrum 2 Styles to React Spectrum Components\nDESCRIPTION: Example of using the style() macro to apply Spectrum 2 styles to a React Spectrum Button component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-webpack-5-example/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button styles={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing ColorSwatch and Flex from React Spectrum - TypeScript/JSX\nDESCRIPTION: This snippet demonstrates how to import the ColorSwatch component from @react-spectrum/color and the Flex container from @react-spectrum/layout. These imports are prerequisites for the further usage of ColorSwatch in layout compositions within examples and applications. There are no inputs or outputs; it simply prepares your file for later use of these components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatch} from '@react-spectrum/color';\\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Using the ColorWheel Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'ColorWheel' component. It renders a circular control allowing users to adjust the hue of a color value. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorWheel />\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Input Component (CSS)\nDESCRIPTION: Simple CSS rule to style the input element within the `ColorNumberField` example. It sets a fixed width for components using the `.react-aria-Input` class, likely generated by the `Input` component from `react-aria-components`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Input {\n  width: 4ch;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with DateRangePicker\nDESCRIPTION: Example of integrating DateRangePicker with HTML forms using startName and endName props\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Trip dates\" startName=\"startDate\" endName=\"endDate\" />\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker with an HSL Color Value in React\nDESCRIPTION: Example of using the reusable ColorPicker component with an HSL color string as the default value. Shows how to provide alternative color formats to the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorPicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorPicker\n  label=\"Color\"\n  defaultValue=\"hsl(25, 100%, 50%)\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Email Data Structure in TypeScript\nDESCRIPTION: Defines a mock data structure containing email messages with properties like subject, sender, date, and message content. This sample data is used to populate the example email application UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ios-list.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n\nlet messages = {\n  \"emails\": [\n    {\n      \"id\": 1,\n      \"subject\": \"Meeting Reminder: Project Kickoff\",\n      \"sender\": \"Emma Johnson\",\n      \"date\": \"9:40 AM\",\n      \"message\": \"Dear Devon,\\n\\nThis is a friendly reminder of the upcoming project kickoff meeting scheduled for tomorrow at 9am. The meeting will be held in [location]. It's essential that all team members attend to ensure a successful start to the project.\\n\\nPlease come prepared with any necessary materials or information relevant to the project. If you have any questions or need further clarification, don't hesitate to reach out to me.\\n\\nLooking forward to seeing you at the meeting.\\n\\nBest regards,\\nEmma\"\n    },\n    {\n      \"id\": 2,\n      \"subject\": \"Important Account Update\",\n      \"sender\": \"support@company.com\",\n      \"date\": \"8:23 AM\",\n      \"message\": \"Dear Devon,\\n\\nWe hope this email finds you well. We are writing to inform you about an important update regarding your account with us. As part of our ongoing efforts to enhance security, we have implemented a new two-factor authentication process.\\n\\nTo ensure continued access to your account, please follow the instructions provided in the attached document to set up the two-factor authentication feature. If you have any questions or need assistance, please don't hesitate to contact our support team.\\n\\nThank you for your cooperation.\\n\\nBest regards,\\nThe [Company] Team\"\n    },\n    {\n      \"id\": 3,\n      \"subject\": \"Promotion Announcement\",\n      \"sender\": \"Liam Thompson\",\n      \"date\": \"Yesterday\",\n      \"message\": \"Dear Devon,\\n\\nWe are pleased to inform you that based on your exceptional performance, dedication, and contributions to the company, you have been promoted to the position of [new position]. This promotion is a recognition of your hard work and the value you bring to our organization.\\n\\nPlease accept our heartfelt congratulations on this well-deserved achievement. We believe that you will excel in your new role and contribute to the continued success of our team.\\n\\nIf you have any questions or need any support during this transition, please don't hesitate to contact the HR department.\\n\\nBest regards,\\nThe HR Team\"\n    },\n    {\n      \"id\": 4,\n      \"subject\": \"Invitation to Exclusive Networking Event\",\n      \"sender\": \"events@company.com\",\n      \"date\": \"Yesterday\",\n      \"message\": \"Dear Devon,\\n\\nYou are cordially invited to our upcoming exclusive networking event, where industry leaders, professionals, and enthusiasts gather to exchange ideas and forge valuable connections. This event will take place on [date] at [venue], starting at [time].\\n\\nPlease RSVP by [RSVP date] to secure your spot. We anticipate a high demand for attendance, so we encourage you to respond promptly. We look forward to welcoming you to this exciting event!\\n\\nBest regards,\\nThe [Company] Events Team\"\n    },\n    {\n      \"id\": 5,\n      \"subject\": \"Thank You for Your Recent Purchase\",\n      \"sender\": \"sales@company.com\",\n      \"date\": \"Friday\",\n      \"message\": \"Dear Devon,\\n\\nThank you for your recent purchase from our online store. We appreciate your business and are delighted to let you know that your order has been successfully processed and is now being prepared for shipment.\\n\\nYou will receive a confirmation email with tracking details as soon as your package is dispatched. If you have any questions regarding your order or need further assistance, please don't hesitate to reach out to our customer support team.\\n\\nOnce again, thank you for choosing us as your preferred shopping destination.\\n\\nBest regards,\\nThe [Company] Team\"\n    },\n    {\n      \"id\": 6,\n      \"sender\": \"Jane Doe\",\n      \"subject\": \"New Project Proposal\",\n      \"date\": \"Friday\",\n      \"message\": \"Hi Devon,\\n\\nI've attached a new project proposal for your review. Please let me know what you think.\\n\\nThanks,\\nJane\"\n    },\n    {\n      \"id\": 7,\n      \"sender\": \"Susan Smith\",\n      \"subject\": \"Status Update\",\n      \"date\": \"Friday\",\n      \"message\": \"Hi Devon,\\n\\nI'm just sending a quick status update on the project we're working on together. I'm on track to meet my deadlines, and I'll keep you updated on my progress.\\n\\nThanks,\\nSusan\"\n    },\n    {\n      \"id\": 8,\n      \"sender\": \"Michael Jones\",\n      \"subject\": \"Question about the presentation\",\n      \"date\": \"Thursday\",\n      \"message\": \"Hi Devon,\\n\\nI had a question about the presentation you gave last week. I was wondering if you could send me the slides so I can review them in more detail.\\n\\nThanks,\\nMichael\"\n    },\n    {\n      \"id\": 9,\n      \"sender\": \"Customer Service\",\n      \"subject\": \"Order Confirmation\",\n      \"date\": \"Thursday\",\n      \"message\": \"Hi Devon,\\n\\nWe just wanted to confirm that your order has been shipped. Your order number is 1234567890, and it should arrive at your home address within 2-3 business days.\\n\\nThanks for your purchase!\\n\\nCustomer Service\"\n    },\n    {\n      \"id\": 10,\n      \"sender\": \"Your Bank\",\n      \"subject\": \"Account Statement\",\n      \"date\": \"Wednesday\",\n      \"message\": \"Hi Devon,\\n\\nWe're writing to you today to provide you with your monthly account statement. As you can see, your account balance is currently $1,000.00.\\n\\nPlease let us know if you have any questions.\\n\\nThanks,\\nYour Bank\"\n    },\n    {\n      \"id\": 11,\n      \"sender\": \"hr@company2.com\",\n      \"subject\": \"Employee Benefits Update\",\n      \"date\": \"Tuesday\",\n      \"message\": \"Dear Devon,\\n\\nWe wanted to inform you about the recent updates to our employee benefits package. We have enhanced the healthcare coverage options and added additional wellness programs to support your well-being.\\n\\nPlease review the attached document for detailed information on the updated benefits. If you have any questions or need further assistance, feel free to contact the HR department.\\n\\nBest regards,\\nThe HR Team\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AlertDialog and DialogTrigger in React Spectrum\nDESCRIPTION: Basic import example showing how to import the ActionButton, AlertDialog, and DialogTrigger components from React Spectrum libraries.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionButton} from '@react-spectrum/button';\nimport {AlertDialog, DialogTrigger} from '@react-spectrum/dialog';\n```\n\n----------------------------------------\n\nTITLE: Listing Released Package Versions in React Spectrum - Markdown\nDESCRIPTION: This Markdown snippet enumerates the released versions of various React Spectrum, React Aria, and related packages. This serves as both a release log and a quick reference for users to verify the latest package updates associated with the current release. Each entry shows a package name and its corresponding semantic version, helping developers track updates, dependencies, and compatible package versions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-12-16.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- @adobe/react-spectrum => 3.15.1\n- @internationalized/message => 3.0.3\n- @react-aria/color => 3.0.0-beta.6\n- @react-aria/combobox => 3.2.1\n- @react-aria/datepicker => 3.0.0-alpha.2\n- @react-aria/grid => 3.2.0\n- @react-aria/searchfield => 3.2.2\n- @react-aria/selection => 3.7.1\n- @react-aria/table => 3.2.0\n- @react-aria/utils => 3.11.0\n- @react-spectrum/color => 3.0.0-beta.6\n- @react-spectrum/datepicker => 3.0.0-alpha.2\n- @react-spectrum/list => 3.0.0-alpha.5\n- @react-spectrum/table => 3.1.1\n- @react-spectrum/tabs => 3.1.1\n- @react-stately/list => 3.4.1\n- @react-stately/selection => 3.9.0\n- @react-types/combobox => 3.2.1\n- @react-types/select => 3.5.1\n- @react-types/shared => 3.10.1\n- react-aria => 3.12.0\n- react-stately => 3.11.0\n```\n\n----------------------------------------\n\nTITLE: Styling TimeField Components with CSS\nDESCRIPTION: Provides example CSS for styling the TimeField, DateInput, and DateSegment components using variables from '@react-aria/example-theme'. It covers layout, colors, borders, focus states, and placeholder styles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-TimeField {\n  color: var(--text-color);\n  display: flex;\n  flex-direction: column;\n}\n\n.react-aria-DateInput {\n  display: inline;\n  padding: 4px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  background: var(--field-background);\n  width: fit-content;\n  min-width: 150px;\n  white-space: nowrap;\n  forced-color-adjust: none;\n\n  &[data-focus-within] {\n    outline: 2px solid var(--focus-ring-color);\n    outline-offset: -1px;\n  }\n}\n\n.react-aria-DateSegment {\n  padding: 0 2px;\n  font-variant-numeric: tabular-nums;\n  text-align: end;\n  color: var(--text-color);\n\n  &[data-type=literal] {\n    padding: 0;\n  }\n\n  &[data-placeholder] {\n    color: var(--text-color-placeholder);\n    font-style: italic;\n  }\n\n  &:focus {\n    color: var(--highlight-foreground);\n    background: var(--highlight-background);\n    outline: none;\n    border-radius: 4px;\n    caret-color: transparent;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Picker Components\nDESCRIPTION: Basic imports required for using the Picker component and related utilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {Picker, Item, Section} from '@react-spectrum/picker';\nimport Book from '@spectrum-icons/workflow/Book';\nimport BulkEditUsers from '@spectrum-icons/workflow/BulkEditUsers';\nimport Draw from '@spectrum-icons/workflow/Draw';\nimport {Text} from '@react-spectrum/text';\nimport {Avatar} from \"@react-spectrum/avatar\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix with Vite for React Spectrum SSR (tsx)\nDESCRIPTION: Provides the configuration for `vite.config.js` (or `.ts`) when using Remix with Vite to ensure React Spectrum works correctly with Server-Side Rendering (SSR). It utilizes `glob` to find React Spectrum related packages and adds them to the `ssr.noExternal` array, preventing them from being treated as external dependencies during the SSR build. Requires the `glob` package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport glob from 'glob';\n\nexport default defineConfig({\n  ssr: {\n    noExternal: [\n      '@adobe/react-spectrum',\n      '@react-spectrum/*',\n      '@spectrum-icons/*',\n    ].flatMap((spec) => glob.sync(`${spec}`, { cwd: 'node_modules/' })),\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Popover Component with Custom ClassName in React Spectrum with CSS\nDESCRIPTION: Shows how to customize the appearance of the Popover by targeting its CSS class (.react-aria-Popover) and provides a template for overriding styles. Used for global component theming. Inputs: none; output: styles applied to Popover elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Popover {\\n  /* ... */\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for React Aria Components in v4\nDESCRIPTION: Shows how to import the tailwindcss-react-aria-components plugin for Tailwind CSS v4 directly in CSS files.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/shipping-radio.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Over Background Link\nDESCRIPTION: Example of Link component styled for use over a colored background\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/link/docs/Link.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<View backgroundColor=\"positive\" padding=\"size-300\">\n  <Link variant=\"overBackground\">Learn more here!</Link>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Flipping Behavior in ActionMenu\nDESCRIPTION: Shows how to control the automatic flipping behavior of menus when they reach the edge of the viewport using the shouldFlip prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\">\n  <ActionMenu shouldFlip>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n  <ActionMenu shouldFlip={false}>\n    <Item key=\"cut\">Cut</Item>\n    <Item key=\"copy\">Copy</Item>\n    <Item key=\"paste\">Paste</Item>\n  </ActionMenu>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Data and Components in JavaScript/JSX\nDESCRIPTION: Imports documentation data (`docs`) specific to `@react-stately/tabs`, various documentation rendering components (`ClassAPI`, `HeaderInfo`, etc.) from `@react-spectrum/docs`, and package metadata (`packageData`). These imports provide the necessary content and tools to render the API documentation for `useTabListState`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tabs/docs/useTabListState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/tabs';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/tabs/package.json';\n```\n\n----------------------------------------\n\nTITLE: Styling RadioGroup Description Text (CSS)\nDESCRIPTION: Provides a CSS rule to style the description text associated with a RadioGroup. It targets the element using the attribute selector `[slot=description]` within the `.react-aria-RadioGroup` class.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-RadioGroup {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Album Data Structure in TypeScript\nDESCRIPTION: Defines and populates an array of album objects with sample data including images, titles, and artists. Creates 1000 items by cycling through a base set of album options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet albumOptions = [\n  {\n    image: 'https://images.unsplash.com/photo-1593958812614-2db6a598c71c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8ZGlzY298ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Euphoric Echoes',\n    artist: 'Luna Solstice'\n  },\n  {\n    image: 'https://images.unsplash.com/photo-1601042879364-f3947d3f9c16?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8bmVvbnxlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Neon Dreamscape',\n    artist: 'Electra Skyline'\n  },\n  {\n    image: 'https://images.unsplash.com/photo-1528722828814-77b9b83aafb2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fHNwYWNlfGVufDB8fDB8fHww&auto=format&fit=crop&w=900&q=60',\n    title: 'Cosmic Serenade',\n    artist: 'Orion\\'s Symphony'\n  },\n  {\n    image: 'https://images.unsplash.com/photo-1511379938547-c1f69419868d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8bXVzaWN8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Melancholy Melodies',\n    artist: 'Violet Mistral'\n  },\n  {\n    image: 'https://images.unsplash.com/photo-1608433319511-dfe8ea4cbd3c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fGJlYXR8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Rhythmic Illusions',\n    artist: 'Mirage Beats'\n  }\n];\n\nlet albums = [];\nfor (let i = 0; i < 1000; i++) {\n  albums.push({\n    id: i,\n    ...albumOptions[i % albumOptions.length]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MenuTrigger Components\nDESCRIPTION: Basic imports needed for using MenuTrigger component and related dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/MenuTrigger.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionButton} from '@react-spectrum/button'\nimport {Item, Menu, MenuTrigger} from '@react-spectrum/menu';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component - React Spectrum - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Switch component from the @react-spectrum/switch package. Importing the component is the first step before using it in React files. No additional dependencies are required beyond having @react-spectrum/switch installed. This import provides access to all Switch functionality described in the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/docs/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Switch} from '@react-spectrum/switch';\n```\n\n----------------------------------------\n\nTITLE: Initializing React Spectrum Autocomplete Value (Controlled vs. Uncontrolled) in TypeScript\nDESCRIPTION: Shows two `MyAutocomplete` instances within a React component. The first uses the `defaultInputValue` prop for an uncontrolled initial value. The second demonstrates a controlled approach using the `inputValue` prop bound to React state (`value`) and the `onInputChange` handler (`setValue`) to update the state. Both examples populate suggestions from a predefined `options` array.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Adobe Photoshop'},\n    {id: 2, name: 'Adobe XD'},\n    {id: 3, name: 'Adobe InDesign'},\n    {id: 4, name: 'Adobe AfterEffects'},\n    {id: 5, name: 'Adobe Illustrator'},\n    {id: 6, name: 'Adobe Lightroom'},\n    {id: 7, name: 'Adobe Premiere Pro'},\n    {id: 8, name: 'Adobe Fresco'},\n    {id: 9, name: 'Adobe Dreamweaver'}\n  ];\n  let [value, setValue] = React.useState('Adobe XD');\n\n  return (\n    <div style={{display: 'flex', gap: 16, flexWrap: 'wrap'}}>\n      <MyAutocomplete\n        label=\"Adobe products (Uncontrolled)\"\n        items={options}\n        /*- begin highlight -*/\n        defaultInputValue=\"Adobe XD\">\n        {/*- end highlight -*/}\n        {item => <MenuItem>{item.name}</MenuItem>}\n      </MyAutocomplete>\n\n      <MyAutocomplete\n        label=\"Adobe products (Controlled)\"\n        items={options}\n        /*- begin highlight -*/\n        inputValue={value}\n        onInputChange={setValue}>\n        {/*- end highlight -*/}\n        {item => <MenuItem>{item.name}</MenuItem>}\n      </MyAutocomplete>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Released React Spectrum Packages and Versions\nDESCRIPTION: This snippet provides a list of NPM packages and their specific versions released as part of an update to the Adobe React Spectrum project. It includes packages from @adobe/react-spectrum, @react-aria, @react-stately, @react-types, @internationalized, and core react-aria and react-stately libraries.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-11-24.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- @adobe/react-spectrum@3.15.0\n- @internationalized/date@3.0.0-alpha.0\n- @react-aria/autocomplete@3.0.0-alpha.1\n- @react-aria/calendar@3.0.0-alpha.0\n- @react-aria/color@3.0.0-beta.5\n- @react-aria/combobox@3.2.0\n- @react-aria/datepicker@3.0.0-alpha.0\n- @react-aria/grid@3.1.0\n- @react-aria/i18n@3.3.3\n- @react-aria/interactions@3.7.0\n- @react-aria/label@3.2.1\n- @react-aria/link@3.2.0\n- @react-aria/listbox@3.4.0\n- @react-aria/menu@3.3.0\n- @react-aria/numberfield@3.1.1\n- @react-aria/overlays@3.7.3\n- @react-aria/radio@3.1.6\n- @react-aria/searchfield@3.2.1\n- @react-aria/select@3.6.0\n- @react-aria/selection@3.7.0\n- @react-aria/table@3.1.0\n- @react-aria/tabs@3.1.0\n- @react-aria/textfield@3.5.0\n- @react-aria/toggle@3.1.5\n- @react-aria/utils@3.10.0\n- @react-aria/virtualizer@3.3.5\n- @react-spectrum/accordion@3.0.0-alpha.3\n- @react-spectrum/actiongroup@3.3.1\n- @react-spectrum/autocomplete@3.0.0-alpha.1\n- @react-spectrum/breadcrumbs@3.2.4\n- @react-spectrum/buttongroup@3.2.3\n- @react-spectrum/calendar@3.0.0-alpha.0\n- @react-spectrum/card@3.0.0-alpha.1\n- @react-spectrum/color@3.0.0-beta.5\n- @react-spectrum/combobox@3.2.0\n- @react-spectrum/datepicker@3.0.0-alpha.0\n- @react-spectrum/form@3.2.4\n- @react-spectrum/label@3.4.1\n- @react-spectrum/list@3.0.0-alpha.4\n- @react-spectrum/numberfield@3.1.1\n- @react-spectrum/picker@3.5.0\n- @react-spectrum/radio@3.1.5\n- @react-spectrum/searchfield@3.2.1\n- @react-spectrum/searchwithin@3.0.0-alpha.1\n- @react-spectrum/table@3.1.0\n- @react-spectrum/tabs@3.1.0\n- @react-spectrum/textfield@3.3.0\n- @react-spectrum/utils@3.6.3\n- @react-stately/calendar@3.0.0-alpha.0\n- @react-stately/color@3.0.0-beta.5\n- @react-stately/data@3.4.3\n- @react-stately/datepicker@3.0.0-alpha.0\n- @react-stately/grid@3.1.0\n- @react-stately/list@3.4.0\n- @react-stately/selection@3.8.0\n- @react-stately/table@3.1.0\n- @react-stately/utils@3.3.0\n- @react-stately/virtualizer@3.1.6\n- @react-types/calendar@3.0.0-alpha.0\n- @react-types/card@3.0.0-alpha.1\n- @react-types/combobox@3.2.0\n- @react-types/datepicker@3.0.0-alpha.0\n- @react-types/link@3.2.0\n- @react-types/select@3.5.0\n- @react-types/shared@3.10.0\n- @react-types/table@3.1.0\n- react-aria@3.11.0\n- react-stately@3.10.0\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component in JavaScript/JSX\nDESCRIPTION: This snippet imports the default `Layout` component from the `@react-spectrum/docs` package. This component likely provides the overall page structure and styling for the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateFieldState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Basic TimeField Example in React Spectrum\nDESCRIPTION: Simple example of using the TimeField component with a label to create a time input field.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField label=\"Event time\" />\n```\n\n----------------------------------------\n\nTITLE: Dynamic ListBox with Selection Handling in React Spectrum\nDESCRIPTION: Demonstrates using ListBox with dynamic items coming from a data source. Includes selection functionality with the selectionMode prop and onSelectionChange handler to track selected items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aardvark'},\n    {id: 2, name: 'Cat'},\n    {id: 3, name: 'Dog'},\n    {id: 4, name: 'Kangaroo'},\n    {id: 5, name: 'Koala'},\n    {id: 6, name: 'Penguin'},\n    {id: 7, name: 'Snake'},\n    {id: 8, name: 'Turtle'},\n    {id: 9, name: 'Wombat'}\n  ];\n  let [animalId, setAnimalId] = React.useState(null);\n\n  return (\n    <>\n      <ListBox width=\"size-2400\" aria-label=\"Animals\" items={options} selectionMode=\"single\" onSelectionChange={setAnimalId}>\n        {item => <Item>{item.name}</Item>}\n      </ListBox>\n      <p>Animal id: {animalId}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files into the project for full control. This is a one-way operation that cannot be reversed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/rsp-cra-18/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Styling Unordered Lists in CSS\nDESCRIPTION: This CSS snippet removes padding from unordered lists that don't have a class attribute. It's used to style the list in the Router example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nul:not([class]) {\n  padding: 0px;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying HSL Color Wheel in CSS\nDESCRIPTION: This CSS snippet creates a circular color wheel using the HSL color space. It demonstrates how HSL represents colors, which can lead to inconsistent lightness across hues.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nbackground: `radial-gradient(var(--page-background) 0% 25%, transparent 20%), conic-gradient(in hsl longer hue, hsl(0, 100%, 50%), hsl(360, 100%, 50%))`\n```\n\n----------------------------------------\n\nTITLE: Equivalent Nested Context Provider Structure (TSX)\nDESCRIPTION: Shows the traditional way of providing multiple contexts using nested Provider components (`ButtonContext.Provider` and `InputContext.Provider`). This structure is equivalent to using the `Provider` utility component shown previously.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<ButtonContext.Provider value={{/* ... */}}>\n  <InputContext.Provider value={{/* ... */}}>\n    {/* ... */}\n  </InputContext.Provider>\n</ButtonContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v3 Plugins in tailwind.config.js (TSX)\nDESCRIPTION: Demonstrates how to configure Tailwind CSS v3 by adding the `tailwindcss-react-aria-components` (version 1.x) and `tailwindcss-animate` plugins to the `plugins` array within the `tailwind.config.js` file. This is necessary for the styling and animation utilities used in the Command Palette example to function correctly with Tailwind v3.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/command-palette.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components Based on States\nDESCRIPTION: Illustrates how to target different UI states of React Aria components using CSS selectors for ARIA and data attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Item[aria-selected=true] {\n  /* ... */\n}\n\n.react-aria-Item[data-focused] {\n  /* ... */\n}\n\n.react-aria-Popover[data-placement=left] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Documentation Metadata\nDESCRIPTION: Defines metadata for the documentation page including category and relevant keywords.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/toggle/docs/useToggleState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n---\ncategory: Forms\nkeywords: [toggle, checkbox, switch, input, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Handling Original Key Data Type with Implicit Keys in React Spectrum (TSX)\nDESCRIPTION: This snippet shows that if the `key` prop is *not* explicitly set on the `Item` component, and the data items themselves contain a `key` or `id` property, then the `selectedKey` prop (and `onSelectionChange`) expects a value matching the original data type of that `key` or `id`. Here, the `items` have a numeric `key`, and the `selectedKey` state is initialized and managed as the number `2`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/selection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet items = [\n  {name: 'Aardvark', key: 1},\n  {name: 'Kangaroo', key: 2},\n  {name: 'Snake', key: 3}\n];\n\nlet [selectedKey, setSelectedKey] = useState(2);\n<ComboBox selectedKey={selectedKey} onSelectionChange={setSelectedKey}>\n  {item => <Item>{item.name}</Item>}\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Color Area Component\nDESCRIPTION: Imports necessary components and functions from React Spectrum and React Aria libraries for implementing a color area component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport docs from 'docs:@react-aria/color';\nimport statelyDocs from 'docs:@react-stately/color';\nimport {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/color/package.json';\nimport Anatomy from './ColorAreaAnatomy.svg';\n```\n\n----------------------------------------\n\nTITLE: Defining Album Data for ListBox Examples in TypeScript\nDESCRIPTION: A sample data array containing album information including ID, image URL, title, and artist name, used for demonstrating ListBox layouts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nlet albums = [\n  {\n    id: 1,\n    image: 'https://images.unsplash.com/photo-1593958812614-2db6a598c71c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8ZGlzY298ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Euphoric Echoes',\n    artist: 'Luna Solstice'\n  },\n  {\n    id: 2,\n    image: 'https://images.unsplash.com/photo-1601042879364-f3947d3f9c16?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8bmVvbnxlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Neon Dreamscape',\n    artist: 'Electra Skyline'\n  },\n  {\n    id: 3,\n    image: 'https://images.unsplash.com/photo-1528722828814-77b9b83aafb2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fHNwYWNlfGVufDB8fDB8fHww&auto=format&fit=crop&w=900&q=60',\n    title: 'Cosmic Serenade',\n    artist: 'Orion\\'s Symphony'\n  },\n  {\n    id: 4,\n    image: 'https://images.unsplash.com/photo-1511379938547-c1f69419868d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8bXVzaWN8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Melancholy Melodies',\n    artist: 'Violet Mistral'\n  },\n  {\n    id: 5,\n    image: 'https://images.unsplash.com/photo-1608433319511-dfe8ea4cbd3c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTF8fGJlYXR8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=900&q=60',\n    title: 'Rhythmic Illusions',\n    artist: 'Mirage Beats'\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Importing React Aria Checkbox Package\nDESCRIPTION: Package import path for the React Aria Checkbox component from Adobe's React Spectrum library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-aria/checkbox\n```\n\n----------------------------------------\n\nTITLE: Installing React Spectrum using Yarn\nDESCRIPTION: This snippet shows how to install the React Spectrum package using the Yarn package manager.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @adobe/react-spectrum\n```\n\n----------------------------------------\n\nTITLE: Preparing Image Data for Waterfall Layout in JavaScript\nDESCRIPTION: This JavaScript snippet defines an initial array of image objects, each containing properties like `id`, `title`, `user`, `image` URL, and `aspectRatio`. It then expands this array to 500 items by duplicating existing entries with unique IDs, intended for demonstrating virtualization with a large dataset in the subsequent WaterfallLayout example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        \"id\": \"vMoZvKeZOhw\",\n        \"title\": \"Salt Marshes, Isle of Harris, Scotland by Nils Leonhardt. Visit my website: https://nilsleonhardt.com/storytelling-harris/ Instagram: @am.basteir\",\n        \"user\": \"Nils Leonhardt\",\n        \"image\": \"https://images.unsplash.com/photo-1585951301678-8fd6f3b32c7e?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400\",\n        \"aspectRatio\": \"0.6666666666666666\"\n    },\n    {\n        \"id\": \"wCLCK9LDDjI\",\n        \"title\": \"An aerial view of a snow covered forest\",\n        \"user\": \"Lukas Hädrich\",\n        \"image\": \"https://images.unsplash.com/photo-1737405555489-78b3755eaa81?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400\",\n        \"aspectRatio\": \"1.5\"\n    },\n    {\n        \"id\": \"OdDx3_NB-Wk\",\n        \"title\": \"A close up of a tall grass with a sky in the background\",\n        \"user\": \"Ingmar H\",\n        \"image\": \"https://images.unsplash.com/photo-1737301519296-062cd324dbfa?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400\",\n        \"aspectRatio\": \"0.6666666666666666\"\n    },\n    {\n        \"id\": \"Gn-FOw1geFc\",\n        \"title\": \"Larches on Maple Pass, Washington\",\n        \"user\": \"noelle\",\n        \"image\": \"https://images.unsplash.com/photo-1737496538329-a59d10148a08?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400\",\n        \"aspectRatio\": \"0.6666666666666666\"\n    },\n    {\n        \"id\": \"VhKJHOz2tJ8\",\n        \"title\": \"IC 1805 La nébuleuse du coeur\",\n        \"user\": \"arnaud girault\",\n        \"image\": \"https://images.unsplash.com/photo-1737478598284-b9bc11cb1e9b?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400\",\n        \"aspectRatio\": \"1.504158004158004\"\n    },\n    {\n        \"id\": \"w5QmH_uqB0U\",\n        \"title\": \"A pile of shells sitting on top of a sandy beach\",\n        \"user\": \"Toa Heftiba\",\n        \"image\": \"https://images.unsplash.com/photo-1725366351350-a64a1be919ef?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wzNDA4NDh8MHwxfHRvcGljfHw2c01WalRMU2tlUXx8fHx8Mnx8MTczODM2NzE4M3w&ixlib=rb-4.0.3&q=80&w=400\",\n        \"aspectRatio\": \"0.6666666666666666\"\n    }\n];\n\nfor (let i = 0; images.length < 500; i++) {\n  images.push({...images[i % 30], id: String(i)});\n}\n```\n\n----------------------------------------\n\nTITLE: Importing usePress Hook from React Aria\nDESCRIPTION: This snippet shows how to import the usePress hook from the @react-aria/interactions package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/usePress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {usePress} from '@react-aria/interactions';\n```\n\n----------------------------------------\n\nTITLE: Customizing Drop Indicators in GridList with React\nDESCRIPTION: This code shows how to customize the drop indicator in a GridList using the renderDropIndicator function. It imports the DropIndicator component and applies custom CSS classes based on the drop target state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DropIndicator} from 'react-aria-components';\n\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    // ...\n    renderDropIndicator(target) {\n      return (\n        <DropIndicator\n          target={target}\n          className={({isDropTarget}) => `my-drop-indicator ${isDropTarget ? 'active' : ''}`} />\n      );\n    }\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Styles in React Spectrum\nDESCRIPTION: Shows how to use object syntax for responsive styling, setting different widths for a TextField based on breakpoints.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/styling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField label=\"Name\" width={{base: 'size-2000', L: 'size-5000'}} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Sortable and Resizable Stock Table Component in React\nDESCRIPTION: This snippet defines a StockTableExample component that renders a sortable and resizable table of stocks using React Aria Components. It includes sorting functionality, custom column and row rendering, and styling with Tailwind CSS.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/stock-table.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Table, TableHeader, TableBody, Column, Row, Cell, ResizableTableContainer, ColumnResizer, Group} from 'react-aria-components';\nimport type {ColumnProps, RowProps, CellProps, SortDescriptor} from 'react-aria-components';\nimport ArrowUpIcon from '@spectrum-icons/ui/ArrowUpSmall';\nimport {useState, useMemo} from 'react';\n\nfunction StockTableExample() {\n  let [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({column: 'symbol', direction: 'ascending'});\n  let sortedItems = useMemo(() => {\n    return stocks.sort((a, b) => {\n      let first = a[sortDescriptor.column];\n      let second = b[sortDescriptor.column];\n      let cmp = first.localeCompare(second);\n      if (sortDescriptor.direction === 'descending') {\n        cmp *= -1;\n      }\n      return cmp;\n    })\n  }, [sortDescriptor]);\n\n  return (\n    <div className=\"bg-linear-to-r from-indigo-500 to-violet-500 p-8 rounded-lg flex items-center justify-center md:col-span-2\">\n      <ResizableTableContainer className=\"max-h-[280px] w-full overflow-auto scroll-pt-[2.321rem] relative bg-white rounded-lg shadow-sm text-gray-600\">\n        <Table aria-label=\"Stocks\" selectionMode=\"multiple\" selectionBehavior=\"replace\" sortDescriptor={sortDescriptor} onSortChange={setSortDescriptor} className=\"border-separate border-spacing-0\">\n          <TableHeader>\n            <StockColumn id=\"symbol\" allowsSorting>Symbol</StockColumn>\n            <StockColumn id=\"name\" isRowHeader allowsSorting defaultWidth=\"3fr\">Name</StockColumn>\n            <StockColumn id=\"marketCap\" allowsSorting>Market Cap</StockColumn>\n            <StockColumn id=\"sector\" allowsSorting>Sector</StockColumn>\n            <StockColumn id=\"industry\" allowsSorting defaultWidth=\"2fr\">Industry</StockColumn>\n          </TableHeader>\n          <TableBody items={sortedItems}>\n            {item => (\n              <StockRow>\n                <StockCell><span className=\"font-mono bg-slate-100 border border-slate-200 rounded-sm px-1 group-selected:bg-slate-700 group-selected:border-slate-800\">${item.symbol}</span></StockCell>\n                <StockCell className=\"font-semibold\">{item.name}</StockCell>\n                <StockCell>{item.marketCap}</StockCell>\n                <StockCell>{item.sector}</StockCell>\n                <StockCell>{item.industry}</StockCell>\n              </StockRow>\n            )}\n          </TableBody>\n        </Table>\n      </ResizableTableContainer>\n    </div>\n  );\n}\n\nfunction StockColumn(props: ColumnProps & {children: React.ReactNode}) {\n  return (\n    <Column {...props} className=\"sticky top-0 p-0 border-0 border-b border-solid border-slate-300 bg-slate-200 font-bold text-left cursor-default first:rounded-tl-lg last:rounded-tr-lg whitespace-nowrap outline-hidden\">\n      {({allowsSorting, sortDirection}) => (\n        <div className=\"flex items-center pl-4 py-1\">\n          <Group role=\"presentation\" tabIndex={-1} className=\"flex flex-1 items-center overflow-hidden outline-hidden rounded-sm focus-visible:ring-2 ring-slate-600\">\n```\n\n----------------------------------------\n\nTITLE: Declaring a Region-Labeled Group Using the 'region' Role in React Aria (TSX)\nDESCRIPTION: This snippet showcases the use of the ARIA 'region' role to make a Group programmatically accessible as a landmark region. It demonstrates setting role to 'region' and assigning an accessible label for navigation. The component must receive an aria-label or aria-labelledby prop for clarity to assistive technology. Produces a React Group component with ARIA regional semantics.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Group role=\\\"region\\\" aria-label=\\\"Object details\\\">\\n  {/* ... */}\\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Applying Classes to DateSegment - React Aria - JSX\nDESCRIPTION: This JSX example shows how to pass a function to the className prop of a DateSegment, enabling conditional class assignment based on the isPlaceholder state. This is useful for styling components using utility CSS libraries such as Tailwind, providing dynamic styling at render-time. Input is a state object containing isPlaceholder, while output is a DateSegment with contextually applied background color classes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<DateSegment className={({isPlaceholder}) => isPlaceholder ? 'bg-gray-300' : 'bg-gray-600'} />\n```\n```\n\n----------------------------------------\n\nTITLE: Using the ProgressBar Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'ProgressBar' component. It renders a linear progress bar to visually represent the progress of an operation over time. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_46\n\nLANGUAGE: jsx\nCODE:\n```\n<ProgressBar />\n```\n\n----------------------------------------\n\nTITLE: Testing Utilities for React Spectrum ComboBox\nDESCRIPTION: Example showing how to use test utilities for ComboBox component with keyboard interaction testing\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\n// Combobox.test.ts\nimport {render, within} from '@testing-library/react';\nimport {theme} from '@react-spectrum/theme-default';\nimport {User} from '@react-spectrum/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n\nit('ComboBox can select an option via keyboard', async function () {\n  let {getByTestId} = render(\n    <Provider theme={defaultTheme}>\n      <ComboBox data-testid=\"test-combobox\">\n        ...\n      </ComboBox>\n    </Provider>\n  );\n  let comboboxTester = testUtilUser.createTester('ComboBox', {root: getByTestId('test-combobox'), interactionType: 'keyboard'});\n\n  await comboboxTester.open();\n  expect(comboboxTester.listbox).toBeInTheDocument();\n\n  let options = comboboxTester.options();\n  await comboboxTester.selectOption({option: options[0]});\n  expect(comboboxTester.combobox.value).toBe('One');\n  expect(comboboxTester.listbox).not.toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Keyboard Component in React\nDESCRIPTION: This snippet shows how to import the Keyboard component from the @react-spectrum/text package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/text/docs/Keyboard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Keyboard} from '@react-spectrum/text';\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection in React Spectrum Table\nDESCRIPTION: This example shows how to enable single selection mode in a React Spectrum table. It uses the selectionMode prop set to 'single' and demonstrates the use of defaultSelectedKeys to pre-select a row.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleTable selectionMode=\"single\" defaultSelectedKeys={[2]} />\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Test Utils Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-spectrum/test-utils package in a Markdown file. It includes a link to the main React Spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/story-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/test-utils\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Rows in React Spectrum ListView\nDESCRIPTION: This example shows how to disable specific rows in a ListView using the disabledKeys prop. It also demonstrates the use of the disabledBehavior prop to control interaction with disabled rows.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonList disabledKeys={[3]} aria-label=\"ListView with disabled rows\" />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\"size-300\">\n  <PokemonList\n    disabledKeys={[3]}\n    defaultSelectedKeys={[]}\n    disabledBehavior=\"all\"\n    aria-label=\"ListView with all interaction disabled for disabled rows\"\n    width=\"size-2400\"\n    onAction={key => alert(`Opening item ${key}...`)}\n  />\n  <PokemonList\n    disabledKeys={[3]}\n    defaultSelectedKeys={[]}\n    disabledBehavior=\"selection\"\n    aria-label=\"ListView with selection disabled for disabled rows\"\n    width=\"size-2400\"\n    onAction={key => alert(`Opening item ${key}...`)}\n  />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Functions with Dimension Values in React Spectrum\nDESCRIPTION: Demonstrates using a Spectrum dimension value within a CSS calc() function to set a View component's width.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/styling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<View width=\"calc(100% - size-2000)\" height=\"single-line-height\" backgroundColor=\"green-500\" />\n```\n\n----------------------------------------\n\nTITLE: Importing ColorSlider Components from React Aria Components\nDESCRIPTION: Imports the necessary ColorSlider components from the React Aria Components library, showing the basic module import pattern.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSlider, ColorThumb, Label, SliderOutput, SliderTrack} from 'react-aria-components';\n```\n\n----------------------------------------\n\nTITLE: ColorSwatch Basic Import and Usage\nDESCRIPTION: Basic structure showing how to import and use the ColorSwatch component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorSwatch} from 'react-aria-components';\n\n<ColorSwatch />\n```\n\n----------------------------------------\n\nTITLE: Using Style Props in React Spectrum Components\nDESCRIPTION: Shows how to apply custom width to a TextField and margin to an ActionButton using style props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/styling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField label=\"Name\" labelPosition=\"side\" width=\"size-2000\" />\n<ActionButton marginStart=\"size-150\">Submit</ActionButton>\n```\n\n----------------------------------------\n\nTITLE: Targeting React Aria TagGroup for Styling using CSS\nDESCRIPTION: Shows the default CSS selector (`.react-aria-TagGroup`) used to target the main `TagGroup` component provided by React Aria. This selector can be used in CSS files to apply custom styles to the tag group container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-TagGroup {\n  /* ... */\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling File Paste in React Spectrum\nDESCRIPTION: This example shows how to handle pasting of image files (JPEG and PNG) using the useClipboard hook. It creates an object URL for the pasted image and renders it in the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useClipboard.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {FileDropItem} from '@react-aria/dnd';\n\nfunction Pasteable() {\n  let [file, setFile] = React.useState(null);\n  let {clipboardProps} = useClipboard({\n    async onPaste(items) {\n      let item = items.find(item => item.kind === 'file' && (item.type === 'image/jpeg' || item.type === 'image/png')) as FileDropItem;\n      if (item) {\n        setFile(URL.createObjectURL(await item.getFile()));\n      }\n    }\n  });\n\n  return (\n    <div role=\"textbox\" tabIndex={0} {...clipboardProps} style={{width: 150, height: 100}}>\n      {file ? <img src={file} style={{width: '100%', height: '100%', objectFit: 'contain'}} /> : 'Paste image here'}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Component Types in TypeScript\nDESCRIPTION: Defines the type system for the Provider component including toast placement options, color schemes, scales, and component properties. Includes interface definitions for context properties and provider-specific props that handle theming, color schemes, scaling, and localization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Provider.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToastPlacement = 'top' | 'top left' | 'top center' | 'top right'\n  | 'bottom' | 'bottom left' | 'bottom center' | 'bottom right';\n\nexport type ColorScheme = 'light' | 'dark';\nexport type Scale = 'medium' | 'large';\n\ninterface ContextProps {\n  toastPlacement?: ToastPlacement,\n  isQuiet?: boolean,\n  isEmphasized?: boolean,\n  isDisabled?: boolean,\n  isRequired?: boolean,\n  isReadOnly?: boolean\n}\n\nexport interface ProviderProps extends ContextProps, DOMProps {\n  children: ReactNode,\n  theme?: Theme,\n  colorScheme?: ColorScheme, // by default, chooses based on OS setting\n  defaultColorScheme?: ColorScheme, // if no OS setting, which to choose\n  scale?: Scale, // by default, chooses based on touch/mouse\n  locale?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Plugin in tailwind.config.js (TypeScript, v3)\nDESCRIPTION: This configuration snippet shows how to add the tailwindcss-react-aria-components plugin to TailwindCSS version 3 using the tailwind.config.js file. It uses the require syntax for importing plugins and notes the need to use version 1.x of the plugin for compatibility. The code assumes a Node.js environment with tailwindcss and tailwindcss-react-aria-components as dependencies. Inputs are plugin registration statements; outputs are an extended Tailwind configuration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/stock-table.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\\n  // ...\\n  plugins: [\\n    require('tailwindcss-react-aria-components')\\n  ]\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing useDialog and Related Components in React\nDESCRIPTION: Import statements for useDialog and related components from React Aria and documentation utilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dialog/docs/useDialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/dialog';\nimport overlaysDocs from 'docs:@react-aria/overlays';\nimport focusDocs from 'docs:@react-aria/focus';\nimport {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport {Keyboard} from '@react-spectrum/text';\nimport packageData from '@react-aria/dialog/package.json';\nimport Anatomy from './anatomy.svg';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport tailwindPreview from 'url:./tailwind.png';\n```\n\n----------------------------------------\n\nTITLE: Disabling ToggleButton via isDisabled Prop (TypeScript)\nDESCRIPTION: This TypeScript/TSX code demonstrates rendering a disabled ToggleButton by passing the isDisabled prop. It shows how to prevent user interaction with the button, useful for UI states where toggling is not permitted. Input is not accepted when disabled, and no events are fired.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButton isDisabled>Pin</ToggleButton>\\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout Component in JavaScript/JSX\nDESCRIPTION: This snippet imports the `BlogPostLayout`, `Hero`, and `Image` components from the `@react-spectrum/docs` library and exports `BlogPostLayout` as the default. This setup is typical for defining the main layout component for a documentation or blog page within a React-based framework, often used with MDX. The code includes a standard copyright and Apache 2.0 license header.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2025-04-11.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2025 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero, Image} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Defining a Flex Column Layout for Popover Content (CSS)\nDESCRIPTION: A hidden CSS snippet defining a simple utility class `.flex-col` to style elements using `display: flex`, `flex-direction: column`, and a `gap` of 8px. This is used to layout the switches in the initial example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.flex-col {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SearchWithin Component in React\nDESCRIPTION: This snippet shows how to import the SearchWithin component and its dependencies from React Spectrum libraries.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchwithin/docs/SearchWithin.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {SearchWithin} from '@react-spectrum/searchwithin';\nimport {SearchField} from '@react-spectrum/searchfield';\nimport {Picker, Item} from '@react-spectrum/picker';\n```\n\n----------------------------------------\n\nTITLE: Configuring a Quiet ActionButton - React Spectrum - TypeScript (TSX)\nDESCRIPTION: Demonstrates the use of the isQuiet prop on ActionButton for a more subtle visual appearance. This variant is typically used when a less prominent button is desired. Input: None. Output: Quiet styled ActionButton labeled 'Action!'. Dependencies: ActionButton.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ActionButton.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionButton isQuiet>Action!</ActionButton>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Label Component in a Slider\nDESCRIPTION: Shows how to use a custom label component within a Slider in place of the built-in React Aria Components Label, demonstrating component composition.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider>\n  <MyCustomLabel>Opacity</MyCustomLabel>\n  <SliderTrack>\n    <SliderThumb />\n  </SliderTrack>\n</Slider>\n```\n\n----------------------------------------\n\nTITLE: ListBox with Dynamic Sections in React Spectrum\nDESCRIPTION: Demonstrates using the Section component with dynamic items populated from a hierarchical data structure. Shows how to handle selection with nested data arrays.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {name: 'Australian', children: [\n      {id: 2, name: 'Koala'},\n      {id: 3, name: 'Kangaroo'},\n      {id: 4, name: 'Platypus'}\n    ]},\n    {name: 'American', children: [\n      {id: 6, name: 'Bald Eagle'},\n      {id: 7, name: 'Bison'},\n      {id: 8, name: 'Skunk'}\n    ]}\n  ];\n  let [selected, setSelected] = React.useState<Selection>(new Set());\n\n  return (\n    <ListBox\n      aria-label=\"Pick an animal\"\n      items={options}\n      selectedKeys={selected}\n      selectionMode=\"single\"\n      onSelectionChange={setSelected}\n      width=\"size-2400\">\n      {item => (\n        <Section key={item.name} items={item.children} title={item.name}>\n          {item => <Item>{item.name}</Item>}\n        </Section>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout as Default Module Export - React/JavaScript\nDESCRIPTION: This line sets BlogPostLayout as the default export of the file, making it the main React component rendered for this documentation page. This assumes BlogPostLayout is a valid React component imported from '@react-spectrum/docs'. No additional dependencies are required beyond what is imported and no parameters are used.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2025-03-05.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Disable All Toggle Buttons in ToggleButtonGroup (JSX)\nDESCRIPTION: Configures a ToggleButtonGroup to have all buttons disabled by using the isDisabled prop. Useful for UI cases where the entire group needs to be in a non-interactive state. The underlying react-aria-components handles state and ARIA attributes. Input is JSX; output is a disabled button group.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButtonGroup isDisabled>\n  <ToggleButton id=\"grid\">Grid view</ToggleButton>\n  <ToggleButton id=\"list\">List view</ToggleButton>\n  <ToggleButton id=\"gallery\">Gallery view</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Documentation Component Imports\nDESCRIPTION: Imports various documentation-related components and utilities, including toggle documentation and package data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/toggle/docs/useToggleState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/toggle';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/toggle/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing Flex Component for Layout in React Spectrum\nDESCRIPTION: Example of importing the Flex component from @react-spectrum/layout package, which is commonly used for creating flexible layouts when demonstrating icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/workflow-icons.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Rendering useColorSliderState Documentation Components\nDESCRIPTION: This JSX snippet renders various documentation components to display information about the useColorSliderState hook, including its description, API, and interface.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorSliderState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n# useColorSliderState\n\n<PageDescription>{docs.exports.useColorSliderState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useColorSliderState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useColorSliderState} links={docs.links} />\n\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useColorSliderState.return.id]} />\n\n## Example\n\nSee the docs for [useColorSlider](/react-aria/useColorSlider.html) in react-aria for an example of `useColorSliderState`.\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to NumberField in React Spectrum\nDESCRIPTION: This snippet shows how to add a ContextualHelp component to a NumberField, providing additional information about the field's purpose.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<NumberField\n  label=\"Exposure\"\n  formatOptions={{\n    signDisplay: 'exceptZero',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2\n  }}\n  defaultValue={0}\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What is exposure?</Heading>\n      <Content>Exposure adjusts how bright the image is.</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs with Individual Disabled Items\nDESCRIPTION: This example shows how to disable individual tabs using the isDisabled prop on specific Tab components. Disabled tabs are not focusable, selectable, or keyboard navigable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs>\n  <TabList aria-label=\"Input settings\">\n    <Tab id=\"mouse\">Mouse Settings</Tab>\n    <Tab id=\"keyboard\">Keyboard Settings</Tab>\n    <Tab id=\"gamepad\" isDisabled>Gamepad Settings</Tab>\n  </TabList>\n  <TabPanel id=\"mouse\">Mouse Settings</TabPanel>\n  <TabPanel id=\"keyboard\">Keyboard Settings</TabPanel>\n  <TabPanel id=\"gamepad\">Gamepad Settings</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: LabeledValue with Date Formatting\nDESCRIPTION: Example showing date formatting with internationalized date objects.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/labeledvalue/docs/LabeledValue.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today, getLocalTimeZone} from '@internationalized/date';\n\n<LabeledValue label=\"Date modified\" value={today(getLocalTimeZone()).subtract({weeks: 1})} />\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with HTML Form Integration\nDESCRIPTION: Demonstrates how to use the name prop on RadioGroup for integration with HTML forms.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite pet\" name=\"pet\">\n  <Radio value=\"dogs\">Dogs</Radio>\n  <Radio value=\"cats\">Cats</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Drag Preview Example Component\nDESCRIPTION: A simple example that renders the CustomDragPreviewExample component defined in the previous code snippet.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n<CustomDragPreviewExample />\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Form Validation\nDESCRIPTION: Shows how to use the isRequired prop and integrate RadioGroup with Form component for validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Form, ButtonGroup, Button} from '@adobe/react-spectrum';\n\n<Form validationBehavior=\"native\">\n  <RadioGroup label=\"Favorite pet\" name=\"pet\" isRequired>\n    <Radio value=\"dogs\">Dog</Radio>\n    <Radio value=\"cats\">Cat</Radio>\n    <Radio value=\"dragon\">Dragon</Radio>\n  </RadioGroup>\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Listing Released Package Versions in Markdown\nDESCRIPTION: Provides a code block listing all the packages and their versions included in this release. This helps developers know which specific versions of each package are part of this update.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-07-23.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n- @adobe/react-spectrum@3.1.0\n- @react-aria/actiongroup@3.1.0\n- @react-aria/aria-modal-polyfill@3.1.0\n- @react-aria/breadcrumbs@3.1.0\n- @react-aria/button@3.1.0\n- @react-aria/checkbox@3.1.0\n- @react-aria/dialog@3.1.0\n- @react-aria/focus@3.1.0\n- @react-aria/i18n@3.1.0\n- @react-aria/interactions@3.1.0\n- @react-aria/label@3.1.0\n- @react-aria/link@3.1.0\n- @react-aria/listbox@3.1.0\n- @react-aria/menu@3.1.0\n- @react-aria/meter@3.1.0\n- @react-aria/overlays@3.1.0\n- @react-aria/progress@3.1.0\n- @react-aria/radio@3.1.0\n- @react-aria/searchfield@3.1.0\n- @react-aria/select@3.1.0\n- @react-aria/selection@3.1.0\n- @react-aria/separator@3.1.0\n- @react-aria/switch@3.1.0\n- @react-aria/table@3.0.0-alpha.5\n- @react-aria/textfield@3.1.0\n- @react-aria/toggle@3.1.0\n- @react-aria/utils@3.1.0\n- @react-aria/virtualizer@3.1.0\n- @react-aria/visually-hidden@3.1.0\n- @react-spectrum/actiongroup@3.1.0\n- @react-spectrum/breadcrumbs@3.1.0\n- @react-spectrum/button@3.1.0\n- @react-spectrum/buttongroup@3.1.0\n- @react-spectrum/checkbox@3.1.0\n- @react-spectrum/dialog@3.1.0\n- @react-spectrum/divider@3.1.0\n- @react-spectrum/form@3.1.0\n- @react-spectrum/icon@3.1.0\n- @react-spectrum/illustratedmessage@3.1.0\n- @react-spectrum/image@3.1.0\n- @react-spectrum/label@3.1.0\n- @react-spectrum/layout@3.1.0\n- @react-spectrum/link@3.1.0\n- @react-spectrum/listbox@3.1.0\n- @react-spectrum/menu@3.1.0\n- @react-spectrum/meter@3.1.0\n- @react-spectrum/overlays@3.1.0\n- @react-spectrum/picker@3.1.0\n- @react-spectrum/progress@3.1.0\n- @react-spectrum/provider@3.1.0\n- @react-spectrum/radio@3.1.0\n- @react-spectrum/searchfield@3.1.0\n- @react-spectrum/statuslight@3.1.0\n- @react-spectrum/switch@3.1.0\n- @react-spectrum/table@3.0.0-alpha.5\n- @react-spectrum/text@3.1.0\n- @react-spectrum/textfield@3.1.0\n- @react-spectrum/theme-dark@3.1.0\n- @react-spectrum/theme-default@3.1.0\n- @react-spectrum/utils@3.1.0\n- @react-spectrum/view@3.1.0\n- @react-spectrum/well@3.1.0\n- @react-stately/collections@3.1.0\n- @react-stately/data@3.1.0\n- @react-stately/layout@3.1.0\n- @react-stately/list@3.1.0\n- @react-stately/menu@3.1.0\n- @react-stately/overlays@3.1.0\n- @react-stately/radio@3.1.0\n- @react-stately/searchfield@3.1.0\n- @react-stately/select@3.1.0\n- @react-stately/selection@3.1.0\n- @react-stately/table@3.0.0-alpha.5\n- @react-stately/toggle@3.1.0\n- @react-stately/tree@3.1.0\n- @react-stately/utils@3.1.0\n- @react-stately/virtualizer@3.1.0\n- @react-types/actiongroup@3.1.0\n- @react-types/breadcrumbs@3.1.0\n- @react-types/button@3.1.0\n- @react-types/buttongroup@3.1.0\n- @react-types/checkbox@3.1.0\n- @react-types/dialog@3.1.0\n- @react-types/divider@3.1.0\n- @react-types/form@3.1.0\n- @react-types/illustratedmessage@3.1.0\n- @react-types/image@3.1.0\n- @react-types/label@3.1.0\n- @react-types/layout@3.1.0\n- @react-types/link@3.1.0\n- @react-types/listbox@3.1.0\n- @react-types/menu@3.1.0\n- @react-types/meter@3.1.0\n- @react-types/overlays@3.1.0\n- @react-types/progress@3.1.0\n- @react-types/provider@3.1.0\n- @react-types/radio@3.1.0\n- @react-types/searchfield@3.1.0\n- @react-types/select@3.1.0\n- @react-types/shared@3.1.0\n- @react-types/statuslight@3.1.0\n- @react-types/switch@3.1.0\n- @react-types/table@3.0.0-rc.4\n- @react-types/text@3.1.0\n- @react-types/textfield@3.1.0\n- @react-types/view@3.1.0\n- @react-types/well@3.1.0\n- @spectrum-icons/color@3.1.0\n- @spectrum-icons/illustrations@3.1.0\n- @spectrum-icons/ui@3.1.0\n- @spectrum-icons/workflow@3.1.0\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text and Validation to DateRangePicker\nDESCRIPTION: Example demonstrating how to add description and error messages to DateRangePicker components. The first example shows a valid state with description, and the second shows an invalid state with an error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\" wrap>\n  <DateRangePicker label=\"Date range\" defaultValue={{start: today(getLocalTimeZone()), end: today(getLocalTimeZone()).add({weeks: 1})}} validationState=\"valid\" description=\"Select your trip dates.\" />\n  <DateRangePicker label=\"Date range\" validationState=\"invalid\" errorMessage=\"Empty input is not allowed.\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for useColorSliderState Documentation\nDESCRIPTION: This JSX snippet defines metadata for the documentation page, including category and keywords.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorSliderState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n---\ncategory: Color\nkeywords: [color slider, color picker, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling an Individual Radio within a RadioGroup in React Spectrum (TSX)\nDESCRIPTION: Shows how to disable a specific `Radio` option within a `RadioGroup` by applying the `isDisabled` prop directly to the individual `Radio` component (e.g., Baseball). Other radio buttons in the group remain interactive.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/docs/useRadioGroup.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite sport\">\n  <Radio value=\"soccer\">Soccer</Radio>\n  <Radio value=\"baseball\" isDisabled>Baseball</Radio>\n  <Radio value=\"basketball\">Basketball</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Targeting Default React Aria Component CSS Class\nDESCRIPTION: This CSS snippet demonstrates how to style a React Aria `DropZone` component using its default generated class name (`react-aria-DropZone`). React Aria components include a default `className` following the `react-aria-ComponentName` convention, allowing for base styling via CSS selectors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DropZone {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Localized Strings with LocalizedStringProvider in Next.js App Router (TypeScript/TSX)\nDESCRIPTION: Illustrates injecting locale-specific strings into the HTML for clients in a Next.js App Router project. Utilizes the 'LocalizedStringProvider' from '@adobe/react-spectrum/i18n', which should be used at the root layout component and configured with the current language from route params. This provides the app with access to only the necessary translation strings during SSR.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/[lang]/layout.tsx\n/*- begin highlight -*/\nimport {LocalizedStringProvider} from '@adobe/react-spectrum/i18n';\n/*- end highlight -*/\n\nexport default function RootLayout(\n  {children, params: {lang}}:\n  {children: React.ReactNode, params: {lang: string}}\n) {\n  return (\n    <html lang={lang}>\n      <body>\n        {/*- begin highlight -*/}\n        <LocalizedStringProvider locale={lang} />\n        {/*- end highlight -*/}\n        {children}\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Events with Text Data in DropZone\nDESCRIPTION: Example of handling drop events for text data, processing and displaying dropped text content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextDropItem} from '@react-aria/dnd';\n\nfunction Example() {\n  let [dropped, setDropped] = React.useState(null);\n\n  return (\n    <>\n      <Draggable />\n      <DropZone\n        onDrop={async(e) => {\n          let items = await Promise.all(\n            e.items\n              .filter(item => item.kind === 'text' && item.types.has('text/plain'))\n              .map((item: TextDropItem) => item.getText('text/plain'))\n          );\n          setDropped(items.join('\\n'));\n        }}>\n        <Text slot=\"label\">\n          {dropped || 'Drop here'}\n        </Text>\n      </ DropZone>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout and Importing Dependencies - React Spectrum - JavaScript\nDESCRIPTION: This snippet imports BlogPostLayout and Hero components from the @react-spectrum/docs package and exports the BlogPostLayout as the default export. Dependencies required include the @react-spectrum/docs package. The BlogPostLayout is intended to wrap blog post content, providing standardized styling and structure. No function parameters are involved; the export is used to define the layout of the page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-10-01.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Rendering the Folder Drop Drag-and-Drop Example in React Spectrum (TypeScript)\nDESCRIPTION: This snippet renders the DragIntoListFolder component, which demonstrates drag-and-drop operations into folder-type ListView items. It must be used in a context where DragIntoListFolder and its child folder-enabled ListView components are defined. It requires no arguments and outputs a user interface with two synchronized lists allowing for hierarchical drag-and-drop interactions between and within folder structures.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<DragIntoListFolder />\n```\n\n----------------------------------------\n\nTITLE: TextArea with Label Alignment and Position in React Spectrum\nDESCRIPTION: Shows how to adjust the label alignment and position for the TextArea component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<TextArea label=\"Search\" labelPosition=\"side\" labelAlign=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: Defining the Component Structure for Autocomplete in TSX\nDESCRIPTION: Illustrates the basic structure (anatomy) of the `Autocomplete` component. It shows that `Autocomplete` acts as a wrapper around an input component (like `SearchField` or `TextField`) and a collection component (like `Menu` or `ListBox`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Autocomplete, SearchField, Menu} from 'react-aria-components';\n\n<Autocomplete>\n  <SearchField /> or <TextField />\n  <Menu /> or <ListBox />\n</Autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Implementing Emphasized Tabs in React Spectrum\nDESCRIPTION: An example showing how to create emphasized tabs using the React Spectrum tabs component. The example demonstrates creating tabs with a list of people and corresponding empty chat history panels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs aria-label=\"Chat log emphasized example\" isEmphasized>\n  <TabList>\n    <Item key=\"item1\">\n      John Doe\n    </Item>\n    <Item key=\"item2\">\n      Jane Doe\n    </Item>\n    <Item key=\"item3\">\n      Joe Bloggs\n    </Item>\n  </TabList>\n  <TabPanels>\n    <Item key=\"item1\">\n      There is no prior chat history with John Doe.\n    </Item>\n    <Item key=\"item2\">\n      There is no prior chat history with Jane Doe.\n    </Item>\n    <Item key=\"item3\">\n      There is no prior chat history with Joe Bloggs.\n    </Item>\n  </TabPanels>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prefix for Tailwind Plugin (v4)\nDESCRIPTION: Example showing how to configure a prefix for all React Aria Components modifiers in the Tailwind plugin (v4).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n@plugin \"tailwindcss-react-aria-components\" { prefix: rac };\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with State Functions in React Aria Components\nDESCRIPTION: Demonstrates using state functions with the className prop to dynamically apply styles based on component states, useful for utility CSS libraries.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Item className={({isSelected}) => isSelected ? 'bg-blue-400' : 'bg-gray-100'}>\n  Item\n</Item>\n```\n\n----------------------------------------\n\nTITLE: Converting ZonedDateTime Between Time Zones - React Spectrum - TypeScript\nDESCRIPTION: Illustrates converting a ZonedDateTime instance to another time zone or the user's local time zone using toTimeZone and toLocalTimeZone from @internationalized/date. Must import the functions and use a parsed ZonedDateTime. Key parameters: ZonedDateTime, target time zone string. Outputs the ZonedDateTime in new time zone.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toTimeZone, toLocalTimeZone} from '@internationalized/date';\n\nlet date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\ntoTimeZone(date, 'America/Chicago'); // 2022-02-03T11:45[America/Chicago]\ntoLocalTimeZone(date); // e.g. 2022-02-03T12:45[America/New_York]\n```\n\n----------------------------------------\n\nTITLE: Linking to Usage Example (Markdown)\nDESCRIPTION: Markdown text providing a link to the documentation page for `useTooltipTrigger` in `react-aria`, which contains an example demonstrating the usage of `useTooltipTriggerState`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tooltip/docs/useTooltipTriggerState.mdx#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## Example\n\nSee the docs for [useTooltipTrigger](../react-aria/useTooltipTrigger.html) in react-aria for an example of `useTooltipTriggerState`.\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Calendar Types and Utilities from @internationalized/date (TypeScript)\nDESCRIPTION: This import snippet is required for creating or manipulating custom calendar logic—specifically, types and functions needed for custom Calendar implementations. 'AnyCalendarDate' is a type for general calendar dates, while 'CalendarDate', 'startOfWeek', and 'toCalendar' are utilities for date manipulation and conversions. Required for advanced or custom calendar system usage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/Calendar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AnyCalendarDate} from '@internationalized/date';\nimport {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';\n```\n\n----------------------------------------\n\nTITLE: Importing React Aria Disclosure Component\nDESCRIPTION: Basic imports for using the Disclosure component from React Aria Components library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Disclosure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:react-aria-components';\nimport statelyDocs from 'docs:@react-stately/disclosure';\nimport {PropTable, HeaderInfo, TypeLink, PageDescription, StateTable, ContextTable} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport packageData from 'react-aria-components/package.json';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {Keyboard} from '@react-spectrum/text';\nimport Anatomy from './DisclosureAnatomy.svg';\n```\n\n----------------------------------------\n\nTITLE: Grouping Table Rows with <TableRowGroup> - TypeScript/React\nDESCRIPTION: Implements a TableRowGroup component using the useTableRowGroup hook from React Aria. Wraps children in a specified HTML table section element (<thead> or <tbody>), applying appropriate ARIA props and styling. Requires @react-aria/table and React, expects a 'type' prop specifying the HTML tag, and relays ARIA row group behavior for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTableRowGroup} from '@react-aria/table';\\n\\nfunction TableRowGroup({type: Element, children}) {\\n  let {rowGroupProps} = useTableRowGroup();\\n  return (\\n    <Element\\n      {...rowGroupProps}\\n      style={Element === 'thead' ? {borderBottom: '2px solid var(--spectrum-global-color-gray-800)'} : null}>\\n      {children}\\n    </Element>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Tailwind Using Function-based className\nDESCRIPTION: Example of using a function for the className prop to apply conditional Tailwind utility classes based on component state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<DateSegment className={({isPlaceholder}) => isPlaceholder ? 'bg-gray-300' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Integrating React Spectrum Forms with React Hook Form for Validation - TypeScript/TSX\nDESCRIPTION: This example shows how to use React Hook Form's Controller component to integrate React Spectrum's TextField into complex form workflows. It demonstrates wiring up controlled value, onChange, onBlur, requirement enforcement, and form submission with validation state and error message presentation. Requires react-hook-form and @adobe/react-spectrum, expects user input for a 'name' field, and leverages Controller's render prop to pass field and error state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useForm, Controller} from 'react-hook-form'\nimport {Form, TextField, Button} from '@adobe/react-spectrum';\n\nfunction App() {\n  let {handleSubmit, control} = useForm({\n    defaultValues: {\n      name: '',\n    },\n  });\n  let onSubmit = (data) => {\n    // Call your API here...\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        control={control}\n        name=\"name\"\n        rules={{ required: 'Name is required.' }}\n        render={({\n          field: { name, value, onChange, onBlur, ref },\n          fieldState: { invalid, error },\n        }) => (\n          <TextField\n            label=\"Name\"\n            name={name}\n            value={value}\n            onChange={onChange}\n            onBlur={onBlur}\n            ref={ref}\n            isRequired\n            validationState={invalid ? 'invalid' : undefined}\n            errorMessage={error?.message}\n          />\n        )}\n      />\n      <Button type=\"submit\" variant=\"cta\">Submit</Button>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ListBoxItem Links\nDESCRIPTION: CSS for styling ListBoxItem elements that function as links, removing default text decoration and setting appropriate cursor style.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBoxItem[href] {\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: ProgressCircle with Custom Scale in React Spectrum\nDESCRIPTION: Demonstrates how to use custom minimum and maximum values to define a different scale for the ProgressCircle component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressCircle.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressCircle aria-label=\"Loading…\" minValue={50} maxValue={150} value={100} />\n```\n\n----------------------------------------\n\nTITLE: Context-based Calendar Implementation\nDESCRIPTION: Advanced implementation using RangeCalendarContext for composite components\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RangeCalendarContext, useSlottedContext} from 'react-aria-components';\n\nfunction CalendarPicker({children}) {\n  let [value, onChange] = React.useState(null);\n  let [focusedValue, onFocusChange] = React.useState(null);\n\n  return (\n    <RangeCalendarContext.Provider value={{value, onChange, focusedValue, onFocusChange}}>\n      <div className=\"calendar-picker\">\n        {children}\n      </div>\n    </RangeCalendarContext.Provider>\n  );\n}\n\ninterface PresetProps {\n  value: {start: CalendarDate, end: CalendarDate},\n  children: React.ReactNode\n}\n\nfunction Preset({value, children}: PresetProps) {\n  let context = useSlottedContext(RangeCalendarContext)!;\n  let onPress = () => {\n    context.onFocusChange(value.start);\n    context.onChange(value);\n  };\n\n  return (\n    <Button onPress={onPress}>{children}</Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the DatePicker Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'DatePicker' component. It renders a component that combines a DateField for input and a Calendar popover for selection. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker />\n```\n\n----------------------------------------\n\nTITLE: Suppressing Accessibility False Positives with Data Attributes in HTML\nDESCRIPTION: This code demonstrates the data attribute used to suppress known accessibility false positives in automated testing tools. The attribute 'data-a11y-ignore=\"aria-hidden-focus\"' is applied to the HiddenSelect element to indicate that the focus management is handled programmatically despite the element being hidden with aria-hidden.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\ndata-a11y-ignore=\"aria-hidden-focus\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Section Heading in MDX\nDESCRIPTION: Creates a level 2 heading titled 'API' using Markdown H2 syntax (double '##') within the MDX file. This structures the documentation by designating the start of the API reference section.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## API\n```\n\n----------------------------------------\n\nTITLE: Targeting .react-aria-TimeField Class in CSS - React Spectrum (CSS)\nDESCRIPTION: Illustrates how to style the TimeField component by targeting its default CSS class, .react-aria-TimeField. Any CSS can be added within this block for default or custom visual adjustments. All React Aria components support a className prop for customization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-TimeField {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Input Component for HueField Example (CSS)\nDESCRIPTION: This CSS snippet provides supplementary styling for the `HueField` component example shown previously. It targets the `Input` component (using its default `react-aria-Input` class) nested within the `HueField` and sets its width to accommodate roughly four characters, suitable for displaying numerical hue values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Input {\n  width: 4ch;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NumberField in React Spectrum\nDESCRIPTION: Shows how to import the NumberField component from the React Spectrum library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {NumberField} from '@react-spectrum/numberfield';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Using the React Spectrum Link Component in JSX\nDESCRIPTION: These examples illustrate various ways to use the React Spectrum `Link` component in JSX. It shows usage with simple text children (which get wrapped in a span with Spectrum classes), with a standard HTML `<a>` element, and with a custom component like `GatsbyLink`. The surrounding comments clarify that element children are cloned and enhanced with necessary classes and event handlers, while text children are simply wrapped.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Link.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// If only text, then we will wrap in a span with the spectrum class.\n// Otherwise, we will clone the element and add the class/event handlers.\n<Link>Hello</Link>\n<Link><a href=\"pdofj\">Hello</a></Link>\n<Link><GatsbyLink to=\"oidhjf\">dpofjd</GatsbyLink></Link>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Targeting for React Aria DateField\nDESCRIPTION: This CSS snippet shows the default CSS selector `.react-aria-DateField` which can be used to apply styles to the main `DateField` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateField {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Slider Number Input Component - CSS\nDESCRIPTION: This CSS snippet customizes the appearance of the input field used within the slider, specifically targeting elements with the class .react-aria-Input. The rules set the border radius to 6px and the width to 3ch. The style assumes that react-aria-components generates or applies the .react-aria-Input class to NumberField's input element. Apply this CSS to maintain consistent, compact input styles across related number fields in Spectrum-based sliders.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_24\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-Input {\\n  border-radius: 6px;\\n  width: 3ch;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Styling Error Messages in React Spectrum RangeCalendar using CSS\nDESCRIPTION: Defines CSS rules for the element with the `slot=\"errorMessage\"` attribute within the `RangeCalendar`. This styles the error message text, setting its font size and color to visually indicate an error state. Assumes a CSS variable `--invalid-color` is defined.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-RangeCalendar {\n  [slot=errorMessage] {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing BlogPostLayout, Hero, and Image Components - React/JavaScript\nDESCRIPTION: This snippet imports the BlogPostLayout, Hero, and Image components from the '@react-spectrum/docs' package for use within the blog page. These components structure the documentation page, providing layout, header, and inline image rendering capabilities, respectively. There are no parameters required, but '@react-spectrum/docs' must be installed as a dependency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2025-03-05.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero, Image} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Rendering Hero Component with Responsive Images (JSX)\nDESCRIPTION: Renders the `Hero` component imported from `@react-spectrum/docs`. It passes various image assets (standard PNG and WebP formats at 1x and 2x resolutions for both narrow and wide viewports) as props. This allows the `Hero` component to display the appropriate, optimized image based on screen size and browser capabilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Hero\n  narrow={heroNarrow}\n  narrow2x={heroNarrow2x}\n  narrowWebp={heroNarrowWebp}\n  narrow2xWebp={heroNarrow2xWebp}\n  wide={heroWide}\n  wide2x={heroWide2x}\n  wideWebp={heroWideWebp}\n  wide2xWebp={heroWide2xWebp}\n  alt=\"React Spectrum hero image\" />\n```\n\n----------------------------------------\n\nTITLE: Importing useLongPress Hook and Layout Component\nDESCRIPTION: Imports the useLongPress hook from @react-aria/interactions and a Layout component for documentation purposes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useLongPress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/interactions';\nimport typesDocs from 'docs:@react-types/shared/src/events.d.ts';\nimport {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/interactions/package.json';\n```\n\n----------------------------------------\n\nTITLE: Installing @react-spectrum/menu Package Reference\nDESCRIPTION: Shows the package name as it would appear in a dependency list or import statement. This is part of the React Spectrum component library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@react-spectrum/menu\n```\n\n----------------------------------------\n\nTITLE: Cycling Fields in ZonedDateTime - React Spectrum - TypeScript\nDESCRIPTION: Demonstrates incrementing or decrementing a single field (day, month, hour, minute) of a ZonedDateTime object with wrapping behavior using the cycle method. Requires @internationalized/date; parseZonedDateTime is used for parsing. Example shows cycling forward and backward, and explains the effects and wrap-around logic. Key parameters: field ('day', 'month', 'hour', 'minute'), amount (number to cycle by). Outputs adjusted ZonedDateTime objects.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = parseZonedDateTime('2022-12-31T23:59[America/Los_Angeles]');\ndate.cycle('day', 1); // 2022-12-01T23:59[America/Los_Angeles]\ndate.cycle('month', 1); // 2022-01-31T23:59[America/Los_Angeles]\ndate.cycle('hour', 1); // 2022-12-31T00:59[America/Los_Angeles]\ndate.cycle('minute', 1); // 2022-12-31T23:00[America/Los_Angeles]\n\nlet date = parseZonedDateTime('2022-01-01T00:00[America/Los_Angeles]');\ndate.cycle('day', -1); // 2022-01-31T00:00[America/Los_Angeles]\ndate.cycle('month', -1); // 2022-12-01T00:00[America/Los_Angeles]\ndate.cycle('hour', -1); // 2022-01-01T23:00[America/Los_Angeles]\ndate.cycle('minute', -1); // 2022-01-01T00:59[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Specifying Required State with ARIA in HTML\nDESCRIPTION: This snippet shows how to use the `aria-required` attribute set to `\"true\"` to indicate that a combobox or listbox input is mandatory. Assistive technologies use this attribute to inform users that the field must be filled out.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Autocomplete.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\naria-required=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout in React Spectrum Documentation - JavaScript/JSX\nDESCRIPTION: This snippet imports Flex and View layouts, a CSS stylesheet, and the Layout component from corresponding @react-spectrum packages, then exports Layout as the default export. Dependencies include the React Spectrum ecosystem, specifically the @react-spectrum/layout, @react-spectrum/view, @react-spectrum/docs, and a CSS file. It sets up the core documentation layout infrastructure, ensuring visual consistency across the docs site. The expected output is a page styled according to design system guidelines, and it is assumed these packages are installed in the project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/architecture.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {View} from '@react-spectrum/view';\nimport style from '@react-spectrum/docs/src/docs.css';\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable SearchField Wrapper Component in React (TSX)\nDESCRIPTION: Defines a reusable functional component `MySearchField` that wraps `react-aria-components`' `SearchField`, `Label`, `Input`, `Button`, `Text`, and `FieldError`. It accepts props like `label`, `description`, and `errorMessage` to simplify usage and maintain consistency across an application. An example instantiation `<MySearchField label=\\\"Search\\\" />` is included.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SearchFieldProps, ValidationResult} from 'react-aria-components';\nimport {Text, FieldError} from 'react-aria-components';\n\ninterface MySearchFieldProps extends SearchFieldProps {\n  label?: string,\n  description?: string,\n  errorMessage?: string | ((validation: ValidationResult) => string),\n  placeholder?: string\n}\n\nexport function MySearchField({label, description, errorMessage, placeholder, ...props}: MySearchFieldProps) {\n  return (\n    <SearchField {...props}>\n      {label && <Label>{label}</Label>}\n      <Input placeholder={placeholder} />\n      <Button>✕</Button>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n    </SearchField>\n  );\n}\n\n<MySearchField label=\"Search\" />\n```\n\n----------------------------------------\n\nTITLE: Making a Switch Component Read-Only in TSX\nDESCRIPTION: This example demonstrates the `isReadOnly` prop on the custom `Switch` component. Unlike `isDisabled`, a read-only switch remains focusable but its selection state cannot be changed by the user. The `isSelected` prop is also used here to set the immutable state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/switch/docs/useSwitch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch isSelected isReadOnly>Bluetooth</Switch>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component\nDESCRIPTION: This snippet imports the `Layout` component from `@react-spectrum/docs` and immediately exports it as the default export for this module. This is likely setting up the main layout structure for the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/toast/docs/useToastState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class Names to Menu Components\nDESCRIPTION: Example of overriding the default class name with a custom one for a Menu component, which allows for more specific styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu className=\"my-menu\">\n  {/* ... */}\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Importing useFilter Component Layout\nDESCRIPTION: Basic imports and layout setup for the useFilter documentation page\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/useFilter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Using ColorSwatch with a Basic Color Value - TypeScript/JSX\nDESCRIPTION: This example showcases a minimal usage of the ColorSwatch component by providing a hexadecimal color string to the color prop. No additional dependencies beyond the core React Spectrum component are required. The component displays a color swatch for the color provided; expected input is a valid color value such as '#f00'. Output is a rendered swatch display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatch color=\\\"#f00\\\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS for React Aria Components\nDESCRIPTION: Imports a global Tailwind CSS stylesheet to style the opacity slider component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/opacity-slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Controlled ColorArea Implementation\nDESCRIPTION: Example of implementing a controlled ColorArea component with value state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from 'react-aria-components';\n\nfunction Example() {\n  let [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'));\n  return (\n    <>\n      <MyColorArea\n        value={value}\n        onChange={setValue}\n        xChannel=\"saturation\"\n        yChannel=\"lightness\" />\n      <p>Value: {value.toString('hex')}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Dialog Examples in React Spectrum\nDESCRIPTION: Import statements for components used in Dialog examples, including Book icon, Footer, Checkbox, Flex, Form, Link, Image, and TextField components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Book from '@spectrum-icons/workflow/Book';\nimport {Footer} from '@react-spectrum/view';\nimport {Checkbox} from '@react-spectrum/checkbox';\nimport {Flex} from '@react-spectrum/layout';\nimport {Form} from '@react-spectrum/form';\nimport {Link} from '@react-spectrum/link';\nimport {Image} from '@react-spectrum/image';\nimport {TextField} from '@react-spectrum/textfield';\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum CSS for theme support\nDESCRIPTION: Import statement for including the necessary CSS to configure and support light and dark themes in a React Spectrum application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-parcel-example/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"@react-spectrum/s2/page.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogLayout with PostListing in React Spectrum (JavaScript)\nDESCRIPTION: This snippet imports BlogLayout and PostListing components from the '@react-spectrum/docs' package and exports BlogLayout as the default. It is intended for integrating a blog layout into the React Spectrum documentation. The main dependency is '@react-spectrum/docs'. There are no user-adjustable parameters. The result is a usable React component for blog pages within the documentation system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogLayout, PostListing} from '@react-spectrum/docs';\nexport default BlogLayout;\n```\n\n----------------------------------------\n\nTITLE: Importing Combobox Documentation Data in JavaScript\nDESCRIPTION: Imports documentation data specifically for `@react-stately/combobox` using a custom 'docs:' resolver. This data likely contains descriptions, API details, and links used by the documentation components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/combobox/docs/useComboBoxState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/combobox';\n```\n\n----------------------------------------\n\nTITLE: Importing Well Component in React Spectrum with JSX\nDESCRIPTION: This snippet demonstrates the standard ES6 import statement required to use the `Well` component from the `@react-spectrum/well` package in a React application. It's a prerequisite for using the component in examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/well/docs/Well.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Well} from '@react-spectrum/well';\n```\n\n----------------------------------------\n\nTITLE: Importing Form Component in React Aria\nDESCRIPTION: This snippet shows how to import the Form component and set up the default layout for the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:react-aria-components';\nimport {PropTable, HeaderInfo, TypeLink, PageDescription, StateTable, ContextTable} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport packageData from 'react-aria-components/package.json';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {Keyboard} from '@react-spectrum/text';\nimport {StarterKits} from '@react-spectrum/docs/src/StarterKits';\n```\n\n----------------------------------------\n\nTITLE: Cleaning Yarn Cache for Verdaccio Issues\nDESCRIPTION: Commands to clean the yarn cache and metadata when encountering issues with the Verdaccio private registry.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -r ~/.yarn/berry/metadata/npm\nyarn cache clean --all\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component in JavaScript\nDESCRIPTION: This snippet imports the Layout component from the @react-spectrum/docs package and exports it as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useRangeCalendarState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: TextArea with Help Text and Validation in React Spectrum\nDESCRIPTION: Illustrates how to add description and error messages to TextArea for user guidance and validation feedback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\" wrap>\n  <TextArea label=\"Comment\" defaultValue=\"Awesome!\" validationState=\"valid\" description=\"Enter a comment.\" />\n  <TextArea label=\"Comment\" validationState=\"invalid\" errorMessage=\"Empty input is not allowed.\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Styling Link Tree Items with CSS\nDESCRIPTION: Provides a CSS rule to change the cursor to a pointer for `TreeItem` elements that have an `href` prop, indicated by the `data-href` attribute. This enhances the visual cue for interactive links.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n```css hidden\n.react-aria-TreeItem[data-href] {\n  cursor: pointer;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Targeting React Aria ColorSlider with Default CSS Class\nDESCRIPTION: This CSS snippet shows the default CSS class selector provided by React Aria for styling the `ColorSlider` component. You can use `.react-aria-ColorSlider` to apply custom styles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorSlider {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind v3 Configuration\nDESCRIPTION: Alternative configuration setup for Tailwind CSS version 3, showing how to include the required plugins in the configuration file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/destructive-dialog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Collection API using ClassAPI Component in JSX\nDESCRIPTION: Uses the `ClassAPI` component from `@react-spectrum/docs` to display the detailed API documentation for the `Collection` interface. It receives `links` data and the specific `class` (or interface) object (`collectionsDocs.exports.Collection`) as props to generate the API view.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/Collection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ClassAPI links={collectionsDocs.links} class={collectionsDocs.exports.Collection} />\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata (YAML Frontmatter)\nDESCRIPTION: YAML frontmatter block used by documentation generators (like MDX) to define metadata for the page, such as its category and relevant keywords for search and organization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tooltip/docs/useTooltipTriggerState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncategory: Overlays\nkeywords: [tooltip trigger, tooltip, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Labels to ColorSwatchPicker\nDESCRIPTION: Example of providing explicit accessibility labels to a ColorSwatchPicker component using aria-label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSwatchPicker aria-label=\"Fill color\">\n  <MyColorSwatchPickerItem color=\"#A00\" />\n  <MyColorSwatchPickerItem color=\"#f80\" />\n  <MyColorSwatchPickerItem color=\"#080\" />\n</MyColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Importing BlogPostLayout and Hero Components in React\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package. It also exports the BlogPostLayout as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-12-22.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Header Rows with Accessibility - TypeScript/React\nDESCRIPTION: Defines the TableHeaderRow component using the useTableHeaderRow hook for managing ARIA roles and accessibility on <tr> elements representing header rows. Gets props for focus and ARIA attributes, relies on an external item (header row node) and state, and requires @react-aria/table, React, and useRef. Used exclusively within a <thead> to organize and provide context for table headers without interactive selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTableHeaderRow} from '@react-aria/table';\\n\\nfunction TableHeaderRow({item, state, children}) {\\n  let ref = useRef<HTMLTableRowElement | null>(null);\\n  let {rowProps} = useTableHeaderRow({node: item}, state, ref);\\n\\n  return (\\n    <tr {...rowProps} ref={ref}>\\n      {children}\\n    </tr>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Directory Drop Grid in CSS\nDESCRIPTION: This CSS snippet provides styles for the directory drop grid, including layout, spacing, and text overflow handling for the file names.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDrop.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  display: block;\n  width: auto;\n  height: auto;\n  min-height: 80px;\n}\n\n.grid ul {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 100px);\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  gap: 20px;\n}\n\n.grid li {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.grid li svg {\n  flex: 0 0 auto;\n}\n\n.grid li span {\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Released Package List in React Spectrum Project\nDESCRIPTION: A comprehensive list of all released packages in the React Spectrum project ecosystem with their version numbers, including React Aria, React Spectrum, React Stately, and related utilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-05-01.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n- @adobe/react-spectrum@3.35.0\n- @internationalized/date@3.5.3\n- @internationalized/message@3.1.3\n- @internationalized/number@3.5.2\n- @internationalized/string-compiler@3.2.3\n- @internationalized/string@3.2.2\n- @react-aria/accordion@3.0.0-alpha.28\n- @react-aria/actiongroup@3.7.4\n- @react-aria/aria-modal-polyfill@3.7.9\n- @react-aria/autocomplete@3.0.0-alpha.28\n- @react-aria/breadcrumbs@3.5.12\n- @react-aria/button@3.9.4\n- @react-aria/calendar@3.5.7\n- @react-aria/checkbox@3.14.2\n- @react-aria/color@3.0.0-beta.32\n- @react-aria/combobox@3.9.0\n- @react-aria/datepicker@3.10.0\n- @react-aria/dialog@3.5.13\n- @react-aria/dnd@3.6.0\n- @react-aria/example-theme@1.0.2\n- @react-aria/focus@3.17.0\n- @react-aria/form@3.0.4\n- @react-aria/grid@3.9.0\n- @react-aria/gridlist@3.8.0\n- @react-aria/i18n@3.11.0\n- @react-aria/interactions@3.21.2\n- @react-aria/label@3.7.7\n- @react-aria/landmark@3.0.0-beta.11\n- @react-aria/link@3.7.0\n- @react-aria/listbox@3.12.0\n- @react-aria/live-announcer@3.3.3\n- @react-aria/menu@3.14.0\n- @react-aria/meter@3.4.12\n- @react-aria/numberfield@3.11.2\n- @react-aria/overlays@3.22.0\n- @react-aria/progress@3.4.12\n- @react-aria/radio@3.10.3\n- @react-aria/searchfield@3.7.4\n- @react-aria/select@3.14.4\n- @react-aria/selection@3.18.0\n- @react-aria/separator@3.3.12\n- @react-aria/slider@3.7.7\n- @react-aria/spinbutton@3.6.4\n- @react-aria/ssr@3.9.3\n- @react-aria/steplist@3.0.0-alpha.4\n- @react-aria/switch@3.6.3\n- @react-aria/table@3.14.0\n- @react-aria/tabs@3.9.0\n- @react-aria/tag@3.4.0\n- @react-aria/test-utils@1.0.0-alpha.0\n- @react-aria/textfield@3.14.4\n- @react-aria/toast@3.0.0-beta.11\n- @react-aria/toggle@3.10.3\n- @react-aria/toolbar@3.0.0-beta.4\n- @react-aria/tooltip@3.7.3\n- @react-aria/tree@3.0.0-alpha.0\n- @react-aria/utils@3.24.0\n- @react-aria/virtualizer@3.10.0\n- @react-aria/visually-hidden@3.8.11\n- @react-spectrum/accordion@3.0.0-alpha.30\n- @react-spectrum/actionbar@3.4.4\n- @react-spectrum/actiongroup@3.10.4\n- @react-spectrum/autocomplete@3.0.0-alpha.31\n- @react-spectrum/avatar@3.0.11\n- @react-spectrum/badge@3.1.12\n- @react-spectrum/breadcrumbs@3.9.6\n- @react-spectrum/button@3.16.3\n- @react-spectrum/buttongroup@3.6.12\n- @react-spectrum/calendar@3.4.8\n- @react-spectrum/card@3.0.0-alpha.32\n- @react-spectrum/checkbox@3.9.5\n- @react-spectrum/color@3.0.0-beta.33\n- @react-spectrum/combobox@3.12.4\n- @react-spectrum/contextualhelp@3.6.10\n- @react-spectrum/datepicker@3.9.5\n- @react-spectrum/dialog@3.8.10\n- @react-spectrum/divider@3.5.12\n- @react-spectrum/dnd@3.3.9\n- @react-spectrum/dropzone@3.0.0\n- @react-spectrum/filetrigger@3.0.0\n- @react-spectrum/form@3.7.5\n- @react-spectrum/icon@3.7.12\n- @react-spectrum/illustratedmessage@3.5.0\n- @react-spectrum/image@3.5.0\n- @react-spectrum/inlinealert@3.2.4\n- @react-spectrum/label@3.16.5\n- @react-spectrum/labeledvalue@3.1.13\n- @react-spectrum/layout@3.6.4\n- @react-spectrum/link@3.6.6\n- @react-spectrum/list@3.7.9\n- @react-spectrum/listbox@3.12.8\n- @react-spectrum/menu@3.19.0\n- @react-spectrum/meter@3.5.0\n- @react-spectrum/numberfield@3.9.2\n- @react-spectrum/overlays@5.6.0\n- @react-spectrum/picker@3.14.4\n- @react-spectrum/progress@3.7.6\n- @react-spectrum/provider@3.9.6\n- @react-spectrum/radio@3.7.5\n- @react-spectrum/searchfield@3.8.5\n- @react-spectrum/slider@3.6.8\n- @react-spectrum/statuslight@3.5.12\n- @react-spectrum/steplist@3.0.0-alpha.4\n- @react-spectrum/switch@3.5.4\n- @react-spectrum/table@3.12.9\n- @react-spectrum/tabs@3.8.9\n- @react-spectrum/tag@3.2.5\n- @react-spectrum/test-utils@1.0.0-alpha.0\n- @react-spectrum/text@3.5.4\n- @react-spectrum/textfield@3.12.0\n- @react-spectrum/theme-dark@3.5.9\n- @react-spectrum/theme-default@3.5.9\n- @react-spectrum/theme-express@3.0.0-alpha.11\n- @react-spectrum/theme-light@3.4.9\n- @react-spectrum/toast@3.0.0-beta.11\n- @react-spectrum/tooltip@3.6.6\n- @react-spectrum/tree@3.0.0-alpha.0\n- @react-spectrum/utils@3.11.6\n- @react-spectrum/view@3.6.9\n- @react-spectrum/well@3.4.12\n- @react-stately/calendar@3.5.0\n- @react-stately/checkbox@3.6.4\n- @react-stately/collections@3.10.6\n- @react-stately/color@3.6.0\n- @react-stately/combobox@3.8.3\n- @react-stately/data@3.11.3\n- @react-stately/datepicker@3.9.3\n- @react-stately/dnd@3.3.0\n- @react-stately/flags@3.0.2\n- @react-stately/form@3.0.2\n- @react-stately/grid@3.8.6\n- @react-stately/layout@3.13.8\n- @react-stately/list@3.10.4\n- @react-stately/menu@3.7.0\n- @react-stately/numberfield@3.9.2\n- @react-stately/overlays@3.6.6\n- @react-stately/radio@3.10.3\n- @react-stately/searchfield@3.5.2\n- @react-stately/select@3.6.3\n- @react-stately/selection@3.15.0\n- @react-stately/slider@3.5.3\n- @react-stately/steplist@3.0.0-alpha.4\n- @react-stately/table@3.11.7\n- @react-stately/tabs@3.6.5\n- @react-stately/toast@3.0.0-beta.3\n- @react-stately/toggle@3.7.3\n- @react-stately/tooltip@3.4.8\n- @react-stately/tree@3.8.0\n- @react-stately/utils@3.10.0\n- @react-stately/virtualizer@3.7.0\n- @react-types/accordion@3.0.0-alpha.20\n- @react-types/actionbar@3.1.6\n- @react-types/actiongroup@3.4.8\n- @react-types/autocomplete@3.0.0-alpha.21\n- @react-types/avatar@3.0.6\n- @react-types/badge@3.1.8\n- @react-types/breadcrumbs@3.7.4\n- @react-types/button@3.9.3\n- @react-types/buttongroup@3.3.8\n- @react-types/calendar@3.4.5\n- @react-types/card@3.0.0-alpha.25\n- @react-types/checkbox@3.8.0\n- @react-types/color@3.0.0-beta.24\n- @react-types/combobox@3.11.0\n- @react-types/contextualhelp@3.2.9\n- @react-types/datepicker@3.7.3\n- @react-types/dialog@3.5.9\n- @react-types/divider@3.3.8\n- @react-types/form@3.7.3\n- @react-types/grid@3.2.5\n- @react-types/illustratedmessage@3.3.8\n- @react-types/image@3.4.0\n- @react-types/label@3.9.2\n- @react-types/layout@3.3.14\n- @react-types/link@3.5.4\n- @react-types/list@3.2.16\n- @react-types/listbox@3.4.8\n- @react-types/menu@3.9.8\n- @react-types/meter@3.4.0\n- @react-types/numberfield@3.8.2\n- @react-types/overlays@3.8.6\n- @react-types/progress@3.5.3\n- @react-types/provider@3.8.0\n- @react-types/radio@3.8.0\n- @react-types/searchfield@3.5.4\n- @react-types/select@3.9.3\n- @react-types/shared@3.23.0\n- @react-types/slider@3.7.2\n- @react-types/statuslight@3.3.8\n- @react-types/switch@3.5.2\n- @react-types/table@3.9.4\n- @react-types/tabs@3.3.6\n- @react-types/text@3.3.8\n- @react-types/textfield@3.9.2\n- @react-types/tooltip@3.4.8\n- @react-types/view@3.4.8\n- @react-types/well@3.3.8\n- @spectrum-icons/color@3.5.12\n- @spectrum-icons/express@3.0.0-alpha.16\n- @spectrum-icons/illustrations@3.6.12\n- @spectrum-icons/ui@3.6.6\n- @spectrum-icons/workflow@4.2.11\n- @react-aria/optimize-locales-plugin@1.1.0\n- @react-aria/parcel-resolver-optimize-locales@1.1.0\n- react-aria@3.33.0\n- react-aria-components@1.2.0\n- react-stately@3.31.0\n- tailwindcss-react-aria-components@1.1.2\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wrapper for MenuTrigger\nDESCRIPTION: Example showing how to add a custom wrapper with a class name inside a MenuTrigger component, which doesn't render its own DOM elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuTrigger>\n  <div className=\"my-menu-trigger\">\n    {/* ... */}\n  </div>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Disabling an Entire ActionGroup in React Spectrum\nDESCRIPTION: This example shows how to disable the entire ActionGroup using the isDisabled prop on the root component, making all buttons within the group non-interactive.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup isDisabled>\n  <Item key=\"add\">Add</Item>\n  <Item key=\"delete\">Delete</Item>\n  <Item key=\"edit\">Edit</Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Button Component with useButton Hook\nDESCRIPTION: Implementation of a reusable Button component using the useButton hook to provide proper accessibility attributes and behavior for buttons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dialog/docs/useDialog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref} style={props.style}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Applying CSS Classes Based on State in React Aria (JSX)\nDESCRIPTION: This JSX snippet shows how to use a function as the value for the `className` prop on a `DropZone` component. The function receives the component's state (e.g., `isDropTarget`) and returns different CSS classes ('bg-gray-700' or 'bg-gray-600') based on that state. This approach is useful with utility CSS libraries like Tailwind.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<DropZone className={({isDropTarget}) => isDropTarget ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label Component Within DateRangePicker (TypeScript)\nDESCRIPTION: This code demonstrates how to use the previously defined MyCustomLabel inside a DateRangePicker as a drop-in replacement for the built-in label. Only the relevant usage of the custom label is shown. The DateRangePicker passes context props into MyCustomLabel, making it suitable for integration with React Aria’s context system. Assumes prior definition and export of MyCustomLabel and its dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n<DateRangePicker>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/*- end highlight -*/}\n  {/* ... */}\n</DateRangePicker>\n```\n\n----------------------------------------\n\nTITLE: Custom NumberField Button Styling\nDESCRIPTION: Example of dynamic styling using className function with Tailwind CSS classes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<Button className={({isPressed}) => isPressed ? 'bg-gray-700' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Targeting for Radio Component\nDESCRIPTION: Shows the default CSS class selector `.react-aria-Radio` used to target and style Radio components from React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Radio {\n  /* ... */\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Metadata and Dependencies for useTimeFieldState (JavaScript)\nDESCRIPTION: This snippet imports documentation metadata from the generated module docs:@react-stately/datepicker and various components from @react-spectrum/docs. It also loads the package metadata JSON for @react-stately/datepicker. These imports are used throughout the documentation page to populate API, type, and function references. Modules must be resolvable in the build system for this to function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useTimeFieldState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/datepicker';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/datepicker/package.json';\n```\n\n----------------------------------------\n\nTITLE: Using Slots in React Aria Components for NumberField\nDESCRIPTION: Shows how to use the 'slot' prop to distinguish between multiple instances of the same component within a pattern, specifically for a NumberField.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NumberField>\n  <Label>Width</Label>\n  <Group>\n    <Button slot=\"decrement\">-</Button>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n  </Group>\n</NumberField>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for Card and Dialog Components\nDESCRIPTION: Demonstrates how CSS styles can be defined for Card and Dialog components, including specific styles for semantic elements like titles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-semantic-elements.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* @adobe/spectrum-css/components/card/vars.css */\n.spectrum-Card {\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  background: white;\n}\n\n.spectrum-Card-title {\n    font-size: 14px;\n}\n-------------------------------------\n/* @adobe/spectrum-css/components/dialog/vars.css */\n.spectrum-Dialog {\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  background: white;\n}\n\n.spectrum-Dialog-title {\n    font-size: 18px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Disabled Slider with CSS in React Spectrum\nDESCRIPTION: CSS styles for the disabled state of a slider, targeting the track and thumb elements to visually indicate the disabled state using a different color.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Slider {\n  &[data-disabled] {\n    .react-aria-SliderTrack:before {\n      background: var(--border-color-disabled);\n    }\n\n    .react-aria-SliderThumb {\n      background: var(--border-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting CalendarDateTime to Native Date Object (TypeScript/React)\nDESCRIPTION: Illustrates the conversion of CalendarDateTime to a native JavaScript Date object using the toDate method, including handling of time zones and ambiguous times.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\n\nlet date = new CalendarDateTime(2022, 2, 3, 9, 45);\ndate.toDate('America/Los_Angeles'); // Thu Feb 03 2022 09:45:00 GMT-0800 (Pacific Standard Time)\ndate.toDate(getLocalTimeZone()); // e.g. Thu Feb 03 2022 09:45:00 GMT-0500 (Eastern Standard Time)\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// A \"spring forward\" transition\nlet date = new CalendarDateTime(2020, 3, 8, 2);\ndate.toDate('America/Los_Angeles', 'earlier');\n// => Sun Mar 08 2020 01:00:00 GMT-0800 (Pacific Daylight Time)\n```\n\n----------------------------------------\n\nTITLE: Importing I18nProvider Component in TypeScript\nDESCRIPTION: This snippet shows how to import the I18nProvider component from the @react-aria/i18n package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/I18nProvider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {I18nProvider} from '@react-aria/i18n';\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook API Documentation (JSX)\nDESCRIPTION: JSX code block using the `FunctionAPI` component from `@react-spectrum/docs` to display the API signature (parameters, return type) of the `useTooltipTriggerState` function, based on the imported documentation data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tooltip/docs/useTooltipTriggerState.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n## API\n\n<FunctionAPI function={docs.exports.useTooltipTriggerState} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Importing useSeparator Hook from React Aria\nDESCRIPTION: This snippet shows how to import the useSeparator hook from the @react-aria/separator package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/separator/docs/useSeparator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useSeparator} from '@react-aria/separator';\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to TagGroup in React Spectrum\nDESCRIPTION: Example demonstrating how to use the description prop to associate additional help text with a TagGroup, providing users with context about the purpose of the tag selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tag/docs/useTagGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup label=\"Categories\" description=\"Your selected categories.\">\n  <Item key=\"news\">News</Item>\n  <Item key=\"travel\">Travel</Item>\n  <Item key=\"gaming\">Gaming</Item>\n  <Item key=\"shopping\">Shopping</Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Converting ZonedDateTime to String in React\nDESCRIPTION: Creates a ZonedDateTime and demonstrates its string representation using toString(), which returns an ISO 8601 formatted string with time zone information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new ZonedDateTime(\n  2022, 2, 3,\n  'America/Los_Angeles', -28800000,\n  12, 24, 45\n);\n\ndate.toString(); // '2022-02-03T12:24:45-08:00[America/Los_Angeles]'\n```\n\n----------------------------------------\n\nTITLE: Handling Item Drops in React Spectrum ListBox (TSX)\nDESCRIPTION: Demonstrates using the `onItemDrop` event handler within the `useDragAndDrop` hook to detect when an item is dropped directly onto a ListBox item. The example shows alerting the key of the target item upon drop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let { dragAndDropHooks } = useDragAndDrop({\n    ///- begin highlight -///\n    onItemDrop(e) {\n      alert(`Dropped on ${e.target.key}`);\n    }\n    ///- end highlight -///\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 12, flexWrap: 'wrap'}}>\n      {/* see above */}\n      <DraggableListBox />\n      <ListBox aria-label=\"Droppable list\" dragAndDropHooks={dragAndDropHooks}>\n        <ListBoxItem id=\"applications\">Applications</ListBoxItem>\n        <ListBoxItem id=\"documents\">Documents</ListBoxItem>\n        <ListBoxItem id=\"pictures\">Pictures</ListBoxItem>\n      </ListBox>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Layout and Exporting Documentation Layout - React Spectrum - JavaScript\nDESCRIPTION: This snippet imports the Layout component from the @react-spectrum/docs package and exports it as the default export, ensuring that the documentation for the useDisclosureGroupState hook is wrapped in a consistent layout. It assumes that @react-spectrum/docs is installed as a dependency. No parameters are used; the main function is to support the documentation's visual and navigational structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/disclosure/docs/useDisclosureGroupState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Implementing Root and Item Dropping in ListBox (tsx)\nDESCRIPTION: Extends the `ListBox` component to handle drops on the entire collection ('root') and specific items. It utilizes `useDroppableCollectionState`, `useDroppableCollection`, `useListBox`, `useOption`, `useFocusRing`, and `useDroppableItem` hooks. A `DropIndicator` is added for the root target, and the list element `<ul>` gets a `.drop-target` class when the root is targeted (`isDropTarget`). It defines `onRootDrop` and `onItemDrop` handlers and uses `shouldAcceptItemDrop` to conditionally allow drops on specific items (e.g., 'documents').\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ListBox(props) {\n  ///- begin collapse -///\n  let state = useListState(props);\n  let ref = React.useRef(null);\n  let { listBoxProps } = useListBox(props, state, ref);\n\n  let dropState = useDroppableCollectionState({\n    ...props,\n    collection: state.collection,\n    selectionManager: state.selectionManager\n  });\n\n  let {collectionProps} = useDroppableCollection({\n    ...props,\n    keyboardDelegate: new ListKeyboardDelegate(state.collection, state.disabledKeys, ref),\n    dropTargetDelegate: new ListDropTargetDelegate(state.collection, ref)\n  }, dropState, ref);\n  ///- end collapse -///\n  // ...\n\n  ///- begin highlight -///\n  let isDropTarget = dropState.isDropTarget({type: 'root'});\n  ///- end highlight -///\n\n  return (\n    <ul\n      {...mergeProps(listBoxProps, collectionProps)}\n      ref={ref}\n      ///- begin highlight -///\n      className={isDropTarget ? 'drop-target' : ''}\n      ///- end highlight -///\n    >\n      {/*- begin highlight -*/}\n      <DropIndicator target={{type: 'root'}} dropState={dropState} />\n      {/*- end highlight -*/}\n      {[...state.collection].map((item) => (\n        <Option\n          key={item.key}\n          item={item}\n          state={state}\n          dropState={dropState}\n        />\n      ))}\n    </ul>\n  );\n}\n///- begin collapse -///\nfunction Option({ item, state, dropState }) {\n  let ref = React.useRef(null);\n  let { optionProps } = useOption({key: item.key}, state, ref);\n  let { isFocusVisible, focusProps } = useFocusRing();\n\n  let {dropProps, isDropTarget} = useDroppableItem({\n    target: {type: 'item', key: item.key, dropPosition: 'on'}\n  }, dropState, ref);\n\n  return (\n    <>\n      <DropIndicator\n        target={{type: 'item', key: item.key, dropPosition: 'before'}}\n        dropState={dropState} />\n      <li\n        {...mergeProps(optionProps, dropProps, focusProps)}\n        ref={ref}\n        className={`option ${isFocusVisible ? 'focus-visible' : ''} ${isDropTarget ? 'drop-target' : ''}`}>\n        {item.rendered}\n      </li>\n      {state.collection.getKeyAfter(item.key) == null &&\n        <DropIndicator\n          target={{type: 'item', key: item.key, dropPosition: 'after'}}\n          dropState={dropState} />\n      }\n    </>\n  );\n}\n///- end collapse -///\n\n<Draggable>budget.xls</Draggable>\n<ListBox\n  aria-label=\"Files\"\n  selectionMode=\"single\"\n  ///- begin highlight -///\n  onRootDrop={() => alert('Dropped on root')}\n  onItemDrop={e => alert(`Dropped on ${e.target.key}`)}\n  shouldAcceptItemDrop={target => target.key === 'documents'}\n  ///- end highlight -///\n>\n  <Item key=\"documents\">Documents</Item>\n  <Item>proposal.doc</Item>\n  <Item>presentation.ppt</Item>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Styling Slider Components with CSS\nDESCRIPTION: Provides CSS styles for customizing the appearance of the slider components, including track, thumb, and layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Slider {\n  display: grid;\n  grid-template-areas: \"label output\"\n                       \"track track\";\n  grid-template-columns: 1fr auto;\n  max-width: 300px;\n  color: var(--text-color);\n\n  .react-aria-Label {\n    grid-area: label;\n  }\n\n  .react-aria-SliderOutput {\n    grid-area: output;\n  }\n\n  .react-aria-SliderTrack {\n    grid-area: track;\n    position: relative;\n\n    /* track line */\n    &:before {\n      content: '';\n      display: block;\n      position: absolute;\n      background: var(--border-color);\n    }\n  }\n\n  .react-aria-SliderThumb {\n    width: 1.429rem;\n    height: 1.429rem;\n    border-radius: 50%;\n    background: var(--highlight-background);\n    border: 2px solid var(--background-color);\n    forced-color-adjust: none;\n\n    &[data-dragging] {\n      background: var(--highlight-background-pressed);\n    }\n\n    &[data-focus-visible] {\n      outline: 2px solid var(--focus-ring-color);\n    }\n  }\n\n  &[data-orientation=horizontal] {\n    flex-direction: column;\n    width: 300px;\n\n    .react-aria-SliderTrack {\n      height: 30px;\n      width: 100%;\n\n      &:before {\n        height: 3px;\n        width: 100%;\n        top: 50%;\n        transform: translateY(-50%);\n      }\n    }\n\n    .react-aria-SliderThumb {\n      top: 50%;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Related CSS Styles\nDESCRIPTION: Imports CSS styles from related component documentation files (Form.mdx and Button.mdx) using CSS layers. This is typically used within documentation systems to ensure base styles are loaded.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Form.mdx' layer(form);\n@import './Button.mdx' layer(button);\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component in React Spectrum\nDESCRIPTION: Shows how to import the Divider component along with related components Flex and Text from the React Spectrum library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/divider/docs/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Divider} from '@react-spectrum/divider';\nimport {Flex} from '@react-spectrum/layout';\nimport {Text} from '@react-spectrum/text';\n```\n\n----------------------------------------\n\nTITLE: Basic Static TagGroup Example in React\nDESCRIPTION: This example demonstrates a basic usage of TagGroup with static items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TagGroup aria-label=\"Static TagGroup items example\">\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for useGridList Documentation\nDESCRIPTION: This code block defines metadata for the useGridList documentation page, including category and keywords for search and organization purposes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ncategory: Collections\nkeywords: [list, aria, grid]\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing an HSBA Color Picker with React Spectrum ColorSlider\nDESCRIPTION: This React functional component demonstrates creating an HSBA (Hue, Saturation, Brightness, Alpha) color picker. It utilizes four `MyColorSlider` components for each channel, bound to a shared color state initialized by parsing an HSBA string with `parseColor`. The sliders are controlled components updating the same state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [color, setColor] = React.useState(parseColor('hsba(0, 100%, 50%, 0.5)'));\n  return (\n    <>\n      <MyColorSlider channel=\"hue\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"saturation\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"brightness\" value={color} onChange={setColor} />\n      <MyColorSlider channel=\"alpha\" value={color} onChange={setColor} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Color Array for Grid Example\nDESCRIPTION: A utility code snippet that generates an array of color values by combining base colors with different intensity levels. This array is used in the implicit grid example to create colored grid items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Grid.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet baseColors = ['celery', 'chartreuse', 'yellow', 'magenta', 'fuchsia', 'purple', 'indigo', 'seafoam', 'red', 'orange', 'green', 'blue'];\nlet colors = [];\nfor (let color of baseColors) {\n  for (let i = 4; i <= 7; i++) {\n    colors.push(`${color}-${i}00`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Messages in React Spectrum Forms\nDESCRIPTION: Demonstrates how to provide custom error messages for form validation in React Spectrum using the errorMessage prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextField\n    label=\"Name\"\n    name=\"name\"\n    isRequired\n    errorMessage={({validationDetails}) => (\n      validationDetails.valueMissing ? 'Please enter a name.' : ''\n    )}\n  />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: NumberField with Min and Max Values\nDESCRIPTION: Demonstrates how to set minimum and maximum values for a NumberField.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField\n  label=\"Enter your age\"\n  minValue={0} />\n```\n\n----------------------------------------\n\nTITLE: Cycling Fields in CalendarDateTime (TypeScript/React)\nDESCRIPTION: Demonstrates the use of the cycle method to increment or decrement individual fields of a CalendarDateTime object, with options for rounding and hour cycle.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new CalendarDateTime(2022, 12, 31, 23, 59);\ndate.cycle('day', 1); // 2022-12-01T23:59\ndate.cycle('month', 1); // 2022-01-31T23:59\ndate.cycle('hour', 1); // 2022-12-31T00:59\ndate.cycle('minute', 1); // 2022-12-31T23:00\n\nlet date = new CalendarDateTime(2022, 1, 1, 0, 0);\ndate.cycle('day', -1); // 2022-01-31T00:00\ndate.cycle('month', -1); // 2022-12-01T00:00\ndate.cycle('hour', -1); // 2022-01-01T23:00\ndate.cycle('minute', -1); // 2022-01-01T00:59\n```\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new CalendarDateTime(2022, 2, 3, 9, 22);\n\ndate.cycle('minute', 15); // 2027-02-03T09:37\ndate.cycle('minute', 15, {round: true}); // 2025-02-03T09:30\n\ndate.cycle('minute', -15); // 2017-02-03T09:07\ndate.cycle('minute', -15, {round: true}); // 2020-02-03T09:15\n```\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new CalendarDateTime(2022, 2, 3, 11);\ndate.cycle('hour', 1); // 2022-02-03T12:00\ndate.cycle('hour', 1, {hourCycle: 12}); // 2022-02-03T00:00\n\nlet date = new CalendarDateTime(2022, 2, 3, 23);\ndate.cycle('hour', 1); // 2022-02-03T00:00\ndate.cycle('hour', 1, {hourCycle: 12}); // 2022-02-03T12:00\n```\n\n----------------------------------------\n\nTITLE: Basic InlineAlert Example in React Spectrum\nDESCRIPTION: Shows a basic implementation of the InlineAlert component with a heading and content about payment information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/inlinealert/docs/InlineAlert.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<InlineAlert>\n  <Heading>Payment Information</Heading>\n  <Content>Enter your billing address, shipping address, and payment method to complete your purchase.</Content>\n</InlineAlert>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Classes for ColorArea Styling\nDESCRIPTION: Shows how to use CSS selectors to style ColorArea components using the default class naming convention.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorArea {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Spectrum Documentation Header\nDESCRIPTION: Creates the main header for the React Spectrum documentation, including the title, description, and links to get started and GitHub.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<p className={clsx(typographyStyles['spectrum-Body2'], styles.homeLinks)}>\n  <a href=\"getting-started.html\" className={clsx(linkStyle['spectrum-Link'], styles.link)}>Get started</a>\n  <span aria-hidden=\"true\">•</span>\n  <a href=\"https://github.com/adobe/react-spectrum\" className={clsx(linkStyle['spectrum-Link'], styles.link)}>GitHub</a>\n</p>\n\n<Hero\n  narrow={heroNarrow}\n  narrow2x={heroNarrow2x}\n  narrowWebp={heroNarrowWebp}\n  narrow2xWebp={heroNarrow2xWebp}\n  wide={heroWide}\n  wide2x={heroWide2x}\n  wideWebp={heroWideWebp}\n  wide2xWebp={heroWide2xWebp}\n  alt=\"React Spectrum hero image\" />\n```\n\n----------------------------------------\n\nTITLE: Hiding Scrollbars with CSS\nDESCRIPTION: CSS to hide scrollbars across different browsers while maintaining scroll functionality, used for the smooth tab panels display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.no-scrollbar::-webkit-scrollbar {\n  display: none;\n}\n\n.no-scrollbar {\n  scrollbar-width: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Example List Component Implementation\nDESCRIPTION: Renders the ExampleList component with specific styling applied.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleList style={{marginTop: 80}} />\n```\n\n----------------------------------------\n\nTITLE: Menu with Links Implementation\nDESCRIPTION: Example showing how to create menu items that function as links to external pages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MenuTrigger>\n  <ActionButton>Links</ActionButton>\n  <Menu>\n    <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n    <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n    <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n    <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n  </Menu>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Importing useLink Hook from React Aria\nDESCRIPTION: This snippet shows how to import the useLink hook and default Layout component for the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/link/docs/useLink.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/link';\nimport {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, PageDescription} from '@react-spectrum/docs';\nimport {Keyboard} from '@react-spectrum/text';\nimport packageData from '@react-aria/link/package.json';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation for DateField\nDESCRIPTION: This example demonstrates how to implement custom validation for DateField, in this case validating that the selected date is a weekday and not a weekend.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {isWeekend} from '@internationalized/date';\nimport {useLocale} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let {locale} = useLocale();\n\n  return (\n    <Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n      <DateField\n        label=\"Appointment date\"\n        validate={date => date && isWeekend(date, locale) ? 'We are closed on weekends.' : null}\n        defaultValue={parseDate('2023-10-28')} />\n      <ButtonGroup>\n        <Button type=\"submit\" variant=\"primary\">Submit</Button>\n        <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n      </ButtonGroup>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to React Spectrum Repository\nDESCRIPTION: A markdown link reference to the main React Spectrum repository where more details about the project can be found.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-aria/button\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Implementing getDropOperation for PNG Image Drops in ListBox\nDESCRIPTION: This example demonstrates how to implement a getDropOperation function in a ListBox component to only accept PNG image files. It returns 'copy' as the drop operation, restricting the drop target to only accept PNG images.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  ///- begin collapse -///\n  let list = useListData({});\n  let onRootDrop = async e => {\n    let items = await Promise.all(\n      e.items\n        .map(async item => ({\n          id: Math.random(),\n          url: URL.createObjectURL(await item.getFile()),\n          name: item.name\n        }))\n    );\n\n    list.prepend(...items);\n  };\n  ///- end collapse -///\n  // ...\n\n  return (\n    <ListBox\n      aria-label=\"Images\"\n      items={list.items}\n      /*- begin highlight -*/\n      getDropOperation={() => 'copy'}\n      /*- end highlight -*/\n      acceptedDragTypes={['image/png']}\n      onRootDrop={onRootDrop}>\n      {item => (\n        <Item textValue={item.name}>\n          <div className=\"image-item\">\n            <img src={item.url} />\n            <span>{item.name}</span>\n          </div>\n        </Item>\n      )}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: NumberFormatter Class API Documentation\nDESCRIPTION: Renders the API documentation for the NumberFormatter class.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberFormatter.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ClassAPI links={docs.links} class={docs.exports.NumberFormatter} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook Title and Description (JSX)\nDESCRIPTION: JSX code block that renders the main heading (`# useTooltipTriggerState`), the description of the hook using the `PageDescription` component populated with imported docs data, and header information using the `HeaderInfo` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tooltip/docs/useTooltipTriggerState.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n# useTooltipTriggerState\n\n<PageDescription>{docs.exports.useTooltipTriggerState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useTooltipTriggerState']} />\n```\n\n----------------------------------------\n\nTITLE: Using Static Color in ActionGroup for Different Backgrounds in React Spectrum\nDESCRIPTION: This example demonstrates how to use the staticColor prop to ensure proper contrast when an ActionGroup is displayed over colored backgrounds. The icon and text automatically take on appropriate colors for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex wrap gap=\"size-250\">\n  <View backgroundColor=\"static-blue-700\" padding=\"size-500\">\n    <ActionGroup staticColor=\"white\">\n      <Item key=\"edit\">\n        <Draw />\n        <Text>Edit</Text>\n      </Item>\n      <Item key=\"copy\">\n        <Copy />\n        <Text>Copy</Text>\n      </Item>\n      <Item key=\"delete\">\n        <Delete />\n        <Text>Delete</Text>\n      </Item>\n    </ActionGroup>\n  </View>\n  <View backgroundColor=\"static-yellow-400\" padding=\"size-500\">\n    <ActionGroup\n      staticColor=\"black\"\n      isQuiet\n      buttonLabelBehavior=\"hide\"\n      selectionMode=\"single\"\n      disallowEmptySelection\n      defaultSelectedKeys={['list']}>\n      <Item key=\"list\">\n        <ViewList />\n        <Text>List view</Text>\n      </Item>\n      <Item key=\"grid\">\n        <ViewGrid />\n        <Text>Grid view</Text>\n      </Item>\n      <Item key=\"gallery\">\n        <ViewCard />\n        <Text>Gallery view</Text>\n      </Item>\n    </ActionGroup>\n  </View>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook Description using PageDescription Component in JSX\nDESCRIPTION: Uses the `PageDescription` component (imported from `@react-spectrum/docs`) to render the description of the `useSelectState` hook. The description content is accessed from the imported `docs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/select/docs/useSelectState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PageDescription>{docs.exports.useSelectState.description}</PageDescription>\n```\n\n----------------------------------------\n\nTITLE: TimeField Labeling and Necessity Indicators in React Spectrum\nDESCRIPTION: Examples showing different combinations of labels and necessity indicators for TimeField components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-150\" wrap>\n  <TimeField label=\"Event time\" />\n  <TimeField label=\"Event time\" isRequired necessityIndicator=\"icon\" />\n  <TimeField label=\"Event time\" isRequired necessityIndicator=\"label\" />\n  <TimeField label=\"Event time\" necessityIndicator=\"label\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Styling disabled Select and children - React Spectrum - CSS\nDESCRIPTION: Customizes styles for a disabled Select, altering border and text color for .react-aria-Button and .react-aria-SelectValue, and handling high-contrast mode. Requires CSS variables for colors. Inputs: data-disabled selector state. Output: visually disables select and button for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Select {\\n  .react-aria-Button {\\n    &[data-disabled] {\\n      border-color: var(--border-color-disabled);\\n      color: var(--text-color-disabled);\\n      span[aria-hidden] {\\n        background: var(--border-color-disabled);\\n        color: var(--text-color-disabled);\\n      }\\n\\n      .react-aria-SelectValue {\\n        &[data-placeholder] {\\n          color: var(--text-color-disabled);\\n        }\\n      }\\n    }\\n  }\\n}\\n\\n@media (forced-colors: active) {\\n  .react-aria-Select {\\n    .react-aria-Button {\\n      &[data-disabled] span[aria-hidden] {\\n        background: 0 0;\\n      }\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Generating OKLCH Color Wheel with Hue Segments\nDESCRIPTION: This CSS snippet creates a color wheel using OKLCH and includes conic gradient segments for different hues. It visually represents how the color wheel is divided for hue naming.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\nbackground: `conic-gradient(in oklch longer hue, oklch(75% 0.25 0), oklch(75% 0.25 360))`\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout with Custom Hero Component - JavaScript\nDESCRIPTION: This snippet imports BlogPostLayout and Hero components from the @react-spectrum/docs package and exports BlogPostLayout as the default export. It enables the use of a standardized layout for rendering this blog post's content, maintaining consistent branding and user experience across documentation pages. There are no additional dependencies beyond @react-spectrum/docs, and the export enables static or server-rendered frameworks (such as Next.js) to recognize this layout. No user-facing parameters are defined, and output is the BlogPostLayout element wrapping the content. All code must run in a React/ESM environment with access to @react-spectrum/docs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-02-13.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring RouterConfig Type for TypeScript\nDESCRIPTION: This snippet demonstrates how to extend the RouterConfig interface to include custom router options for improved type safety and autocompletion in TypeScript.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {RouterOptions} from 'your-router';\n\ndeclare module '@adobe/react-spectrum' {\n  interface RouterConfig {\n    routerOptions: RouterOptions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Types and Functions for Custom Calendar in TSX\nDESCRIPTION: Imports necessary types (`AnyCalendarDate`) and functions (`CalendarDate`, `startOfWeek`, `toCalendar`) from the `@internationalized/date` package. These are used when implementing custom calendar logic for the RangeCalendar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AnyCalendarDate} from '@internationalized/date';\nimport {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout in React (JavaScript)\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the '@react-spectrum/docs' package, then sets BlogPostLayout as the default export of the file. Dependencies include the React framework and the @react-spectrum/docs package. There are no input parameters; the exported BlogPostLayout is intended to be used by higher-level application or site code to wrap and render blog post content within the React Spectrum documentation framework.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-12-16.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js App Router to Exclude Client Locale Strings (TypeScript)\nDESCRIPTION: Shows how to utilize the '@react-aria/optimize-locales-plugin' in a Next.js app using the App Router. This ensures that no locale translation strings are included in the client-side JavaScript bundle, reducing bundle size. Requires installation of the plugin and editing 'next.config.js', especially the webpack configuration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// next.config.js\nconst localesPlugin = require('@react-aria/optimize-locales-plugin');\n\nmodule.exports = {\n  // ...\n  webpack(config, {isServer}) {\n    if (!isServer) {\n      // Don't include any locale strings in the client JS bundle.\n      /*- begin highlight -*/\n      config.plugins.push(localesPlugin.webpack({locales: []}));\n      /*- end highlight -*/\n    }\n    return config;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Buddhist Calendar DateTime - TypeScript\nDESCRIPTION: Creates a date in the Buddhist calendar system equivalent to April 4th, 2020 at 9:15 AM in the Gregorian calendar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {BuddhistCalendar} from '@internationalized/date';\n\nlet date = new CalendarDateTime(new BuddhistCalendar(), 2563, 4, 30, 9, 15);\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout in JavaScript/JSX\nDESCRIPTION: This snippet imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports `BlogPostLayout` as the default export, setting it as the main layout component for this specific blog post page within a React-based documentation site.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-09-30.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring optimize-locales-plugin with Webpack (JavaScript)\nDESCRIPTION: Shows how to integrate the `@react-aria/optimize-locales-plugin` into a Webpack configuration file (`webpack.config.js`). It requires the plugin using `require` and adds it to the `plugins` array via `optimizeLocales.webpack`, specifying the locales ('en-US', 'fr-FR') to include in the final bundle.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/optimize-locales-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// webpack.config.js\nconst optimizeLocales = require('@react-aria/optimize-locales-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    optimizeLocales.webpack({\n      locales: ['en-US', 'fr-FR']\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Adding and Subtracting Durations from CalendarDate\nDESCRIPTION: Demonstrates how to add and subtract DateDuration objects from a CalendarDate, showing various examples of date manipulation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new CalendarDate(2022, 2, 3);\n\ndate.add({weeks: 1}); // 2022-02-10\ndate.add({months: 1}); // 2022-03-03\ndate.add({years: 1, months: 1, days: 1}); // 2023-03-04\n\ndate.subtract({weeks: 1}); // 2022-01-27\ndate.subtract({months: 1}); // 2022-01-03\ndate.subtract({years: 1, months: 1, days: 1}); // 2021-01-02\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Documentation Components in JavaScript\nDESCRIPTION: Imports several named components (`ClassAPI`, `HeaderInfo`, `FunctionAPI`, `PageDescription`) from the `@react-spectrum/docs` package. These components are used to render specific sections of the documentation page, like API references and descriptions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/combobox/docs/useComboBoxState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ClassAPI, HeaderInfo, FunctionAPI, PageDescription} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Importing PortalProvider and Layout Components in React\nDESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default. Also imports necessary components and data for documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/PortalProvider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/overlays';\nimport {HeaderInfo, PropTable, FunctionAPI, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/overlays/package.json';\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label Component within DatePicker in TSX\nDESCRIPTION: This snippet demonstrates how to replace the default React Aria `Label` component with the previously defined `MyCustomLabel` component within a `DatePicker`. The custom label will receive necessary props and context (like `htmlFor`) from the `DatePicker` automatically due to its integration with `LabelContext` and `useContextProps`, ensuring proper accessibility linkage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Name</MyCustomLabel>\n  {/*- end highlight -*/}\n  {/* ... */}\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Displaying Anatomy Diagram with SVG Component (JSX)\nDESCRIPTION: Renders an SVG image representing the drag and drop anatomy using the `Anatomy` component (imported as an SVG). It assigns `role=\"img\"` and an `aria-label` for accessibility, describing the diagram's content which shows a drag source, drag preview, and drop target.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/drag-and-drop.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Anatomy role=\"img\" aria-label=\"Drag and drop anatomy diagram, showing drag source, drag preview, and drop target.\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from React Spectrum Docs\nDESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export for documentation layout purposes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tree/docs/useTreeState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing useDateFormatter Hook Example\nDESCRIPTION: Shows the import statements needed for using the useDateFormatter hook and related documentation components\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/useDateFormatter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/i18n';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/i18n/package.json';\n```\n\n----------------------------------------\n\nTITLE: Mocking HTMLElement Dimensions for Virtualized Components in Jest using TSX\nDESCRIPTION: Provides a Jest setup using `beforeAll` to mock `HTMLElement.prototype` properties (`clientWidth`, `clientHeight`, `scrollHeight`, `scrollWidth`) using `jest.spyOn`. This allows virtualized React Spectrum components, which rely on element measurements, to render items correctly within a JSDOM test environment. Mocks are restored in `afterAll`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nbeforeAll(function () {\n  // The virtualizer will now think it has a visible area of 1000px x 1000px and that the items within it are 40px x 40px\n  jest.spyOn(window.HTMLElement.prototype, 'clientWidth', 'get').mockImplementation(() => 1000);\n  jest.spyOn(window.HTMLElement.prototype, 'clientHeight', 'get').mockImplementation(() => 1000);\n  jest.spyOn(window.HTMLElement.prototype, 'scrollHeight', 'get').mockImplementation(() => 40);\n  jest.spyOn(window.HTMLElement.prototype, 'scrollWidth', 'get').mockImplementation(() => 40);\n});\n\nafterAll(() => {\n  jest.restoreAllMocks();\n});\n```\n\n----------------------------------------\n\nTITLE: SearchWithin Component with Custom Width in React\nDESCRIPTION: This example demonstrates how to set a custom width for the SearchWithin component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchwithin/docs/SearchWithin.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchWithin label=\"Search\" width=\"size-3600\" >\n  <SearchField />\n  <Picker defaultSelectedKey=\"all\">\n    <Item key=\"all\">All</Item>\n    <Item key=\"campaigns\">Campaigns</Item>\n    <Item key=\"audiences\">Audiences</Item>\n    <Item key=\"tags\">Tags</Item>\n  </Picker>\n</SearchWithin>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled ColorField in React Aria\nDESCRIPTION: This example shows how to create a disabled ColorField using the isDisabled prop. It prevents the user from editing the value of the color field.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorField label=\"Disabled\" defaultValue=\"#7f007f\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Listing Renamed Spectrum Workflow Icons\nDESCRIPTION: Provides a list of three Spectrum workflow icons that have been renamed in this release to correct typographical errors. Users upgrading the icons package need to update their code to use the new names (`SelectSubtract`, `SubtractBackPath`, `SubtractFromSelection`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-05-27.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSelectSubstract -> SelectSubtract\nSubstractBackPath -> SubtractBackPath\nSubstractFromSelection -> SubtractFromSelection\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Layout Component in JavaScript\nDESCRIPTION: Exports the imported `Layout` component as the default export for this module. This suggests the `Layout` component serves as the primary wrapper or template for this documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDatePickerState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API for useTableState in JSX\nDESCRIPTION: Uses the `FunctionAPI` component to render the detailed API documentation for the `useTableState` hook. It receives the specific API definition (`docs.exports.useTableState`) and related documentation links (`docs.links`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.useTableState} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Components in React Spectrum\nDESCRIPTION: Basic imports required for using custom icons in React Spectrum applications.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/docs/custom-icons.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {Icon} from '@react-spectrum/icon';\n```\n\n----------------------------------------\n\nTITLE: Setting Granularity and Placeholder Values in DatePicker (TypeScript)\nDESCRIPTION: Demonstrates how granularity and placeholderValue can affect date type and time zone handling in DatePicker. The first example does not set a value or placeholder, while the second specifies placeholderValue using now from @internationalized/date. Props include label, granularity, and optionally placeholderValue. Outputs date objects on user selection, with or without time zone information. Dependencies: @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\nimport {now} from '@internationalized/date';\\n\\n<DatePicker\\n  label=\\\"Event date\\\"\\n  granularity=\\\"second\\\" />\\n<DatePicker\\n  label=\\\"Event date\\\"\\n  placeholderValue={now('America/New_York')}\\n  granularity=\\\"second\\\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Meter Scale with Min and Max Values\nDESCRIPTION: Demonstrates how to use a different scale for the Meter by setting the minValue and maxValue props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Meter\n  label=\"Widgets Used\"\n  minValue={50}\n  maxValue={150}\n  value={100} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Checkboxes for List Items\nDESCRIPTION: This snippet shows how to add selection checkboxes to list items using the useGridListSelectionCheckbox hook from React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useGridListSelectionCheckbox} from '@react-aria/gridlist';\n\n// Reuse the Checkbox from your component library. See below for details.\nimport {Checkbox} from 'your-component-library';\n\nfunction ListCheckbox({ item, state }) {\n  let { checkboxProps } = useGridListSelectionCheckbox({ key: item.key }, state);\n  return <Checkbox {...checkboxProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in React Spectrum (JavaScript)\nDESCRIPTION: This snippet imports the Layout component from @react-spectrum/docs and immediately exports it as the default export. It is used to wrap the page content in the documentation site, providing consistent layout and styling. There are no external parameters or logic, and it depends on the @react-spectrum/docs module being available.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useTimeFieldState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Popover Wrapper Component in React (TSX)\nDESCRIPTION: Defines a reusable `MyPopover` component that wraps the `Popover`, `OverlayArrow`, and `Dialog` components from `react-aria-components`. This pattern promotes consistency by encapsulating the common structure and styling logic. The example demonstrates its usage within a `DialogTrigger`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PopoverProps} from 'react-aria-components';\n\ninterface MyPopoverProps extends Omit<PopoverProps, 'children'> {\n  children: React.ReactNode\n}\n\nfunction MyPopover({children, ...props}: MyPopoverProps) {\n  return (\n    <Popover {...props}>\n      <OverlayArrow>\n        <svg width={12} height={12} viewBox=\"0 0 12 12\"><path d=\"M0 0 L6 6 L12 0\" /></svg>\n      </OverlayArrow>\n      <Dialog>\n        {children}\n      </Dialog>\n    </Popover>\n  );\n}\n\n<DialogTrigger>\n  <Button aria-label=\"Help\">ⓘ</Button>\n  <MyPopover>\n    <Heading slot=\"title\">Help</Heading>\n    <p>For help accessing your account, please contact support.</p>\n  </MyPopover>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Importing Assets and Components for Blog Post (JavaScript)\nDESCRIPTION: Imports various assets like videos (MP4, VTT), SVGs, and React components (`BlogPostLayout`, `Video`, `Track`, `Image`) required for rendering the React Spectrum drag and drop blog post. It utilizes `url:` prefixes for asset imports (likely handled by a bundler like Parcel) and imports components from `@react-spectrum/docs` and `@react-aria/dnd/docs`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/drag-and-drop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport dndMobile from 'url:../assets/dnd-mobile.mp4';\nimport dndMobileVTT from 'url:../assets/dnd-mobile.vtt';\nimport dndKeyboard from 'url:../assets/dnd-keyboard.mp4';\nimport heroVideo from 'url:../assets/dnd.mp4';\nimport BetweenDropPosition from '@react-aria/dnd/docs/BetweenDropPosition.svg';\nimport OnDropPosition from '@react-aria/dnd/docs/OnDropPosition.svg';\nimport RootDropPosition from '@react-aria/dnd/docs/RootDropPosition.svg';\nimport Anatomy from '@react-aria/dnd/docs/Anatomy.svg';\n\nimport {BlogPostLayout, Video, Track, Image} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Importing Flex Component in React Spectrum\nDESCRIPTION: Shows how to import the Flex component from @react-spectrum/layout and the View component from @react-spectrum/view for use in layouts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Flex.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Rendering Interface Documentation using JSX\nDESCRIPTION: Uses the `ClassAPI` component (likely misnamed, should be InterfaceAPI or similar based on context) to render the interface definition associated with the return type of `useComboBoxState`. It accesses the specific interface definition and links from the imported `docs` object using an ID lookup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/combobox/docs/useComboBoxState.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useComboBoxState.return.base.id]} />\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Contribution Guidelines via JSX (JavaScript)\nDESCRIPTION: This code snippet injects the Contributing Markdown content into the documentation page using a custom JSX tag. It assumes the Markdown file has been imported and will be rendered as part of the React component structure. This approach separates content from layout and is commonly used in MDX or similar React-based documentation frameworks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/contribute.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Contributing />\n```\n\n----------------------------------------\n\nTITLE: Embedding a Looping Video using JSX Component (iPad Hover Demo)\nDESCRIPTION: Uses the imported 'Video' component to display a second demonstration video, this one illustrating button hover behavior specifically on an iPad. The video source is specified by the 'hoveriPadVideoUrl' variable, and it's also configured to loop, autoplay, and be muted.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-2.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Video src={hoveriPadVideoUrl} loop autoPlay muted />\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component with useButton Hook\nDESCRIPTION: Implementation of a reusable Button component using the useButton hook from React Aria. This component can be used in the DatePicker to toggle the calendar popover.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = React.useRef(null);\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TagGroup and Related Components in React\nDESCRIPTION: This snippet shows how to import the TagGroup component and related components from the React Spectrum library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Item, TagGroup} from '@react-spectrum/tag';\nimport News from '@spectrum-icons/workflow/News';\nimport Airplane from '@spectrum-icons/workflow/Airplane';\nimport Game from '@spectrum-icons/workflow/Game';\nimport ShoppingCart from '@spectrum-icons/workflow/ShoppingCart';\nimport {Text} from '@react-spectrum/text';\nimport {Avatar} from '@react-spectrum/avatar';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Information Component in JSX\nDESCRIPTION: Renders the `HeaderInfo` component to display introductory information about the documented APIs. It passes the previously imported `packageData` and an array containing the names of the primary components/hooks (`useTableState`, `useTableColumnResizeState`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useTableState', 'useTableColumnResizeState']} />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Assets and Components in JavaScript/JSX\nDESCRIPTION: Imports documentation data (`docs`) specifically for `@react-stately/select`, various documentation rendering components (`ClassAPI`, `HeaderInfo`, etc.) from `@react-spectrum/docs`, and package metadata (`packageData`) from the `@react-stately/select` package. These imports provide the content and tools needed to build the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/select/docs/useSelectState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/select';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/select/package.json';\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Development Server for Rollup Project\nDESCRIPTION: Commands to install dependencies and start the development server for a Rollup project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-rollup-starter-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing FocusScope Component in React\nDESCRIPTION: This snippet shows how to import the FocusScope component from the @react-aria/focus package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/focus/docs/FocusScope.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FocusScope} from '@react-aria/focus';\n```\n\n----------------------------------------\n\nTITLE: Disabling Tabs and Individual Tab Items in React Spectrum Tabs (TypeScript)\nDESCRIPTION: Illustrates two ways to disable tabs: with disabledKeys to target specific tabs and with isDisabled to disable all tabs. Uses Flex from React Spectrum to stack two demo Tab components. Relies on tab keys and disabledKeys prop; global disabling via isDisabled. Inputs: static tab keys/labels; Outputs: tabs with one or all items disabled, preventing interaction. Requires @adobe/react-spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\n<Flex direction=\"column\" rowGap=\"size-150\">\\n  <Tabs aria-label=\"Chat log single tab disabled example\" disabledKeys={['item2']}>\\n    <TabList>\\n      <Item key=\"item1\">\\n        John Doe\\n      </Item>\\n      <Item key=\"item2\">\\n        Jane Doe\\n      </Item>\\n      <Item key=\"item3\">\\n        Joe Bloggs\\n      </Item>\\n    </TabList>\\n    <TabPanels>\\n      <Item key=\"item1\">\\n        There is no prior chat history with John Doe.\\n      </Item>\\n      <Item key=\"item2\">\\n        There is no prior chat history with Jane Doe.\\n      </Item>\\n      <Item key=\"item3\">\\n        There is no prior chat history with Joe Bloggs.\\n      </Item>\\n    </TabPanels>\\n  </Tabs>\\n  <Tabs aria-label=\"Chat log all tabs disabled example\" isDisabled>\\n    <TabList>\\n      <Item key=\"item1\">\\n        John Doe\\n      </Item>\\n      <Item key=\"item2\">\\n        Jane Doe\\n      </Item>\\n      <Item key=\"item3\">\\n        Joe Bloggs\\n      </Item>\\n    </TabList>\\n    <TabPanels>\\n      <Item key=\"item1\">\\n        There is no prior chat history with John Doe.\\n      </Item>\\n      <Item key=\"item2\">\\n        There is no prior chat history with Jane Doe.\\n      </Item>\\n      <Item key=\"item3\">\\n        There is no prior chat history with Joe Bloggs.\\n      </Item>\\n    </TabPanels>\\n  </Tabs>\\n</Flex>\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text and Error Messages to TimeField\nDESCRIPTION: Demonstrates how to provide descriptive help text and validation error messages for TimeField components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\" wrap>\n  <TimeField label=\"Time\" defaultValue={new Time(9)} validationState=\"valid\" description=\"Select a meeting time.\" />\n  <TimeField label=\"Time\" validationState=\"invalid\" errorMessage=\"Empty input is not allowed.\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Installing Individual React Aria Package using Yarn (Bash)\nDESCRIPTION: Installs a specific React Aria hook package, `@react-aria/button`, using yarn. This approach is useful for granular dependency management or using only a few specific hooks, installing them under the `@react-aria` scope.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/hooks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-aria/button\n```\n\n----------------------------------------\n\nTITLE: Listing Released React Spectrum/Aria Packages and Versions\nDESCRIPTION: This snippet lists the packages released as part of an update to the Adobe React Spectrum, React Aria, React Stately, and internationalization libraries, along with their corresponding version numbers. It serves as a manifest of the updated components and utilities included in this release.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-06-27.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- @adobe/react-spectrum@3.28.0\n- @internationalized/date@3.3.0\n- @internationalized/message@3.1.1\n- @internationalized/number@3.2.1\n- @internationalized/string-compiler@3.2.1\n- @internationalized/string@3.1.1\n- @react-aria/accordion@3.0.0-alpha.19\n- @react-aria/actiongroup@3.6.0\n- @react-aria/aria-modal-polyfill@3.7.3\n- @react-aria/autocomplete@3.0.0-alpha.18\n- @react-aria/breadcrumbs@3.5.3\n- @react-aria/button@3.8.0\n- @react-aria/calendar@3.4.0\n- @react-aria/checkbox@3.9.2\n- @react-aria/color@3.0.0-beta.22\n- @react-aria/combobox@3.6.2\n- @react-aria/datepicker@3.5.0\n- @react-aria/dialog@3.5.3\n- @react-aria/dnd@3.3.0\n- @react-aria/focus@3.13.0\n- @react-aria/grid@3.8.0\n- @react-aria/gridlist@3.5.0\n- @react-aria/i18n@3.8.0\n- @react-aria/interactions@3.16.0\n- @react-aria/label@3.6.0\n- @react-aria/landmark@3.0.0-beta.2\n- @react-aria/link@3.5.2\n- @react-aria/listbox@3.10.0\n- @react-aria/live-announcer@3.3.1\n- @react-aria/menu@3.10.0\n- @react-aria/meter@3.4.3\n- @react-aria/numberfield@3.6.0\n- @react-aria/overlays@3.15.0\n- @react-aria/progress@3.4.3\n- @react-aria/radio@3.6.2\n- @react-aria/searchfield@3.5.3\n- @react-aria/select@3.11.0\n- @react-aria/selection@3.16.0\n- @react-aria/separator@3.3.3\n- @react-aria/slider@3.5.0\n- @react-aria/spinbutton@3.5.0\n- @react-aria/ssr@3.7.0\n- @react-aria/switch@3.5.2\n- @react-aria/table@3.10.0\n- @react-aria/tabs@3.6.1\n- @react-aria/tag@3.1.0\n- @react-aria/textfield@3.10.0\n- @react-aria/toast@3.0.0-beta.2\n- @react-aria/toggle@3.6.2\n- @react-aria/tooltip@3.6.0\n- @react-aria/utils@3.18.0\n- @react-aria/virtualizer@3.9.0\n- @react-aria/visually-hidden@3.8.2\n- @react-spectrum/accordion@3.0.0-alpha.21\n- @react-spectrum/actionbar@3.1.0\n- @react-spectrum/actiongroup@3.9.0\n- @react-spectrum/autocomplete@3.0.0-alpha.19\n- @react-spectrum/avatar@3.0.2\n- @react-spectrum/badge@3.1.3\n- @react-spectrum/breadcrumbs@3.8.0\n- @react-spectrum/button@3.12.3\n- @react-spectrum/buttongroup@3.6.3\n- @react-spectrum/calendar@3.3.0\n- @react-spectrum/card@3.0.0-alpha.20\n- @react-spectrum/checkbox@3.7.3\n- @react-spectrum/color@3.0.0-beta.23\n- @react-spectrum/combobox@3.9.0\n- @react-spectrum/contextualhelp@3.6.0\n- @react-spectrum/datepicker@3.6.0\n- @react-spectrum/dialog@3.8.0\n- @react-spectrum/divider@3.5.3\n- @react-spectrum/dnd@3.3.0\n- @react-spectrum/form@3.6.3\n- @react-spectrum/icon@3.7.3\n- @react-spectrum/illustratedmessage@3.4.3\n- @react-spectrum/image@3.4.3\n- @react-spectrum/inlinealert@3.0.0-rc.0\n- @react-spectrum/label@3.13.0\n- @react-spectrum/labeledvalue@3.1.3\n- @react-spectrum/layout@3.5.3\n- @react-spectrum/link@3.5.3\n- @react-spectrum/list@3.6.0\n- @react-spectrum/listbox@3.11.0\n- @react-spectrum/menu@3.12.0\n- @react-spectrum/meter@3.4.3\n- @react-spectrum/numberfield@3.6.3\n- @react-spectrum/overlays@5.2.0\n- @react-spectrum/picker@3.11.0\n- @react-spectrum/progress@3.6.0\n- @react-spectrum/provider@3.8.0\n- @react-spectrum/radio@3.5.3\n- @react-spectrum/searchfield@3.7.3\n- @react-spectrum/slider@3.5.3\n- @react-spectrum/statuslight@3.5.3\n- @react-spectrum/switch@3.4.3\n- @react-spectrum/table@3.10.0\n- @react-spectrum/tabs@3.7.0\n- @react-spectrum/tag@3.1.0\n- @react-spectrum/text@3.4.3\n- @react-spectrum/textfield@3.10.3\n- @react-spectrum/theme-dark@3.5.3\n- @react-spectrum/theme-default@3.5.3\n- @react-spectrum/theme-express@3.0.0-alpha.5\n- @react-spectrum/theme-light@3.4.3\n- @react-spectrum/toast@3.0.0-beta.2\n- @react-spectrum/tooltip@3.5.2\n- @react-spectrum/utils@3.10.0\n- @react-spectrum/view@3.6.0\n- @react-spectrum/well@3.4.3\n- @react-stately/calendar@3.3.0\n- @react-stately/checkbox@3.4.3\n- @react-stately/collections@3.9.0\n- @react-stately/color@3.4.0\n- @react-stately/combobox@3.5.2\n- @react-stately/data@3.10.0\n- @react-stately/datepicker@3.5.0\n- @react-stately/dnd@3.2.2\n- @react-stately/flags@3.0.0-alpha.0\n- @react-stately/grid@3.7.0\n- @react-stately/layout@3.12.2\n- @react-stately/list@3.9.0\n- @react-stately/menu@3.5.3\n- @react-stately/numberfield@3.5.0\n- @react-stately/overlays@3.6.0\n- @react-stately/radio@3.8.2\n- @react-stately/searchfield@3.4.3\n- @react-stately/select@3.5.2\n- @react-stately/selection@3.13.2\n- @react-stately/slider@3.4.0\n- @react-stately/table@3.10.0\n- @react-stately/tabs@3.5.0\n- @react-stately/toast@3.0.0-beta.1\n- @react-stately/toggle@3.6.0\n- @react-stately/tooltip@3.4.2\n- @react-stately/tree@3.7.0\n- @react-stately/utils@3.7.0\n- @react-stately/virtualizer@3.6.0\n- @react-types/actionbar@3.1.0\n- @react-types/breadcrumbs@3.6.0\n- @react-types/calendar@3.3.0\n- @react-types/card@3.0.0-alpha.16\n- @react-types/contextualhelp@3.2.3\n- @react-types/datepicker@3.4.0\n- @react-types/dialog@3.5.3\n- @react-types/inlinealert@3.0.0-rc.0\n- @react-types/link@3.4.3\n- @react-types/list@3.2.4\n- @react-types/menu@3.9.2\n- @react-types/overlays@3.8.0\n- @react-types/table@3.7.0\n- @react-types/tooltip@3.4.2\n- @spectrum-icons/color@3.5.3\n- @spectrum-icons/express@3.0.0-alpha.7\n- @spectrum-icons/illustrations@3.6.3\n- @spectrum-icons/ui@3.5.3\n- @spectrum-icons/workflow@4.2.2\n- react-aria@3.26.0\n- react-aria-components@1.0.0-alpha.5\n- react-stately@3.24.0\n```\n\n----------------------------------------\n\nTITLE: Custom Input Component Wrapper\nDESCRIPTION: Example of creating a wrapper component to customize NumberField Input properties.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyInput(props) {\n  return <Input {...props} className=\"my-input\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using Frontmatter (YAML)\nDESCRIPTION: YAML frontmatter block defining metadata for the documentation page. It specifies the category as 'Overlays' and provides relevant keywords like 'overlay trigger' and 'state'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/overlays/docs/useOverlayTriggerState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncategory: Overlays\nkeywords: [overlay trigger, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Modal Polyfill Watch in React Application\nDESCRIPTION: Basic setup to initialize the modal polyfill watcher at the application root level before any modals are rendered. This ensures proper aria-modal behavior across different browser and screen reader combinations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/aria-modal-polyfill/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {watchModals} from '@react-aria/aria-modal-polyfill';\nwatchModals();\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component for Documentation Page in JavaScript\nDESCRIPTION: Imports the `Layout` component from `@react-spectrum/docs` and exports it as the default export for this documentation file. This component likely defines the overall structure and styling of the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for React Aria Components in v4\nDESCRIPTION: Shows how to import the tailwindcss-react-aria-components plugin in a Tailwind v4 CSS file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Layout Component\nDESCRIPTION: Imports and exports the Layout component from React Spectrum docs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberFormatter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Collapsing Button Labels in ActionGroup for Space Efficiency in React Spectrum\nDESCRIPTION: This example demonstrates how to use buttonLabelBehavior=\"collapse\" to automatically hide button labels when space is limited, while keeping more buttons visible before collapsing into a menu.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup overflowMode=\"collapse\" buttonLabelBehavior=\"collapse\" maxWidth={180}>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>Duplicate</Text>\n  </Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing ColorField Dependencies in React Aria Components\nDESCRIPTION: Imports necessary components and utilities for the ColorField documentation page, including layout components, documentation tools, and SVG assets.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:react-aria-components';\nimport statelyDocs from 'docs:@react-stately/color';\nimport {PropTable, HeaderInfo, TypeLink, PageDescription, StateTable, ContextTable} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport packageData from 'react-aria-components/package.json';\nimport Anatomy from '@react-aria/color/docs/ColorFieldAnatomy.svg';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {Divider} from '@react-spectrum/divider';\nimport {ExampleList} from '@react-spectrum/docs/src/ExampleList';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport Label from '@react-spectrum/docs/pages/assets/component-illustrations/Label.svg';\nimport Input from '@react-spectrum/docs/pages/assets/component-illustrations/Input.svg';\nimport Form from '@react-spectrum/docs/pages/assets/component-illustrations/Form.svg';\nimport {Keyboard} from '@react-spectrum/text';\nimport {StarterKits} from '@react-spectrum/docs/src/StarterKits';\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for ToggleButton Component\nDESCRIPTION: CSS styles for the ToggleButton component used in the Tree selection example, adding margin to the bottom of the button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButton {\n  margin-bottom: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic TagGroup Example with Items Prop in React\nDESCRIPTION: This example shows how to use TagGroup with a dynamic collection of items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst items = [\n  {id: 1, name: 'News'},\n  {id: 2, name: 'Travel'},\n  {id: 3, name: 'Gaming'},\n  {id: 4, name: 'Shopping'}\n];\n\n<TagGroup items={items} aria-label=\"Dynamic TagGroup items example\">\n  {item => <Item>{item.name}</Item>}\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Selection in a Menu with Controlled State (TypeScript)\nDESCRIPTION: Shows an example of a menu supporting controlled multi-selection using React state and Selection typing from 'react-stately'. Relies on MenuButton and Item components, as well as React's useState. Accepts a controlled set of selected keys and a handler for selection changes. Renders a MenuButton in 'multiple' selection mode and displays the current selection as text. This approach is essential for scenarios requiring complex UI selection handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/menu/docs/useMenu.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from 'react-stately';\\n\\nfunction Example() {\\n  let [selected, setSelected] = React.useState<Selection>(new Set(['sidebar', 'console']));\\n\\n  return (\\n    <>\\n      <MenuButton label=\"View\" selectionMode=\"multiple\" selectedKeys={selected} onSelectionChange={setSelected}>\\n        <Item key='sidebar'>Sidebar</Item>\\n        <Item key='searchbar'>Searchbar</Item>\\n        <Item key='tools'>Tools</Item>\\n        <Item key='console'>Console</Item>\\n      </MenuButton>\\n      <p>Current selection (controlled): {selected === 'all' ? 'all' : [...selected].join(', ')}</p>\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation using FunctionAPI Component in JSX\nDESCRIPTION: Employs the `FunctionAPI` component to render the detailed API documentation for the `useSelectState` hook. It receives the function's definition and related type links from the imported `docs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/select/docs/useSelectState.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.useSelectState} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles for React Aria Examples\nDESCRIPTION: Imports necessary CSS files from `@react-aria/example-theme` and related MDX documentation files to style the form examples correctly. This ensures the visual presentation aligns with the intended design.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@react-aria/example-theme';\n@import 'react-aria-components/docs/TextField.mdx';\n@import 'react-aria-components/docs/Button.mdx';\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled ComboBox States with CSS\nDESCRIPTION: This CSS snippet demonstrates how to style disabled states for a ComboBox, including the input and button elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ComboBox {\n  .react-aria-Input {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n    }\n  }\n\n  .react-aria-Button {\n    &[data-disabled] {\n      background: var(--border-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Client Library for React Spectrum Docs - JavaScript/JSX\nDESCRIPTION: Demonstrates how to import the React Spectrum docs client library into your project. This package is a required dependency for rendering documentation components and for managing live docs context, typically as part of an MDX or documentation rendering toolchain. No parameters or runtime I/O are required; the statement needs to be placed at the module's root to initialize documentation features.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/useMultipleSelectionState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport '@react-spectrum/docs/src/client';\n```\n\n----------------------------------------\n\nTITLE: Installing React Aria Form Package\nDESCRIPTION: This snippet shows the package name for the React Aria form package that is part of the React Spectrum library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/form/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-aria/form\n```\n\n----------------------------------------\n\nTITLE: Accessible ColorPicker Using aria-label (TypeScript/TSX)\nDESCRIPTION: When a visible label isn't provided, this example uses the `aria-label` prop for accessibility. The aria-label prop ensures that assistive technologies can describe the purpose of the ColorPicker to users. The ColorEditor is added for editing, and the component is initialized with a default color value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorPicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker aria-label=\"Fill color\" defaultValue=\"#184\">\n  <ColorEditor />\n</ColorPicker>\n```\n\n----------------------------------------\n\nTITLE: Setting the Size of the ColorWheel Component in TSX\nDESCRIPTION: Demonstrates how to control the visual size of the `ColorWheel` component using the `size` prop with a predefined size value from the Spectrum design system (e.g., \"size-1600\").\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorWheel.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorWheel size=\"size-1600\" />\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Development Server with Esbuild\nDESCRIPTION: Commands to install dependencies and start the development server using yarn and Python's HTTP server.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-esbuild-starter-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn start\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Forcing Hour Cycle Format in TimeField - React Spectrum (TypeScript)\nDESCRIPTION: Shows how to override the automatic hour format detection in TimeField using the hourCycle prop. In this example, MyTimeField is forced to use a 24-hour time regardless of the user's locale by setting hourCycle to 24. Requires MyTimeField component and appropriate props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n<MyTimeField\n  label=\"Appointment time\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Importing Component Styles using CSS Layers (CSS)\nDESCRIPTION: Imports CSS rules for Button, Dialog, and Switch components from their respective MDX documentation files using the `@import` rule and CSS layers (`button`, `dialog`, `switch`). This allows for organized styling within the documentation context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n@import './Dialog.mdx' layer(dialog);\n@import './Switch.mdx' layer(switch);\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Link Package in Markdown\nDESCRIPTION: This snippet introduces the @react-aria/link package and its relation to the react-spectrum project. It uses a markdown heading and provides a link to the main repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/link/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/link\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with react-aria-components Plugin - CSS\nDESCRIPTION: This snippet shows the required CSS import statements to set up Tailwind CSS with the tailwindcss-react-aria-components plugin in version 4. The example should be added at the top of the CSS file. The prerequisites are Tailwind CSS v4 and the tailwindcss-react-aria-components plugin. No specific parameters are required, but this must be added before using React Aria components with Tailwind. Output is the enabled plugin within the Tailwind processing pipeline.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ios-list.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Next.js Locale Optimization Configuration\nDESCRIPTION: Configuration for optimizing locale bundles in Next.js applications\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/internationalization.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// next.config.js\nconst optimizeLocales = require('@react-aria/optimize-locales-plugin');\n\nmodule.exports = {\n  webpack(config) {\n    config.plugins.push(\n      optimizeLocales.webpack({\n        locales: ['en-US', 'fr-FR']\n      })\n    );\n    return config;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrative Result of mergeProps Example in TypeScript\nDESCRIPTION: Shows the structure of the `merged` object that would result from executing the previous `mergeProps(a, b)` example. This code comment illustrates how `mergeProps` handles specific properties: `className` values from the input objects ('foo' and 'bar') are concatenated into a single string ('foo bar'), and the `onKeyDown` handlers are chained such that both original handlers (`a.onKeyDown` and `b.onKeyDown`) are called sequentially when the event occurs. Other props not specifically handled (like `id` or event handlers) typically follow a last-one-wins merging strategy.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/utils/docs/mergeProps.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet merged = {\n  className: 'foo bar',\n  onKeyDown(e) {\n    a.onKeyDown(e);\n    b.onKeyDown(e);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Spectrum Component Examples as Cards - React JSX\nDESCRIPTION: This snippet demonstrates how to render categorized example sections displaying React Spectrum components inside <ExampleCard> containers. Each card receives props for URL, title, and description, and renders the corresponding component demo. All snippets rely on React, the layout-specific styles object, <ExampleCard> from the local library, and relevant Spectrum component imports (e.g., Dialog, Popover, Checkbox, etc.). Inputs include props for each <ExampleCard>, while outputs are rendered React elements comprising the documentation/demo UI. For correct operation, ensure that all Spectrum components, the styles object, and ExampleCard are properly imported and available in scope.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"Dialog.html\"\n  title=\"Dialog\"\n  description=\"A dialog is an overlay shown above other content in an application.\">\n  <Dialog />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Popover.html\"\n  title=\"Popover\"\n  description=\"A popover displays interactive content in context with a trigger element.\">\n  <Popover />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Tooltip.html\"\n  title=\"Tooltip\"\n  description=\"A tooltip displays a description of an element on hover or focus.\">\n  <Tooltip />\n</ExampleCard>\n\n</section>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"Checkbox.html\"\n  title=\"Checkbox\"\n  description=\"A checkbox allows a user to select an individual option.\">\n  <Checkbox />\n</ExampleCard>\n\n<ExampleCard\n  url=\"CheckboxGroup.html\"\n  title=\"CheckboxGroup\"\n  description=\"A checkbox group allows a user to select one or more items in a list of options.\">\n  <CheckboxGroup />\n</ExampleCard>\n\n<ExampleCard\n  url=\"RadioGroup.html\"\n  title=\"RadioGroup\"\n  description=\"A radio group allows a user to select a single item from a list of options.\">\n  <RadioGroup />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Switch.html\"\n  title=\"Switch\"\n  description=\"A switch allows a user to turn a setting on or off.\">\n  <Switch />\n</ExampleCard>\n\n<ExampleCard\n  url=\"TextField.html\"\n  title=\"TextField\"\n  description=\"A text field allows a user to enter a plain text value with a keyboard.\">\n  <TextField />\n</ExampleCard>\n\n<ExampleCard\n  url=\"SearchField.html\"\n  title=\"SearchField\"\n  description=\"A search field allows a user to enter and clear a search query.\">\n  <SearchField />\n</ExampleCard>\n\n<ExampleCard\n  url=\"NumberField.html\"\n  title=\"NumberField\"\n  description=\"A number field allows a user to enter, increment, or decrement a numeric value.\">\n  <NumberField />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Slider.html\"\n  title=\"Slider\"\n  description=\"A slider allows a user to select one or more values within a range.\">\n  <Slider />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Form.html\"\n  title=\"Form\"\n  description=\"A form allows users to submit data to a server, with support for validation.\">\n  <Form />\n</ExampleCard>\n\n</section>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"Tabs.html\"\n  title=\"Tabs\"\n  description=\"Tabs organize content into multiple sections, and allow a user to view one at a time.\">\n  <Tabs />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Link.html\"\n  title=\"Link\"\n  description=\"A link allows a user to navigate to another page.\">\n  <Link />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Breadcrumbs.html\"\n  title=\"Breadcrumbs\"\n  description=\"Breadcrumbs display a hierarchy of links to the current page or resource.\">\n  <Breadcrumbs />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Disclosure.html\"\n  title=\"Disclosure\"\n  description=\"A disclosure is a collapsible section of content.\">\n  <Disclosure />\n</ExampleCard>\n\n<ExampleCard\n  url=\"DisclosureGroup.html\"\n  title=\"DisclosureGroup\"\n  description=\"A disclosure group is a grouping of related disclosures, sometimes called an accordion.\">\n  <DisclosureGroup />\n</ExampleCard>\n\n</section>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"ProgressBar.html\"\n  title=\"ProgressBar\"\n  description=\"A progress bar shows progress of an operation over time.\">\n  <ProgressBar />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Meter.html\"\n  title=\"Meter\"\n  description=\"A meter represents a quantity within a known range, or a fractional value.\">\n  <Meter />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Toast.html\"\n  title=\"Toast\"\n  description=\"A toast displays a temporary notification of an action, error, or other event.\">\n  <Toast />\n</ExampleCard>\n\n</section>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"DropZone.html\"\n  title=\"DropZone\"\n  description=\"A drop zone is an area into which one or multiple objects can be dragged and dropped.\">\n  <DropZone />\n</ExampleCard>\n\n</section>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"usePress.html\"\n  title=\"usePress\"\n  description=\"Handles press interactions across mouse, touch, keyboard, and screen reader input.\">\n  <Press />\n</ExampleCard>\n\n<ExampleCard\n  url=\"useLongPress.html\"\n  title=\"useLongPress\"\n  description=\"Handles long press interactions for mouse and touch devices.\">\n  <LongPress />\n</ExampleCard>\n\n<ExampleCard\n  url=\"useHover.html\"\n  title=\"useHover\"\n  description=\"Handles mouse hover interactions, ignoring touch emulation.\">\n  <Hover />\n</ExampleCard>\n\n<ExampleCard\n  url=\"useMove.html\"\n  title=\"useMove\"\n  description=\"Handles move interactions, including mouse and touch drag gestures, and arrow key equivalents.\">\n  <Move />\n</ExampleCard>\n\n<ExampleCard\n  url=\"useKeyboard.html\"\n  title=\"useKeyboard\"\n  description=\"Handles keyboard interactions for a focusable element.\">\n  <Keyboard />\n</ExampleCard>\n\n<ExampleCard\n  url=\"useFocus.html\"\n  title=\"useFocus\"\n  description=\"Handles focus interactions for an element, ignoring its descendants.\">\n  <Focus />\n</ExampleCard>\n\n<ExampleCard\n  url=\"useFocusWithin.html\"\n  title=\"useFocusWithin\"\n  description=\"Handles focus interactions for an element and its descendants.\">\n  <FocusWithin />\n</ExampleCard>\n\n<ExampleCard\n  url=\"useFocusRing.html\"\n  title=\"useFocusRing\"\n  description=\"A focus ring is an indication of the active element when interacting with a keyboard.\">\n  <FocusRing />\n</ExampleCard>\n\n<ExampleCard\n  url=\"FocusScope.html\"\n  title=\"FocusScope\"\n  description=\"A focus scope contains, restores, and manages focus for its descendant elements.\">\n  <FocusScope />\n</ExampleCard>\n\n</section>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from React Spectrum Docs\nDESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/interactions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Parsing Numbers with NumberParser in JavaScript\nDESCRIPTION: Demonstrates how to use the NumberParser class to parse a percentage string into a number value. The parser is initialized with a locale and options, then used to parse a string representation of a percentage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {NumberParser} from '@internationalized/number';\n\nlet parser = new NumberParser('en-US', {style: 'percent'});\nparser.parse('10%'); // -> 0.1\n```\n\n----------------------------------------\n\nTITLE: Generating Data for Variable Height Example (TSX)\nDESCRIPTION: This import-only snippet prepares data for a Virtualizer example demonstrating variable row heights. It generates an array of 5000 items, each with a name consisting of a random number of words (between 2 and 25) from a predefined lorem ipsum text, causing potential text wrapping and thus variable heights in the rendered list items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n import\nlet lorem = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sit amet tristique risus. In sit amet suscipit lorem. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In condimentum imperdiet metus non condimentum. Duis eu velit et quam accumsan tempus at id velit. Duis elementum elementum purus, id tempus mauris posuere a. Nunc vestibulum sapien pellentesque lectus commodo ornare.'.split(' ');\nlet items = [];\nfor (let i = 0; i < 5000; i++) {\n  let words = Math.max(2, Math.floor(Math.random() * 25));\n  let name = lorem.slice(0, words).join(' ');\n  items.push({id: i, name});\n}\n```\n\n----------------------------------------\n\nTITLE: ARIA Selection Attributes Example\nDESCRIPTION: Demonstration of ARIA attributes used for selection states in a grid, including aria-selected and aria-label for checkboxes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Table.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div role=\"row\" aria-selected=\"true\" aria-labelledby=\"column1 column2 checkbox1\">\n  <div role=\"gridcell\">\n    <input type=\"checkbox\" aria-label=\"Selected\" aria-labelledby=\"column1 column2 checkbox1\" />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Vertical Grid ListBox with CSS\nDESCRIPTION: Simple CSS for styling a vertical grid layout in ListBox components, defining a two-column grid with stable scrollbar placement.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ListBox[data-layout=grid] {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  scrollbar-gutter: stable;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Layout for Card Component with CSS Grid\nDESCRIPTION: Demonstrates how to achieve a horizontal layout for the Card component using CSS Grid without changing the React components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-slots.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  display: grid;\n  grid-template-columns: auto 5px 200px;\n  grid-template-rows: auto 1fr;\n  grid-template-areas:\n    \"preview . title\"\n    \"preview . body\";\n}\n\n.preview {\n  grid-area: preview;\n}\n\n.title {\n  grid-area: title;\n  margin: 5px 5px 5px 0;\n}\n\n.body {\n  grid-area: body;\n}\n\n.avatar, .divider, .footer {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Form Input Consuming FormValidationContext in TSX\nDESCRIPTION: This example defines a custom `NativeSelect` component that wraps a native HTML `<select>` element. It uses the `useContext` hook to consume `FormValidationContext` and retrieve potential validation errors passed down from an ancestor `Form` or `FormValidationContext.Provider`. It also uses `useId` for generating accessible IDs for the label, input, and description. The component displays the error message in a `<small>` tag when an error corresponding to its `name` exists.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Form.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {SelectHTMLAttributes} from 'react';\nimport {useContext} from 'react';\nimport {useId} from 'react-aria';\n\nfunction NativeSelect(props: SelectHTMLAttributes<HTMLSelectElement> & {label: string}) {\n  let errors = useContext(FormValidationContext);\n  let error = errors?.[props.name];\n  let id = useId();\n  let descriptionId = useId();\n\n  return (\n    <div className=\"flex\">\n      <label htmlFor={id}>{props.label}</label>\n      <select {...props} id={id} aria-describedby={descriptionId} />\n      <small className=\"invalid\" id={descriptionId}>{error}</small>\n    </div>\n  );\n}\n\n<Form validationErrors={{frequency: 'Please select a frequency.'}}>\n  <NativeSelect label=\"Frequency\" name=\"frequency\">\n    <option value=\"\">Select an option...</option>\n    <option>Always</option>\n    <option>Sometimes</option>\n    <option>Never</option>\n  </NativeSelect>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text and Error Messages to DateField\nDESCRIPTION: This example shows how to add description and error message to DateField components in different validation states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex gap=\"size-100\" wrap>\n  <DateField label=\"Date\" defaultValue={today(getLocalTimeZone())} validationState=\"valid\" description=\"Select a meeting date.\" />\n  <DateField label=\"Date\" validationState=\"invalid\" errorMessage=\"Empty input is not allowed.\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Rendering Release Posts with PostListing Component in JSX\nDESCRIPTION: This JSX snippet renders the `PostListing` component, passing the `type` prop with the value `\"releases\"`. This configuration instructs the component to dynamically fetch and display a list of posts or content items that are categorized or tagged as project releases.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PostListing type=\"releases\" />\n```\n\n----------------------------------------\n\nTITLE: Using the TableView Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'TableView' component (rendered as '<Table />' in the example). It displays data in rows and columns, supporting features like row selection and sorting. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Table />\n```\n\n----------------------------------------\n\nTITLE: Styling Linkable GridList Items with Custom Cursor (CSS)\nDESCRIPTION: Sets a pointer cursor for GridList items that have the data-href attribute, indicating interactivity. This CSS snippet should be added to override the default cursor for linkable items only. No dependencies other than the React Aria class selectors; only affects mouse pointer visuals and does not impact accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\n```css hidden\\n.react-aria-GridListItem[data-href] {\\n  cursor: pointer;\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout for Documentation (JavaScript)\nDESCRIPTION: This code imports the Layout component from the @react-spectrum/docs package and Markdown content from the CONTRIBUTING.md file, then sets the imported Layout as the default export. It is used to configure the structure for the Contribute documentation page and ensures that the layout component wraps the contribution guidelines content. Dependencies include the @react-spectrum/docs package and a Markdown file at the specified relative path. Expected input is the presence of these files in the project structure; the main output is a properly structured documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/contribute.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nimport Contributing from '../../../../CONTRIBUTING.md';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Assets and Styles - JavaScript\nDESCRIPTION: This snippet imports various components, images, and styles required for rendering the documentation landing page. It pulls in the Hero and Highlights components, several image sources for responsive layouts, the 'clsx' library for conditional className composition, and CSS module dependencies. No functional code is executed; these are static imports required for component rendering elsewhere on the page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/internationalized/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Highlights, Hero} from '@react-spectrum/docs';\nimport heroNarrow from 'url:../assets/internationalized_mobile@2x.png?width=976';\nimport heroNarrow2x from 'url:../assets/internationalized_mobile@2x.png?width=1952';\nimport heroNarrowWebp from 'url:../assets/internationalized_mobile@2x.png?as=webp&width=976';\nimport heroNarrow2xWebp from 'url:../assets/internationalized_mobile@2x.png?as=webp&width=1952';\nimport heroWide from 'url:../assets/internationalized@2x.png?width=976';\nimport heroWide2x from 'url:../assets/internationalized@2x.png?width=1952';\nimport heroWideWebp from 'url:../assets/internationalized@2x.png?as=webp&width=976';\nimport heroWide2xWebp from 'url:../assets/internationalized@2x.png?as=webp&width=1952';\nimport clsx from 'clsx';\nimport linkStyle from '@adobe/spectrum-css-temp/components/link/vars.css';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport typographyStyles from '@adobe/spectrum-css-temp/components/typography/vars.css';\n```\n\n----------------------------------------\n\nTITLE: Importing useToastRegion Hook in React (TSX)\nDESCRIPTION: This snippet imports the `useToastRegion` hook from the `@react-aria/toast` package. This hook is fundamental for creating an accessible landmark region required for displaying toast notifications according to ARIA patterns in a React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/toast/docs/useToast.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useToastRegion} from '@react-aria/toast';\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation for Checkbox Groups\nDESCRIPTION: Example showing how to implement form validation for checkbox groups using the isRequired and validationBehavior props for native form validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\n<form>\n  <CheckboxGroup\n    label=\"Sandwich condiments\"\n    name=\"condiments\"\n    /*- begin highlight -*/\n    isRequired\n    validationBehavior=\"native\"\n    /*- end highlight -*/\n  >\n    <Checkbox value=\"lettuce\">Lettuce</Checkbox>\n    <Checkbox value=\"tomato\">Tomato</Checkbox>\n    <Checkbox value=\"onion\">Onion</Checkbox>\n    <Checkbox value=\"sprouts\">Sprouts</Checkbox>\n  </CheckboxGroup>\n  <input type=\"submit\" style={{marginTop: 8}} />\n</form>\n```\n\n----------------------------------------\n\nTITLE: InlineAlert with Info Variant in React Spectrum\nDESCRIPTION: Shows an InlineAlert with the informative variant, displaying a message about accepted payment methods.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/inlinealert/docs/InlineAlert.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<InlineAlert variant=\"info\">\n  <Heading>Accepted Payment Methods</Heading>\n  <Content>Only major credit cards are accepted for payment. Direct debit is currently unavailable.</Content>\n</InlineAlert>\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to TimeField in React Spectrum\nDESCRIPTION: Shows how to enhance a TimeField with contextual help information using the ContextualHelp component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/TimeField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<TimeField\n  label=\"Appointment time\"\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Appointment changes</Heading>\n      <Content>Your appointment time cannot be changed once it is scheduled.</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Rendering Autocomplete Documentation in JSX\nDESCRIPTION: Renders the documentation for the useAutocomplete hook, including a description, API details, features explanation, and anatomy breakdown using various imported components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useAutocomplete.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<PageDescription>{docs.exports.useAutocomplete.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useAutocomplete']}\n  />\n\n<InlineAlert variant=\"notice\" marginTop={60}>\n  <Heading>Under construction</Heading>\n  <Content>This hook is in <strong>beta</strong>. More documentation is coming soon!</Content>\n</InlineAlert>\n\n<FunctionAPI function={docs.exports.useAutocomplete} links={docs.links} />\n\n<TypeContext.Provider value={docs.links}>\n  <InterfaceType properties={docs.links[docs.exports.useAutocomplete.return.base?.id ?? docs.exports.useAutocomplete.return.id].properties} />\n</TypeContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Styling Flex Row Layout for Popover Triggers with CSS\nDESCRIPTION: Defines a flexbox container for horizontally aligning DialogTrigger/Button pairs with an 8px gap. This CSS class is referenced by components to lay out multiple triggers in a row visually. Dependency: a container element with className 'flex-row'. Outputs an inline-flex row layout with proper spacing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.flex-row {\\n  display: flex;\\n  gap: 8px;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Webpack 5 React Project\nDESCRIPTION: Commands to install dependencies and start the development server for a Webpack 5 React project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-webpack-5-example/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages in React Spectrum TagGroup using TSX\nDESCRIPTION: Shows how to display a validation error message associated with a `TagGroup`. Similar to the description, a `Text` component is used, but this time with the `slot=\"errorMessage\"` prop. This semantically links the error text ('Invalid set of categories.') to the tag group, often used in form validation scenarios.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<TagGroup>\n  <Label>Categories</Label>\n  <TagList>\n    <Tag>News</Tag>\n    <Tag>Travel</Tag>\n    <Tag>Gaming</Tag>\n    <Tag>Shopping</Tag>\n  </TagList>\n  {/*- begin highlight -*/}\n  <Text slot=\"errorMessage\">Invalid set of categories.</Text>\n  {/*- end highlight -*/}\n</TagGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Group Component with a Custom CSS Class\nDESCRIPTION: This CSS snippet demonstrates targeting the built-in 'react-aria-Group' class for styling React Aria's Group component. The code is minimal, acting as a base template for extensive style overrides. There are no parameters or dependencies; the selector is ready to accept any desired CSS properties for UI customization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Group {\\n  /* ... */\\n}\n```\n\n----------------------------------------\n\nTITLE: Large Size Breadcrumbs Navigation (Default) - React Spectrum - TypeScript\nDESCRIPTION: This code renders a large (default size) Breadcrumbs component. The size prop set to \"L\" increases the UI footprint for visibility. Only two Item components are present for demonstration. Requires @react-spectrum/breadcrumbs; no extra configuration. Outputs large-format breadcrumbs matching Spectrum guidelines.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Breadcrumbs size=\"L\">\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Tabs as Links in React Spectrum\nDESCRIPTION: This snippet demonstrates how to modify a custom `Tab` component to render as an HTML `<a>` anchor element when an `href` prop is provided to the corresponding `<Item>`. It uses the `useTab` hook from React Spectrum for accessibility props and conditionally sets the `ElementType` to 'a' or 'div' based on the presence of `item.props.href`. This allows tabs to function as navigational links.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tabs/docs/useTabList.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Tab({item, state}) {\n  let ref = React.useRef(null);\n  let {tabProps} = useTab({key: item.key}, state, ref);\n  /*- begin highlight -*/\n  let ElementType = item.props.href ? 'a' : 'div';\n  /*- end highlight -*/\n  return (\n    <ElementType {...tabProps} ref={ref}>\n      {item.rendered}\n    </ElementType>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cycling Day Field Over DST Boundary - React Spectrum - TypeScript\nDESCRIPTION: Shows how cycling the day field over a DST boundary may alter the hour value in the resulting ZonedDateTime, exemplifying handling of invalid times during transitions (e.g., spring forward skips 2 AM). parseZonedDateTime is required.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// A \"spring forward\" transition\nlet date = parseZonedDateTime('2020-03-07T02:00-08:00[America/Los_Angeles]');\ndate.cycle('day', 1); // 2020-03-08T03:00-07:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Styling the Draggable Component (css)\nDESCRIPTION: Provides CSS rules for the `.draggable` class, setting basic display, border, padding, and margin. It also defines styles for the `.dragging` class, which reduces opacity when an item is being dragged, providing visual feedback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.draggable {\n  display: inline-block;\n  vertical-align: top;\n  border: 1px solid gray;\n  padding: 5px 10px;\n  margin-right: 20px;\n}\n\n.draggable.dragging {\n  opacity: 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Example Layout Component in React\nDESCRIPTION: Imports and exports the ExampleLayout component from the React Spectrum documentation package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/wifi-switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ExampleLayout} from '@react-spectrum/docs';\nexport default ExampleLayout;\n```\n\n----------------------------------------\n\nTITLE: Styling Tooltips Based on Placement with Data Attributes\nDESCRIPTION: Example of using data attributes to target tooltips with different placements for conditional styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tooltip[data-placement=left] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Start of Year/Month/Week with @internationalized/date in TypeScript\nDESCRIPTION: Demonstrates using `startOfYear`, `startOfMonth`, and `startOfWeek` functions from `@internationalized/date` to find the beginning date component of the respective time unit for a given `CalendarDateTime`. It highlights the necessity of providing a locale string (e.g., 'en-US', 'fr-FR') for `startOfWeek` because the first day of the week differs across locales. The time component of the original date object remains unchanged.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {startOfYear, startOfMonth, startOfWeek} from '@internationalized/date';\n\nlet date = new CalendarDateTime(2022, 2, 3, 9, 45);\n\nstartOfYear(date); // 2022-01-01T09:45\nstartOfMonth(date); // 2022-02-01T09:45\nstartOfWeek(date, 'en-US'); // 2022-01-30T09:45\nstartOfWeek(date, 'fr-FR'); // 2022-01-31T09:45\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Text Input Interfaces in TypeScript\nDESCRIPTION: Defines the core interfaces for text input components in React Spectrum. Includes TextField, TextArea, SearchField, SearchWithin, and InlineEditor interfaces with their respective props and type definitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/TextFields.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TextField extends InputBase, TextInputBase, TextInputDOM, ValueBase<string>, Labelable, TextInputDOMProps, StyleProps {\n  icon?: ReactNode,\n  isQuiet?: boolean,\n  validationTooltip?: ReactNode\n}\n\ntype TextArea = TextField;\n\ninterface SearchField extends TextField {\n  onSubmit?: (value: string) => void,\n  onClear?: () => void\n}\n\ninterface SearchWithin extends InputBase, TextInputBase, Labelable, DOMProps, StyleProps {\n  // not extending from ValueBase because we want onValueChange instead of onChange\n  value?: string,\n  defaultValue?: string,\n  onValueChange: (value: string) => void,\n  onSubmit: (value: string) => void,\n\n  scope?: string,\n  defaultScope?: string,\n  onScopeChange: (scope: string) => void,\n  children: ReactElement<MenuItem> | ReactElement<MenuItem>[],\n}\n\n// should this contain a textfield or other input instead of specifically being a textfield?\ninterface InlineEditor extends TextField {\n  onCancel?: () => void\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for RangeCalendar\nDESCRIPTION: Example of styling a RangeCalendar component using CSS class selectors\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-RangeCalendar {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Layout Component in React Spectrum Docs\nDESCRIPTION: Exports the `BlogPostLayout` component as the default export for this module. This makes `BlogPostLayout` the primary component used when this file is imported elsewhere, likely serving as the main layout wrapper for the release notes page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-05-01.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Data Loading in TableView with useAsyncList\nDESCRIPTION: This example shows how to implement asynchronous data loading in TableView using the useAsyncList hook from @react-stately/data. It demonstrates loading data from the Star Wars API with infinite scrolling support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\ninterface Character {\n  name: string,\n  height: number,\n  mass: number,\n  birth_year: number\n}\n\nfunction AsyncTable() {\n  let columns = [\n    {name: 'Name', key: 'name'},\n    {name: 'Height', key: 'height'},\n    {name: 'Mass', key: 'mass'},\n    {name: 'Birth Year', key: 'birth_year'}\n  ];\n\n  let list = useAsyncList<Character>({\n    async load({signal, cursor}) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=`, {signal});\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <TableView aria-label=\"example async loading table\" height=\"size-3000\">\n      <TableHeader columns={columns}>\n        {(column) => (\n          <Column align={column.key !== 'name' ? 'end' : 'start'}>\n            {column.name}\n          </Column>\n        )}\n      </TableHeader>\n      <TableBody\n        items={list.items}\n        loadingState={list.loadingState}\n        onLoadMore={list.loadMore}>\n        {(item) => (\n          <Row key={item.name}>{(key) => <Cell>{item[key]}</Cell>}</Row>\n        )}\n      </TableBody>\n    </TableView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Hook from React Stately Monopackage (TypeScript)\nDESCRIPTION: Demonstrates how to import a specific hook (`useRadioGroupState`) from the main `react-stately` monopackage after it has been installed. This is the standard import method when using the monopackage.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-stately/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Monopackage\nimport {useRadioGroupState} from 'react-stately';\n```\n\n----------------------------------------\n\nTITLE: Importing NumberFormatter Documentation Dependencies\nDESCRIPTION: Imports necessary components and documentation data for the NumberFormatter documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberFormatter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport docs from 'docs:@internationalized/number';\nimport {HeaderInfo, FunctionAPI, ClassAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@internationalized/number/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Documentation Layout - JavaScript\nDESCRIPTION: This snippet imports the Layout component from the @react-spectrum/docs package and sets it as the default export for the file. This serves as the primary layout structure for the documentation, making Layout the root component for this documentation entrypoint. Depends on React and the @react-spectrum/docs package. No parameters or special inputs are needed; the output is the Layout component as the page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-stately/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Description using JSX\nDESCRIPTION: Uses the `PageDescription` component (imported from `@react-spectrum/docs`) to render the description for the `useComboBoxState` hook. The description text is accessed from the imported `docs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/combobox/docs/useComboBoxState.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<PageDescription>{docs.exports.useComboBoxState.description}</PageDescription>\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout Component in React Spectrum Docs - JavaScript\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and sets BlogPostLayout as the default export of the file. It is used to define the layout wrapper for documentation blog posts and ensures consistency across these content pages. Dependencies required are @react-spectrum/docs and a JavaScript environment supporting ES module syntax; the input is none, and the output is the BlogPostLayout export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-07-22.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid ColorField and FieldError in CSS\nDESCRIPTION: This CSS snippet shows how to style an invalid ColorField and its associated FieldError. It changes the border color of the input and sets the font size and color of the error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorField {\n  &[data-invalid] {\n    .react-aria-Input {\n      border-color: var(--invalid-color);\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading List Data Asynchronously - React Spectrum - TypeScript/JSX\nDESCRIPTION: Implements asynchronous data loading into a React Spectrum List using the useAsyncList hook from @react-stately/data. The load method fetches Star Wars characters from a remote API, supports pagination via cursor, and uses async/await with signal aborting. The resulting items array is rendered into the List, and each fetched item is used as a key and label. Requires @react-stately/data, fetch API, and React/React Spectrum components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useAsyncList} from '@react-stately/data';\n\nfunction AsyncList() {\n\n  let list = useAsyncList({\n    async load({signal, cursor}) {\n      if (cursor) {\n        cursor = cursor.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      let res = await fetch(cursor || `https://swapi.py4e.com/api/people/?search=`, {signal});\n      let json = await res.json();\n\n      return {\n        items: json.results,\n        cursor: json.next\n      };\n    }\n  });\n\n  return (\n    <List\n      selectionMode=\"multiple\"\n      aria-label=\"Async loading ListView example\"\n      items={list.items}>\n      {(item) => (\n        <Item key={item.name}>{item.name}</Item>\n      )}\n    </List>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled SearchWithin Component in React\nDESCRIPTION: This example shows how to create a disabled SearchWithin component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchwithin/docs/SearchWithin.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchWithin label=\"Search\" isDisabled>\n  <SearchField />\n  <Picker defaultSelectedKey=\"all\">\n    <Item key=\"all\">All</Item>\n    <Item key=\"campaigns\">Campaigns</Item>\n    <Item key=\"audiences\">Audiences</Item>\n    <Item key=\"tags\">Tags</Item>\n  </Picker>\n</SearchWithin>\n```\n\n----------------------------------------\n\nTITLE: Using the LabeledValue Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'LabeledValue' component. It renders a non-editable value alongside its corresponding label, often with locale-specific formatting. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_49\n\nLANGUAGE: jsx\nCODE:\n```\n<LabeledValue />\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for React Aria Components\nDESCRIPTION: Code sample showing how to import the tailwindcss-react-aria-components plugin when using Tailwind v4, with a fallback configuration for Tailwind v3.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Exporting Documentation Layout Component - React Spectrum - JavaScript\nDESCRIPTION: This snippet imports the Layout component from @react-spectrum/docs and immediately exports it as the default export of the file. This pattern is used to establish the root layout for the documentation page. There are no external parameters and the Layout is used as the main wrapper for this page, requiring @react-spectrum/docs to be available in the project dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/radio/docs/useRadioGroupState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Dropzone Package in Markdown\nDESCRIPTION: A reference to the @react-spectrum/dropzone package, mentioning that it is part of the React Spectrum library with a link to the main GitHub repository for more details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dropzone/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/dropzone\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: NumberField Context Provider Implementation\nDESCRIPTION: Example of implementing a FieldGroup component using NumberFieldContext for shared properties.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {NumberFieldContext} from 'react-aria-components';\n\ninterface FieldGroupProps {\n  title?: string,\n  children?: React.ReactNode,\n  isReadOnly?: boolean\n}\n\nfunction FieldGroup({title, children, isReadOnly}: FieldGroupProps) {\n  return (\n    <fieldset>\n      <legend>{title}</legend>\n      <NumberFieldContext.Provider value={{isReadOnly}}>\n        {children}\n      </NumberFieldContext.Provider>\n    </fieldset>\n  );\n}\n\n<FieldGroup title=\"Dimensions\" isReadOnly>\n  <MyNumberField label=\"Width\" defaultValue={1024} />\n  <MyNumberField label=\"Height\" defaultValue={768} />\n</FieldGroup>\n```\n\n----------------------------------------\n\nTITLE: Converting ZonedDateTime to ISO8601 String - React Spectrum - TypeScript\nDESCRIPTION: Shows how to use the toString method on a ZonedDateTime object to obtain an ISO 8601 string representation that includes the UTC offset and time zone. Demonstrates instantiating ZonedDateTime with specific parameters. No external dependencies aside from ZonedDateTime itself.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new ZonedDateTime(\n  2022, 2, 3,\n  'America/Los_Angeles', -28800000,\n  12, 24, 45\n);\n\ndate.toString(); // '2022-02-03T12:24:45-08:00[America/Los_Angeles]'\n```\n\n----------------------------------------\n\nTITLE: Listing Released React Spectrum Packages with Versions\nDESCRIPTION: A comprehensive list of all released npm packages from the React Spectrum ecosystem, including their version numbers. The packages span across several categories including React Spectrum components, React Aria, React Stately, React Types, and Spectrum Icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-04-05.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- @adobe/react-spectrum@3.26.0\n- @internationalized/date@3.2.0\n- @internationalized/string-compiler@3.2.0\n- @react-aria/accordion@3.0.0-alpha.17\n- @react-aria/actiongroup@3.5.2\n- @react-aria/aria-modal-polyfill@3.7.1\n- @react-aria/autocomplete@3.0.0-alpha.16\n- @react-aria/breadcrumbs@3.5.1\n- @react-aria/button@3.7.1\n- @react-aria/calendar@3.2.0\n- @react-aria/checkbox@3.9.0\n- @react-aria/color@3.0.0-beta.20\n- @react-aria/combobox@3.6.0\n- @react-aria/datepicker@3.4.0\n- @react-aria/dialog@3.5.1\n- @react-aria/dnd@3.2.0\n- @react-aria/focus@3.12.0\n- @react-aria/grid@3.7.0\n- @react-aria/gridlist@3.3.0\n- @react-aria/i18n@3.7.1\n- @react-aria/interactions@3.15.0\n- @react-aria/label@3.5.1\n- @react-aria/landmark@3.0.0-beta.0\n- @react-aria/link@3.5.0\n- @react-aria/listbox@3.9.0\n- @react-aria/live-announcer@3.3.0\n- @react-aria/menu@3.9.0\n- @react-aria/meter@3.4.1\n- @react-aria/numberfield@3.5.0\n- @react-aria/overlays@3.14.0\n- @react-aria/progress@3.4.1\n- @react-aria/radio@3.6.0\n- @react-aria/searchfield@3.5.1\n- @react-aria/select@3.10.0\n- @react-aria/selection@3.14.0\n- @react-aria/separator@3.3.1\n- @react-aria/slider@3.4.0\n- @react-aria/spinbutton@3.4.0\n- @react-aria/ssr@3.6.0\n- @react-aria/switch@3.5.0\n- @react-aria/table@3.9.0\n- @react-aria/tabs@3.5.0\n- @react-aria/tag@3.0.0-rc.0\n- @react-aria/textfield@3.9.1\n- @react-aria/toast@3.0.0-beta.0\n- @react-aria/toggle@3.6.0\n- @react-aria/tooltip@3.5.0\n- @react-aria/utils@3.16.0\n- @react-aria/virtualizer@3.8.0\n- @react-aria/visually-hidden@3.8.0\n- @react-spectrum/accordion@3.0.0-alpha.19\n- @react-spectrum/actionbar@3.0.0-rc.0\n- @react-spectrum/actiongroup@3.8.2\n- @react-spectrum/autocomplete@3.0.0-alpha.17\n- @react-spectrum/avatar@3.0.0\n- @react-spectrum/badge@3.1.1\n- @react-spectrum/breadcrumbs@3.7.2\n- @react-spectrum/button@3.12.1\n- @react-spectrum/buttongroup@3.6.1\n- @react-spectrum/calendar@3.2.1\n- @react-spectrum/card@3.0.0-alpha.18\n- @react-spectrum/checkbox@3.7.1\n- @react-spectrum/color@3.0.0-beta.21\n- @react-spectrum/combobox@3.8.2\n- @react-spectrum/contextualhelp@3.5.1\n- @react-spectrum/datepicker@3.5.0\n- @react-spectrum/dialog@3.7.1\n- @react-spectrum/divider@3.5.1\n- @react-spectrum/dnd@3.1.1\n- @react-spectrum/form@3.6.1\n- @react-spectrum/icon@3.7.1\n- @react-spectrum/illustratedmessage@3.4.1\n- @react-spectrum/image@3.4.1\n- @react-spectrum/label@3.12.0\n- @react-spectrum/labeledvalue@3.1.1\n- @react-spectrum/layout@3.5.1\n- @react-spectrum/link@3.5.1\n- @react-spectrum/list@3.4.0\n- @react-spectrum/listbox@3.10.0\n- @react-spectrum/menu@3.11.0\n- @react-spectrum/meter@3.4.1\n- @react-spectrum/numberfield@3.6.1\n- @react-spectrum/overlays@5.1.0\n- @react-spectrum/picker@3.10.2\n- @react-spectrum/progress@3.5.0\n- @react-spectrum/provider@3.7.1\n- @react-spectrum/radio@3.5.1\n- @react-spectrum/searchfield@3.7.1\n- @react-spectrum/slider@3.5.1\n- @react-spectrum/statuslight@3.5.1\n- @react-spectrum/switch@3.4.1\n- @react-spectrum/table@3.8.0\n- @react-spectrum/tabs@3.5.2\n- @react-spectrum/tag@3.0.0-rc.0\n- @react-spectrum/text@3.4.1\n- @react-spectrum/textfield@3.10.1\n- @react-spectrum/theme-dark@3.5.1\n- @react-spectrum/theme-default@3.5.1\n- @react-spectrum/theme-express@3.0.0-alpha.3\n- @react-spectrum/theme-light@3.4.1\n- @react-spectrum/toast@3.0.0-beta.0\n- @react-spectrum/tooltip@3.5.0\n- @react-spectrum/utils@3.9.1\n- @react-spectrum/view@3.5.1\n- @react-spectrum/well@3.4.1\n- @react-stately/calendar@3.2.0\n- @react-stately/checkbox@3.4.1\n- @react-stately/collections@3.7.0\n- @react-stately/color@3.3.1\n- @react-stately/combobox@3.5.0\n- @react-stately/data@3.9.1\n- @react-stately/datepicker@3.4.0\n- @react-stately/dnd@3.2.0\n- @react-stately/grid@3.6.0\n- @react-stately/layout@3.12.0\n- @react-stately/list@3.8.0\n- @react-stately/menu@3.5.1\n- @react-stately/numberfield@3.4.1\n- @react-stately/overlays@3.5.1\n- @react-stately/radio@3.8.0\n- @react-stately/searchfield@3.4.1\n- @react-stately/select@3.5.0\n- @react-stately/selection@3.13.0\n- @react-stately/slider@3.3.1\n- @react-stately/table@3.9.0\n- @react-stately/tabs@3.4.0\n- @react-stately/tag@3.0.0-rc.0\n- @react-stately/toast@3.0.0-beta.0\n- @react-stately/toggle@3.5.1\n- @react-stately/tooltip@3.4.0\n- @react-stately/tree@3.6.0\n- @react-stately/virtualizer@3.5.1\n- @react-types/accordion@3.0.0-alpha.13\n- @react-types/actionbar@3.0.0-rc.0\n- @react-types/actiongroup@3.4.1\n- @react-types/autocomplete@3.0.0-alpha.13\n- @react-types/avatar@3.0.0-beta.1\n- @react-types/badge@3.1.1\n- @react-types/breadcrumbs@3.5.1\n- @react-types/button@3.7.2\n- @react-types/buttongroup@3.3.1\n- @react-types/calendar@3.2.0\n- @react-types/card@3.0.0-alpha.14\n- @react-types/checkbox@3.4.3\n- @react-types/color@3.0.0-beta.16\n- @react-types/combobox@3.6.1\n- @react-types/contextualhelp@3.2.1\n- @react-types/datepicker@3.3.0\n- @react-types/dialog@3.5.1\n- @react-types/divider@3.3.1\n- @react-types/form@3.5.0\n- @react-types/grid@3.1.7\n- @react-types/illustratedmessage@3.3.1\n- @react-types/image@3.3.1\n- @react-types/label@3.7.3\n- @react-types/layout@3.3.7\n- @react-types/link@3.4.1\n- @react-types/list@3.2.2\n- @react-types/listbox@3.4.1\n- @react-types/menu@3.9.0\n- @react-types/meter@3.3.1\n- @react-types/numberfield@3.4.1\n- @react-types/overlays@3.7.1\n- @react-types/progress@3.4.0\n- @react-types/provider@3.6.1\n- @react-types/radio@3.4.1\n- @react-types/searchfield@3.4.1\n- @react-types/select@3.8.0\n- @react-types/shared@3.18.0\n- @react-types/slider@3.5.0\n- @react-types/statuslight@3.3.1\n- @react-types/switch@3.3.1\n- @react-types/table@3.6.0\n- @react-types/tabs@3.2.1\n- @react-types/tag@3.0.0-rc.0\n- @react-types/text@3.3.1\n- @react-types/textfield@3.7.1\n- @react-types/tooltip@3.4.0\n- @react-types/view@3.4.1\n- @react-types/well@3.3.1\n- @spectrum-icons/color@3.5.1\n- @spectrum-icons/express@3.0.0-alpha.5\n- @spectrum-icons/illustrations@3.6.1\n- @spectrum-icons/ui@3.5.1\n- @spectrum-icons/workflow@4.2.0\n- react-aria@3.24.0\n- react-aria-components@1.0.0-alpha.1\n- react-stately@3.22.0\n```\n```\n\n----------------------------------------\n\nTITLE: Styling ComboBox Description with CSS\nDESCRIPTION: This CSS snippet shows how to style the description text of a ComboBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ComboBox {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hero Image Display for Documentation Landing - JSX\nDESCRIPTION: This snippet configures the Hero component to display various responsive image assets for the hero section on the documentation homepage. It supplies different image sources for narrow/wide screens, double resolutions, and WebP formats, optimizing presentation across devices. Each imported image is referenced as a prop, and an alt attribute provides accessible text. Assumes all asset imports succeed and the Hero component supports these props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/internationalized/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Hero\n  narrow={heroNarrow}\n  narrow2x={heroNarrow2x}\n  narrowWebp={heroNarrowWebp}\n  narrow2xWebp={heroNarrow2xWebp}\n  wide={heroWide}\n  wide2x={heroWide2x}\n  wideWebp={heroWideWebp}\n  wide2xWebp={heroWide2xWebp}\n  alt=\"Internationalized hero image\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Footer Component Example in React Spectrum (TypeScript/TSX)\nDESCRIPTION: This snippet illustrates the basic usage of the Footer component within a React component tree. It renders the Footer with sample content, demonstrating its typical placement at the bottom of a Spectrum container. Inputs include valid React children, and the output is a properly structured footer element conforming to Spectrum guidelines. No custom styling or props are applied in this minimal example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/view/docs/Footer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Footer>&copy; All rights reserved.</Footer>\n```\n\n----------------------------------------\n\nTITLE: Defining React Spectrum Documentation Metadata\nDESCRIPTION: Sets the category and description for the React Spectrum documentation page using YAML front matter.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n---\ncategory: Libraries\ndescription: A React implementation of Spectrum, Adobe's design system. Spectrum provides adaptive, accessible, and cohesive experiences for all Adobe applications.\n---\n```\n\n----------------------------------------\n\nTITLE: Importing useGridList and Layout Components in React\nDESCRIPTION: This snippet shows how to import the Layout component from @react-spectrum/docs and set it as the default export. It also imports various documentation components and hooks needed for the useGridList documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/gridlist';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';\nimport selectionDocs from 'docs:@react-stately/selection';\nimport statelyDocs from 'docs:@react-stately/list';\nimport focusDocs from 'docs:@react-aria/focus';\nimport checkboxDocs from 'docs:@react-aria/checkbox';\nimport utilsDocs from 'docs:@react-aria/utils';\nimport {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport {Keyboard} from '@react-spectrum/text';\nimport packageData from '@react-aria/gridlist/package.json';\nimport Anatomy from './anatomy.svg';\n```\n\n----------------------------------------\n\nTITLE: Updating ActionButton Style Props in React Spectrum\nDESCRIPTION: This snippet demonstrates how to update the import statement and style props for an ActionButton component when migrating from React Spectrum v3 to S2.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/codemods/src/s1-to-s2/UPGRADE.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import {ActionButton} from '@adobe/react-spectrum';\n+ import {ActionButton} from '@react-spectrum/s2';\n+ import {style} from '@react-spectrum/s2/style' with {type: 'macro'};\n\n- <ActionButton marginStart=\"size-100\">\n+ <ActionButton styles={style({marginStart: 8})}>\n  Edit\n</ActionButton>\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum UI Component - JSX\nDESCRIPTION: This snippet demonstrates how to import a specific component from the React Spectrum library. The placeholder 'COMPONENT_NAME' is intended to be replaced by the actual name of the desired UI component. This is a standard import statement used in JavaScript/JSX environments and is required for incorporating React Spectrum components into your application files.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/src/template.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {Component} from '@react-spectrum/COMPONENT_NAME';\n```\n\n----------------------------------------\n\nTITLE: ProgressCircle Size Variations in React Spectrum\nDESCRIPTION: Demonstrates the different size options available for the ProgressCircle component using the size prop with values S, default (M), and L.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressCircle.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressCircle aria-label=\"Loading…\" marginEnd=\"size-300\" size=\"S\" value={15} />\n<ProgressCircle aria-label=\"Loading…\" marginEnd=\"size-300\" value={30} />\n<ProgressCircle aria-label=\"Loading…\" size=\"L\" value={60} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calendar Identifiers from Locales in TypeScript\nDESCRIPTION: Illustrates how to obtain calendar identifiers from various locale strings using Intl.DateTimeFormat and create corresponding Calendar instances.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Calendar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Get the calendar identifier for the current user.\nlet calendarIdentifier = new Intl.DateTimeFormat().resolvedOptions().calendar; // e.g. 'gregory'\ncreateCalendar(calendarIdentifier); // new GregorianCalendar()\n\n// Language and region provided, calendar inferred.\nlet calendarIdentifier = new Intl.DateTimeFormat('th-TH').resolvedOptions().calendar; // 'buddhist'\ncreateCalendar(calendarIdentifier); // new BuddhistCalendar()\n\n// Calendar system set explicitly.\nlet calendarIdentifier = new Intl.DateTimeFormat('hi-IN-u-ca-indian').resolvedOptions().calendar; // 'indian'\ncreateCalendar(calendarIdentifier); // new IndianCalendar()\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Column Resizer Component\nDESCRIPTION: Styles for the resizer component, including normal, focus, and active resizing states. These styles provide visual feedback to users during the column resizing process.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n.aria-table-resizer {\n  width: 15px;\n  background-color: grey;\n  cursor: col-resize;\n  height: 30px;\n  touch-action: none;\n  flex: 0 0 auto;\n  box-sizing: border-box;\n  border: 5px;\n  border-style: none solid;\n  border-color: transparent;\n  background-clip: content-box;\n}\n\n.aria-table-resizer.focus {\n  background-color: orange;\n}\n\n.aria-table-resizer.resizing {\n  border-color: orange;\n  background-color: transparent;\n}\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Reference link to the main react-spectrum repository containing the illustrated message package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/illustratedmessage\n```\n\n----------------------------------------\n\nTITLE: Updating Items in List - useListData Hook - TypeScript\nDESCRIPTION: This snippet demonstrates updating the data of an existing item specified by key using the update method. Accepts the item's key and the new data object, producing an updated list with the new item properties replacing the previous ones, and triggers a component update as needed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useListData.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nlist.update('Snake', {name: 'Rattle Snake'});\n\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Picker Selection\nDESCRIPTION: Example demonstrating both controlled and uncontrolled selection patterns in Picker components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {name: 'Koala'},\n    {name: 'Kangaroo'},\n    {name: 'Platypus'},\n    {name: 'Bald Eagle'},\n    {name: 'Bison'},\n    {name: 'Skunk'}\n  ];\n  let [animal, setAnimal] = React.useState<Key>(\"Bison\");\n\n  return (\n    <Flex gap=\"size-150\" wrap>\n      <Picker\n        label=\"Pick an animal (uncontrolled)\"\n        items={options}\n        defaultSelectedKey=\"Bison\">\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </Picker>\n\n      <Picker\n        label=\"Pick an animal (controlled)\"\n        items={options}\n        selectedKey={animal}\n        onSelectionChange={selected => setAnimal(selected)}>\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </Picker>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Drop Operation Types for Targets\nDESCRIPTION: This example shows how to specify which drop operations a target accepts using the getDropOperation function. In this case, the target only accepts copy operations for PNG images.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_50\n\nLANGUAGE: tsx\nCODE:\n```\n///- begin collapse -///\ninterface ImageItem {\n  id: number,\n  url: string,\n  name: string\n}\n///- end collapse -///\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    /*- begin highlight -*/\n    getDropOperation: () => 'copy',\n    /*- end highlight -*/\n    acceptedDragTypes: ['image/png'],\n    async onRootDrop(e) {\n      ///- begin collapse -///\n      let items = await Promise.all(\n        e.items.filter(isFileDropItem).map(async item => ({\n          id: Math.random(),\n          url: URL.createObjectURL(await item.getFile()),\n          name: item.name\n        }))\n      );\n      setItems(items);\n      ///- end collapse -///\n      // ...\n    }\n  });\n\n  ///- begin collapse -///\n  return (\n    <ListBox aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop items here\"}>\n      {item => (\n        <ListBoxItem textValue={item.name}>\n          <div className=\"image-item\">\n            <img src={item.url} />\n            <span>{item.name}</span>\n          </div>\n        </ListBoxItem>\n      )}\n    </ListBox>\n  );\n  ///- end collapse -///\n  // See \"Files\" example above...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Menu Components and Icons\nDESCRIPTION: Basic imports required for using the Menu component and related icons from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/Menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionButton} from '@react-spectrum/button'\nimport Copy from '@spectrum-icons/workflow/Copy';\nimport Cut from '@spectrum-icons/workflow/Cut';\nimport {Item, Menu, MenuTrigger, Section} from '@react-spectrum/menu';\nimport Paste from '@spectrum-icons/workflow/Paste';\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using various JavaScript package managers. This allows developers to run the application locally for development purposes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/next-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Defining Icon Component Interfaces in TypeScript\nDESCRIPTION: Defines two TypeScript interfaces for icon components. The Icon interface includes size options and aria-label for accessibility, while UIIcon is a simpler version without size options. Both extend DOMProps and StyleProps base interfaces and require ReactElement children.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Icon.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Icon extends DOMProps, StyleProps {\n  'aria-label'?: string,\n  children: ReactElement,\n  size?: 'XXS' | 'XS' | 'S' | 'M' | 'L' | 'XL' | 'XXL'\n}\n\ninterface UIIcon extends DOMProps, StyleProps {\n  'aria-label'?: string,\n  children: ReactElement\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Row Appearance for Links with Cursor Styling - CSS\nDESCRIPTION: This CSS snippet modifies the pointer style for table rows that have an href attribute, enhancing the user experience by signaling that such rows are interactive and link out. Intended for use with the React Aria Row component, this applies a pointer cursor to rows acting as links, provided they have the data-href attribute. Add this style to your application's stylesheet for consistent link affordance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Row[data-href] {\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: useDraggableCollectionState Hook Interface Definition\nDESCRIPTION: TypeScript interfaces for managing draggable collection state, integrating with selection systems for handling multiple item drag operations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2020-v3-dnd.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DraggableCollectionOptions {\n  collection: Collection<Node<unknown>>,\n  selectionManager: MultipleSelectionManager\n  onDragStart?: (e: DraggableCollectionStartEvent) => void,\n  onDragMove?: (e: DraggableCollectionMoveEvent) => void,\n  onDragEnd?: (e: DraggableCollectionEndEvent) => void,\n  getItems: (keys: Set<Key>) => DragItem[],\n  renderPreview?: (keys: Set<Key>, draggedKey: Key) => JSX.Element,\n  getAllowedDropOperations?: () => DropOperation[]\n}\n\ninterface DraggableCollectionState {\n  collection: Collection<Node<unknown>>,\n  selectionManager: MultipleSelectionManager,\n  isDragging(key: Key): boolean,\n  getItems(key: Key): DragItem[],\n  renderPreview(key: Key): JSX.Element,\n  startDrag(key: Key, event: DragStartEvent): void,\n  moveDrag(event: DragMoveEvent): void,\n  endDrag(event: DragEndEvent): void\n}\n\ndeclare function useDraggableCollectionState(props: DraggableCollectionOptions): DraggableCollectionState;\n```\n\n----------------------------------------\n\nTITLE: Documentation Imports\nDESCRIPTION: Imports required documentation components and package data for the useFilter documentation\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/useFilter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-aria/i18n';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/i18n/package.json';\n```\n\n----------------------------------------\n\nTITLE: Styling Invalid DateRangePicker States\nDESCRIPTION: CSS styling for invalid state indication in DateRangePicker including error message formatting\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateRangePicker {\n  &[data-invalid] {\n    [slot=end]:after {\n      content: '🚫' / '';\n      content: '🚫';\n      alt: ' ';\n      flex: 1;\n      text-align: end;\n      margin-left: 1.5rem;\n      margin-right: -1.5rem;\n    }\n  }\n\n  .react-aria-FieldError {\n    font-size: 12px;\n    color: var(--invalid-color);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Switch Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'Switch' component. It renders a switch control, allowing a user to toggle a setting on or off. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\n<Switch />\n```\n\n----------------------------------------\n\nTITLE: Referencing @react-aria/meter Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-aria/meter package using Markdown syntax. It includes a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/meter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/meter\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Data and Components in JavaScript\nDESCRIPTION: Imports documentation data (`docs`) from `docs:@react-stately/overlays`, specific documentation UI components (`ClassAPI`, `HeaderInfo`, `FunctionAPI`, `PageDescription`) from `@react-spectrum/docs`, and package metadata (`packageData`) from `@react-stately/overlays/package.json`. These imports are used to dynamically render the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/overlays/docs/useOverlayTriggerState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/overlays';\nimport {ClassAPI, HeaderInfo, FunctionAPI, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/overlays/package.json';\n```\n\n----------------------------------------\n\nTITLE: Configuring SearchAutocomplete Menu Trigger Behavior in React (tsx)\nDESCRIPTION: This snippet demonstrates how to configure the menu trigger behavior of the `SearchAutocomplete` component. By setting the `menuTrigger` prop to `focus`, the dropdown menu will open automatically when the input field gains focus, instead of the default behavior ('input') where it opens on text entry.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Search Animals\" menuTrigger=\"focus\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: DateField with Local Time Zone Conversion\nDESCRIPTION: Demonstrates parsing absolute time into local time zone using parseAbsoluteToLocal\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DateField\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Tabs Package in Markdown\nDESCRIPTION: A simple reference to the @react-spectrum/tabs package name, formatted as a Markdown heading. This indicates the package name that is being documented in this file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/tabs\n```\n\n----------------------------------------\n\nTITLE: Overriding First Day of Week with getDayOfWeek in TypeScript\nDESCRIPTION: Demonstrates using the optional `firstDayOfWeek` argument with the `getDayOfWeek` function from `@internationalized/date`. Providing 'mon' overrides the 'en-US' locale's default (Sunday as day 0) and calculates the day number based on Monday being the first day (0), resulting in Sunday being day 6.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\ngetDayOfWeek(date, 'en-US', 'mon'); // 6\n```\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom CSS ClassName to a React Aria Checkbox (JSX)\nDESCRIPTION: This JSX snippet shows how to apply a custom CSS class (`my-checkbox`) to a React Aria `Checkbox` component using the `className` prop, overriding the default `react-aria-Checkbox` class.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Checkbox className=\"my-checkbox\">\n  {/* ... */}\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Displaying Package and Component Information using HeaderInfo in MDX\nDESCRIPTION: Utilizes the `HeaderInfo` React component to display metadata at the top of the page. It passes the imported `packageData` (containing details about `@react-stately/datepicker`) and an array with the component/hook name (`useDateRangePickerState`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useDateRangePickerState']} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus-Triggered ComboBox in React Spectrum\nDESCRIPTION: Example showing ComboBox implementation with focus trigger mode, including icons and descriptive text for each menu item\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox label=\"Select action\" menuTrigger=\"focus\">\n  <Item textValue=\"Add to queue\">\n    <Add />\n    <Text>Add to queue</Text>\n    <Text slot=\"description\">Add to current watch queue.</Text>\n  </Item>\n  <Item textValue=\"Add review\">\n    <Draw />\n    <Text>Add review</Text>\n    <Text slot=\"description\">Post a review for the episode.</Text>\n  </Item>\n    <Item textValue=\"Subscribe to series\">\n    <Bell />\n    <Text>Subscribe to series</Text>\n    <Text slot=\"description\">Add series to your subscription list and be notified when a new episode airs.</Text>\n  </Item>\n  <Item textValue=\"Report\">\n    <Alert />\n    <Text>Report</Text>\n    <Text slot=\"description\">Report an issue/violation.</Text>\n  </Item>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation and API Utilities - React Spectrum Docs - JavaScript\nDESCRIPTION: This snippet imports documentation content from @react-stately/radio, as well as React components and utilities for rendering API documentation, type links, and page descriptions. It also imports the package's package.json to access metadata. Dependencies required include @react-spectrum/docs and @react-stately/radio.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/radio/docs/useRadioGroupState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/radio';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/radio/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from React Spectrum Docs\nDESCRIPTION: This snippet imports the Layout component from @react-spectrum/docs and exports it as the default export. It's likely used for structuring the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Layout Component (JavaScript)\nDESCRIPTION: Exports the imported Layout component as the default export for the module. This enables other tools or systems to render the page using the specified layout structure. There are no parameters, inputs, or outputs other than module export. This code assumes the context of a module-based JavaScript/Next.js or MDX build system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/list/docs/useListState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout for React Spectrum Release Page - JavaScript\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the '@react-spectrum/docs' package and exports BlogPostLayout as the default export. It enables the documentation system (likely Next.js or a similar static site generator) to utilize BlogPostLayout as the rendering container for this release note blog post. The import requires '@react-spectrum/docs' to be available, and the export provides the layout context for rendering the Markdown content. The input is the file itself; the output is a default-exported React component for the page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-11-15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring Esbuild Macros Plugin\nDESCRIPTION: Configuration setup for adding macros plugin to Esbuild, including the unplugin-parcel-macros integration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-esbuild-starter-app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport macrosPlugin from 'unplugin-parcel-macros';\n...\n  plugins: [\n    macrosPlugin.esbuild(),\n    esbuildPluginTsc({\n      force: true\n    }),\n  ]\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum CSS for Theming\nDESCRIPTION: Required CSS import statement for React Spectrum theming. This import should be placed at the root of the application to support light and dark themes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-vite-project/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@react-spectrum/s2/page.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Assets in JavaScript/JSX\nDESCRIPTION: This snippet imports documentation data (`docs`), specific documentation rendering components (`ClassAPI`, `HeaderInfo`, `FunctionAPI`, etc.), and package metadata (`packageData`) required to build the documentation page for `useDateFieldState`. Dependencies include `@react-spectrum/docs` and `@react-stately/datepicker`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateFieldState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/datepicker';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/datepicker/package.json';\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration for React Aria Components in v3\nDESCRIPTION: JavaScript configuration for Tailwind v3 showing how to add the required plugins to tailwind.config.js.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/status-select.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components'),\n    require('tailwindcss-animate')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Documentation Page - Markdown\nDESCRIPTION: This snippet uses Markdown frontmatter to classify the page as part of the Drag and Drop category and specifies relevant keywords. This helps organize the documentation and improves searchability or categorization within the Spectrum website. The snippet includes no runtime logic and is parsed at build/render time by the documentation generator.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/dnd/docs/useDroppableCollectionState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ncategory: Drag and Drop\nkeywords: [lists, state, dragging, dropping, drag, drop]\n---\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Radio Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @react-aria/radio package using Markdown syntax. It also includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/radio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/radio\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Moving Items within Tree Data - useTreeData API (TypeScript)\nDESCRIPTION: This code demonstrates item repositioning within the tree using the move method, which transfers a node identified by key to a specified parent and index position. Inputs are the item key, the new parent key (or null for root), and the destination index; output is a restructured immutable tree. All changes trigger updates in React state and subsequent re-rendering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useTreeData.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n// Move an item within the same parent\ntree.move('Sam', 'People', 0);\n\n// Move an item to a different parent\ntree.move('Sam', 'Animals', 1);\n\n// Move an item to the root\ntree.move('Sam', null, 1);\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with Custom Separator Icons\nDESCRIPTION: Implementation of breadcrumbs with custom SVG separator icons instead of CSS-based separators. Includes accessibility attributes to hide separators from screen readers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport ChevronIcon from '@spectrum-icons/workflow/ChevronDoubleRight';\n\n<Breadcrumbs>\n  <Breadcrumb className=\"my-item\">\n    <Link href=\"/\">Home</Link>\n    <ChevronIcon size=\"S\" />\n  </Breadcrumb>\n  <Breadcrumb><Link>React Aria</Link></Breadcrumb>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Custom Granularity and Time Zone Placeholder in React Spectrum\nDESCRIPTION: Example demonstrating how to use the granularity and placeholderValue props to control the input format and default time zone.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {now} from '@internationalized/date';\n\n<Flex gap=\"size-150\" wrap>\n  <DatePicker\n    label=\"Event date\"\n    granularity=\"second\" />\n  <DatePicker\n    label=\"Event date\"\n    placeholderValue={now('America/New_York')}\n    granularity=\"second\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling for Reusable Menu Components\nDESCRIPTION: CSS styling for custom menu item components, including focus states, hover effects, and submenu indicators. Includes styling for accessibility features like forced-colors mode.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.my-item {\n  margin: 2px;\n  padding: 0.286rem 0.571rem;\n  border-radius: 6px;\n  outline: none;\n  cursor: default;\n  color: var(--text-color);\n  font-size: 1.072rem;\n  position: relative;\n\n  &.focused {\n    background: #e70073;\n    color: white;\n  }\n  &.open:not(.focused) {\n    background: rgba(192, 192, 192, 0.3);\n    color: var(--text-color);\n  }\n  .chevron {\n    width: 20;\n    height: 20;\n    fill: none;\n    stroke: currentColor;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    stroke-width: 2;\n    position: absolute;\n    right: 0;\n    top: 0;\n    height: 100%;\n  }\n}\n\n@media (forced-colors: active) {\n  .my-item.focused {\n    forced-color-adjust: none;\n    background: Highlight;\n    color: HighlightText;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZonedDateTime with Japanese Calendar and Era in React\nDESCRIPTION: Creates a ZonedDateTime in the Japanese calendar system with the 'heisei' era, equivalent to April 30th, 2019 at 9:15 AM in the Gregorian calendar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {JapaneseCalendar} from '@internationalized/date';\n\nlet date = new ZonedDateTime(\n  new JapaneseCalendar(), 'heisei', 31, 4, 30,\n  'America/Los_Angeles', -28800000,\n  9, 15\n);\n```\n\n----------------------------------------\n\nTITLE: Defining the Divider Component Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the props for the `Divider` component. It specifies optional `size` property with possible values 'S', 'M', or 'L' (defaulting to 'L'), and an optional `orientation` property with values 'horizontal' or 'vertical' (defaulting to 'horizontal'). This interface ensures type safety for the component's usage within a React Spectrum application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Divider.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Divider {\n  size?: 'S' | 'M' | 'L', // Default L\n  orientation?: 'horizontal' | 'vertical' // Default horizontal\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Modules in a React Button Component - React Spectrum - JSX\nDESCRIPTION: This snippet demonstrates how to import hashed CSS class names from a precompiled CSS Module and apply them to a React component's className property. The code imports styles from a Spectrum CSS build output and assigns a CSS class to a native button element using the mapping, ensuring unique, non-colliding styles per build. Required dependencies include React, the spectrum-css package with precompiled CSS modules, and the build system must be set up (or the package precompiled) for CSS Module usage. The Button component accepts props, applies the Spectrum base class to its button, and renders any supplied children as button content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-theming.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from '@adobe/spectrum-css/dist/components/button/vars.css';\\n\\nfunction Button(props) {\\n  // ...\\n  return (\\n    <button className={styles['spectrum-Button']}>\\n      {props.children}\\n    </button>\\n  );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Stately Table Documentation Data in JavaScript/JSX\nDESCRIPTION: Imports documentation data specifically for '@react-stately/table' using a special 'docs:' prefix, likely resolved by a build tool or documentation framework. This data, assigned to the `docs` variable, contains extracted information about the package's exports, types, and links.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport docs from 'docs:@react-stately/table';\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Component with Semantic Elements in JSX\nDESCRIPTION: Shows the usage of semantic elements like Header, Description, and Footer within a Dialog component, replacing specialized components like DialogHeader, DialogDescription, and DialogFooter.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-semantic-elements.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Dialog>\n  <Header />\n  <Description />\n  <Footer />\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Referencing the StatusLight package in React Spectrum\nDESCRIPTION: Shows the package name for the StatusLight component in the React Spectrum library, which can be imported in a React application for use.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/statuslight/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@react-spectrum/statuslight\n```\n\n----------------------------------------\n\nTITLE: Importing ActionGroup and Related Components (JSX)\nDESCRIPTION: Imports necessary components for using ActionGroup, including the component itself, `Item` for defining actions, various Spectrum icons for visual representation, layout components (`Flex`, `View`), and text components (`Text`). This setup is typical for creating visually rich action groups.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionGroup, Item} from '@react-spectrum/actiongroup';\nimport Brush from '@spectrum-icons/workflow/Brush';\nimport RegionSelect from '@spectrum-icons/workflow/RegionSelect';\nimport Select from '@spectrum-icons/workflow/Select';\nimport {Flex} from '@react-spectrum/layout';\nimport {View} from '@react-spectrum/view';\nimport ViewList from '@spectrum-icons/workflow/ViewList';\nimport ViewGrid from '@spectrum-icons/workflow/ViewGrid';\nimport ViewCard from '@spectrum-icons/workflow/ViewCard';\nimport Move from '@spectrum-icons/workflow/Move';\nimport Duplicate from '@spectrum-icons/workflow/Duplicate';\nimport TagBold from '@spectrum-icons/workflow/TagBold';\nimport TagItalic from '@spectrum-icons/workflow/TagItalic';\nimport TagUnderline from '@spectrum-icons/workflow/TagUnderline';\nimport TextStrikethrough from '@spectrum-icons/workflow/TextStrikethrough';\nimport TextAlignCenter from '@spectrum-icons/workflow/TextAlignCenter';\nimport TextAlignJustify from '@spectrum-icons/workflow/TextAlignJustify';\nimport TextAlignLeft from '@spectrum-icons/workflow/TextAlignLeft';\nimport TextAlignRight from '@spectrum-icons/workflow/TextAlignRight';\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Metadata for Drag and Drop Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the drag and drop documentation page, including category, keywords for search, and display order in the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/dnd.mdx#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n---\ncategory: Concepts\nkeywords: [drag, drop, dnd, drag and drop, aria, accessibility]\norder: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Documentation Page (JavaScript/JSX)\nDESCRIPTION: Imports necessary components and data for rendering the documentation page. This includes the main `Layout` component, documentation data (`docs`) fetched from `@react-stately/numberfield`, utility components from `@react-spectrum/docs` for displaying API information, and package data (`packageData`) from the `@react-stately/numberfield` package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/numberfield/docs/useNumberFieldState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-stately/numberfield';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/numberfield/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing ColorSwatchPicker and ColorSwatch in JSX\nDESCRIPTION: Imports the `ColorSwatchPicker` and `ColorSwatch` components from the `@react-spectrum/color` package for use within a React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ColorSwatchPicker, ColorSwatch} from '@react-spectrum/color';\n```\n\n----------------------------------------\n\nTITLE: Customizing Value Labels in ProgressBar for React Spectrum\nDESCRIPTION: Shows different ways to customize the value label in a ProgressBar: hiding it, using a custom string, or formatting with specific numeric options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <ProgressBar label=\"Loading…\" showValueLabel={false} value={30} />\n  <ProgressBar label=\"Loading…\" valueLabel=\"30 of 60 dogs\" value={30} />\n  <ProgressBar label=\"Loading…\" formatOptions={{style: 'percent', minimumFractionDigits: 2}} value={30.123} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout Component with React Spectrum - JavaScript\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and sets BlogPostLayout as the default export for the file. It establishes the layout for the documentation page, allowing the React Spectrum documentation infrastructure to render the blog post using this layout. Dependencies include '@react-spectrum/docs', and the expected output is a layout component instance compatible with other React documents. No parameters are required, and the snippet is intended for use within an MDX or documentation-centric React application. It assumes that @react-spectrum/docs is installed and available in the project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-11-20.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v3 for React Aria Components\nDESCRIPTION: Shows how to set up Tailwind CSS v3 to work with React Aria Components by adding the plugin to the Tailwind configuration file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/opacity-slider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Injecting Localized Strings Server-Side in Remix Using getLocalizationScript (TypeScript/TSX)\nDESCRIPTION: Provides an example of customizing 'app/entry.server.tsx' in Remix to inject localized strings using the 'getLocalizationScript' helper, instead of the typical 'LocalizedStringProvider' component, due to Remix's SSR pipeline. Locale is determined (e.g., via headers) and passed to 'getLocalizationScript', which is used for the 'bootstrapScriptContent' in the render stream, ensuring language data availability in initial HTML for clients.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// app/entry.server.tsx\nimport type {EntryContext} from '@remix-run/node';\nimport {PassThrough} from 'node:stream';\nimport {createReadableStreamFromReadable} from '@remix-run/node';\nimport {RemixServer} from '@remix-run/react';\nimport {renderToPipeableStream} from 'react-dom/server';\n /*- begin highlight -*/\nimport {getLocalizationScript} from '@adobe/react-spectrum/i18n';\n/*- end highlight -*/\n\nconst ABORT_DELAY = 5000;\n\nexport default async function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  // Get the requested language (e.g. from headers, URL param, database, etc.)\n  /*- begin highlight -*/\n  let lang = await getRequestedLanguageSomehow(request);\n  /*- end highlight -*/\n\n  return new Promise((resolve, reject) => {\n    let {pipe, abort} = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        /*- begin highlight -*/\n        bootstrapScriptContent: getLocalizationScript(lang),\n        /*- end highlight -*/\n        onShellReady() {\n          let body = new PassThrough();\n          let stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set('Content-Type', 'text/html');\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Making a RadioGroup Read-Only in React (TSX)\nDESCRIPTION: Illustrates how to make the selection within a RadioGroup immutable while keeping it focusable by using the `isReadOnly` prop. The `defaultValue` prop sets the initial, unchangeable value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyRadioGroup label=\"Favorite avatar\" defaultValue=\"wizard\" isReadOnly>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</MyRadioGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Button States with CSS\nDESCRIPTION: CSS for styling the disabled state of a Button component, modifying text and border colors.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Button {\n  &[data-disabled]{\n    border-color: var(--border-color-disabled);\n    color: var(--text-color-disabled);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Toolbar Styling Using Custom ClassName (JSX)\nDESCRIPTION: Demonstrates assigning a custom className to the Toolbar component to override or supplement default styling. This approach allows for isolation of custom styles without interfering with other components. This usage requires React and react-aria-components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toolbar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Toolbar className=\\\"my-toolbar\\\">\\n  {/* ... */}\\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting React Spectrum Doc Components in JavaScript\nDESCRIPTION: This JavaScript snippet imports the `BlogLayout` and `PostListing` components from the `@react-spectrum/docs` package. It then exports the `BlogLayout` component as the default export for this module, making it the primary layout component for the page rendered by this file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogLayout, PostListing} from '@react-spectrum/docs';\nexport default BlogLayout;\n```\n\n----------------------------------------\n\nTITLE: Listing Released Packages for React Spectrum Project in Markdown\nDESCRIPTION: This code block provides a detailed list of released packages for the React Spectrum project. It includes version numbers for React Aria, React Stately, React Spectrum components, icon packages, and development tools. The list is formatted as a markdown code block for easy reading and documentation purposes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2025-03-05.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\n - @adobe/react-spectrum@3.40.0\n - @react-aria/actiongroup@3.7.13\n - @react-aria/autocomplete@3.0.0-beta.0\n - @react-aria/breadcrumbs@3.5.21\n - @react-aria/button@3.12.0\n - @react-aria/calendar@3.7.1\n - @react-aria/checkbox@3.15.2\n - @react-aria/collections@3.0.0-beta.0\n - @react-aria/color@3.0.4\n - @react-aria/combobox@3.12.0\n - @react-aria/datepicker@3.14.0\n - @react-aria/dialog@3.5.22\n - @react-aria/disclosure@3.0.2\n - @react-aria/dnd@3.9.0\n - @react-aria/focus@3.20.0\n - @react-aria/form@3.0.13\n - @react-aria/grid@3.12.0\n - @react-aria/gridlist@3.11.0\n - @react-aria/i18n@3.12.6\n - @react-aria/interactions@3.24.0\n - @react-aria/label@3.7.15\n - @react-aria/landmark@3.0.0\n - @react-aria/link@3.7.9\n - @react-aria/listbox@3.14.1\n - @react-aria/menu@3.18.0\n - @react-aria/meter@3.4.20\n - @react-aria/numberfield@3.11.11\n - @react-aria/overlays@3.26.0\n - @react-aria/progress@3.4.20\n - @react-aria/radio@3.11.0\n - @react-aria/searchfield@3.8.1\n - @react-aria/select@3.15.2\n - @react-aria/selection@3.23.0\n - @react-aria/separator@3.4.6\n - @react-aria/slider@3.7.16\n - @react-aria/spinbutton@3.6.12\n - @react-aria/steplist@3.0.0-alpha.14\n - @react-aria/switch@3.7.0\n - @react-aria/table@3.17.0\n - @react-aria/tabs@3.10.0\n - @react-aria/tag@3.5.0\n - @react-aria/test-utils@1.0.0-alpha.5\n - @react-aria/textfield@3.17.0\n - @react-aria/toast@3.0.0\n - @react-aria/toggle@3.11.0\n - @react-aria/toolbar@3.0.0-beta.13\n - @react-aria/tooltip@3.8.0\n - @react-aria/tree@3.0.0\n - @react-aria/utils@3.28.0\n - @react-aria/virtualizer@4.1.2\n - @react-aria/visually-hidden@3.8.20\n - @react-spectrum/accordion@3.0.3\n - @react-spectrum/actionbar@3.6.4\n - @react-spectrum/actiongroup@3.10.12\n - @react-spectrum/autocomplete@3.0.0-alpha.40\n - @react-spectrum/avatar@3.0.19\n - @react-spectrum/badge@3.1.20\n - @react-spectrum/breadcrumbs@3.9.14\n - @react-spectrum/button@3.16.11\n - @react-spectrum/buttongroup@3.6.19\n - @react-spectrum/calendar@3.6.1\n - @react-spectrum/card@3.0.0-alpha.40\n - @react-spectrum/checkbox@3.9.13\n - @react-spectrum/color@3.0.4\n - @react-spectrum/combobox@3.15.0\n - @react-spectrum/contextualhelp@3.6.18\n - @react-spectrum/datepicker@3.13.0\n - @react-spectrum/dialog@3.8.18\n - @react-spectrum/divider@3.5.20\n - @react-spectrum/dnd@3.5.2\n - @react-spectrum/dropzone@3.0.8\n - @react-spectrum/filetrigger@3.0.8\n - @react-spectrum/form@3.7.12\n - @react-spectrum/icon@3.8.2\n - @react-spectrum/illustratedmessage@3.5.7\n - @react-spectrum/image@3.5.8\n - @react-spectrum/inlinealert@3.2.12\n - @react-spectrum/label@3.16.12\n - @react-spectrum/labeledvalue@3.2.0\n - @react-spectrum/layout@3.6.12\n - @react-spectrum/link@3.6.14\n - @react-spectrum/list@3.9.2\n - @react-spectrum/listbox@3.14.2\n - @react-spectrum/menu@3.21.2\n - @react-spectrum/meter@3.5.7\n - @react-spectrum/numberfield@3.9.10\n - @react-spectrum/overlays@5.7.2\n - @react-spectrum/picker@3.15.6\n - @react-spectrum/progress@3.7.13\n - @react-spectrum/provider@3.10.2\n - @react-spectrum/radio@3.7.13\n - @react-spectrum/s2@0.7.0\n - @react-spectrum/searchfield@3.8.13\n - @react-spectrum/slider@3.7.2\n - @react-spectrum/statuslight@3.5.19\n - @react-spectrum/steplist@3.0.0-alpha.12\n - @react-spectrum/style-macro-s1@3.0.0-alpha.3\n - @react-spectrum/switch@3.5.12\n - @react-spectrum/table@3.16.0\n - @react-spectrum/tabs@3.8.17\n - @react-spectrum/tag@3.2.13\n - @react-spectrum/test-utils@1.0.0-alpha.5\n - @react-spectrum/text@3.5.12\n - @react-spectrum/textfield@3.13.0\n - @react-spectrum/theme-dark@3.5.16\n - @react-spectrum/theme-default@3.5.16\n - @react-spectrum/theme-express@3.0.0-alpha.18\n - @react-spectrum/theme-light@3.4.16\n - @react-spectrum/toast@3.0.0\n - @react-spectrum/tooltip@3.7.2\n - @react-spectrum/tree@3.0.0\n - @react-spectrum/utils@3.12.2\n - @react-spectrum/view@3.6.16\n - @react-spectrum/well@3.4.20\n - @react-stately/autocomplete@3.0.0-beta.0\n - @react-stately/calendar@3.7.1\n - @react-stately/checkbox@3.6.12\n - @react-stately/collections@3.12.2\n - @react-stately/color@3.8.3\n - @react-stately/combobox@3.10.3\n - @react-stately/data@3.12.2\n - @react-stately/datepicker@3.13.0\n - @react-stately/disclosure@3.0.2\n - @react-stately/dnd@3.5.2\n - @react-stately/flags@3.1.0\n - @react-stately/form@3.1.2\n - @react-stately/grid@3.11.0\n - @react-stately/layout@4.2.0\n - @react-stately/list@3.12.0\n - @react-stately/menu@3.9.2\n - @react-stately/numberfield@3.9.10\n - @react-stately/overlays@3.6.14\n - @react-stately/radio@3.10.11\n - @react-stately/searchfield@3.5.10\n - @react-stately/select@3.6.11\n - @react-stately/selection@3.20.0\n - @react-stately/slider@3.6.2\n - @react-stately/steplist@3.0.0-alpha.12\n - @react-stately/table@3.14.0\n - @react-stately/tabs@3.8.0\n - @react-stately/toast@3.0.0\n - @react-stately/toggle@3.8.2\n - @react-stately/tooltip@3.5.2\n - @react-stately/tree@3.8.8\n - @react-stately/virtualizer@4.3.0\n - @react-types/actionbar@3.1.13\n - @react-types/actiongroup@3.4.15\n - @react-types/autocomplete@3.0.0-alpha.29\n - @react-types/avatar@3.0.13\n - @react-types/badge@3.1.15\n - @react-types/breadcrumbs@3.7.11\n - @react-types/button@3.11.0\n - @react-types/buttongroup@3.3.15\n - @react-types/calendar@3.6.1\n - @react-types/card@3.0.0-alpha.33\n - @react-types/checkbox@3.9.2\n - @react-types/color@3.0.3\n - @react-types/combobox@3.13.3\n - @react-types/contextualhelp@3.2.16\n - @react-types/datepicker@3.11.0\n - @react-types/dialog@3.5.16\n - @react-types/divider@3.3.15\n - @react-types/form@3.7.10\n - @react-types/grid@3.3.0\n - @react-types/illustratedmessage@3.3.15\n - @react-types/image@3.4.7\n - @react-types/label@3.9.9\n - @react-types/layout@3.3.21\n - @react-types/link@3.5.11\n - @react-types/list@3.2.24\n - @react-types/listbox@3.5.5\n - @react-types/menu@3.9.15\n - @react-types/meter@3.4.7\n - @react-types/numberfield@3.8.9\n - @react-types/overlays@3.8.13\n - @react-types/progress@3.5.10\n - @react-types/provider@3.8.7\n - @react-types/radio@3.8.7\n - @react-types/searchfield@3.6.0\n - @react-types/select@3.9.10\n - @react-types/shared@3.28.0\n - @react-types/slider@3.7.9\n - @react-types/statuslight@3.3.15\n - @react-types/switch@3.5.9\n - @react-types/table@3.11.0\n - @react-types/tabs@3.3.13\n - @react-types/text@3.3.15\n - @react-types/textfield@3.12.0\n - @react-types/tooltip@3.4.15\n - @react-types/view@3.4.15\n - @react-types/well@3.3.15\n - @spectrum-icons/color@3.5.19\n - @spectrum-icons/express@3.0.0-alpha.23\n - @spectrum-icons/illustrations@3.6.19\n - @spectrum-icons/ui@3.6.13\n - @spectrum-icons/workflow@4.2.18\n - @react-spectrum/codemods@0.5.0\n - @react-spectrum/parcel-transformer-s2-icon@0.2.1\n - @react-spectrum/s2-icon-builder@0.2.2\n - react-aria@3.38.0\n - react-aria-components@1.7.0\n - react-stately@3.36.0\n - tailwindcss-react-aria-components@2.0.0\n```\n```\n\n----------------------------------------\n\nTITLE: React Spectrum Ecosystem Package List with Versions\nDESCRIPTION: A comprehensive listing of all packages in the React Spectrum ecosystem showing current version numbers. The list includes accessibility hooks (@react-aria/*), state management libraries (@react-stately/*), component libraries (@react-spectrum/*), TypeScript type definitions (@react-types/*), and various icon packages (@spectrum-icons/*).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-11-8.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- @adobe/react-spectrum@3.32.0\n- @internationalized/number@3.4.0\n- @react-aria/accordion@3.0.0-alpha.24\n- @react-aria/actiongroup@3.7.0\n- @react-aria/aria-modal-polyfill@3.7.7\n- @react-aria/autocomplete@3.0.0-alpha.23\n- @react-aria/breadcrumbs@3.5.8\n- @react-aria/button@3.9.0\n- @react-aria/calendar@3.5.3\n- @react-aria/checkbox@3.12.0\n- @react-aria/color@3.0.0-beta.27\n- @react-aria/combobox@3.8.0\n- @react-aria/datepicker@3.9.0\n- @react-aria/dialog@3.5.8\n- @react-aria/dnd@3.5.0\n- @react-aria/focus@3.15.0\n- @react-aria/form@3.0.0\n- @react-aria/grid@3.8.5\n- @react-aria/gridlist@3.7.2\n- @react-aria/i18n@3.9.0\n- @react-aria/interactions@3.20.0\n- @react-aria/label@3.7.3\n- @react-aria/landmark@3.0.0-beta.7\n- @react-aria/link@3.6.2\n- @react-aria/listbox@3.11.2\n- @react-aria/menu@3.11.2\n- @react-aria/meter@3.4.8\n- @react-aria/numberfield@3.10.0\n- @react-aria/overlays@3.19.0\n- @react-aria/progress@3.4.8\n- @react-aria/radio@3.9.0\n- @react-aria/searchfield@3.6.0\n- @react-aria/select@3.14.0\n- @react-aria/selection@3.17.2\n- @react-aria/separator@3.3.8\n- @react-aria/slider@3.7.3\n- @react-aria/spinbutton@3.6.0\n- @react-aria/ssr@3.9.0\n- @react-aria/steplist@3.0.0-alpha.0\n- @react-aria/switch@3.5.7\n- @react-aria/table@3.13.2\n- @react-aria/tabs@3.8.2\n- @react-aria/tag@3.3.0\n- @react-aria/textfield@3.13.0\n- @react-aria/toast@3.0.0-beta.7\n- @react-aria/toggle@3.9.0\n- @react-aria/toolbar@3.0.0-beta.0\n- @react-aria/tooltip@3.6.5\n- @react-aria/utils@3.22.0\n- @react-aria/virtualizer@3.9.5\n- @react-aria/visually-hidden@3.8.7\n- @react-spectrum/accordion@3.0.0-alpha.26\n- @react-spectrum/actionbar@3.4.0\n- @react-spectrum/actiongroup@3.10.0\n- @react-spectrum/autocomplete@3.0.0-alpha.24\n- @react-spectrum/avatar@3.0.7\n- @react-spectrum/badge@3.1.8\n- @react-spectrum/breadcrumbs@3.9.2\n- @react-spectrum/button@3.15.0\n- @react-spectrum/buttongroup@3.6.8\n- @react-spectrum/calendar@3.4.3\n- @react-spectrum/card@3.0.0-alpha.25\n- @react-spectrum/checkbox@3.9.0\n- @react-spectrum/color@3.0.0-beta.28\n- @react-spectrum/combobox@3.11.0\n- @react-spectrum/contextualhelp@3.6.5\n- @react-spectrum/datepicker@3.9.0\n- @react-spectrum/dialog@3.8.5\n- @react-spectrum/divider@3.5.8\n- @react-spectrum/dnd@3.3.5\n- @react-spectrum/dropzone@3.0.0-beta.0\n- @react-spectrum/form@3.7.0\n- @react-spectrum/icon@3.7.8\n- @react-spectrum/illustratedmessage@3.4.8\n- @react-spectrum/image@3.4.8\n- @react-spectrum/inlinealert@3.2.0\n- @react-spectrum/label@3.16.0\n- @react-spectrum/labeledvalue@3.1.8\n- @react-spectrum/layout@3.6.0\n- @react-spectrum/link@3.6.2\n- @react-spectrum/list@3.7.2\n- @react-spectrum/listbox@3.12.2\n- @react-spectrum/menu@3.16.0\n- @react-spectrum/meter@3.4.8\n- @react-spectrum/numberfield@3.8.0\n- @react-spectrum/overlays@5.5.2\n- @react-spectrum/picker@3.13.0\n- @react-spectrum/progress@3.7.2\n- @react-spectrum/provider@3.9.2\n- @react-spectrum/radio@3.7.0\n- @react-spectrum/searchfield@3.8.0\n- @react-spectrum/slider@3.6.4\n- @react-spectrum/statuslight@3.5.8\n- @react-spectrum/steplist@3.0.0-alpha.0\n- @react-spectrum/switch@3.5.0\n- @react-spectrum/table@3.12.2\n- @react-spectrum/tabs@3.8.2\n- @react-spectrum/tag@3.2.0\n- @react-spectrum/text@3.5.0\n- @react-spectrum/textfield@3.11.0\n- @react-spectrum/theme-dark@3.5.7\n- @react-spectrum/theme-default@3.5.7\n- @react-spectrum/theme-express@3.0.0-alpha.9\n- @react-spectrum/theme-light@3.4.7\n- @react-spectrum/toast@3.0.0-beta.7\n- @react-spectrum/tooltip@3.6.2\n- @react-spectrum/utils@3.11.2\n- @react-spectrum/view@3.6.5\n- @react-spectrum/well@3.4.8\n- @react-stately/calendar@3.4.2\n- @react-stately/checkbox@3.6.0\n- @react-stately/collections@3.10.3\n- @react-stately/color@3.5.0\n- @react-stately/combobox@3.8.0\n- @react-stately/data@3.11.0\n- @react-stately/datepicker@3.9.0\n- @react-stately/dnd@3.2.6\n- @react-stately/form@3.0.0\n- @react-stately/grid@3.8.3\n- @react-stately/layout@3.13.4\n- @react-stately/list@3.10.1\n- @react-stately/menu@3.5.7\n- @react-stately/numberfield@3.7.0\n- @react-stately/overlays@3.6.4\n- @react-stately/radio@3.10.0\n- @react-stately/searchfield@3.5.0\n- @react-stately/select@3.6.0\n- @react-stately/selection@3.14.1\n- @react-stately/slider@3.4.5\n- @react-stately/steplist@3.0.0-alpha.0\n- @react-stately/table@3.11.3\n- @react-stately/tabs@3.6.2\n- @react-stately/toggle@3.7.0\n- @react-stately/tooltip@3.4.6\n- @react-stately/tree@3.7.4\n- @react-stately/utils@3.9.0\n- @react-stately/virtualizer@3.6.5\n- @react-types/accordion@3.0.0-alpha.18\n- @react-types/actionbar@3.1.4\n- @react-types/actiongroup@3.4.6\n- @react-types/autocomplete@3.0.0-alpha.18\n- @react-types/avatar@3.0.4\n- @react-types/badge@3.1.6\n- @react-types/breadcrumbs@3.7.2\n- @react-types/button@3.9.1\n- @react-types/buttongroup@3.3.6\n- @react-types/calendar@3.4.2\n- @react-types/card@3.0.0-alpha.21\n- @react-types/checkbox@3.6.0\n- @react-types/color@3.0.0-beta.21\n- @react-types/combobox@3.9.0\n- @react-types/contextualhelp@3.2.7\n- @react-types/datepicker@3.7.0\n- @react-types/dialog@3.5.7\n- @react-types/divider@3.3.6\n- @react-types/form@3.6.0\n- @react-types/grid@3.2.3\n- @react-types/illustratedmessage@3.3.6\n- @react-types/image@3.3.6\n- @react-types/label@3.9.0\n- @react-types/layout@3.3.12\n- @react-types/link@3.5.2\n- @react-types/list@3.2.9\n- @react-types/listbox@3.4.6\n- @react-types/menu@3.9.6\n- @react-types/meter@3.3.6\n- @react-types/numberfield@3.7.0\n- @react-types/overlays@3.8.4\n- @react-types/progress@3.5.1\n- @react-types/provider@3.7.1\n- @react-types/radio@3.6.0\n- @react-types/searchfield@3.5.2\n- @react-types/select@3.9.0\n- @react-types/shared@3.22.0\n- @react-types/slider@3.7.0\n- @react-types/statuslight@3.3.6\n- @react-types/switch@3.5.0\n- @react-types/table@3.9.1\n- @react-types/tabs@3.3.4\n- @react-types/text@3.3.6\n- @react-types/textfield@3.9.0\n- @react-types/tooltip@3.4.6\n- @react-types/view@3.4.6\n- @react-types/well@3.3.6\n- @spectrum-icons/color@3.5.8\n- @spectrum-icons/express@3.0.0-alpha.12\n- @spectrum-icons/illustrations@3.6.8\n- @spectrum-icons/ui@3.6.2\n- @spectrum-icons/workflow@4.2.7\n- react-aria@3.30.0\n- react-aria-components@1.0.0-rc.0\n- react-stately@3.28.0\n- tailwindcss-react-aria-components@1.0.0-rc.0\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Components with CSS Classes and Data Attributes\nDESCRIPTION: This CSS snippet provides an example of styling React Aria components using their default class names (like `.react-aria-DatePicker`, `.react-aria-Group`) and state-based data attributes (like `[data-pressed]`, `[data-selected]`). This allows for custom styling based on component type and interaction state. The `render=false` attribute suggests this code is for demonstration and not actively rendered, and the surrounding `hidden` div indicates it might be part of an interactive example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Consistent default classes for each component */\n.react-aria-DatePicker {\n  /* ... */\n\n  .react-aria-Group {\n    border: 2px solid var(--gray-300);\n  }\n}\n\n.react-aria-CalendarCell {\n  color: var(--gray-900);\n\n  /* Style interactive states with data attributes */\n  &[data-pressed] {\n    background: var(--gray-100);\n  }\n\n  &[data-selected] {\n    color: var(--gray-50);\n    background: var(--blue-600);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeField Granularity to Seconds in TypeScript\nDESCRIPTION: Demonstrates the use of the granularity prop on TimeField to display and select time with \"second\"-level precision. The example uses parseAbsoluteToLocal to provide a defaultValue with seconds, and sets granularity='second' to expose this precision to users. Inputs are absolute time strings including seconds, and outputs reflect the user's selection at second-level accuracy.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MyTimeField\\n  label=\"Event time\"\\n  /*- begin highlight -*/\\n  granularity=\"second\"\\n  /*- end highlight -*/\\n  defaultValue={parseAbsoluteToLocal('2021-04-07T18:45:22Z')} />\n```\n\n----------------------------------------\n\nTITLE: Disabled Slider in React Spectrum\nDESCRIPTION: Demonstrates how to create a disabled Slider component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/Slider.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider label=\"Cookies to share\" defaultValue={25} isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable ColorSwatchPicker Components\nDESCRIPTION: Example of creating reusable wrapper components for ColorSwatchPicker and ColorSwatchPickerItem to maintain consistency across an application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSwatchPicker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ColorSwatchPickerProps, ColorSwatchPickerItemProps} from 'react-aria-components';\nimport {MyColorSwatch} from './ColorSwatch';\n\nexport function MyColorSwatchPicker({children, ...props}: ColorSwatchPickerProps) {\n  return (\n    <ColorSwatchPicker {...props}>\n      {children}\n    </ColorSwatchPicker>\n  );\n}\n\nexport function MyColorSwatchPickerItem(props: ColorSwatchPickerItemProps) {\n  return (\n    <ColorSwatchPickerItem {...props}>\n      <MyColorSwatch />\n    </ColorSwatchPickerItem>\n  );\n}\n\n<MyColorSwatchPicker>\n  <MyColorSwatchPickerItem color=\"#A00\" />\n  <MyColorSwatchPickerItem color=\"#f80\" />\n  <MyColorSwatchPickerItem color=\"#080\" />\n  <MyColorSwatchPickerItem color=\"#08f\" />\n  <MyColorSwatchPickerItem color=\"#088\" />\n  <MyColorSwatchPickerItem color=\"#008\" />\n</MyColorSwatchPicker>\n```\n\n----------------------------------------\n\nTITLE: Importing RangeSlider Component in React\nDESCRIPTION: This snippet shows how to import the RangeSlider component from the React Spectrum library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {RangeSlider} from '@react-spectrum/slider';\n```\n\n----------------------------------------\n\nTITLE: List of Released React Spectrum Packages (Text)\nDESCRIPTION: This section lists all the npm packages and their specific versions that were updated and released on September 13, 2021. It includes packages from `@adobe/react-spectrum`, `@internationalized/number`, `@react-aria`, `@react-spectrum`, `@react-stately`, and `@react-types`, providing a comprehensive overview of the release scope.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-09-13.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- @adobe/react-spectrum@3.14.0\n- @internationalized/number@3.0.3\n- @react-aria/button@3.3.4\n- @react-aria/color@3.0.0-beta.4\n- @react-aria/combobox@3.1.0\n- @react-aria/focus@3.5.0\n- @react-aria/grid@3.0.0\n- @react-aria/interactions@3.6.0\n- @react-aria/label@3.2.0\n- @react-aria/numberfield@3.1.0\n- @react-aria/searchfield@3.2.0\n- @react-aria/select@3.5.0\n- @react-aria/selection@3.6.0\n- @react-aria/ssr@3.1.0\n- @react-aria/table@3.0.0\n- @react-aria/tabs@3.0.2\n- @react-aria/textfield@3.4.0\n- @react-aria/utils@3.9.0\n- @react-spectrum/actionbar@3.0.0-alpha.3\n- @react-spectrum/actiongroup@3.3.0\n- @react-spectrum/button@3.6.0\n- @react-spectrum/color@3.0.0-beta.4\n- @react-spectrum/combobox@3.1.0\n- @react-spectrum/label@3.4.0\n- @react-spectrum/link@3.2.0\n- @react-spectrum/listbox@3.5.2\n- @react-spectrum/menu@3.5.0\n- @react-spectrum/numberfield@3.1.0\n- @react-spectrum/picker@3.4.0\n- @react-spectrum/searchfield@3.2.0\n- @react-spectrum/table@3.0.0\n- @react-spectrum/textfield@3.2.0\n- @react-stately/color@3.0.0-beta.4\n- @react-stately/data@3.4.2\n- @react-stately/grid@3.0.0\n- @react-stately/layout@3.4.2\n- @react-stately/table@3.0.0\n- @react-types/color@3.0.0-beta.3\n- @react-types/combobox@3.1.0\n- @react-types/grid@3.0.0\n- @react-types/label@3.5.0\n- @react-types/layout@3.2.0\n- @react-types/menu@3.4.0\n- @react-types/numberfield@3.1.0\n- @react-types/select@3.4.0\n- @react-types/shared@3.9.0\n- @react-types/table@3.0.0\n- @react-types/textfield@3.3.0\n- react-aria@3.10.0\n- react-stately@3.9.0\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum CSS for Theming\nDESCRIPTION: Import statement for including the necessary CSS to support light and dark themes in a React Spectrum application. This should be included at the root level of the application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-next-macros/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@react-spectrum/s2/page.css\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Backward Compatibility with Spectrum CSS Class Names (JSX)\nDESCRIPTION: This snippet demonstrates using the 'UNSAFE_keepSpectrumClassNames' prop on the React Spectrum 'Provider' component to keep the legacy Spectrum CSS global class names applied alongside the new CSS module class names. This is a migration aid for applications upgrading to React Spectrum v3 that still depend on global class name selectors for theming or overrides. Set the flag to true to activate the compatibility mode. Available only in recent versions of React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-theming.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Provider UNSAFE_keepSpectrumClassNames={true}>\n  {/* ... */}\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Styling Horizontal RadioGroup (CSS)\nDESCRIPTION: Provides CSS rules to style a RadioGroup when its orientation is set to horizontal. It uses the `[data-orientation=horizontal]` data attribute selector to apply flexbox properties for horizontal layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-RadioGroup {\n  &[data-orientation=horizontal] {\n    flex-direction: row;\n    align-items: center;\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel Resolver for Locale Optimization (JSON)\nDESCRIPTION: Defines the custom resolver in the .parcelrc file by extending the default Parcel configuration and adding '@react-aria/parcel-resolver-optimize-locales' to the resolvers list. This enables the locale optimization plugin, allowing subsequent configuration of supported locales. Required dependency: '@react-aria/parcel-resolver-optimize-locales' must be installed. The main parameter is the 'resolvers' array, where plugin order may affect resolution behavior. Inputs: Parcel's .parcelrc JSON; Output: updated bundle build process.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/parcel-resolver-optimize-locales/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"resolvers\": [\"@react-aria/parcel-resolver-optimize-locales\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using SelectTester for keyboard interactions in React-Aria Select tests\nDESCRIPTION: This code shows how to use the @react-aria/test-utils package to test Select component interactions, specifically demonstrating a keyboard-based option selection test.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_37\n\nLANGUAGE: ts\nCODE:\n```\n// Select.test.ts\nimport {render} from '@testing-library/react';\nimport {User} from '@react-aria/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// ...\n\nit('Select can select an option via keyboard', async function () {\n  // Render your test component/app and initialize the select tester\n  let {getByTestId} = render(\n    <Select data-testid=\"test-select\">\n     ...\n    </Select>\n  );\n  let selectTester = testUtilUser.createTester('Select', {root: getByTestId('test-select'), interactionType: 'keyboard'});\n  let trigger = selectTester.trigger;\n  expect(trigger).toHaveTextContent('Select an item');\n\n  await selectTester.selectOption({option: 'Cat'});\n  expect(trigger).toHaveTextContent('Cat');\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Package and Component Info using HeaderInfo Component in JSX\nDESCRIPTION: Utilizes the `HeaderInfo` component to display header information for the documentation page. It passes the imported `packageData` and an array containing the component name `useOverlayTriggerState` as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/overlays/docs/useOverlayTriggerState.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useOverlayTriggerState']} />\n```\n\n----------------------------------------\n\nTITLE: Styling Non-Boolean States with Tailwind Plugin\nDESCRIPTION: Example showing how to style non-boolean states like orientation using the name-value pattern with the Tailwind plugin.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs className=\"orientation-vertical:flex-row\">\n  {/* ... */}\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Using Framer Motion to Animate Overlay Entry - TypeScript/TSX\nDESCRIPTION: This TypeScript/TSX snippet demonstrates the usage of Framer Motion's animation props in conjunction with a motion-wrapped Modal. The initial prop sets up the starting opacity, while animate defines the target state. To use, you must have MotionModal set up as in the previous snippet and framer-motion installed. The input is the React component's render state, and the output is an animated opacity transition during entry.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n<MotionModal\n  initial={{opacity: 0}}\n  animate={{opacity: 1}}>\n  {/* ... */}\n</MotionModal>\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure for useTreeState Hook\nDESCRIPTION: Defines the structure of the useTreeState documentation page including description, header information, API reference, interface details, and an example reference.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tree/docs/useTreeState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n# useTreeState\n\n<PageDescription>{docs.exports.useTreeState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useTreeState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useTreeState} links={docs.links} />\n\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useTreeState.return.base.id]} />\n\n## Example\n\nSee the docs for [useMenu](/react-aria/useMenu.html) in react-aria for an example of `useTreeState`.\n```\n\n----------------------------------------\n\nTITLE: Disabling a React Spectrum ColorSlider\nDESCRIPTION: This example demonstrates how to disable a `MyColorSlider` component using the `isDisabled` boolean prop. When disabled, the slider's thumb cannot be focused or dragged. The example uses `defaultValue` for an uncontrolled component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorSlider channel=\"red\" defaultValue=\"#7f007f\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Importing BlogPostLayout and Hero Components in React\nDESCRIPTION: This code snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package. It then exports BlogPostLayout as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-02-17.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Disabled Avatar in TSX\nDESCRIPTION: This snippet illustrates how to apply the `isDisabled` prop to an `Avatar` component. Setting `isDisabled` to true renders the avatar in a visually disabled state, indicating it's not interactive. It still requires `src` and `alt` props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/avatar/docs/Avatar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Avatar src=\"https://i.imgur.com/kJOwAdv.png\" alt=\"default Adobe avatar\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Basic SearchAutocomplete Usage with Static Items in TSX\nDESCRIPTION: This example shows a basic `SearchAutocomplete` component with the label \"Search with Autocomplete\". It uses static `<Item>` components directly as children to define the available options ('Aardvark', 'Kangaroo', 'Snake').\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Search with Autocomplete\">\n  <Item>Aardvark</Item>\n  <Item>Kangaroo</Item>\n  <Item>Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Rendering Node Interface Properties using InterfaceType Component in JSX\nDESCRIPTION: Uses the `InterfaceType` component, wrapped in a `TypeContext.Provider`, to render the properties of the `Node` interface. The `TypeContext.Provider` likely supplies context (e.g., link resolution data from `collectionsDocs.links`) needed by `InterfaceType` to correctly display the properties sourced from `collectionsDocs.exports.Node.properties`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/Collection.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<TypeContext.Provider value={collectionsDocs.links}>\n  <InterfaceType properties={collectionsDocs.exports.Node.properties} />\n</TypeContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in JavaScript/JSX\nDESCRIPTION: Imports the `Layout` component from the '@react-spectrum/docs' package. It then exports this component as the default export for the current module, suggesting it's used as the primary page layout structure for this documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Rendering Components in JavaScript/JSX\nDESCRIPTION: Imports several specialized components (`ClassAPI`, `HeaderInfo`, `FunctionAPI`, `PageDescription`) from the '@react-spectrum/docs' package. These components are used within the MDX file to render structured documentation sections like API references, header information, and descriptions based on the imported `docs` data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ClassAPI, HeaderInfo, FunctionAPI, PageDescription} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Docs Layout - JavaScript\nDESCRIPTION: This snippet imports the Layout component from the @react-spectrum/docs package and re-exports it as the default export. This establishes the overall page layout for the documentation. No runtime dependencies are required beyond @react-spectrum/docs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorWheelState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Layout from React Spectrum Docs\nDESCRIPTION: Basic import statement for Layout component from React Spectrum docs package and exporting it as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberParser.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Linking to Usage Example in React Aria Docs using MDX\nDESCRIPTION: Provides instructional text with a Markdown link. It directs the user to the documentation for `useDateRangePicker` within the `react-aria` package for a practical example demonstrating the usage of `useDateRangePickerState`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nSee the docs for [useDateRangePicker](/react-aria/useDateRangePicker.html) in react-aria for an example of `useDateRangePickerState`.\n```\n\n----------------------------------------\n\nTITLE: Listing Released Packages for React Spectrum - Markdown\nDESCRIPTION: This snippet consists of a fenced Markdown code block enumerating all npm package versions released in this version. The purpose is to provide end-users and contributors with an explicit and easy-to-copy list of all updated packages in the release. Expected input is the complete list of React Spectrum, React Aria, and related libraries; output is just the formatted list. No dependencies are required, but the snippet is informational only and not executable.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-03-07.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- @adobe/react-spectrum@3.16.4\n- @react-aria/accordion@3.0.0-alpha.5\n- @react-aria/actiongroup@3.2.4\n- @react-aria/aria-modal-polyfill@3.4.3\n- @react-aria/autocomplete@3.0.0-alpha.4\n- @react-aria/breadcrumbs@3.1.8\n- @react-aria/button@3.4.2\n- @react-aria/checkbox@3.3.2\n- @react-aria/color@3.0.0-beta.9\n- @react-aria/combobox@3.2.4\n- @react-aria/dialog@3.1.7\n- @react-aria/dnd@3.0.0-alpha.6\n- @react-aria/focus@3.5.3\n- @react-aria/grid@3.2.4\n- @react-aria/i18n@3.3.7\n- @react-aria/interactions@3.8.2\n- @react-aria/label@3.2.4\n- @react-aria/link@3.2.3\n- @react-aria/listbox@3.4.3\n- @react-aria/live-announcer@3.0.4\n- @react-aria/menu@3.4.2\n- @react-aria/meter@3.1.6\n- @react-aria/numberfield@3.1.4\n- @react-aria/overlays@3.8.0\n- @react-aria/progress@3.1.6\n- @react-aria/radio@3.1.9\n- @react-aria/searchfield@3.2.5\n- @react-aria/select@3.6.3\n- @react-aria/selection@3.8.0\n- @react-aria/separator@3.1.6\n- @react-aria/slider@3.0.6\n- @react-aria/spinbutton@3.0.4\n- @react-aria/switch@3.1.6\n- @react-aria/table@3.2.4\n- @react-aria/tabs@3.1.3\n- @react-aria/tag@3.0.0-alpha.3\n- @react-aria/textfield@3.5.3\n- @react-aria/toggle@3.2.2\n- @react-aria/tooltip@3.1.6\n- @react-aria/utils@3.11.3\n- @react-aria/virtualizer@3.3.8\n- @react-aria/visually-hidden@3.2.6\n- @react-spectrum/accordion@3.0.0-alpha.6\n- @react-spectrum/actionbar@3.0.0-alpha.6\n- @react-spectrum/actiongroup@3.4.2\n- @react-spectrum/autocomplete@3.0.0-alpha.4\n- @react-spectrum/avatar@3.0.0-alpha.3\n- @react-spectrum/breadcrumbs@3.2.7\n- @react-spectrum/button@3.7.2\n- @react-spectrum/buttongroup@3.2.6\n- @react-spectrum/card@3.0.0-alpha.5\n- @react-spectrum/checkbox@3.3.2\n- @react-spectrum/color@3.0.0-beta.9\n- @react-spectrum/combobox@3.2.3\n- @react-spectrum/contextualhelp@3.0.2\n- @react-spectrum/dialog@3.3.7\n- @react-spectrum/divider@3.2.2\n- @react-spectrum/dnd@3.0.0-alpha.0\n- @react-spectrum/form@3.2.7\n- @react-spectrum/icon@3.3.5\n- @react-spectrum/illustratedmessage@3.1.7\n- @react-spectrum/image@3.1.7\n- @react-spectrum/label@3.4.4\n- @react-spectrum/layout@3.2.4\n- @react-spectrum/link@3.2.3\n- @react-spectrum/list@3.0.0-alpha.9\n- @react-spectrum/listbox@3.5.6\n- @react-spectrum/menu@3.6.2\n- @react-spectrum/meter@3.1.6\n- @react-spectrum/numberfield@3.1.4\n- @react-spectrum/overlays@3.4.7\n- @react-spectrum/picker@3.5.3\n- @react-spectrum/progress@3.1.6\n- @react-spectrum/provider@3.3.2\n- @react-spectrum/radio@3.1.8\n- @react-spectrum/searchfield@3.2.4\n- @react-spectrum/searchwithin@3.0.0-alpha.4\n- @react-spectrum/slider@3.0.7\n- @react-spectrum/statuslight@3.2.5\n- @react-spectrum/switch@3.1.6\n- @react-spectrum/table@3.1.6\n- @react-spectrum/tabs@3.1.4\n- @react-spectrum/tag@3.0.0-alpha.3\n- @react-spectrum/text@3.1.6\n- @react-spectrum/textfield@3.3.3\n- @react-spectrum/theme-dark@3.2.6\n- @react-spectrum/theme-default@3.2.6\n- @react-spectrum/theme-light@3.1.6\n- @react-spectrum/tooltip@3.1.7\n- @react-spectrum/utils@3.6.6\n- @react-spectrum/view@3.1.6\n- @react-spectrum/well@3.1.6\n- @react-stately/checkbox@3.0.6\n- @react-stately/collections@3.3.7\n- @react-stately/color@3.0.0-beta.8\n- @react-stately/combobox@3.0.4\n- @react-stately/data@3.4.6\n- @react-stately/dnd@3.0.0-alpha.5\n- @react-stately/grid@3.1.3\n- @react-stately/layout@3.4.5\n- @react-stately/list@3.4.4\n- @react-stately/menu@3.2.6\n- @react-stately/numberfield@3.0.5\n- @react-stately/overlays@3.1.6\n- @react-stately/radio@3.3.5\n- @react-stately/searchfield@3.1.6\n- @react-stately/select@3.1.6\n- @react-stately/selection@3.9.3\n- @react-stately/slider@3.0.6\n- @react-stately/table@3.1.3\n- @react-stately/tabs@3.0.4\n- @react-stately/toggle@3.2.6\n- @react-stately/tooltip@3.0.8\n- @react-stately/tree@3.2.3\n- @react-stately/virtualizer@3.1.8\n- @react-types/accordion@3.0.0-alpha.4\n- @react-types/actionbar@3.0.0-alpha.4\n- @react-types/actiongroup@3.2.4\n- @react-types/autocomplete@3.0.0-alpha.3\n- @react-types/avatar@3.0.0-alpha.3\n- @react-types/breadcrumbs@3.2.4\n- @react-types/button@3.4.4\n- @react-types/buttongroup@3.1.5\n- @react-types/card@3.0.0-alpha.4\n- @react-types/checkbox@3.2.6\n- @react-types/color@3.0.0-beta.6\n- @react-types/combobox@3.3.0\n- @react-types/contextualhelp@3.0.2\n- @react-types/dialog@3.3.4\n- @react-types/divider@3.1.5\n- @react-types/form@3.2.5\n- @react-types/grid@3.0.3\n- @react-types/illustratedmessage@3.1.5\n- @react-types/image@3.1.6\n- @react-types/label@3.5.3\n- @react-types/layout@3.2.3\n- @react-types/link@3.2.3\n- @react-types/listbox@3.2.4\n- @react-types/menu@3.5.2\n- @react-types/meter@3.1.5\n- @react-types/numberfield@3.1.3\n- @react-types/overlays@3.5.4\n- @react-types/progress@3.1.5\n- @react-types/provider@3.4.2\n- @react-types/radio@3.1.5\n- @react-types/searchfield@3.1.5\n- @react-types/searchwithin@3.0.0-alpha.3\n- @react-types/select@3.5.4\n- @react-types/shared@3.11.2\n- @react-types/slider@3.0.5\n- @react-types/statuslight@3.1.5\n- @react-types/switch@3.1.5\n- @react-types/table@3.1.3\n- @react-types/tabs@3.0.4\n- @react-types/tag@3.0.0-alpha.2\n- @react-types/text@3.1.6\n- @react-types/textfield@3.3.3\n- @react-types/tooltip@3.1.5\n- @react-types/view@3.1.5\n- @react-types/well@3.1.5\n- @spectrum-icons/color@3.3.4\n- @spectrum-icons/illustrations@3.2.5\n- @spectrum-icons/ui@3.2.4\n- @spectrum-icons/workflow@3.2.4\n- react-aria@3.14.0\n- react-stately@3.12.2\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Hero Video with React Spectrum Video Component (JSX)\nDESCRIPTION: Renders a video using the `Video` component imported from `@react-spectrum/docs`. It configures the video source (`heroVideo`), ID, attributes like `muted`, `loop`, `autoPlay`, `tabIndex`, `aria-label`, and applies inline styles for display and margin. This demonstrates embedding media within the blog post.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/drag-and-drop.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Video\n  src={heroVideo}\n  id=\"heroVideo\"\n  muted\n  loop\n  autoPlay\n  tabIndex={0}\n  aria-label=\"Video showing features of the React Spectrum and React Aria drag and drop implementation\"\n  style={{maxWidth: 'min(100%, 1920px)', display: 'block', margin: '40px auto'}} />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Submenu Animation Component – React Spectrum – TypeScript/JSX\nDESCRIPTION: This code demonstrates how to import and render a SubmenuAnimation React component within a JSX/TypeScript environment, designed for visualizing submenu opening logic in the context of React Spectrum’s interaction patterns. This assumes that './SubmenuAnimation' exports a valid React component and that the environment supports TypeScript and JSX. The SubmenuAnimation component would typically be used to visually illustrate pointer movement behavior when interacting with menu/submenu items. No props are required for this example, but implementations may expect additional dependencies related to the overall application or UI component library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/creating-a-pointer-friendly-submenu-experience.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {SubmenuAnimation} from './SubmenuAnimation';\n<SubmenuAnimation />\n```\n\n----------------------------------------\n\nTITLE: Custom First Day of Week in TypeScript/React\nDESCRIPTION: Shows how to override the default first day of week using an optional parameter in the startOfWeek function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nstartOfWeek(date, 'en-US', 'mon'); // 2022-01-31T09:45[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Importing Package Data in JavaScript\nDESCRIPTION: Imports the `package.json` file from the `@react-stately/combobox` package. This data typically includes package name, version, and other metadata, likely used by the `HeaderInfo` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/combobox/docs/useComboBoxState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport packageData from '@react-stately/combobox/package.json';\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v3 with React Aria Components Plugin\nDESCRIPTION: Configuration example for adding the React Aria Components plugin to Tailwind v3 in the Tailwind config file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Tag Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-spectrum/tag package in a Markdown file. It includes a link to the main React Spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/tag\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Utilities and Package Data - React Spectrum - JavaScript\nDESCRIPTION: This snippet imports the generated docs for @react-stately/menu, several documentation utilities (ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription) from @react-spectrum/docs, and the package metadata from @react-stately/menu. These imports are prerequisites for rendering detailed API, interface, and description sections in the documentation. The code imposes no specific constraints but expects the referenced documentation modules and package.json structure to be present.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/menu/docs/useMenuTriggerState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-stately/menu';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/menu/package.json';\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled ToggleButton State (CSS)\nDESCRIPTION: This CSS snippet extends the ToggleButton's styles to cover the data-disabled state by targeting .react-aria-ToggleButton[data-disabled]. It alters the border, background, and text color for disabled buttons, ensuring proper visual feedback to users. Uses CSS variables for themeability and accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButton {\\n  &[data-disabled] {\\n    border-color: var(--border-color-disabled);\\n    background: var(--button-background);\\n    color: var(--text-color-disabled);\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Return Type Interface Documentation using ClassAPI in MDX\nDESCRIPTION: Uses the `ClassAPI` React component to display the documentation for the interface returned by the `useDateRangePickerState` hook. It receives the type links (`docs.links`) and the specific class/interface definition identified by its ID (`docs.links[docs.exports.useDateRangePickerState.return.id]`) from the imported `docs` data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useDateRangePickerState.return.id]} />\n```\n\n----------------------------------------\n\nTITLE: Defining Select Element Size in HTML\nDESCRIPTION: This snippet illustrates setting the `size` attribute to `\"1\"` on an HTML `select` element. In some browsers, this presentation can be interpreted by assistive technologies as a select-only combobox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Autocomplete.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nsize=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Styling React Spectrum Components with Style Macro\nDESCRIPTION: Example of applying style macros to React Spectrum components. For Spectrum components, the styles prop is used instead of className.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-vite-project/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button styles={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Layout Component (JavaScript)\nDESCRIPTION: Exports the `BlogPostLayout` component, previously imported from `@react-spectrum/docs`, as the default export for this module. This component likely defines the overall structure and styling for the blog post page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/drag-and-drop.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Using ContactPicker Component with Description\nDESCRIPTION: This snippet shows how to use the ContactPicker component with a label and description.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/label/docs/useField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ContactPicker\n  label=\"Preferred contact method\"\n  description=\"Select the best way to contact you about issues with your account.\" />\n```\n\n----------------------------------------\n\nTITLE: Importing LabeledValue Component\nDESCRIPTION: Basic import statement for the LabeledValue component from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/labeledvalue/docs/LabeledValue.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {LabeledValue} from '@react-spectrum/labeledvalue';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Dependencies for DateFormatter Component\nDESCRIPTION: Imports necessary components and data for the documentation page, including the documentation content, UI components for rendering API information, and package metadata.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/DateFormatter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@internationalized/date';\nimport {HeaderInfo, FunctionAPI, ClassAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@internationalized/date/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Searchable Select in React\nDESCRIPTION: Imports necessary components and styles for the Searchable Select implementation. It includes React Aria Components, custom styles, and SVG illustrations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/searchable-select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ExampleLayout} from '@react-spectrum/docs';\nexport default ExampleLayout;\n\nimport docs from 'docs:react-aria-components';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport Picker from '@react-spectrum/docs/pages/assets/component-illustrations/Picker.svg';\nimport Button from '@react-spectrum/docs/pages/assets/component-illustrations/ActionButton.svg';\nimport Popover from '@react-spectrum/docs/pages/assets/component-illustrations/Popover.svg';\nimport ListBox from '@react-spectrum/docs/pages/assets/component-illustrations/ListBox.svg';\nimport SearchField from '@react-spectrum/docs/pages/assets/component-illustrations/SearchField.svg';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\n```\n\n----------------------------------------\n\nTITLE: JSX License Comment Block\nDESCRIPTION: Standard Apache 2.0 license comment block embedded within the JSX/MDX file, specifying usage rights and warranty information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/numberfield/docs/useNumberFieldState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n```\n\n----------------------------------------\n\nTITLE: FileTrigger with Media Capture\nDESCRIPTION: Shows how to configure FileTrigger for media capture using device cameras on mobile devices.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/filetrigger/docs/FileTrigger.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTrigger defaultCamera=\"environment\">\n  <Button variant=\"accent\">Open Camera</Button>\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: Listing Released Package Versions in Markdown - Markdown\nDESCRIPTION: Lists out the available versions for each package under the React Spectrum umbrella in Markdown code block syntax. This snippet provides a reference point for developers to identify available and current package versions at a glance. Inputs consist of package names and their corresponding versions, with no external dependencies; output is a markdown list for documentation and tracking purposes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-02-17.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- @adobe/react-spectrum@3.8.0\\n- @internationalized/message@3.0.0-alpha.0\\n- @internationalized/number@3.0.0-alpha.0\\n- @react-aria/button@3.3.1\\n- @react-aria/color@3.0.0-alpha.0\\n- @react-aria/combobox@3.0.0-alpha.1\\n- @react-aria/i18n@3.3.0\\n- @react-aria/interactions@3.3.3\\n- @react-aria/listbox@3.2.4\\n- @react-aria/menu@3.1.4\\n- @react-aria/numberfield@3.0.0-alpha.0\\n- @react-aria/overlays@3.6.1\\n- @react-aria/radio@3.1.3\\n- @react-aria/select@3.3.0\\n- @react-aria/selection@3.3.2\\n- @react-aria/slider@3.0.1\\n- @react-aria/spinbutton@3.0.0-alpha.0\\n- @react-aria/tabs@3.0.0-alpha.3\\n- @react-aria/toggle@3.1.2\\n- @react-aria/tooltip@3.1.1\\n- @react-aria/utils@3.6.0\\n- @react-spectrum/button@3.4.0\\n- @react-spectrum/checkbox@3.2.2\\n- @react-spectrum/color@3.0.0-alpha.0\\n- @react-spectrum/combobox@3.0.0-alpha.1\\n- @react-spectrum/label@3.3.1\\n- @react-spectrum/numberfield@3.0.0-alpha.0\\n- @react-spectrum/picker@3.2.2\\n- @react-spectrum/radio@3.1.2\\n- @react-spectrum/searchfield@3.1.3\\n- @react-spectrum/slider@3.0.1\\n- @react-spectrum/statuslight@3.2.0\\n- @react-spectrum/tabs@3.0.0-alpha.4\\n- @react-spectrum/textfield@3.1.5\\n- @react-spectrum/tooltip@3.1.1\\n- @react-spectrum/utils@3.5.1\\n- @react-stately/color@3.0.0-alpha.0\\n- @react-stately/combobox@3.0.0-alpha.1\\n- @react-stately/data@3.2.0\\n- @react-stately/numberfield@3.0.0-alpha.0\\n- @react-stately/radio@3.3.0\\n- @react-stately/slider@3.0.1\\n- @react-stately/tabs@3.0.0-alpha.1\\n- @react-stately/tooltip@3.0.2\\n- @react-stately/utils@3.2.0\\n- @react-types/button@3.3.1\\n- @react-types/checkbox@3.2.2\\n- @react-types/color@3.0.0-alpha.0\\n- @react-types/combobox@3.0.0-alpha.1\\n- @react-types/label@3.4.0\\n- @react-types/numberfield@3.0.0-alpha.0\\n- @react-types/select@3.2.0\\n- @react-types/shared@3.4.0\\n- @react-types/slider@3.0.1\\n- @react-types/text@3.1.2\\n- @react-types/tooltip@3.1.1\\n- @spectrum-icons/color@3.3.0\\n- react-aria@3.4.0\\n- react-stately@3.3.0\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout Component - React - JavaScript\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and then exports BlogPostLayout as the default export. This sets the layout for the release notes page using React and is required for consistent rendering of blog post content in the documentation system. The only dependency is @react-spectrum/docs, and it expects to be used within a project configured for ES module imports. Inputs are not required; output is a default export of the BlogPostLayout component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-08-18.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests\nDESCRIPTION: Command to run the Jest test suite for React Spectrum components and hooks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn jest\n```\n\n----------------------------------------\n\nTITLE: Implementing a Toggle Button Group with React Aria\nDESCRIPTION: A complete implementation of a Toggle Button Group component using the useToggleButtonGroup and useToggleButtonGroupItem hooks. The example shows how to create a basic toggle button group with proper accessibility and state management.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useToggleButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaToggleButtonGroupProps, AriaToggleButtonGroupItemProps} from '@react-aria/button';\nimport type {ToggleGroupState} from '@react-stately/toggle';\nimport {useToggleButtonGroup, useToggleButtonGroupItem} from '@react-aria/button';\nimport {useToggleGroupState} from '@react-stately/toggle';\n\ninterface ToggleButtonGroupProps extends AriaToggleButtonGroupProps {\n  children: React.ReactNode\n}\n\nlet ToggleButtonGroupContext = React.createContext<ToggleGroupState | null>(null);\n\nfunction ToggleButtonGroup(props: ToggleButtonGroupProps) {\n  let state = useToggleGroupState(props);\n  let ref = React.useRef<HTMLDivElement | null>(null);\n  let {groupProps} = useToggleButtonGroup(props, state, ref);\n\n  return (\n    <div {...groupProps} className=\"toggle-group\" ref={ref}>\n      <ToggleButtonGroupContext.Provider value={state}>\n        {props.children}\n      </ToggleButtonGroupContext.Provider>\n    </div>\n  );\n}\n\nfunction ToggleButton(props: AriaToggleButtonGroupItemProps) {\n  let ref = React.useRef<HTMLButtonElement | null>(null);\n  let state = React.useContext(ToggleButtonGroupContext)!;\n  let {buttonProps, isPressed, isSelected} = useToggleButtonGroupItem(props, state, ref);\n\n  return (\n    <button\n      {...buttonProps}\n      className=\"toggle-button\"\n      data-pressed={isPressed}\n      data-selected={isSelected}\n      ref={ref}>\n      {props.children}\n    </button>\n  );\n}\n\n<ToggleButtonGroup>\n  <ToggleButton id=\"left\">Left</ToggleButton>\n  <ToggleButton id=\"center\">Center</ToggleButton>\n  <ToggleButton id=\"right\">Right</ToggleButton>\n</ToggleButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in JavaScript/JSX\nDESCRIPTION: Imports the `Layout` component from the `@react-spectrum/docs` package and immediately exports it as the default export for this module. This likely sets the main page structure for the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tabs/docs/useTabListState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Basic Disclosure Component Example\nDESCRIPTION: Example of a basic Disclosure component implementation with a trigger button and panel content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Disclosure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Disclosure, Button, DisclosurePanel, Heading} from 'react-aria-components';\n\n<Disclosure>\n  <Heading>\n    <Button slot=\"trigger\">\n      <svg viewBox=\"0 0 24 24\">\n        <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n      </svg>\n      System Requirements\n    </Button>\n  </Heading>\n  <DisclosurePanel>\n    <p>Details about system requirements here.</p>\n  </DisclosurePanel>\n</Disclosure>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component for ComboBox\nDESCRIPTION: Button component implementation using useButton hook. Provides the dropdown trigger functionality for the ComboBox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = props.buttonRef;\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref} style={props.style}>{props.children}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Released Packages List for Adobe React Spectrum Ecosystem\nDESCRIPTION: A complete list of all packages released in the React Spectrum ecosystem, including their version numbers. The list encompasses React Spectrum components, React Aria hooks, React Stately state management utilities, React Types definitions, and Spectrum Icons packages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-10-02.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n - @adobe/react-spectrum@3.31.0\n - @internationalized/number@3.3.0\n - @react-aria/accordion@3.0.0-alpha.22\n - @react-aria/actiongroup@3.6.3\n - @react-aria/aria-modal-polyfill@3.7.6\n - @react-aria/autocomplete@3.0.0-alpha.21\n - @react-aria/breadcrumbs@3.5.6\n - @react-aria/button@3.8.3\n - @react-aria/calendar@3.5.1\n - @react-aria/checkbox@3.11.1\n - @react-aria/color@3.0.0-beta.25\n - @react-aria/combobox@3.7.0\n - @react-aria/datepicker@3.8.0\n - @react-aria/dialog@3.5.6\n - @react-aria/dnd@3.4.2\n - @react-aria/focus@3.14.2\n - @react-aria/grid@3.8.3\n - @react-aria/gridlist@3.7.0\n - @react-aria/i18n@3.8.3\n - @react-aria/interactions@3.19.0\n - @react-aria/label@3.7.1\n - @react-aria/landmark@3.0.0-beta.5\n - @react-aria/link@3.6.0\n - @react-aria/listbox@3.11.0\n - @react-aria/menu@3.11.0\n - @react-aria/meter@3.4.6\n - @react-aria/numberfield@3.9.0\n - @react-aria/overlays@3.18.0\n - @react-aria/progress@3.4.6\n - @react-aria/radio@3.8.1\n - @react-aria/searchfield@3.5.6\n - @react-aria/select@3.13.0\n - @react-aria/selection@3.17.0\n - @react-aria/separator@3.3.6\n - @react-aria/slider@3.7.1\n - @react-aria/spinbutton@3.5.3\n - @react-aria/switch@3.5.5\n - @react-aria/table@3.13.0\n - @react-aria/tabs@3.8.0\n - @react-aria/tag@3.2.0\n - @react-aria/textfield@3.12.1\n - @react-aria/toast@3.0.0-beta.5\n - @react-aria/toggle@3.8.1\n - @react-aria/tooltip@3.6.3\n - @react-aria/utils@3.21.0\n - @react-aria/virtualizer@3.9.3\n - @react-aria/visually-hidden@3.8.5\n - @react-spectrum/accordion@3.0.0-alpha.24\n - @react-spectrum/actionbar@3.3.0\n - @react-spectrum/actiongroup@3.9.3\n - @react-spectrum/autocomplete@3.0.0-alpha.22\n - @react-spectrum/avatar@3.0.5\n - @react-spectrum/badge@3.1.6\n - @react-spectrum/breadcrumbs@3.9.0\n - @react-spectrum/button@3.14.0\n - @react-spectrum/buttongroup@3.6.6\n - @react-spectrum/calendar@3.4.1\n - @react-spectrum/card@3.0.0-alpha.23\n - @react-spectrum/checkbox@3.8.1\n - @react-spectrum/color@3.0.0-beta.26\n - @react-spectrum/combobox@3.10.2\n - @react-spectrum/contextualhelp@3.6.3\n - @react-spectrum/datepicker@3.8.0\n - @react-spectrum/dialog@3.8.3\n - @react-spectrum/divider@3.5.6\n - @react-spectrum/dnd@3.3.3\n - @react-spectrum/form@3.6.6\n - @react-spectrum/icon@3.7.6\n - @react-spectrum/illustratedmessage@3.4.6\n - @react-spectrum/image@3.4.6\n - @react-spectrum/inlinealert@3.1.1\n - @react-spectrum/label@3.15.0\n - @react-spectrum/labeledvalue@3.1.6\n - @react-spectrum/layout@3.5.6\n - @react-spectrum/link@3.6.0\n - @react-spectrum/list@3.7.0\n - @react-spectrum/listbox@3.12.0\n - @react-spectrum/menu@3.15.0\n - @react-spectrum/meter@3.4.6\n - @react-spectrum/numberfield@3.7.2\n - @react-spectrum/overlays@5.5.0\n - @react-spectrum/picker@3.12.1\n - @react-spectrum/progress@3.7.0\n - @react-spectrum/provider@3.9.0\n - @react-spectrum/radio@3.6.1\n - @react-spectrum/searchfield@3.7.6\n - @react-spectrum/slider@3.6.2\n - @react-spectrum/statuslight@3.5.6\n - @react-spectrum/switch@3.4.6\n - @react-spectrum/table@3.12.0\n - @react-spectrum/tabs@3.8.0\n - @react-spectrum/tag@3.1.3\n - @react-spectrum/text@3.4.6\n - @react-spectrum/textfield@3.10.6\n - @react-spectrum/theme-dark@3.5.6\n - @react-spectrum/theme-default@3.5.6\n - @react-spectrum/theme-express@3.0.0-alpha.8\n - @react-spectrum/theme-light@3.4.6\n - @react-spectrum/toast@3.0.0-beta.5\n - @react-spectrum/tooltip@3.6.0\n - @react-spectrum/utils@3.11.0\n - @react-spectrum/view@3.6.3\n - @react-spectrum/well@3.4.6\n - @react-stately/calendar@3.4.1\n - @react-stately/checkbox@3.5.1\n - @react-stately/collections@3.10.2\n - @react-stately/color@3.4.3\n - @react-stately/combobox@3.7.1\n - @react-stately/data@3.10.3\n - @react-stately/datepicker@3.8.0\n - @react-stately/dnd@3.2.5\n - @react-stately/grid@3.8.2\n - @react-stately/layout@3.13.2\n - @react-stately/list@3.10.0\n - @react-stately/menu@3.5.6\n - @react-stately/numberfield@3.6.2\n - @react-stately/overlays@3.6.3\n - @react-stately/radio@3.9.1\n - @react-stately/searchfield@3.4.6\n - @react-stately/select@3.5.5\n - @react-stately/selection@3.14.0\n - @react-stately/slider@3.4.3\n - @react-stately/table@3.11.2\n - @react-stately/tabs@3.6.1\n - @react-stately/toggle@3.6.3\n - @react-stately/tooltip@3.4.5\n - @react-stately/tree@3.7.3\n - @react-stately/utils@3.8.0\n - @react-stately/virtualizer@3.6.3\n - @react-types/accordion@3.0.0-alpha.17\n - @react-types/actionbar@3.1.3\n - @react-types/actiongroup@3.4.5\n - @react-types/autocomplete@3.0.0-alpha.17\n - @react-types/avatar@3.0.3\n - @react-types/badge@3.1.5\n - @react-types/breadcrumbs@3.7.0\n - @react-types/button@3.9.0\n - @react-types/buttongroup@3.3.5\n - @react-types/calendar@3.4.1\n - @react-types/card@3.0.0-alpha.19\n - @react-types/checkbox@3.5.2\n - @react-types/color@3.0.0-beta.20\n - @react-types/combobox@3.8.1\n - @react-types/contextualhelp@3.2.6\n - @react-types/datepicker@3.6.1\n - @react-types/dialog@3.5.6\n - @react-types/divider@3.3.5\n - @react-types/form@3.5.4\n - @react-types/grid@3.2.2\n - @react-types/illustratedmessage@3.3.5\n - @react-types/image@3.3.5\n - @react-types/label@3.8.1\n - @react-types/layout@3.3.11\n - @react-types/link@3.5.0\n - @react-types/list@3.2.7\n - @react-types/listbox@3.4.5\n - @react-types/menu@3.9.5\n - @react-types/meter@3.3.5\n - @react-types/numberfield@3.6.1\n - @react-types/overlays@3.8.3\n - @react-types/progress@3.5.0\n - @react-types/provider@3.7.0\n - @react-types/radio@3.5.2\n - @react-types/searchfield@3.5.1\n - @react-types/select@3.8.4\n - @react-types/shared@3.21.0\n - @react-types/slider@3.6.2\n - @react-types/statuslight@3.3.5\n - @react-types/switch@3.4.2\n - @react-types/table@3.9.0\n - @react-types/tabs@3.3.3\n - @react-types/text@3.3.5\n - @react-types/textfield@3.8.1\n - @react-types/tooltip@3.4.5\n - @react-types/view@3.4.5\n - @react-types/well@3.3.5\n - @spectrum-icons/color@3.5.6\n - @spectrum-icons/express@3.0.0-alpha.10\n - @spectrum-icons/illustrations@3.6.6\n - @spectrum-icons/ui@3.6.0\n - @spectrum-icons/workflow@4.2.5\n - react-aria@3.29.0\n - react-aria-components@1.0.0-beta.1\n - react-stately@3.27.0\n - tailwindcss-react-aria-components@1.0.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Listing Released Packages - React Spectrum - Markdown\nDESCRIPTION: This Markdown snippet provides a preformatted listing of all packages and versions released in this cycle. It is intended for documentation consumers to quickly reference which React Spectrum and related packages have been updated. The list does not have any programmatic dependencies, but should be maintained accurately for full transparency. Input is informational and the output is a human-readable changelog table for package releases.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-03-21.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- @adobe/react-spectrum@3.16.5\n- @internationalized/date@3.0.0-alpha.4\n- @internationalized/number@3.0.6\n- @react-aria/accordion@3.0.0-alpha.6\n- @react-aria/actiongroup@3.2.5\n- @react-aria/autocomplete@3.0.0-alpha.5\n- @react-aria/breadcrumbs@3.1.9\n- @react-aria/button@3.4.3\n- @react-aria/calendar@3.0.0-alpha.4\n- @react-aria/checkbox@3.3.3\n- @react-aria/color@3.0.0-beta.10\n- @react-aria/combobox@3.2.5\n- @react-aria/datepicker@3.0.0-alpha.5\n- @react-aria/dialog@3.1.8\n- @react-aria/dnd@3.0.0-alpha.7\n- @react-aria/focus@3.5.4\n- @react-aria/grid@3.2.5\n- @react-aria/i18n@3.3.8\n- @react-aria/interactions@3.8.3\n- @react-aria/link@3.2.4\n- @react-aria/listbox@3.4.4\n- @react-aria/live-announcer@3.0.5\n- @react-aria/menu@3.4.3\n- @react-aria/meter@3.1.7\n- @react-aria/numberfield@3.1.5\n- @react-aria/overlays@3.8.1\n- @react-aria/progress@3.1.7\n- @react-aria/radio@3.1.10\n- @react-aria/searchfield@3.2.6\n- @react-aria/select@3.6.4\n- @react-aria/selection@3.8.1\n- @react-aria/slider@3.0.7\n- @react-aria/spinbutton@3.0.5\n- @react-aria/switch@3.1.7\n- @react-aria/tabs@3.1.4\n- @react-aria/tag@3.0.0-alpha.4\n- @react-aria/textfield@3.5.4\n- @react-aria/toggle@3.2.3\n- @react-aria/tooltip@3.1.7\n- @react-aria/virtualizer@3.3.9\n- @react-aria/visually-hidden@3.2.7\n- @react-spectrum/accordion@3.0.0-alpha.7\n- @react-spectrum/actionbar@3.0.0-alpha.7\n- @react-spectrum/actiongroup@3.4.3\n- @react-spectrum/autocomplete@3.0.0-alpha.5\n- @react-spectrum/avatar@3.0.0-alpha.4\n- @react-spectrum/button@3.7.3\n- @react-spectrum/buttongroup@3.2.7\n- @react-spectrum/calendar@3.0.0-alpha.4\n- @react-spectrum/card@3.0.0-alpha.6\n- @react-spectrum/checkbox@3.3.3\n- @react-spectrum/color@3.0.0-beta.10\n- @react-spectrum/combobox@3.2.4\n- @react-spectrum/contextualhelp@3.0.3\n- @react-spectrum/datepicker@3.0.0-alpha.5\n- @react-spectrum/dialog@3.3.8\n- @react-spectrum/divider@3.2.3\n- @react-spectrum/dnd@3.0.0-alpha.1\n- @react-spectrum/form@3.2.8\n- @react-spectrum/icon@3.3.6\n- @react-spectrum/illustratedmessage@3.1.8\n- @react-spectrum/image@3.1.8\n- @react-spectrum/label@3.4.5\n- @react-spectrum/layout@3.2.5\n- @react-spectrum/link@3.2.4\n- @react-spectrum/listbox@3.5.7\n- @react-spectrum/menu@3.6.3\n- @react-spectrum/meter@3.1.7\n- @react-spectrum/numberfield@3.1.5\n- @react-spectrum/overlays@3.4.8\n- @react-spectrum/picker@3.5.4\n- @react-spectrum/progress@3.1.7\n- @react-spectrum/provider@3.3.3\n- @react-spectrum/radio@3.1.9\n- @react-spectrum/searchfield@3.2.5\n- @react-spectrum/searchwithin@3.0.0-alpha.5\n- @react-spectrum/slider@3.0.8\n- @react-spectrum/statuslight@3.2.6\n- @react-spectrum/switch@3.1.7\n- @react-spectrum/tabs@3.1.5\n- @react-spectrum/tag@3.0.0-alpha.4\n- @react-spectrum/text@3.1.7\n- @react-spectrum/textfield@3.3.4\n- @react-spectrum/tooltip@3.1.8\n- @react-spectrum/utils@3.6.7\n- @react-spectrum/view@3.1.7\n- @react-spectrum/well@3.1.7\n- @react-stately/calendar@3.0.0-alpha.4\n- @react-stately/color@3.0.0-beta.9\n- @react-stately/datepicker@3.0.0-alpha.4\n- @react-stately/numberfield@3.0.6\n- @react-stately/slider@3.0.7\n- @react-types/calendar@3.0.0-alpha.4\n- @react-types/color@3.0.0-beta.7\n- @react-types/datepicker@3.0.0-alpha.4\n- @react-types/link@3.2.4\n- @spectrum-icons/color@3.3.5\n- @spectrum-icons/ui@3.2.5\n- react-aria@3.14.1\n```\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: The package name reference in the markdown documentation that specifies the package being documented.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/form/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/form\n```\n\n----------------------------------------\n\nTITLE: Creating a Subset Localized String Dictionary in React Spectrum (tsx)\nDESCRIPTION: Demonstrates using `createLocalizedStringDictionary` from `@adobe/react-spectrum/i18n` to generate a dictionary containing only the strings for specified components (e.g., `@react-spectrum/datepicker`). This technique helps optimize application bundle size by excluding unused localization strings. Requires the `@adobe/react-spectrum/i18n` package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createLocalizedStringDictionary} from '@adobe/react-spectrum/i18n';\n\nconst dictionary = createLocalizedStringDictionary(['@react-spectrum/datepicker']);\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS for Styling\nDESCRIPTION: Imports the global Tailwind CSS styles needed for the components in the example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Listing Released React Spectrum Packages (Text)\nDESCRIPTION: This snippet lists the specific versions of packages released for the Adobe React Spectrum ecosystem as of a particular release. It includes packages related to ARIA implementations (`@react-aria`), Spectrum components (`@react-spectrum`), state management (`@react-stately`), types (`@react-types`), and icons (`@spectrum-icons`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-10-04.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- @adobe/react-spectrum@3.22.0\n- @react-aria/accordion@3.0.0-alpha.12\n- @react-aria/actiongroup@3.4.2\n- @react-aria/aria-modal-polyfill@3.6.0\n- @react-aria/autocomplete@3.0.0-alpha.11\n- @react-aria/breadcrumbs@3.3.2\n- @react-aria/button@3.6.2\n- @react-aria/calendar@3.0.3\n- @react-aria/checkbox@3.6.0\n- @react-aria/color@3.0.0-beta.16\n- @react-aria/combobox@3.4.2\n- @react-aria/datepicker@3.1.2\n- @react-aria/dialog@3.4.0\n- @react-aria/dnd@3.0.0-rc.0\n- @react-aria/focus@3.9.0\n- @react-aria/grid@3.5.0\n- @react-aria/gridlist@3.1.0\n- @react-aria/i18n@3.6.1\n- @react-aria/interactions@3.12.0\n- @react-aria/label@3.4.2\n- @react-aria/landmark@3.0.0-alpha.3\n- @react-aria/link@3.3.4\n- @react-aria/listbox@3.7.0\n- @react-aria/menu@3.6.2\n- @react-aria/meter@3.3.2\n- @react-aria/numberfield@3.3.2\n- @react-aria/overlays@3.11.0\n- @react-aria/progress@3.3.2\n- @react-aria/radio@3.4.0\n- @react-aria/searchfield@3.4.2\n- @react-aria/select@3.8.2\n- @react-aria/selection@3.11.0\n- @react-aria/separator@3.2.4\n- @react-aria/slider@3.2.2\n- @react-aria/spinbutton@3.1.4\n- @react-aria/switch@3.2.4\n- @react-aria/table@3.5.0\n- @react-aria/tabs@3.3.2\n- @react-aria/tag@3.0.0-alpha.10\n- @react-aria/textfield@3.7.2\n- @react-aria/toggle@3.4.0\n- @react-aria/tooltip@3.3.2\n- @react-aria/utils@3.14.0\n- @react-aria/virtualizer@3.5.1\n- @react-aria/visually-hidden@3.5.0\n- @react-spectrum/accordion@3.0.0-alpha.13\n- @react-spectrum/actionbar@3.0.0-alpha.13\n- @react-spectrum/actiongroup@3.7.0\n- @react-spectrum/autocomplete@3.0.0-alpha.11\n- @react-spectrum/avatar@3.0.0-alpha.10\n- @react-spectrum/badge@3.0.0\n- @react-spectrum/breadcrumbs@3.5.2\n- @react-spectrum/button@3.10.0\n- @react-spectrum/buttongroup@3.4.2\n- @react-spectrum/calendar@3.1.2\n- @react-spectrum/card@3.0.0-alpha.12\n- @react-spectrum/checkbox@3.6.0\n- @react-spectrum/color@3.0.0-beta.16\n- @react-spectrum/combobox@3.6.0\n- @react-spectrum/contextualhelp@3.3.0\n- @react-spectrum/datepicker@3.2.0\n- @react-spectrum/dialog@3.5.2\n- @react-spectrum/divider@3.4.2\n- @react-spectrum/dnd@3.0.0-rc.0\n- @react-spectrum/form@3.5.0\n- @react-spectrum/icon@3.6.1\n- @react-spectrum/illustratedmessage@3.3.2\n- @react-spectrum/image@3.3.2\n- @react-spectrum/label@3.8.0\n- @react-spectrum/labeledvalue@3.0.0\n- @react-spectrum/layout@3.4.2\n- @react-spectrum/link@3.4.2\n- @react-spectrum/list@3.1.0\n- @react-spectrum/listbox@3.8.0\n- @react-spectrum/menu@3.8.2\n- @react-spectrum/meter@3.3.2\n- @react-spectrum/numberfield@3.4.2\n- @react-spectrum/overlays@3.8.0\n- @react-spectrum/picker@3.8.0\n- @react-spectrum/progress@3.3.2\n- @react-spectrum/provider@3.5.2\n- @react-spectrum/radio@3.4.0\n- @react-spectrum/searchfield@3.5.2\n- @react-spectrum/searchwithin@3.0.0-alpha.11\n- @react-spectrum/slider@3.3.0\n- @react-spectrum/statuslight@3.4.2\n- @react-spectrum/switch@3.3.2\n- @react-spectrum/table@3.4.0\n- @react-spectrum/tabs@3.3.2\n- @react-spectrum/tag@3.0.0-alpha.10\n- @react-spectrum/text@3.3.2\n- @react-spectrum/textfield@3.8.0\n- @react-spectrum/theme-dark@3.3.4\n- @react-spectrum/theme-default@3.3.4\n- @react-spectrum/theme-light@3.2.4\n- @react-spectrum/tooltip@3.3.2\n- @react-spectrum/utils@3.7.4\n- @react-spectrum/view@3.3.2\n- @react-spectrum/well@3.3.2\n- @react-stately/calendar@3.0.3\n- @react-stately/checkbox@3.3.0\n- @react-stately/collections@3.4.4\n- @react-stately/color@3.2.0\n- @react-stately/combobox@3.2.2\n- @react-stately/data@3.7.0\n- @react-stately/datepicker@3.1.0\n- @react-stately/dnd@3.0.0-rc.0\n- @react-stately/grid@3.4.0\n- @react-stately/layout@3.8.0\n- @react-stately/list@3.5.4\n- @react-stately/menu@3.4.2\n- @react-stately/numberfield@3.2.2\n- @react-stately/overlays@3.4.2\n- @react-stately/radio@3.6.0\n- @react-stately/searchfield@3.3.2\n- @react-stately/select@3.3.2\n- @react-stately/selection@3.11.0\n- @react-stately/slider@3.2.2\n- @react-stately/table@3.5.0\n- @react-stately/tabs@3.2.2\n- @react-stately/toggle@3.4.2\n- @react-stately/tooltip@3.2.2\n- @react-stately/tree@3.3.4\n- @react-stately/virtualizer@3.3.1\n- @react-types/accordion@3.0.0-alpha.10\n- @react-types/actionbar@3.0.0-alpha.10\n- @react-types/actiongroup@3.3.4\n- @react-types/autocomplete@3.0.0-alpha.9\n- @react-types/avatar@3.0.0-alpha.9\n- @react-types/badge@3.0.0\n- @react-types/breadcrumbs@3.4.4\n- @react-types/button@3.6.2\n- @react-types/buttongroup@3.2.4\n- @react-types/calendar@3.0.3\n- @react-types/card@3.0.0-alpha.10\n- @react-types/checkbox@3.4.0\n- @react-types/color@3.0.0-beta.13\n- @react-types/combobox@3.5.4\n- @react-types/contextualhelp@3.1.4\n- @react-types/datepicker@3.1.2\n- @react-types/dialog@3.4.4\n- @react-types/divider@3.2.4\n- @react-types/form@3.4.0\n- @react-types/grid@3.1.4\n- @react-types/illustratedmessage@3.2.4\n- @react-types/image@3.2.4\n- @react-types/label@3.7.0\n- @react-types/layout@3.3.4\n- @react-types/link@3.3.4\n- @react-types/list@3.1.0\n- @react-types/listbox@3.3.4\n- @react-types/menu@3.7.2\n- @react-types/meter@3.2.4\n- @react-types/numberfield@3.3.4\n- @react-types/overlays@3.6.4\n- @react-types/progress@3.2.4\n- @react-types/provider@3.5.4\n- @react-types/radio@3.3.0\n- @react-types/searchfield@3.3.4\n- @react-types/searchwithin@3.0.0-alpha.9\n- @react-types/select@3.6.4\n- @react-types/shared@3.15.0\n- @react-types/slider@3.3.0\n- @react-types/statuslight@3.2.4\n- @react-types/switch@3.2.4\n- @react-types/table@3.3.2\n- @react-types/tabs@3.1.4\n- @react-types/tag@3.0.0-alpha.8\n- @react-types/text@3.2.4\n- @react-types/textfield@3.6.0\n- @react-types/tooltip@3.2.4\n- @react-types/view@3.2.4\n- @react-types/well@3.2.4\n- @spectrum-icons/color@3.4.3\n- @spectrum-icons/illustrations@3.5.0\n- @spectrum-icons/ui@3.3.3\n- @spectrum-icons/workflow@4.0.3\n- react-aria@3.20.0\n- react-stately@3.18.0\n```\n\n----------------------------------------\n\nTITLE: Hiding description slot in SelectValue - React Spectrum - CSS\nDESCRIPTION: Styles the SelectValue so that child elements with slot=description are hidden by default. Depends on structure of .react-aria-SelectValue inside .react-aria-Select. Expects slot attributes to be present. Input: CSS selectors. Output: Hide secondary descriptions from display by default in select value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Select {\\n  .react-aria-SelectValue {\\n    [slot=description] {\\n      display: none;\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Checkbox Component with React Aria\nDESCRIPTION: This code demonstrates how to create a reusable Checkbox component using the useCheckbox hook from React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCheckbox} from '@react-aria/checkbox';\nimport {useToggleState} from '@react-stately/toggle';\n\nfunction Checkbox(props) {\n  let inputRef = useRef(null);\n  let { inputProps } = useCheckbox(\n    props,\n    useToggleState(props),\n    inputRef\n  );\n  return <input {...inputProps} ref={inputRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout Component - React/JavaScript\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the '@react-spectrum/docs' module and exports BlogPostLayout as the default export. It serves as the entry point enabling the rendering of documentation blog posts with a consistent layout in the React Spectrum documentation portal. Required dependencies: React, '@react-spectrum/docs' library. No additional parameters are needed, and its purpose is purely layout management; no user input or output is directly handled by this snippet.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-08-26.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Tools and Metadata (JavaScript)\nDESCRIPTION: Imports documentation metadata (from a virtual docs module), React context providers, and package meta information to enable rich documentation rendering for the useListState API. The dependencies are @react-stately/list, @react-spectrum/docs, and associated package.json. These imports enable dynamic documentation features such as code linking, interface rendering, and description propagation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/list/docs/useListState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/list';\nimport {HeaderInfo, TypeContext, InterfaceType, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/list/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Dialog Package\nDESCRIPTION: A markdown code snippet showing the package name for the React Spectrum dialog component that can be imported into React applications.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/dialog\n```\n\n----------------------------------------\n\nTITLE: Defining NumberField Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the NumberField component that extends multiple base interfaces. Includes properties for quiet state, ARIA labels, stepper visibility, and number formatting options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/NumberField.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberField extends InputBase, TextInputBase, ValueBase<number>, RangeInputBase<number>, Labelable, DOMProps, StyleProps {\n  isQuiet?: boolean,\n  decrementAriaLabel?: string,\n  incrementAriaLabel?: string,\n  hideStepper?: boolean,\n  formatOptions?: Intl.NumberFormatOptions\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useStepList Hook in React Aria (JSX)\nDESCRIPTION: This snippet demonstrates the standard way to import the `useStepList` hook from the `@react-aria/steplist` package. This import makes the hook available for use within a React component to manage the state and accessibility properties of a step list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/steplist/docs/useStepList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useStepList} from '@react-aria/steplist';\n```\n\n----------------------------------------\n\nTITLE: Importing Content Component in React Spectrum (JSX)\nDESCRIPTION: Imports the `Content` component from the `@react-spectrum/view` package. This statement makes the component available for use within the current scope, typically in React component definitions or MDX documentation examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/view/docs/Content.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Content} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to React Aria Component using JSX\nDESCRIPTION: This JSX snippet shows how to assign a custom CSS class name (`my-dropzone`) to a React Aria `DropZone` component using the `className` prop. Providing a custom `className` string overrides the default `react-aria-DropZone` class generated by the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<DropZone className=\"my-dropzone\">\n  {/* ... */}\n</DropZone>\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook Description using PageDescription Component in JSX\nDESCRIPTION: Uses the `PageDescription` component from `@react-spectrum/docs` to render the description of the `useOverlayTriggerState` hook. The description content is dynamically fetched from the imported `docs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/overlays/docs/useOverlayTriggerState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<PageDescription>{docs.exports.useOverlayTriggerState.description}</PageDescription>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering an Accessibility Demo Component in TSX\nDESCRIPTION: This TSX snippet imports the `A11y` component from './home/A11y' and renders it. It is placed within a section focused on accessibility and displayed inside a visual representation of an iPhone frame, suggesting it demonstrates accessibility features in a mobile context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx snippet\nimport {A11y} from './home/A11y';\n\n<A11y />\n```\n```\n\n----------------------------------------\n\nTITLE: Styling the ListBox Root Drop Target (css)\nDESCRIPTION: Provides CSS to style the listbox element (`[role=listbox]`) when it has the `.drop-target` class, indicating it's the active target for a root drop. It applies an inset box shadow using a variable (`--blue`) for visual feedback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n[role=listbox].drop-target {\n  box-shadow: inset 0 0 0 2px var(--blue);\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Old URLs Using HTML Meta Tag - HTML\nDESCRIPTION: This snippet provides an HTML instruction to immediately redirect users from outdated or legacy URLs to 'index.html' using the meta refresh mechanism. No external dependencies are required, and it must be included in the <head> section of any HTML page that must support backward compatibility. The redirect is set to occur after 0 seconds; users are transparently forwarded, and search engines recognize the content move, but SEO implications should be considered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/react-aria-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\\\"refresh\\\" content=\\\"0; url=index.html\\\" />\n```\n\n----------------------------------------\n\nTITLE: Released React Spectrum Packages List in Markdown\nDESCRIPTION: Complete list of released packages in the React Spectrum ecosystem, including React Aria, React Stately, React Spectrum components, and related utilities with their version numbers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-09-07.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- @adobe/react-spectrum@3.30.0\n- @internationalized/date@3.5.0\n- @react-aria/accordion@3.0.0-alpha.21\n- @react-aria/actiongroup@3.6.2\n- @react-aria/aria-modal-polyfill@3.7.5\n- @react-aria/autocomplete@3.0.0-alpha.20\n- @react-aria/breadcrumbs@3.5.5\n- @react-aria/button@3.8.2\n- @react-aria/calendar@3.5.0\n- @react-aria/checkbox@3.11.0\n- @react-aria/color@3.0.0-beta.24\n- @react-aria/combobox@3.6.4\n- @react-aria/datepicker@3.7.0\n- @react-aria/dialog@3.5.5\n- @react-aria/dnd@3.4.1\n- @react-aria/focus@3.14.1\n- @react-aria/grid@3.8.2\n- @react-aria/gridlist@3.6.0\n- @react-aria/i18n@3.8.2\n- @react-aria/interactions@3.18.0\n- @react-aria/label@3.7.0\n- @react-aria/landmark@3.0.0-beta.4\n- @react-aria/link@3.5.4\n- @react-aria/listbox@3.10.2\n- @react-aria/menu@3.10.2\n- @react-aria/meter@3.4.5\n- @react-aria/numberfield@3.8.0\n- @react-aria/overlays@3.17.0\n- @react-aria/progress@3.4.5\n- @react-aria/radio@3.8.0\n- @react-aria/searchfield@3.5.5\n- @react-aria/select@3.12.1\n- @react-aria/selection@3.16.2\n- @react-aria/separator@3.3.5\n- @react-aria/slider@3.7.0\n- @react-aria/spinbutton@3.5.2\n- @react-aria/ssr@3.8.0\n- @react-aria/switch@3.5.4\n- @react-aria/table@3.12.0\n- @react-aria/tabs@3.7.0\n- @react-aria/tag@3.1.2\n- @react-aria/textfield@3.12.0\n- @react-aria/toast@3.0.0-beta.4\n- @react-aria/toggle@3.8.0\n- @react-aria/tooltip@3.6.2\n- @react-aria/utils@3.20.0\n- @react-aria/virtualizer@3.9.2\n- @react-aria/visually-hidden@3.8.4\n- @react-spectrum/accordion@3.0.0-alpha.23\n- @react-spectrum/actionbar@3.2.0\n- @react-spectrum/actiongroup@3.9.2\n- @react-spectrum/autocomplete@3.0.0-alpha.21\n- @react-spectrum/avatar@3.0.4\n- @react-spectrum/badge@3.1.5\n- @react-spectrum/breadcrumbs@3.8.2\n- @react-spectrum/button@3.13.0\n- @react-spectrum/buttongroup@3.6.5\n- @react-spectrum/calendar@3.4.0\n- @react-spectrum/card@3.0.0-alpha.22\n- @react-spectrum/checkbox@3.8.0\n- @react-spectrum/color@3.0.0-beta.25\n- @react-spectrum/combobox@3.10.1\n- @react-spectrum/contextualhelp@3.6.2\n- @react-spectrum/datepicker@3.7.1\n- @react-spectrum/dialog@3.8.2\n- @react-spectrum/divider@3.5.5\n- @react-spectrum/dnd@3.3.2\n- @react-spectrum/form@3.6.5\n- @react-spectrum/icon@3.7.5\n- @react-spectrum/illustratedmessage@3.4.5\n- @react-spectrum/image@3.4.5\n- @react-spectrum/inlinealert@3.1.0\n- @react-spectrum/label@3.14.0\n- @react-spectrum/labeledvalue@3.1.5\n- @react-spectrum/layout@3.5.5\n- @react-spectrum/link@3.5.5\n- @react-spectrum/list@3.6.2\n- @react-spectrum/listbox@3.11.2\n- @react-spectrum/menu@3.14.0\n- @react-spectrum/meter@3.4.5\n- @react-spectrum/numberfield@3.7.1\n- @react-spectrum/overlays@5.4.0\n- @react-spectrum/picker@3.12.0\n- @react-spectrum/progress@3.6.2\n- @react-spectrum/provider@3.8.2\n- @react-spectrum/radio@3.6.0\n- @react-spectrum/searchfield@3.7.5\n- @react-spectrum/slider@3.6.1\n- @react-spectrum/statuslight@3.5.5\n- @react-spectrum/switch@3.4.5\n- @react-spectrum/table@3.11.1\n- @react-spectrum/tabs@3.7.2\n- @react-spectrum/tag@3.1.2\n- @react-spectrum/text@3.4.5\n- @react-spectrum/textfield@3.10.5\n- @react-spectrum/theme-dark@3.5.5\n- @react-spectrum/theme-default@3.5.5\n- @react-spectrum/theme-express@3.0.0-alpha.7\n- @react-spectrum/theme-light@3.4.5\n- @react-spectrum/toast@3.0.0-beta.4\n- @react-spectrum/tooltip@3.5.4\n- @react-spectrum/utils@3.10.2\n- @react-spectrum/view@3.6.2\n- @react-spectrum/well@3.4.5\n- @react-stately/calendar@3.4.0\n- @react-stately/checkbox@3.5.0\n- @react-stately/collections@3.10.1\n- @react-stately/color@3.4.2\n- @react-stately/combobox@3.7.0\n- @react-stately/data@3.10.2\n- @react-stately/datepicker@3.7.0\n- @react-stately/dnd@3.2.4\n- @react-stately/grid@3.8.1\n- @react-stately/layout@3.13.1\n- @react-stately/list@3.9.2\n- @react-stately/menu@3.5.5\n- @react-stately/numberfield@3.6.1\n- @react-stately/overlays@3.6.2\n- @react-stately/radio@3.9.0\n- @react-stately/searchfield@3.4.5\n- @react-stately/select@3.5.4\n- @react-stately/selection@3.13.4\n- @react-stately/slider@3.4.2\n- @react-stately/table@3.11.1\n- @react-stately/tabs@3.6.0\n- @react-stately/toggle@3.6.2\n- @react-stately/tooltip@3.4.4\n- @react-stately/tree@3.7.2\n- @react-stately/virtualizer@3.6.2\n- @react-types/accordion@3.0.0-alpha.16\n- @react-types/actionbar@3.1.2\n- @react-types/actiongroup@3.4.4\n- @react-types/autocomplete@3.0.0-alpha.16\n- @react-types/avatar@3.0.2\n- @react-types/badge@3.1.4\n- @react-types/breadcrumbs@3.6.2\n- @react-types/button@3.8.0\n- @react-types/buttongroup@3.3.4\n- @react-types/calendar@3.4.0\n- @react-types/card@3.0.0-alpha.18\n- @react-types/checkbox@3.5.1\n- @react-types/color@3.0.0-beta.19\n- @react-types/combobox@3.8.0\n- @react-types/contextualhelp@3.2.5\n- @react-types/datepicker@3.6.0\n- @react-types/dialog@3.5.5\n- @react-types/divider@3.3.4\n- @react-types/form@3.5.3\n- @react-types/grid@3.2.1\n- @react-types/illustratedmessage@3.3.4\n- @react-types/image@3.3.4\n- @react-types/label@3.8.0\n- @react-types/layout@3.3.10\n- @react-types/link@3.4.5\n- @react-types/list@3.2.6\n- @react-types/listbox@3.4.4\n- @react-types/menu@3.9.4\n- @react-types/meter@3.3.4\n- @react-types/numberfield@3.6.0\n- @react-types/overlays@3.8.2\n- @react-types/progress@3.4.3\n- @react-types/provider@3.6.4\n- @react-types/radio@3.5.1\n- @react-types/searchfield@3.5.0\n- @react-types/select@3.8.3\n- @react-types/shared@3.20.0\n- @react-types/slider@3.6.1\n- @react-types/statuslight@3.3.4\n- @react-types/switch@3.4.1\n- @react-types/table@3.8.1\n- @react-types/tabs@3.3.2\n- @react-types/text@3.3.4\n- @react-types/textfield@3.8.0\n- @react-types/tooltip@3.4.4\n- @react-types/view@3.4.4\n- @react-types/well@3.3.4\n- @spectrum-icons/color@3.5.5\n- @spectrum-icons/express@3.0.0-alpha.9\n- @spectrum-icons/illustrations@3.6.5\n- @spectrum-icons/ui@3.5.5\n- @spectrum-icons/workflow@4.2.4\n- react-aria@3.28.0\n- react-aria-components@1.0.0-beta.0\n- react-stately@3.26.0\n- tailwindcss-react-aria-components@1.0.0-beta.0\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata (Markdown Frontmatter)\nDESCRIPTION: Specifies metadata for the blog post using YAML frontmatter syntax within Markdown. Includes keywords for searchability, a description summarizing the post, the publication date, and the author's name with a link.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/drag-and-drop.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nkeywords: [drag and drop, dnd, components, accessibility, keyboard, mobile, react spectrum, react, spectrum, interactions, touch]\ndescription: We are excited to announce the release of drag and drop support in [React Aria](https://react-spectrum.adobe.com/react-aria/dnd.html) and [React Spectrum](https://react-spectrum.adobe.com/react-spectrum/dnd.html)! This includes a suite of hooks for implementing drag and drop interactions, with support for both mouse and touch, as well as full parity for keyboard and screen reader input.\ndate: 2022-11-16\nauthor: '[Devon Govett](https://x.com/devongovett)'\n---\n```\n\n----------------------------------------\n\nTITLE: Allowing Custom Input Values in ComboBox using TSX\nDESCRIPTION: Demonstrates how to enable users to input custom values (not present in the predefined list) into the ComboBox by using the `allowsCustomValue` prop. The input value will not reset on blur if it doesn't match an existing option.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntsx example\nfunction Example() {\n  let options = [\n    {name: 'Apple'},\n    {name: 'Banana'},\n    {name: 'Orange'},\n    {name: 'Honeydew'},\n    {name: 'Grapes'},\n    {name: 'Watermelon'},\n    {name: 'Cantaloupe'},\n    {name: 'Pear'}\n  ];\n\n  return (\n    <>\n      <p>\n        Please indicate what fruit you would like included with your delivery. If your desired choice does not appear in the list\n        feel free to write your own selection.\n      </p>\n      <ComboBox\n        label=\"Preferred fruit\"\n        defaultItems={options}\n        allowsCustomValue>\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </ComboBox>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component with React Spectrum Docs - JavaScript\nDESCRIPTION: This snippet imports the Layout component from the @react-spectrum/docs package and exports it as the default export. This establishes the base documentation layout for the page. No additional dependencies are required beyond @react-spectrum/docs. The file expects to be used as a documentation page within the React Spectrum documentation framework.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/dnd/docs/useDroppableCollectionState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Layout with React Spectrum in JavaScript\nDESCRIPTION: This snippet imports the main Layout component from the @react-spectrum/docs package and exports it as the default export, setting up the documentation page structure. It ensures that all subsequent documentation content is rendered within the consistent React Spectrum documentation layout. There are no parameters or outputs since it is a top-level import/export; the only dependency is the @react-spectrum/docs package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/selection/docs/SelectionManager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Components in JSX\nDESCRIPTION: This JSX snippet structures the main content of the documentation page. It uses imported components like `PageDescription`, `HeaderInfo`, `FunctionAPI`, and `ClassAPI` to display the description, package info, function signature, and return type interface for the `useDateFieldState` hook, using data passed via props (`docs`, `packageData`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateFieldState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n# useDateFieldState\n\n<PageDescription>{docs.exports.useDateFieldState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useDateFieldState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useDateFieldState} links={docs.links} />\n\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useDateFieldState.return.id]} />\n\n## Example\n\nSee the docs for [useDateField](/react-aria/useDateField.html) in react-aria for an example of `useDateFieldState`.\n```\n\n----------------------------------------\n\nTITLE: Referencing @react-aria/separator Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-aria/separator package using Markdown syntax. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/separator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/separator\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Building a RadioGroup Component with useRadioGroupState (TypeScript)\nDESCRIPTION: Provides an example of a simple functional `RadioGroup` component built using the `useRadioGroupState` hook from React Stately. The hook manages the selection state and generates a common name for the radio inputs. The example demonstrates uncontrolled usage with `defaultValue` and handling selection changes via the `onChange` prop passed to the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-stately/getting-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRadioGroupState} from '@react-stately/radio';\n\nfunction RadioGroup(props) {\n  let state = useRadioGroupState(props);\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"radio\"\n          name={state.name}\n          checked={state.selectedValue === 'dogs'}\n          onChange={() => state.setSelectedValue('dogs')} />\n        Dogs\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          name={state.name}\n          checked={state.selectedValue === 'cats'}\n          onChange={() => state.setSelectedValue('cats')} />\n        Cats\n      </label>\n    </>\n  );\n}\n\n<RadioGroup\n  defaultValue=\"dogs\"\n  onChange={value => alert(`Selected ${value}`)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing onInsert Handler for Drop Between Items in React Spectrum\nDESCRIPTION: Creates a handler that processes items dropped between list items. It parses the JSON data from each dropped item and inserts them before or after the target based on the drop position.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/docs/dnd.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nlet onInsert = async (e) => {\n  let {\n    items,\n    target\n  } = e;\n\n  let processedItems = await Promise.all(\n    items.map(async item => JSON.parse(await item.getText('adobe-app')))\n  );\n\n  if (target.dropPosition === 'before') {\n    list.insertBefore(target.key, ...processedItems);\n  } else if (target.dropPosition === 'after') {\n    list.insertAfter(target.key, ...processedItems);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ContactPicker Component with Error Message\nDESCRIPTION: This example demonstrates using the ContactPicker component with a label and error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/label/docs/useField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ContactPicker\n  label=\"Preferred contact method\"\n  errorMessage=\"Select a contact method.\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only ColorField in React Aria\nDESCRIPTION: This example demonstrates how to create a read-only ColorField using the isReadOnly prop. The field remains focusable but its value cannot be changed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorField label=\"Read only\" isReadOnly value=\"#7f007f\" />\n```\n\n----------------------------------------\n\nTITLE: Documentation Components Imports\nDESCRIPTION: Imports various documentation-related components, types, and assets for the combobox documentation\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/docs/useComboBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-aria/combobox';\nimport collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';\nimport {FunctionAPI, HeaderInfo, InterfaceType, TypeContext, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport i18nDocs from 'docs:@react-aria/i18n';\nimport listboxDocs from 'docs:@react-aria/listbox';\nimport overlaysDocs from 'docs:@react-aria/overlays';\nimport packageData from '@react-aria/combobox/package.json';\nimport selectionDocs from 'docs:@react-stately/selection';\nimport statelyDocs from 'docs:@react-stately/combobox';\nimport Anatomy from './anatomy.svg';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport examplePreview from 'url:./example.png';\nimport searchExamplePreview from 'url:./search.png';\nimport materialExamplePreview from 'url:./material.png';\nimport styledExamplePreview from 'url:./styled-components.png';\nimport chakraExamplePreview from 'url:./chakra.png';\n```\n\n----------------------------------------\n\nTITLE: Using SelectTester utility class for Picker interactions in JSX\nDESCRIPTION: This code snippet illustrates the usage of a proposed SelectTester utility class to simplify testing of a Picker component. It demonstrates rendering the component, creating a tester instance, selecting an option, and asserting the result.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-rsp-testing-utils.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nrender(\n  <Provider theme={theme}>\n    <Picker label=\"Test\" data-testid=\"test\" onSelectionChange={onSelectionChange} onOpenChange={onOpenChange}>\n      <Item key=\"one\">One</Item>\n      <Item key=\"two\">Two</Item>\n      <Item key=\"three\">Three</Item>\n    </Picker>\n  </Provider>\n);\n\nlet picker = new SelectTester({element: screen.getByTestId('test'), timerType: 'real'});\nawait picker.selectOption('Three');\nexpect(picker.trigger).toHaveTextContent('Three');\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Reference to the @react-spectrum/progress package and its relationship to the main React Spectrum repository.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/progress\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Searchable Select\nDESCRIPTION: Describes the Tailwind CSS configuration required for the Searchable Select component, including necessary plugins and import statements for different Tailwind versions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/searchable-select.mdx#2025-04-23_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS for React Aria Components\nDESCRIPTION: Imports the Tailwind CSS global styles for use with the components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/shipping-radio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Global Styles in React Component\nDESCRIPTION: Imports the global Tailwind CSS file (`tailwind.global.css`) needed for styling the components within the React application. This ensures that Tailwind's base styles, utilities, and component classes are available throughout the example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/image-grid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Listing Newly Added Spectrum Workflow Icons\nDESCRIPTION: Lists the two new icons, `CircleFilled` and `Invite`, that have been added to the Spectrum workflow icons package in this release. Additionally, it notes that the previous `Circle` icon is now named `CircleFilled`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-05-27.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCircleFilled\nInvite\n```\n\n----------------------------------------\n\nTITLE: Referencing React Stately Collections Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-stately/collections package using Markdown syntax. It provides a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-stately/collections\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Small Size Breadcrumbs Navigation - React Spectrum - TypeScript\nDESCRIPTION: This snippet illustrates how to render a Breadcrumbs navigation component in small size by specifying the size=\"S\" prop. It accepts any standard Item components as children, each with key and label. Useful for cases when a compact breadcrumbs visual is required. Only @react-spectrum/breadcrumbs is needed as a dependency; no additional setup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/breadcrumbs/docs/Breadcrumbs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Breadcrumbs size=\"S\">\n  <Item key=\"home\">Home</Item>\n  <Item key=\"trendy\">Trendy</Item>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Linting\nDESCRIPTION: Command to run ESLint to check for code style and quality issues in the codebase.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands for starting the Next.js development server using different package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/next-app-csp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: TextArea Visual Options in React Spectrum\nDESCRIPTION: Demonstrates various visual options for TextArea, including quiet, disabled, and read-only states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<TextArea label=\"Email\" isQuiet />\n<TextArea label=\"Email\" isDisabled />\n<TextArea label=\"Email\" defaultValue=\"abc@adobe.com\" isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Integrating React Spectrum Checkbox with HTML Forms\nDESCRIPTION: Demonstrates how to use the `name` and `value` props on the Checkbox component. This allows the checkbox's state to be included in standard HTML form submissions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/Checkbox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox name=\"newsletter\" value=\"subscribe\">Subscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Creating a General Container Card Component in React\nDESCRIPTION: Demonstrates how to create a more flexible Card component that accepts children and applies slots.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-slots.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Card = (props) => {\n  let defaults = {slots: {\n      container: {UNSAFE_className: classNames(styles, 'container')},\n      preview: {UNSAFE_className: classNames(styles, 'preview')},\n      avatar: {UNSAFE_className: classNames(styles, 'avatar')},\n      title: {UNSAFE_className: classNames(styles, 'title')},\n      footer: {UNSAFE_className: classNames(styles, 'footer')},\n      divider: {UNSAFE_className: classNames(styles, 'divider')},\n      buttonGroup: {UNSAFE_className: classNames(styles, 'buttonGroup')}\n    }};\n  let {slots} = {...defaults, ...props};\n\n  return (\n    <div className={classNames(styles, 'spectrum-Card')}>\n      <Grid slots={slots}>\n        {props.children}\n      </Grid>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Test IDs with React Aria Components\nDESCRIPTION: Shows how to add and use test ids with React Aria Components for more specific element targeting in tests, using React Testing Library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/testing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render} from '@testing-library/react';\nimport {Input, Label, TextField} from 'react-aria-components';\n\nfunction LoginForm() {\n  return (\n    <>\n      <TextField data-testid=\"username\">\n        <Label>Username</Label>\n        <Input />\n      </TextField>\n      <TextField data-testid=\"password\">\n        <Label>Username</Label>\n        <Input />\n      </TextField>\n    </>\n  );\n}\n\nlet tree = render(<LoginForm />);\nlet username = tree.getByTestId('username');\nlet password = tree.getByTestId('password');\n```\n\n----------------------------------------\n\nTITLE: Converting Between Hebrew and Gregorian Calendars in TypeScript\nDESCRIPTION: Demonstrates how to create dates in Hebrew and Gregorian calendars and convert between them using the toCalendar function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Calendar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {HebrewCalendar, GregorianCalendar, toCalendar} from '@internationalized/date';\n\nlet hebrewDate = new CalendarDate(new HebrewCalendar(), 5781, 1, 1);\ntoCalendar(hebrewDate, new GregorianCalendar());\n// => new CalendarDate(new GregorianCalendar(), 2020, 9, 19);\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout in React Spectrum Documentation - JavaScript\nDESCRIPTION: This JavaScript code snippet imports BlogPostLayout and Hero components from the @react-spectrum/docs package and immediately exports BlogPostLayout as the default export. This pattern enables the file to serve as a documentation page layout provider, commonly used in Next.js or MDX-based documentation systems. The Hero component is imported, possibly for use elsewhere in the file or in extended components, but is not explicitly used or exported here.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-12-16.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Simple markdown reference to the package name and its relation to the React Spectrum project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/actiongroup/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-aria/actiongroup\n```\n\n----------------------------------------\n\nTITLE: Aggregating Documentation Data for useColorWheelState - JavaScript\nDESCRIPTION: This code imports documentation metadata and various documentation-oriented React components, including doc generators and package.json information, to compose the rest of the documentation page dynamically. These imports are prerequisites for rendering API details and type information for useColorWheelState. It depends on \"docs:@react-stately/color\", \"@react-spectrum/docs\", and the color package's package.json.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorWheelState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-stately/color';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/color/package.json';\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for React Spectrum Slider Components\nDESCRIPTION: Shows how to apply CSS styling to React Aria components using the default className selector pattern which follows the 'react-aria-ComponentName' convention.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Slider {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Select Components with CSS\nDESCRIPTION: CSS styles for customizing the appearance of Select items, including focus, selection states, and high contrast mode support. Includes positioning for the selection indicator and styling for interactive states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.my-item {\n  margin: 2px;\n  padding: 4px 8px 4px 22px;\n  border-radius: 6px;\n  outline: none;\n  cursor: default;\n  color: var(--text-color);\n  font-size: 1.072rem;\n  position: relative;\n\n  &.selected {\n    font-weight: 600;\n    background: none;\n\n    &::before {\n      content: '✓';\n      content: '✓' / '';\n      alt: ' ';\n      position: absolute;\n      top: 4px;\n      left: 4px;\n    }\n  }\n\n  &.focused {\n    background: #e70073;\n    color: white;\n  }\n}\n\n@media (forced-colors: active) {\n  .my-item.focused {\n    background: Highlight;\n    color: HighlightText;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the DropZone Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'DropZone' component. It renders a designated area into which users can drag and drop one or multiple files or objects. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_53\n\nLANGUAGE: jsx\nCODE:\n```\n<DropZone />\n```\n\n----------------------------------------\n\nTITLE: Representing Code or Technical Terms using <code> Tag (HTML)\nDESCRIPTION: The HTML `<code>` tag is used in the documentation to denote technical terms, ARIA roles, or element types related to the Menu component implementation (e.g., 'menu', 'menubar', 'menuitem') as defined by WAI-ARIA standards.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Menu.mdx#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<code>menu</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>menubar</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>menuitem</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>menuitemradio</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>menuitemcheckbox</code>\n```\n\n----------------------------------------\n\nTITLE: Disabled ActionMenu in React Spectrum\nDESCRIPTION: Demonstrates how to create a fully disabled ActionMenu using the isDisabled prop, which prevents all interaction with the menu.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/menu/docs/ActionMenu.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionMenu\n  items={[\n    {name: 'Undo', id: 'undo'},\n    {name: 'Redo', id: 'redo'},\n    {name: 'Cut', id: 'cut'},\n    {name: 'Copy', id: 'copy'},\n    {name: 'Paste', id: 'paste'}\n  ]}\n  isDisabled>\n  {item => <Item>{item.name}</Item>}\n</ActionMenu>\n```\n\n----------------------------------------\n\nTITLE: Using the NumberField Component\nDESCRIPTION: Demonstrates how to use the NumberField component with currency formatting options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<NumberField\n  label=\"Price\"\n  defaultValue={6}\n  formatOptions={{\n    style: 'currency',\n    currency: 'USD'\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Data with SearchAutocomplete via defaultItems in TSX\nDESCRIPTION: Demonstrates populating `SearchAutocomplete` with dynamic data using the `defaultItems` prop. An array of `options` (engineering majors) is passed, and a render function maps each `item` object to an `<Item>` component displaying `item.name`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    {id: 1, name: 'Aerospace'},\n    {id: 2, name: 'Mechanical'},\n    {id: 3, name: 'Civil'},\n    {id: 4, name: 'Biomedical'},\n    {id: 5, name: 'Nuclear'},\n    {id: 6, name: 'Industrial'},\n    {id: 7, name: 'Chemical'},\n    {id: 8, name: 'Agricultural'},\n    {id: 9, name: 'Electrical'}\n  ];\n\n  return (\n    <SearchAutocomplete\n      label=\"Search engineering majors\"\n      defaultItems={options}>\n      {item => <Item>{item.name}</Item>}\n    </SearchAutocomplete>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Data for useColorSliderState\nDESCRIPTION: This snippet imports various documentation components, the useColorSliderState docs, and package data for rendering the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorSliderState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-stately/color';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/color/package.json';\n```\n\n----------------------------------------\n\nTITLE: Using the Badge Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'Badge' component. It renders a badge element used to display color-categorized metadata or status information for an object. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_51\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge />\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Color Package in Markdown\nDESCRIPTION: This snippet shows how to reference the @react-aria/color package in a Markdown file. It includes a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/color\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Converting Between Calendar Systems - TypeScript\nDESCRIPTION: Demonstrates converting a date from Gregorian to Hebrew calendar system using toCalendar function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toCalendar, HebrewCalendar} from '@internationalized/date';\n\nlet gregorianDate = new CalendarDateTime(2020, 9, 19, 10, 30);\nlet hebrewDate = toCalendar(gregorianDate, new HebrewCalendar());\n// => new CalendarDateTime(new HebrewCalendar(), 5781, 1, 1, 10, 30)\n```\n\n----------------------------------------\n\nTITLE: Disabled Link Component\nDESCRIPTION: Example showing a disabled Link component with the isDisabled property, which prevents navigation and interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Link.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Link isDisabled href=\"https://adobe.com\" target=\"_blank\">Disabled link</Link>\n```\n\n----------------------------------------\n\nTITLE: Importing Grid and Related Components in React Spectrum\nDESCRIPTION: Shows how to import the Grid and repeat functions from React Spectrum layout, along with the View component for creating grid items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/docs/Grid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Grid, repeat} from '@react-spectrum/layout';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled RangeCalendar (TSX)\nDESCRIPTION: This example shows how to create a disabled RangeCalendar using the isDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar aria-label=\"Trip dates\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a SwitchAnimation Component in TSX\nDESCRIPTION: This TSX snippet imports the `SwitchAnimation` component from './home/SwitchAnimation' and renders it. It's placed within a card describing touch-optimized interactions, indicating this component demonstrates such features.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx snippet\nimport {SwitchAnimation} from './home/SwitchAnimation';\n<SwitchAnimation />\n```\n```\n\n----------------------------------------\n\nTITLE: Using the MenuDivider Component in React Spectrum Menus (JSX)\nDESCRIPTION: Represents a visual separator between groups of items within a React Spectrum Menu. Corresponds to the ARIA role 'separator', which is specified as not focusable or interactive.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Menu.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuDivider/>\n```\n\n----------------------------------------\n\nTITLE: Listing Released Packages in Markdown - Markdown\nDESCRIPTION: This snippet displays a formatted list of all released packages and their corresponding versions for the Adobe React Spectrum project and related libraries. There are no functional dependencies or input parameters. The code is intended for human readability and documentation purposes, serving as a reference or changelog for project maintainers and users. It does not include any logic or programming constraints.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-08-04.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- @adobe/react-spectrum => 3.13.0\\n- @internationalized/message => 3.0.2\\n- @internationalized/number => 3.0.2\\n- @react-aria/accordion => 3.0.0-alpha.2\\n- @react-aria/actiongroup => 3.2.1\\n- @react-aria/aria-modal-polyfill => 3.4.0\\n- @react-aria/breadcrumbs => 3.1.5\\n- @react-aria/button => 3.3.3\\n- @react-aria/checkbox => 3.2.3\\n- @react-aria/color => 3.0.0-beta.3\\n- @react-aria/combobox => 3.0.1\\n- @react-aria/dialog => 3.1.4\\n- @react-aria/dnd => 3.0.0-alpha.3\\n- @react-aria/focus => 3.4.1\\n- @react-aria/grid => 3.0.0-rc.0\\n- @react-aria/i18n => 3.3.2\\n- @react-aria/interactions => 3.5.1\\n- @react-aria/label => 3.1.3\\n- @react-aria/link => 3.1.4\\n- @react-aria/listbox => 3.3.1\\n- @react-aria/live-announcer => 3.0.1\\n- @react-aria/menu => 3.2.3\\n- @react-aria/meter => 3.1.3\\n- @react-aria/numberfield => 3.0.1\\n- @react-aria/overlays => 3.7.2\\n- @react-aria/progress => 3.1.3\\n- @react-aria/radio => 3.1.5\\n- @react-aria/searchfield => 3.1.5\\n- @react-aria/select => 3.4.1\\n- @react-aria/selection => 3.5.1\\n- @react-aria/separator => 3.1.3\\n- @react-aria/slider => 3.0.3\\n- @react-aria/spinbutton => 3.0.1\\n- @react-aria/ssr => 3.0.3\\n- @react-aria/switch => 3.1.3\\n- @react-aria/table => 3.0.0-rc.0\\n- @react-aria/tabs => 3.0.1\\n- @react-aria/textfield => 3.3.1\\n- @react-aria/toggle => 3.1.4\\n- @react-aria/tooltip => 3.1.3\\n- @react-aria/utils => 3.8.2\\n- @react-aria/virtualizer => 3.3.4\\n- @react-aria/visually-hidden => 3.2.3\\n- @react-spectrum/accordion => 3.0.0-alpha.2\\n- @react-spectrum/actionbar => 3.0.0-alpha.2\\n- @react-spectrum/actiongroup => 3.2.2\\n- @react-spectrum/breadcrumbs => 3.2.3\\n- @react-spectrum/button => 3.5.1\\n- @react-spectrum/buttongroup => 3.2.2\\n- @react-spectrum/checkbox => 3.2.4\\n- @react-spectrum/color => 3.0.0-beta.3\\n- @react-spectrum/combobox => 3.0.1\\n- @react-spectrum/dialog => 3.3.3\\n- @react-spectrum/divider => 3.1.3\\n- @react-spectrum/form => 3.2.3\\n- @react-spectrum/icon => 3.3.2\\n- @react-spectrum/illustratedmessage => 3.1.3\\n- @react-spectrum/image => 3.1.3\\n- @react-spectrum/label => 3.3.4\\n- @react-spectrum/layout => 3.2.1\\n- @react-spectrum/link => 3.1.3\\n- @react-spectrum/list => 3.0.0-alpha.2\\n- @react-spectrum/listbox => 3.5.1\\n- @react-spectrum/menu => 3.4.0\\n- @react-spectrum/meter => 3.1.3\\n- @react-spectrum/numberfield => 3.0.1\\n- @react-spectrum/overlays => 3.4.4\\n- @react-spectrum/picker => 3.3.1\\n- @react-spectrum/progress => 3.1.3\\n- @react-spectrum/provider => 3.2.2\\n- @react-spectrum/radio => 3.1.4\\n- @react-spectrum/searchfield => 3.1.5\\n- @react-spectrum/searchwithin => 3.0.0-alpha.0\\n- @react-spectrum/slider => 3.0.4\\n- @react-spectrum/statuslight => 3.2.2\\n- @react-spectrum/switch => 3.1.3\\n- @react-spectrum/table => 3.0.0-rc.0\\n- @react-spectrum/tabs => 3.0.2\\n- @react-spectrum/text => 3.1.3\\n- @react-spectrum/textfield => 3.1.7\\n- @react-spectrum/theme-dark => 3.2.2\\n- @react-spectrum/theme-default => 3.2.2\\n- @react-spectrum/theme-light => 3.1.2\\n- @react-spectrum/tooltip => 3.1.4\\n- @react-spectrum/utils => 3.6.2\\n- @react-spectrum/view => 3.1.3\\n- @react-spectrum/well => 3.1.3\\n- @react-stately/checkbox => 3.0.3\\n- @react-stately/collections => 3.3.3\\n- @react-stately/color => 3.0.0-beta.3\\n- @react-stately/combobox => 3.0.1\\n- @react-stately/data => 3.4.1\\n- @react-stately/dnd => 3.0.0-alpha.2\\n- @react-stately/grid => 3.0.0-rc.0\\n- @react-stately/layout => 3.4.0\\n- @react-stately/list => 3.3.0\\n- @react-stately/menu => 3.2.3\\n- @react-stately/numberfield => 3.0.2\\n- @react-stately/overlays => 3.1.3\\n- @react-stately/radio => 3.3.2\\n- @react-stately/searchfield => 3.1.3\\n- @react-stately/select => 3.1.3\\n- @react-stately/selection => 3.7.0\\n- @react-stately/slider => 3.0.3\\n- @react-stately/table => 3.0.0-rc.0\\n- @react-stately/tabs => 3.0.1\\n- @react-stately/toggle => 3.2.3\\n- @react-stately/tooltip => 3.0.5\\n- @react-stately/tree => 3.2.0\\n- @react-stately/utils => 3.2.2\\n- @react-stately/virtualizer => 3.1.5\\n- @react-types/accordion => 3.0.0-alpha.1\\n- @react-types/actionbar => 3.0.0-alpha.1\\n- @react-types/actiongroup => 3.2.1\\n- @react-types/breadcrumbs => 3.2.1\\n- @react-types/button => 3.4.1\\n- @react-types/buttongroup => 3.1.2\\n- @react-types/checkbox => 3.2.3\\n- @react-types/color => 3.0.0-beta.2\\n- @react-types/combobox => 3.0.1\\n- @react-types/dialog => 3.3.1\\n- @react-types/divider => 3.1.2\\n- @react-types/form => 3.2.2\\n- @react-types/grid => 3.0.0-rc.0\\n- @react-types/illustratedmessage => 3.1.2\\n- @react-types/image => 3.1.2\\n- @react-types/label => 3.4.1\\n- @react-types/layout => 3.1.2\\n- @react-types/link => 3.1.3\\n- @react-types/listbox => 3.2.1\\n- @react-types/menu => 3.3.0\\n- @react-types/meter => 3.1.2\\n- @react-types/numberfield => 3.0.1\\n- @react-types/overlays => 3.5.1\\n- @react-types/progress => 3.1.2\\n- @react-types/provider => 3.3.2\\n- @react-types/radio => 3.1.2\\n- @react-types/searchfield => 3.1.2\\n- @react-types/searchwithin => 3.0.0-alpha.0\\n- @react-types/select => 3.3.1\\n- @react-types/shared => 3.8.0\\n- @react-types/slider => 3.0.2\\n- @react-types/statuslight => 3.1.2\\n- @react-types/switch => 3.1.2\\n- @react-types/tabs => 3.0.1\\n- @react-types/text => 3.1.3\\n- @react-types/textfield => 3.2.3\\n- @react-types/tooltip => 3.1.2\\n- @react-types/view => 3.1.2\\n- @react-types/well => 3.1.2\\n- @spectrum-icons/color => 3.3.1\\n- @spectrum-icons/illustrations => 3.2.2\\n- @spectrum-icons/ui => 3.2.1\\n- @spectrum-icons/workflow => 3.2.1\\n- react-aria => 3.9.0\\n- react-stately => 3.8.0\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in MDX/JavaScript\nDESCRIPTION: Imports the `Layout` component from `@react-spectrum/docs` and immediately exports it as the default export, setting up the basic page structure for the MDX documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorFieldState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Class API for useTableState Return Type in JSX\nDESCRIPTION: Uses the `ClassAPI` component to display the interface or type definition for the object returned by the `useTableState` hook. It dynamically retrieves the correct type information using an ID (`docs.exports.useTableState.return.base.id`) found within the imported `docs` data structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useTableState.return.base.id]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Dynamic TableView from Arrays - React Spectrum (TSX)\nDESCRIPTION: Shows how to render TableView using dynamic data collections for columns and rows. Arrays of columns and rows are defined as JavaScript objects. TableHeader and TableBody are generated by mapping these collections, utilizing keys (uid and id) for performance and accessibility. This method supports dynamic data (e.g., via APIs) and improves rendering performance via caching. Requires prior import of relevant TableView components. Inputs are column and row arrays; output is a dynamically generated table that responds to the supplied data.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet columns = [\n  {name: 'Name', uid: 'name'},\n  {name: 'Type', uid: 'type'},\n  {name: 'Date Modified', uid: 'date'}\n];\n\nlet rows = [\n  {id: 1, name: 'Games', date: '6/7/2020', type: 'File folder'},\n  {id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder'},\n  {id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file'},\n  {id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document'}\n];\n\n<TableView\n  aria-label=\"Example table with dynamic content\"\n  maxWidth=\"size-6000\">\n  <TableHeader columns={columns}>\n    {column => (\n      <Column\n        key={column.uid}\n        align={column.uid === 'date' ? 'end' : 'start'}>\n        {column.name}\n      </Column>\n    )}\n  </TableHeader>\n  <TableBody items={rows}>\n    {item => (\n      <Row>\n        {columnKey => <Cell>{item[columnKey]}</Cell>}\n      </Row>\n    )}\n  </TableBody>\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Indicators in GridList with CSS\nDESCRIPTION: This CSS code styles the drop indicator in a GridList. It highlights the indicator with a border when it's a drop target and includes a fallback for browsers that don't support the :has selector.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DropIndicator {\n  &[data-drop-target] {\n    outline: 1px solid var(--highlight-background);\n  }\n\n  @supports not selector(:has(.foo)) {\n    /* Undo gap in browsers that don't support :has */\n    margin-bottom: -2px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Image Package in Markdown\nDESCRIPTION: Shows the package name for the React Spectrum image component which is part of the larger React Spectrum library by Adobe.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/image/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/image\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Dependencies (JavaScript)\nDESCRIPTION: Imports necessary components and data for rendering the documentation page. This includes the main `Layout`, documentation data (`docs`) sourced from `@react-stately/dnd`, various display components (`HeaderInfo`, `TypeContext`, etc.) from `@react-spectrum/docs`, and package metadata (`packageData`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/dnd/docs/useDraggableCollectionState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-stately/dnd';\nimport {HeaderInfo, TypeContext, InterfaceType, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/dnd/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Components for 404 Page in JavaScript\nDESCRIPTION: This snippet imports necessary UI components from different React Spectrum packages (`@react-spectrum/docs`, `@react-spectrum/view`, `@react-spectrum/layout`, `@react-spectrum/text`, `@react-spectrum/illustratedmessage`) and an illustration icon (`@spectrum-icons/illustrations/NotFound`). The `Layout` component is exported as the default for structuring the page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/error.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport {Content} from '@react-spectrum/view';\nimport {Flex} from '@react-spectrum/layout';\nimport {Heading} from '@react-spectrum/text';\nimport {IllustratedMessage} from '@react-spectrum/illustratedmessage';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\n```\n\n----------------------------------------\n\nTITLE: Rendering a DateField with Flex Layout in React (TSX)\nDESCRIPTION: This snippet demonstrates rendering a DateField component labeled 'Birth date' inside a Flex container with column direction and center alignment. It requires the '@react-spectrum/datepicker' and '@react-spectrum/layout' (or equivalent Flex component) dependencies in a React environment. The main parameter is the label for the DateField component, and the user interacts with a segmented date input UI; the output is a visually aligned input field optimized for accessibility and internationalized date entry.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/date-and-time-pickers-for-all.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" alignItems=\"center\">\n  <DateField label=\"Birth date\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Handling onChange and onChangeEnd Events in ColorArea using TSX\nDESCRIPTION: Illustrates how to use the `onChange` and `onChangeEnd` event handlers with a controlled `ColorArea`. The `onChange` handler updates `currentValue` state continuously during drag, while `onChangeEnd` updates `finalValue` state only when the drag interaction finishes. Both handlers receive the updated color object (parsed using `parseColor`). The component displays both the continuously updating and final HSL color strings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea} from '@react-spectrum/color';\nimport {parseColor} from '@react-stately/color';\n\nfunction Example() {\n  let [currentValue, setCurrentValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n  let [finalValue, setFinalValue] = React.useState(parseColor('hsl(50, 100%, 50%)'));\n\n  return (\n    <div>\n      <ColorArea\n        value={currentValue}\n        onChange={setCurrentValue}\n        onChangeEnd={setFinalValue} />\n      <pre>Current value: {currentValue.toString('hsl')}</pre>\n      <pre>Final value: {finalValue.toString('hsl')}</pre>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Data\nDESCRIPTION: Imports various components and data needed for rendering the documentation page, including function API details, package data, and UI components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useAutocomplete.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-aria/autocomplete';\nimport {FunctionAPI, HeaderInfo, InterfaceType, TypeContext, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/autocomplete/package.json';\nimport statelyDocs from 'docs:@react-stately/autocomplete';\nimport {InlineAlert, Content, Heading} from '@adobe/react-spectrum';\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout Component in JSX\nDESCRIPTION: This JSX snippet imports the `BlogPostLayout` and `Hero` components from the '@react-spectrum/docs' package. It then exports `BlogPostLayout` as the default export, likely setting it up as the main layout component for a blog post page within a React application using React Spectrum documentation components. The copyright and license information is included as a comment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-09-07.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* Copyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom GridListItem Wrapper Component\nDESCRIPTION: Example of creating a wrapper component for GridListItem to customize its props, demonstrating advanced customization through composition.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_45\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyItem(props) {\n  return <GridListItem {...props} className=\"my-item\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Selection Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-aria/selection package in a Markdown file, providing a link to the main react-spectrum repository for more information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/selection/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/selection\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for Local Development\nDESCRIPTION: Command to run the Storybook development environment for React Spectrum, which will be available at http://localhost:9003.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Tooltip Package in Markdown\nDESCRIPTION: This code snippet shows how to reference the @react-spectrum/tooltip package in a Markdown file. It includes a link to the main React Spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/tooltip\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API for Row in JSX\nDESCRIPTION: Uses the `FunctionAPI` component to render the detailed API documentation for the `Row` type or component associated with the table state. It receives the specific API definition (`docs.exports.Row`) and related documentation links (`docs.links`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.Row} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Layout Component in JavaScript\nDESCRIPTION: Exports the `BlogPostLayout` component, previously imported from `@react-spectrum/docs`, as the default export for this module. This is likely used by a framework (like MDX or a static site generator) to wrap the content of the blog post.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Handling React Spectrum Build Failures\nDESCRIPTION: Demonstrates error messages that may appear when the build process fails. This is often due to using an incompatible Node.js version.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nparcel build packages/@react-{spectrum,aria,stately}/*/ packages/@internationalized/{message,string,date,number}/ packages/react-aria-components --no-optimize --config .parcelrc-build\nlibc++abi: terminating due to uncaught exception of type std::__1::system_error: mutex lock failed: Invalid argument\nmake: *** [build] Abort trap: 6\nparcel build packages/@react-{spectrum,aria,stately}/*/ packages/@internationalized/{message,string,date,number}/ packages/react-aria-components --no-optimize --config .parcelrc-build\nmake: *** [build] Segmentation fault: 11\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for Tailwind Integration\nDESCRIPTION: Imports the global Tailwind CSS file for styling the modal sheet component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component from React Spectrum\nDESCRIPTION: Shows how to import the Text component from the React Spectrum library for use in React applications.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/text/docs/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Text} from '@react-spectrum/text';\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component and Document Dependencies for React Spectrum Documentation\nDESCRIPTION: This section imports and exports the Layout component for documentation and defines imports for various documentation types and utilities used in the page. It sets up the required dependencies for rendering API documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/autocomplete';\nimport collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';\nimport {FunctionAPI, HeaderInfo, InterfaceType, TypeContext, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport i18nDocs from 'docs:@react-aria/i18n';\nimport overlaysDocs from 'docs:@react-aria/overlays';\nimport packageData from '@react-aria/autocomplete/package.json';\nimport selectionDocs from 'docs:@react-stately/selection';\nimport statelyDocs from 'docs:@react-stately/combobox';\nimport Anatomy from './anatomy.svg';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Button with useButton\nDESCRIPTION: This snippet shows how to create a disabled button using the isDisabled prop with the Button component implemented using useButton.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/button/docs/useButton.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button isDisabled>Pin</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining Robots.txt Crawler Rules - robots.txt\nDESCRIPTION: This snippet configures crawling policies for web robots, granting permission for all user agents to access all site paths. It requires no dependencies and should be placed in the root directory of the website to be effective. The inputs are the user-agent and path rules, and it enables all parts of the site for indexing without restrictions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Updating Item Data in Tree - useTreeData API (TypeScript)\nDESCRIPTION: This snippet shows how to update the value of an existing tree item using the update method, which receives the item's key and an updated item object. The method replaces the previous object with the new one, maintaining immutability of tree data. Input is the key and new value object; output is the updated tree state, ensuring React components reflect changes automatically.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useTreeData.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\ntree.update('Sam', {name: 'Samantha'});\n```\n\n----------------------------------------\n\nTITLE: React Spectrum Documentation Layout Setup\nDESCRIPTION: Imports and exports the Layout component from React Spectrum docs to structure the documentation page. This is part of the page setup for the documentation system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/focus/docs/useFocusRing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Creating a CalendarDate in Japanese Calendar\nDESCRIPTION: Demonstrates how to create a CalendarDate in the Japanese calendar system with a specific era, equivalent to April 30th, 2019 in the Gregorian calendar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {JapaneseCalendar} from '@internationalized/date';\n\nlet date = new CalendarDate(new JapaneseCalendar(), 'heisei', 31, 4, 30)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a MouseAnimation Component in TSX\nDESCRIPTION: This TSX snippet imports the `MouseAnimation` component from './home/MouseAnimation' and renders it. It's situated within a card highlighting mouse-enhanced features, suggesting the component showcases interactions specific to mouse input.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n  ```tsx snippet\n  import {MouseAnimation} from './home/MouseAnimation';\n  <MouseAnimation />\n  ```\n```\n\n----------------------------------------\n\nTITLE: Accessible IllustratedMessage with aria-label\nDESCRIPTION: Example showing how to make an IllustratedMessage accessible when no Heading is provided by adding an aria-label to the illustration.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<IllustratedMessage>\n  <NotFound aria-label=\"No results\" />\n</IllustratedMessage>\n```\n\n----------------------------------------\n\nTITLE: File License Header Comment - React Spectrum - JavaScript\nDESCRIPTION: This snippet provides a copyright and licensing disclaimer for the file using a block comment. It states the file is licensed under the Apache License, Version 2.0, and outlines usage and liability terms. The comment should appear at the top of source files according to project policy and does not impact program execution.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-10-01.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\n the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n```\n\n----------------------------------------\n\nTITLE: Importing BlogPostLayout Component in React\nDESCRIPTION: Imports the BlogPostLayout component from the @react-spectrum/docs package and exports it as the default export. This is likely used for structuring blog post pages in the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-07-23.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: IllustratedMessage for 403 Forbidden Error\nDESCRIPTION: Example using the Unauthorized illustration to display a 403 forbidden error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport Unauthorized from '@spectrum-icons/illustrations/Unauthorized';\n\n<IllustratedMessage>\n  <Unauthorized />\n  <Heading>Error 403: Access not allowed</Heading>\n  <Content>You do not have permission to access this page. Try checking the URL or visit a different page.</Content>\n</IllustratedMessage>\n```\n\n----------------------------------------\n\nTITLE: Listing Released Packages in React Spectrum Project\nDESCRIPTION: A comprehensive list of released packages in the React Spectrum project, showing package names and their version numbers, including core packages, internationalization utilities, React Aria components, React Spectrum components, React Stately utilities, React Types definitions, and Spectrum icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-09-30.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n - @adobe/react-spectrum@3.37.0\n - @internationalized/date@3.5.6\n - @internationalized/message@3.1.5\n - @internationalized/number@3.5.4\n - @internationalized/string-compiler@3.2.5\n - @internationalized/string@3.2.4\n - @react-aria/accordion@3.0.0-alpha.34\n - @react-aria/actiongroup@3.7.9\n - @react-aria/aria-modal-polyfill@3.7.12\n - @react-aria/autocomplete@3.0.0-alpha.34\n - @react-aria/breadcrumbs@3.5.17\n - @react-aria/button@3.10.0\n - @react-aria/calendar@3.5.12\n - @react-aria/checkbox@3.14.7\n - @react-aria/collections@3.0.0-alpha.5\n - @react-aria/color@3.0.0\n - @react-aria/combobox@3.10.4\n - @react-aria/datepicker@3.11.3\n - @react-aria/dialog@3.5.18\n - @react-aria/disclosure@3.0.0-alpha.0\n - @react-aria/dnd@3.7.3\n - @react-aria/example-theme@1.0.4\n - @react-aria/focus@3.18.3\n - @react-aria/form@3.0.9\n - @react-aria/grid@3.10.4\n - @react-aria/gridlist@3.9.4\n - @react-aria/i18n@3.12.3\n - @react-aria/interactions@3.22.3\n - @react-aria/label@3.7.12\n - @react-aria/landmark@3.0.0-beta.16\n - @react-aria/link@3.7.5\n - @react-aria/listbox@3.13.4\n - @react-aria/live-announcer@3.4.0\n - @react-aria/menu@3.15.4\n - @react-aria/meter@3.4.17\n - @react-aria/numberfield@3.11.7\n - @react-aria/optimize-locales-plugin@1.1.2\n - @react-aria/overlays@3.23.3\n - @react-aria/parcel-resolver-optimize-locales@1.1.2\n - @react-aria/progress@3.4.17\n - @react-aria/radio@3.10.8\n - @react-aria/searchfield@3.7.9\n - @react-aria/select@3.14.10\n - @react-aria/selection@3.20.0\n - @react-aria/separator@3.4.3\n - @react-aria/slider@3.7.12\n - @react-aria/spinbutton@3.6.9\n - @react-aria/ssr@3.9.6\n - @react-aria/steplist@3.0.0-alpha.10\n - @react-aria/switch@3.6.8\n - @react-aria/table@3.15.4\n - @react-aria/tabs@3.9.6\n - @react-aria/tag@3.4.6\n - @react-aria/test-utils@1.0.0-alpha.2\n - @react-aria/textfield@3.14.9\n - @react-aria/toast@3.0.0-beta.16\n - @react-aria/toggle@3.10.8\n - @react-aria/toolbar@3.0.0-beta.9\n - @react-aria/tooltip@3.7.8\n - @react-aria/tree@3.0.0-alpha.6\n - @react-aria/tree@3.0.0-beta.0\n - @react-aria/utils@3.25.3\n - @react-aria/virtualizer@4.0.3\n - @react-aria/visually-hidden@3.8.16\n - @react-spectrum/accordion@3.0.0-alpha.34\n - @react-spectrum/actionbar@3.6.0\n - @react-spectrum/actiongroup@3.10.8\n - @react-spectrum/autocomplete@3.0.0-alpha.36\n - @react-spectrum/avatar@3.0.16\n - @react-spectrum/badge@3.1.16\n - @react-spectrum/breadcrumbs@3.9.10\n - @react-spectrum/button@3.16.7\n - @react-spectrum/buttongroup@3.6.16\n - @react-spectrum/calendar@3.4.12\n - @react-spectrum/card@3.0.0-alpha.36\n - @react-spectrum/checkbox@3.9.9\n - @react-spectrum/codemods@0.2.0\n - @react-spectrum/color@3.0.0\n - @react-spectrum/combobox@3.13.3\n - @react-spectrum/contextualhelp@3.6.14\n - @react-spectrum/datepicker@3.10.2\n - @react-spectrum/dialog@3.8.14\n - @react-spectrum/divider@3.5.17\n - @react-spectrum/dnd@3.4.2\n - @react-spectrum/dropzone@3.0.4\n - @react-spectrum/filetrigger@3.0.4\n - @react-spectrum/form@3.7.9\n - @react-spectrum/icon@3.7.16\n - @react-spectrum/illustratedmessage@3.5.4\n - @react-spectrum/image@3.5.5\n - @react-spectrum/inlinealert@3.2.8\n - @react-spectrum/label@3.16.9\n - @react-spectrum/labeledvalue@3.1.17\n - @react-spectrum/layout@3.6.9\n - @react-spectrum/link@3.6.10\n - @react-spectrum/list@3.8.2\n - @react-spectrum/listbox@3.13.2\n - @react-spectrum/menu@3.20.4\n - @react-spectrum/meter@3.5.4\n - @react-spectrum/numberfield@3.9.6\n - @react-spectrum/overlays@5.6.4\n - @react-spectrum/parcel-transformer-s2-icon@0.1.1\n - @react-spectrum/picker@3.15.2\n - @react-spectrum/progress@3.7.10\n - @react-spectrum/provider@3.9.11\n - @react-spectrum/radio@3.7.9\n - @react-spectrum/s2-icon-builder@0.1.1\n - @react-spectrum/s2@0.4.0\n - @react-spectrum/searchfield@3.8.9\n - @react-spectrum/slider@3.6.12\n - @react-spectrum/statuslight@3.5.16\n - @react-spectrum/steplist@3.0.0-alpha.8\n - @react-spectrum/style-macro-s1@3.0.0-alpha.1\n - @react-spectrum/switch@3.5.8\n - @react-spectrum/table@3.14.0\n - @react-spectrum/tabs@3.8.13\n - @react-spectrum/tag@3.2.9\n - @react-spectrum/test-utils@1.0.0-alpha.2\n - @react-spectrum/text@3.5.8\n - @react-spectrum/textfield@3.12.5\n - @react-spectrum/theme-dark@3.5.13\n - @react-spectrum/theme-default@3.5.13\n - @react-spectrum/theme-express@3.0.0-alpha.15\n - @react-spectrum/theme-light@3.4.13\n - @react-spectrum/toast@3.0.0-beta.15\n - @react-spectrum/tooltip@3.6.10\n - @react-spectrum/tree@3.0.0-beta.0\n - @react-spectrum/utils@3.11.11\n - @react-spectrum/view@3.6.13\n - @react-spectrum/well@3.4.17\n - @react-stately/calendar@3.5.5\n - @react-stately/checkbox@3.6.9\n - @react-stately/collections@3.11.0\n - @react-stately/color@3.8.0\n - @react-stately/combobox@3.10.0\n - @react-stately/data@3.11.7\n - @react-stately/datepicker@3.10.3\n - @react-stately/disclosure@3.0.0-alpha.0\n - @react-stately/dnd@3.4.3\n - @react-stately/flags@3.0.4\n - @react-stately/form@3.0.6\n - @react-stately/grid@3.9.3\n - @react-stately/layout@4.0.3\n - @react-stately/list@3.11.0\n - @react-stately/menu@3.8.3\n - @react-stately/numberfield@3.9.7\n - @react-stately/overlays@3.6.11\n - @react-stately/radio@3.10.8\n - @react-stately/searchfield@3.5.7\n - @react-stately/select@3.6.8\n - @react-stately/selection@3.17.0\n - @react-stately/slider@3.5.8\n - @react-stately/steplist@3.0.0-alpha.9\n - @react-stately/table@3.12.3\n - @react-stately/tabs@3.6.10\n - @react-stately/toast@3.0.0-beta.6\n - @react-stately/toggle@3.7.8\n - @react-stately/tooltip@3.4.13\n - @react-stately/tree@3.8.5\n - @react-stately/utils@3.10.4\n - @react-stately/virtualizer@4.1.0\n - @react-types/accordion@3.0.0-alpha.24\n - @react-types/actionbar@3.1.10\n - @react-types/actiongroup@3.4.12\n - @react-types/autocomplete@3.0.0-alpha.26\n - @react-types/avatar@3.0.10\n - @react-types/badge@3.1.12\n - @react-types/breadcrumbs@3.7.8\n - @react-types/button@3.10.0\n - @react-types/buttongroup@3.3.12\n - @react-types/calendar@3.4.10\n - @react-types/card@3.0.0-alpha.30\n - @react-types/checkbox@3.8.4\n - @react-types/color@3.0.0\n - @react-types/combobox@3.13.0\n - @react-types/contextualhelp@3.2.13\n - @react-types/datepicker@3.8.3\n - @react-types/dialog@3.5.13\n - @react-types/divider@3.3.12\n - @react-types/form@3.7.7\n - @react-types/grid@3.2.9\n - @react-types/illustratedmessage@3.3.12\n - @react-types/image@3.4.4\n - @react-types/label@3.9.6\n - @react-types/layout@3.3.18\n - @react-types/link@3.5.8\n - @react-types/list@3.2.20\n - @react-types/listbox@3.5.2\n - @react-types/menu@3.9.12\n - @react-types/meter@3.4.4\n - @react-types/numberfield@3.8.6\n - @react-types/overlays@3.8.10\n - @react-types/progress@3.5.7\n - @react-types/provider@3.8.4\n - @react-types/radio@3.8.4\n - @react-types/searchfield@3.5.9\n - @react-types/select@3.9.7\n - @react-types/shared@3.25.0\n - @react-types/slider@3.7.6\n - @react-types/statuslight@3.3.12\n - @react-types/switch@3.5.6\n - @react-types/table@3.10.2\n - @react-types/tabs@3.3.10\n - @react-types/text@3.3.12\n - @react-types/textfield@3.9.7\n - @react-types/tooltip@3.4.12\n - @react-types/view@3.4.12\n - @react-types/well@3.3.12\n - @spectrum-icons/color@3.5.16\n - @spectrum-icons/express@3.0.0-alpha.20\n - @spectrum-icons/illustrations@3.6.16\n - @spectrum-icons/ui@3.6.10\n - @spectrum-icons/workflow@4.2.15\n - react-aria-components@1.4.0\n - react-aria@3.35.0\n - react-stately@3.33.0\n - tailwindcss-react-aria-components@1.1.6\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Pagination Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces defining the structure of various Pagination components including PaginationBase, PaginationButton, PaginationList, and PaginationField. The interfaces specify props like maxValue, onPrevious, onNext, and isDisabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaginationBase extends ValueBase<number> {\n  maxValue: number,\n  onPrevious?: (value: number, e: Event) => void,\n  onNext?: (value: number, e: Event) => void,\n  isDisabled?: boolean\n}\n\ninterface PaginationButton extends Button, PaginationBase {}\ninterface PaginationList extends PaginationBase {}\ninterface PaginationField extends PaginationBase {}\n```\n\n----------------------------------------\n\nTITLE: Creating Blue Gradient in HSL\nDESCRIPTION: This CSS snippet generates a linear gradient from white to blue using the HSL color space. It demonstrates how hue can appear to shift as lightness changes in HSL.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\nbackground: 'linear-gradient(to right, hsl(240, 0%, 100%), hsl(240, 100%, 50%))'\n```\n\n----------------------------------------\n\nTITLE: Listing Released React Spectrum Ecosystem Packages\nDESCRIPTION: A comprehensive list of all released packages in the React Spectrum ecosystem, including their current version numbers. The list encompasses React Spectrum components, React Aria hooks, React Stately state management utilities, React Types definitions, and Spectrum Icons collections.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-07-22.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n - @adobe/react-spectrum@3.36.0\n - @internationalized/date@3.5.5\n - @react-aria/accordion@3.0.0-alpha.30\n - @react-aria/actiongroup@3.7.6\n - @react-aria/aria-modal-polyfill@3.7.11\n - @react-aria/autocomplete@3.0.0-alpha.30\n - @react-aria/breadcrumbs@3.5.14\n - @react-aria/button@3.9.6\n - @react-aria/calendar@3.5.9\n - @react-aria/checkbox@3.14.4\n - @react-aria/collections@3.0.0-alpha.2\n - @react-aria/color@3.0.0-rc.0\n - @react-aria/combobox@3.10.0\n - @react-aria/datepicker@3.11.0\n - @react-aria/dialog@3.5.15\n - @react-aria/dnd@3.7.0\n - @react-aria/focus@3.18.0\n - @react-aria/form@3.0.6\n - @react-aria/grid@3.10.0\n - @react-aria/gridlist@3.9.0\n - @react-aria/i18n@3.12.0\n - @react-aria/interactions@3.22.0\n - @react-aria/label@3.7.9\n - @react-aria/link@3.7.2\n - @react-aria/listbox@3.13.0\n - @react-aria/menu@3.15.0\n - @react-aria/meter@3.4.14\n - @react-aria/numberfield@3.11.4\n - @react-aria/overlays@3.23.0\n - @react-aria/progress@3.4.14\n - @react-aria/radio@3.10.5\n - @react-aria/searchfield@3.7.6\n - @react-aria/select@3.14.6\n - @react-aria/selection@3.19.0\n - @react-aria/separator@3.4.0\n - @react-aria/slider@3.7.9\n - @react-aria/spinbutton@3.6.6\n - @react-aria/ssr@3.9.5\n - @react-aria/steplist@3.0.0-alpha.6\n - @react-aria/switch@3.6.5\n - @react-aria/table@3.15.0\n - @react-aria/tabs@3.9.2\n - @react-aria/tag@3.4.2\n - @react-aria/textfield@3.14.6\n - @react-aria/toast@3.0.0-beta.13\n - @react-aria/toggle@3.10.5\n - @react-aria/toolbar@3.0.0-beta.6\n - @react-aria/tooltip@3.7.5\n - @react-aria/tree@3.0.0-alpha.2\n - @react-aria/utils@3.25.0\n - @react-aria/virtualizer@4.0.0\n - @react-aria/visually-hidden@3.8.13\n - @react-spectrum/accordion@3.0.0-alpha.32\n - @react-spectrum/actionbar@3.5.0\n - @react-spectrum/actiongroup@3.10.6\n - @react-spectrum/autocomplete@3.0.0-alpha.33\n - @react-spectrum/avatar@3.0.13\n - @react-spectrum/badge@3.1.14\n - @react-spectrum/breadcrumbs@3.9.8\n - @react-spectrum/button@3.16.5\n - @react-spectrum/buttongroup@3.6.14\n - @react-spectrum/calendar@3.4.10\n - @react-spectrum/card@3.0.0-alpha.34\n - @react-spectrum/checkbox@3.9.7\n - @react-spectrum/color@3.0.0-rc.0\n - @react-spectrum/combobox@3.13.0\n - @react-spectrum/contextualhelp@3.6.12\n - @react-spectrum/datepicker@3.10.0\n - @react-spectrum/dialog@3.8.12\n - @react-spectrum/divider@3.5.14\n - @react-spectrum/dnd@3.4.0\n - @react-spectrum/dropzone@3.0.2\n - @react-spectrum/filetrigger@3.0.2\n - @react-spectrum/form@3.7.7\n - @react-spectrum/icon@3.7.14\n - @react-spectrum/illustratedmessage@3.5.2\n - @react-spectrum/image@3.5.2\n - @react-spectrum/inlinealert@3.2.6\n - @react-spectrum/label@3.16.7\n - @react-spectrum/labeledvalue@3.1.15\n - @react-spectrum/layout@3.6.6\n - @react-spectrum/link@3.6.8\n - @react-spectrum/list@3.8.0\n - @react-spectrum/listbox@3.13.0\n - @react-spectrum/menu@3.20.0\n - @react-spectrum/meter@3.5.2\n - @react-spectrum/numberfield@3.9.4\n - @react-spectrum/overlays@5.6.2\n - @react-spectrum/picker@3.15.0\n - @react-spectrum/progress@3.7.8\n - @react-spectrum/provider@3.9.8\n - @react-spectrum/radio@3.7.7\n - @react-spectrum/searchfield@3.8.7\n - @react-spectrum/slider@3.6.10\n - @react-spectrum/statuslight@3.5.14\n - @react-spectrum/steplist@3.0.0-alpha.6\n - @react-spectrum/switch@3.5.6\n - @react-spectrum/table@3.13.0\n - @react-spectrum/tabs@3.8.11\n - @react-spectrum/tag@3.2.7\n - @react-spectrum/text@3.5.6\n - @react-spectrum/textfield@3.12.2\n - @react-spectrum/theme-dark@3.5.11\n - @react-spectrum/theme-default@3.5.11\n - @react-spectrum/theme-express@3.0.0-alpha.13\n - @react-spectrum/theme-light@3.4.11\n - @react-spectrum/toast@3.0.0-beta.13\n - @react-spectrum/tooltip@3.6.8\n - @react-spectrum/tree@3.0.0-alpha.2\n - @react-spectrum/utils@3.11.8\n - @react-spectrum/view@3.6.11\n - @react-spectrum/well@3.4.14\n - @react-stately/calendar@3.5.2\n - @react-stately/checkbox@3.6.6\n - @react-stately/collections@3.10.8\n - @react-stately/color@3.7.0\n - @react-stately/combobox@3.9.0\n - @react-stately/data@3.11.5\n - @react-stately/datepicker@3.10.0\n - @react-stately/dnd@3.4.0\n - @react-stately/form@3.0.4\n - @react-stately/grid@3.9.0\n - @react-stately/layout@4.0.0\n - @react-stately/list@3.10.6\n - @react-stately/menu@3.8.0\n - @react-stately/numberfield@3.9.4\n - @react-stately/overlays@3.6.8\n - @react-stately/radio@3.10.5\n - @react-stately/searchfield@3.5.4\n - @react-stately/select@3.6.5\n - @react-stately/selection@3.16.0\n - @react-stately/slider@3.5.5\n - @react-stately/steplist@3.0.0-alpha.6\n - @react-stately/table@3.12.0\n - @react-stately/tabs@3.6.7\n - @react-stately/toast@3.0.0-beta.5\n - @react-stately/toggle@3.7.5\n - @react-stately/tooltip@3.4.10\n - @react-stately/tree@3.8.2\n - @react-stately/utils@3.10.2\n - @react-stately/virtualizer@4.0.0\n - @react-types/accordion@3.0.0-alpha.22\n - @react-types/actionbar@3.1.8\n - @react-types/actiongroup@3.4.10\n - @react-types/autocomplete@3.0.0-alpha.23\n - @react-types/avatar@3.0.8\n - @react-types/badge@3.1.10\n - @react-types/breadcrumbs@3.7.6\n - @react-types/button@3.9.5\n - @react-types/buttongroup@3.3.10\n - @react-types/calendar@3.4.7\n - @react-types/card@3.0.0-alpha.27\n - @react-types/checkbox@3.8.2\n - @react-types/color@3.0.0-rc.0\n - @react-types/combobox@3.12.0\n - @react-types/contextualhelp@3.2.11\n - @react-types/datepicker@3.8.0\n - @react-types/dialog@3.5.11\n - @react-types/divider@3.3.10\n - @react-types/form@3.7.5\n - @react-types/grid@3.2.7\n - @react-types/illustratedmessage@3.3.10\n - @react-types/image@3.4.2\n - @react-types/label@3.9.4\n - @react-types/layout@3.3.16\n - @react-types/link@3.5.6\n - @react-types/list@3.2.18\n - @react-types/listbox@3.5.0\n - @react-types/menu@3.9.10\n - @react-types/meter@3.4.2\n - @react-types/numberfield@3.8.4\n - @react-types/overlays@3.8.8\n - @react-types/progress@3.5.5\n - @react-types/provider@3.8.2\n - @react-types/radio@3.8.2\n - @react-types/searchfield@3.5.6\n - @react-types/select@3.9.5\n - @react-types/shared@3.24.0\n - @react-types/slider@3.7.4\n - @react-types/statuslight@3.3.10\n - @react-types/switch@3.5.4\n - @react-types/table@3.10.0\n - @react-types/tabs@3.3.8\n - @react-types/text@3.3.10\n - @react-types/textfield@3.9.4\n - @react-types/tooltip@3.4.10\n - @react-types/view@3.4.10\n - @react-types/well@3.3.10\n - @spectrum-icons/color@3.5.14\n - @spectrum-icons/express@3.0.0-alpha.18\n - @spectrum-icons/illustrations@3.6.14\n - @spectrum-icons/ui@3.6.8\n - @spectrum-icons/workflow@4.2.13\n - react-aria@3.34.0\n - react-aria-components@1.3.0\n - react-stately@3.32.0\n - tailwindcss-react-aria-components@1.1.4\n```\n\n----------------------------------------\n\nTITLE: Adjusting Tooltip Offset Above Trigger in React (TypeScript/TSX)\nDESCRIPTION: Shows how to use the 'offset' prop to position a tooltip 50px above the trigger element. Helpful when fine-tuning alignment of tooltips with triggers in complex layouts. Uses TooltipTrigger, Button, and MyTooltip, and expects MyTooltip to accept and forward the offset prop to the react-aria Tooltip. Style and functional assumptions require react-aria-components and the custom wrapper.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger>\\n  <Button>\\u261D\\uFE0F</Button>\\n  <MyTooltip offset={50}>This will shift up.</MyTooltip>\\n</TooltipTrigger>\\n\n```\n\n----------------------------------------\n\nTITLE: API and Interface Rendering Components (JSX/MDX)\nDESCRIPTION: Renders documentation components for the useListState hook, including its API, interface, and example reference. It passes dynamic data sourced from package metadata and the docs object, thus enabling live documentation with up-to-date type and API references. Key parameters passed are the API export, link context, and metadata objects. Limitations may include dependency on the docs build process and the interface structure of the docs virtual module.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/list/docs/useListState.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<PageDescription>{docs.exports.useListState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useListState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useListState} links={docs.links} />\n\n## Interface\n\n<TypeContext.Provider value={docs.links}>\n  <InterfaceType properties={docs.links[docs.exports.useListState.return.base.id].properties} />\n</TypeContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Dependencies\nDESCRIPTION: Import statements for various documentation components and metadata required for the NumberParser documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberParser.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport docs from 'docs:@internationalized/number';\nimport {HeaderInfo, FunctionAPI, ClassAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@internationalized/number/package.json';\n```\n\n----------------------------------------\n\nTITLE: Disclosure Component Structure\nDESCRIPTION: Basic structure and components needed to create a Disclosure component in React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Disclosure.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button, Disclosure, DisclosurePanel, Heading} from 'react-aria-components';\n\n<Disclosure>\n  <Heading>\n    <Button />\n  </Heading>\n  <DisclosurePanel />\n</Disclosure>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for Tailwind in React Aria Components\nDESCRIPTION: Imports the global Tailwind CSS styles needed for styling the ProgressBar component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/loading-progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Basic package reference note showing the package name and its relationship to the main React Spectrum project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-stately/utils\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server with Yarn\nDESCRIPTION: Commands to install dependencies and start the Next.js development server using Yarn. This will run the project on http://localhost:3456.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-next-macros/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Behavior in RangeCalendar (TSX)\nDESCRIPTION: This example demonstrates how to customize the page behavior in a RangeCalendar with multiple visible months. It uses the pageBehavior prop to page by single months instead of the default behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/calendar/docs/RangeCalendar.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{maxWidth: '100%', overflow: 'auto'}}>\n  <RangeCalendar aria-label=\"Trip dates\" visibleMonths={3} pageBehavior=\"single\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Polyfill with Custom Selector\nDESCRIPTION: Alternative setup using a custom selector to specify where the modal polyfill should watch for modal elements. Useful when modals are rendered in a specific container rather than the default body element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/aria-modal-polyfill/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwatchModals('.my-modal-root');\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Package name reference in markdown format, indicating it is part of the React Spectrum project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/s2-icon-builder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/s2-icon-builder\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Variable Fallbacks in Spectrum CSS (CSS)\nDESCRIPTION: This snippet shows how to reference a component-specific CSS variable with a fallback to a global theme variable using CSS variable syntax. It is used internally by Spectrum CSS so that custom theme overrides can be granular while defaulting to a common palette. The main dependency is CSS custom property support. Place this code in the component stylesheet. The background will use '--spectrum-button-background-color' if set, otherwise '__spectrum-global-color-gray-100' is used. Both variable names should be defined in the theme.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-theming.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.spectrum-Button {\n  background: var(\n    --spectrum-button-background-color,   // original\n    var(--spectrum-global-color-gray-100) // fallback\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ColorSlider Component in React Spectrum\nDESCRIPTION: This CSS snippet provides styles for the ColorSlider component, including track and thumb styling, and a checkerboard background for transparency visualization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.color-slider-track,\n.color-slider-track-background,\n.color-slider-track-color {\n  width: 100%;\n  border-radius: 4px;\n  forced-color-adjust: none;\n  position: relative;\n}\n\n.color-slider-track-background,\n.color-slider-track-color {\n  position: absolute;\n  height: 100%;\n}\n\n.color-slider-thumb {\n  position: absolute;\n  top: 14px;\n  border: 2px solid white;\n  box-shadow:\n    0 0 0 1px black,\n    inset 0 0 0 1px black;\n  border-radius: 50%;\n  box-sizing: border-box;\n  width: 20px;\n  height: 20px;\n}\n\n.color-slider-thumb.is-focused {\n  width: 32px;\n  height: 32px;\n}\n\n.color-slider-track-background,\n.color-slider-thumb-background {\n  background-size: 16px 16px;\n  background-position:\n    -2px -2px,\n    -2px 6px,\n    6px -10px,\n    -10px -2px;\n  background-color: white;\n  background-image:\n    linear-gradient(-45deg, transparent 75.5%, rgb(188, 188, 188) 75.5%),\n    linear-gradient(45deg, transparent 75.5%, rgb(188, 188, 188) 75.5%),\n    linear-gradient(-45deg, rgb(188, 188, 188) 25.5%, transparent 25.5%),\n    linear-gradient(45deg, rgb(188, 188, 188) 25.5%, transparent 25.5%);\n}\n\n.color-slider-thumb-background,\n.color-slider-thumb-color {\n  position: absolute;\n  border-radius: 50%;\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with npm or yarn\nDESCRIPTION: Command-line instructions for starting the Next.js development server using either npm or yarn package managers. After execution, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/rsp-next-ts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Blog Post Layout in React Spectrum Docs\nDESCRIPTION: This JavaScript snippet, likely part of a JSX/MDX file, imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports `BlogPostLayout` as the default export for the file, establishing it as the primary layout component used to structure and render the content of this specific blog post page within the documentation site.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-08-04.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Using Heading Component in React Spectrum\nDESCRIPTION: This example demonstrates how to use the Heading component with a specified level prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/text/docs/Heading.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Heading level={4}>Edit</Heading>\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from React Spectrum Docs\nDESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useAutocomplete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Element with useMove Hook\nDESCRIPTION: This example demonstrates how to create a draggable ball element using the useMove hook. It handles mouse, touch, and keyboard interactions, and logs all move events.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useMove.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  const CONTAINER_SIZE = 200;\n  const BALL_SIZE = 30;\n\n  let [events, setEvents] = React.useState([]);\n  let [color, setColor] = React.useState('black');\n  let [position, setPosition] = React.useState({\n    x: 0,\n    y: 0\n  });\n\n  let clamp = pos => Math.min(Math.max(pos, 0), CONTAINER_SIZE - BALL_SIZE);\n  let {moveProps} = useMove({\n    onMoveStart(e) {\n      setColor('red');\n      setEvents(events => [`move start with pointerType = ${e.pointerType}`, ...events]);\n    },\n    onMove(e) {\n      setPosition(({x, y}) => {\n        if (e.pointerType === 'keyboard') {\n          x = clamp(x);\n          y = clamp(y);\n        }\n\n        x += e.deltaX;\n        y += e.deltaY;\n        return {x, y};\n      });\n\n      setEvents(events => [`move with pointerType = ${e.pointerType}, deltaX = ${e.deltaX}, deltaY = ${e.deltaY}`, ...events]);\n    },\n    onMoveEnd(e) {\n      setPosition(({x, y}) => {\n        x = clamp(x);\n        y = clamp(y);\n        return {x, y};\n      });\n      setColor('black');\n      setEvents(events => [`move end with pointerType = ${e.pointerType}`, ...events]);\n    }\n  });\n\n  return (\n    <>\n      <div\n        style={{\n          width: CONTAINER_SIZE,\n          height: CONTAINER_SIZE,\n          background: 'white',\n          border: '1px solid black',\n          position: 'relative',\n          touchAction: 'none'\n        }}>\n        <div\n          {...moveProps}\n          tabIndex={0}\n          style={{\n            width: BALL_SIZE,\n            height: BALL_SIZE,\n            borderRadius: '100%',\n            position: 'absolute',\n            left: clamp(position.x),\n            top: clamp(position.y),\n            background: color\n          }} />\n      </div>\n      <ul\n        style={{\n          maxHeight: '200px',\n          overflow: 'auto'\n        }}>\n        {events.map((e, i) => <li key={i}>{e}</li>)}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Simple useHover Implementation in React\nDESCRIPTION: Example showing implementation of useHover hook with event logging and dynamic styling based on hover state. Demonstrates hover event handling with accessibility support through role and tabIndex attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useHover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useHover} from '@react-aria/interactions';\n\nfunction Example() {\n  let [events, setEvents] = React.useState([]);\n  let {hoverProps, isHovered} = useHover({\n    onHoverStart: e => setEvents(\n      events => [...events, `hover start with ${e.pointerType}`]\n    ),\n    onHoverEnd: e => setEvents(\n      events => [...events, `hover end with ${e.pointerType}`]\n    )\n  });\n\n  return (\n    <>\n      <div\n        {...hoverProps}\n        style={{\n          background: isHovered ? 'darkgreen' : 'green',\n          color: 'white',\n          display: 'inline-block',\n          padding: 4,\n          cursor: 'pointer'\n        }}\n        role=\"button\"\n        tabIndex={0}>\n        Hover me!\n      </div>\n      <ul\n        style={{\n          maxHeight: '200px',\n          overflow: 'auto'\n        }}>\n        {events.map((e, i) => <li key={i}>{e}</li>)}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a KanbanBoard Component in TSX\nDESCRIPTION: This TSX snippet imports the `KanbanBoard` component from './home/KanbanExample' and renders it. This is used within a section discussing advanced features, suggesting the `KanbanBoard` demonstrates capabilities like accessible drag and drop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx snippet\nimport {KanbanBoard} from './home/KanbanExample';\n\n<KanbanBoard />\n```\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Multiple DateRangePickers with Different Granularities (TypeScript/React)\nDESCRIPTION: This example shows two DateRangePickers synchronized to a single date range state, but displayed at different granularities ('second' and 'day'). The state is initialized using parseAbsoluteToLocal, and both components share the same value and onChange handler. Dependency: @internationalized/date. Inputs: date objects with times; outputs: pickers displaying different field levels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\\n  let [date, setDate] = React.useState({\\n    start: parseAbsoluteToLocal('2021-04-07T18:45:22Z'),\\n    end: parseAbsoluteToLocal('2021-04-08T20:00:00Z')\\n  });\\n\\n  return (\\n    <>\\n      <DateRangePicker\\n        label=\\\"Date and time range\\\"\\n        granularity=\\\"second\\\"\\n        value={date}\\n        onChange={setDate} />\\n      <DateRangePicker\\n        label=\\\"Date range\\\"\\n        granularity=\\\"day\\\"\\n        value={date}\\n        onChange={setDate} />\\n    </>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Setting Layout for `useStepListState` Docs (JavaScript/JSX)\nDESCRIPTION: Imports the main `Layout` component from `@react-spectrum/docs`, documentation data (`docs`) from `@react-stately/steplist`, various documentation rendering components (`ClassAPI`, `HeaderInfo`, etc.) from `@react-spectrum/docs`, and package information. It then exports the `Layout` component as the default export, establishing the page's structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/steplist/docs/useStepListState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-stately/steplist';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/steplist/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Components\nDESCRIPTION: This snippet shows the import statements for various React Spectrum components used in the examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/provider/docs/Provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Checkbox} from '@react-spectrum/checkbox';\nimport {TextField} from '@react-spectrum/textfield';\nimport {Flex} from '@react-spectrum/layout';\nimport {Picker, Item} from '@react-spectrum/picker';\nimport {ActionButton} from '@react-spectrum/button';\nimport {RadioGroup, Radio} from '@react-spectrum/radio';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Building and Running Remix Project for Production\nDESCRIPTION: Commands to build a Remix project with Vite for production and then start the production server.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/remix/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Component Wrapper Pattern\nDESCRIPTION: Shows how to create a wrapper component for customization\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyCalendarCell(props) {\n  return <CalendarCell {...props} className=\"my-item\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Switch - React Spectrum - TypeScript/TSX\nDESCRIPTION: This example shows how to declare a simple Switch component with a label. The Switch will toggle states (on/off) when interacted with. Requires the Switch component from @react-spectrum/switch. The child element 'Low power mode' acts as the visible label, and no additional props are used. State is uncontrolled by default and toggles internally.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/switch/docs/Switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch>Low power mode</Switch>\\n\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Reference link to the main React Spectrum repository showing the package's relationship to the larger project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/layout/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/layout\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Overriding First Day of Week in TypeScript\nDESCRIPTION: Demonstrates how to override the default first day of the week when using the startOfWeek function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nstartOfWeek(date, 'en-US', 'mon'); // 2022-01-31\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom CSS Class to a Radio Component (JSX)\nDESCRIPTION: Demonstrates how to override the default `react-aria-Radio` class by providing a custom class name via the `className` prop on a Radio component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<Radio className=\"my-radio\">\n  {/* ... */}\n</Radio>\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Border Radius Style Props in React Spectrum\nDESCRIPTION: This snippet demonstrates how to update the border radius style prop from React Spectrum v3 to S2, converting from named values to new S2 values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/codemods/src/s1-to-s2/UPGRADE.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- <View borderRadius=\"small\"  />\n+ <div className={style({borderRadius: 'sm'})} />\n```\n\n----------------------------------------\n\nTITLE: Custom First Day for Weeks in Month in TypeScript/React\nDESCRIPTION: Shows how to override the default first day of week when calculating the number of weeks in a month.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\ngetWeeksInMonth(date, 'en-US', 'mon'); // 6\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Label Component for RadioGroup using Context\nDESCRIPTION: This snippet shows how to create a custom label component that works with RadioGroup by consuming the LabelContext. It uses the useContextProps hook to merge local props and ref with those provided via context.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, LabelContext);\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Provider for Next.js App Router\nDESCRIPTION: This snippet demonstrates how to create a client-side Provider component for use with Next.js App Router, including type configuration for router options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {useRouter} from 'next/navigation';\nimport {Provider, defaultTheme} from '@adobe/react-spectrum';\n\ndeclare module '@adobe/react-spectrum' {\n  interface RouterConfig {\n    routerOptions: NonNullable<Parameters<ReturnType<typeof useRouter>['push']>[1]>\n  }\n}\n\nexport function ClientProviders({children}) {\n  let router = useRouter();\n\n  return (\n    <Provider theme={defaultTheme} router={{navigate: router.push}}>\n      {children}\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling of ColorThumb with Functional ClassName (JSX)\nDESCRIPTION: This JSX snippet demonstrates using a function as the `className` prop for the `ColorThumb` component. The function receives an object containing component states (like `isDragging`) and returns CSS classes based on these states. This example uses Tailwind utility classes to scale the thumb when it's being dragged.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorThumb className={({isDragging}) => isDragging ? 'scale-150' : 'scale-100'} />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling of ToggleButtonGroup via className Function (JSX)\nDESCRIPTION: Passes a function to the className prop on ToggleButtonGroup for dynamic style selection based on component state (isDisabled). Example uses conditional background color classes (e.g., with Tailwind CSS). Requires React environment and state-awareness through function parameters.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleButtonGroup className={({isDisabled}) => isDisabled ? 'bg-gray-100' : 'bg-gray-600'} />\n```\n\n----------------------------------------\n\nTITLE: Picker with Avatars (React/TypeScript)\nDESCRIPTION: This example shows how to include avatars in Picker items.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/picker/docs/Picker.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Picker label=\"Select a user\">\n  <Item textValue=\"User 1\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 1</Text>\n  </Item>\n  <Item textValue=\"User 2\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 2</Text>\n  </Item>\n  <Item textValue=\"User 3\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 3</Text>\n  </Item>\n  <Item textValue=\"User 4\">\n    <Avatar src=\"https://i.imgur.com/kJOwAdv.png\" />\n    <Text>User 4</Text>\n  </Item>\n</Picker>\n```\n\n----------------------------------------\n\nTITLE: Using the Submenu Component for Nested React Spectrum Menus (JSX)\nDESCRIPTION: Represents a nested menu within a React Spectrum Menu, typically opened from a parent MenuItem. It contains further MenuItems or other menu elements, implementing submenu functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Menu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Submenu>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tailwind Classes with React Aria Component States\nDESCRIPTION: Example using render props to conditionally apply multiple Tailwind classes based on component states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Radio\n  className={({isFocusVisible, isSelected}) => `\n    flex rounded-lg p-4\n    ${isFocusVisible ? 'ring-2 ring-blue-600 ring-offset-1' : ''}\n    ${isSelected ? 'bg-blue-600 border-white/30 text-white' : ''}\n  `}>\n  {/* ... */}\n</Radio>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Avatar in TSX\nDESCRIPTION: This example demonstrates the fundamental usage of the `Avatar` component. It renders an image specified by the `src` prop and includes alternative text provided by the `alt` prop for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/avatar/docs/Avatar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Avatar src=\"https://i.imgur.com/kJOwAdv.png\" alt=\"default Adobe avatar\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces and Enums for Drag and Drop Operations in TypeScript\nDESCRIPTION: This snippet defines a comprehensive set of TypeScript interfaces (`DndBase`, `DragTarget`, `DropTarget`, `DataTransferDelegate`, `ClipboardDelegate`, `DragDelegate`, `DropDelegate`) and enums (`DropOperation`, `DropPosition`) for handling drag-and-drop (DnD) and clipboard interactions. It includes delegates for managing drag sources, drop targets, data transfer (read/write), clipboard actions (copy/cut/paste), defining allowed operations and positions, and providing hooks for various stages of the DnD lifecycle.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Shared.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DndBase {\n  dragDelegate?: DragDelegate,\n  dropDelegate?: DropDelegate\n};\n\nenum DropOperation {\n  NONE = 0,\n  MOVE = 1 << 0,\n  COPY = 1 << 1,\n  LINK = 1 << 2,\n  ALL = MOVE | COPY | LINK\n};\n\nenum DropPosition {\n  ON = 1 << 0,\n  BETWEEN = 1 << 1,\n  ANY = ON | BETWEEN\n};\n\ninterface DragTarget {\n  value: any\n}\n\ninterface DropTarget {\n  value: null | any, // if null, represents the entire tree/table\n  index: number, // todo: figure out tableview sections\n  dropPosition: DropPosition\n}\n\n// drag and drop + copy/paste\ninterface DataTransferDelegate {\n  write?(dataTransfer: DataTransfer, items: any[]): void,\n  read?(dataTransfer: DataTransfer): any[]\n}\n\ninterface ClipboardDelegate {\n  copy?(dataTransfer: DataTransfer, items: any[]): void,\n  cut?(dataTransfer: DataTransfer, items: any[]),\n  paste?(dataTransfer: DataTransfer): void\n}\n\ninterface DragDelegate {\n  shouldAllowDrag?(target: DragTarget): boolean,\n  prepareDragData(target: DragTarget, dataTransfer: DataTransfer): void,\n  getAllowedDropOperations?(target: DropTarget): DropOperation,\n  renderDragView(items: any[]) => ReactNode,\n  onDragEnd?(target: DropTarget, dropOperation: DropOperation): void\n}\n\ninterface DropDelegate {\n  shouldAcceptDrop?(target: DropTarget, types: Set<string>): boolean,\n  getAllowedDropPositions?(target: DropTarget): DropPosition, // NEW\n  overrideDropTarget?(target: DropTarget): DropTarget,\n  getDropOperation?(target: DropTarget, allowedOperations: DropOperation): DropOperation,\n  onDropTargetChange?(target: DropTarget): void,\n  onDrop(target: DropTarget, dataTransfer: DataTransfer, dropOperation: DropOperation): void,\n\n  // TODO: what to do about this??\n  onReorder?(items: any[], dropTarget: DropTarget, dropOperation: DropOperation): void\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox and Layout Components in React\nDESCRIPTION: Imports the `Checkbox` component from `@react-spectrum/checkbox`, the `View` component from `@react-spectrum/view`, and the `Flex` layout component from `@react-spectrum/layout`. These imports are necessary for using the Checkbox and arranging examples within the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/Checkbox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n import {Checkbox} from '@react-spectrum/checkbox';\n import {View} from '@react-spectrum/view';\n import {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Custom Drop Operation Configuration in React Spectrum\nDESCRIPTION: Example showing how to configure allowed drop operations and implement PNG-specific drop handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [items, setItems] = React.useState<ImageItem[]>([]);\n\n  let { dragAndDropHooks } = useDragAndDrop({\n    getDropOperation: () => 'copy',\n    acceptedDragTypes: ['image/png'],\n    async onRootDrop(e) {\n      // Implementation details...\n    }\n  });\n\n  return (\n    <MyGridList aria-label=\"Droppable list\" items={items} dragAndDropHooks={dragAndDropHooks} renderEmptyState={() => \"Drop PNGs here\"}>\n      {item => (\n        <MyItem textValue={item.name}>\n          <div className=\"image-item\">\n            <img src={item.url} />\n            <span>{item.name}</span>\n          </div>\n        </MyItem>\n      )}\n    </MyGridList>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled DisclosureGroup\nDESCRIPTION: Demonstrates how to disable an entire DisclosureGroup using the isDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<DisclosureGroup isDisabled>\n  <MyDisclosure id=\"system\" title=\"System Requirements\" >\n    Details about system requirements here\n  </MyDisclosure>\n  <MyDisclosure id=\"personal\" title=\"Personal Information\" >\n    Details about personal information here\"\n  </MyDisclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: Restricting Allowed Drop Operations in React Spectrum\nDESCRIPTION: This example shows how to restrict allowed drop operations to only 'copy' using the getAllowedDropOperations function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox\n  aria-label=\"Categories\"\n  getAllowedDropOperations={() => ['copy']}\n  selectionMode=\"multiple\"\n >\n  <Item>Animals</Item>\n  <Item>People</Item>\n  <Item>Plants</Item>\n</ListBox>\n<DropTarget />\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Shows the package name formatted as a markdown heading with a reference link to the main react-spectrum repository.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-types/meter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-types/meter\n```\n\n----------------------------------------\n\nTITLE: Styling Table Layout Example in CSS\nDESCRIPTION: This hidden CSS snippet styles the `Table` component used in the `TableLayout` example. It defines the table's width, height, overflow behavior, and scroll padding. It also styles the table header background, font weight, and ensures cells and columns align items centrally and fill their allocated height.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Table {\n  width: 400;\n  height: 300;\n  overflow: auto;\n  scroll-padding-top: 38px;\n}\n\n.react-aria-TableHeader {\n  background: var(--spectrum-gray-100);\n  width: 100%;\n  height: 100%;\n  border-radius: 8px;\n  font-weight: bold;\n}\n\n.react-aria-Cell,\n.react-aria-Column {\n  display: flex;\n  align-items: center;\n  height: 100%;\n  box-sizing: border-box;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Orange to Brown Gradient in OKLCH\nDESCRIPTION: This CSS snippet generates a vertical gradient from orange to brown using OKLCH. It demonstrates the special case where dark orange is referred to as brown.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/accessible-color-descriptions.mdx#2025-04-23_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\nbackground: 'linear-gradient(in oklch to bottom, oklch(100% 0.2 60), oklch(0% 0.2 60))'\n```\n\n----------------------------------------\n\nTITLE: Applying Style Props to a Button Component in React Spectrum (JSX)\nDESCRIPTION: This code snippet demonstrates how to apply a layout-related style prop to a React Spectrum Button component using the new style prop API. The property 'margin' receives a Spectrum DNA variable value to ensure design safety and consistency. This approach eliminates the use of custom class names or raw styles, instead favoring props that allow safe, approved styling. No external dependencies other than React Spectrum are required; 'margin' expects valid Spectrum spacing tokens, and the output is a Button with the specified margin, which is safely managed by Spectrum's styling system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-dom-props.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button margin=\\\"size-250\\\">A button</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing Assets and Components for React Spectrum Documentation\nDESCRIPTION: Imports various image assets, CSS modules, and component illustrations used throughout the documentation page. This includes hero images, component icons, and styling modules.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Highlights, Hero} from '@react-spectrum/docs';\nimport heroNarrow from 'url:../assets/ReactSpectrum_Mobile_976x1025_1x.png';\nimport heroNarrow2x from 'url:../assets/ReactSpectrum_Mobile_976x1025_2x.png';\nimport heroNarrowWebp from 'url:../assets/ReactSpectrum_Mobile_976x1025_1x.webp';\nimport heroNarrow2xWebp from 'url:../assets/ReactSpectrum_Mobile_976x1025_2x.webp';\nimport heroWide from 'url:../assets/ReactSpectrum_976x445_1x.png';\nimport heroWide2x from 'url:../assets/ReactSpectrum_976x445_2x.png';\nimport heroWideWebp from 'url:../assets/ReactSpectrum_976x445_1x.webp';\nimport heroWide2xWebp from 'url:../assets/ReactSpectrum_976x445_2x.webp';\nimport clsx from 'clsx';\nimport linkStyle from '@adobe/spectrum-css-temp/components/link/vars.css';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport typographyStyles from '@adobe/spectrum-css-temp/components/typography/vars.css';\n\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ComboBoxAnatomy from '../assets/component-illustrations/ComboBox.svg';\nimport SelectAnatomy from '../assets/component-illustrations/Picker.svg';\nimport Button from '../assets/component-illustrations/Button.svg';\n// ... (additional imports)\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleLayout Component for React Spectrum\nDESCRIPTION: Imports and exports the ExampleLayout component from @react-spectrum/docs to provide the documentation layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ExampleLayout} from '@react-spectrum/docs';\nexport default ExampleLayout;\n```\n\n----------------------------------------\n\nTITLE: Importing Heading Component in React Spectrum\nDESCRIPTION: This snippet shows how to import the Heading component from the React Spectrum text package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/text/docs/Heading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Heading} from '@react-spectrum/text';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components from React Spectrum\nDESCRIPTION: Imports various documentation components from @react-spectrum/docs and @react-spectrum/text for use in the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/interactions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {HeaderInfo, PropTable, TypeLink} from '@react-spectrum/docs';\nimport {Keyboard} from '@react-spectrum/text';\n```\n\n----------------------------------------\n\nTITLE: Image Item Styling\nDESCRIPTION: CSS styles for image items in the drag and drop list, including layout and text overflow handling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.image-item {\n  display: flex;\n  height: 50px;\n  gap: 10px;\n}\n\n.image-item img {\n  height: 100%;\n  object-fit: contain;\n}\n\n.image-item span {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: List of Released React Spectrum Package Versions\nDESCRIPTION: A list enumerating the released packages within the Adobe React Spectrum ecosystem, along with their specific version numbers. This includes packages from `@adobe/react-spectrum`, `@react-aria`, `@react-spectrum`, `@react-stately`, `@react-types`, `@internationalized`, and core `react-aria` and `react-stately` packages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-06-15.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- @adobe/react-spectrum => 3.11.0\n- @internationalized/message => 3.0.1\n- @internationalized/number => 3.0.1\n- @react-aria/actiongroup => 3.2.0\n- @react-aria/combobox => 3.0.0-rc.0\n- @react-aria/dnd => 3.0.0-alpha.2\n- @react-aria/focus => 3.4.0\n- @react-aria/grid => 3.0.0-beta.0\n- @react-aria/interactions => 3.5.0\n- @react-aria/menu => 3.2.2\n- @react-aria/overlays => 3.7.0\n- @react-aria/selection => 3.5.0\n- @react-aria/table => 3.0.0-beta.0\n- @react-aria/tabs => 3.0.0\n- @react-aria/utils => 3.8.1\n- @react-spectrum/actionbar => 3.0.0-alpha.0\n- @react-spectrum/actiongroup => 3.2.0\n- @react-spectrum/button => 3.5.0\n- @react-spectrum/combobox => 3.0.0-rc.0\n- @react-spectrum/layout => 3.2.0\n- @react-spectrum/list => 3.0.0-alpha.0\n- @react-spectrum/listbox => 3.4.3\n- @react-spectrum/menu => 3.3.0\n- @react-spectrum/overlays => 3.4.2\n- @react-spectrum/provider => 3.2.0\n- @react-spectrum/table => 3.0.0-beta.0\n- @react-spectrum/tabs => 3.0.0\n- @react-spectrum/utils => 3.6.0\n- @react-stately/combobox => 3.0.0-rc.0\n- @react-stately/grid => 3.0.0-beta.0\n- @react-stately/layout => 3.3.0\n- @react-stately/numberfield => 3.0.1\n- @react-stately/selection => 3.6.0\n- @react-stately/table => 3.0.0-beta.0\n- @react-stately/tabs => 3.0.0\n- @react-types/actionbar => 3.0.0-alpha.0\n- @react-types/actiongroup => 3.2.0\n- @react-types/button => 3.4.0\n- @react-types/combobox => 3.0.0-rc.0\n- @react-types/grid => 3.0.0-beta.0\n- @react-types/menu => 3.2.0\n- @react-types/overlays => 3.5.0\n- @react-types/provider => 3.3.0\n- @react-types/select => 3.2.1\n- @react-types/shared => 3.7.0\n- @react-types/table => 3.0.0-beta.0\n- @react-types/tabs => 3.0.0\n- react-aria => 3.7.0\n- react-stately => 3.6.0\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata for React Spectrum Release Notes\nDESCRIPTION: Defines metadata for the release notes page using frontmatter syntax. It includes a `description` summarizing the key highlights of the release (GA components, new color components, TreeView alpha) and the publication `date` (May 1, 2024). This metadata is typically used by static site generators or content management systems to populate page details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-05-01.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: We have a huge release! Submenu, unavailable menu items, DropZone, FileTrigger are all in GA. New color components in React Aria Components and React Spectrum, a new blog post, our first alpha of TreeView and so much more!\ndate: 2024-05-01\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. The server will run on localhost:3000 with hot-reload enabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/rsp-next-ts-17/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs Size Props in Spectrum 2 and React Spectrum v3\nDESCRIPTION: Shows the change in Breadcrumbs size prop options between Spectrum 2 and React Spectrum v3, noting the removal of the 'S' option in Spectrum 2.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/s2/api-diff.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Spectrum 2\nsize: 'L' | 'M'\n\n// React Spectrum v3\nsize: 'L' | 'M' | 'S'\n```\n\n----------------------------------------\n\nTITLE: Disabled Disclosure Component Example\nDESCRIPTION: Example showing how to disable a Disclosure component using the isDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Disclosure.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDisclosure title=\"Introduction to Knitting\" isDisabled>\n  Details about knitting here\n</MyDisclosure>\n```\n\n----------------------------------------\n\nTITLE: Importing Core Modules and Documentation Data - React Spectrum - JavaScript\nDESCRIPTION: These import statements set up the environment by bringing in layout components, API documentation data, SVG assets, example card components, and images required for building and presenting the useTable documentation. This ensures that the documentation file can present dynamic API references, display diagrams, and embed example resources seamlessly. Key dependencies include @react-spectrum/docs for layout and structure, several docs: virtual imports for API documentation, and asset imports for visuals and examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/table';\nimport collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';\nimport selectionDocs from 'docs:@react-stately/selection';\nimport statelyDocs from 'docs:@react-stately/table';\nimport focusDocs from 'docs:@react-aria/focus';\nimport checkboxDocs from 'docs:@react-aria/checkbox';\nimport utilsDocs from 'docs:@react-aria/utils';\nimport {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport {Keyboard} from '@react-spectrum/text';\nimport packageData from '@react-aria/table/package.json';\nimport Anatomy from './TableAnatomy.svg';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport tailwindExample from 'url:./Table-tailwind.png';\n```\n\n----------------------------------------\n\nTITLE: Styling DropTarget Component in CSS\nDESCRIPTION: This CSS snippet provides styles for the DropTarget component, including styles for the droppable area and its target state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.droppable {\n  width: 100px;\n  height: 50px;\n  border-radius: 6px;\n  display: inline-block;\n  padding: 20px;\n  border: 2px dotted gray;\n  white-space: pre-wrap;\n}\n\n.droppable.target {\n  border: 2px solid var(--blue);\n}\n```\n\n----------------------------------------\n\nTITLE: ProgressCircle with Specific Value in React Spectrum\nDESCRIPTION: Shows how to create a ProgressCircle with a specific percentage of completion using the value prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressCircle.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressCircle aria-label=\"Loading…\" value={25} />\n```\n\n----------------------------------------\n\nTITLE: HTML ARIA Combobox Base Structure\nDESCRIPTION: Example showing the core ARIA attributes required for implementing an accessible combobox component with a popup listbox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Autocomplete.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n<input role=\"combobox\"\n       aria-controls=\"popup-id\"\n       aria-expanded=\"false\"\n       aria-autocomplete=\"list\"\n       aria-labelledby=\"label-id\"/>\n<div role=\"listbox\" id=\"popup-id\">\n  <!-- popup content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Layers - CSS\nDESCRIPTION: Demonstrates how to organize CSS by importing other documentation styles using CSS layers. Useful for modular, layer-based theming and style overrides. No dependencies required, but assumes presence of referenced CSS files.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@import './Button.mdx' layer(button);\\n@import './Form.mdx' layer(form);\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Setting Up Layout in React Aria\nDESCRIPTION: Basic imports and layout configuration for the example documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/file-system.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ExampleLayout} from '@react-spectrum/docs';\nexport default ExampleLayout;\n\nimport docs from 'docs:react-aria-components';\nimport {TypeLink} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport Tree from '@react-spectrum/docs/pages/assets/component-illustrations/Tree.svg';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\n```\n\n----------------------------------------\n\nTITLE: Converting Between Calendar Systems with ZonedDateTime in React\nDESCRIPTION: Demonstrates converting a ZonedDateTime from the Gregorian calendar system to the Hebrew calendar system using the toCalendar function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toCalendar, HebrewCalendar} from '@internationalized/date';\n\nlet gregorianDate = new ZonedDateTime(\n  2020, 9, 19,\n  'America/Los_Angeles', -28800000,\n  10, 30\n);\n\nlet hebrewDate = toCalendar(gregorianDate, new HebrewCalendar());\n```\n\n----------------------------------------\n\nTITLE: Styling a Button Component using Layered CSS Import\nDESCRIPTION: This CSS snippet demonstrates how to import external styles into the current stylesheet using the '@import' syntax with a custom layer for buttons. It is typically included for modular or layered styling in complex component libraries. There are no direct parameters, and the effect depends on the presence of './Button.mdx'. The scope is restricted to CSS inclusion for styling separation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n```\n\n----------------------------------------\n\nTITLE: Importing Custom SVG Components in React Spectrum\nDESCRIPTION: Demonstrates how to wrap custom SVG components with the Icon component from @react-spectrum/icon. This approach allows custom icons to inherit scale properties from the React Spectrum Provider.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/icon/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CustomSVGComponent from '@a4u/product/custom-icons/CustomSVGComponent';\n\n<Icon><CustomSVGComponent /></Icon>\n```\n\n----------------------------------------\n\nTITLE: ColorField Component Anatomy Example\nDESCRIPTION: Shows the complete structure of a ColorField component including optional description and error message elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport {ColorField, Label, Input, Text, FieldError} from 'react-aria-components';\n\n<ColorField>\n  <Label />\n  <Input />\n  <Text slot=\"description\" />\n  <FieldError />\n</ColorField>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Selectable Component with React Aria Table\nDESCRIPTION: Shows how to use the custom Selectable component to control the selection mode of a React Aria Table component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Table.mdx#2025-04-23_snippet_53\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ToggleButton} from 'react-aria-components';\n\n<Selectable>\n  <ToggleButton>Select</ToggleButton>\n  <PokemonTable />\n</Selectable>\n```\n\n----------------------------------------\n\nTITLE: Defining a Wrapper Item Component with Prop Pass-through in React (JSX)\nDESCRIPTION: This React function component defines a custom wrapper component, MyItem, for use in collection components such as React Aria's Collection API. It shows that to maintain correct integration, all props received by MyItem must be manually forwarded to the underlying Item, including a custom className. There are no external dependencies except for the containing collection and React. Inputs are the standard React props, and output is the rendered Item component with props passed through. This approach allows for flexible composition but requires discipline in prop pass-through.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyItem(props) {\\n  return (\\n    <Item\\n      {...props}\\n      className=\\\"my-item\\\" />\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Storybook for React Aria Components - Shell\nDESCRIPTION: This snippet runs Storybook in development mode using Yarn, allowing for interactive testing and development of React Aria components. It requires that all dependencies have been installed via 'yarn' and will launch a local server for component visualization. Output includes accessible links to the running Storybook instance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/starters/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn storybook\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Label Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @react-aria/label package in a Markdown file. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/label/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/label\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Importing Package Data for Internationalized Number Library\nDESCRIPTION: This snippet imports package data for the @internationalized/number library, likely used to display version information or other metadata in the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport packageData from '@internationalized/number/package.json';\n```\n\n----------------------------------------\n\nTITLE: Comparing CalendarDate Objects in TypeScript\nDESCRIPTION: Demonstrates how to compare CalendarDate objects using the compare method to determine if one date is before or after another.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nlet a = new CalendarDate(2022, 2, 3);\nlet b = new CalendarDate(2022, 3, 4);\n\na.compare(b) < 0; // true\nb.compare(a) > 0; // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Row with React Aria\nDESCRIPTION: This snippet shows how to implement a table row component using the useTableRow hook from React Aria. It handles selection state, keyboard focus, and visual feedback for different states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useTableRow} from '@react-aria/table';\n\nfunction TableRow({item, children, state}) {\n  let ref = useRef<HTMLTableRowElement | null>(null);\n  let isSelected = state.selectionManager.isSelected(item.key);\n  let {rowProps, isPressed} = useTableRow({\n    node: item\n  }, state, ref);\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  return (\n    <tr\n      style={{\n        background: isSelected\n          ? 'blueviolet'\n          : isPressed\n            ? 'var(--spectrum-global-color-gray-400)'\n            : item.index % 2\n              ? 'var(--spectrum-alias-highlight-hover)'\n              : 'none',\n        color: isSelected ? 'white' : null,\n        outline: 'none',\n        boxShadow: isFocusVisible ? 'inset 0 0 0 2px orange' : 'none',\n        cursor: 'default'\n      }}\n      {...mergeProps(rowProps, focusProps)}\n      ref={ref}>\n      {children}\n    </tr>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Keyboard Activation in Tabs\nDESCRIPTION: Shows how to configure Tabs for manual keyboard activation using the keyboardActivation prop. This example sets the prop to 'manual', requiring an Enter or Space key press to confirm tab selection after arrow key navigation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tabs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Tabs keyboardActivation=\"manual\">\n  <TabList aria-label=\"Input settings\">\n    <Tab id=\"mouse\">Mouse Settings</Tab>\n    <Tab id=\"keyboard\">Keyboard Settings</Tab>\n    <Tab id=\"gamepad\">Gamepad Settings</Tab>\n  </TabList>\n  <TabPanel id=\"mouse\">Mouse Settings</TabPanel>\n  <TabPanel id=\"keyboard\">Keyboard Settings</TabPanel>\n  <TabPanel id=\"gamepad\">Gamepad Settings</TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone Display in DatePicker\nDESCRIPTION: Demonstrates how to hide the time zone abbreviation when using a ZonedDateTime value in a DatePicker.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDatePicker.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<DatePicker\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix with Vite for React Aria Locale Optimization\nDESCRIPTION: Sets up Remix with Vite to exclude translation strings from the client bundle using the @react-aria/optimize-locales-plugin.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { unstable_vitePlugin as remix } from '@remix-run/dev';\nimport { defineConfig } from 'vite';\nimport localesPlugin from '@react-aria/optimize-locales-plugin';\n\nexport default defineConfig({\n  plugins: [\n    remix(),\n    // Don't include any locale strings in the client JS bundle.\n    {...localesPlugin.vite({locales: []}), enforce: 'pre'}\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Remix Development Server with Vite\nDESCRIPTION: Command to start the Vite development server for a Remix project during development.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/remix/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Side Label Alignment\nDESCRIPTION: Shows how to position and align the label to the side of the RadioGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite avatar\" labelPosition=\"side\" labelAlign=\"end\">\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing StatusLight Component in React Spectrum\nDESCRIPTION: Example of how to import the StatusLight component from the React Spectrum library. This is the basic import statement needed to use the component in your React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/statuslight/docs/StatusLight.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {StatusLight} from '@react-spectrum/statuslight';\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Listbox Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-aria/listbox package using Markdown syntax. It provides a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/listbox\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Disallowing All Web Crawlers in robots.txt\nDESCRIPTION: This configuration uses the `User-agent: *` directive to target all web crawlers and the `Disallow: /` directive to prevent them from accessing any path on the website starting from the root. This effectively blocks the entire site from being indexed by compliant web crawlers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/disallow-robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Components in React Spectrum\nDESCRIPTION: Demonstrates how to import the necessary components for using Toast functionality in a React Spectrum application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/toast/docs/Toast.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ButtonGroup, Button} from '@adobe/react-spectrum';\nimport {ToastContainer, ToastQueue} from '@react-spectrum/toast';\n```\n\n----------------------------------------\n\nTITLE: Styling DateSegment States with Data Attributes - React Spectrum (CSS)\nDESCRIPTION: Shows how to use data attributes on the .react-aria-DateSegment class for styling different UI states, such as placeholder and readonly. This enables context-sensitive CSS rules for more accessible, user-friendly designs. Requires React Aria components rendering these data attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_22\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-DateSegment[data-placeholder] {\n  /* ... */\n}\n\n.react-aria-DateSegment[data-readonly] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Weekdays/Weekends with @internationalized/date in TypeScript\nDESCRIPTION: Illustrates the use of `isWeekday` and `isWeekend` functions from `@internationalized/date` to determine if a `CalendarDateTime` falls on a weekday or weekend. It highlights the locale-dependency, showing that Sunday is considered a weekend in 'en-US' but a weekday in 'he-IL'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {isWeekday, isWeekend} from '@internationalized/date';\n\nlet date = new CalendarDateTime(2022, 2, 6, 8, 30); // a Sunday\n\nisWeekday(date, 'en-US'); // false\nisWeekday(date, 'he-IL'); // true\n\nisWeekend(date, 'en-US'); // true\nisWeekend(date, 'he-IL'); // false\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Calendar Grid Implementation\nDESCRIPTION: Example of customizing CalendarGrid with custom header cells\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarGridHeader, CalendarHeaderCell, CalendarGridBody} from 'react-aria-components';\n\n<RangeCalendar aria-label=\"Trip dates\">\n  <header>\n    <Button slot=\"previous\">◀</Button>\n    <Heading />\n    <Button slot=\"next\">▶</Button>\n  </header>\n  <CalendarGrid>\n    <CalendarGridHeader>\n      {day => <CalendarHeaderCell style={{color: 'var(--blue)'}}>{day}</CalendarHeaderCell>}\n    </CalendarGridHeader>\n    <CalendarGridBody>\n      {date => <CalendarCell date={date} />}\n    </CalendarGridBody>\n  </CalendarGrid>\n</RangeCalendar>\n```\n\n----------------------------------------\n\nTITLE: Read-only RadioGroup in React\nDESCRIPTION: Shows how to create a read-only RadioGroup using the isReadOnly prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/radio/docs/RadioGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Favorite avatar\" defaultValue=\"wizard\" isReadOnly>\n  <Radio value=\"wizard\">Wizard</Radio>\n  <Radio value=\"dragon\">Dragon</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating Emphasized CheckboxGroup in React Spectrum\nDESCRIPTION: Example demonstrating the use of the isEmphasized prop to create visually emphasized checkboxes, following Spectrum design guidelines for emphasis.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup label=\"Favorite sports\" defaultValue={['soccer', 'baseball']} isEmphasized>\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS and Plugins for React Aria Components (CSS)\nDESCRIPTION: This snippet shows how to import Tailwind CSS and add the tailwindcss-react-aria-components and tailwindcss-animate plugins directly in your main CSS file. These imports are necessary for supporting the component-specific utility classes and animation effects used in the example. Intended for Tailwind v4 setups; input is CSS configuration, output is global class availability.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/account-menu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Using Custom Checkbox in Tree Component\nDESCRIPTION: This example shows how to use a custom Checkbox component within a Tree component by placing it in the selection slot of a TreeItemContent element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n<Tree>\n  <TreeItem>\n    <TreeItemContent>\n      <MyCustomCheckbox slot=\"selection\" />\n      {/* ... */}\n    </TreeItemContent>\n  </TreeItem>\n</Tree>\n```\n\n----------------------------------------\n\nTITLE: DisclosureGroup with Interactive Elements\nDESCRIPTION: Shows how to add interactive elements adjacent to the disclosure's heading within a DisclosureGroup.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DisclosureGroup>\n  <Disclosure id=\"system\">\n    <div style={{display: 'flex', alignItems: 'center'}}>\n      <Heading>\n        <Button slot=\"trigger\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          System Requirements\n        </Button>\n      </Heading>\n      <Button>Click me</Button>\n    </div>\n    <DisclosurePanel>\n      <p>Details about system requirements here.</p>\n    </DisclosurePanel>\n  </Disclosure>\n  <Disclosure id=\"personal\">\n    <div style={{display: 'flex', alignItems: 'center'}}>\n      <Heading>\n        <Button slot=\"trigger\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" />\n          </svg>\n          Personal Information\n        </Button>\n      </Heading>\n      <Button>Click me</Button>\n    </div>\n    <DisclosurePanel>\n      <p>Details about personal information here.</p>\n    </DisclosurePanel>\n  </Disclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: NumberFormatter Component Documentation Header\nDESCRIPTION: Sets up the documentation metadata and header components for the NumberFormatter component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberFormatter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PageDescription>{docs.exports.NumberFormatter.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['NumberFormatter']}\n  sourceData={[]} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn - Shell\nDESCRIPTION: This snippet demonstrates how to install all required dependencies for the React Aria project using Yarn. The 'yarn' command fetches and installs packages listed in the project's package.json file. It must be run in the project root directory prior to starting Storybook or making any changes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/starters/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Dictionary with getLocalizationScript in Remix (TSX)\nDESCRIPTION: Illustrates passing a custom `LocalizedStringDictionary` as an additional parameter to the `getLocalizationScript` function, typically used in Remix applications for SSR localization. This integrates the optimized string dictionary with Remix's server-side rendering and localization mechanism.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\ngetLocalizationScript(locale, dictionary)\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ComboBox with React Aria and Tailwind CSS in TSX\nDESCRIPTION: This snippet demonstrates creating a ComboBox using React Aria components (`Popover`, `ListBox`, `ListBoxItem`) styled with Tailwind CSS utility classes. It features dynamic width based on the trigger, animations for entering/exiting, and conditional rendering within the `ListBoxItem` based on the `isSelected` state using render props to show a check icon.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n  <Popover className=\"w-(--trigger-width) ... entering:animate-in entering:fade-in exiting:animate-out exiting:fade-out\">\n    <ListBox items={people}>\n      {item => (\n        <ListBoxItem textValue={item.name} className=\"group text-gray-900 ... focus:bg-blue-600 focus:text-white\">\n          {/* Use render props to customize children based on state. */}\n          {({ isSelected }) => <>\n            <img alt=\"\" src={item.avatar} />\n            <span className=\"... font-normal group-selected:font-semibold\">{item.name}</span>\n            {isSelected &&\n              <CheckIcon />\n            }\n          </>}\n        </ListBoxItem>\n      )}\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js basePath and Environment Variable\nDESCRIPTION: This snippet shows how to configure the Next.js basePath setting and expose it as an environment variable for use in the application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst basePath = '...';\nconst nextConfig = {\n  basePath,\n  env: {\n    BASE_PATH: basePath\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: LabeledValue with Number Formatting\nDESCRIPTION: Example showing number formatting in LabeledValue component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/labeledvalue/docs/LabeledValue.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<LabeledValue label=\"Number of cookies\" value={1024} />\n```\n\n----------------------------------------\n\nTITLE: Documenting useSliderState Hook API and Interface in Markdown (Markdown)\nDESCRIPTION: This Markdown section establishes file metadata (category, keywords, version), presents the page heading for the useSliderState hook, and embeds UI components for showing its description, package/version, API, and interface types. It leverages dynamic values from imported JavaScript for up-to-date documentation. It also references related documentation in react-aria for practical usage examples. Requires the imported docs and components for functionality.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/slider/docs/useSliderState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncategory: Sliders\nkeywords: [slider, range, input, state]\nafter_version: 3.0.0-alpha.3\n---\n\n# useSliderState\n\n<PageDescription>{docs.exports.useSliderState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useSliderState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useSliderState} links={docs.links} />\n\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useSliderState.return.id]} />\n\n## Example\n\nSee the docs for [useSlider](/react-aria/useSlider.html) in react-aria for an example of `useSliderState`.\n```\n\n----------------------------------------\n\nTITLE: React Spectrum Layout Import\nDESCRIPTION: Basic import and export setup for the React Spectrum documentation layout component with copyright notice.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Resolving React Spectrum Start-up Failures\nDESCRIPTION: Shows an example error message when starting the project fails. This can be due to stale build artifacts or cache issues.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@parcel/core: packages/@react-aria/virtualizer/src/index.ts does not export 'useVirtualizer'\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Toolbar Component in React Aria (TypeScript/TSX)\nDESCRIPTION: This minimal example displays the usage of the Toolbar component imported from react-aria-components. It provides a structural container for interactive controls and is intended to be expanded with children as needed. Emphasizes the flexibility and accessible design pattern supported by Toolbar. It requires the react-aria-components package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toolbar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Toolbar} from 'react-aria-components';\\n\\n<Toolbar>\\n  {/* ... */}\\n</Toolbar>\n```\n\n----------------------------------------\n\nTITLE: Importing Footer Component from React Spectrum (JSX)\nDESCRIPTION: This snippet demonstrates how to import the Footer component from the @react-spectrum/view package for use in a React project. The import statement allows developers to utilize the Footer component in their JSX or TSX files. Ensure @react-spectrum/view is installed via npm or yarn as a dependency prior to import.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/view/docs/Footer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Footer} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Text Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @react-spectrum/text package in a Markdown file. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/text/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/text\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Updating Border Width Style Props in React Spectrum\nDESCRIPTION: This example shows how to update the border width style prop from React Spectrum v3 to S2, converting from named values to pixel values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/codemods/src/s1-to-s2/UPGRADE.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- <View borderWidth=\"thin\"  />\n+ <div className={style({borderWidth: 1})} />\n```\n\n----------------------------------------\n\nTITLE: Animating Tooltip Entry and Exit with CSS Transitions\nDESCRIPTION: Example of using CSS transitions with data attributes to animate tooltip appearance and disappearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tooltip {\n  transition: opacity 300ms;\n\n  &[data-entering],\n  &[data-exiting] {\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Tray Dialog in React Spectrum\nDESCRIPTION: This code snippet illustrates the creation of a tray dialog using DialogTrigger and Dialog components. It includes a button to trigger the tray and the content of the dialog.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/Dialog.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger type=\"tray\">\n  <ActionButton>Trigger Tray</ActionButton>\n  <Dialog>\n    <Heading>Tray</Heading>\n    <Divider />\n    <Content>\n      <Text>\n        This is a tray.\n      </Text>\n    </Content>\n  </Dialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Using Style Macros with HTML Elements in React Spectrum\nDESCRIPTION: Example of applying style macros to an HTML div element in React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-rollup-starter-app/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone with placeholderValue in DateField\nDESCRIPTION: Demonstrates how to set a default time zone for newly created date values using the placeholderValue prop with the now function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {now} from '@internationalized/date';\n\n<MyDateField\n  label=\"Event date\"\n  granularity=\"second\" />\n<MyDateField\n  label=\"Event date\"\n  placeholderValue={now('America/New_York')}\n  granularity=\"second\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Theme Express Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-spectrum/theme-express package in a Markdown file. It includes a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/theme-express/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/theme-express\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox Example\nDESCRIPTION: Shows how to disable a checkbox using the isDisabled prop, which prevents user interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCheckbox isDisabled>Subscribe</MyCheckbox>\n```\n\n----------------------------------------\n\nTITLE: Density Options in TableView\nDESCRIPTION: This example demonstrates how to change the vertical padding density in a TableView using the density prop with values 'compact' and 'spacious'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\n// Using same setup as hide header example\n<Flex direction=\"column\" gap=\"size-300\">\n  <TableExample density=\"compact\" />\n  <TableExample density=\"spacious\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Customizing First Day of Week in DateRangePicker\nDESCRIPTION: Example showing how to customize the first day of the week in the calendar display of a DateRangePicker using the firstDayOfWeek prop, setting it to Monday instead of the locale default.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" firstDayOfWeek=\"mon\" />\n```\n\n----------------------------------------\n\nTITLE: Calculating Weeks in a Month in TypeScript\nDESCRIPTION: Shows how to use the getWeeksInMonth function to determine the number of weeks in a given month, considering locale-specific details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getWeeksInMonth} from '@internationalized/date';\n\nlet date = new CalendarDate(2021, 1, 1);\n\ngetWeeksInMonth(date, 'en-US'); // 6\ngetWeeksInMonth(date, 'fr-FR'); // 5\n```\n\n----------------------------------------\n\nTITLE: Rendering Highlights Section with Internationalization Library Features - JSX\nDESCRIPTION: This snippet renders the Highlights component, passing a list of highlight items that describe key features of the internationalization libraries. Each item includes a title and a description, with links to respective package documentation. The format allows easy extension or modification of feature highlights. The component expects an array of objects with 'title' and 'description' (as JSX elements).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/internationalized/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Highlights items={[\n  {\n    title: 'Dates and times',\n    description: <>The  <a href=\"./date/index.html\">@internationalized/date</a> package provides utilities for representing and manipulating dates and times in a locale-aware manner across calendar systems, time zones, and more.</>\n  },\n  {\n    title: 'Numbers',\n    description: <>The <a href=\"./number/index.html\">@internationalized/number</a> package implements international number formatting and parsing, including support for multiple numbering systems, currencies, percentages, units, and other formatting options.</>,\n  },\n  // {\n  //  title: 'Time zones',\n  //  description: 'The @internationalized/timezone package includes data about time zones, including their geography, translated city names, etc.'\n  // },\n]} />\n```\n\n----------------------------------------\n\nTITLE: Validating Partial Input with NumberParser\nDESCRIPTION: Example demonstrating how to use isValidPartialNumber to validate incomplete user input during typing, which is more permissive than the parse method.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberParser.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nlet parser = new NumberParser('en-US', {style: 'unit', unit: 'inch'});\nparser.isValidPartialNumber('.'); // true\nparser.isValidPartialNumber('.2'); // true\nparser.isValidPartialNumber('10 in'); // true\nparser.isValidPartialNumber('10 i'); // false\nparser.isValidPartialNumber('10 x'); // false\n```\n\n----------------------------------------\n\nTITLE: Creating Mock File System Data for Tree Component\nDESCRIPTION: Creates a hierarchical data structure that simulates a file system with nested folders and files up to 4 levels deep. This mock data will be used for the Tree component example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/file-system.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst filesystem = [\n  // mock up a file system with 50 items total and nested children up to 4 levels deep\n  {'id': 'documents', name: 'Documents', children: [\n    {'id': 'photos', name: 'Photos', children: [\n      {'id': 'summer', name: 'Summer', children: [\n        {'id': 'beach', name: 'Beach'},\n        {'id': 'mountains', name: 'Mountains'},\n        {'id': 'forest', name: 'Forest'},\n        {'id': 'desert', name: 'Desert'}\n      ]},\n      {'id': 'winter', name: 'Winter', children: [\n        {'id': 'skiing', name: 'Skiing'},\n        {'id': 'snowboarding', name: 'Snowboarding'},\n        {'id': 'snowmobiling', name: 'Snowmobiling'},\n        {'id': 'snowshoeing', name: 'Snowshoeing'}\n      ]}\n    ]},\n    {'id': 'videos', name: 'Videos', children: [\n      {'id': 'family', name: 'Family'},\n      {'id': 'friends', name: 'Friends'},\n      {'id': 'pets', name: 'Pets'},\n      {'id': 'vacations', name: 'Vacations'}\n    ]},\n    {'id': 'music', name: 'Music', children: [\n      {'id': 'rock', name: 'Rock', children: [\n        {'id': 'classic', name: 'Classic'},\n        {'id': 'alternative', name: 'Alternative'},\n        {'id': 'punk', name: 'Punk'},\n        {'id': 'metal', name: 'Metal'}\n      ]},\n      {'id': 'pop', name: 'Pop', children: [\n        {'id': 'dance', name: 'Dance'},\n        {'id': 'hip-hop', name: 'Hip Hop'},\n        {'id': 'r&b', name: 'R&B'},\n        {'id': 'soul', name: 'Soul'}\n      ]}\n    ]},\n    {'id': 'movies', name: 'Movies', children: [\n      {'id': 'action', name: 'Action'},\n      {'id': 'comedy', name: 'Comedy'},\n      {'id': 'drama', name: 'Drama'},\n      {'id': 'horror', name: 'Horror'}\n    ]}\n  ]}\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Widths for SearchAutocomplete in React Spectrum (TypeScript)\nDESCRIPTION: This example demonstrates configuring the SearchAutocomplete component with custom sizing using the 'width' and 'maxWidth' props. It sets the component to a large size (size-6000) while constraining its maximum width to 100% of its parent. The snippet requires React Spectrum components, and illustrates UI adaptability, especially for responsive layouts. Key parameters are 'width' and 'maxWidth', and the output is an autocomplete input styled according to specified dimensions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<SearchAutocomplete label=\\\"Favorite Animal\\\" width=\\\"size-6000\\\" maxWidth=\\\"100%\\\">\\n  <Item>Red Panda</Item>\\n  <Item>Cat</Item>\\n  <Item>Dog</Item>\\n  <Item>Aardvark</Item>\\n  <Item>Kangaroo</Item>\\n  <Item>Snake</Item>\\n</SearchAutocomplete>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Types and Hook for Individual Droppable Items in TypeScript\nDESCRIPTION: Defines TypeScript interfaces for the options (`DroppableItemOptions`) and result (`DroppableItemResult`) of the `useDroppableItem` hook. This hook is intended to be used alongside `useDroppableCollection` to provide the necessary props for individual elements within the collection to act as drop targets.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2020-v3-dnd.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DroppableItemOptions {\n  /** The drop target represented by this element. */\n  target: DropTarget,\n}\n\n\ninterface DroppableItemResult {\n  /** Props for the item element. */\n  dropProps: HTMLAttributes<HTMLElement>\n}\n\ndeclare function useDroppableItem(options: DroppableItemOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DroppableItemResult;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Label Component Compatible with React Aria\nDESCRIPTION: Example of using LabelContext and useContextProps hook to make a custom Label component compatible with React Aria Components, enabling the reuse of existing components from your app or component library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Slider.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LabelProps} from 'react-aria-components';\nimport {LabelContext, useContextProps} from 'react-aria-components';\n\nconst MyCustomLabel = React.forwardRef((props: LabelProps, ref: React.ForwardedRef<HTMLLabelElement>) => {\n  // Merge the local props and ref with the ones provided via context.\n  [props, ref] = useContextProps(props, ref, LabelContext);\n\n  // ... your existing Label component\n  return <label {...props} ref={ref} />;\n});\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Simple markdown reference showing the package name and link to the main project repository.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dnd/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/dnd\n```\n\n----------------------------------------\n\nTITLE: Styling Virtualized Components for Examples (CSS)\nDESCRIPTION: This hidden CSS block provides styling for the examples demonstrating the Virtualizer component. It imports base styles and specific styles for Checkbox, ListBox, GridList, and Table examples using CSS layers. It sets a fixed height and width for ListBox and GridList elements to ensure virtualization works correctly within the example context, and removes default padding from Table.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n hidden\n@import \"@react-aria/example-theme\";\n@import './Checkbox.mdx' layer(checkbox);\n@import './ListBox.mdx' layer(listbox);\n@import './GridList.mdx' layer(gridlist);\n@import './Table.mdx' layer(table);\n\n.react-aria-ListBox,\n.react-aria-GridList {\n  display: block;\n  padding: 0;\n  height: 300px;\n  width: 250px;\n}\n\n.react-aria-Table {\n  padding: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting ReactSpectrum Docs Layout - JavaScript\nDESCRIPTION: This snippet imports the Layout component from the '@react-spectrum/docs' package and exports it as the default export. The Layout component is likely used as a wrapper for all documentation pages in the project, establishing a consistent structure. Requires that '@react-spectrum/docs' is installed and accessible in project dependencies. Input: none; Output: exported Layout component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/internationalized/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Importing useFocusWithin Hook from React Aria\nDESCRIPTION: This snippet shows how to import the useFocusWithin hook from the @react-aria/interactions package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/useFocusWithin.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useFocusWithin} from '@react-aria/interactions';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Data and Components\nDESCRIPTION: Imports documentation data (`docs`) generated from `@react-stately/toast`, various documentation rendering components (`ClassAPI`, `HeaderInfo`, etc.) from `@react-spectrum/docs`, and package metadata (`packageData`) from `@react-stately/toast/package.json`. These imports are used to dynamically build the documentation page content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/toast/docs/useToastState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/toast';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/toast/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Dependencies for React Aria Components\nDESCRIPTION: Imports necessary components and assets for the documentation page including TypeLink, styles, illustrations, and icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport docs from 'docs:react-aria-components';\nimport {TypeLink} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport Tabs from '@react-spectrum/docs/pages/assets/component-illustrations/Tabs.svg';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\n```\n\n----------------------------------------\n\nTITLE: Implementing an Accessible Switch Component with React Aria in TSX\nDESCRIPTION: This snippet demonstrates how to create a custom Switch component using React Aria hooks. It implements accessibility features, state management, and focus handling while allowing for custom styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/introducing-react-spectrum.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Switch(props) {\n  let state = useToggleState(props);\n  let {inputProps} = useSwitch(props, state);\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  return (\n    <label style={{display: 'flex', alignItems: 'center'}}>\n      <VisuallyHidden>\n        <input {...inputProps} {...focusProps} />\n      </VisuallyHidden>\n      <svg width={40} height={24} aria-hidden=\"true\" style={{marginRight: 4}}>\n        <rect x={4} y={4} width={32} height={16} rx={8} fill={state.isSelected ? 'orange' : 'gray'} />\n        <circle cx={state.isSelected ? 28 : 12} cy={12} r={5} fill=\"white\" />\n        {isFocusVisible &&\n          <rect x={1} y={1} width={38} height={22} rx={11} fill=\"none\" stroke=\"orange\" strokeWidth={2} />\n        }\n      </svg>\n      {props.children}\n    </label>\n  );\n}\n\n<Switch>Test</Switch>\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Breadcrumbs Package in Markdown\nDESCRIPTION: This code snippet shows how to reference the @react-aria/breadcrumbs package in a Markdown file. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/breadcrumbs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/breadcrumbs\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Labeling ColorArea for Accessibility using aria-label/aria-labelledby in TSX\nDESCRIPTION: Shows two accessibility labeling techniques for `ColorArea`. The first example uses `aria-label` directly on the `ColorArea` component. The second example uses an external `Label` component and connects it to the `ColorArea` using `aria-labelledby` referencing the `Label`'s `id`. Both methods enhance accessibility by providing a descriptive name for the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ColorArea} from '@react-spectrum/color';\nimport {Flex} from '@react-spectrum/layout';\nimport {Label} from '@react-spectrum/label';\n\n<Flex gap=\"size-300\" wrap alignItems=\"end\">\n  <ColorArea\n    aria-label=\"Background color\"\n    defaultValue=\"hsl(0, 100%, 50%)\"\n    xChannel=\"saturation\"\n    yChannel=\"lightness\" />\n  <div>\n    <Label\n      id=\"hsl-aria-labelledby-id\">Background color</Label>\n    <ColorArea\n      aria-labelledby=\"hsl-aria-labelledby-id\"\n      defaultValue=\"hsl(0, 100%, 50%)\"\n      xChannel=\"saturation\"\n      yChannel=\"lightness\" />\n  </div>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone Display in React Aria DateField (TSX)\nDESCRIPTION: This snippet demonstrates how to hide the time zone abbreviation that is normally displayed when a `DateField` (represented as `MyDateField`) uses a `ZonedDateTime` value. The `hideTimeZone` prop is set to `true` to achieve this.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDateField\n  label=\"Appointment time\"\n  defaultValue={parseZonedDateTime('2022-11-07T10:45[America/Los_Angeles]')}\n  hideTimeZone />\n```\n\n----------------------------------------\n\nTITLE: Overriding First Day of Week with getWeeksInMonth in TypeScript\nDESCRIPTION: Demonstrates providing the optional `firstDayOfWeek` argument ('mon') to the `getWeeksInMonth` function from `@internationalized/date`. This overrides the default start day defined by the 'en-US' locale (Sunday) and calculates the number of weeks based on weeks starting on Monday.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\ngetWeeksInMonth(date, 'en-US', 'mon'); // 5\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Dates\nDESCRIPTION: Example showing how to implement and validate unavailable date ranges with custom validation\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\nfunction Example() {\n  let now = today(getLocalTimeZone());\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  return (\n    <MyDateRangePicker\n      label=\"Trip dates\"\n      minValue={today(getLocalTimeZone())}\n      isDateUnavailable={date => disabledRanges.some((interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0)}\n      validate={value => disabledRanges.some(interval => value && value.end.compare(interval[0]) >= 0 && value.start.compare(interval[1]) <= 0) ? 'Selected date range may not include unavailable dates.' : null}\n     />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the TableView Default Copy Drag and Drop Example in TypeScript\nDESCRIPTION: Renders the `DragIntoTablesDefaultCopy` component, which displays a source `TableView` and a target `TableView`. Dragging items from the source to the target defaults to a 'copy' operation due to the `getDropOperation` configuration in the target table's `useDragAndDrop` hook.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/table/docs/TableView.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\n<DragIntoTablesDefaultCopy />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation and Metadata - React Spectrum Disclosure - JavaScript\nDESCRIPTION: This snippet imports documentation metadata (docs), API reference components (ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription), and package metadata for useDisclosureGroupState. These imports enable rendering auto-generated API documentation as well as static analysis of types and descriptions. Dependencies include @react-spectrum/docs, @react-stately/disclosure, and its package.json file. These imports are foundational for constructing a dynamic and informative documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/disclosure/docs/useDisclosureGroupState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/disclosure';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/disclosure/package.json';\n```\n\n----------------------------------------\n\nTITLE: Adding Description to ComboBox\nDESCRIPTION: This example demonstrates how to add a description to a ComboBox using the description slot.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<ComboBox>\n  <Label>Favorite Animal</Label>\n  <div>\n    <Input />\n    <Button>▼</Button>\n  </div>\n  <Text slot=\"description\">Please select an animal.</Text>\n  <Popover>\n    <ListBox>\n      <ListBoxItem>Aardvark</ListBoxItem>\n      <ListBoxItem>Cat</ListBoxItem>\n      <ListBoxItem>Dog</ListBoxItem>\n      <ListBoxItem>Kangaroo</ListBoxItem>\n      <ListBoxItem>Panda</ListBoxItem>\n      <ListBoxItem>Snake</ListBoxItem>\n    </ListBox>\n  </Popover>\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Emphasized Selection Styling in ActionGroup with React Spectrum\nDESCRIPTION: This example shows an ActionGroup with emphasized styling applied to selected items. The isEmphasized prop provides additional visual distinction for selected items in the single selection mode.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup\n  isEmphasized\n  selectionMode=\"single\"\n  defaultSelectedKeys={['list']}>\n  <Item key=\"grid\">Grid view</Item>\n  <Item key=\"list\">List view</Item>\n  <Item key=\"gallery\">Gallery view</Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Cycling Time Fields\nDESCRIPTION: Examples of cycling time fields with wrapping behavior and rounding options\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Time.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nlet time = new Time(23, 59);\ntime.cycle('hour', 1); // 00:59\ntime.cycle('minute', 1); // 23:00\n\nlet time = new Time(0, 0);\ntime.cycle('hour', -1); // 23:00\ntime.cycle('minute', -1); // 00:59\n```\n\nLANGUAGE: tsx\nCODE:\n```\nlet time = new Time(9, 22);\n\ntime.cycle('minute', 15); // 09:37\ntime.cycle('minute', 15, {round: true}); // 09:30\n\ntime.cycle('minute', -15); // 09:07\ntime.cycle('minute', -15, {round: true}); // 09:15\n```\n\nLANGUAGE: tsx\nCODE:\n```\nlet time = new Time(11);\ntime.cycle('hour', 1); // 12:00\ntime.cycle('hour', 1, {hourCycle: 12}); // 00:00\n\nlet time = new Time(23);\ntime.cycle('hour', 1); // 00:00\ntime.cycle('hour', 1, {hourCycle: 12}); // 12:00\n```\n\n----------------------------------------\n\nTITLE: Styling the Drop Indicator Between Items (CSS)\nDESCRIPTION: CSS rule to style the default drop indicator (`.react-aria-DropIndicator`) used in ListBox when dropping between items. It applies an outline when the indicator is active, signified by the `[data-drop-target]` attribute.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_40\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DropIndicator[data-drop-target] {\n  outline: 1px solid var(--highlight-background);\n}\n```\n\n----------------------------------------\n\nTITLE: TagGroup with Contextual Help in React\nDESCRIPTION: This example demonstrates how to add contextual help to a TagGroup using the ContextualHelp component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tag/docs/TagGroup.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<TagGroup\n  label=\"Categories\"\n  contextualHelp={\n    <ContextualHelp>\n      <Heading>What are tags?</Heading>\n      <Content>Tags allow users to categorize content.</Content>\n    </ContextualHelp>\n  }>\n  <Item>News</Item>\n  <Item>Travel</Item>\n  <Item>Gaming</Item>\n  <Item>Shopping</Item>\n</TagGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing Supporting CSS Styles for React Aria Components\nDESCRIPTION: Imports CSS styles for `Button`, `TextField`, and `Dialog` components using CSS layers. This CSS is referenced in the accompanying example but is initially hidden in the documentation UI.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Modal.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n@import './TextField.mdx' layer(textfield);\n@import './Dialog.mdx' layer(dialog);\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Indicator for Drag-and-Drop - CSS\nDESCRIPTION: Defines CSS rules for the .drop-indicator element used in the ListBox drag-and-drop UI. Styles manage the indicator's size, outline, margin, and appearance when active as a drop target; the style guarantees visual feedback to the user when dragging items over valid drop zones. For correct appearance, ensure variable --blue is defined (for .drop-indicator.drop-target) in your CSS variables. This styling should be included in the application where the ListBox is rendered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n.drop-indicator {\\n  width: 100%;\\n  margin-left: 0;\\n  height: 2px;\\n  margin-bottom: -2px;\\n  outline: none;\\n  background: transparent;\\n}\\n\\n.drop-indicator:last-child {\\n  margin-bottom: 0;\\n  margin-top: -2px;\\n}\\n\\n.drop-indicator.drop-target {\\n  background: var(--blue);\\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Group Component Usage in React Aria (TSX)\nDESCRIPTION: This basic TSX snippet demonstrates instantiating the Group component from React Aria Components without props or children. Used as a starting point or placeholder, it accepts child elements and ARIA properties for semantic grouping. Outputs a React Group element, and may be used with additional context or customization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Group.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Group} from 'react-aria-components';\\n\\n<Group>\\n  {/* ... */}\\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Styling the ColorThumb Component (CSS)\nDESCRIPTION: Provides CSS definitions for the .react-aria-ColorThumb class, customizing borders, shadow, dimensions, and effects for focus-visible states. It ensures the thumb is visually distinct and responsive to accessibility interactions. No external dependencies are required; these rules can be added to a stylesheet loaded alongside the component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorThumb {\\n  border: 2px solid white;\\n  box-shadow: 0 0 0 1px black, inset 0 0 0 1px black;\\n  width: 20px;\\n  height: 20px;\\n  border-radius: 50%;\\n  box-sizing: border-box;\\n\\n  &[data-focus-visible] {\\n    width: 24px;\\n    height: 24px;\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Checkbox Documentation\nDESCRIPTION: Imports various documentation components, styles, and assets needed for the Checkbox component documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Checkbox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport docs from 'docs:react-aria-components';\nimport typesDocs from 'docs:@react-types/shared/src/events.d.ts';\nimport {PropTable, HeaderInfo, TypeLink, PageDescription, StateTable, ContextTable} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport packageData from 'react-aria-components/package.json';\nimport Anatomy from '@react-aria/checkbox/docs/checkbox-anatomy.svg';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {Divider} from '@react-spectrum/divider';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport {Keyboard} from '@react-spectrum/text';\nimport {StarterKits} from '@react-spectrum/docs/src/StarterKits';\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Toast Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-spectrum/toast package in a Markdown file. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/toast/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/toast\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Blog Post Layout in React Spectrum Docs (JavaScript)\nDESCRIPTION: This snippet imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports `BlogPostLayout` as the default export, setting up the standard layout structure for this release announcement page within the React Spectrum documentation site.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-09-13.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout Component in JavaScript\nDESCRIPTION: This JavaScript snippet imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports the `BlogPostLayout` component as the default export for the module. This is typically used to structure a blog post or documentation page within the React Spectrum documentation website.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-04-05.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Data Modules in JavaScript\nDESCRIPTION: Imports documentation objects generated from TypeScript definition files (`.d.ts`) and other sources for various React Stately and React Aria packages related to collections, lists, trees, listboxes, and selects. These objects likely contain parsed information like descriptions, types, and links used by documentation components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/Collection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/collections';\nimport collectionsDocs from 'docs:@react-types/shared/src/collections.d.ts';\nimport treeDocs from 'docs:@react-stately/tree';\nimport listDocs from 'docs:@react-stately/list';\nimport listboxDocs from 'docs:@react-aria/listbox';\nimport selectDocs from 'docs:@react-aria/select';\nimport {HeaderInfo, TypeContext, InterfaceType, ClassAPI, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Exporting Layout (JavaScript)\nDESCRIPTION: Imports the `Layout`, `Highlights`, and `Hero` components from `@react-spectrum/docs`, image assets for the hero section, the `VisuallyHidden` component from `@react-aria/visually-hidden`, the `clsx` utility for class name management, and various CSS modules for styling. It then exports the `Layout` component as the default export for this module.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport {Highlights, Hero} from '@react-spectrum/docs';\nimport heroNarrow from 'url:./assets/ReactSpectrumHome_Mobile_976x1025_1x.png';\nimport heroNarrow2x from 'url:./assets/ReactSpectrumHome_Mobile_976x1025_2x.png';\nimport heroNarrowWebp from 'url:./assets/ReactSpectrumHome_Mobile_976x1025_1x.webp';\nimport heroNarrow2xWebp from 'url:./assets/ReactSpectrumHome_Mobile_976x1025_2x.webp';\nimport heroWide from 'url:./assets/ReactSpectrumHome_976x445_1x.png';\nimport heroWide2x from 'url:./assets/ReactSpectrumHome_976x445_2x.png';\nimport heroWideWebp from 'url:./assets/ReactSpectrumHome_976x445_1x.webp';\nimport heroWide2xWebp from 'url:./assets/ReactSpectrumHome_976x445_2x.webp';\nimport {VisuallyHidden} from '@react-aria/visually-hidden';\nimport clsx from 'clsx';\nimport linkStyle from '@adobe/spectrum-css-temp/components/link/vars.css';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport typographyStyles from '@adobe/spectrum-css-temp/components/typography/vars.css';\n```\n\n----------------------------------------\n\nTITLE: Applying Theme and Structuring CheckboxGroup Styling in CSS\nDESCRIPTION: This CSS snippet applies a base example theme from react-aria and defines the layout, gaps, and text color for CheckboxGroup components using the .react-aria-CheckboxGroup class. Dependencies include the '@react-aria/example-theme' stylesheet, and customization is constrained to the enclosing class, allowing for flexible component styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/CheckboxGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-CheckboxGroup {\n  display: flex;\n  flex-direction: column;\n  gap: 0.571rem;\n  color: var(--text-color);\n}\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker with Time Zone Support\nDESCRIPTION: Demonstrates how to use DateRangePicker with time zone awareness by using parseZonedDateTime to create date objects with specific time zones.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<DateRangePicker\n  label=\"Date range\"\n  defaultValue={{\n    start: parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]'),\n    end: parseZonedDateTime('2022-11-08T11:15[America/Los_Angeles]')\n  }} />\n```\n\n----------------------------------------\n\nTITLE: Custom Input Component Wrapper\nDESCRIPTION: Example of creating a wrapper component for customizing Input props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyInput(props) {\n  return <Input {...props} className=\"my-input\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Form Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'Form' component. It renders a container component that provides layout, alignment, and potentially validation context for a group of form fields. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\n<Form />\n```\n\n----------------------------------------\n\nTITLE: Custom Calendar System Implementation\nDESCRIPTION: Implementation of a custom 4-5-4 calendar system by extending the GregorianCalendar class with custom business logic for date calculations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {GregorianCalendar} from '@internationalized/date';\n\nfunction Example() {\n  return <MyRangeCalendar firstDayOfWeek=\"sun\" createCalendar={() => new Custom454()} />;\n}\n\nclass Custom454 extends GregorianCalendar {\n  weekPattern = [4, 5, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4];\n  getDaysInMonth(date) {\n    return this.weekPattern[date.month - 1] * 7;\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorian = super.fromJulianDay(jd);\n\n    let monthStart = startOfWeek(new CalendarDate(gregorian.year, 1, 1), 'en');\n    for (let months = 0; months < this.weekPattern.length; months++) {\n      let weeksInMonth = this.weekPattern[months];\n      let monthEnd = monthStart.add({weeks: weeksInMonth});\n      if (monthEnd.compare(gregorian) > 0) {\n        let days = gregorian.compare(monthStart);\n        return new CalendarDate(this, monthStart.year, months + 1, days + 1);\n      }\n      monthStart = monthEnd;\n    }\n\n    throw Error('Date is not in any month somehow!');\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let monthStart = startOfWeek(new CalendarDate(date.year, 1, 1), 'en');\n    for (let month = 1; month < date.month; month++) {\n      monthStart = monthStart.add({weeks: this.weekPattern[month - 1]});\n    }\n\n    let gregorian = monthStart.add({days: date.day - 1});\n    return super.toJulianDay(gregorian);\n  }\n\n  getFormattableMonth(date) {\n    let gregorian = toCalendar(date, new GregorianCalendar());\n    return gregorian.set({month: date.month, day: 1});\n  }\n\n  isEqual(other) {\n    return other instanceof Custom454;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Breakpoints in Provider\nDESCRIPTION: This example demonstrates how to set custom breakpoints in the Provider and use them for responsive styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/provider/docs/Provider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Provider theme={theme} breakpoints={{tablet: 640, desktop: 1024}}>\n  <View height=\"size-1000\" backgroundColor={{base: 'celery-600', tablet: 'blue-600', desktop: 'magenta-600'}} />\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Styling React Spectrum components with style-macro\nDESCRIPTION: Example of applying styles to React Spectrum components using the style() macro with the styles prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-parcel-example/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button styles={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Making RangeCalendar Read-Only in TSX\nDESCRIPTION: Illustrates how to make the `RangeCalendar` read-only using the `isReadOnly` prop. The calendar remains focusable, but the selected value (provided via the `value` prop) cannot be changed by the user.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar aria-label=\"Trip dates\" value={{start: today(getLocalTimeZone()), end: today(getLocalTimeZone()).add({ weeks: 1 })}} isReadOnly />\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS React Aria Components Plugin\nDESCRIPTION: Example of importing the Tailwind CSS plugin for React Aria Components in CSS (Tailwind v4).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Justified ActionGroup in React Spectrum\nDESCRIPTION: This example demonstrates how to create an ActionGroup with the isJustified prop, which evenly distributes all available horizontal space among the buttons, making them fill the entire width of the container.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex width=\"size-2000\" direction=\"column\">\n  <ActionGroup isJustified>\n    <Item key=\"brush\" aria-label=\"Brush\"><Brush /></Item>\n    <Item key=\"select\" aria-label=\"Select\"><Select /></Item>\n    <Item key=\"regionSelect\" aria-label=\"Select Region\"><RegionSelect /></Item>\n  </ActionGroup>\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Displaying Tooltip Only On Focus Using trigger Prop - React TypeScript\nDESCRIPTION: This code shows how to restrict the tooltip to appear only on keyboard focus by setting the trigger prop to 'focus' on the TooltipButton component, which disables tooltip appearance on hover. It highlights customization of interaction accessibility for specific use cases, leveraging the trigger prop, while maintaining full ARIA compliance and accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/tooltip/docs/useTooltipTrigger.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipButton tooltip=\"Burn CD\" trigger=\"focus\">💿</TooltipButton>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing User for ARIA Pattern Testing in TypeScript\nDESCRIPTION: This code demonstrates how to initialize the User object from @react-spectrum/test-utils and create a pattern tester for table components. It shows how to specify interaction type, set up timer advancement for tests, and create a specific tester for a component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// YourTest.test.ts\nimport {screen} from '@testing-library/react';\nimport {User} from '@react-spectrum/test-utils';\n\n// Provide whatever method of advancing timers you use in your test, this example assumes Jest with fake timers.\n// 'interactionType' specifies what mode of interaction should be simulated by the tester\n// 'advanceTimer' is used by the tester to advance the timers in the tests for specific interactions (e.g. long press)\nlet testUtilUser = new User({interactionType: 'mouse', advanceTimer: jest.advanceTimersByTime});\n// ...\n\nit('my test case', async function () {\n  // Render your test component/app\n  render();\n  // Initialize the table tester via providing the 'Table' pattern name and the root element of said table\n  let table = testUtilUser.createTester('Table', {root: screen.getByTestId('test_table')});\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Value Scale in React Spectrum with TypeScript\nDESCRIPTION: This snippet shows how to specify custom minimum and maximum values for a React Spectrum Slider using the \\\"minValue\\\" and \\\"maxValue\\\" props. It sets a slider labeled 'Cookies to buy' that allows values between 50 and 150, with an initial value of 100 via \\\"defaultValue\\\". No advanced JavaScript logic or React state is required; the slider is uncontrolled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<Slider\n  label=\"Cookies to buy\"\n  minValue={50}\n  maxValue={150}\n  defaultValue={100} />\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Component in React\nDESCRIPTION: This snippet shows how to create a Popover component using the usePopover hook from React Aria. It's used to contain the popup calendar for the DateRangePicker.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateRangePicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AriaPopoverProps} from 'react-aria';\nimport type {OverlayTriggerState} from 'react-stately';\nimport {usePopover, Overlay, DismissButton} from '@react-aria/overlays';\n\ninterface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {\n  children: React.ReactNode,\n  state: OverlayTriggerState\n}\n\nfunction Popover({children, state, ...props}: PopoverProps) {\n  let popoverRef = React.useRef(null);\n  let {popoverProps, underlayProps} = usePopover({\n    ...props,\n    popoverRef\n  }, state);\n\n  return (\n    <Overlay>\n      <div {...underlayProps} style={{position: 'fixed', inset: 0}} />\n      <div\n        {...popoverProps}\n        ref={popoverRef}\n        style={{\n          ...popoverProps.style,\n          background: 'var(--page-background)',\n          border: '1px solid gray'\n        }}>\n        <DismissButton onDismiss={state.close} />\n        {children}\n        <DismissButton onDismiss={state.close} />\n      </div>\n    </Overlay>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Resources for useLabel Hook\nDESCRIPTION: Imports necessary documentation components and data for the useLabel hook documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/label/docs/useLabel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-aria/label';\nimport {FunctionAPI, HeaderInfo, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/label/package.json';\n```\n\n----------------------------------------\n\nTITLE: Referencing React Stately Color Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-stately/color package in a Markdown file. It includes a link to the main react-spectrum repository for more detailed information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-stately/color\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Components with Different Child Orders in JSX\nDESCRIPTION: Demonstrates how the proposed architecture allows for consistent rendering regardless of child component order.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-slots.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n  <Image />\n  <Avatar />\n</Card>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n  <Avatar />\n  <Image />\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Reorderable ListBox\nDESCRIPTION: Demonstrates how to use the ReorderableListBox component with a list of items managed by useListData hook. Implements onReorder callback to handle item reordering.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useListData} from '@react-stately/data';\n\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Cat'},\n      {id: 2, name: 'Dog'},\n      {id: 3, name: 'Kangaroo'},\n      {id: 4, name: 'Panda'},\n      {id: 5, name: 'Snake'}\n    ]\n  });\n\n  let onReorder = e => {\n    if (e.target.dropPosition === 'before') {\n      list.moveBefore(e.target.key, e.keys);\n    } else if (e.target.dropPosition === 'after') {\n      list.moveAfter(e.target.key, e.keys);\n    }\n  };\n\n  return (\n    <ReorderableListBox\n      aria-label=\"Favorite animals\"\n      selectionMode=\"multiple\"\n      selectionBehavior=\"replace\"\n      items={list.items}\n      onReorder={onReorder}\n    >\n      {item => <Item>{item.name}</Item>}\n    </ReorderableListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Page Frontmatter: Category and Keywords (Markdown)\nDESCRIPTION: Specifies the documentation frontmatter using Markdown/MDX syntax, categorizing the page under 'Collections' and providing keywords such as 'lists' and 'state' for search and organizational purposes. This information is used by the documentation site generator for indexing and classification. There are no direct parameters or programmatic outputs.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/list/docs/useListState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncategory: Collections\nkeywords: [lists, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic CheckboxGroup in React Spectrum (TypeScript)\nDESCRIPTION: This code shows a concise example of rendering a CheckboxGroup with three checkbox items, where the label identifies the overall group. Each Checkbox receives a unique value and child label. This pattern is suitable for collecting multi-selection input in forms and showcases the minimum configuration required to render grouped checkboxes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/checkbox/docs/CheckboxGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup label=\\\"Favorite sports\\\">\\n  <Checkbox value=\\\"soccer\\\">Soccer</Checkbox>\\n  <Checkbox value=\\\"baseball\\\">Baseball</Checkbox>\\n  <Checkbox value=\\\"basketball\\\">Basketball</Checkbox>\\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Assets and Components (JavaScript/JSX)\nDESCRIPTION: Imports documentation content (`docs`) generated for `@react-stately/tooltip`, specific rendering components (`ClassAPI`, `HeaderInfo`, etc.) from `@react-spectrum/docs`, and package metadata (`packageData`) from the tooltip package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/tooltip/docs/useTooltipTriggerState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/tooltip';\nimport {ClassAPI, HeaderInfo, FunctionAPI, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/tooltip/package.json';\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Class to ColorWheel (JSX)\nDESCRIPTION: This JSX snippet shows how to override the default CSS class name (`react-aria-ColorWheel`) by providing a custom `className` prop to the `ColorWheel` component. This allows for using custom CSS selectors or integrating with CSS methodologies like BEM.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorWheel className=\"my-color-wheel\">\n  {/* ... */}\n</ColorWheel>\n```\n\n----------------------------------------\n\nTITLE: Targeting DatePicker for Styling - React Aria - CSS\nDESCRIPTION: This CSS block provides a selector for targeting the main DatePicker component ('.react-aria-DatePicker'), serving as a base for further customizations. Developers should add their own rules within the block to customize appearance as needed. There are no functional changes, only presentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-DatePicker {\n  /* ... */\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using CalendarDate from @internationalized/date for Date Manipulation\nDESCRIPTION: This snippet shows how to use the CalendarDate object from the @internationalized/date library to perform date arithmetic. It demonstrates creating a date and adding years, months, and days to it.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/date-and-time-pickers-for-all.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\nlet date = new CalendarDate(2022, 2, 3);\ndate = date.add({years: 1, months: 1, days: 1});\ndate.toString(); // '2023-03-04'\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Components in React Spectrum Docs\nDESCRIPTION: Imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. These components are likely used to structure and style the blog post or release notes page within the documentation site.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-05-01.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Referencing @react-aria/numberfield Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-aria/numberfield package in a Markdown file. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/numberfield\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled TextField States\nDESCRIPTION: CSS styling for disabled TextField states using CSS custom properties.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-TextField {\n  .react-aria-Input,\n  .react-aria-TextArea {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tooltip in React Spectrum\nDESCRIPTION: This example shows how to disable a tooltip without disabling its trigger element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<TooltipTrigger isDisabled>\n  <ActionButton aria-label=\"Danger Will Robinson\" onPress={() => alert('pressed trigger')}><Delete /></ActionButton>\n  <Tooltip variant=\"negative\" showIcon>Dangerous action.</Tooltip>\n</TooltipTrigger>\n```\n\n----------------------------------------\n\nTITLE: Importing ListBox and Related Components in React Spectrum\nDESCRIPTION: Shows how to import the ListBox, Section, Item, and other related components from the React Spectrum library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ListBox, Section, Item} from '@react-spectrum/listbox';\nimport {Flex} from '@react-spectrum/layout';\nimport Book from '@spectrum-icons/workflow/Book';\nimport BulkEditUsers from '@spectrum-icons/workflow/BulkEditUsers';\nimport Draw from '@spectrum-icons/workflow/Draw';\nimport {Text} from '@react-spectrum/text';\nimport {Avatar} from \"@react-spectrum/avatar\";\n```\n\n----------------------------------------\n\nTITLE: Styling .react-aria-ToggleButtonGroup for Vertical Orientation (CSS)\nDESCRIPTION: Defines vertical flex column layout for a ToggleButtonGroup with orientation set to vertical. Applies margin and border-radius to buttons based on their position. Must be used in conjunction with the correct data-orientation attribute. No external dependencies required beyond CSS selector targets.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButtonGroup[data-orientation=vertical] {\n  flex-direction: column;\n  width: fit-content;\n\n  > button {\n    margin-block-start: -1px;\n    \n    &:first-child {\n      border-radius: 4px 4px 0 0;\n      margin-block-start: 0;\n    }\n\n    &:last-child {\n      border-radius: 0 0 4px 4px;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useMeter Hook from @react-aria/meter\nDESCRIPTION: This snippet shows how to import the useMeter hook from the @react-aria/meter package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/meter/docs/useMeter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useMeter} from '@react-aria/meter';\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Component State using CSS Data Attributes\nDESCRIPTION: This CSS snippet illustrates how to style a React Aria component based on its current state using data attributes. The example targets a `DisclosureGroup` component specifically when it is in the 'disabled' state by using the attribute selector `[data-disabled]`. This allows for conditional styling based on component interactions or properties.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DisclosureGroup[data-disabled] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Calendar First Day of Week in React Spectrum (TypeScript)\nDESCRIPTION: Overrides Calendar's automatic locale-based week start with firstDayOfWeek prop set to 'mon'. today(getLocalTimeZone()) provides the default value. Input: None (renders calendar UI). Output: Calendar with Monday as first day of week. Useful for region-specific requirements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Calendar.mdx#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n<MyCalendar aria-label=\"Event date\" value={today(getLocalTimeZone())} firstDayOfWeek=\"mon\" />\n```\n\n----------------------------------------\n\nTITLE: Confirmation Variant AlertDialog in React Spectrum\nDESCRIPTION: Example of an AlertDialog with the confirmation variant, which is used to confirm user actions before proceeding.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/dialog/docs/AlertDialog.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<DialogTrigger>\n  <ActionButton>Exit</ActionButton>\n  <AlertDialog\n    variant=\"confirmation\"\n    title=\"Exit instance?\"\n    primaryActionLabel=\"Confirm\"\n    cancelLabel=\"Cancel\">\n    Exit dungeon instance and return to main hub?\n  </AlertDialog>\n</DialogTrigger>\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated Wi-Fi Switch with Tailwind CSS\nDESCRIPTION: Implements a custom Wi-Fi Switch component using React Aria Components with Tailwind CSS classes for styling and animations. The switch includes hover, pressed, and selected states with smooth transitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/wifi-switch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Switch} from 'react-aria-components';\n\n<div className=\"bg-linear-to-r from-yellow-300 to-orange-300 p-12 rounded-lg flex justify-center\">\n  <Switch className=\"group flex gap-2 items-center text-black font-semibold text-lg\">\n    <div className=\"flex h-[26px] w-[44px] shrink-0 cursor-default rounded-full shadow-inner bg-clip-padding border border-solid border-white/30 p-[3px] box-border transition duration-200 ease-in-out bg-yellow-600 group-pressed:bg-yellow-700 group-selected:bg-amber-800 group-selected:group-pressed:bg-amber-900 outline-hidden group-focus-visible:ring-2 ring-black\">\n      <span className=\"h-[18px] w-[18px] transform rounded-full bg-white shadow-sm transition duration-200 ease-in-out translate-x-0 group-selected:translate-x-[100%]\" />\n    </div>\n    Wi-Fi\n  </Switch>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout Component in JavaScript (JSX)\nDESCRIPTION: This snippet imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports `BlogPostLayout` as the default export, likely setting it as the primary layout component for this specific documentation page (the release notes). The code is preceded by an Apache 2.0 license header.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-10-02.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API for useTableColumnResizeState in JSX\nDESCRIPTION: Uses the `FunctionAPI` component to render the detailed API documentation for the `useTableColumnResizeState` hook. It receives the specific API definition (`docs.exports.useTableColumnResizeState`) and related documentation links (`docs.links`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.useTableColumnResizeState} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata and SEO Frontmatter - React Spectrum - JSX\nDESCRIPTION: This frontmatter block at the top of the documentation page defines the file's category and associated keywords for documentation tooling and search engine optimization. No runtime dependencies are required. Inputs are static strings used by the documentation generator. There are no direct outputs, but the data influences doc site categorization and keyword metadata.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n---\ncategory: Collections\nkeywords: [table, aria, grid]\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter for Documentation Page\nDESCRIPTION: Defines metadata for the documentation page including category, keywords for search, and display order within the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/DateFormatter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ncategory: Date and Time\nkeywords: [date, internationalization]\norder: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Using the Tabs Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'Tabs' component. It renders a set of tabs that organize content into multiple sections, allowing the user to view one section at a time by selecting the corresponding tab. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_41\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs />\n```\n\n----------------------------------------\n\nTITLE: Styling DateSegment States with CSS Data Attributes\nDESCRIPTION: Examples of using data attributes to style different states of the DateSegment component, targeting placeholder and readonly states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateRangePicker.mdx#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-DateSegment[data-placeholder] {\n  /* ... */\n}\n\n.react-aria-DateSegment[data-readonly] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for React Spectrum Tree\nDESCRIPTION: Shows the basic CSS selector `.react-aria-Tree` used to target the `Tree` component for styling. This is the default class name provided by React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tree.mdx#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-Tree {\n  /* ... */\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Quiet DateField\nDESCRIPTION: This example shows how to render a DateField component in its quiet visual style.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField label=\"Birth date\" isQuiet />\n```\n\n----------------------------------------\n\nTITLE: DateRangePicker with Custom Placeholder Values and Granularity\nDESCRIPTION: Shows how to configure DateRangePicker with specific granularity and placeholder values to control the time zone of emitted values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {now} from '@internationalized/date';\n\n<Flex gap=\"size-150\" wrap>\n  <DateRangePicker\n    label=\"Date range\"\n    granularity=\"second\" />\n  <DateRangePicker\n    label=\"Date range\"\n    placeholderValue={now('America/New_York')}\n    granularity=\"second\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Time Object String Conversion\nDESCRIPTION: Shows how to convert a Time object to an ISO 8601 string format\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Time.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlet time = new Time(9, 45);\ntime.toString(); // '09:45:00'\n```\n\n----------------------------------------\n\nTITLE: State-based CSS Styling\nDESCRIPTION: Demonstrates CSS styling using data attributes for different component states\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-CalendarCell[data-selected] {\n  /* ... */\n}\n\n.react-aria-CalendarCell[data-invalid] {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Supported Locales in package.json - JSON\nDESCRIPTION: This JSON configuration snippet adds a 'locales' array to the root of a package.json file, listing the language-region codes supported by the project. It works in conjunction with locale optimization plugins for build tools. The only required field is 'locales'; input is an array of BCP 47 language tags. No code dependencies, but must be positioned at the package.json file's top level for detection by tooling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/internationalization.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"locales\\\": [\\\"en-US\\\", \\\"fr-FR\\\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: TextArea with HTML Form Integration in React Spectrum\nDESCRIPTION: Shows how to use the TextArea component with HTML forms using the name prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/docs/TextArea.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TextArea label=\"Comment\" name=\"comment\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Popover Container Padding using PopoverTrigger in TSX\nDESCRIPTION: This snippet shows how to use the `containerPadding` prop on `PopoverTrigger` to enforce a minimum space between the popover and the edges of its containing element (often the viewport). This example ensures at least 50px padding.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<PopoverTrigger placement=\"top\" containerPadding={50} label=\"Trigger\">\n  <Dialog>\n    This is a popover.\n  </Dialog>\n</PopoverTrigger>\n```\n\n----------------------------------------\n\nTITLE: Advanced RangeSlider Value Formatting in React\nDESCRIPTION: This example demonstrates advanced value formatting techniques for RangeSlider, including custom formatting functions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" maxWidth=\"size-3000\" gap=\"size-300\">\n  <RangeSlider\n    label=\"Level range\"\n    showValueLabel={false}\n    defaultValue={{start: 75, end: 100}} />\n\n  <RangeSlider\n    label=\"Cacao percentage\"\n    maxValue={1}\n    step={0.001}\n    formatOptions={{style: 'percent', minimumFractionDigits: 1}}\n    defaultValue={{start: .75, end: 1}} />\n\n  <RangeSlider\n    label=\"Search radius\"\n    maxValue={200}\n    getValueLabel={meters => `${meters.start}m to ${meters.end}m away`}\n    defaultValue={{start: 15, end: 60}} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Cycling Fields Across Daylight Saving Time - React Spectrum - TypeScript\nDESCRIPTION: Illustrates how cycling across DST transitions affects hour field values in ZonedDateTime. Demonstrates both spring forward (skipped hour) and fall back (repeated hour) adjustments, showing how the UTC offset changes internally. Uses parseZonedDateTime.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// A \"spring forward\" transition\nlet date = parseZonedDateTime('2020-03-08T01:00-08:00[America/Los_Angeles]');\ndate.cycle('hour', 1); // 2020-03-08T03:00-07:00[America/Los_Angeles]\n\n// A \"fall back\" transition\nlet date = parseZonedDateTime('2020-11-01T01:00-07:00[America/Los_Angeles]');\ndate.cycle('hour', 1); // 2020-11-01T01:00-08:00[America/Los_Angeles]\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Collections using Array.map (Less Performant) in React (TSX)\nDESCRIPTION: Demonstrates an alternative, less performant way to render dynamic collections using JavaScript's native `array.map` function directly within the `ListBox` component. This method requires manually providing both a React `key` prop and a React Aria `id` prop for each item.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlet [animals, setAnimals] = useState([\n  {name: 'Aardvark'},\n  {name: 'Kangaroo'},\n  {name: 'Snake'}\n]);\n\n<ListBox>\n  {animals.map(item =>\n    <ListBoxItem key={item.name} id={item.name}>{item.name}</ListBoxItem>\n  )}\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Parsing ISO 8601 Duration Strings in TypeScript\nDESCRIPTION: Demonstrates how to use the parseDuration function to convert ISO 8601 duration strings into DateTimeDuration objects. It includes examples of parsing positive, negative, and decimal durations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nparseDuration('P3Y6M6W4DT12H30M5S');\n// => {years: 3, months: 6, weeks: 6, days: 4, hours: 12, minutes: 30, seconds: 5}\n\nparseDuration('-P3Y6M6W4DT12H30M5S');\n// => {years: -3, months: -6, weeks: -6, days: -4, hours: -12, minutes: -30, seconds: -5}\n\nparseDuration('P3Y6M6W4DT12H30M5.5S');\n// => {years: 3, months: 6, weeks: 6, days: 4, hours: 12, minutes: 30, seconds: 5.5}\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Component using React Aria in TSX\nDESCRIPTION: This snippet defines a simple reusable `Button` component in React (TSX). It leverages the `useButton` hook from `@react-aria/button` to apply necessary accessibility props and manage button interactions. The component takes standard button props and passes them along, applying the props returned by the hook to the underlying HTML button element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true render=false\nimport {useButton} from '@react-aria/button';\n\nfunction Button(props) {\n  let ref = props.buttonRef;\n  let {buttonProps} = useButton(props, ref);\n  return <button {...buttonProps} ref={ref} style={props.style}>{props.children}</button>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Page Layout Component in JSX\nDESCRIPTION: This snippet imports the `Layout` component from `@react-spectrum/docs` and immediately exports it as the default export for the current module. This is likely setting up the main layout structure for the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useCalendarState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Using UNSAFE_PortalProvider for Custom Toast Portalling in React\nDESCRIPTION: Demonstrates how to use UNSAFE_PortalProvider to portal Toasts to a custom container. It includes an App component that wraps the ToastRegion and a button to trigger toasts.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/PortalProvider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {UNSAFE_PortalProvider} from '@react-aria/overlays';\n\n// See the above Toast docs link for the ToastRegion implementation\nfunction App() {\n  let container = React.useRef(null);\n  return (\n    <>\n      <UNSAFE_PortalProvider getContainer={() => container.current}>\n        <MyToastRegion />\n        <Button\n          onPress={() => queue.add({\n            title: 'Toast complete!',\n            description: 'Great success.'\n          })}>\n          Open Toast\n        </Button>\n      </UNSAFE_PortalProvider>\n      <div ref={container} style={{height: '110px', width: '200px',  overflow: 'auto', display: 'flex', flexDirection: 'column', gap: '20px', padding: '5px'}}>\n        Toasts are portalled here!\n      </div>\n    </>\n  );\n}\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Validating NumberField with Minimum Value - React Spectrum - TypeScript\nDESCRIPTION: Configures NumberField to accept only values above or equal to 0 using minValue. The valid range starts from 0, clamping user input on blur, and disabling decrement below the minimum. Suitable for numeric fields such as age input where negative values are invalid.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript (TSX)\nCODE:\n```\n<MyNumberField\n  label=\"Enter your age\"\n  minValue={0} />\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Dependencies for React Aria Components\nDESCRIPTION: Imports various dependencies required for the documentation page, including component documentation, styling, icons, and example utilities. These imports help render and style the documentation page elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/stock-table.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:react-aria-components';\nimport {TypeLink} from '@react-spectrum/docs';\nimport styles from '@react-spectrum/docs/src/docs.css';\nimport Table from '@react-spectrum/docs/pages/assets/component-illustrations/Table.svg';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\n```\n\n----------------------------------------\n\nTITLE: Using Uncontrolled SearchAutocomplete in React (tsx)\nDESCRIPTION: This snippet demonstrates the basic usage of an uncontrolled `SearchAutocomplete` component. Static options are provided directly as children using the `Item` component. The component manages its own internal state for the input value, selected option, and dropdown visibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/autocomplete/docs/useSearchAutocomplete.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Search Animals\">\n  <Item key=\"red panda\">Red Panda</Item>\n  <Item key=\"cat\">Cat</Item>\n  <Item key=\"dog\">Dog</Item>\n  <Item key=\"aardvark\">Aardvark</Item>\n  <Item key=\"kangaroo\">Kangaroo</Item>\n  <Item key=\"snake\">Snake</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Creating PopoverTrigger Component with useOverlayTrigger in React\nDESCRIPTION: This snippet shows how to implement a PopoverTrigger component using the useOverlayTrigger hook from React Aria. It handles the trigger button and manages the popover state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useOverlayTriggerState} from '@react-stately/overlays';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\n// Reuse the Button from your component library. See below for details.\nimport {Button} from 'your-component-library';\n\nfunction PopoverTrigger({label, children, ...props}) {\n  let ref = React.useRef(null);\n  let state = useOverlayTriggerState(props);\n  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'dialog'}, state, ref);\n\n  return <>\n    <Button {...triggerProps} buttonRef={ref}>{label}</Button>\n    {state.isOpen &&\n      <Popover {...props} triggerRef={ref} state={state}>\n        {React.cloneElement(children, overlayProps)}\n      </Popover>\n    }\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Documentation Page\nDESCRIPTION: Sets metadata for the documentation page, including category and keywords for search and organization.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/interactions/docs/interactions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n---\ncategory: Concepts\nkeywords: [aria, focus behavior, keyboard event, mouse event, pointer event, assistive technology]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Selection Behavior in ListBox (TypeScript/React)\nDESCRIPTION: This example demonstrates how to customize the selection behavior of the ListBox using the selectionBehavior prop set to 'replace'. When set, mouse clicks replace the entire selection with the clicked row and modifier keys may be needed to select multiple. This snippet requires react-spectrum/ListBox and Item imports.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox label=\\\"Choose sandwich contents\\\" selectionMode=\\\"multiple\\\" selectionBehavior=\\\"replace\\\">\\n  <Item key=\\\"lettuce\\\">Lettuce</Item>\\n  <Item key=\\\"tomato\\\">Tomato</Item>\\n  <Item key=\\\"cheese\\\">Cheese</Item>\\n  <Item key=\\\"tuna\\\">Tuna Salad</Item>\\n  <Item key=\\\"egg\\\">Egg Salad</Item>\\n  <Item key=\\\"ham\\\">Ham</Item>\\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Controlling Focused Date in RangeCalendar in TSX\nDESCRIPTION: Shows how to programmatically control which date is focused (and thus which month is visible) in `RangeCalendar` using the `focusedValue` and `onFocusChange` props with React state. A button is provided to reset the focus to a default date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\nfunction Example() {\n  let defaultDate = new CalendarDate(2021, 7, 1);\n  let [focusedDate, setFocusedDate] = React.useState(defaultDate);\n\n  return (\n    <div style={{flexDirection: 'column', alignItems: 'start', gap: 20}}>\n      <button onClick={() => setFocusedDate(defaultDate)}>Reset focused date</button>\n      <RangeCalendar focusedValue={focusedDate} onFocusChange={setFocusedDate} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Link Items within SearchAutocomplete in TSX\nDESCRIPTION: This example demonstrates how to configure `<Item>` components within a `SearchAutocomplete` to function as hyperlinks by providing an `href` prop and `target=\"_blank\"`. Selecting these items navigates to the specified URL in a new tab instead of updating the input value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/autocomplete/docs/SearchAutocomplete.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<SearchAutocomplete label=\"Tech company websites\">\n  <Item href=\"https://adobe.com/\" target=\"_blank\">Adobe</Item>\n  <Item href=\"https://apple.com/\" target=\"_blank\">Apple</Item>\n  <Item href=\"https://google.com/\" target=\"_blank\">Google</Item>\n  <Item href=\"https://microsoft.com/\" target=\"_blank\">Microsoft</Item>\n</SearchAutocomplete>\n```\n\n----------------------------------------\n\nTITLE: Styling FieldError for Select validation - React Spectrum - CSS\nDESCRIPTION: Sets custom font size and color for validation error messages in the Select using the .react-aria-FieldError class. Depends on parent .react-aria-Select for context and CSS variables for color. Input: field error DOM element. Output: styled error message, standardized for all Select components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Select {\\n  .react-aria-FieldError {\\n    font-size: 12px;\\n    color: var(--invalid-color);\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using the ColorSwatch Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'ColorSwatch' component. It renders a visual preview (swatch) of a selected color. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorSwatch />\n```\n\n----------------------------------------\n\nTITLE: Using the DialogTrigger Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'DialogTrigger' component (rendered as '<Popover />' in this specific example, potentially indicating a popover usage of DialogTrigger). It displays a dialog in various overlay forms (popover, modal, tray) in response to a trigger element. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover />\n```\n\n----------------------------------------\n\nTITLE: Meter Component Visual Variants\nDESCRIPTION: Demonstrates the different visual variants available for the Meter component, including informative, positive, critical, and warning styles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/meter/docs/Meter.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-300\">\n  <Meter label=\"Space used\" value={25} variant=\"informative\" />\n  <Meter label=\"Space used\" value={25} variant=\"positive\" />\n  <Meter label=\"Space used\" value={90} variant=\"critical\" />\n  <Meter label=\"Space used\" value={70} variant=\"warning\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component - React Spectrum Docs - JavaScript\nDESCRIPTION: This snippet imports the Layout component from '@react-spectrum/docs' and directly exports it as the default export, establishing the main rendering component for this documentation file. No external dependencies are needed beyond the React Spectrum documentation framework. Its primary function is to ensure consistent layout structure for pages using this file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/autocomplete/docs/useAutocompleteState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Using useVisuallyHidden Hook with React Aria in TypeScript (TSX)\nDESCRIPTION: This snippet demonstrates how to import and use the useVisuallyHidden hook from @react-aria/visually-hidden within a React component written in TypeScript (TSX). The hook returns a visuallyHiddenProps object, which contains the necessary props to visually hide the associated element while keeping it accessible to assistive technologies. To use this, spread visuallyHiddenProps onto the desired element. The only dependency is @react-aria/visually-hidden. Inputs include no special parameters to the hook in this example, and output is the element with the appropriate accessibility semantics applied. Suitable for custom components that require visually hidden elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/visually-hidden/docs/VisuallyHidden.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useVisuallyHidden} from '@react-aria/visually-hidden';\n\nlet {visuallyHiddenProps} = useVisuallyHidden();\n\n<div {...visuallyHiddenProps}>I am hidden</div>\n```\n\n----------------------------------------\n\nTITLE: Disabling an Entire RadioGroup in React (TSX)\nDESCRIPTION: Shows how to disable all radio buttons within a group by applying the `isDisabled` prop to the parent `RadioGroup` (or a wrapper component like `MyRadioGroup`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyRadioGroup label=\"Favorite sport\" isDisabled>\n  <Radio value=\"soccer\">Soccer</Radio>\n  <Radio value=\"baseball\">Baseball</Radio>\n  <Radio value=\"basketball\">Basketball</Radio>\n</MyRadioGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Slots with CSS Selectors\nDESCRIPTION: CSS example showing how to target increment and decrement slots within a NumberField component for specific styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-NumberField {\n  [slot=increment] {\n    border-radius: 4px 4px 0 0;\n  }\n\n  [slot=decrement] {\n    border-radius: 0 0 4px 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing RangeSlider Label Positions in React\nDESCRIPTION: This example shows different label positions and formatting options for the RangeSlider component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" maxWidth=\"size-5000\" gap=\"size-300\">\n  <RangeSlider label=\"Jeans price range\" formatOptions={{style: 'currency', currency: 'USD'}} defaultValue={{start: 75, end: 100}} />\n  <RangeSlider label=\"Shoes price range\" formatOptions={{style: 'currency', currency: 'USD'}} labelPosition=\"side\" defaultValue={{start: 50, end: 100}} />\n  <RangeSlider label=\"Hats price range\" formatOptions={{style: 'currency', currency: 'USD'}} showValueLabel={false} defaultValue={{start: 15, end: 30}} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: ListBox with Multiple Selection Modes in React Spectrum\nDESCRIPTION: Shows how to use both controlled and uncontrolled selection in ListBox components with the selectionMode set to multiple. Demonstrates defaultSelectedKeys for uncontrolled and selectedKeys with onSelectionChange for controlled selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/listbox/docs/ListBox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {Selection} from '@adobe/react-spectrum';\n\nfunction Example() {\n  let options = [\n    {name: 'Koala'},\n    {name: 'Kangaroo'},\n    {name: 'Platypus'},\n    {name: 'Bald Eagle'},\n    {name: 'Bison'},\n    {name: 'Skunk'}\n  ];\n  let [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set(['Bison']));\n\n  return (\n    <Flex direction=\"row\" gap=\"size-350\">\n      <ListBox\n        selectionMode=\"multiple\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        defaultSelectedKeys={['Bison', 'Koala']}\n        width=\"size-2400\">\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </ListBox>\n\n      <ListBox\n        selectionMode=\"multiple\"\n        aria-label=\"Pick an animal\"\n        items={options}\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n        width=\"size-2400\">\n        {item => <Item key={item.name}>{item.name}</Item>}\n      </ListBox>\n    </Flex>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Calendar Systems in React Spectrum Picker - TypeScript/TSX\nDESCRIPTION: This snippet implements a React functional component allowing users to select from multiple calendar systems using a Picker component. It sets the current calendar state, updates the provider locale to use the selected calendar system with the user's preferred locale, and renders a Calendar component. Requires React Spectrum components (@react-spectrum/picker, @react-spectrum/layout, @react-spectrum/provider), a compatible Calendar component, and useLocale() from context. Input consists of user interactions; output is the stateful rendering of the picker and calendar according to the currently selected calendar system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/date-and-time-pickers-for-all.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Picker, Item} from '@react-spectrum/picker';\\nimport {Flex} from '@react-spectrum/layout';\\nimport {Provider} from '@react-spectrum/provider';\\n\\nfunction Example() {\\n  let [calendar, setCalendar] = React.useState('gregory');\\n  let {locale} = useLocale();\\n  const calendars = [\\n    {key: 'gregory', name: 'Gregorian'},\\n    {key: 'japanese', name: 'Japanese'},\\n    {key: 'buddhist', name: 'Buddhist'},\\n    {key: 'roc', name: 'Taiwan'},\\n    {key: 'persian', name: 'Persian'},\\n    {key: 'indian', name: 'Indian'},\\n    {key: 'islamic-umalqura', name: 'Islamic (Umm al-Qura)'},\\n    {key: 'islamic-civil', name: 'Islamic Civil'},\\n    {key: 'islamic-tbla', name: 'Islamic Tabular'},\\n    {key: 'hebrew', name: 'Hebrew'},\\n    {key: 'coptic', name: 'Coptic'},\\n    {key: 'ethiopic', name: 'Ethiopic'},\\n    {key: 'ethioaa', name: 'Ethiopic (Amete Alem)'}\\n  ];\\n\\n  return (\\n    <Flex direction=\"column\" alignItems=\"center\" gap=\"size-200\">\\n      <Picker label=\"Calendar system\" items={calendars} selectedKey={calendar} onSelectionChange={setCalendar}>\\n        {item => <Item>{item.name}</Item>}\\n      </Picker>\\n      <Provider locale={`${locale}-u-ca-${calendar}`}>\\n        <Calendar aria-label=\"Date\" />\\n      </Provider>\\n    </Flex>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Slider Component in React Spectrum (TypeScript)\nDESCRIPTION: This code demonstrates how to render a disabled Slider by setting the \\\"isDisabled\\\" prop. The slider is labeled 'Cookies to share' and is initialized with a value of 25, but user interaction is prevented. This is helpful for indicating unavailable input fields in forms.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/slider/docs/useSlider.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx example\n<Slider\n  label=\"Cookies to share\"\n  defaultValue={25}\n  isDisabled />\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Utilities and Data in MDX/JavaScript\nDESCRIPTION: Imports documentation data (`docs`) generated for `@react-stately/color`, specific documentation rendering components (`ClassAPI`, `HeaderInfo`, etc.) from `@react-spectrum/docs`, and package metadata (`packageData`) from the `@react-stately/color` package.json. These imports are used to dynamically render the API documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorFieldState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/color';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/color/package.json';\n```\n\n----------------------------------------\n\nTITLE: Setting Disabled Row Selection Behavior - React Spectrum - TypeScript/JSX\nDESCRIPTION: An example of altering how disabled rows behave by passing disabledBehavior='selection', allowing actions or focus but not selection for disabled rows. Highlights the nuanced interaction features for advanced accessibility and user experience customization. This code assumes a PokemonList component and React Spectrum environment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n<PokemonList aria-label=\"List with selection disabled for disabled rows\" selectionMode=\"multiple\" disabledKeys={[3]} disabledBehavior=\"selection\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Layout in React Spectrum Docs (JSX)\nDESCRIPTION: This snippet imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports `BlogPostLayout` as the default export for the file, setting the overall structure and layout for this specific blog post page within the React Spectrum documentation site. The surrounding comments indicate the Adobe copyright and Apache 2.0 license.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-02-23.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* Copyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Targeting DateSegment States via Data Attributes - React Aria - CSS\nDESCRIPTION: This CSS snippet demonstrates how to style DateSegment components based on placeholder and readonly states using data-placeholder and data-readonly attributes. These selectors enable visual differentiation for date input segments depending on their UI state. Dependencies are basic CSS support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n```css\n.react-aria-DateSegment[data-placeholder] {\n  /* ... */\n}\n\n.react-aria-DateSegment[data-readonly] {\n  /* ... */\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling ColorArea - React Spectrum - TypeScript/React\nDESCRIPTION: Example of rendering the ColorArea component in a disabled state by using the isDisabled property. This prevents interaction with the color area's thumb and visually indicates the disabled state, with value and channels set for HSL. Only requires the ColorArea React component; ensure correct CSS for disabled appearance.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorArea.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n<ColorArea\\n  defaultValue=\\\"hsl(0, 100%, 50%)\\\"\\n  xChannel=\\\"saturation\\\"\\n  yChannel=\\\"lightness\\\"\\n  isDisabled />\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Resizable Table Headers\nDESCRIPTION: The CSS styles for table header cells and title elements, including focus states. These styles ensure proper alignment and visual feedback during interaction.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/table/docs/useTable.mdx#2025-04-23_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n.aria-table-headerCell {\n  padding: 5px 10px;\n  outline: none;\n  cursor: default;\n  box-sizing: border-box;\n  box-shadow: none;\n  text-align: left;\n}\n\n.aria-table-headerTitle {\n  width: 100%;\n  text-align: left;\n  border: none;\n  background: transparent;\n  flex: 1 1 auto;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  margin-inline-start: -6px;\n  outline: none;\n}\n\n.aria-table-headerTitle.focus {\n  outline: 2px solid orange;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic RangeCalendar Value Management in React\nDESCRIPTION: Demonstrates both controlled and uncontrolled value management for RangeCalendar using React state and defaultValue prop. Uses @internationalized/date package for date parsing and manipulation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDate} from '@internationalized/date';\n\nfunction Example() {\n  let [value, setValue] = React.useState({\n    start: parseDate('2020-02-03'),\n    end: parseDate('2020-02-12')\n  });\n\n  return (\n    <div style={{display: 'flex', gap: 20, flexWrap: 'wrap'}}>\n      <MyRangeCalendar\n        aria-label=\"Date range (uncontrolled)\"\n        defaultValue={{\n          start: parseDate('2020-02-03'),\n          end: parseDate('2020-02-12')\n        }} />\n      <MyRangeCalendar\n        aria-label=\"Date range (controlled)\"\n        value={value}\n        onChange={setValue} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Menu Collections with Sections in React Aria (TSX)\nDESCRIPTION: Shows how to structure a static `Menu` collection into logical groups using the `Section` element. Each `Section` can contain a `Header` element for its title and multiple `MenuItem` elements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/collections.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu>\n  <Section>\n    <Header>Styles</Header>\n    <MenuItem>Bold</MenuItem>\n    <MenuItem>Underline</MenuItem>\n  </Section>\n  <Section>\n    <Header>Align</Header>\n    <MenuItem>Left</MenuItem>\n    <MenuItem>Middle</MenuItem>\n    <MenuItem>Right</MenuItem>\n  </Section>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Rendering React Spectrum Picker Components Gallery\nDESCRIPTION: Creates a section showcasing picker components available in React Spectrum, including ComboBox and Picker.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<section className={styles.cardGroup}>\n\n<ExampleCard\n  url=\"ComboBox.html\"\n  title=\"ComboBox\"\n  description=\"A combobox combines a text input with a listbox, and allows a user to filter a list of options.\">\n  <ComboBoxAnatomy />\n</ExampleCard>\n\n<ExampleCard\n  url=\"Picker.html\"\n  title=\"Picker\"\n  description=\"A picker displays a collapsible list of options, and allows a user to select one of them.\">\n  <SelectAnatomy />\n</ExampleCard>\n\n</section>\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Components in React Spectrum\nDESCRIPTION: This snippet shows the import statements for the Tooltip and TooltipTrigger components, along with other related components and icons used in the examples.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tooltip/docs/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionButton} from '@react-spectrum/button';\nimport Delete from '@spectrum-icons/workflow/Delete';\nimport Edit from '@spectrum-icons/workflow/Edit';\nimport {Flex} from '@react-spectrum/layout';\nimport Question from '@spectrum-icons/workflow/Question';\nimport Resize from '@spectrum-icons/workflow/Resize';\nimport Save from '@spectrum-icons/workflow/SaveTo';\nimport {Text} from '@react-spectrum/text';\nimport ThumbUp from '@spectrum-icons/workflow/ThumbUp';\nimport { Tooltip, TooltipTrigger } from '@react-spectrum/tooltip';\n```\n\n----------------------------------------\n\nTITLE: Customizing DateField Label Position and Alignment\nDESCRIPTION: This example demonstrates how to customize the label position and alignment for a DateField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateField.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<DateField label=\"Birth date\" labelPosition=\"side\" labelAlign=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: ColorArea Styling with CSS\nDESCRIPTION: CSS styling for the ColorArea component including dimensions, border radius, and thumb styling with focus states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorArea {\n  width: 192px;\n  height: 192px;\n  border-radius: 4px;\n  flex-shrink: 0;\n}\n\n.react-aria-ColorThumb {\n  border: 2px solid white;\n  box-shadow: 0 0 0 1px black, inset 0 0 0 1px black;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  box-sizing: border-box;\n\n  &[data-focus-visible] {\n    width: 24px;\n    height: 24px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TextField HTML Form Integration - React Aria - TypeScript/TSX\nDESCRIPTION: Integrates MyTextField with an HTML form by assigning name and type properties, allowing form serialization. Requires the custom MyTextField. Useful for handling real submissions via native or controlled forms.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TextField.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\n<MyTextField label=\"Email\" name=\"email\" type=\"email\" />\\n\n```\n\n----------------------------------------\n\nTITLE: Importing Date Types and Utilities for Custom Calendars\nDESCRIPTION: Import statement for the necessary types and functions from @internationalized/date package needed for custom calendar implementations.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {AnyCalendarDate} from '@internationalized/date';\nimport {CalendarDate, startOfWeek, toCalendar} from '@internationalized/date';\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Button with Panda CSS in TSX\nDESCRIPTION: This TSX snippet demonstrates styling a `react-aria-components` Button using Panda CSS. It imports `Button` and Panda's `styled` function, then defines a `StyledButton` with base styles and variants (`primary`, `secondary`). The variants include specific background colors and styles for the pressed state (`data-pressed`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx format=false\nimport {Button} from 'react-aria-components';\nimport {styled} from '../styled-system/jsx';\n\nconst StyledButton = styled(Button, {\n  base: {\n    /* ... */\n  },\n  variants: {\n    variant: {\n      primary: {\n        background: 'blue.600',\n        '&[data-pressed]': {\n          background: 'blue.700',\n        }\n      },\n      secondary: {\n        background: 'gray.300',\n        '&[data-pressed]': {\n          background: 'gray.400',\n        }\n      }\n    }\n  }\n});\n\n<StyledButton variant=\"primary\">\n  Initiate launch sequence…\n</StyledButton>\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout and Hero Components - React Spectrum - JavaScript\nDESCRIPTION: This JavaScript snippet imports BlogPostLayout and Hero components from '@react-spectrum/docs' and sets BlogPostLayout as the default export. It is intended for integrating React Spectrum documentation layouts within the site. All standard ES module dependencies apply, and '@react-spectrum/docs' must be available in the project for successful import. The key input is to reference the exported layout in higher-level documentation page files. The output is the BlogPostLayout React component as the file's default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-03-21.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Disabled MyColorWheel (React Spectrum, TSX)\nDESCRIPTION: Renders the MyColorWheel component in a disabled state using the isDisabled prop. Prevents user focus and interaction with the component’s thumb, and can be styled accordingly. Best used where color choice needs to be locked based on app logic.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorWheel.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<MyColorWheel defaultValue=\"hsl(80, 100%, 50%)\" isDisabled />\\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Structure of a React Aria TagGroup\nDESCRIPTION: This snippet illustrates the anatomical structure of a `TagGroup` component using its constituent parts from `react-aria-components`. It shows how `Label`, `TagList`, `Tag`, `Button` (with `slot=\"remove\"`), and `Text` (with `slot=\"description\"` or `slot=\"errorMessage\"`) are composed together to form a complete TagGroup structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {TagGroup, TagList, Tag, Label, Button, Text} from 'react-aria-components';\n\n<TagGroup>\n  <Label />\n  <TagList>\n    <Tag>\n      <Button slot=\"remove\" />\n    </Tag>\n  </TagList>\n  <Text slot=\"description\" />\n  <Text slot=\"errorMessage\" />\n</TagGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Disabled Accent Button Example in Spectrum (TypeScript)\nDESCRIPTION: This simple example shows a Spectrum Button rendered as an 'accent' variant with the 'isDisabled' prop, preventing user interactions. It demonstrates how to visually and functionally disable a button. Key dependency is '@react-spectrum/button'. Outputs a non-clickable, greyed-out accent button labeled 'Save.'\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/Button.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Button variant=\\\"accent\\\" isDisabled>Save</Button>\n```\n\n----------------------------------------\n\nTITLE: Styling a Custom Drop Indicator (CSS)\nDESCRIPTION: CSS rule for styling a custom drop indicator element with the class `.my-drop-indicator`. It applies an outline when the indicator has the `.active` class, which corresponds to the `isDropTarget` state.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_42\n\nLANGUAGE: css\nCODE:\n```\n.my-drop-indicator.active {\n  outline: 1px solid #e70073;\n}\n```\n\n----------------------------------------\n\nTITLE: Draggable Component CSS Styling\nDESCRIPTION: CSS styling for the draggable component used in the DropZone example, including a visual state for when dragging.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DropZone.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.draggable {\n  display: inline-block;\n  vertical-align: top;\n  border: 1px solid gray;\n  padding: 10px;\n  margin-right: 20px;\n  border-radius: 4px;\n}\n\n.draggable.dragging {\n  opacity: 0.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component for React Spectrum Docs (JavaScript)\nDESCRIPTION: This code imports the Layout component from the @react-spectrum/docs package and sets it as the default export. This structure ensures that the documentation page is wrapped in the consistent Spectrum documentation layout. No parameters are required, but all content below will be rendered inside this layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/list/docs/useSingleSelectListState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom First Day of Week in React Spectrum Calendar (TSX)\nDESCRIPTION: This snippet illustrates how to override the default locale-based first day of the week in the Calendar component. The `firstDayOfWeek` prop is set to `'mon'` to make Monday the first day displayed in the calendar grid. Other possible values include 'sun', 'tue', 'wed', 'thu', 'fri', or 'sat'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Calendar aria-label=\"Event date\" value={today(getLocalTimeZone())} firstDayOfWeek=\"mon\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Fieldset and Error Message - React Spectrum (CSS)\nDESCRIPTION: Provides CSS rules for styling the fieldset and error messages in the advanced FieldGroup component. The fieldset is padded and width-adjusted, while error messages use a custom invalid color variable and spacing for clarity. Intended to be used with FieldGroup compositional patterns.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TimeField.mdx#2025-04-23_snippet_27\n\nLANGUAGE: CSS\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n\n.invalid {\n  color: var(--invalid-color);\n  margin-top: 1em;\n  display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ColorSlider with isDisabled Prop in React Spectrum (TypeScript)\nDESCRIPTION: This example demonstrates how to render a disabled ColorSlider component by setting the isDisabled prop. The slider thumb becomes inaccessible and unresponsive to user interaction. The snippet assumes ColorSlider is available and receives a color value on initialization; no interactive output is expected as the slider is disabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSlider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n<ColorSlider channel=\"red\" defaultValue=\"#7f007f\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata in JSX\nDESCRIPTION: This JSX code block defines metadata for a blog post, including a description and publication date. It's likely used in conjunction with a static site generator or similar system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-02-17.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n---\ndescription: After a small break, we are back with another release. This one is jam packed with fixes and new features. We have improved Picker, Tooltip, ComboBox and updated a number of our aria hooks. Also check out our new components currently under construction including a Color package. A special thanks to all of our contributors for a very active new year.\ndate: 2021-02-17\n---\n```\n\n----------------------------------------\n\nTITLE: Tailwind v3 Configuration for React Aria Components\nDESCRIPTION: JavaScript configuration for adding the tailwindcss-react-aria-components plugin to tailwind.config.js when using Tailwind v3.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/swipeable-tabs.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Light Theme Package\nDESCRIPTION: This code snippet shows the package name for the React Spectrum light theme. It is typically used to import or reference the light theme in a React Spectrum project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/theme-light/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/theme-light\n```\n\n----------------------------------------\n\nTITLE: Rendering a React Spectrum Toast Component\nDESCRIPTION: Renders an individual `<Toast>` component within a React Spectrum application, representing a single notification message. Properties and usage details are likely available via the associated `<PropTable>`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Toast>\n```\n\n----------------------------------------\n\nTITLE: Importing Button/Checkbox CSS Layers - React Spectrum - CSS\nDESCRIPTION: Imports CSS layer definitions for Button, Checkbox, and ToggleButton from their respective .mdx files. These layer imports ensure component-specific styles are included and modular, enabling encapsulated and reusable theming logic for the UI elements used in GridList. Input and output: CSS layer content is included during CSS compilation; no direct runtime effect beyond style application. Depends on build tooling supporting CSS @import of .mdx files.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './Button.mdx' layer(button);\n@import './Checkbox.mdx' layer(checkbox);\n@import './ToggleButton.mdx' layer(togglebutton);\n```\n\n----------------------------------------\n\nTITLE: Getting Today's Date in Different Time Zones\nDESCRIPTION: Demonstrates how to get today's date in a specific time zone and the local time zone using the today and getLocalTimeZone functions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDate.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today, getLocalTimeZone} from '@internationalized/date';\n\nlet nyDate = today('America/New_York');\nlet localDate = today(getLocalTimeZone());\n```\n\n----------------------------------------\n\nTITLE: Listing Released Packages with Versions - Markdown\nDESCRIPTION: Lists all released packages and their specific versions for the React Spectrum ecosystem. No dependencies are required to interpret this snippet as it is plain markdown for documentation purposes. Each package is listed as a bullet point containing the package name and version, and this list is not programmatically consumable without parsing. The snippet helps users quickly see what versions of which packages are currently released.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-12-20.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n```\n - @adobe/react-spectrum@3.33.0\n - @internationalized/date@3.5.1\n - @internationalized/number@3.5.0\n - @internationalized/string@3.2.0\n - @react-aria/accordion@3.0.0-alpha.25\n - @react-aria/actiongroup@3.7.1\n - @react-aria/autocomplete@3.0.0-alpha.24\n - @react-aria/breadcrumbs@3.5.9\n - @react-aria/button@3.9.1\n - @react-aria/calendar@3.5.4\n - @react-aria/checkbox@3.13.0\n - @react-aria/color@3.0.0-beta.28\n - @react-aria/combobox@3.8.1\n - @react-aria/datepicker@3.9.1\n - @react-aria/dialog@3.5.9\n - @react-aria/dnd@3.5.1\n - @react-aria/example-theme@1.0.0\n - @react-aria/focus@3.16.0\n - @react-aria/form@3.0.1\n - @react-aria/grid@3.8.6\n - @react-aria/gridlist@3.7.3\n - @react-aria/i18n@3.10.0\n - @react-aria/interactions@3.20.1\n - @react-aria/label@3.7.4\n - @react-aria/landmark@3.0.0-beta.8\n - @react-aria/link@3.6.3\n - @react-aria/listbox@3.11.3\n - @react-aria/menu@3.12.0\n - @react-aria/meter@3.4.9\n - @react-aria/numberfield@3.10.1\n - @react-aria/overlays@3.20.0\n - @react-aria/progress@3.4.9\n - @react-aria/radio@3.10.0\n - @react-aria/searchfield@3.7.0\n - @react-aria/select@3.14.1\n - @react-aria/selection@3.17.3\n - @react-aria/separator@3.3.9\n - @react-aria/slider@3.7.4\n - @react-aria/spinbutton@3.6.1\n - @react-aria/ssr@3.9.1\n - @react-aria/steplist@3.0.0-alpha.1\n - @react-aria/switch@3.6.0\n - @react-aria/table@3.13.3\n - @react-aria/tabs@3.8.3\n - @react-aria/tag@3.3.1\n - @react-aria/textfield@3.14.0\n - @react-aria/toast@3.0.0-beta.8\n - @react-aria/toggle@3.10.0\n - @react-aria/toolbar@3.0.0-beta.1\n - @react-aria/tooltip@3.7.0\n - @react-aria/utils@3.23.0\n - @react-aria/virtualizer@3.9.8\n - @react-aria/visually-hidden@3.8.8\n - @react-spectrum/accordion@3.0.0-alpha.27\n - @react-spectrum/actionbar@3.4.1\n - @react-spectrum/actiongroup@3.10.1\n - @react-spectrum/autocomplete@3.0.0-alpha.27\n - @react-spectrum/avatar@3.0.8\n - @react-spectrum/badge@3.1.9\n - @react-spectrum/breadcrumbs@3.9.3\n - @react-spectrum/button@3.16.0\n - @react-spectrum/buttongroup@3.6.9\n - @react-spectrum/calendar@3.4.4\n - @react-spectrum/card@3.0.0-alpha.28\n - @react-spectrum/checkbox@3.9.1\n - @react-spectrum/color@3.0.0-beta.29\n - @react-spectrum/combobox@3.12.0\n - @react-spectrum/contextualhelp@3.6.6\n - @react-spectrum/datepicker@3.9.1\n - @react-spectrum/dialog@3.8.6\n - @react-spectrum/divider@3.5.9\n - @react-spectrum/dnd@3.3.6\n - @react-spectrum/dropzone@3.0.0-rc.0\n - @react-spectrum/form@3.7.1\n - @react-spectrum/icon@3.7.9\n - @react-spectrum/illustratedmessage@3.4.9\n - @react-spectrum/image@3.4.9\n - @react-spectrum/inlinealert@3.2.1\n - @react-spectrum/label@3.16.1\n - @react-spectrum/labeledvalue@3.1.9\n - @react-spectrum/layout@3.6.1\n - @react-spectrum/link@3.6.3\n - @react-spectrum/list@3.7.5\n - @react-spectrum/listbox@3.12.5\n - @react-spectrum/menu@3.17.0\n - @react-spectrum/meter@3.4.9\n - @react-spectrum/numberfield@3.8.1\n - @react-spectrum/overlays@5.5.3\n - @react-spectrum/picker@3.14.0\n - @react-spectrum/progress@3.7.3\n - @react-spectrum/provider@3.9.3\n - @react-spectrum/radio@3.7.1\n - @react-spectrum/searchfield@3.8.1\n - @react-spectrum/slider@3.6.5\n - @react-spectrum/statuslight@3.5.9\n - @react-spectrum/steplist@3.0.0-alpha.1\n - @react-spectrum/switch@3.5.1\n - @react-spectrum/table@3.12.5\n - @react-spectrum/tabs@3.8.5\n - @react-spectrum/tag@3.2.1\n - @react-spectrum/text@3.5.1\n - @react-spectrum/textfield@3.11.1\n - @react-spectrum/toast@3.0.0-beta.8\n - @react-spectrum/tooltip@3.6.3\n - @react-spectrum/utils@3.11.3\n - @react-spectrum/view@3.6.6\n - @react-spectrum/well@3.4.9\n - @react-stately/calendar@3.4.3\n - @react-stately/checkbox@3.6.1\n - @react-stately/collections@3.10.4\n - @react-stately/color@3.5.1\n - @react-stately/combobox@3.8.1\n - @react-stately/datepicker@3.9.1\n - @react-stately/dnd@3.2.7\n - @react-stately/grid@3.8.4\n - @react-stately/layout@3.13.5\n - @react-stately/list@3.10.2\n - @react-stately/menu@3.6.0\n - @react-stately/numberfield@3.8.0\n - @react-stately/radio@3.10.1\n - @react-stately/select@3.6.1\n - @react-stately/selection@3.14.2\n - @react-stately/slider@3.5.0\n - @react-stately/steplist@3.0.0-alpha.1\n - @react-stately/table@3.11.4\n - @react-stately/tabs@3.6.3\n - @react-stately/tree@3.7.5\n - @react-stately/virtualizer@3.6.6\n - @react-types/autocomplete@3.0.0-alpha.19\n - @react-types/calendar@3.4.3\n - @react-types/card@3.0.0-alpha.22\n - @react-types/combobox@3.10.0\n - @react-types/datepicker@3.7.1\n - @react-types/form@3.7.0\n - @react-types/list@3.2.12\n - @react-types/radio@3.7.0\n - @react-types/select@3.9.1\n - @react-types/table@3.9.2\n - @spectrum-icons/color@3.5.9\n - @spectrum-icons/express@3.0.0-alpha.13\n - @spectrum-icons/illustrations@3.6.9\n - @spectrum-icons/ui@3.6.3\n - @spectrum-icons/workflow@4.2.8\n - @react-aria/optimize-locales-plugin@1.0.0\n - @react-aria/parcel-resolver-optimize-locales@1.0.0\n - react-aria@3.31.0\n - react-aria-components@1.0.0\n - react-stately@3.29.0\n - tailwindcss-react-aria-components@1.0.0\n```\n```\n\n----------------------------------------\n\nTITLE: Styling React Spectrum Components\nDESCRIPTION: Example of applying style macro to React Spectrum Button component using the styles prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-esbuild-starter-app/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button styles={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Description Component in JSX\nDESCRIPTION: Renders the `PageDescription` component, displaying the description for the `useTableState` hook. The description text is dynamically accessed from the imported `docs` object (`docs.exports.useTableState.description`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<PageDescription>{docs.exports.useTableState.description}</PageDescription>\n```\n\n----------------------------------------\n\nTITLE: Using the Breadcrumbs Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'Breadcrumbs' component. It renders a breadcrumb trail, displaying a hierarchy of links representing the path to the current page or resource within a site structure. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_43\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumbs />\n```\n\n----------------------------------------\n\nTITLE: Rendering Disabled Accordion - React Spectrum - TSX\nDESCRIPTION: This snippet shows an Accordion component with its isDisabled prop set, making all Disclosure panels non-interactive. The component tree is the same as the base usage example. Inputs: isDisabled boolean and Disclosure children. Output: visually and functionally disabled Accordion UI for cases like read-only workflows.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Accordion.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n<Accordion isDisabled>\n  <Disclosure id=\"personal\">\n    <DisclosureTitle>Personal Information</DisclosureTitle>\n    <DisclosurePanel>\n      Personal information form here.\n    </DisclosurePanel>\n  </Disclosure>\n  <Disclosure id=\"billing\">\n    <DisclosureTitle>Billing Address</DisclosureTitle>\n    <DisclosurePanel>\n      Billing address form here.\n    </DisclosurePanel>\n  </Disclosure>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Displaying Format Help Text in DateRangePicker\nDESCRIPTION: Example showing how to automatically display the expected date format for the user's locale in the DateRangePicker using the showFormatHelpText prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" showFormatHelpText />\n```\n\n----------------------------------------\n\nTITLE: Styling SearchField Component with Custom Clear Button\nDESCRIPTION: This example shows how to style a SearchField component with custom CSS and implement a clear button using the useButton hook from React Aria.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/searchfield/docs/useSearchField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction SearchField(props) {\n  let {label} = props;\n  let state = useSearchFieldState(props);\n  let ref = React.useRef(null);\n  let {labelProps, inputProps, clearButtonProps} = useSearchField(props, state, ref);\n\n  return (\n    <div className=\"search-field\">\n      <label {...labelProps}>{label}</label>\n      <div>\n        <input {...inputProps} ref={ref} />\n        {state.value !== '' &&\n          <Button {...clearButtonProps}>❎</Button>\n        }\n      </div>\n    </div>\n  );\n}\n\n<SearchField\n  label=\"Search\"\n  onSubmit={text => alert(text)} />\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum TextField Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-spectrum/textfield package in a Markdown document. It includes a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/textfield/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/textfield\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Disabling a Switch Component in TSX\nDESCRIPTION: This snippet illustrates how to disable the custom `Switch` component using the `isDisabled` prop. When `isDisabled` is true, the switch becomes non-interactive and visually indicates its disabled state (e.g., reduced opacity, as shown in the base component implementation).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/switch/docs/useSwitch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch isDisabled>Airplane Mode</Switch>\n```\n\n----------------------------------------\n\nTITLE: Avatar Size Props in Spectrum 2 and React Spectrum v3\nDESCRIPTION: Illustrates the difference in Avatar size prop types between Spectrum 2 and React Spectrum v3, showing the shift from specific sizes to more flexible options.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/s2/api-diff.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Spectrum 2\nsize: 16 | 20 | 24 | 28 | 32 | 36 | 40 | 44 | 48 | 56 | 64 | 80 | 96 | 112 | number\n\n// React Spectrum v3\nsize: 'avatar-size-100' | 'avatar-size-200' | 'avatar-size-300' | 'avatar-size-400' | 'avatar-size-50' | 'avatar-size-500' | 'avatar-size-600' | 'avatar-size-700' | 'avatar-size-75' | string | number\n```\n\n----------------------------------------\n\nTITLE: Styling React Aria Menu Item Links in CSS\nDESCRIPTION: This CSS rule targets `MenuItem` elements within React Aria components that function as links (contain an `href` attribute). It removes the default underline text decoration and changes the mouse cursor to a pointer, enhancing the link's appearance and usability.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n```css hidden\n.react-aria-MenuItem[href] {\n  text-decoration: none;\n  cursor: pointer;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering an Internationalization Demo Component in TSX\nDESCRIPTION: This TSX snippet imports the `I18n` component from './home/I18n' and renders it. It resides within a section dedicated to internationalization, indicating this component showcases features like translations, localized formatting, or right-to-left layout support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx snippet\nimport {I18n} from './home/I18n';\n\n<I18n />\n```\n```\n\n----------------------------------------\n\nTITLE: Forcing 24-Hour Cycle in React Aria DateField (TSX)\nDESCRIPTION: This example shows how to override the default locale-based hour format (12 or 24 hour) in a `DateField` (represented as `MyDateField`). The `hourCycle` prop is set to `24` to enforce the 24-hour time format regardless of the user's locale settings.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<MyDateField\n  label=\"Appointment time\"\n  granularity=\"minute\"\n  hourCycle={24} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API Documentation using FunctionAPI Component in MDX\nDESCRIPTION: Employs the `FunctionAPI` React component to display the detailed API documentation for the `useDateRangePickerState` hook/function. It passes the function's documentation object (`docs.exports.useDateRangePickerState`) and associated type links (`docs.links`) from the imported `docs` data as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<FunctionAPI function={docs.exports.useDateRangePickerState} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for React Aria Components in v3\nDESCRIPTION: Shows how to add the tailwindcss-react-aria-components plugin to a Tailwind v3 configuration file, noting version compatibility requirements.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Converting ZonedDateTime to Native Date - React Spectrum - TypeScript\nDESCRIPTION: Shows converting a ZonedDateTime to a native JavaScript Date object using the toDate method with a specified time zone. Requires parseZonedDateTime; outputs a Date in local time corresponding to the time zone. Useful where native formatting is necessary.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/ZonedDateTime.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = parseZonedDateTime('2022-02-03T09:45[America/Los_Angeles]');\ndate.toDate('America/Los_Angeles'); // Thu Feb 03 2022 09:45:00 GMT-0800 (Pacific Standard Time)\n```\n\n----------------------------------------\n\nTITLE: Applying Quiet Style to ToggleButton in TSX\nDESCRIPTION: Demonstrates the usage of the `isQuiet` boolean prop to render a `ToggleButton` with the quiet visual variant. This style is typically used for less prominent actions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/button/docs/ToggleButton.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ToggleButton isQuiet>Pin</ToggleButton>\n```\n\n----------------------------------------\n\nTITLE: Styling Example Theme Imports for FileTrigger Documentation - CSS\nDESCRIPTION: This CSS block demonstrates how to import stylesheets for theming example code and component documentation. It imports the @react-aria/example-theme for global styling and the local Button.mdx for the button layer. Required dependencies include the CSS loader and access to the referenced files. These imports are meant for illustration in documentation renderings and have no effect on the runtime behavior of FileTrigger. The affected scope is determined by how CSS is bundled in the documentation build.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/FileTrigger.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n@import './Button.mdx' layer(button);\n```\n\n----------------------------------------\n\nTITLE: Using Pressable for a Custom Menu Trigger Element - React Spectrum - TypeScript\nDESCRIPTION: Wraps a custom DOM element (here a span with button role) in Pressable to serve as the trigger for MenuTrigger. Ensures ARIA accessibility by assigning a proper role or semantic element. No external dependencies besides react-aria-components. Input is a generic trigger; output is a working, accessible menu opener.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Menu.mdx#2025-04-23_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Pressable} from 'react-aria-components';\n\n<MenuTrigger>\n  {/*- begin highlight -*/}\n  <Pressable>\n    <span role=\"button\">Custom trigger</span>\n  </Pressable>\n  {/*- end highlight -*/}\n  <Popover>\n    <Menu>\n      <MenuItem>Open</MenuItem>\n      <MenuItem>Rename…</MenuItem>\n      <MenuItem>Duplicate</MenuItem>\n      <MenuItem>Delete…</MenuItem>\n    </Menu>\n  </Popover>\n</MenuTrigger>\n```\n\n----------------------------------------\n\nTITLE: Released Package Versions - React Spectrum Ecosystem\nDESCRIPTION: Detailed version listing of all packages in the React Spectrum ecosystem, including core components, utilities, icons, and development tools. Contains packages from @adobe/react-spectrum, @react-aria, @react-stately, @react-types, and related tooling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2024-11-20.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n - @adobe/react-spectrum@3.38.0\n - @internationalized/date@3.6.0\n - @internationalized/message@3.1.6\n - @internationalized/number@3.6.0\n - @internationalized/string-compiler@3.2.6\n - @internationalized/string@3.2.5\n - @react-aria/accordion@3.0.0-alpha.36\n - @react-aria/actiongroup@3.7.11\n - @react-aria/aria-modal-polyfill@3.7.13\n - @react-aria/autocomplete@3.0.0-alpha.36\n - @react-aria/breadcrumbs@3.5.19\n - @react-aria/button@3.11.0\n - @react-aria/calendar@3.6.0\n - @react-aria/checkbox@3.15.0\n - @react-aria/collections@3.0.0-alpha.6\n - @react-aria/color@3.0.2\n - @react-aria/combobox@3.11.0\n - @react-aria/datepicker@3.12.0\n - @react-aria/dialog@3.5.20\n - @react-aria/disclosure@3.0.0\n - @react-aria/dnd@3.8.0\n - @react-aria/example-theme@1.0.5\n - @react-aria/focus@3.19.0\n - @react-aria/form@3.0.11\n - @react-aria/grid@3.11.0\n - @react-aria/gridlist@3.10.0\n - @react-aria/i18n@3.12.4\n - @react-aria/interactions@3.22.5\n - @react-aria/label@3.7.13\n - @react-aria/landmark@3.0.0-beta.17\n - @react-aria/link@3.7.7\n - @react-aria/listbox@3.13.6\n - @react-aria/live-announcer@3.4.1\n - @react-aria/menu@3.16.0\n - @react-aria/meter@3.4.18\n - @react-aria/numberfield@3.11.9\n - @react-aria/overlays@3.24.0\n - @react-aria/progress@3.4.18\n - @react-aria/radio@3.10.10\n - @react-aria/searchfield@3.7.11\n - @react-aria/select@3.15.0\n - @react-aria/selection@3.21.0\n - @react-aria/separator@3.4.4\n - @react-aria/slider@3.7.14\n - @react-aria/spinbutton@3.6.10\n - @react-aria/ssr@3.9.7\n - @react-aria/steplist@3.0.0-alpha.12\n - @react-aria/switch@3.6.10\n - @react-aria/table@3.16.0\n - @react-aria/tabs@3.9.8\n - @react-aria/tag@3.4.8\n - @react-aria/test-utils@1.0.0-alpha.3\n - @react-aria/textfield@3.15.0\n - @react-aria/toast@3.0.0-beta.18\n - @react-aria/toggle@3.10.10\n - @react-aria/toolbar@3.0.0-beta.11\n - @react-aria/tooltip@3.7.10\n - @react-aria/tree@3.0.0-beta.2\n - @react-aria/utils@3.26.0\n - @react-aria/virtualizer@4.1.0\n - @react-aria/visually-hidden@3.8.18\n - @react-spectrum/accordion@3.0.0\n - @react-spectrum/actionbar@3.6.2\n - @react-spectrum/actiongroup@3.10.10\n - @react-spectrum/autocomplete@3.0.0-alpha.38\n - @react-spectrum/avatar@3.0.17\n - @react-spectrum/badge@3.1.18\n - @react-spectrum/breadcrumbs@3.9.12\n - @react-spectrum/button@3.16.9\n - @react-spectrum/buttongroup@3.6.17\n - @react-spectrum/calendar@3.5.0\n - @react-spectrum/card@3.0.0-alpha.38\n - @react-spectrum/checkbox@3.9.11\n - @react-spectrum/color@3.0.2\n - @react-spectrum/combobox@3.14.0\n - @react-spectrum/contextualhelp@3.6.16\n - @react-spectrum/datepicker@3.11.0\n - @react-spectrum/dialog@3.8.16\n - @react-spectrum/divider@3.5.18\n - @react-spectrum/dnd@3.5.0\n - @react-spectrum/dropzone@3.0.6\n - @react-spectrum/filetrigger@3.0.6\n - @react-spectrum/form@3.7.10\n - @react-spectrum/icon@3.8.0\n - @react-spectrum/illustratedmessage@3.5.5\n - @react-spectrum/image@3.5.6\n - @react-spectrum/inlinealert@3.2.10\n - @react-spectrum/label@3.16.10\n - @react-spectrum/labeledvalue@3.1.18\n - @react-spectrum/layout@3.6.10\n - @react-spectrum/link@3.6.12\n - @react-spectrum/list@3.9.0\n - @react-spectrum/listbox@3.14.0\n - @react-spectrum/menu@3.21.0\n - @react-spectrum/meter@3.5.5\n - @react-spectrum/numberfield@3.9.8\n - @react-spectrum/overlays@5.7.0\n - @react-spectrum/picker@3.15.4\n - @react-spectrum/progress@3.7.11\n - @react-spectrum/provider@3.10.0\n - @react-spectrum/radio@3.7.11\n - @react-spectrum/s2@0.5.0\n - @react-spectrum/searchfield@3.8.11\n - @react-spectrum/slider@3.7.0\n - @react-spectrum/statuslight@3.5.17\n - @react-spectrum/steplist@3.0.0-alpha.10\n - @react-spectrum/style-macro-s1@3.0.0-alpha.2\n - @react-spectrum/switch@3.5.10\n - @react-spectrum/table@3.15.0\n - @react-spectrum/tabs@3.8.15\n - @react-spectrum/tag@3.2.11\n - @react-spectrum/test-utils@1.0.0-alpha.3\n - @react-spectrum/text@3.5.10\n - @react-spectrum/textfield@3.12.7\n - @react-spectrum/theme-dark@3.5.14\n - @react-spectrum/theme-default@3.5.14\n - @react-spectrum/theme-express@3.0.0-alpha.16\n - @react-spectrum/theme-light@3.4.14\n - @react-spectrum/toast@3.0.0-beta.17\n - @react-spectrum/tooltip@3.7.0\n - @react-spectrum/tree@3.0.0-beta.2\n - @react-spectrum/utils@3.12.0\n - @react-spectrum/view@3.6.14\n - @react-spectrum/well@3.4.18\n - @react-stately/calendar@3.6.0\n - @react-stately/checkbox@3.6.10\n - @react-stately/collections@3.12.0\n - @react-stately/color@3.8.1\n - @react-stately/combobox@3.10.1\n - @react-stately/data@3.12.0\n - @react-stately/datepicker@3.11.0\n - @react-stately/disclosure@3.0.0\n - @react-stately/dnd@3.5.0\n - @react-stately/flags@3.0.5\n - @react-stately/form@3.1.0\n - @react-stately/grid@3.10.0\n - @react-stately/layout@4.1.0\n - @react-stately/list@3.11.1\n - @react-stately/menu@3.9.0\n - @react-stately/numberfield@3.9.8\n - @react-stately/overlays@3.6.12\n - @react-stately/radio@3.10.9\n - @react-stately/searchfield@3.5.8\n - @react-stately/select@3.6.9\n - @react-stately/selection@3.18.0\n - @react-stately/slider@3.6.0\n - @react-stately/steplist@3.0.0-alpha.10\n - @react-stately/table@3.13.0\n - @react-stately/tabs@3.7.0\n - @react-stately/toast@3.0.0-beta.7\n - @react-stately/toggle@3.8.0\n - @react-stately/tooltip@3.5.0\n - @react-stately/tree@3.8.6\n - @react-stately/utils@3.10.5\n - @react-stately/virtualizer@4.2.0\n - @react-types/accordion@3.0.0-alpha.25\n - @react-types/actionbar@3.1.11\n - @react-types/actiongroup@3.4.13\n - @react-types/autocomplete@3.0.0-alpha.27\n - @react-types/avatar@3.0.11\n - @react-types/badge@3.1.13\n - @react-types/breadcrumbs@3.7.9\n - @react-types/button@3.10.1\n - @react-types/buttongroup@3.3.13\n - @react-types/calendar@3.5.0\n - @react-types/card@3.0.0-alpha.31\n - @react-types/checkbox@3.9.0\n - @react-types/color@3.0.1\n - @react-types/combobox@3.13.1\n - @react-types/contextualhelp@3.2.14\n - @react-types/datepicker@3.9.0\n - @react-types/dialog@3.5.14\n - @react-types/divider@3.3.13\n - @react-types/form@3.7.8\n - @react-types/grid@3.2.10\n - @react-types/illustratedmessage@3.3.13\n - @react-types/image@3.4.5\n - @react-types/label@3.9.7\n - @react-types/layout@3.3.19\n - @react-types/link@3.5.9\n - @react-types/list@3.2.22\n - @react-types/listbox@3.5.3\n - @react-types/menu@3.9.13\n - @react-types/meter@3.4.5\n - @react-types/numberfield@3.8.7\n - @react-types/overlays@3.8.11\n - @react-types/progress@3.5.8\n - @react-types/provider@3.8.5\n - @react-types/radio@3.8.5\n - @react-types/searchfield@3.5.10\n - @react-types/select@3.9.8\n - @react-types/shared@3.26.0\n - @react-types/slider@3.7.7\n - @react-types/statuslight@3.3.13\n - @react-types/switch@3.5.7\n - @react-types/table@3.10.3\n - @react-types/tabs@3.3.11\n - @react-types/text@3.3.13\n - @react-types/textfield@3.10.0\n - @react-types/tooltip@3.4.13\n - @react-types/view@3.4.13\n - @react-types/well@3.3.13\n - @spectrum-icons/color@3.5.17\n - @spectrum-icons/express@3.0.0-alpha.21\n - @spectrum-icons/illustrations@3.6.17\n - @spectrum-icons/ui@3.6.11\n - @spectrum-icons/workflow@4.2.16\n - @react-spectrum/codemods@0.3.0\n - @react-aria/optimize-locales-plugin@1.1.3\n - @react-aria/parcel-resolver-optimize-locales@1.2.0\n - @react-spectrum/parcel-transformer-s2-icon@0.2.0\n - @react-spectrum/s2-icon-builder@0.2.0\n - @react-spectrum/ts-plugin@0.1.0\n - react-aria@3.36.0\n - react-aria-components@1.5.0\n - react-stately@3.34.0\n - tailwindcss-react-aria-components@1.2.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale Context with useLocale Hook in React\nDESCRIPTION: Example showing how to set up language and direction attributes on the root app element using React Aria's useLocale hook\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/internationalization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLocale} from 'react-aria-components';\n\nfunction YourApp() {\n  let {locale, direction} = useLocale();\n\n  return (\n    <div lang={locale} dir={direction}>\n      {/* your app here */}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled SearchField Input with CSS\nDESCRIPTION: CSS styles for customizing the appearance of disabled inputs in a SearchField component by targeting elements with the data-disabled attribute.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/SearchField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-SearchField {\n  .react-aria-Input {\n    &[data-disabled] {\n      border-color: var(--border-color-disabled);\n      color: var(--text-color-disabled);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Slider Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'Slider' component. It renders a slider control allowing a user to select a numeric value from within a defined range by dragging a handle. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\n<Slider />\n```\n\n----------------------------------------\n\nTITLE: Allowing Multiple File Selection with FileTrigger - React Spectrum (TypeScript)\nDESCRIPTION: This snippet demonstrates enabling multiple file selection via the allowsMultiple boolean prop. When set, users can select more than one file through the browser's file dialog. A Button is again wrapped by FileTrigger. Key dependency: react-aria-components. Input is any number of user-selected files; output is handled in the parent component's onSelect handler. No explicit onSelect is shown in this code, so parent configuration is assumed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/FileTrigger.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<FileTrigger allowsMultiple>\n  <Button>Upload your files</Button>\n</FileTrigger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component with Grid and Slots in React\nDESCRIPTION: Shows how to create a Card component using the proposed Grid and slot system in React.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-slots.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Card = (props) => {\n  let defaults = {slots: {\n      container: {UNSAFE_className: classNames(styles, 'container')},\n      preview: {UNSAFE_className: classNames(styles, 'preview')},\n      avatar: {UNSAFE_className: classNames(styles, 'avatar')},\n      title: {UNSAFE_className: classNames(styles, 'title')},\n      footer: {UNSAFE_className: classNames(styles, 'footer')},\n      divider: {UNSAFE_className: classNames(styles, 'divider')},\n      buttonGroup: {UNSAFE_className: classNames(styles, 'buttonGroup')}\n    }};\n  let {slots} = {...defaults, ...props};\n\n  return (\n    <div className={classNames(styles, 'spectrum-Card')}>\n      <Grid slots={slots}>\n        <Image slot=\"preview\" />\n        <Avatar slot=\"avatar\" />\n        <Flex slot=\"title\">\n          <Title>Title</Title>\n          <Button>More</Button>\n        </Flex>\n        <Description slot=\"description\">Description</Description>\n        <ButtonGroup slot=\"footer\">Final remarks</ButtonGroup>\n      </Grid>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling a Single Checkbox within a React Spectrum CheckboxGroup in TSX\nDESCRIPTION: Illustrates disabling a specific Checkbox ('Baseball') within a CheckboxGroup by applying the `isDisabled` prop directly to that individual Checkbox component. The other checkboxes ('Soccer', 'Basketball') remain enabled and interactive.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<CheckboxGroup label=\"Favorite sports\">\n  <Checkbox value=\"soccer\">Soccer</Checkbox>\n  <Checkbox value=\"baseball\" isDisabled>Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring basePath in Next.js\nDESCRIPTION: Illustrates how to configure the `basePath` setting in `next.config.js` and expose it as an environment variable (`BASE_PATH`). This is necessary for correctly constructing hrefs when using a base path with Next.js App Router.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/routing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst basePath = '...';\nconst nextConfig = {\n  basePath,\n  env: {\n    BASE_PATH: basePath\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Hook Return Interface using ClassAPI Component in JSX\nDESCRIPTION: Uses the `ClassAPI` component to display the documentation for the interface returned by the `useOverlayTriggerState` hook. It retrieves the specific class/interface definition using the return type ID from the hook's export data within the `docs` object.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/overlays/docs/useOverlayTriggerState.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useOverlayTriggerState.return.id]} />\n```\n\n----------------------------------------\n\nTITLE: Importing useCheckboxGroup from React Aria\nDESCRIPTION: Import statements for the documentation page, including hooks from React Aria and other necessary components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/checkbox';\nimport hiddenDocs from 'docs:@react-aria/visually-hidden';\nimport focusDocs from 'docs:@react-aria/focus';\nimport statelyDocs from 'docs:@react-stately/checkbox';\nimport {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport {Keyboard} from '@react-spectrum/text';\nimport packageData from '@react-aria/checkbox/package.json';\nimport Anatomy from './checkboxgroup-anatomy.svg';\nimport {ExampleCard} from '@react-spectrum/docs/src/ExampleCard';\nimport buttongroupPreview from 'url:./buttongroup-example.png';\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Pages Router for React Aria Locale Optimization\nDESCRIPTION: Sets up Next.js Pages Router to exclude translation strings from the client bundle and adds LocalizedStringProvider to _document.tsx.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/ssr.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst localesPlugin = require('@react-aria/optimize-locales-plugin');\n\nmodule.exports = {\n  // ...\n  i18n: {\n    // See Next.js i18n docs...\n  },\n  webpack(config, {isServer}) {\n    if (!isServer) {\n      // Don't include any locale strings in the client JS bundle.\n      config.plugins.push(localesPlugin.webpack({locales: []}));\n    }\n    return config;\n  }\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/_document.tsx\nimport {Html, Head, Main, NextScript, DocumentProps} from 'next/document'\nimport {LocalizedStringProvider} from 'react-aria-components/i18n';\n\nexport default function Document(props: DocumentProps) {\n  return (\n    <Html lang={props.locale}>\n      <Head />\n      <body>\n        <Main />\n        <LocalizedStringProvider locale={props.locale} />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component Metadata Configuration\nDESCRIPTION: Defines the component's metadata including keywords, type, image, and description for documentation purposes. This configuration block specifies the component's searchability and presentation in documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ios-list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n---\nkeywords: [example, gridlist, aria, accessibility, react, component]\ntype: component\nimage: ios-list.png\ndescription: A GridList with swipe gestures, layout animations, and multi selection.\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Up Blog Post Layout with React Spectrum Docs Components in JSX\nDESCRIPTION: This snippet imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` library. It then exports `BlogPostLayout` as the default export, which serves as the main layout wrapper for this specific blog post page within the React Spectrum documentation website. It relies on the `@react-spectrum/docs` package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-05-24.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* Copyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Custom Class Names for React Aria Tooltip Components\nDESCRIPTION: Example showing how to override the default class name with a custom one for styling tooltips.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip className=\"my-tooltip\">\n  {/* ... */}\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind Styles (tsx)\nDESCRIPTION: This snippet imports the global Tailwind CSS styles required for the component example. It ensures that Tailwind's base styles, utilities, and any custom configurations defined in `tailwind.global.css` are applied.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/category-tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable ProgressBar Component\nDESCRIPTION: This example shows how to create a reusable ProgressBar component that wraps the React Aria ProgressBar with additional styling and a custom label prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ProgressBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ProgressBarProps} from 'react-aria-components';\n\ninterface MyProgressBarProps extends ProgressBarProps {\n  label?: string\n}\n\nfunction MyProgressBar({label, ...props}: MyProgressBarProps) {\n  return (\n    <ProgressBar {...props}>\n      {({percentage, valueText}) => <>\n        <Label>{label}</Label>\n        <span className=\"value\">{valueText}</span>\n        <div className=\"bar\">\n          <div className=\"fill\" style={{width: percentage + '%'}} />\n        </div>\n      </>}\n    </ProgressBar>\n  );\n}\n\n<MyProgressBar label=\"Loading…\" value={80} />\n```\n\n----------------------------------------\n\nTITLE: Import Button Styles with CSS Layers (CSS)\nDESCRIPTION: This hidden CSS snippet imports Button-specific styles from a local stylesheet using the CSS @import rule and assigns them to a custom CSS layer 'button'. This ensures that button styles remain scoped and organized in the context of modular or layered CSS. It intends to be included only as a documentation artifact and assumes that './Button.mdx' contains relevant component styles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Toast.mdx#2025-04-23_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import './Button.mdx' layer(button);\n```\n\n----------------------------------------\n\nTITLE: Styling HTML elements with style-macro in React Spectrum\nDESCRIPTION: Example of using the style() macro to apply Spectrum 2 styling to HTML elements via the className prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-parcel-example/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rollup Locale Optimization Configuration\nDESCRIPTION: Configuration for optimizing locale bundles using Rollup\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/internationalization.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// rollup.config.js\nimport optimizeLocales from '@react-aria/optimize-locales-plugin';\n\nexport default {\n  plugins: [\n    optimizeLocales.rollup({\n      locales: ['en-US', 'fr-FR']\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Disabled Color Wheel Component\nDESCRIPTION: Implementation showing how to disable a ColorWheel component using the isDisabled prop, which prevents user interaction and applies appropriate visual styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorWheel.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorWheel defaultValue=\"hsl(80, 100%, 50%)\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Implementing Heading Semantic Element with Context in JSX\nDESCRIPTION: Demonstrates the implementation of a Heading semantic element that consumes context to apply appropriate class names and clears context to prevent unintended trickle-down effects.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-semantic-elements.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Heading = (props) => {\n  let { heading } = useSlotProvider();\n\n  return (\n    <h1 className={classNames(styles, heading, props.className)}>\n      <SlotContext.Provider\n        value={{\n          avatar: null,\n          heading: null,\n          text: null,\n          section: null,\n          spacer: null,\n          item: null\n        }}>\n        {props.children}\n      </SlotContext.Provider>\n    </h1>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Drag Type Implementation\nDESCRIPTION: Shows how to implement custom drag types with acceptedDragTypes prop and handle custom format data transfer.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDroppableCollection.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let list = useListData({\n    initialItems: [\n      {id: 1, name: 'Cat'},\n      {id: 2, name: 'Dog'},\n      {id: 3, name: 'Kangaroo'}\n    ]\n  });\n\n  let onInsert = async e => {\n    let value = JSON.parse(await e.items[0].getText('my-app-custom-type'));\n    let item = {id: list.items.length + 1, name: value.message};\n\n    if (e.target.dropPosition === 'before') {\n      list.insertBefore(e.target.key, item);\n    } else if (e.target.dropPosition === 'after') {\n      list.insertAfter(e.target.key, item);\n    }\n  };\n\n  return (\n    <>\n      <Draggable>Octopus</Draggable>\n      <ListBox\n        aria-label=\"Favorite animals\"\n        selectionMode=\"single\"\n        items={list.items}\n        acceptedDragTypes={['my-app-custom-type']}\n        onInsert={onInsert}>\n        {item => <Item>{item.name}</Item>}\n      </ListBox>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling RangeCalendar Component in TSX\nDESCRIPTION: Demonstrates how to completely disable the `RangeCalendar` using the `isDisabled` prop. When disabled, the calendar cannot be focused or interacted with.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<RangeCalendar aria-label=\"Trip dates\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox and Switch Component Interfaces in React Spectrum (TypeScript)\nDESCRIPTION: Defines TypeScript interfaces for Checkbox and Switch components, extending a shared base interface for consistency and flexibility in React Spectrum. Dependencies include React and the appropriate InputBase definition. Key parameters include 'children' for label, 'aria-label' for accessibility, and state handlers like 'isSelected' and 'onChange'. The interface enables optional props for value, name, emphasis styling, and, for Checkbox, indeterminate state. Input is the component props and the output is type-safe usage of Checkbox/Switch. Must be used as part of a React environment with TypeScript support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CheckboxBase extends InputBase {\n  children?: ReactNode, // pass in children to render label\n  'aria-label'?: string, // if no children, aria-label is required\n\n  defaultSelected?: boolean,\n  isSelected?: boolean,\n  onChange?: (isSelected: boolean) => void, //Possibly add native event as arg?\n\n  /* Cannot use InputProps because value is a\n  valid dom prop for input as well as checked */\n  value?: string, // dom prop for input element\n  name?: string,\n  isEmphasized?: boolean\n}\n\ninterface Checkbox extends CheckboxBase {\n  isIndeterminate?: boolean\n}\n\ninterface Switch extends CheckboxBase {}\n```\n\n----------------------------------------\n\nTITLE: Parsing Currency Values with NumberParser\nDESCRIPTION: Example demonstrating how to parse currency values with NumberParser, including currency code display and accounting notation for negative values.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberParser.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nlet parser = new NumberParser('en-US', {\n  style: 'currency',\n  currency: 'EUR',\n  currencyDisplay: 'code',\n  currencySign: 'accounting'\n});\n\nparser.parse('45'); // 45\nparser.parse('EUR 45'); // 45\nparser.parse('EUR 26.45'); // 26.45\nparser.parse('EUR -25'); // -25\nparser.parse('(EUR 25)'); // -25\nparser.parse('EU 45'); // NaN (partial currency symbol)\nparser.parse('$45'); // NaN (different currency symbol)\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: This code snippet embeds a YouTube video about design systems and accessibility from React Europe 2020. It uses an iframe with responsive styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/why.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className={style.responsiveVideo}>\n  <iframe\n    title=\"YouTube embedded video: Design system and accessibility - Devon Govett aka @devongovett at @ReactEurope 2020\"\n    width=\"840\"\n    height=\"471\"\n    src=\"https://www.youtube.com/embed/dxDcBB7Xoxs\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen />\n</div>\n```\n\n----------------------------------------\n\nTITLE: ListBox with Disabled Items\nDESCRIPTION: Example showing how to implement disabled items in a ListBox using the disabledKeys prop for multiple selection.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<ListBox label=\"Choose sandwich contents\" selectionMode=\"multiple\" disabledKeys={['tuna']}>\n  <Item key=\"lettuce\">Lettuce</Item>\n  <Item key=\"tomato\">Tomato</Item>\n  <Item key=\"cheese\">Cheese</Item>\n  <Item key=\"tuna\">Tuna Salad</Item>\n  <Item key=\"egg\">Egg Salad</Item>\n  <Item key=\"ham\">Ham</Item>\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind v4 Plugins via CSS Import\nDESCRIPTION: Shows how to integrate the `tailwindcss-react-aria-components` and `tailwindcss-animate` plugins when using Tailwind CSS v4. These plugins are added using the `@plugin` directive within the main CSS file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/command-palette.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@plugin \"tailwindcss-react-aria-components\";\n@plugin \"tailwindcss-animate\";\n```\n\n----------------------------------------\n\nTITLE: Providing Server Validation Errors with FormValidationContext\nDESCRIPTION: This example demonstrates how to provide server-side validation errors to React Aria components using FormValidationContext. It allows passing custom error messages to form fields based on server validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/forms.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormValidationContext} from 'react-stately';\n\n<FormValidationContext.Provider value={{username: 'This username is taken.'}}>\n  <MyTextField\n    name=\"username\"\n    isRequired\n    validationBehavior=\"native\" />\n  {/* ... */}\n</FormValidationContext.Provider>\n```\n\n----------------------------------------\n\nTITLE: Using the RadioGroup Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'RadioGroup' component. It renders a group of radio buttons, allowing a user to select only a single item from a list of mutually exclusive options. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\n<RadioGroup />\n```\n\n----------------------------------------\n\nTITLE: Embedding a Looping Video using JSX Component (Hover Demo)\nDESCRIPTION: Uses the imported 'Video' component to display a demonstration video showing standard button hover behavior. The video source is specified by the 'hoverVideoUrl' variable, and the component is configured to loop, autoplay, and be muted.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-2.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Video src={hoverVideoUrl} loop autoPlay muted />\n```\n\n----------------------------------------\n\nTITLE: Setting Background Styles for Modal Sheet Demo\nDESCRIPTION: Applies CSS styles to create a proper background for the modal sheet demo, including setting the body background to black and applying transform properties to the root element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/framer-modal-sheet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background: black;\n}\n\nbody > div {\n  background: var(--page-background);\n  translate: 0;\n  transform-origin: center 0;\n  overflow: auto;\n  height: 100vh;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Disabled Breadcrumb Items in React Aria\nDESCRIPTION: Example showing how to disable specific breadcrumb items using the isDisabled prop. Disabled items are visually styled differently and have appropriate ARIA attributes for accessibility.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/breadcrumbs/docs/useBreadcrumbs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumbs>\n  <BreadcrumbItem href=\"/\" isDisabled>Home</BreadcrumbItem>\n  <BreadcrumbItem href=\"/react-aria/\">React Aria</BreadcrumbItem>\n  <BreadcrumbItem>useBreadcrumbs</BreadcrumbItem>\n</Breadcrumbs>\n```\n\n----------------------------------------\n\nTITLE: Styling Calendar Component with CSS\nDESCRIPTION: This CSS snippet provides styles for the Calendar component, including layout, cell appearance, and state-based styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.calendar {\n  width: 220px;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin: 0 8px;\n}\n\n.header h2 {\n  flex: 1;\n  margin: 0;\n}\n\n.calendar table {\n  width: 100%;\n}\n\n.cell {\n  cursor: default;\n  text-align: center;\n}\n\n.selected {\n  background: var(--blue);\n  color: white;\n}\n\n.unavailable {\n  color: var(--spectrum-global-color-red-600);\n}\n\n.disabled {\n  color: gray;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for React Aria Components Example\nDESCRIPTION: Specifies metadata for the documentation page including keywords, type, image, and description. This frontmatter is used by the documentation system for categorization and display.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/stock-table.mdx#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n---\nkeywords: [example, table, aria, accessibility, react, component]\ntype: component\nimage: stock-table.png\ndescription: A table with sticky headers, sorting, multiple selection, and column resizing.\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Setting Up Layout for useDisclosureState Docs (JavaScript/JSX)\nDESCRIPTION: This snippet imports the `Layout` component from `@react-spectrum/docs` and exports it as the default for the page. It also imports documentation data (`docs`), package information (`packageData`), and various documentation rendering components (`ClassAPI`, `HeaderInfo`, etc.) required to display the API details for the `useDisclosureState` hook from `@react-stately/disclosure`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/disclosure/docs/useDisclosureState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-stately/disclosure';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/disclosure/package.json';\n```\n\n----------------------------------------\n\nTITLE: Styling Toast and Button Components with CSS\nDESCRIPTION: Imports CSS styles for Button and Toast components, and applies custom styling to the ToastRegion.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/PortalProvider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import '../../../react-aria-components/docs/Button.mdx' layer(button);\n@import '../../../react-aria-components/docs/Toast.mdx' layer(toast);\n@import \"@react-aria/example-theme\";\n\n.react-aria-ToastRegion {\n  position: unset;\n}\n```\n\n----------------------------------------\n\nTITLE: DateField with Different Granularity Settings\nDESCRIPTION: Shows how to display the same date value with different granularity levels\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useDateField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal('2021-04-07T18:45:22Z'));\n\n  return (\n    <>\n      <DateField\n        label=\"Date and time\"\n        granularity=\"second\"\n        value={date}\n        onChange={setDate} />\n      <DateField\n        label=\"Date\"\n        granularity=\"day\"\n        value={date}\n        onChange={setDate} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in React\nDESCRIPTION: This snippet shows how to import a global Tailwind CSS file in a React component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/ripple-button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Defining StylesProp Type in Spectrum 2\nDESCRIPTION: Demonstrates the usage of the StylesProp type for the styles prop in Spectrum 2, which replaces various style-related props from React Spectrum v3.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/s2/api-diff.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstyles: StylesProp\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled DateRangePicker\nDESCRIPTION: Example showing how to create a DateRangePicker that is disabled and cannot be interacted with using the isDisabled prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<DateRangePicker label=\"Date range\" isDisabled />\n```\n\n----------------------------------------\n\nTITLE: Displaying TypeScript Errors During React Spectrum Build\nDESCRIPTION: Shows example type errors that may occur during the build process using yarn. These errors are normal and the build should complete successfully.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@parcel/transformer-typescript-types: Property 'style' does not exist on type 'Element'.\n@parcel/transformer-typescript-types: Property 'type' does not exist on type 'EventTarget'.\n@parcel/transformer-typescript-types: Property 'isContentEditable' does not exist on type 'EventTarget'\n```\n\n----------------------------------------\n\nTITLE: Using Slots for Component Styling in NumberField\nDESCRIPTION: Example of using slots to distinguish between different instances of the same component type (Button) within a NumberField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/styling.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField>\n  <Label>Width</Label>\n  <Group>\n    <Input />\n    <Button slot=\"increment\">+</Button>\n    <Button slot=\"decrement\">-</Button>\n  </Group>\n</NumberField>\n```\n\n----------------------------------------\n\nTITLE: Implementing DropTarget Component in React Aria\nDESCRIPTION: This snippet shows the implementation of a DropTarget component using the useDrop hook from React Aria. It handles dropping of text items and displays the dropped content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/useDraggableCollection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {TextDropItem} from '@react-aria/dnd';\nimport {useDrop} from '@react-aria/dnd';\nimport {useButton} from '@react-aria/button';\n\nfunction DropTarget() {\n  let [dropped, setDropped] = React.useState(null);\n  let ref = React.useRef(null);\n  let {dropProps, isDropTarget} = useDrop({\n    ref,\n    async onDrop(e) {\n      let items = await Promise.all(\n        e.items\n          .filter(item => item.kind === 'text' && (item.types.has('text/plain') || item.types.has('my-app-custom-type')))\n          .map(async (item: TextDropItem) => {\n            if (item.types.has('my-app-custom-type')) {\n              return JSON.parse(await item.getText('my-app-custom-type'));\n            } else {\n              return {name: await item.getText('text/plain'), style: 'span'};\n            }\n          })\n      );\n      setDropped(items);\n    }\n  });\n\n  let {buttonProps} = useButton({elementType: 'div'}, ref);\n\n  let message = ['Drop here'];\n  if (dropped) {\n    message = dropped.map((item, i) => <div key={i}><item.style>{item.name}</item.style></div>);\n  }\n\n  return (\n    <div {...mergeProps(dropProps, buttonProps)} ref={ref} className={`droppable ${isDropTarget ? 'target' : ''}`}>\n      {message}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Description Slot for NumberField - React Spectrum - CSS\nDESCRIPTION: Defines CSS for displaying the description slot within NumberField, specifically targeting slot=\"description\" for font size adjustments. Ensures help text is presented in a smaller, helper-text style consistent with form guidelines.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/NumberField.mdx#2025-04-23_snippet_16\n\nLANGUAGE: CSS\nCODE:\n```\n.react-aria-NumberField {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Semantic Elements in Card Component with JSX\nDESCRIPTION: Illustrates how semantic elements can be nested within arbitrary DOM structures while maintaining proper styling through context-based class application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-semantic-elements.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n  <div>\n    <Header>Title</Header>\n    <Button>X</Button>\n  </div>\n  <Description>Description goes here</Description>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Customizing TimeField Placeholder in React Spectrum\nDESCRIPTION: This example shows how to customize the placeholder value for a TimeField component. The placeholderValue prop controls the default values of each segment when the user first interacts with them.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/datepicker/docs/useTimeField.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<TimeField label=\"Meeting time\" placeholderValue={new Time(9)} />\n```\n\n----------------------------------------\n\nTITLE: Using the CheckboxGroup Component in JSX\nDESCRIPTION: This JSX snippet shows the basic usage of the React Spectrum 'CheckboxGroup' component. It renders a group of checkboxes, allowing a user to select one or more items from a list of options. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\n<CheckboxGroup />\n```\n\n----------------------------------------\n\nTITLE: Customizing Fieldset Padding via CSS - CSS\nDESCRIPTION: Sets padding and fit-content width for a fieldset element, typically used as part of a grouped control composition pattern. No dependencies. Simple CSS for visual adjustment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Select.mdx#2025-04-23_snippet_33\n\nLANGUAGE: css\nCODE:\n```\nfieldset {\n  padding: 1.5em;\n  width: fit-content;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the TextField Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the React Spectrum 'TextField' component. It renders a text input field allowing a user to enter a single line of plain text using the keyboard. Requires React and the '@adobe/react-spectrum' library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/index.mdx#2025-04-23_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\n<TextField />\n```\n\n----------------------------------------\n\nTITLE: Using useLabel Hook in a ColorField Component\nDESCRIPTION: Demonstrates how to use the useLabel hook to associate a label with a select field in a custom ColorField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/label/docs/useLabel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useLabel} from '@react-aria/label';\n\nfunction ColorField(props) {\n  let {labelProps, fieldProps} = useLabel(props);\n\n  return (\n    <>\n      <label {...labelProps}>{props.label}</label>\n      <select {...fieldProps}>\n        <option>Indigo</option>\n        <option>Maroon</option>\n        <option>Chartreuse</option>\n      </select>\n    </>\n  );\n}\n\n<ColorField label=\"Favorite color\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in JavaScript/JSX\nDESCRIPTION: Imports the `Layout` component from `@react-spectrum/docs` and immediately exports it as the default export. This likely sets up the main structure or layout for the documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/select/docs/useSelectState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Directory Item Styling in CSS\nDESCRIPTION: CSS styles for directory items in the drag and drop interface, handling layout and text overflow.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_38\n\nLANGUAGE: css\nCODE:\n```\n.dir-item {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.dir-item {\n  flex: 0 0 auto;\n}\n\n.dir-item {\n  flex: 1;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Metadata and API Components for useSliderState (JavaScript)\nDESCRIPTION: This block imports documentation content and UI components required to render the API, class interface, and page metadata for the useSliderState hook. Dependencies include docs:@react-stately/slider, @react-spectrum/docs for React documentation widgets, and the package.json file for metadata. The imported items are used later in the Markdown content to generate dynamic data-driven documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/slider/docs/useSliderState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport docs from 'docs:@react-stately/slider';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/slider/package.json';\n```\n\n----------------------------------------\n\nTITLE: Rendering Function API for Cell in JSX\nDESCRIPTION: Uses the `FunctionAPI` component to render the detailed API documentation for the `Cell` type or component associated with the table state. It receives the specific API definition (`docs.exports.Cell`) and related documentation links (`docs.links`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/table/docs/useTableState.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionAPI function={docs.exports.Cell} links={docs.links} />\n```\n\n----------------------------------------\n\nTITLE: Basic LabeledValue Example\nDESCRIPTION: Simple example showing how to use LabeledValue with a string value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/labeledvalue/docs/LabeledValue.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<LabeledValue label=\"File name\" value=\"Budget.xls\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree State with useTreeData - React Spectrum (TypeScript)\nDESCRIPTION: This snippet initializes a hierarchical tree state using the useTreeData hook, defining a custom ItemValue interface for each node in the tree and specifying key selection and children extraction logic. Dependencies include @react-stately/data for the hook, and React Spectrum's ListBox, Section, and Item components for rendering. Inputs are the initialItems (tree data), initialSelectedKeys, and custom getter functions; outputs are an API for manipulating both selected and structural tree aspects, which is used for rendering and updating list state in a React component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/data/docs/useTreeData.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\ninterface ItemValue {\n  name: string;\n  items?: Array<ItemValue>;\n}\n\nlet tree = useTreeData<ItemValue>({\n  initialItems: [\n    {\n      name: 'People',\n      items: [\n        {name: 'David'},\n        {name: 'Sam'},\n        {name: 'Jane'}\n      ]\n    },\n    {\n      name: 'Animals',\n      items: [\n        {name: 'Aardvark'},\n        {name: 'Kangaroo'},\n        {name: 'Snake'}\n      ]\n    }\n  ],\n  initialSelectedKeys: ['Sam', 'Kangaroo'],\n  getKey: item => item.name,\n  getChildren: item => item.items || []\n});\n\n<ListBox\n  aria-label=\"List organisms\"\n  items={tree.items}\n  selectionMode=\"multiple\"\n  selectedKeys={tree.selectedKeys}\n  onSelectionChange={(keys) => {\n    if (keys !== 'all') {\n      tree.setSelectedKeys(keys);\n    }\n  }}>\n  {node =>\n    <Section title={node.value.name} items={node.children}>\n      {node => <Item>{node.value.name}</Item>}\n    </Section>\n  }\n</ListBox>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Metadata for useCheckboxGroupState Hook (JavaScript)\nDESCRIPTION: This code snippet loads exported documentation metadata from the @react-stately/checkbox package and imports several utility components for rendering API documentation and interface details. It also imports the package's package.json for use in header display. These imports enable dynamic rendering of prop documentation and type links in the generated documentation site. Dependencies include @react-spectrum/docs and @react-stately/checkbox.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/checkbox/docs/useCheckboxGroupState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-stately/checkbox';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/checkbox/package.json';\n```\n\n----------------------------------------\n\nTITLE: Styling Description Text in ColorField with CSS\nDESCRIPTION: This CSS snippet demonstrates how to style the description text in a ColorField. It sets the font size for elements with the description slot.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorField.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ColorField {\n  [slot=description] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout Component - React - JavaScript\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the '@react-spectrum/docs' package, and sets BlogPostLayout as the default export for the module. This is essential for setting up the page structure for the release notes in the project's documentation. Dependencies include the '@react-spectrum/docs' package. There are no parameters or outputs apart from exporting the BlogPostLayout for use elsewhere in the application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-11-8.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Defining DatePicker and Calendar Interfaces in TypeScript\nDESCRIPTION: This TypeScript code defines type aliases (`DateValue`, `DateRange`) and interfaces (`DatePickerBase`, `DatePicker`, `DateRangePicker`, `CalendarBase`, `Calendar`, `RangeCalendar`) for date and time related components in React Spectrum. It specifies the props accepted by these components, such as `minValue`, `maxValue`, `formatOptions`, `isDisabled`, and `isReadOnly`, inheriting from base interfaces like `InputBase` and `ValueBase`. `DateValue` accepts string, number (timestamp), or Date objects, while `DateRange` represents a range of `DateValue`s.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Calendar.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DateValue = string | number | Date;\ninterface DatePickerBase extends InputBase {\n  minValue?: DateValue,\n  maxValue?: DateValue,\n  formatOptions?: Intl.DateTimeFormatOptions,\n  placeholderDate?: DateValue,\n  isQuiet?: boolean,\n  hideCalendar?: boolean\n}\n\ninterface DatePicker extends DatePickerBase, ValueBase<DateValue> {}\n\ntype DateRange = RangeValue<DateValue>;\ninterface DateRangePicker extends DatePickerBase, ValueBase<DateRange> {}\n\ninterface CalendarBase {\n  minValue?: DateValue,\n  maxValue?: DateValue,\n  isDisabled?: boolean,\n  isReadOnly?: boolean,\n  autoFocus?: boolean\n}\n\ninterface Calendar extends CalendarBase, ValueBase<DateValue> {}\ninterface RangeCalendar extends CalendarBase, ValueBase<DateRange> {}\n```\n\n----------------------------------------\n\nTITLE: DisclosureGroup with Multiple Expanded Items\nDESCRIPTION: Shows how to allow multiple disclosures to be expanded simultaneously using the allowsMultipleExpanded prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DisclosureGroup.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<DisclosureGroup defaultExpandedKeys={[\"system\", \"personal\"]} allowsMultipleExpanded>\n  <MyDisclosure id=\"system\" title=\"System Requirements\" >\n    Details about system requirements here\n  </MyDisclosure>\n  <MyDisclosure id=\"personal\" title=\"Personal Information\" >\n    Details about personal information here\n  </MyDisclosure>\n</DisclosureGroup>\n```\n\n----------------------------------------\n\nTITLE: SearchField with Event Handlers in React\nDESCRIPTION: This example demonstrates the use of onChange, onSubmit, and onClear event handlers with the SearchField component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let [currentText, setCurrentText] = React.useState('');\n  let [submittedText, setSubmittedText] = React.useState('');\n\n  return (\n    <div>\n      <SearchField\n        onClear={() => setCurrentText('')}\n        onChange={setCurrentText}\n        onSubmit={setSubmittedText}\n        label=\"Your text\"\n        value={currentText}\n      />\n      <pre>Mirrored text: {currentText}</pre>\n      <pre>Submitted text: {submittedText}</pre>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling for React Aria Tooltip Components\nDESCRIPTION: Example of targeting React Aria tooltip components using their default class names for CSS styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Tooltip.mdx#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-Tooltip {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Information using HeaderInfo Component in JSX\nDESCRIPTION: Utilizes the `HeaderInfo` component to display header details for the documentation page. It passes the imported `packageData` and an array containing the hook name (`useSelectState`) as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/select/docs/useSelectState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useSelectState']} />\n```\n\n----------------------------------------\n\nTITLE: Importing useColorField and Layout Components in React\nDESCRIPTION: Imports the necessary components and functions from React Aria and React Spectrum docs for implementing a color field.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-aria/color';\nimport statelyDocs from 'docs:@react-stately/color';\nimport {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/color/package.json';\nimport Anatomy from './ColorFieldAnatomy.svg';\n```\n\n----------------------------------------\n\nTITLE: Parsing Decimal Values with NumberParser\nDESCRIPTION: Example demonstrating how to parse decimal values using NumberParser, including support for different numbering systems and validation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/NumberParser.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nlet parser = new NumberParser('en-US');\nparser.parse('10.5'); // 10.5\nparser.parse('-25.6'); // -25.6\nparser.parse('1,000,000'); // 1000000\nparser.parse('١٢'); // 12\nparser.parse('X'); // NaN\n```\n\n----------------------------------------\n\nTITLE: Creating an Indeterminate Checkbox with React Aria\nDESCRIPTION: Example showing how to create a checkbox in the indeterminate state using the isIndeterminate prop. This state is visually distinct from both checked and unchecked states.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckbox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox isIndeterminate>Subscribe</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: RangeSlider with Contextual Help in React\nDESCRIPTION: This example shows how to add contextual help to a RangeSlider using the ContextualHelp component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/docs/RangeSlider.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Content, ContextualHelp, Heading} from '@adobe/react-spectrum';\n\n<RangeSlider\n  label=\"Search radius\"\n  formatOptions={{style: 'unit', unit: 'mile'}}\n  defaultValue={{start: 15, end: 60}}\n  contextualHelp={\n    <ContextualHelp variant=\"info\">\n      <Heading>Ranking</Heading>\n      <Content>Search results are sorted by distance from city center.</Content>\n    </ContextualHelp>\n  } />\n```\n\n----------------------------------------\n\nTITLE: Using ColorSwatch with Parsed HSL Color in React\nDESCRIPTION: This example shows how to use the ColorSwatch component with a color value parsed from an HSL string using the parseColor function from @react-stately/color.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/color/docs/useColorSwatch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseColor} from '@react-stately/color';\n\n<ColorSwatch color={parseColor('hsl(35, 100%, 50%)')} />\n```\n\n----------------------------------------\n\nTITLE: Initializing BlogPostLayout with React Spectrum Docs in JavaScript\nDESCRIPTION: This JavaScript snippet imports the BlogPostLayout and Hero components from @react-spectrum/docs and sets BlogPostLayout as the default export. It is used to wrap the Markdown/MDX blog post content in a consistent documentation layout, leveraging React component import/export syntax. No parameters are required; dependencies include @react-spectrum/docs as a peer dependency. The expected output is that the documentation post will use the standardized blog post layout when rendered.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-07-09.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Basic NumberField Usage in TSX\nDESCRIPTION: This snippet demonstrates the basic usage of the React Spectrum `NumberField` component. It renders a number input field with a label \"Width\", a default value of 1024, and a minimum allowed value of 0.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/how-we-internationalized-our-numberfield.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField label=\"Width\" defaultValue={1024} minValue={0}  />\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout Component - React Spectrum - JavaScript\nDESCRIPTION: Exports the BlogPostLayout component from the @react-spectrum/docs package as the default export. This snippet sets the documentation or blog post page's layout, leveraging the pre-built layout used by the React Spectrum documentation infrastructure. Requires @react-spectrum/docs to be installed as a project dependency. No input parameters are needed; output is the exported BlogPostLayout for use by MDX or documentation rendering engines.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-11-24.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Controlling Expansion State with DisclosureGroup in React Spectrum (TypeScript)\nDESCRIPTION: Demonstrates how to control the expanded state of DisclosureGroups by maintaining expandedKeys in React state and updating it via the onExpandedChange handler. Requires React, useState, DisclosureGroup, and DisclosureItem components from React Spectrum. Takes an array of expanded keys and renders DisclosureItems with their own IDs and content; on change, state is updated accordingly. Users control which panel is open by updating the setExpandedKeys callback.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/disclosure/docs/useDisclosure.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction ControlledDisclosureGroup(props) {\\n  let [expandedKeys, setExpandedKeys] = React.useState(['personal']);\\n\\n  return (\\n    <DisclosureGroup expandedKeys={expandedKeys} onExpandedChange={setExpandedKeys}>\\n      <DisclosureItem id=\"personal\" title=\"Personal Information\">\\n        Personal information form here.\\n      </DisclosureItem>\\n      <DisclosureItem id=\"billing\" title=\"Billing Address\">\\n        Billing address form here.\\n      </DisclosureItem>\\n    </DisclosureGroup>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Value in React Aria DateField (TSX)\nDESCRIPTION: This example shows how to set a custom placeholder value for a `DateField` (represented as `MyDateField`) using the `placeholderValue` prop. A `CalendarDate` object from `@internationalized/date` is used to define the default date shown when the field is empty and influences the initial values when segments are interacted with.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CalendarDate} from '@internationalized/date';\n\n<MyDateField\n  label=\"Birth date\"\n  placeholderValue={new CalendarDate(1980, 1, 1)} />\n```\n\n----------------------------------------\n\nTITLE: Exporting Blog Post Layout with React Spectrum Docs (JavaScript)\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and sets BlogPostLayout as the default export for the file. This establishes the page layout and ensures the content is wrapped within the standard documentation theme. Dependencies include Node.js, React, and @react-spectrum/docs. The input is the surrounding markdown and documentation content, and the output is a React element configured as the blog post layout. No parameters are used directly in this snippet.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-02-15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Importing BlogPostLayout Component in React\nDESCRIPTION: Imports the BlogPostLayout component from the @react-spectrum/docs package and exports it as the default export. This is likely used for structuring the blog post page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-10-29.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Importing Assets and Components in JavaScript/JSX\nDESCRIPTION: Imports necessary assets (MP4 video, PNG image) using URL specifiers and React components (`BlogPostLayout`, `Video`, `Image`, `Keyboard`) from `@react-spectrum/docs` and `@react-spectrum/text` libraries. These imports set up the necessary elements for rendering the blog post content and layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport focusRingVideoUrl from 'url:../assets/focus-ring.mp4';\nimport keyboardSettingsImageUrl from 'url:../assets/keyboard-settings.png';\n\nimport {BlogPostLayout, Video, Image} from '@react-spectrum/docs';\nimport {Keyboard} from '@react-spectrum/text';\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js (>13.0.x) for React Spectrum Transpilation (javascript)\nDESCRIPTION: Provides the configuration needed in `next.config.js` for Next.js versions newer than 13.0.x to correctly handle React Spectrum packages. It uses the `glob` package to find all relevant React Spectrum and Spectrum Icons packages within `node_modules` and adds them to the `transpilePackages` array, ensuring they are properly processed by Next.js. Requires the `glob` package to be installed.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst glob = require('glob');\n\nmodule.exports = {\n  transpilePackages: [\n    '@adobe/react-spectrum',\n    '@react-spectrum/*',\n    '@spectrum-icons/*',\n  ].flatMap((spec) => glob.sync(`${spec}`, { cwd: 'node_modules/' })),\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Header from React Spectrum (JSX)\nDESCRIPTION: This snippet demonstrates how to import the Header component from the @react-spectrum/view package for use within a React application. No additional dependencies are required beyond a standard React project and @react-spectrum/view as a dependency. The import allows usage of the Header component in JSX files. Input: None. Output: Header is available for use within the module.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/view/docs/Header.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Header} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Displaying Header Information using JSX Component\nDESCRIPTION: This JSX snippet utilizes the `HeaderInfo` component (imported from `@react-spectrum/docs`) to display package information and the component/hook name. It passes the imported `packageData` and an array containing the hook name 'useCalendarState' as props.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useCalendarState.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useCalendarState']} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Validation in React\nDESCRIPTION: This snippet demonstrates how to use the minValue prop to restrict date selection to dates after today using the today function from @internationalized/date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useCalendar.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {today} from '@internationalized/date';\n\n<Calendar aria-label=\"Appointment date\" minValue={today(getLocalTimeZone())} />\n```\n\n----------------------------------------\n\nTITLE: Referencing the @react-aria/collections Package in Markdown\nDESCRIPTION: Shows the package name formatted as a Markdown heading, identifying it as part of the react-spectrum library and directing users to the main repository for additional information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/collections/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-aria/collections\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Local Time Zone Conversion in React Spectrum\nDESCRIPTION: Example showing how to parse an absolute UTC time and convert it to the user's local time zone using parseAbsoluteToLocal.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DatePicker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<DatePicker\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Example Section Heading in MDX\nDESCRIPTION: Creates a level 2 heading titled 'Example' using Markdown H2 syntax (double '##') within the MDX file, indicating the start of the usage example section.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## Example\n```\n\n----------------------------------------\n\nTITLE: NumberField with Step Values\nDESCRIPTION: Shows how to use the step prop to control increment and decrement behavior in NumberField.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Flex direction=\"column\" gap=\"size-150\">\n  <NumberField\n    label=\"Step\"\n    step={10} />\n  <NumberField\n    label=\"Step + minValue\"\n    minValue={2}\n    step={3} />\n  <NumberField\n    label=\"Step + minValue + maxValue\"\n    minValue={2}\n    maxValue={21}\n    step={3} />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: HTML ARIA Combobox Selection State\nDESCRIPTION: Example showing how to indicate selected values within a combobox popup using aria-selected.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Autocomplete.mdx#2025-04-23_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\n<input role=\"combobox\" aria-activedescendant=\"option-id\"/>\n<div role=\"listbox\">\n  <div role=\"option\" id=\"option-id\" aria-selected=\"true\">\n    Selected Option\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Server\nDESCRIPTION: Command to run the documentation server locally, which will be available at http://localhost:1234/.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn start:docs\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Layout Component in JSX\nDESCRIPTION: This code snippet imports the Layout component from React Spectrum docs and exports it as the default. It also imports a CSS file for styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/why.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport style from '@react-spectrum/docs/src/docs.css';\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Styling Link Items in ListBox\nDESCRIPTION: CSS styles for link items in ListBox to remove default text decoration and set appropriate cursor behavior.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n[role=option][href] {\n  text-decoration: none;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Utils Package in Markdown\nDESCRIPTION: This snippet shows how to reference the @react-spectrum/utils package in a Markdown file. It includes a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/utils\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from React Spectrum Docs\nDESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default. Also imports other necessary components and utilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/testing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout, VersionBadge} from '@react-spectrum/docs';\nexport default Layout;\nimport testUtilDocs from 'docs:@react-spectrum/test-utils';\nimport {ClassAPI, TypeLink} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Converting UTC Time to Local Time in DateField\nDESCRIPTION: Shows how to parse an absolute UTC time into the user's local time zone using the parseAbsoluteToLocal function.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DateField.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseAbsoluteToLocal} from '@internationalized/date';\n\n<MyDateField\n  label=\"Event date\"\n  defaultValue={parseAbsoluteToLocal('2021-11-07T07:45:00Z')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Validation in React Spectrum Forms\nDESCRIPTION: Shows how to enable and use native HTML constraint validation with React Spectrum form components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/forms.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Form validationBehavior=\"native\" maxWidth=\"size-3000\">\n  <TextField label=\"Email\" name=\"email\" type=\"email\" isRequired />\n  <ButtonGroup>\n    <Button type=\"submit\" variant=\"primary\">Submit</Button>\n    <Button type=\"reset\" variant=\"secondary\">Reset</Button>\n  </ButtonGroup>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Customizing Meter Value Formatting in React Aria\nDESCRIPTION: This example demonstrates how to use the formatOptions prop to customize the value formatting of a Meter component, specifically formatting the value as Japanese Yen.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Meter.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MyMeter\n  label=\"Currency\"\n  formatOptions={{style: 'currency', currency: 'JPY'}}\n  value={60} />\n```\n\n----------------------------------------\n\nTITLE: Default Styling Selector for ToggleButton (CSS)\nDESCRIPTION: This CSS snippet shows only the selector reference for .react-aria-ToggleButton. It acts as a placeholder for additional custom CSS rules that a developer may apply to style the ToggleButton component. No actual properties are defined in this snippet.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButton.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButton {\\n  /* ... */\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing NumberField and Flex Components in JSX\nDESCRIPTION: This snippet imports the necessary `NumberField` and `Flex` components from their respective React Spectrum packages (`@react-spectrum/numberfield` and `@react-spectrum/layout`). These imports are required to use the NumberField component and layout utilities within a React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/how-we-internationalized-our-numberfield.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {NumberField} from '@react-spectrum/numberfield';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: List of Released React Spectrum Packages (Plaintext)\nDESCRIPTION: A list enumerating the specific versions of packages released for the Adobe React Spectrum suite, including various sub-packages like `@react-aria`, `@react-stately`, and `@internationalized`. This list is useful for tracking dependencies and understanding the components of a specific release.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-03-24.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- @adobe/react-spectrum@3.9.0\n- @internationalized/message@3.0.0-rc.0\n- @internationalized/number@3.0.0-rc.0\n- @react-aria/accordion@3.0.0-alpha.0\n- @react-aria/actiongroup@3.1.2\n- @react-aria/aria-modal-polyfill@3.3.0\n- @react-aria/breadcrumbs@3.1.3\n- @react-aria/color@3.0.0-beta.0\n- @react-aria/combobox@3.0.0-beta.0\n- @react-aria/dnd@3.0.0-alpha.0\n- @react-aria/focus@3.2.4\n- @react-aria/grid@3.0.0-alpha.0\n- @react-aria/interactions@3.3.4\n- @react-aria/live-announcer@3.0.0-rc.0\n- @react-aria/menu@3.2.0\n- @react-aria/numberfield@3.0.0-rc.0\n- @react-aria/overlays@3.6.2\n- @react-aria/searchfield@3.1.2\n- @react-aria/select@3.3.1\n- @react-aria/selection@3.4.0\n- @react-aria/spinbutton@3.0.0-rc.0\n- @react-aria/table@3.0.0-alpha.9\n- @react-aria/tabs@3.0.0-beta.0\n- @react-aria/utils@3.7.0\n- @react-aria/virtualizer@3.3.2\n- @react-spectrum/accordion@3.0.0-alpha.0\n- @react-spectrum/breadcrumbs@3.2.1\n- @react-spectrum/color@3.0.0-beta.0\n- @react-spectrum/combobox@3.0.0-beta.0\n- @react-spectrum/dialog@3.3.1\n- @react-spectrum/label@3.3.2\n- @react-spectrum/listbox@3.4.1\n- @react-spectrum/menu@3.2.2\n- @react-spectrum/numberfield@3.0.0-rc.0\n- @react-spectrum/picker@3.2.3\n- @react-spectrum/provider@3.1.3\n- @react-spectrum/slider@3.0.2\n- @react-spectrum/table@3.0.0-alpha.10\n- @react-spectrum/tabs@3.0.0-beta.0\n- @react-spectrum/theme-dark@3.2.0\n- @react-spectrum/theme-default@3.2.0\n- @react-spectrum/theme-light@3.1.0\n- @react-spectrum/tooltip@3.1.2\n- @react-stately/collections@3.3.1\n- @react-stately/color@3.0.0-beta.0\n- @react-stately/combobox@3.0.0-beta.0\n- @react-stately/data@3.3.0\n- @react-stately/dnd@3.0.0-alpha.0\n- @react-stately/grid@3.0.0-alpha.0\n- @react-stately/layout@3.2.1\n- @react-stately/numberfield@3.0.0-rc.0\n- @react-stately/selection@3.4.0\n- @react-stately/table@3.0.0-alpha.8\n- @react-stately/tabs@3.0.0-beta.0\n- @react-stately/tooltip@3.0.3\n- @react-stately/tree@3.1.3\n- @react-stately/virtualizer@3.1.3\n- @react-types/accordion@3.0.0-alpha.0\n- @react-types/color@3.0.0-beta.0\n- @react-types/combobox@3.0.0-beta.0\n- @react-types/grid@3.0.0-alpha.0\n- @react-types/numberfield@3.0.0-rc.0\n- @react-types/shared@3.5.0\n- @react-types/table@3.0.0-alpha.0\n- @react-types/tabs@3.0.0-beta.0\n- react-aria@3.5.0\n- react-stately@3.4.0\n```\n\n----------------------------------------\n\nTITLE: Rendering the Default Copy Drag and Drop Example (TSX)\nDESCRIPTION: Renders the `DragIntoListDefaultCopy` component. This sets up the user interface with a source list and a target list, where dragging items from the source to the target results in a 'copy' operation by default, as configured in the component definitions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/list/docs/ListView.mdx#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<DragIntoListDefaultCopy />\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Global Tailwind Styles in TSX\nDESCRIPTION: Imports the global Tailwind CSS styles required for the Command Palette example component. This ensures that the Tailwind utility classes used within the component are applied correctly.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/command-palette.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Rendering Example React App with ReactDOM (TSX)\nDESCRIPTION: This TSX snippet imports the `ExampleApp` component and uses `ReactDOM.createRoot` to render it into the DOM element with the ID 'example-app'. It showcases the setup for embedding a React application example within the documentation page, likely displayed within the `Window` component defined in the surrounding JSX.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ExampleApp} from './home/ExampleApp';\n\nReactDOM.createRoot(document.getElementById('example-app')).render(<ExampleApp />);\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from React Spectrum Docs\nDESCRIPTION: Imports and exports the Layout component from React Spectrum documentation utilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Collapsing Non-Selectable ActionGroup Items (TSX)\nDESCRIPTION: Shows the collapsing behavior for a non-selectable ActionGroup using `overflowMode=\"collapse\"` and a `maxWidth` constraint. When space is limited, items that don't fit are moved into a 'more actions' menu button.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup overflowMode=\"collapse\" maxWidth={250}>\n  <Item key=\"edit\">\n    <Draw />\n    <Text>Edit</Text>\n  </Item>\n  <Item key=\"copy\">\n    <Copy />\n    <Text>Copy</Text>\n  </Item>\n  <Item key=\"delete\">\n    <Delete />\n    <Text>Delete</Text>\n  </Item>\n  <Item key=\"move\">\n    <Move />\n    <Text>Move</Text>\n  </Item>\n  <Item key=\"duplicate\">\n    <Duplicate />\n    <Text>Duplicate</Text>\n  </Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Quiet Variant Link\nDESCRIPTION: Example of Link component with quiet styling variant\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/link/docs/Link.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<p>Would you like to <Link isQuiet>learn more</Link> about this fine component?</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Content for useDisclosureState Hook (MDX)\nDESCRIPTION: This MDX snippet defines the structure and content of the documentation page for the `useDisclosureState` hook. It uses imported React components like `PageDescription`, `HeaderInfo`, `FunctionAPI`, and `ClassAPI`, along with documentation data (`docs`) and package info (`packageData`), to display the hook's description, header information, API details, and return type interface. It also includes a link to an example in the `react-aria` documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/disclosure/docs/useDisclosureState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n# useDisclosureState\n\n<PageDescription>{docs.exports.useDisclosureState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useDisclosureState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useDisclosureState} links={docs.links} />\n\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useDisclosureState.return.id]} />\n\n## Example\n\nSee the docs for [useDisclosure](../react-aria/useDisclosure.html) in react-aria for an example of `useDisclosureState`.\n```\n\n----------------------------------------\n\nTITLE: Specifying Supported Locales in package.json for React Aria (JSON)\nDESCRIPTION: Adds a 'locales' field in package.json to explicitly list all locale identifiers (e.g., 'en-US', 'fr-FR') supported in the application. This instructs the parcel resolver plugin to retain only translation strings for these locales, removing others from the bundle for performance optimization. No runtime dependency beyond a compatible package.json; intended for use with the '@react-aria/parcel-resolver-optimize-locales' Parcel plugin. Key parameter: the 'locales' array that determines which translations are preserved. Input: package.json JSON; Output: locale filtering in build.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/parcel-resolver-optimize-locales/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"locales\": [\"en-US\", \"fr-FR\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for Page Metadata\nDESCRIPTION: Defines metadata for the documentation page using Markdown frontmatter syntax. It specifies the category ('Forms') and relevant keywords for discoverability.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/numberfield/docs/useNumberFieldState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncategory: Forms\nkeywords: [number field, input, form, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Running the React Spectrum Upgrade Assistant CLI\nDESCRIPTION: Command to execute the React Spectrum upgrade assistant tool from the directory you want to upgrade. It uses npx to run the codemod without requiring installation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/codemods/src/s1-to-s2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-spectrum/codemods s1-to-s2\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Function-based className in React\nDESCRIPTION: Demonstrates dynamic styling of a ColorThumb component using a function that receives component states to determine the appropriate class.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorArea.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorThumb className={({isDragging}) => isDragging ? 'scale-150' : 'scale-100'} />\n```\n\n----------------------------------------\n\nTITLE: Setting Main Page Heading in MDX\nDESCRIPTION: Defines the main title of the documentation page as 'useDateRangePickerState' using Markdown H1 syntax (a single '#') within the MDX file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDateRangePickerState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# useDateRangePickerState\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for React Aria Components in v3\nDESCRIPTION: Shows how to add the tailwindcss-react-aria-components plugin to the Tailwind CSS v3 configuration file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/wifi-switch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum CSS for Theme Support\nDESCRIPTION: Import statement for including React Spectrum CSS to support light and dark themes at the application root level.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-rollup-starter-app/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@react-spectrum/s2/page.css\";\n```\n\n----------------------------------------\n\nTITLE: Vite Locale Optimization Configuration\nDESCRIPTION: Configuration for optimizing locale bundles in Vite applications\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/internationalization.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.js\nimport optimizeLocales from '@react-aria/optimize-locales-plugin';\n\nexport default {\n  plugins: [\n    {\n      ...optimizeLocales.vite({\n        locales: ['en-US', 'fr-FR']\n      }),\n      enforce: 'pre'\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Link with Dynamic Styling (JSX)\nDESCRIPTION: Renders a paragraph element containing an anchor (`<a>`) tag that links to the React Spectrum GitHub repository. The `className` prop uses the `clsx` utility to combine CSS classes imported from `typographyStyles`, `styles`, and `linkStyle` modules, applying Spectrum design system styles to the paragraph and the link.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<p className={clsx(typographyStyles['spectrum-Body2'], styles.homeLinks)}>\n  <a href=\"https://github.com/adobe/react-spectrum\" className={clsx(linkStyle['spectrum-Link'], styles.link)}>GitHub</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Group Components with React Aria Hooks\nDESCRIPTION: Example implementation of a checkbox group using useCheckboxGroup and useCheckboxGroupItem hooks with React context to share state between the group and individual checkboxes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/checkbox/docs/useCheckboxGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useCheckboxGroup, useCheckboxGroupItem} from '@react-aria/checkbox';\nimport {useCheckboxGroupState} from '@react-stately/checkbox';\n\nlet CheckboxGroupContext = React.createContext(null);\n\nfunction CheckboxGroup(props) {\n  let {children, label, description} = props;\n  let state = useCheckboxGroupState(props);\n  let {groupProps, labelProps, descriptionProps, errorMessageProps, isInvalid, validationErrors} = useCheckboxGroup(props, state);\n\n  return (\n    <div {...groupProps}>\n      <span {...labelProps}>{label}</span>\n      <CheckboxGroupContext.Provider value={state}>\n        {children}\n      </CheckboxGroupContext.Provider>\n      {description && <div {...descriptionProps} style={{fontSize: 12}}>{description}</div>}\n      {isInvalid &&\n        <div {...errorMessageProps} style={{color: 'red', fontSize: 12}}>{validationErrors.join(' ')}</div>\n      }\n    </div>\n  );\n}\n\nfunction Checkbox(props) {\n  let {children} = props;\n  let state = React.useContext(CheckboxGroupContext);\n  let ref = React.useRef(null);\n  let {inputProps} = useCheckboxGroupItem(props, state, ref);\n\n  let isDisabled = state.isDisabled || props.isDisabled;\n  let isSelected = state.isSelected(props.value);\n\n  return (\n    <label\n      style={{\n        display: 'block',\n        color: (isDisabled && 'var(--gray)') || (isSelected && 'var(--blue)'),\n      }}>\n      <input {...inputProps} ref={ref} />\n      {children}\n    </label>\n  );\n}\n\n<CheckboxGroup label=\"Favorite sports\">\n  <Checkbox value=\"soccer\" isDisabled>Soccer</Checkbox>\n  <Checkbox value=\"baseball\">Baseball</Checkbox>\n  <Checkbox value=\"basketball\">Basketball</Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a NumberField with Hidden Steppers in React Spectrum\nDESCRIPTION: This snippet demonstrates how to create a NumberField without stepper buttons, using the hideStepper prop.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField label=\"Cookies\" hideStepper minValue={0} />\n```\n\n----------------------------------------\n\nTITLE: Referencing @react-types/calendar Package in Markdown\nDESCRIPTION: Shows the package name and indicates that it is part of the React Spectrum repository, directing users to the main repo for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-types/calendar/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-types/calendar\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Grid Package in Markdown\nDESCRIPTION: This code snippet shows how to reference the @react-aria/grid package in a Markdown file. It includes a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/grid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/grid\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: IllustratedMessage for 504 Gateway Timeout Error\nDESCRIPTION: Example using the Timeout illustration to display a 504 gateway timeout error message.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/illustratedmessage/docs/IllustratedMessage.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport Timeout from '@spectrum-icons/illustrations/Timeout';\n\n<IllustratedMessage>\n  <Timeout />\n  <Heading>Error 504: Server timeout</Heading>\n  <Content>The server took too long. Please try again later.</Content>\n</IllustratedMessage>\n```\n\n----------------------------------------\n\nTITLE: Styling Listbox Components with Custom CSS – CSS\nDESCRIPTION: This CSS snippet provides custom styles for listbox containers and options, tailored to ARIA roles used in accessible React components. It removes default list styling, sets maximum dimensions, and specifies styles for focused, selected, and disabled options via ARIA attributes. Focus outlines are visible for accessibility, and color changes indicate selection and disabled states. This should be included in a global or module CSS file and applies to any component using role=listbox or role=option.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/listbox/docs/useListBox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n[role=listbox] {\\n  padding: 0;\\n  margin: 5px 0;\\n  list-style: none;\\n  border: 1px solid gray;\\n  max-width: 250px;\\n  max-height: 300px;\\n  overflow: auto;\\n}\\n\\n[role=option] {\\n  display: block;\\n  padding: 2px 5px;\\n  outline: none;\\n  cursor: default;\\n  color: inherit;\\n\\n  &[data-focus-visible=true] {\\n    outline: 2px solid orange;\\n  }\\n\\n  &[aria-selected=true] {\\n    background: blueviolet;\\n    color: white;\\n  }\\n\\n  &[aria-disabled] {\\n    color: #aaa;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Disclosure Components in JSX\nDESCRIPTION: This snippet shows how to import the necessary Disclosure, DisclosureTitle, and DisclosurePanel components from the `@react-spectrum/accordion` package for use in a React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/accordion/docs/Disclosure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx import\nimport {Disclosure, DisclosureTitle, DisclosurePanel} from '@react-spectrum/accordion';\n```\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Components in TypeScript\nDESCRIPTION: This snippet shows the import statements for various React Spectrum components used in layout examples. It includes imports for Flex, Grid, View, Picker, Item, and icons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/layout.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Flex, Grid} from '@react-spectrum/layout';\nimport {View} from '@react-spectrum/view';\nimport {Picker, Item} from '@react-spectrum/picker';\nimport Book from '@spectrum-icons/workflow/Book';\nimport BulkEditUsers from '@spectrum-icons/workflow/BulkEditUsers';\nimport Draw from '@spectrum-icons/workflow/Draw';\nimport {Text} from '@react-spectrum/text';\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting BlogPostLayout in React\nDESCRIPTION: This JavaScript (JSX) snippet imports the `BlogPostLayout` and `Hero` components from the `@react-spectrum/docs` package. It then exports `BlogPostLayout` as the default export for the module, typically used to define the primary layout structure for this blog post page within a documentation site built with React Spectrum's tooling. The `Hero` component is imported but not utilized within this specific code block.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-06-15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* Copyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \\\"License\\\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License. */}\n\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Applying Spectrum 2 Styles to HTML Elements using style-macro\nDESCRIPTION: Example of using the style() macro to apply Spectrum 2 styles to an HTML div element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-webpack-5-example/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting Layout Component in React Spectrum\nDESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/label/docs/useLabel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Render Props Pattern\nDESCRIPTION: Implementation of render props pattern for conditional rendering based on state\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RangeCalendar.mdx#2025-04-23_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<CalendarCell>\n  {({formattedDate, isUnavailable}) => (\n    <>\n      {isUnavailable && <UnavailableIcon />}\n      <span>{formattedDate}</span>\n    </>\n  )}\n</CalendarCell>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS for Tailwind in React Aria Components\nDESCRIPTION: Imports the global Tailwind CSS file required for the notifications popover example.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/notifications-popover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Import\nDESCRIPTION: Importing the necessary components from React Spectrum packages\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/link/docs/Link.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Link} from '@react-spectrum/link';\nimport {View} from '@react-spectrum/view';\n```\n\n----------------------------------------\n\nTITLE: Adding basePath Support to Next.js Pages Router Provider\nDESCRIPTION: This code shows how to add basePath support to the Provider component when using Next.js Pages Router.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/routing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MyApp({Component, pageProps}: AppProps) {\n  let router = useRouter();\n\n  return (\n    <Provider \n      theme={defaultTheme}\n      router={{\n        navigate: (href, opts) => router.push(href, undefined, opts),\n        useHref: (href: string) => router.basePath + href\n      }}>\n      <Component {...pageProps} />\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using YAML Frontmatter\nDESCRIPTION: This block uses YAML frontmatter within a Markdown file to define metadata for the documentation page. It specifies the category ('Date and Time') and relevant keywords ('date', 'calendar', 'state') used for organization and searchability within the documentation system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/calendar/docs/useCalendarState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncategory: Date and Time\nkeywords: [date, calendar, state]\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Link with useLink\nDESCRIPTION: This example demonstrates how to create a basic link using the useLink hook with a native <a> element. It shows proper usage of the hook and how to spread the returned props onto the element.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/link/docs/useLink.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLink} from '@react-aria/link';\n\nfunction Link(props) {\n  let ref = React.useRef(null);\n  let {linkProps} = useLink(props, ref);\n\n  return (\n    <a\n      {...linkProps}\n      ref={ref}\n      style={{color: 'var(--blue)'}}>\n      {props.children}\n    </a>\n  );\n}\n\n<Link href=\"https://adobe.com\" target=\"_blank\">Adobe</Link>\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Page for useDroppableCollectionState - Markdown + JSX\nDESCRIPTION: This segment describes the useDroppableCollectionState hook, injects its description from the imported docs metadata, and displays structured API and interface information using custom documentation components. The page is configured to show a header, an autogenerated API section via FunctionAPI, and a context-aware type interface section. It also points users to related example documentation. This setup requires the imported documentation and component metadata, and is designed for the React Spectrum documentation site.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/dnd/docs/useDroppableCollectionState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n# useDroppableCollectionState\n\n<PageDescription>{docs.exports.useDroppableCollectionState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useDroppableCollectionState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useDroppableCollectionState} links={docs.links} />\n\n## Interface\n\n<TypeContext.Provider value={docs.links}>\n  <InterfaceType properties={docs.links[docs.exports.useDroppableCollectionState.return.id].properties} />\n</TypeContext.Provider>\n\n## Example\n\nSee the docs for [useDroppableCollection](/react-aria/useDroppableCollection.html) in react-aria for an example of `useDroppableCollectionState`.\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Name in Markdown\nDESCRIPTION: This code snippet uses Markdown syntax to format the package name as a heading. It emphasizes the @react-spectrum/theme-dark package, which is likely the main subject of the documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/theme-dark/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/theme-dark\n```\n\n----------------------------------------\n\nTITLE: Integrating ColorArea with HTML Forms using xName/yName in TSX\nDESCRIPTION: Demonstrates how to use the `xName` and `yName` props on a `ColorArea` component for integration with native HTML forms. When the form containing this `ColorArea` is submitted, the values for the specified channels ('red' and 'green' in this case) will be included in the form data submission.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorArea.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorArea xName=\"red\" yName=\"green\" />\n```\n\n----------------------------------------\n\nTITLE: Mocking HTMLElement properties for virtualized components in JavaScript\nDESCRIPTION: This code snippet demonstrates how to mock clientWidth, clientHeight, and scrollHeight properties of HTMLElement.prototype. These mocks are necessary for properly rendering virtualized collection components like ListBox and TableView in a non-browser environment.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-rsp-testing-utils.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nObject.defineProperty(HTMLElement.prototype, 'clientWidth', {configurable: true, value: 1000});\nObject.defineProperty(HTMLElement.prototype, 'clientHeight', {configurable: true, value: 1000});\nObject.defineProperty(HTMLElement.prototype, 'scrollHeight', {configurable: true, value: 1000});\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Layout and Metadata - React Spectrum - JavaScript\nDESCRIPTION: Imports the Layout component and documentation metadata for useSearchFieldState, allowing this file to render consistent, richly-linked documentation. This code expects the @react-spectrum/docs and @react-stately/searchfield modules to be available. It prepares layout and metadata objects for subsequent documentation rendering in the file's body.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/searchfield/docs/useSearchFieldState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n\nimport docs from 'docs:@react-stately/searchfield';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/searchfield/package.json';\n```\n\n----------------------------------------\n\nTITLE: Importing SearchField Component in React\nDESCRIPTION: This snippet shows how to import the SearchField component and other necessary modules for use in a React application.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/searchfield/docs/SearchField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Flex} from '@react-spectrum/layout';\nimport {SearchField} from '@react-spectrum/searchfield';\nimport User from '@spectrum-icons/workflow/User';\n```\n\n----------------------------------------\n\nTITLE: Importing BlogPostLayout and Hero from @react-spectrum/docs - JavaScript\nDESCRIPTION: This snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package, followed by exporting BlogPostLayout as the default export. This sets up the basic layout for the release notes page in a Next.js or similar React-based documentation framework. Ensure @react-spectrum/docs is installed as a dependency to use these components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2022-03-07.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Static Menu Collection in JSX\nDESCRIPTION: Demonstrates how to create a simple static collection for a Menu component using JSX syntax.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/collections/docs/collections.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu>\n  <Item>Open</Item>\n  <Item>Edit</Item>\n  <Item>Delete</Item>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Simple markdown reference to the @react-types/menu package and its parent project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-types/menu/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-types/menu\\n\\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Running React Tests\nDESCRIPTION: Launches the test runner in interactive watch mode for running application tests.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/rsp-cra-18/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Layout Component\nDESCRIPTION: Imports and exports the Layout component from React Spectrum docs package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/toggle/docs/useToggleState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Basic NumberField Usage in React\nDESCRIPTION: Demonstrates a simple implementation of the NumberField component with a label and default value.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/docs/NumberField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberField label=\"Width\" defaultValue={1024} minValue={0}  />\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js (<=13.0.x) for React Spectrum Transpilation (javascript)\nDESCRIPTION: Shows the configuration for `next.config.js` applicable to Next.js versions 13.0.x and older. This method uses the `next-transpile-modules` plugin along with `glob` to identify and transpile React Spectrum and Spectrum Icons packages. The Next.js configuration object is wrapped with the `withTM` higher-order function provided by the plugin. Requires installation of `glob` and `next-transpile-modules`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/ssr.mdx#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst glob = require('glob');\n\nconst withTM = require('next-transpile-modules')([\n  '@adobe/react-spectrum',\n  '@react-spectrum/*',\n  '@spectrum-icons/*',\n].flatMap((spec) => glob.sync(`${spec}`, { cwd: 'node_modules/' })));\n\nmodule.exports = withTM({\n  // Your Next.js configuration\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Dependencies in JavaScript\nDESCRIPTION: Imports necessary components and data for rendering the documentation page. This includes the main `Layout`, documentation rendering components (`ClassAPI`, `HeaderInfo`, `FunctionAPI`, `PageDescription`, etc.) from `@react-spectrum/docs`, documentation content (`docs`) for the datepicker state hook, and package metadata (`packageData`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/datepicker/docs/useDatePickerState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nimport docs from 'docs:@react-stately/datepicker';\nimport {ClassAPI, HeaderInfo, TypeContext, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/datepicker/package.json';\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Content within Well Component in React Spectrum with TSX\nDESCRIPTION: This snippet demonstrates rendering simple text content within the `Well` component. It highlights that the component accepts any valid React renderable children.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/well/docs/Well.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Well>Well, well, well</Well>\n```\n\n----------------------------------------\n\nTITLE: LabeledValue with Custom Number Formatting\nDESCRIPTION: Example demonstrating custom number formatting with units.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/labeledvalue/docs/LabeledValue.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<LabeledValue label=\"File size\" value={1.2} formatOptions={{style: 'unit', unit: 'megabyte'}} />\n```\n\n----------------------------------------\n\nTITLE: Package Reference - React Types Overlays\nDESCRIPTION: Simple reference showing the package name and its relation to the main react-spectrum repository.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-types/overlays/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-types/overlays\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Items in ListBox with disabledKeys Prop\nDESCRIPTION: Example of using the disabledKeys prop at the ListBox level to specify which items should be disabled based on their IDs, which is useful for dynamic collections.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n  let options = [\n    { id: 1, name: 'Aardvark' },\n    { id: 2, name: 'Cat' },\n    { id: 3, name: 'Dog' },\n    { id: 4, name: 'Kangaroo' },\n    { id: 5, name: 'Koala' },\n    { id: 6, name: 'Penguin' },\n    { id: 7, name: 'Snake' },\n    { id: 8, name: 'Turtle' },\n    { id: 9, name: 'Wombat' }\n  ];\n\n  return (\n    <ListBox\n      aria-label=\"Animals with disabledKeys\"\n      items={options}\n      selectionMode=\"single\"\n      disabledKeys={[4, 6]}\n    >\n      {(item) => <ListBoxItem>{item.name}</ListBoxItem>}\n    </ListBox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for useColorAreaState (Markdown)\nDESCRIPTION: This snippet uses Markdown and JSX-like documentation structure to provide metadata, headings, and component renderers for describing the useColorAreaState API. It specifies category and keywords, displays dynamic descriptions, API details, and links to relevant interfaces and example documentation. The snippet assumes the presence of dynamically injected documentation data from the docs variable. Inputs are mostly auto-filled by the React documentation infrastructure, and outputs are rendered documentation blocks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/color/docs/useColorAreaState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncategory: Color\nkeywords: [color picker, color area, state]\n---\n\n# useColorAreaState\n\n<PageDescription>{docs.exports.useColorAreaState.description}</PageDescription>\n\n<HeaderInfo\n  packageData={packageData}\n  componentNames={['useColorAreaState']} />\n\n## API\n\n<FunctionAPI function={docs.exports.useColorAreaState} links={docs.links} />\n\n## Interface\n\n<ClassAPI links={docs.links} class={docs.links[docs.exports.useColorAreaState.return.id]} />\n\n## Example\n\nSee the docs for [useColorArea](/react-aria/useColorArea.html) in react-aria for an example of `useColorAreaState`.\n```\n\n----------------------------------------\n\nTITLE: Importing ToggleButton CSS Styles\nDESCRIPTION: This hidden CSS snippet imports styles related to a `ToggleButton` component from another documentation file (`ToggleButton.mdx`). It uses the `@import` rule with a layer name `togglebutton`, likely to manage CSS cascade layers for the example styling.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/TagGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n```css hidden\n@import './ToggleButton.mdx' layer(togglebutton);\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Button from React Spectrum Mono-package - TypeScript/TSX\nDESCRIPTION: This snippet shows the standard way to import the Button component from the @adobe/react-spectrum mono-package in a TypeScript React app. This import ensures all related components remain at a consistent and compatible version. Requires the @adobe/react-spectrum package to be installed as a dependency.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/versioning.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Button} from '@adobe/react-spectrum';\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Reference to the package name and its relationship to the main React Spectrum repository\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/filetrigger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/filetrigger\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests with Coverage Report\nDESCRIPTION: Command to run Jest tests with code coverage reporting enabled.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn jest --coverage\n```\n\n----------------------------------------\n\nTITLE: Applying Style Macros to React Spectrum Button Component\nDESCRIPTION: Demonstration of using style macros with a React Spectrum Button component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-rollup-starter-app/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button styles={style({marginStart: 16})}>\n  Hello Spectrum 2!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Repository\nDESCRIPTION: Markdown link to the main React Spectrum repository containing the package documentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-aria/calendar\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Components and Layout for React Spectrum Documentation\nDESCRIPTION: Imports various SVG components representing drag and drop concepts along with the Layout component from React Spectrum documentation tools. This setup forms the foundation for the drag and drop documentation page.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/dnd/docs/dnd.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {Keyboard} from '@react-spectrum/text';\nimport DropOperation from './DropOperation.svg';\nimport BetweenDropPosition from './BetweenDropPosition.svg';\nimport OnDropPosition from './OnDropPosition.svg';\nimport RootDropPosition from './RootDropPosition.svg';\nimport Anatomy from './Anatomy.svg';\nimport DragAffordance from './DragAffordance.svg';\n\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Color Scheme with React Spectrum Provider (TSX)\nDESCRIPTION: Demonstrates forcing the dark color scheme onto a component. An `ActionButton` is wrapped by a `Provider` component whose `colorScheme` prop is explicitly set to `\"dark\"`. This ensures the button uses the dark theme variant, irrespective of the OS setting.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/theming.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Provider colorScheme=\"dark\">\n  <ActionButton margin=\"size-200\">I'm a dark button</ActionButton>\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Importing React Spectrum Components in TypeScript\nDESCRIPTION: Demonstrates importing TextField and ActionButton components from React Spectrum packages.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-spectrum/styling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@react-spectrum/textfield';\nimport {ActionButton} from '@react-spectrum/button';\n```\n\n----------------------------------------\n\nTITLE: Package Reference - React Spectrum NumberField\nDESCRIPTION: Package reference notation for the @react-spectrum/numberfield component package within the React Spectrum library.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/numberfield/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-spectrum/numberfield\n```\n\n----------------------------------------\n\nTITLE: Implementing RangeCalendar with Formatted Date Display in React\nDESCRIPTION: This example shows how to use the RangeCalendar component with onChange event to update and display a formatted version of the selected date range using the user's locale.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLocalTimeZone} from '@internationalized/date';\nimport {useDateFormatter} from '@react-aria/i18n';\n\nfunction Example() {\n  let [range, setRange] = React.useState({\n    start: parseDate('2020-07-03'),\n    end: parseDate('2020-07-10')\n  });\n  let formatter = useDateFormatter({dateStyle: 'long'});\n\n  return (\n    <>\n      <RangeCalendar aria-label=\"Date range\" value={range} onChange={setRange} />\n      <p>\n        Selected date:{' '}\n        {formatter.formatRange(\n          range.start.toDate(getLocalTimeZone()),\n          range.end.toDate(getLocalTimeZone())\n        )}\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from React Spectrum Docs\nDESCRIPTION: Imports the Layout component from React Spectrum's documentation package and sets it as the default export for the current file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/calendar/docs/useRangeCalendar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Enabling Pointer Cursor for Link-style List Items - CSS\nDESCRIPTION: Applies a pointer cursor style to list items that contain a data-href attribute, visually indicating they are clickable links. This ensures accessible, intuitive navigation cues for users and should be included when links are rendered in the List. Requires appropriate CSS class targeting and works across modern browsers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/gridlist/docs/useGridList.mdx#2025-04-23_snippet_15\n\nLANGUAGE: CSS\nCODE:\n```\n.list li[data-href] {\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Released NPM Packages and Versions\nDESCRIPTION: This snippet lists the released npm packages for Adobe React Spectrum, React Aria, React Stately, and related internationalization/types packages, along with their specific version numbers. Each line represents a package and its version in the format `@scope/package-name@version`.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-05-05.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- @adobe/react-spectrum@3.10.0\n- @internationalized/message@3.0.0\n- @internationalized/number@3.0.0\n- @react-aria/accordion@3.0.0-alpha.1\n- @react-aria/actiongroup@3.1.3\n- @react-aria/aria-modal-polyfill@3.3.1\n- @react-aria/breadcrumbs@3.1.4\n- @react-aria/button@3.3.2\n- @react-aria/checkbox@3.2.2\n- @react-aria/color@3.0.0-beta.2\n- @react-aria/combobox@3.0.0-beta.1\n- @react-aria/dialog@3.1.3\n- @react-aria/dnd@3.0.0-alpha.1\n- @react-aria/focus@3.3.0\n- @react-aria/grid@3.0.0-alpha.2\n- @react-aria/i18n@3.3.1\n- @react-aria/interactions@3.4.0\n- @react-aria/label@3.1.2\n- @react-aria/link@3.1.3\n- @react-aria/listbox@3.2.5\n- @react-aria/live-announcer@3.0.0\n- @react-aria/menu@3.2.1\n- @react-aria/meter@3.1.2\n- @react-aria/numberfield@3.0.0\n- @react-aria/overlays@3.6.3\n- @react-aria/progress@3.1.2\n- @react-aria/radio@3.1.4\n- @react-aria/searchfield@3.1.3\n- @react-aria/select@3.3.2\n- @react-aria/selection@3.4.1\n- @react-aria/separator@3.1.2\n- @react-aria/slider@3.0.2\n- @react-aria/spinbutton@3.0.0\n- @react-aria/ssr@3.0.2\n- @react-aria/switch@3.1.2\n- @react-aria/table@3.0.0-alpha.11\n- @react-aria/tabs@3.0.0-rc.0\n- @react-aria/textfield@3.3.0\n- @react-aria/toggle@3.1.3\n- @react-aria/tooltip@3.1.2\n- @react-aria/utils@3.8.0\n- @react-aria/virtualizer@3.3.3\n- @react-aria/visually-hidden@3.2.2\n- @react-spectrum/accordion@3.0.0-alpha.1\n- @react-spectrum/actiongroup@3.1.3\n- @react-spectrum/breadcrumbs@3.2.2\n- @react-spectrum/button@3.4.1\n- @react-spectrum/buttongroup@3.2.1\n- @react-spectrum/checkbox@3.2.3\n- @react-spectrum/color@3.0.0-beta.2\n- @react-spectrum/combobox@3.0.0-beta.1\n- @react-spectrum/dialog@3.3.2\n- @react-spectrum/divider@3.1.2\n- @react-spectrum/form@3.2.2\n- @react-spectrum/icon@3.3.1\n- @react-spectrum/illustratedmessage@3.1.2\n- @react-spectrum/image@3.1.2\n- @react-spectrum/label@3.3.3\n- @react-spectrum/layout@3.1.4\n- @react-spectrum/link@3.1.2\n- @react-spectrum/listbox@3.4.2\n- @react-spectrum/menu@3.2.3\n- @react-spectrum/meter@3.1.2\n- @react-spectrum/numberfield@3.0.0\n- @react-spectrum/overlays@3.4.1\n- @react-spectrum/picker@3.2.4\n- @react-spectrum/progress@3.1.2\n- @react-spectrum/provider@3.1.4\n- @react-spectrum/radio@3.1.3\n- @react-spectrum/searchfield@3.1.4\n- @react-spectrum/slider@3.0.3\n- @react-spectrum/statuslight@3.2.1\n- @react-spectrum/switch@3.1.2\n- @react-spectrum/table@3.0.0-alpha.12\n- @react-spectrum/tabs@3.0.0-rc.0\n- @react-spectrum/text@3.1.2\n- @react-spectrum/textfield@3.1.6\n- @react-spectrum/theme-dark@3.2.1\n- @react-spectrum/theme-default@3.2.1\n- @react-spectrum/theme-light@3.1.1\n- @react-spectrum/tooltip@3.1.3\n- @react-spectrum/utils@3.5.2\n- @react-spectrum/view@3.1.2\n- @react-spectrum/well@3.1.2\n- @react-stately/checkbox@3.0.2\n- @react-stately/collections@3.3.2\n- @react-stately/color@3.0.0-beta.2\n- @react-stately/combobox@3.0.0-beta.1\n- @react-stately/data@3.4.0\n- @react-stately/dnd@3.0.0-alpha.1\n- @react-stately/grid@3.0.0-alpha.2\n- @react-stately/layout@3.2.2\n- @react-stately/list@3.2.3\n- @react-stately/menu@3.2.2\n- @react-stately/numberfield@3.0.0\n- @react-stately/overlays@3.1.2\n- @react-stately/radio@3.3.1\n- @react-stately/searchfield@3.1.2\n- @react-stately/select@3.1.2\n- @react-stately/selection@3.5.0\n- @react-stately/slider@3.0.2\n- @react-stately/table@3.0.0-alpha.10\n- @react-stately/tabs@3.0.0-rc.0\n- @react-stately/toggle@3.2.2\n- @react-stately/tooltip@3.0.4\n- @react-stately/tree@3.1.4\n- @react-stately/utils@3.2.1\n- @react-stately/virtualizer@3.1.4\n- @react-types/combobox@3.0.0-beta.1\n- @react-types/link@3.1.2\n- @react-types/numberfield@3.0.0\n- @react-types/shared@3.6.0\n- @react-types/tabs@3.0.0-rc.0\n- react-aria@3.6.0\n- react-stately@3.5.0\n```\n\n----------------------------------------\n\nTITLE: Defining a Popover Component using React Aria in TSX\nDESCRIPTION: This snippet defines a reusable `Popover` component in React (TSX). It utilizes the `usePopover`, `Overlay`, and `DismissButton` components/hooks from `@react-aria/overlays` to create a styled popover element that can be controlled by an `OverlayTriggerState`. It includes an underlay div and dismissal buttons for closing the popover.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/select/docs/useSelect.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example export=true render=false\nimport type {AriaPopoverProps} from 'react-aria';\nimport type {OverlayTriggerState} from 'react-stately';\nimport {usePopover, Overlay, DismissButton} from '@react-aria/overlays';\n\ninterface PopoverProps extends Omit<AriaPopoverProps, 'popoverRef'> {\n  children: React.ReactNode,\n  state: OverlayTriggerState\n}\n\nfunction Popover({children, state, ...props}: PopoverProps) {\n  let popoverRef = React.useRef(null);\n  let {popoverProps, underlayProps} = usePopover({\n    ...props,\n    popoverRef\n  }, state);\n\n  return (\n    <Overlay>\n      <div {...underlayProps} style={{position: 'fixed', inset: 0}} />\n      <div\n        {...popoverProps}\n        ref={popoverRef}\n        style={{\n          ...popoverProps.style,\n          background: 'var(--page-background)',\n          border: '1px solid gray'\n        }}>\n        <DismissButton onDismiss={state.close} />\n        {children}\n        <DismissButton onDismiss={state.close} />\n      </div>\n    </Overlay>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting a Custom Layout Component - JavaScript\nDESCRIPTION: This snippet imports the 'Layout' component from the '@react-spectrum/docs' package and re-exports it as the default export. It enables the application to use a predefined documentation layout for the page. No parameters are involved, and there are no additional dependencies beyond '@react-spectrum/docs'. The snippet assumes React and ES module support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-aria/accessibility.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Package Reference Markdown\nDESCRIPTION: Package identifier and reference link to the main React Spectrum repository.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-types/progress/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-types/progress\n```\n\n----------------------------------------\n\nTITLE: Styling Breadcrumbs with CSS\nDESCRIPTION: CSS styling example for Breadcrumbs component that handles layout, separators, link appearances, and interactive states including hover and focus.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"@react-aria/example-theme\";\n\n.react-aria-Breadcrumbs {\n  display: flex;\n  align-items: center;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  font-size: 18px;\n  color: var(--text-color);\n\n  .react-aria-Breadcrumb:not(:last-child)::after {\n    content: '›';\n    content: '›' / '';\n    alt: ' ';\n    padding: 0 5px;\n  }\n\n  .react-aria-Link {\n    color: var(--link-color-secondary);\n    outline: none;\n    position: relative;\n    text-decoration: none;\n    cursor: pointer;\n\n    &[data-hovered] {\n      text-decoration: underline;\n    }\n\n    &[data-current] {\n      color: var(--text-color);\n      font-weight: bold;\n    }\n\n    &[data-focus-visible]:after {\n      content: '';\n      position: absolute;\n      inset: -2px -4px;\n      border-radius: 6px;\n      border: 2px solid var(--focus-ring-color);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Keyboard Keys with the Keyboard Component in JSX\nDESCRIPTION: Utilizes the `Keyboard` component (imported from `@react-spectrum/text`) to visually represent keyboard keys like 'Tab', 'Shift', 'Ctrl', 'Cmd', and 'Alt' within the text content. This enhances readability when discussing keyboard interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/blog/building-a-button-part-3.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Keyboard>Tab</Keyboard>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Keyboard>Shift</Keyboard>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Keyboard>Ctrl</Keyboard>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Keyboard>Cmd</Keyboard>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Keyboard>Alt</Keyboard>\n```\n\n----------------------------------------\n\nTITLE: Importing ActionBar Components in Adobe React Spectrum (JSX)\nDESCRIPTION: This snippet demonstrates how to import the ActionBar, ActionBarContainer, Item, and associated collection and icon components from their respective packages. These imports are prerequisites for using ActionBar-related features and must be included at the top of React files utilizing them. Ensure the installed dependencies include '@react-spectrum/actionbar', '@react-spectrum/list', '@spectrum-icons/workflow', '@react-spectrum/layout', '@react-spectrum/text', and '@react-spectrum/table'.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actionbar/docs/ActionBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ActionBar, ActionBarContainer, Item} from '@react-spectrum/actionbar';\nimport {ListView} from '@react-spectrum/list';\nimport Edit from '@spectrum-icons/workflow/Edit';\nimport Copy from '@spectrum-icons/workflow/Copy';\nimport Delete from '@spectrum-icons/workflow/Delete';\nimport {Flex} from '@react-spectrum/layout';\nimport {Text} from '@react-spectrum/text';\nimport {TableView, TableHeader, TableBody, Row, Column, Cell} from '@react-spectrum/table';\n```\n\n----------------------------------------\n\nTITLE: Importing Hook from Individual React Stately Package (TypeScript)\nDESCRIPTION: Shows how to import a hook (`useRadioGroupState`) from its corresponding individual package (`@react-stately/radio`) when using the granular installation approach. The import path reflects the specific installed package.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-stately/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Individual packages\nimport {useRadioGroupState} from '@react-stately/radio';\n```\n\n----------------------------------------\n\nTITLE: Importing ExampleList Component\nDESCRIPTION: Imports the ExampleList component from React Spectrum documentation source.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ExampleList} from '@react-spectrum/docs/src/ExampleList';\n```\n\n----------------------------------------\n\nTITLE: Styling Popover with CSS\nDESCRIPTION: This CSS snippet provides styles for the popover, including the underlay, arrow, and positioning based on placement.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/overlays/docs/usePopover.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.underlay {\n  position: fixed;\n  inset: 0;\n}\n\n.popover {\n  background: var(--page-background);\n  border: 1px solid var(--spectrum-global-color-gray-400);\n  box-shadow: 0 8px 20px rgba(0 0 0 / 0.1);\n  border-radius: 6px;\n}\n\n.arrow {\n  position: absolute;\n  fill: var(--page-background);\n  stroke: var(--spectrum-global-color-gray-400);\n  stroke-width: 1px;\n  width: 12px;\n  height: 12px;\n}\n\n.arrow[data-placement=top] {\n  top: 100%;\n  transform: translateX(-50%);\n}\n\n.arrow[data-placement=bottom] {\n  bottom: 100%;\n  transform: translateX(-50%) rotate(180deg);\n}\n\n.arrow[data-placement=left] {\n  left: 100%;\n  transform: translateY(-50%) rotate(-90deg);\n}\n\n.arrow[data-placement=right] {\n  right: 100%;\n  transform: translateY(-50%) rotate(90deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata in JSX\nDESCRIPTION: Specifies metadata for the blog post using JSX comments. This includes the description of the release and the publication date.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-11-30.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n---\ndescription: We have lots of bug fixes in this release. We have fixes for iOS 14, improved types, better focus handling and some new features. Thanks to everyone who submitted helpful issues and of course to those who contributed fixes!\ndate: 2020-11-30\n---\n```\n\n----------------------------------------\n\nTITLE: Importing DateRangePicker in React Spectrum\nDESCRIPTION: Shows how to import the DateRangePicker component and the Flex layout component from React Spectrum.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/datepicker/docs/DateRangePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {DateRangePicker} from '@react-spectrum/datepicker';\nimport {Flex} from '@react-spectrum/layout';\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with State in React Aria Components\nDESCRIPTION: Shows how to use render props as children to conditionally render elements based on the current state of a component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2023-react-aria-components.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Item>\n  {({isSelected}) => (\n    <>\n      {isSelected && <CheckmarkIcon />}\n      Item\n    </>\n  )}\n</Item>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Assets for mergeProps Page\nDESCRIPTION: Imports necessary assets for documenting the `mergeProps` function. This includes generated documentation data (`docs`) from `@react-aria/utils` (likely extracted by a build tool), specific documentation UI components (`HeaderInfo`, `FunctionAPI`, etc.) from `@react-spectrum/docs`, and package metadata (`packageData`) from `@react-aria/utils/package.json`. These imports are used by the documentation page to render the API details, descriptions, and header information.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/utils/docs/mergeProps.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport docs from 'docs:@react-aria/utils';\nimport {HeaderInfo, FunctionAPI, TypeContext, InterfaceType, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-aria/utils/package.json';\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component with Context Provider in JSX\nDESCRIPTION: Shows how to implement a Card component that provides context for semantic elements, allowing them to receive appropriate class names.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2019-v3-semantic-elements.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from '@adobe/spectrum-css/components/card/vars.css';\nexport const Card = (props) => {\n\n  return (\n    <div className={classNames(styles, 'spectrum-Card')}>\n      <SlotContext.Provider\n        value={{\n          title: classNames(styles, 'spectrum-Card-title')\n        }}>\n        {props.children}\n      </SlotContext.Provider>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting BlogPostLayout in React Spectrum Blog (JavaScript)\nDESCRIPTION: This JavaScript snippet imports the BlogPostLayout and Hero components from the @react-spectrum/docs package and sets BlogPostLayout as the default export. This is intended for structuring React Spectrum documentation or blog articles using consistent layouts, and assumes @react-spectrum/docs is installed in the project. Key dependencies include React and @react-spectrum/docs. The default export enables this layout to be used when rendering the page. There are no input parameters and it exports a React component for layout purposes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2021-07-12.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BlogPostLayout, Hero} from '@react-spectrum/docs';\nexport default BlogPostLayout;\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Component with a Default Slot Button (TSX)\nDESCRIPTION: Demonstrates using `MyCustomComponent` with a standard `Button` child. This button does not have a `slot` prop, so it consumes the props defined for `DEFAULT_SLOT` in the parent's `ButtonContext.Provider` (receiving `className: \"left-button\"`).\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/advanced.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MyCustomComponent>\n  {/* Consumes the props passed to the default slot */}\n  <Button>Click me</Button>\n</MyCustomComponent>\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet Styled ActionGroup in React Spectrum\nDESCRIPTION: This example demonstrates how to create an ActionGroup with a quiet visual style by using the isQuiet prop, which provides a more subtle appearance for the action buttons.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/actiongroup/docs/ActionGroup.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionGroup isQuiet>\n  <Item key=\"add\">Add</Item>\n  <Item key=\"delete\">Delete</Item>\n  <Item key=\"edit\">Edit</Item>\n</ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: Custom Class Name Implementation\nDESCRIPTION: Demonstrates how to apply a custom CSS class to a ComboBox component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ComboBox.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<ComboBox className=\"my-combobox\">\n  {/* ... */}\n</ComboBox>\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS for Styling\nDESCRIPTION: Imports the Tailwind global CSS file needed for styling the Wi-Fi Switch component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/wifi-switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport './tailwind.global.css';\n```\n\n----------------------------------------\n\nTITLE: Read-Only ColorField Example React Spectrum TypeScript\nDESCRIPTION: Displays a ColorField set to read only using the 'isReadOnly' prop. Unlike disabled, the field can receive focus and users can copy its value but not edit it. Useful for showing immutable color values while retaining accessibility features.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/color/docs/ColorField.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorField label=\\\"Primary Color\\\" isReadOnly defaultValue=\\\"#e73623\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata in JSX\nDESCRIPTION: Sets the description and date for the blog post using JSX comments. This metadata is likely used by the blog system to display information about the post.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2020-10-29.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n---\ndescription: This release includes a new `useMove` interaction hook for handling drags across mouse, touch, and keyboard! In addition, we've fixed many bugs since our last release, and worked on several new components to be released soon. Thanks to all of the contributors!\ndate: 2020-10-29\n---\n```\n\n----------------------------------------\n\nTITLE: Representing Keyboard Shortcuts using <kbd> Tag (HTML)\nDESCRIPTION: The HTML `<kbd>` tag is used throughout the documentation to visually represent keyboard keys or shortcuts (e.g., Enter, Shift + F10, Down Arrow) related to menu keyboard interactions as described in the WAI-ARIA design pattern.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/accessibility/Menu.mdx#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Shift + F10</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Enter</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Space</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Down Arrow</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Up Arrow</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Right Arrow</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Left Arrow</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Home</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>End</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Escape</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Tab</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>Shift + Tab</kbd>\n```\n\nLANGUAGE: html\nCODE:\n```\n<kbd>alt + F10</kbd>\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria Combobox Package in Markdown\nDESCRIPTION: This snippet demonstrates how to reference the @react-aria/combobox package in a Markdown file. It includes a link to the main react-spectrum repository for further details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/combobox/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/combobox\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Importing ComboBox and Related Components in JSX\nDESCRIPTION: Imports necessary components for using React Spectrum ComboBox, including icons, layout components, text components, internationalization utilities, and Avatar.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/combobox/docs/ComboBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\njsx import\nimport Add from '@spectrum-icons/workflow/Add';\nimport Alert from '@spectrum-icons/workflow/Alert';\nimport Bell from '@spectrum-icons/workflow/Bell';\nimport {ComboBox, Item, Section} from '@react-spectrum/combobox';\nimport Draw from '@spectrum-icons/workflow/Draw';\nimport {Flex} from '@react-spectrum/layout';\nimport {Text} from '@react-spectrum/text';\nimport {useFilter} from '@react-aria/i18n';\nimport {Avatar} from \"@react-spectrum/avatar\";\n```\n\n----------------------------------------\n\nTITLE: LabeledValue with List Formatting\nDESCRIPTION: Example showing list formatting capabilities.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/labeledvalue/docs/LabeledValue.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<LabeledValue label=\"Pizza toppings\" value={['Pepperoni', 'Pineapple', 'Mushroom', 'Garlic']} />\n```\n\n----------------------------------------\n\nTITLE: Extending Parcel Configuration to Use Locale Optimization Resolver - JSON\nDESCRIPTION: This JSON snippet extends the default Parcel configuration by adding the @react-aria/parcel-resolver-optimize-locales plugin to the 'resolvers' array. The configuration assumes that @parcel/config-default is being used as a base. The key parameter is the presence of the the locale resolver in the array. The output is a configured .parcelrc file ready to support locale optimization; no runtime dependencies, but requires correct package installation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/docs/internationalization.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"extends\\\": \\\"@parcel/config-default\\\",\\n  \\\"resolvers\\\": [\\\"@react-aria/parcel-resolver-optimize-locales\\\", \\\"...\\\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Components for Upgrade with CLI Option\nDESCRIPTION: Example of using the components option to selectively upgrade specific React Spectrum components instead of upgrading all components. The option accepts a comma-separated list of component names.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/codemods/src/s1-to-s2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-c, --components <components>\n```\n\n----------------------------------------\n\nTITLE: Linking to React Spectrum Repository in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a hyperlink in Markdown, linking the text 'react-spectrum' to the GitHub repository of the project. It provides a reference for users to find more detailed information about the package and its context within the larger project.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/i18n/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[react-spectrum](https://github.com/adobe/react-spectrum)\n```\n\n----------------------------------------\n\nTITLE: Handling Drop Operations in React Spectrum\nDESCRIPTION: This snippet demonstrates how to handle different drop operations (move, copy, link) in a file service application. The dropOperation property determines which action to perform when items are dropped.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ListBox.mdx#2025-04-23_snippet_51\n\nLANGUAGE: tsx\nCODE:\n```\nlet onItemDrop = async (e) => {\n  let data = JSON.parse(await e.items[0].getText('my-app-file'));\n  /*- begin highlight -*/\n  switch (e.dropOperation) {\n    case 'move':\n      MyAppFileService.move(data.filePath, props.filePath);\n      break;\n    case 'copy':\n      MyAppFileService.copy(data.filePath, props.filePath);\n      break;\n    case 'link':\n      MyAppFileService.link(data.filePath, props.filePath);\n      break;\n  }\n  /*- end highlight -*/\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Resizable Columns in React Spectrum TableView - JSX Example\nDESCRIPTION: This snippet demonstrates how to configure resizable columns in a React Spectrum TableView component by leveraging new props. The <TableView> component is instantiated with props for width and event callbacks for column resizing. Inside the <TableHeader>, three <Column> elements are shown: each specifies allowsResizing, and variously uses defaultWidth (with pixel, fraction, or percent string formats), minWidth, and maxWidth. This code expects React and React Spectrum to be installed and assumes onResize and onResizeEnd callback handlers are defined elsewhere by the consumer. Column widths, limits, and behaviors are managed as described in the RFC, and the code is intended for direct integration into an application or demo.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2022-v3-resizable-columns.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TableView width={800} onColumnResize={onResize} onColumnResizeEnd={onResizeEnd}>\\n    <TableHeader>\\n        <Column allowsResizing defaultWidth={200} minWidth={175}>File Name</Column>\\n        <Column allowsResizing defaultWidth=\\\"1fr\\\" maxWidth={500}>Size</Column>\\n        <Column allowsResizing defaultWidth=\\\"20%\\\">Type</Column>\\n    </TableHeader>\\n    ...\\n</TableView>\n```\n\n----------------------------------------\n\nTITLE: Importing useNumberField and Related Components\nDESCRIPTION: Imports the necessary components and hooks for creating a NumberField component, including useNumberField, useNumberFieldState, and useLocale.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/numberfield/docs/useNumberField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useNumberField} from '@react-aria/numberfield';\nimport {useNumberFieldState} from '@react-stately/numberfield';\nimport {useLocale} from '@react-aria/i18n';\n```\n\n----------------------------------------\n\nTITLE: Styling ToggleButtonGroup with Default ClassName Selector (CSS)\nDESCRIPTION: Provides a CSS class skeleton for .react-aria-ToggleButtonGroup. Intended to serve as a stub for user extensions, this allows custom styles to apply to all ToggleButtonGroup elements with that class. Relies on React Aria's automatic className assignment; no other dependencies.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ToggleButtonGroup.mdx#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.react-aria-ToggleButtonGroup {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QuickActions and QuickActionsItem Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces defining the props for QuickActions component and its child QuickActionsItem components. QuickActions supports icon or text variants with configurable visibility, while QuickActionsItem defines properties for individual action items including labels, icons, disabled state, and click handlers.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/QuickActions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface QuickActions {\n  variant?: 'icon' | 'text',\n  maxVisibleItems?: number,\n  children: ReactElement<QuickActionsItem> | ReactElement<QuickActionsItem>[]\n}\n\ninterface QuickActionsItem {\n  children: ReactNode, // label. In icon variant this is displayed as a tooltip.\n  icon?: ReactNode,\n  isDisabled?: boolean,\n  onPress?: (e: Event) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Layout Component in React Spectrum - JavaScript\nDESCRIPTION: This code snippet imports the \"Layout\" component from the @react-spectrum/docs package and exports it as the default export. It serves as the base layout for the documentation page, ensuring a consistent structure for the React Spectrum documentation site. The only dependency is the \"@react-spectrum/docs\" package, and the export enables React rendering of the documentation page with the specified layout component. There are no inputs or outputs, and this setup is required for all documentation files utilizing the custom layout system.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/Support.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Parcel Macros Plugin\nDESCRIPTION: Webpack configuration to include the unplugin-parcel-macros plugin for Spectrum 2 styling support.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-webpack-5-example/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst macros = require(\"unplugin-parcel-macros\");\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    macros.webpack(),\n    // ...\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a DatePicker with a ZonedDateTime Value (TypeScript/TSX)\nDESCRIPTION: Illustrates setting a default value for MyDatePicker using a ZonedDateTime parsed via parseZonedDateTime from @internationalized/date. Ensures correct display and handling of dates in a specific time zone in React Spectrum DatePickers. Dependencies are @internationalized/date's time zone parsing utilities and MyDatePicker's acceptance of complex date types. Input is a string with time, offset, and zone; output is a properly localized and time zone aware picker. Requires consumers to manage correct time zone string formatting and conversion.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/DatePicker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseZonedDateTime} from '@internationalized/date';\n\n<MyDatePicker\n  label=\"Event date\"\n  defaultValue={parseZonedDateTime('2022-11-07T00:45[America/Los_Angeles]')} />\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Label Component within ColorSlider in React (TSX)\nDESCRIPTION: Illustrates the usage of the previously defined `MyCustomLabel` component within a `ColorSlider`. This replaces the standard React Aria `Label` component, demonstrating how custom components consuming context can be integrated.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/ColorSlider.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<ColorSlider>\n  {/*- begin highlight -*/}\n  <MyCustomLabel>Opacity</MyCustomLabel>\n  {/*- end highlight -*/}\n  <SliderTrack>\n    <ColorThumb />\n  </SliderTrack>\n</ColorSlider>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Macros Plugin\nDESCRIPTION: Next.js configuration to add the webpack version of the macros plugin. This setup is necessary for using style macros with React Spectrum components.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/examples/s2-next-macros/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport macrosPlugin from 'unplugin-parcel-macros';\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  webpack(config, {}) {\n    config.plugins.push(macrosPlugin.webpack());\n\n    return config;\n  }\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining Types and Hook for Drop Indicators in TypeScript\nDESCRIPTION: Defines TypeScript interfaces for the props (`DropIndicatorProps`) and Aria attributes (`DropIndicatorAria`) related to the `useInsertionIndicator` hook (associated with the `useDropIndicator` concept). This hook provides props for an element used as a visual insertion indicator between items in a droppable collection, including accessibility attributes.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/rfcs/2020-v3-dnd.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DropIndicatorProps {\n  /** The drop target represented by the drop indicator. */\n  target: DropTarget\n}\n\ninterface DropIndicatorAria {\n  /** Props for the drop indicator element. */\n  dropIndicatorProps: HTMLAttributes<HTMLElement>\n}\n\ndeclare function useInsertionIndicator(props: InsertionIndicatorProps, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DropIndicatorAria;\n```\n\n----------------------------------------\n\nTITLE: Customizing ProgressBar Scale with Min and Max Values in React Spectrum\nDESCRIPTION: Demonstrates how to customize the scale of a ProgressBar by setting minValue and maxValue props, creating a range from 50 to 150 with a current value of 100.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/progress/docs/ProgressBar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressBar label=\"Loading…\" minValue={50} maxValue={150} value={100} />\n```\n\n----------------------------------------\n\nTITLE: Installing React Stately Monopackage via Yarn\nDESCRIPTION: This command installs the main `react-stately` monopackage using the yarn package manager. This package includes all available React Stately hooks.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/react-stately/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-stately\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Meter Component in React Aria\nDESCRIPTION: This example shows how to create a reusable Meter component by wrapping the Meter and its children into a single component with a custom prop for the label.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Meter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {MeterProps} from 'react-aria-components';\n\ninterface MyMeterProps extends MeterProps {\n  label?: string\n}\n\nfunction MyMeter({label, ...props}: MyMeterProps) {\n  return (\n    <Meter {...props}>\n      {({percentage, valueText}) => <>\n        <Label>{label}</Label>\n        <span className=\"value\">{valueText}</span>\n        <div className=\"bar\">\n          <div className=\"fill\" style={{width: percentage + '%'}} />\n        </div>\n      </>}\n    </Meter>\n  );\n}\n\n<MyMeter label=\"Storage space\" value={80} />\n```\n\n----------------------------------------\n\nTITLE: Comparing Time Objects\nDESCRIPTION: Demonstrates how to compare Time objects to determine their relative order\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/Time.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nlet a = new Time(9, 45);\nlet b = new Time(12, 20);\n\na.compare(b) < 0; // true\nb.compare(a) > 0; // true\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Metadata and Components (JavaScript)\nDESCRIPTION: This snippet imports documentation metadata, utility components, and package data for use in rendering API and interface references for the useSingleSelectListState hook. These imports are key dependencies for the dynamic rendering of function and type documentation. The 'docs' import relies on a custom loader or plugin that supplies documentation exports for @react-stately/list.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/list/docs/useSingleSelectListState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport docs from 'docs:@react-stately/list';\nimport {HeaderInfo, TypeContext, InterfaceType, FunctionAPI, TypeLink, PageDescription} from '@react-spectrum/docs';\nimport packageData from '@react-stately/list/package.json';\n```\n\n----------------------------------------\n\nTITLE: Package Reference in Markdown\nDESCRIPTION: Reference to the @react-stately/virtualizer package name and link to the main React Spectrum repository.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-stately/virtualizer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @react-stately/virtualizer\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Separator Icons in Breadcrumbs\nDESCRIPTION: CSS styling for custom SVG separator icons in breadcrumbs, adjusting vertical alignment and spacing for proper visual presentation.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Breadcrumbs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.my-item svg {\n  vertical-align: middle;\n  padding: 0 5px;\n  margin-top: -2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components from React Spectrum\nDESCRIPTION: This code imports various documentation-related components from @react-spectrum/docs, which are likely used to structure and format the documentation content.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/number/docs/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {HeaderInfo, FunctionAPI, ClassAPI, TypeContext, InterfaceType, TypeLink, PageDescription} from '@react-spectrum/docs';\n```\n\n----------------------------------------\n\nTITLE: Styling GridLayout Component with CSS\nDESCRIPTION: Defines CSS styles for the resizable container and grid layout list box, including responsive width settings and font styling for labels.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Virtualizer.mdx#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.resizable {\n  resize: horizontal;\n  width: 400px;\n  min-width: 240px;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.react-aria-ListBox[data-layout=grid] {\n  max-width: none;\n  width: 100%;\n\n  [slot=label] {\n    font-size: 12px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Styling Using Functional ClassName Prop for OverlayArrow in React Spectrum with JSX\nDESCRIPTION: Demonstrates the use of a functional className prop for the OverlayArrow component, enabling dynamic, placement-specific class selection (e.g., for Tailwind). The function receives an object containing the placement and returns different class strings as needed. Inputs: possible placements; Output: rotated OverlayArrow styles.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Popover.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<OverlayArrow className={({placement}) => placement === 'left' || placement === 'right' ? 'rotate-90' : 'rotate-0'}>\\n  {/* ... */}\\n</OverlayArrow>\\n\n```\n\n----------------------------------------\n\nTITLE: Referencing React Spectrum Slider Package in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @react-spectrum/slider package in a Markdown file. It provides a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/slider/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-spectrum/slider\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Configuration for React Aria Components in v3\nDESCRIPTION: Demonstrates how to add the tailwindcss-react-aria-components plugin to the Tailwind v3 configuration file.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/shipping-radio.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    require('tailwindcss-react-aria-components')\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Converting CalendarDateTime to String (TypeScript/React)\nDESCRIPTION: Shows how to convert a CalendarDateTime object to an ISO 8601 formatted string using the toString method.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/CalendarDateTime.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nlet date = new CalendarDateTime(2022, 2, 3, 9, 45);\ndate.toString(); // '2022-02-03T09:45:00'\n```\n\n----------------------------------------\n\nTITLE: Managing Toast Queue State and Aria with ToastContainer Hooks in TypeScript\nDESCRIPTION: Establishes container-level state management and ARIA patterns for toast queues via `ToastContainerProps`, `ToastContainerState`, and relevant hooks. It covers positioning, toast queue manipulation, priority assignment, and ARIA configuration for accessibility. These interfaces and hook contracts support advanced use cases like implementing queue logic, direct toast manipulation, and flexible accessibility attributes, targeting global context providers in React Spectrum. Requires knowledge of React context and TypeScript generics for props/state typing.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/specs/api/Toast.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ToastContainerProps {\n  /**\n    Some prop that allow the user to specify where the container should be located on the page. Open questions are as follows:\n      - Where to position the ToastContainer? Would the toast appear at the bottom of the container it was placed in or portalled out so it is at the bottom of the screen?\n      - Should there be an option to portal?\n      - How would this affect theming? Would we get the theme from the nearest container or should it receive the theming from the top most Provider?\n  */\n  positioning: ?\n}\n\ninterface ToastContainerState {\n  // Returns what toast is currently displayed.\n  visibleToast: ToastElement,\n\n  // Setter for what toast to display. Returned here in case user wants to ignore priority logic and set what toast should be visible.\n  setVisibleToastProps: (ToastElement) => void,\n\n  // Flat array that contains the current toast queue.\n  toastQueue: Array<ToastElement>,\n\n  // Setter to modify toast queue. Returned here if the user want to modify the queue directly (wipe the queue, etc).\n  setToastQueue: (Array<ToastElement>) => void,\n\n  // Adds a toast to the queue. Needs a unique identifier so toast look up can happen via removeToast.\n  addToast: (ToastElement, id/key) => void,\n\n  // Removes a toast regardless if it is visible or in queue. Uses the provided id/key to find what toast to remove.\n  removeToast: (id/key) => void,\n\n  // Function that overrides the default priority logic. Consumes toast props and returns a priority number.\n  determinePriorityFn: (props) => number\n}\n\nfunction useToastContainerState(): ToastContainerState;\n\ninterface ToastContainerAria {\n  // TODO: Accesibility review\n  role: 'region',\n  aria-label: 'Notifications'\n}\n\nfunction useToastContainer(): ToastContainerAria;\n\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Component from React Spectrum Documentation\nDESCRIPTION: Imports the Layout component from @react-spectrum/docs and exports it as the default export for the page layout.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@internationalized/date/docs/DateFormatter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layout} from '@react-spectrum/docs';\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Configuring Replace Selection Behavior in GridList (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set the selectionBehavior prop to 'replace' in GridList, modifying how user interactions change the selection. With 'replace', clicking a row replaces selection, and modifier keys are used for multiple selections, matching standard operating system list behaviors. Input props are passed through to the underlying PokemonList component. Dependencies include the previously defined PokemonList and react-aria-components for types.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/GridList.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<PokemonList\\n  aria-label=\"List with replace selection behavior\"\\n  selectionMode=\"multiple\"\\n  /*- begin highlight -*/\\n  selectionBehavior=\"replace\"\\n  /*- end highlight -*/\\n/>\\n\n```\n\n----------------------------------------\n\nTITLE: Testing Tabs with React Spectrum Test Utils\nDESCRIPTION: Example of using the TabsTester utility from @react-spectrum/test-utils to test tab interactions. The example shows how to create a tabs tester and verify tab selection behavior using keyboard interactions.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-spectrum/tabs/docs/Tabs.mdx#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n// Tabs.test.ts\nimport {render} from '@testing-library/react';\nimport {theme} from '@react-spectrum/theme-default';\nimport {User} from '@react-spectrum/test-utils';\n\nlet testUtilUser = new User({interactionType: 'mouse'});\n// Other setup, be sure to check out the suggested mocks mentioned above in https://react-spectrum.adobe.com/react-spectrum/Tabs.html#testing\n\nit('Tabs can change selection via keyboard', async function () {\n  // Render your test component/app and initialize the listbox tester\n  let {getByTestId} = render(\n    <Provider theme={defaultTheme}>\n      <Tabs data-testid=\"test-tabs\">\n        ...\n      </Tabs>\n    </Provider>\n  );\n  let tabsTester = testUtilUser.createTester('Tabs', {root: getByTestId('test-tabs'), interactionType: 'keyboard'});\n\n  let tabs = tabsTester.tabs;\n  expect(tabsTester.selectedTab).toBe(tabs[0]);\n\n  await tabsTester.triggerTab({tab: 1});\n  expect(tabsTester.selectedTab).toBe(tabs[1]);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling an Individual Radio Button in React (TSX)\nDESCRIPTION: Demonstrates how to disable a specific Radio option within a RadioGroup by passing the `isDisabled` prop directly to the individual `Radio` component.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/RadioGroup.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx example\n<MyRadioGroup label=\"Favorite sport\">\n  <Radio value=\"soccer\">Soccer</Radio>\n  <Radio value=\"baseball\" isDisabled>Baseball</Radio>\n  <Radio value=\"basketball\">Basketball</Radio>\n</MyRadioGroup>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Layout Components in React\nDESCRIPTION: Imports the ExampleLayout component from React Spectrum docs and exports it as the default layout for the page. This sets up the documentation page structure.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/examples/stock-table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ExampleLayout} from '@react-spectrum/docs';\nexport default ExampleLayout;\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using Markdown Frontmatter (YAML)\nDESCRIPTION: This YAML block, typically used as Markdown frontmatter, defines metadata for the associated page. It sets the `description` summarizing the release highlights (native links, RouterProvider, RAC improvements, DropZone, isPending Button) and the `date` of the release announcement (October 2, 2023). This metadata is used by the documentation framework.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/dev/docs/pages/releases/2023-10-02.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: In this release, we've added support for native links across all collection components in React Spectrum and React Aria! Now you can add links to components such as Menu, Breadcrumbs, Tabs and more. To streamline integration with client-side routers, we've introduced the RouterProvider component, allowing you to seamlessly incorporate client-side routers. See the client-side routing guide to learn how it set it up in your app. Since its beta release, we have made a number of improvements and bug fixes to React Aria Components. We have also added a new advanced customization guide that describes how to use contexts and hooks to build your own custom patterns using React Aria Components. React Spectrum has new additions, including DropZone and isPending prop to Button.\n\ndate: 2023-10-02\n---\n```\n\n----------------------------------------\n\nTITLE: Customizing React Spectrum ListBox via Composition in TypeScript\nDESCRIPTION: Defines a React functional component `MyListBox` that acts as a wrapper around the standard `ListBox` component from React Spectrum. It demonstrates composition by spreading all received props (`{...props}`) onto the underlying `ListBox` while also adding a custom CSS class `my-listbox` for specific styling or identification.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/react-aria-components/docs/Autocomplete.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nfunction MyListBox(props) {\n  return <ListBox {...props} className=\"my-listbox\" />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing React Aria SearchField Package in Markdown\nDESCRIPTION: This snippet shows how to reference the @react-aria/searchfield package in a Markdown file. It includes a link to the main react-spectrum repository for additional details.\nSOURCE: https://github.com/adobe/react-spectrum/blob/main/packages/@react-aria/searchfield/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @react-aria/searchfield\n\nThis package is part of [react-spectrum](https://github.com/adobe/react-spectrum). See the repo for more details.\n```"
  }
]