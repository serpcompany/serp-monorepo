[
  {
    "owner": "scikit-hep",
    "repo": "vector",
    "content": "TITLE: Creating 2D Cartesian Geometric Vector in Python\nDESCRIPTION: Shows how to create a 2D Cartesian geometric vector using the vector.obj constructor.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvector.obj(x=1.1, y=2.2)\n```\n\n----------------------------------------\n\nTITLE: Computing Angle Between Two 3D Vectors in Python\nDESCRIPTION: Shows how to calculate the angle between two 3D vectors using the deltaangle method.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\na.deltaangle(b)\n```\n\n----------------------------------------\n\nTITLE: Adding Two 3D Vectors in Python\nDESCRIPTION: Demonstrates vector addition using the + operator, which overloads the add method.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\na + b\n```\n\n----------------------------------------\n\nTITLE: Summing a List of 2D Vectors in Python\nDESCRIPTION: Shows how to create a list of 2D vectors and sum them using the built-in sum function.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvs = [vector.obj(x=x, y=x / 10) for x in range(10)]\n\nsum(vs, start=vector.obj(x=0, y=0))\n```\n\n----------------------------------------\n\nTITLE: Computing Cross-Product of Two 3D Vectors in Python\nDESCRIPTION: Demonstrates how to create two 3D vectors and compute their cross-product using the cross method.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\na = vector.obj(x=2, y=3, z=4)\nb = vector.obj(x=1, y=0, z=2)\n\na.cross(b)\n```\n\n----------------------------------------\n\nTITLE: Creating and Comparing Geometric and Momentum Vectors in Python\nDESCRIPTION: Shows the creation of geometric and momentum vectors and demonstrates their similarities and differences in usage.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nv = vector.obj(x=1, y=2, z=3)\nv\n\np = vector.obj(px=1, py=2, pz=3)\np\n\nabs(v)\n\nabs(p)\n\nv.rho\n\np.rho\n\np.pt\n```\n\n----------------------------------------\n\nTITLE: Creating Lorentz Vector Array\nDESCRIPTION: Creates a LorentzVector array using awkward arrays with pt, eta, phi, and energy components.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nvec = ak.zip(\n    {\n        \"pt\": [[1, 2], [], [3], [4]],\n        \"eta\": [[1.2, 1.4], [], [1.6], [3.4]],\n        \"phi\": [[0.3, 0.4], [], [0.5], [0.6]],\n        \"energy\": [[50, 51], [], [52], [60]],\n    },\n    with_name=\"LorentzVector\",\n    behavior=behavior,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Vectors with Different Coordinate Systems in Python\nDESCRIPTION: Demonstrates how vectors can be created using different coordinate systems and added together seamlessly.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\na = vector.obj(x=2, y=1)\nb = vector.obj(rho=3, phi=0)\n\na + b\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector2D Objects with Awkward Arrays\nDESCRIPTION: Demonstrates creating an Awkward Array of 2D vectors using named records with x,y coordinates. Shows how to register vector behaviors and perform vector operations like magnitude calculation through variable-length lists.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_awkward.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import awkward as ak\n>>> import vector\n>>> vector.register_awkward()\n>>>\n>>> vec = ak.Array([\n...     [{\"x\": 1.1, \"y\": 2.2}, {\"x\": 3.3, \"y\": 4.4}],\n...     [],\n...     [{\"x\": 5.5, \"y\": 6.6}],\n... ], with_name=\"Vector2D\")\n>>>\n>>> abs(vec)\n<Array [[2.46, 5.5], [], [8.59]] type='3 * var * float64'>\n```\n\n----------------------------------------\n\nTITLE: Creating Awkward Array of 2D Vectors\nDESCRIPTION: Example of creating an Awkward Array containing 2D vectors using the with_name parameter to specify the vector type and setting the vector behavior.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narr = ak.Array(\n    [\n        [{\"x\": 1.1, \"y\": 2.2}, {\"x\": 3.3, \"y\": 4.4}],\n        [],\n        [{\"x\": 5.5, \"y\": 6.6}],\n    ],\n    with_name=\"Vector2D\",\n    behavior=vector.backends.awkward.behavior,\n)\narr\n```\n\n----------------------------------------\n\nTITLE: Defining a 2D Vector Variable for Operations\nDESCRIPTION: Assigns a symbolic 2D vector to a variable for further operations, using x and y symbolic components.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nv = vector.VectorSympy2D(x=x, y=y)\n```\n\n----------------------------------------\n\nTITLE: Calculating Dot Products with Broadcasting\nDESCRIPTION: Computing dot products between vectors in two arrays with different structures, demonstrating Awkward Array's broadcasting capabilities.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\na.dot(b)\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Cartesian Momentum Vector in Python\nDESCRIPTION: Demonstrates the creation of a 3D Cartesian momentum vector using the vector.obj constructor.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvector.obj(px=1.1, py=2.2, pz=3.3)\n```\n\n----------------------------------------\n\nTITLE: Vector Array Operations Example\nDESCRIPTION: Demonstrates vector operations using iteration and direct array operations\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\na = vector.array({\"x\": np.arange(10), \"y\": np.zeros(10), \"z\": np.arange(-5, 5)})\nb = vector.array({\"x\": np.ones(10), \"y\": np.arange(10, 0, -1), \"z\": np.arange(-10, 0)})\n```\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(len(a)):\n    print(a[i].cross(b[i]))\n```\n\nLANGUAGE: python\nCODE:\n```\na.cross(b)\n```\n\n----------------------------------------\n\nTITLE: Creating 4D Geometric Vector with Mixed Coordinates in Python\nDESCRIPTION: Shows how to create a 4D geometric vector with Cartesian azimuthal components, pseudorapidity, and proper time.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvector.obj(x=1.1, y=2.2, eta=3.3, tau=4.4)\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbolic 3D Momentum Vector\nDESCRIPTION: Creates a three-dimensional momentum vector with symbolic px, py, and pz components using MomentumSympy3D class.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvector.MomentumSympy3D(px=px, py=py, pz=pz)\n```\n\n----------------------------------------\n\nTITLE: Importing vector.array Function\nDESCRIPTION: Shows the autofunction directive for the vector.array function, which is one of the main methods to create NumPy arrays of vectors. This function (and its synonym vector.arr) provides a general constructor for vector arrays.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_numpy.md#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: vector.array\n```\n\n----------------------------------------\n\nTITLE: Computing Magnitude of 2D, 3D, and 4D Vectors in Python\nDESCRIPTION: Demonstrates how to calculate the magnitude of 2D, 3D, and 4D vectors using the abs function.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nabs(vector.obj(x=3, y=4))  # sqrt(3**2 + 4**2)\n\nabs(vector.obj(x=1, y=2, z=2))  # sqrt(1**2 + 2**2 + 2**2)\n\nabs(vector.obj(x=3, y=3, z=3, t=6))  # sqrt(6**2 - 3**2 - 3**2 - 3**2)\n```\n\n----------------------------------------\n\nTITLE: Creating Functions for Momentum3D Vector Arrays\nDESCRIPTION: Helper functions to create Awkward arrays of 3D momentum vectors for testing and demonstration purposes.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef array_of_momentum3d(num_vectors):\n    return ak.zip(\n        {\n            \"px\": np.random.normal(0, 1, num_vectors),\n            \"py\": np.random.normal(0, 1, num_vectors),\n            \"pz\": np.random.normal(0, 1, num_vectors),\n        },\n        with_name=\"Momentum3D\",\n    )\n\n\ndef array_of_lists_of_momentum3d(mean_num_per_list, num_lists):\n    num_per_list = np.random.poisson(mean_num_per_list, num_lists)\n    return ak.unflatten(\n        array_of_momentum3d(np.sum(num_per_list)),\n        num_per_list,\n    )\n\n\na = array_of_momentum3d(10)\nb = array_of_lists_of_momentum3d(1.5, 10)\n```\n\n----------------------------------------\n\nTITLE: Comparing Vectors for Equality in Python\nDESCRIPTION: Shows how to compare vectors for equality using the == operator and the isclose method for approximate equality.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nvector.obj(x=3, y=4) == vector.obj(x=3, y=4)\n\nvector.obj(x=3, y=4) == vector.obj(rho=5, phi=0.9272952180016122)\n\nvector.obj(x=3, y=4).isclose(vector.obj(rho=5, phi=0.9272952180016122))\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Vector Type Instance\nDESCRIPTION: Creating an instance of a custom vector type (TwoVector) using Awkward Array's zip function.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nvec = ak.zip(\n    {\n        \"pt\": [[1, 2], [], [3], [4]],\n        \"phi\": [[1.2, 1.4], [], [1.6], [3.4]],\n    },\n    with_name=\"TwoVector\",\n    behavior=behavior,\n)\nvec\n```\n\n----------------------------------------\n\nTITLE: Accessing Converted Coordinates of a Vector in Python\nDESCRIPTION: Shows how to access both original and converted coordinates of a vector, demonstrating coordinate system abstraction.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\na.rho, a.phi\n\na.x, a.y\n```\n\n----------------------------------------\n\nTITLE: Checking if a 4D Vector is Timelike\nDESCRIPTION: Determines whether a 4D vector is timelike, returning a symbolic expression that evaluates to True or False.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nv.is_timelike()\n```\n\n----------------------------------------\n\nTITLE: Explicitly Changing Coordinate Systems of Vectors in Python\nDESCRIPTION: Demonstrates how to explicitly change the coordinate system of vectors using to_* methods.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\na.to_rhophi()\n\nb.to_xy()\n```\n\n----------------------------------------\n\nTITLE: Importing VectorNumpy Class\nDESCRIPTION: Shows the autoclass directive for the VectorNumpy class, which is another primary method to create NumPy arrays of vectors. This class serves as a general constructor for vector arrays.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_numpy.md#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.VectorNumpy\n```\n\n----------------------------------------\n\nTITLE: Electron Four-Momenta Simulation\nDESCRIPTION: Generates 10000 simulated electron four-momenta with spherical symmetry\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvector.array(\n    {\n        \"pt\": np.random.exponential(5, 10000),\n        \"phi\": np.random.uniform(-np.pi, np.pi, 10000),\n        \"theta\": np.arccos(np.random.uniform(-1, 1, 10000)),\n        \"mass\": np.full(10000, 0.000511),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Vector Scalar Division\nDESCRIPTION: Performs scalar division on a vector array.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nvec / 2\n```\n\n----------------------------------------\n\nTITLE: Creating Vectors with Different Numeric Types in Python\nDESCRIPTION: Demonstrates how vectors can be created with different numeric types, including integers, floats, and NumPy types.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nv = vector.obj(x=1, y=2.2)\n\ntype(v.x)\n\ntype(v.y)\n\nimport numpy as np\n\nv = vector.obj(x=np.float32(1.1), y=np.float64(2.2))\n\ntype(v.x)\n\ntype(v.y)\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Variables for Vector Components\nDESCRIPTION: Defines symbolic variables using SymPy with the assumption that they are real-valued. These symbols will be used as components for vector expressions.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx, y, z, t, px, py, pz, eta, tau = sympy.symbols(\"x y z t px py pz eta tau\", real=True)\n```\n\n----------------------------------------\n\nTITLE: 2D Vector Addition After Behavior Update\nDESCRIPTION: Shows 2D vector addition after updating behaviors.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nvec.to_2D() + vec.to_2D()\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbolic 2D Vector\nDESCRIPTION: Creates a two-dimensional vector with symbolic x and y components using VectorSympy2D class.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvector.VectorSympy2D(x=x, y=y)\n```\n\n----------------------------------------\n\nTITLE: Comparing Rho to Absolute Value\nDESCRIPTION: Creates a SymPy equation demonstrating the equivalence between the rho property and the absolute value of a 2D vector.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsympy.Eq(v.rho, abs(v))\n```\n\n----------------------------------------\n\nTITLE: Constructing Symbolic Vectors using Vector's SymPy Constructors\nDESCRIPTION: This snippet shows how to use Vector's SymPy constructors to create symbolic vectors in different dimensions. It demonstrates creating a 2D vector, 3D momentum vector, and 4D vector using the symbolic components defined earlier.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_sympy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> vector.VectorSympy2D(x=x, y=y)\nVectorSympy2D(x=x, y=y)\n>>>\n>>> vector.MomentumSympy3D(px=px, py=py, pz=pz)\nMomentumSympy3D(px=px, py=py, pz=pz)\n>>>\n>>> vector.VectorSympy4D(x=x, y=y, eta=eta, tau=tau)\nvector.VectorSympy4D(x=x, y=y, eta=eta, tau=tau)\n```\n\n----------------------------------------\n\nTITLE: Performing a Lorentz Boost on a 4D Vector\nDESCRIPTION: Applies a Lorentz boost to a 4D vector using its own beta (velocity) vector as the boost direction and stores the result.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nboosted = v.boost(v.to_beta3())\nboosted\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbolic 4D Vector\nDESCRIPTION: Creates a four-dimensional vector with symbolic x, y, eta, and tau components using VectorSympy4D class.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvector.VectorSympy4D(x=x, y=y, eta=eta, tau=tau)\n```\n\n----------------------------------------\n\nTITLE: Random Polar Vector Generation\nDESCRIPTION: Creates array of 10000 polar 2D vectors with random distribution\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvector.array(\n    {\n        \"rho\": np.random.exponential(5, 10000),\n        \"phi\": np.random.uniform(-np.pi, np.pi, 10000),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing VectorObject3D Constructors in Python\nDESCRIPTION: ReStructuredText directive that generates documentation for the VectorObject3D class, showing its various constructors for creating 3D vectors using different coordinate systems.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_object.md#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.VectorObject3D\n    :members: from_rhophieta,from_rhophitheta,from_rhophiz,from_xyeta,from_xytheta,from_xyz\n```\n\n----------------------------------------\n\nTITLE: Referencing VectorObject2D Constructors in Python\nDESCRIPTION: ReStructuredText directive that generates documentation for the VectorObject2D class, displaying its specific constructors from_rhophi and from_xy.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_object.md#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.VectorObject2D\n    :members: from_rhophi,from_xy\n```\n\n----------------------------------------\n\nTITLE: Vector Addition\nDESCRIPTION: Demonstrates vector addition operation.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nvec + vec\n```\n\n----------------------------------------\n\nTITLE: Creating Custom LorentzVector with Division Method\nDESCRIPTION: Example of creating a custom LorentzVector class with a specialized divide method that uses the existing scale method.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@ak.mixin_class(behavior)\nclass LorentzVector(vector.backends.awkward.MomentumAwkward4D):\n    @ak.mixin_class_method(np.divide, {numbers.Number})\n    def divide(self, factor):\n        return self.scale(1 / factor)\n\n\n# required for transforming vectors\n```\n\n----------------------------------------\n\nTITLE: Referencing VectorObject4D Constructors in Python\nDESCRIPTION: ReStructuredText directive that generates documentation for the VectorObject4D class, showing its comprehensive list of constructors for creating 4D vectors with various coordinate systems and time components.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_object.md#2025-04-21_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.VectorObject4D\n    :members: from_rhophietat,from_rhophietatau,from_rhophithetat,from_rhophithetatau,from_rhophizt,from_rhophiztau,from_xyetat,from_xyetatau,from_xythetat,from_xythetatau,from_xyzt,from_xyztau\n```\n\n----------------------------------------\n\nTITLE: Numba-Compiled Array Mass Computation\nDESCRIPTION: The array-based mass computation function with Numba's njit decorator to enable just-in-time compilation for improved performance when processing large arrays.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@nb.njit\ndef compute_masses(array):\n    out = np.empty(len(array), np.float64)\n    for i, event in enumerate(array):\n        total = vector.obj(px=0.0, py=0.0, pz=0.0, E=0.0)\n        for vec in event:\n            total = total + vec\n        out[i] = total.mass\n    return out\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Class Projections\nDESCRIPTION: Sets up projection class relationships for LorentzVectorArray, defining 2D, 3D, and 4D projection classes along with momentum class.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nLorentzVectorArray.ProjectionClass2D = TwoVectorArray\nLorentzVectorArray.ProjectionClass3D = ThreeVectorArray\nLorentzVectorArray.ProjectionClass4D = LorentzVectorArray\nLorentzVectorArray.MomentumClass = LorentzVectorArray\n```\n\n----------------------------------------\n\nTITLE: Accessing Vector Properties in Awkward Arrays\nDESCRIPTION: Demonstrating how to access vector properties like rho and phi coordinates in an Awkward Array of vectors.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narr.rho\n```\n\nLANGUAGE: python\nCODE:\n```\narr.phi\n```\n\n----------------------------------------\n\nTITLE: Importing VectorNumpy2D Class\nDESCRIPTION: Shows the autoclass directive for the VectorNumpy2D class, which is used for 2D vector operations. This class can be used with np.ndarray.view to cast structured arrays with appropriate fields.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_numpy.md#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.VectorNumpy2D\n```\n\n----------------------------------------\n\nTITLE: Using Vector Methods with Custom Vector Types\nDESCRIPTION: Demonstrating how to use Vector methods with custom vector types, such as the add method for vector addition.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nvec.add(vec)\n```\n\n----------------------------------------\n\nTITLE: Referencing MomentumObject2D Constructors in Python\nDESCRIPTION: ReStructuredText directive that generates documentation for the MomentumObject2D class, displaying its specific constructors from_rhophi and from_xy for momentum vectors.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_object.md#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.MomentumObject2D\n    :members: from_rhophi,from_xy\n```\n\n----------------------------------------\n\nTITLE: Importing VectorNumpy4D Class\nDESCRIPTION: Shows the autoclass directive for the VectorNumpy4D class, which is used for 4D vector operations. This class can be used with np.ndarray.view to cast structured arrays with appropriate fields.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_numpy.md#2025-04-21_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.VectorNumpy4D\n```\n\n----------------------------------------\n\nTITLE: 2D Vector Addition\nDESCRIPTION: Performs addition of 2D vector projections.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nvec.to_2D() + vec.to_2D()\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Arrays using Structured Arrays\nDESCRIPTION: Creates a vector array using structured array dtype with named coordinates\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvector.array(\n    [(1.1, 2.2), (3.3, 4.4), (5.5, 6.6)], dtype=[(\"x\", np.float32), (\"y\", np.float64)]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Arrays using Dictionary Format\nDESCRIPTION: Alternative method to create vector arrays using a Pandas-style dictionary format\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvector.array(\n    {\"x\": np.array([1.1, 3.3, 5.5], np.float32), \"y\": np.array([2.2, 4.4, 6.6])}\n)\n```\n\n----------------------------------------\n\nTITLE: Importing MomentumNumpy4D Class\nDESCRIPTION: Shows the autoclass directive for the MomentumNumpy4D class, which is specialized for 4D momentum vectors. This class can be used with np.ndarray.view to cast structured arrays with appropriate fields.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_numpy.md#2025-04-21_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.MomentumNumpy4D\n```\n\n----------------------------------------\n\nTITLE: Vector Addition After Behavior Update\nDESCRIPTION: Demonstrates vector addition after updating behaviors.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nvec + vec\n```\n\n----------------------------------------\n\nTITLE: Creating SymPy Symbols for Vector Components in Python\nDESCRIPTION: This snippet demonstrates how to create symbols for vector components using SymPy, ensuring they are real-valued. These symbols will be used as components for constructing symbolic vectors.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_sympy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import sympy\n>>> x, y, z, t, px, py, pz, eta, tau = sympy.symbols(\n...     \"x y z t px py pz eta tau\", real=True\n... )\n```\n\n----------------------------------------\n\nTITLE: Accessing the Rho Property of a 2D Vector\nDESCRIPTION: Retrieves the symbolic expression for the rho property (radial distance) of a 2D vector.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nv.rho\n```\n\n----------------------------------------\n\nTITLE: Viewing Array as Vector Type\nDESCRIPTION: Converts structured array to vector type using view method\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narr.view(vector.VectorNumpy2D)\n```\n\n----------------------------------------\n\nTITLE: Referencing MomentumObject4D Constructors in Python\nDESCRIPTION: ReStructuredText directive that generates documentation for the MomentumObject4D class, showing its comprehensive list of constructors for creating 4D momentum vectors with various coordinate systems and time/energy components.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_object.md#2025-04-21_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.MomentumObject4D\n    :members: from_rhophietat,from_rhophietatau,from_rhophithetat,from_rhophithetatau,from_rhophizt,from_rhophiztau,from_xyetat,from_xyetatau,from_xythetat,from_xythetatau,from_xyzt,from_xyztau\n```\n\n----------------------------------------\n\nTITLE: Importing Vector and Awkward Array\nDESCRIPTION: Basic import statements for Vector and Awkward Array libraries which are prerequisites for working with vectors in awkward arrays.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vector\nimport awkward as ak\n```\n\n----------------------------------------\n\nTITLE: Referencing General Vector Constructor in Python\nDESCRIPTION: ReStructuredText directive that displays the documentation for the vector.obj function, which is the general constructor for creating vector objects.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_object.md#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: vector.obj\n```\n\n----------------------------------------\n\nTITLE: Importing MomentumNumpy2D Class\nDESCRIPTION: Shows the autoclass directive for the MomentumNumpy2D class, which is specialized for 2D momentum vectors. This class can be used with np.ndarray.view to cast structured arrays with appropriate fields.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_numpy.md#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.MomentumNumpy2D\n```\n\n----------------------------------------\n\nTITLE: Importing VectorNumpy3D Class\nDESCRIPTION: Shows the autoclass directive for the VectorNumpy3D class, which is used for 3D vector operations. This class can be used with np.ndarray.view to cast structured arrays with appropriate fields.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_numpy.md#2025-04-21_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.VectorNumpy3D\n```\n\n----------------------------------------\n\nTITLE: Referencing MomentumObject3D Constructors in Python\nDESCRIPTION: ReStructuredText directive that generates documentation for the MomentumObject3D class, showing its various constructors for creating 3D momentum vectors using different coordinate systems.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_object.md#2025-04-21_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.MomentumObject3D\n    :members: from_rhophieta,from_rhophitheta,from_rhophiz,from_xyeta,from_xytheta,from_xyz\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Equivalent For-Loop Implementation\nDESCRIPTION: A for-loop implementation equivalent to the vectorized dot product computation, showing how broadcasting works behind the scenes.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(len(a)):\n    print(\"[\", end=\"\")\n\n    for j in range(len(b[i])):\n        out = a[i].dot(b[i, j])\n\n        print(out, end=\" \")\n\n    print(\"]\")\n```\n\n----------------------------------------\n\nTITLE: Importing MomentumNumpy3D Class\nDESCRIPTION: Shows the autoclass directive for the MomentumNumpy3D class, which is specialized for 3D momentum vectors. This class can be used with np.ndarray.view to cast structured arrays with appropriate fields.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/make_numpy.md#2025-04-21_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector.MomentumNumpy3D\n```\n\n----------------------------------------\n\nTITLE: Creating Larger Sample Arrays for Performance Testing\nDESCRIPTION: Creating larger arrays for benchmarking performance differences between vectorized and loop-based approaches.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\na = array_of_momentum3d(10000)\nb = array_of_lists_of_momentum3d(1.5, 10000)\n```\n\n----------------------------------------\n\nTITLE: Importing VectorProtocolPlanar class documentation for 2D vectors in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the VectorProtocolPlanar class. It includes all members, inherited members, and orders them by source order.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/vector2d.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: vector._methods.VectorProtocolPlanar\n    :members:\n    :inherited-members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Vector Like Operations - 3D\nDESCRIPTION: Creates a vector-like object with 3D coordinates.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nvec.like(vector.obj(x=1, y=2, z=3))\n```\n\n----------------------------------------\n\nTITLE: Sphinx Auto-documentation for MomentumProtocolSpatial Class in RST\nDESCRIPTION: Uses the eval-rst directive to render auto-generated documentation for the MomentumProtocolSpatial class from the vector._methods module. The directive includes all members and inherited members, ordered by source code appearance.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/momentum3d.md#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector._methods.MomentumProtocolSpatial\n    :members:\n    :inherited-members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Defining a 4D Vector Variable\nDESCRIPTION: Assigns a symbolic 4D vector to a variable for further operations, using x, y, z, and t symbolic components.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nv = vector.VectorSympy4D(x=x, y=y, z=z, t=t)\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Operations\nDESCRIPTION: Sets up binary operations for different vector types in the behavior dictionary.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n_binary_dispatch_cls = {\n    \"TwoVector\": TwoVector,\n    \"ThreeVector\": ThreeVector,\n    \"LorentzVector\": LorentzVector,\n}\n_rank = [TwoVector, ThreeVector, LorentzVector]\n\nfor lhs, lhs_to in _binary_dispatch_cls.items():\n    for rhs, rhs_to in _binary_dispatch_cls.items():\n        out_to = min(lhs_to, rhs_to, key=_rank.index)\n        behavior[(np.add, lhs, rhs)] = out_to.add\n        behavior[(np.subtract, lhs, rhs)] = out_to.subtract\n```\n\n----------------------------------------\n\nTITLE: Random Vector Array Generation\nDESCRIPTION: Creates random normal distributed array and demonstrates array viewing operations\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\narr = np.random.normal(0, 1, (10000, 3))\narr\n```\n\nLANGUAGE: python\nCODE:\n```\narr.view([(name, arr.dtype) for name in (\"x\", \"y\", \"z\")])\n```\n\nLANGUAGE: python\nCODE:\n```\narr.view([(name, arr.dtype) for name in (\"x\", \"y\", \"z\")]).view(vector.VectorNumpy3D)\n```\n\n----------------------------------------\n\nTITLE: Copying Vector Behaviors\nDESCRIPTION: Updates behavior dictionary by copying behaviors for new vector subclasses using utility function.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nbehavior.update(ak._util.copy_behaviors(\"Vector2D\", \"TwoVector\", behavior))\nbehavior.update(ak._util.copy_behaviors(\"Vector3D\", \"ThreeVector\", behavior))\nbehavior.update(ak._util.copy_behaviors(\"Momentum4D\", \"LorentzVector\", behavior))\n```\n\n----------------------------------------\n\nTITLE: Numba-Compiled Vector Mass Computation\nDESCRIPTION: The same mass computation function now decorated with Numba's njit decorator to enable just-in-time compilation for potentially improved performance.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@nb.njit\ndef compute_mass(v1, v2):\n    return (v1 + v2).mass\n```\n\n----------------------------------------\n\nTITLE: Accessing the Tau Property of a 4D Vector\nDESCRIPTION: Retrieves the symbolic expression for the tau property (proper time) of a 4D vector.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nv.tau\n```\n\n----------------------------------------\n\nTITLE: Array-based Vector Mass Computation\nDESCRIPTION: Defines a function that computes masses for an array of vector events. For each event, it sums all the vectors and calculates the mass of the result, demonstrating batch processing.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef compute_masses(array):\n    out = np.empty(len(array), np.float64)\n    for i, event in enumerate(array):\n        total = vector.obj(px=0.0, py=0.0, pz=0.0, E=0.0)\n        for vec in event:\n            total = total + vec\n        out[i] = total.mass\n    return out\n```\n\n----------------------------------------\n\nTITLE: Creating Structured Array for Vector Viewing\nDESCRIPTION: Creates a NumPy structured array that can be viewed as vectors\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\narr = np.array(\n    [(1.1, 2.2), (3.3, 4.4), (5.5, 6.6)], dtype=[(\"x\", np.float32), (\"y\", np.float64)]\n)\n```\n\n----------------------------------------\n\nTITLE: Substituting Numerical Values into Symbolic Expressions\nDESCRIPTION: Replaces symbolic variables with concrete numerical values to evaluate a vector component expression.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nboosted.t.subs({x: 3, y: 2, z: 1, t: 10})\n```\n\n----------------------------------------\n\nTITLE: Creating a Vector Array for Batch Processing\nDESCRIPTION: Generates a sample array of vector objects with random values to demonstrate batch processing. This creates a nested structure of vectors representing events with varying numbers of particles.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# This is still not a large number. You want millions.\narray = vector.Array(\n    [\n        [\n            dict(\n                {x: np.random.normal(0, 1) for x in (\"px\", \"py\", \"pz\")},\n                E=np.random.normal(10, 1),\n            )\n            for inner in range(np.random.poisson(1.5))\n        ]\n        for outer in range(50)\n    ]\n)\narray\n```\n\n----------------------------------------\n\nTITLE: Multidimensional Vector Array Creation\nDESCRIPTION: Creates and views multidimensional arrays of vectors\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\narr = np.random.normal(0, 1, (100, 100, 3))\narr.view([(_, float) for _ in \"xyz\"]).view(vector.VectorNumpy3D)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Time Component After Boost\nDESCRIPTION: Retrieves the symbolic expression for the time component of a 4D vector after applying a Lorentz boost.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nboosted.t\n```\n\n----------------------------------------\n\nTITLE: Basic Vector Mass Computation Function\nDESCRIPTION: Defines a simple function that computes the mass of the sum of two vector objects. This uncompiled function will be used as a baseline for performance comparison.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef compute_mass(v1, v2):\n    return (v1 + v2).mass\n```\n\n----------------------------------------\n\nTITLE: Subclassing Awkward-Vector Behaviors\nDESCRIPTION: Demonstrating how to create custom vector classes by extending Vector's existing behaviors with new functionality.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbehavior = vector.backends.awkward.behavior\n\n\n@ak.mixin_class(behavior)\nclass TwoVector(vector.backends.awkward.MomentumAwkward2D):\n    pass\n\n\n@ak.mixin_class(behavior)\nclass ThreeVector(vector.backends.awkward.MomentumAwkward3D):\n    pass\n\n\n# required for transforming vectors\n# the class names must always end with \"Array\"\nTwoVectorArray.ProjectionClass2D = TwoVectorArray  # noqa: F821\nTwoVectorArray.ProjectionClass3D = ThreeVectorArray  # noqa: F821\nTwoVectorArray.MomentumClass = TwoVectorArray  # noqa: F821\n\nThreeVectorArray.ProjectionClass2D = TwoVectorArray  # noqa: F821\nThreeVectorArray.ProjectionClass3D = ThreeVectorArray  # noqa: F821\nThreeVectorArray.MomentumClass = ThreeVectorArray  # noqa: F821\n```\n\n----------------------------------------\n\nTITLE: Timing the Uncompiled Vector Function\nDESCRIPTION: Uses the IPython timing magic to measure the performance of the uncompiled function with two vector objects as input.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%timeit compute_mass(vector.obj(px=1, py=2, pz=3, E=4), vector.obj(px=-1, py=-2, pz=-3, E=4))\n```\n\n----------------------------------------\n\nTITLE: Simplifying a Symbolic Expression\nDESCRIPTION: Uses SymPy's simplify method to reduce the complexity of the symbolic expression for the time component.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nboosted.t.simplify()\n```\n\n----------------------------------------\n\nTITLE: Timing the First Run of Numba-Compiled Function\nDESCRIPTION: Measures the time for the first run of the Numba-compiled function, which includes compilation time, showing the initial overhead of JIT compilation.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n%timeit -n 1 compute_mass(vector.obj(px=1, py=2, pz=3, E=4), vector.obj(px=-1, py=-2, pz=-3, E=4))\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Vectorized Implementation\nDESCRIPTION: Performance measurement of the vectorized implementation for dot product calculation, showing significant speedup.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n\nout = np.sum(a.dot(b), axis=1)\n```\n\n----------------------------------------\n\nTITLE: Importing Vector Library in Python\nDESCRIPTION: Demonstrates how to import the Vector library after installation.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/object.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vector\n```\n\n----------------------------------------\n\nTITLE: Timing the Uncompiled Array Function\nDESCRIPTION: Uses the IPython timing magic to measure the performance of the uncompiled mass computation function when processing the entire array of vectors.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n%timeit compute_masses(array)\n```\n\n----------------------------------------\n\nTITLE: Registering Vector Behaviors in Awkward Array\nDESCRIPTION: Using vector.register_awkward() to make Vector behaviors globally available to all Awkward arrays with appropriate record names and field names.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport awkward as ak\nimport vector\nvector.register_awkward()\n```\n\n----------------------------------------\n\nTITLE: Benchmarking For-Loop Implementation\nDESCRIPTION: Performance measurement of the for-loop implementation for dot product calculation.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n%%timeit -n1 -r1\n\nout = np.zeros(10000)\n\nfor i in range(len(a)):\n    for j in range(len(b[i])):\n        out[i] += a[i].dot(b[i, j])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies for Vector Examples\nDESCRIPTION: Basic setup for the example code, importing necessary libraries and registering Vector behaviors.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport awkward as ak\nimport vector\n\nvector.register_awkward()\n```\n\n----------------------------------------\n\nTITLE: Converting Symbolic Expressions to Fortran Code\nDESCRIPTION: Imports SymPy's Fortran code generator and uses it to convert a simplified symbolic expression to Fortran code.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport sympy.printing.fortran\n\nprint(sympy.printing.fortran.fcode(boosted.t.simplify()))\n```\n\n----------------------------------------\n\nTITLE: Vector Like Operations - 2D\nDESCRIPTION: Creates a vector-like object with 2D coordinates.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nvec.like(vector.obj(x=1, y=2))\n```\n\n----------------------------------------\n\nTITLE: Importing Vector Library Dependencies\nDESCRIPTION: Basic imports required for working with Vector library and NumPy arrays\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numpy.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vector\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Importing Vector and Numba Libraries\nDESCRIPTION: Sets up the required libraries for using Vector with Numba compilation. Imports the vector library along with Numba and NumPy, which are prerequisites for the examples that follow.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vector\nimport numba as nb\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Timing Subsequent Runs of Compiled Function\nDESCRIPTION: Measures the time for subsequent runs of the Numba-compiled function after the initial compilation, to compare with the uncompiled version.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%timeit compute_mass(vector.obj(px=1, py=2, pz=3, E=4), vector.obj(px=-1, py=-2, pz=-3, E=4))\n```\n\n----------------------------------------\n\nTITLE: Timing the First Run of Compiled Array Function\nDESCRIPTION: Measures the time for the first run of the Numba-compiled array function, which includes compilation time, showing the initial overhead of JIT compilation for array processing.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n%timeit -n 1 compute_masses(array)\n```\n\n----------------------------------------\n\nTITLE: Documenting VectorProtocolLorentz Class with RST\nDESCRIPTION: ReStructuredText directive that auto-generates documentation for the VectorProtocolLorentz class from the vector._methods module, including all members and inherited members ordered by source.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/vector4d.md#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector._methods.VectorProtocolLorentz\n    :members:\n    :inherited-members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Timing Subsequent Runs of Compiled Array Function\nDESCRIPTION: Measures the time for subsequent runs of the Numba-compiled array function after initial compilation, demonstrating the performance advantage when processing larger arrays.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/numba.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n%timeit compute_masses(array)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive for VectorProtocol Documentation\nDESCRIPTION: An eval-rst directive that generates API documentation for the VectorProtocol class from the vector._methods module. The directive includes all members and inherited members, orders them by source, and excludes specific members related to internal implementation details.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/common.md#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: vector._methods.VectorProtocol\n    :members:\n    :inherited-members:\n    :member-order: bysource\n    :exclude-members: lib,ProjectionClass2D,ProjectionClass3D,ProjectionClass4D,GenericClass,MomentumClass\n```\n\n----------------------------------------\n\nTITLE: Importing Numbers Module for Custom Vector Class\nDESCRIPTION: Importing the numbers module to use in type checking for custom vector operations.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport numbers\n```\n\n----------------------------------------\n\nTITLE: Including VectorProtocolSpatial Class Documentation using eval-rst\nDESCRIPTION: Sphinx directive to automatically include documentation for the VectorProtocolSpatial class from the vector._methods module. The directive includes all members, inherited members, and preserves the original source order.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/vector3d.md#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector._methods.VectorProtocolSpatial\n    :members:\n    :inherited-members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Calculating squared norm for Lorentz vectors\nDESCRIPTION: Mathematical formula for calculating the squared norm (or invariant mass squared) of a Lorentz vector using the Minkowski metric.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\np^\\mu p_\\mu = g_{\\mu\\nu} p^\\mu p^\\nu = E^2 - p_x^2 - p_y^2 - p_z^2\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for MomentumProtocolLorentz Class with Sphinx RST\nDESCRIPTION: This code snippet uses the Sphinx eval-rst directive to automatically generate API documentation for the MomentumProtocolLorentz class from the vector._methods module. It includes all members and inherited members, preserving the original source order.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/momentum4d.md#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector._methods.MomentumProtocolLorentz\n    :members:\n    :inherited-members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Defining Minkowski metric for Lorentz vectors\nDESCRIPTION: Mathematical representation of the Minkowski metric used in the Vector library for Lorentz vectors, following the (-,-,-,+) convention.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\ng_{\\mu\\nu} = \\text{diag}(-1, -1, -1, +1)\n```\n\n----------------------------------------\n\nTITLE: Displaying autoclass documentation for MomentumProtocolPlanar in RST\nDESCRIPTION: Sphinx directive that renders the documentation for the MomentumProtocolPlanar class, including all members, inherited members, and orders them by source location.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/momentum2d.md#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: vector._methods.MomentumProtocolPlanar\n    :members:\n    :inherited-members:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: Installing Vector library using pip\nDESCRIPTION: Command to install the Vector library using pip package manager.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vector\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Package via pip\nDESCRIPTION: Command to install the Vector package using pip package manager.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vector\n```\n\n----------------------------------------\n\nTITLE: Viewing Sample Vector Arrays\nDESCRIPTION: Displaying the sample arrays created for demonstration purposes.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/awkward.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\na\n```\n\nLANGUAGE: python\nCODE:\n```\nb\n```\n\n----------------------------------------\n\nTITLE: Installing Vector library from source\nDESCRIPTION: Commands to clone the Vector repository from GitHub and install it in editable mode for development purposes.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/scikit-hep/vector.git\ncd vector\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Vector Package from Source\nDESCRIPTION: Commands to clone the Vector repository and install it in development mode for contributing to the project.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/scikit-hep/vector.git\ncd vector\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Importing Vector and SymPy Libraries\nDESCRIPTION: Basic import statements required to use Vector with SymPy for symbolic vector operations.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/docs/src/sympy.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vector\nimport sympy\n```\n\n----------------------------------------\n\nTITLE: Git Format Placeholders\nDESCRIPTION: Git format placeholders for expanding commit information like hash, date, tags and ref names. Used for git attribute substitution.\nSOURCE: https://github.com/scikit-hep/vector/blob/main/.git_archival.txt#2025-04-21_snippet_0\n\nLANGUAGE: git\nCODE:\n```\nnode: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true,match=*[0-9]*)$\nref-names: $Format:%D$\n```"
  }
]