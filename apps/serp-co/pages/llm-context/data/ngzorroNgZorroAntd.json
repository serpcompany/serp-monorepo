[
  {
    "owner": "ng-zorro",
    "repo": "ng-zorro-antd",
    "content": "TITLE: Working with Angular Localize - ng-zorro-antd (TypeScript)\nDESCRIPTION: This snippet demonstrates how to synchronize ng-zorro-antd's localization with Angular's using `@angular/localize` and `LOCALE_ID`. It imports and registers locale data, configures the `NZ_I18N` token based on the current `LOCALE_ID`, and provides the appropriate language pack. It requires `@angular/core`, `@angular/common`, and `ng-zorro-antd/i18n`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** import all locales data **/\nimport { LOCALE_ID } from '@angular/core';\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nimport zh from '@angular/common/locales/zh';\nregisterLocaleData(en);\nregisterLocaleData(zh);\n\n/** config ng-zorro-antd i18n **/\nimport { en_US, NZ_I18N, fr_FR } from 'ng-zorro-antd/i18n';\n\n/** switch ng-zorro-antd locales via LOCALE_ID **/\nexport const appConfig: ApplicationConfig = {\n  providers: [{\n    provide: NZ_I18N,\n    useFactory: () => {\n      const localId = inject(LOCALE_ID);\n      switch (localId) {\n        case 'en':\n          return en_US;\n        /** keep the same with angular.json/i18n/locales configuration **/\n        case 'fr':\n          return fr_FR;\n        default:\n          return en_US;\n      }\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ng-zorro-antd with Angular CLI\nDESCRIPTION: This snippet demonstrates how to create a new Angular project, navigate to it, and add the ng-zorro-antd library using the Angular CLI. It leverages the `ng new`, `cd`, and `ng add` commands to streamline the installation process.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/README-zh_CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ng new PROJECT_NAME\n$ cd PROJECT_NAME\n$ ng add ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Adding NG-ZORRO to Project - Bash\nDESCRIPTION: Adds NG-ZORRO (Ant Design of Angular) to an existing Angular project. This command initializes the project's configuration, imports necessary files, and installs ng-zorro-antd dependencies. Requires you to be inside your Angular project directory.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd PROJECT-NAME\n$ ng add ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Linking ng-zorro-antd locale to Angular app localization\nDESCRIPTION: This snippet shows how to automatically switch the ng-zorro-antd language based on Angular's [LOCALE_ID]. It imports necessary locale data, defines an `NZ_I18N` provider using `useFactory`, and injects the `LOCALE_ID` to determine the appropriate language pack (`en_US` or `zh_CN`).  The Angular application must have the `LOCALE_ID` configured. Requires `@angular/core`, `@angular/common`, and `ng-zorro-antd/i18n` dependencies. Assumes the Angular application is already configured with the appropriate locale data.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** 导入需要使用的语言包 **/\nimport { LOCALE_ID } from '@angular/core';\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nimport zh from '@angular/common/locales/zh';\nregisterLocaleData(en);\nregisterLocaleData(zh);\n\n/** 配置 ng-zorro-antd 国际化 **/\nimport { en_US, NZ_I18N, zh_CN } from 'ng-zorro-antd/i18n';\n\n/** 根据 LOCALE_ID 自动切换 ng-zorro-antd 语言 **/\nexport const appConfig: ApplicationConfig = {\n  providers   : [{\n    provide: NZ_I18N,\n    useFactory: () => {\n      const localId = inject(LOCALE_ID);\n      switch (localId) {\n        case 'en':\n          return en_US;\n        /** 与 angular.json i18n/locales 配置一致 **/\n        case 'zh':\n          return zh_CN;\n        default:\n          return en_US;\n      }\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Modal Buttons with ModalButtonOptions in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure custom buttons in the footer of an ng-zorro-antd modal using the `ModalButtonOptions` type. It showcases various properties like `label`, `type`, `danger`, `show`, `loading`, `disabled`, and `onClick` to customize the button's appearance and behavior. The `this` keyword in the methods refers to the configuration object itself. The contentComponentInstance parameter allows access to component instances when nzContent is a component class.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/modal/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnzFooter: [{\n  label: string; // Button text\n  type? : string; // Types\n  danger? : boolean; // Whether danger\n  shape? : string; // Shape\n  ghost? : boolean; // Whether ghost\n  size? : string; // Size\n  autoLoading? : boolean; // The default is true. If true, this button will automatically be set to the loading state when onClick returns a promise.\n\n  // Tip: The `this` of below methods points to the configuration object itself. When nzContent is a component class, the contentComponentInstance parameter passed in by the method below is an instance of the component class\n  // Whether to show this button\n  show? : boolean | ((this: ModalButtonOptions, contentComponentInstance?: object) => boolean);\n  // Whether to display loading\n  loading? : boolean | ((this: ModalButtonOptions, contentComponentInstance?: object) => boolean);\n  // Is it disabled\n  disabled? : boolean | ((this: ModalButtonOptions, contentComponentInstance?: object) => boolean);\n  // Callback of clicking\n  onClick? (this: ModalButtonOptions, contentComponentInstance?: object): void | Promise<void> | any;\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Angular Project - Bash\nDESCRIPTION: Creates a new Angular project with the specified name using the Angular CLI. The CLI will generate a basic project structure and install necessary dependencies. Requires Angular CLI to be installed globally.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ng new PROJECT-NAME\n```\n\n----------------------------------------\n\nTITLE: Adding ng-zorro-antd with ng add\nDESCRIPTION: This command adds ng-zorro-antd and its dependencies to an Angular project. It also automates configuration tasks such as importing necessary modules, setting up internationalization, and incorporating custom themes. Available options include setting the locale (--locale), enabling a theme (--theme), and skipping package.json modification (--skipPackageJson).\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/schematics/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ng add ng-zorro-antd [--locale=zh-CN] [--theme] [--skipPackageJson]\n```\n\n----------------------------------------\n\nTITLE: Webpack Less Loader Configuration\nDESCRIPTION: Configures the less-loader in webpack to override theme variables using pre-defined dark and compact themes. This involves using `modifyVars` to set the desired variables.  It requires the `ng-zorro-antd/dark-theme` and `ng-zorro-antd/compact-theme` modules.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst darkThemeVars = require('ng-zorro-antd/dark-theme');\nconst compactThemeVars = require('ng-zorro-antd/compact-theme');\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test   : /\\.less$/,\n        loader: 'less-loader',\n        options: {\n          modifyVars: {\n            'hack': `true;@import \"${require.resolve('ng-zorro-antd/style/color/colorPalette.less')}\";`,\n            ...darkThemeVars,\n            ...compactThemeVars\n          },\n          javascriptEnabled: true\n        }\n      }\n    ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Angular JSON Styles Configuration\nDESCRIPTION: Configures the styles array in angular.json to include the NG-ZORRO CSS file. This allows the NG-ZORRO styles to be applied to the Angular application. This is a manual alternative to using schematics.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"build\": {\n    \"options\": {\n      \"styles\": [\n        \"./node_modules/ng-zorro-antd/ng-zorro-antd.min.css\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Implementation with Array Data Source - HTML\nDESCRIPTION: This code snippet demonstrates how to implement the Autocomplete component using an array as the data source. It binds the input field to a model and connects it to the autocomplete component. The nzDataSource property of the nz-autocomplete component is set to an array of strings, providing the autocomplete options.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/auto-complete/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input nz-input [(ngModel)]=\"value\" [nzAutocomplete]=\"auto\">\n<nz-autocomplete [nzDataSource]=\"['12345', '23456', '34567']\" #auto></nz-autocomplete>\n```\n\n----------------------------------------\n\nTITLE: LESS Theme Entry File\nDESCRIPTION: This LESS snippet shows a theme entry file (`src/styles/dark.less`) that imports the main NG-ZORRO LESS file and a theme-specific LESS file (`./themes/dark`).\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_13\n\nLANGUAGE: less\nCODE:\n```\n@import '../../node_modules/ng-zorro-antd/ng-zorro-antd';\n@import \"./themes/dark\";\n```\n\n----------------------------------------\n\nTITLE: Adding and Deleting Data Immutably in ng-zorro-antd (TypeScript)\nDESCRIPTION: Demonstrates how to add and delete data immutably in an Angular component using TypeScript when working with ng-zorro-antd components.  This is important because ng-zorro-antd components use OnPush change detection, which requires immutable data updates to trigger change detection correctly. The code snippets show the use of the spread operator (...) and the filter method to create new arrays instead of modifying the existing one. It uses a basic object with key, name, age, and address properties.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/table/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 增加数据\nthis.dataSet = [\n  ...this.dataSet,\n  {\n    key: `${this.i}`,\n    name: `Edward King ${this.i}`,\n    age: '32',\n    address: `London, Park Lane no. ${this.i}`\n  }\n];\n// 删除数据\nthis.dataSet = this.dataSet.filter(d => d.key !== i);\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular.json for ng-zorro-antd\nDESCRIPTION: This diff snippet illustrates the necessary modifications to the `angular.json` file for including the required styles and SVG icon assets from ng-zorro-antd. This involves adding a glob pattern to the assets array and including the ng-zorro-antd.min.css file in the styles array. It is required to properly render the components.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/README-zh_CN.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"assets\": [\n+   {\n+     \"glob\": \"**/*\",\n+     \"input\": \"./node_modules/@ant-design/icons-angular/src/inline-svg/\",\n+     \"output\": \"/assets/\"\n+   }\n  ],\n  \"styles\": [\n+   \"node_modules/ng-zorro-antd/ng-zorro-antd.min.css\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Structure - HTML\nDESCRIPTION: This HTML snippet demonstrates the basic structure of an ng-zorro layout, including header, sider (left and right), content, and footer components. It shows how to nest these components within the nz-layout component.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/layout/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-layout>\n  <nz-header>header</nz-header>\n  <nz-layout>\n    <nz-sider>left sidebar</nz-sider>\n    <nz-content>main content</nz-content>\n    <nz-sider>right sidebar</nz-sider>\n  </nz-layout>\n  <nz-footer>footer</nz-footer>\n</nz-layout>\n```\n\n----------------------------------------\n\nTITLE: Angular JSON Style Preprocessor Options\nDESCRIPTION: Configures the `stylePreprocessorOptions` in `angular.json` to include a path to a mixin file. This allows importing `.themeMixin(@rules)` definitions from anywhere in the project without relative paths. This simplifies theme management and dynamic switching.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"stylePreprocessorOptions\": {\n    \"includePaths\": [\n      \"src/path-to-mixin\"\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Structure with ng-zorro\nDESCRIPTION: This snippet demonstrates the basic structure of a form using ng-zorro components. It includes an `nz-form` element, an `nz-form-item` to group form elements, an `nz-form-label` for the label, and an `nz-form-control` wrapping an input field.  It shows how to use `nzSpan` for layout control within the grid system. The form is based on Angular Forms and utilizes reactive or template-driven forms.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/form/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form nz-form>\n  <nz-form-item>\n    <nz-form-label [nzSpan]=\"6\" nzFor=\"email\">E-mail</nz-form-label>\n    <nz-form-control [nzSpan]=\"14\">\n      <input nz-input name=\"email\" type=\"email\" id=\"email\" />\n    </nz-form-control>\n  </nz-form-item>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Structure HTML\nDESCRIPTION: This HTML snippet demonstrates the basic structure of an ng-zorro form. It includes an nz-form element, an nz-form-item, an nz-form-label, and an nz-form-control. The input field within the control is bound to the 'email' property.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/form/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<form nz-form>\n  <nz-form-item>\n    <nz-form-label [nzSpan]=\"6\" nzFor=\"email\">E-mail</nz-form-label>\n    <nz-form-control [nzSpan]=\"14\">\n      <input nz-input name=\"email\" type=\"email\" id=\"email\" />\n    </nz-form-control>\n  </nz-form-item>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Overriding Internationalization Configuration - ng-zorro-antd (TypeScript)\nDESCRIPTION: This snippet demonstrates how to override the default internationalization configuration in ng-zorro-antd. It creates a custom language pack that extends an existing one (e.g., `en_US`) with custom translations.  In this example, the `items_per_page` string is overridden in the Pagination component.  It requires `ng-zorro-antd/i18n`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { en_US, provideNzI18n } from 'ng-zorro-antd/i18n';\n\nconst customLanguagePack = {\n  en_US,\n  ...{\n    Pagination: {\n      items_per_page: \"per page\"\n    }\n  }\n}\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzI18n(customLanguagePack)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Import NG-ZORRO CSS in style.css\nDESCRIPTION: Imports the NG-ZORRO CSS file in the `style.css` file. This method also includes all component styles in the application.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@import \"~ng-zorro-antd/ng-zorro-antd.min.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing Base and Component Styles in style.css - CSS\nDESCRIPTION: Imports base styles and a specific component's styles (button) into `style.css`. This allows for selectively including only the styles needed for specific components, potentially reducing CSS file size.  Base styles must be imported first.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@import \"~ng-zorro-antd/style/index.min.css\"; /* Import base styles */\n@import \"~ng-zorro-antd/button/style/index.min.css\";  /* Import one component's styles */\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Title using nzModalTitle in HTML\nDESCRIPTION: This HTML snippet shows how to customize the title of an ng-zorro-antd modal using the `nzModalTitle` directive.  You can use either a `div` or an `ng-template` element with the `*nzModalTitle` or `[nzModalTitle]` attribute to define the custom title content.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/modal/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div *nzModalTitle> Custom Modal Title</div>\n\n<!-- or -->\n\n<ng-template [nzModalTitle]> Custom Modal Title</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Configuration with provideNzConfig - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the global configuration for ng-zorro-antd components using the `provideNzConfig` function.  It sets default configurations for the `message` and `notification` components, specifically setting `nzTop` properties.  The configuration is then provided within the application configuration.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfig, provideNzConfig } from 'ng-zorro-antd/core/config';\n\nconst ngZorroConfig: NzConfig = {\n  message: { nzTop: 120 },\n  notification: { nzTop: 240 }\n};\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzConfig(ngZorroConfig)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Table Implementation with Ng-Zorro\nDESCRIPTION: This snippet demonstrates a basic implementation of the Ng-Zorro table component using Angular templates. It binds data to the table, iterates through the dataset using `*ngFor`, and displays the data in table rows and columns. The `nzData` input property binds the data set to the table.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/table/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-table #basicTable [nzData]=\"dataSet\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n      <th>Address</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of basicTable.data\">\n      <td>{{data.name}}</td>\n      <td>{{data.age}}</td>\n      <td>{{data.address}}</td>\n      <td>\n        <a>Action 一 {{data.name}}</a>\n        <nz-divider nzType=\"vertical\"></nz-divider>\n        <a>Delete</a>\n      </td>\n    </tr>\n  </tbody>\n</nz-table>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Theme Switching (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to synchronize theme switching by removing unused theme styles and dynamically loading the new theme's CSS file. It uses `loadCss` to load the CSS file, and ensures that the `className` switching (adding the new theme class to the `documentElement`) waits until the CSS file is fully loaded. It manages adding and removing theme classes and link elements from the document head.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nprivate removeUnusedTheme(theme: ThemeType): void {\n  document.documentElement.classList.remove(theme);\n  const removedThemeStyle = document.getElementById(theme);\n  if (removedThemeStyle) {\n    document.head.removeChild(removedThemeStyle);\n  }\n}\n\nloadTheme(firstLoad = true): Promise<Event> {\n  const theme = this.currentTheme;\n  if (firstLoad) {\n    document.documentElement.classList.add(theme);\n  }\n  this.loadCss(`${theme}.css`, theme).then(\n    e => {\n      if (!firstLoad) {\n        document.documentElement.classList.add(theme);\n      }\n      this.removeUnusedTheme(this.previousTheme);\n      resolve(e);\n    },\n    e => reject(e)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ng-zorro-antd with default locale\nDESCRIPTION: This snippet demonstrates how to configure the default locale for ng-zorro-antd using the `NZ_I18N` token. It imports the necessary modules, registers the Angular locale data, and provides the `en_US` locale through the `provideNzI18n` function in the application configuration. This sets the default language for the entire ng-zorro-antd application. Requires `@angular/common` and `ng-zorro-antd/i18n` dependencies.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** 导入需要使用的 Angular 语言包 **/\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nregisterLocaleData(en);\n\n/** 配置 ng-zorro-antd 国际化 **/\nimport { provideNzI18n, en_US } from 'ng-zorro-antd/i18n';\n\n/** 静态配置 **/\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    // ...\n    provideNzI18n(en_US)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Breadcrumb Data in Route - Typescript\nDESCRIPTION: Demonstrates how to configure breadcrumb data within a route definition using the `data` property.  The `breadcrumb` field within the `data` object specifies the display name for the breadcrumb item. This is used when the `nzAutoGenerate` property of the `<nz-breadcrumb>` component is set to `true`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  path: '/path',\n  component: SomeComponent,\n  data: {\n    breadcrumb: 'Display Name'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Usage - HTML\nDESCRIPTION: This code snippet demonstrates the basic usage of the `nz-select` component in ng-zorro-antd. It includes a single `nz-option` for selection. The `nzValue` attribute specifies the value of the option, and `nzLabel` specifies the label displayed to the user.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/select/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-select>\n  <nz-option nzValue=\"lucy\" nzLabel=\"Lucy\"></nz-option>\n</nz-select>\n```\n\n----------------------------------------\n\nTITLE: Basic Table Implementation with ng-zorro-antd in HTML\nDESCRIPTION: This snippet demonstrates a basic implementation of the `nz-table` component from ng-zorro-antd. It includes the table structure with header and body, and uses `*ngFor` to iterate over the `basicTable.data` array to populate the table rows. The table displays name, age, and address data, along with an action column.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/table/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-table #basicTable [nzData]=\"dataSet\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n      <th>Address</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let data of basicTable.data\">\n      <td>{{data.name}}</td>\n      <td>{{data.age}}</td>\n      <td>{{data.address}}</td>\n      <td>\n        <a>Action 一 {{data.name}}</a>\n        <nz-divider nzType=\"vertical\"></nz-divider>\n        <a>Delete</a>\n      </td>\n    </tr>\n  </tbody>\n</nz-table>\n```\n\n----------------------------------------\n\nTITLE: Import NG-ZORRO Button Module\nDESCRIPTION: Imports the `NzButtonModule` from NG-ZORRO in an Angular component. This allows the use of NG-ZORRO buttons within the component's template. The module is included in the `imports` array.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\n\n@Component({\n  imports: [\n    NzButtonModule\n  ]\n})\nexport class AppComponent {}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Data in Ng-Zorro Table (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to add and remove data in an Ng-Zorro table component while adhering to the OnPush change detection strategy. It uses the spread operator to create a new array when adding data and the `filter` method to create a new array when removing data. Mutating the original array directly will not trigger change detection.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/table/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// add data\nthis.dataSet = [\n  ...this.dataSet,\n  {\n    key: `${this.i}`,\n    name: `Edward King ${this.i}`,\n    age: '32',\n    address: `London, Park Lane no. ${this.i}`\n  }\n];\n// remove data\nthis.dataSet = this.dataSet.filter(d => d.key !== i);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Icon Loading Configuration\nDESCRIPTION: Explains how to configure `angular.json` for dynamic icon loading.  This avoids increasing the bundle size by fetching icons via HTTP requests when needed.  The configuration specifies the location of the SVG icons.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"glob\": \"**/*\",\n      \"input\": \"./node_modules/@ant-design/icons-angular/src/inline-svg/\",\n      \"output\": \"/assets/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Modal Footer with nzModalFooter in HTML\nDESCRIPTION: Demonstrates how to create a custom footer for a modal dialog using the `nzModalFooter` directive. This example includes custom buttons with event handlers and loading states. Content can be specified using a `div` or `ng-template`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/modal/doc/index.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div *nzModalFooter>\n  <button nz-button nzType=\"default\" (click)=\"handleCancel()\">Custom Callback</button>\n  <button nz-button nzType=\"primary\" (click)=\"handleOk()\" [nzLoading]=\"isConfirmLoading\">Custom Submit</button>\n</div>\n\n<!-- or -->\n\n<ng-template [nzModalFooter]>\n  <button nz-button nzType=\"default\" (click)=\"handleCancel()\">Custom Callback</button>\n  <button nz-button nzType=\"primary\" (click)=\"handleOk()\" [nzLoading]=\"isConfirmLoading\">Custom Submit</button>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Implementation - HTML\nDESCRIPTION: This snippet demonstrates the basic implementation of the ng-zorro pagination component in an Angular template. It sets the initial page index and the total number of items.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/pagination/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-pagination [nzPageIndex]=\"1\" [nzTotal]=\"50\"></nz-pagination>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Change Configurations (typescript)\nDESCRIPTION: This snippet demonstrates how to dynamically alter the global configuration of CSS variables using the `NzConfigService`. The `set` method is used to modify the primary color, and all component instances are responsive to this change.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme-variable.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfigService } from 'ng-zorro-antd/core/config';\n\n@Component({\n  selector: 'app-change-zorro-config'\n})\nexport class ChangeZorroConfigComponent {\n  private nzConfigService = inject(NzConfigService);\n\n  onChangeConfig() {\n    this.nzConfigService.set('theme', { primaryColor: '#1890ff' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Configuration for NG-ZORRO (TypeScript)\nDESCRIPTION: This snippet demonstrates how to provide global configuration for NG-ZORRO components using the `provideNzConfig` function. It defines default settings for the `message` and `notification` components. The `NzConfig` interface is used to define the configuration object.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfig, provideNzConfig } from 'ng-zorro-antd/core/config';\n\nconst ngZorroConfig: NzConfig = {\n  // 注意组件名称没有 nz 前缀\n  message: { nzTop: 120 },\n  notification: { nzTop: 240 }\n};\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzConfig(ngZorroConfig)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Styles in style.css - CSS\nDESCRIPTION: Imports the pre-built NG-ZORRO stylesheet into the `style.css` file using the `@import` rule.  This applies the default NG-ZORRO styles to all components in the application. The `~` prefix resolves to the `node_modules` directory.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@import \"~ng-zorro-antd/ng-zorro-antd.min.css\";\n```\n\n----------------------------------------\n\nTITLE: Using nz-cron-expression in Angular Forms\nDESCRIPTION: This snippet shows how to integrate the nz-cron-expression component with an Angular form using the `formControlName` attribute. This allows the cron expression value to be bound to a form control within the component's parent form. The component requires the ng-zorro-antd library to be installed and configured.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cron-expression/demo/use.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-cron-expression formControlName=\"cron\"></nz-cron-expression>\n```\n\n----------------------------------------\n\nTITLE: Import NG-ZORRO Less in style.less\nDESCRIPTION: Imports the NG-ZORRO Less file in the `style.less` file. This allows customizing the NG-ZORRO styles using Less variables.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_8\n\nLANGUAGE: less\nCODE:\n```\n@import \"~ng-zorro-antd/ng-zorro-antd.less\";\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Module in Component - TypeScript\nDESCRIPTION: Imports the `NzButtonModule` from NG-ZORRO into an Angular component and adds it to the component's `imports` array. This makes the NG-ZORRO button component available for use in the component's template.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\n\n@Component({\n  imports: [\n    NzButtonModule\n  ]\n})\nexport class AppComponent {}\n```\n\n----------------------------------------\n\nTITLE: Using nz-cascader Component - HTML\nDESCRIPTION: This snippet shows how to use the `nz-cascader` component in an Angular template with ng-zorro-antd. It binds the `nzOptions` input to an `options` property in the component and uses two-way data binding with `ngModel` to bind the selected values to a `values` property. This enables cascade selection functionality.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cascader/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-cascader [nzOptions]=\"options\" [(ngModel)]=\"values\"></nz-cascader>\n```\n\n----------------------------------------\n\nTITLE: Basic Steps Component Usage - HTML\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the `nz-steps` and `nz-step` components from the Ng-Zorro library. It defines a steps component with three individual steps, each having a title. No specific dependencies beyond Ng-Zorro are required.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/steps/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-steps>\n  <nz-step nzTitle=\"first step\"></nz-step>\n  <nz-step nzTitle=\"second step\"></nz-step>\n  <nz-step nzTitle=\"third step\"></nz-step>\n</nz-steps>\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Less in Angular.json\nDESCRIPTION: Includes the main NG-ZORRO Less file in the `styles` array of the `angular.json` file. This is necessary when using a custom webpack configuration to override Less variables.  The Less file path must be correct.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"styles\": [\n    \"node_modules/ng-zorro-antd/ng-zorro-antd.less\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating nz-color-picker with Angular Forms\nDESCRIPTION: This code snippet demonstrates how to bind the `nz-color-picker` component to an Angular form using `formControlName`. The `formControlName` attribute allows the color picker's value to be synchronized with a corresponding form control in the component's TypeScript code.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/color-picker/demo/use.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-color-picker formControlName=\"color\"></nz-color-picker>\n```\n\n----------------------------------------\n\nTITLE: Static Configuration with NzConfig (typescript)\nDESCRIPTION: This code shows how to provide default configurations for ng-zorro-antd components using the `NzConfig` interface and the `NZ_CONFIG` injection token.  It sets the primary color for the theme as an example.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme-variable.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfig, provideNzConfig } from 'ng-zorro-antd/core/config';\n\nconst ngZorroConfig: NzConfig = {\n  theme: {\n    primaryColor: '#1890ff'\n  }\n};\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzConfig(ngZorroConfig)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Autocomplete with DataSource (HTML)\nDESCRIPTION: This code snippet demonstrates how to use the `nzAutocomplete` component with a static data source.  It binds the input value to a model and associates the input with an `nz-autocomplete` element that uses `nzDataSource` to provide the autocomplete options. The `nz-input` element allows users to type in the input.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/auto-complete/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input nz-input [(ngModel)]=\"value\" [nzAutocomplete]=\"auto\">\n<nz-autocomplete [nzDataSource]=\"['12345', '23456', '34567']\" #auto></nz-autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Import Basic NG-ZORRO Less in style.less\nDESCRIPTION: Imports the basic NG-ZORRO Less file and a specific component's Less file in `style.less`. This imports common styles and only includes styles for the specified component, allowing for customization through Less variables.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_10\n\nLANGUAGE: less\nCODE:\n```\n@import \"~ng-zorro-antd/style/entry.less\"; /* 引入基本样式 */\n@import \"~ng-zorro-antd/button/style/entry.less\"; /* 引入组件样式 */\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Structure - HTML\nDESCRIPTION: This code snippet demonstrates the basic structure of an ng-zorro-antd menu using `nz-menu`, `nz-menu-item`, and `nz-submenu` elements. It showcases how to create a menu with nested submenus and individual menu items.  No specific dependencies beyond the ng-zorro-antd library are required.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/menu/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ul nz-menu>\n  <li nz-menu-item>Menu 1</li>\n  <li nz-menu-item>Menu 2</li>\n  <li nz-submenu nzTitle=\"SubMenu Title\">\n    <ul>\n      <li nz-menu-item>SubMenu Item 1</li>\n      <li nz-menu-item>SubMenu Item 2</li>\n      <li nz-menu-item>SubMenu Item 3</li>\n    </ul>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Route Label Function - HTML\nDESCRIPTION: This snippet demonstrates how to use `nzRouteLabelFn` to format the breadcrumb text, especially in i18n scenarios. The function `translateFn` is passed to `nzRouteLabelFn` and is responsible for translating the key associated to the route, using a translation service.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<nz-breadcrumb [nzAutoGenerate]=\"true\" [nzRouteLabel]=\"'breadcrumbI18nKey'\" [nzRouteLabelFn]=\"translateFn\"></nz-breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Use NG-ZORRO Button in Template\nDESCRIPTION: Demonstrates how to use an NG-ZORRO button in an Angular component's template. The `nz-button` directive is used to style the button with NG-ZORRO styles, and `nzType=\"primary\"` sets the button type to primary.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button nz-button nzType=\"primary\">Primary</button>\n```\n\n----------------------------------------\n\nTITLE: Setting NZ_DATE_LOCALE for date-fns - ng-zorro-antd (TypeScript)\nDESCRIPTION: This code snippet configures the `NZ_DATE_LOCALE` token to enable `date-fns` for date formatting in ng-zorro-antd. It imports the desired locale from `date-fns/locale` and provides it as the value for `NZ_DATE_LOCALE`.  The `switchLanguage` function illustrates changing the locale at runtime.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Set the value of NZ_DATE_LOCALE in the `app.config.ts` to activate date-fns mode\nimport { enUS, ja } from 'date-fns/locale';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    { provide: NZ_DATE_LOCALE, useValue: enUS }\n  ]\n}\n\n// Switch language to Japanese at runtime\nimport { NzI18nService } from 'ng-zorro-antd/i18n';\n\nexport class AppComponent{\n  private i18n = inject(NzI18nService);\n\n  switchLanguage() {\n    this.i18n.setDateLocale(ja);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Upload State Changes (nzChange) - JavaScript\nDESCRIPTION: This code snippet describes the structure of the object returned when the upload state changes using the `nzChange` event.  It includes the file object, the current file list, and the event from the server. The file object contains metadata like `uid`, `name`, `status`, `response`, and `linkProps`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/upload/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   uid: 'uid',      // unique identifier\n   name: 'xx.png'   // file name\n   status: 'done', // options：uploading, done, error, removed\n   response: '{\"status\": \"success\"}', // response from server\n   linkProps: '{\"download\": \"image\"}', // additional html props of file link\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Locale Text - ng-zorro-antd (TypeScript)\nDESCRIPTION: This snippet shows how to use the `NzI18nService` to dynamically change the locale text in ng-zorro-antd. It imports the service and a language pack, injects the service, and then calls `setLocale` to switch to the desired language. It depends on `ng-zorro-antd/i18n`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { en_US, NzI18nService } from 'ng-zorro-antd/i18n';\n\nclass DemoComponent {\n  private i18n = inject(NzI18nService);\n\n  switchLanguage() {\n    this.i18n.setLocale(en_US);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Route Function Implementation - Typescript\nDESCRIPTION: This code demonstrates how to implement the `customRoute` function that is responsible for modifying the URL. In this example, it adds current route parameters as query parameters to the generated breadcrumb link. This depends on `activatedRoute` to retrieve the parameters. The result is the modified route.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// In component\nbindCurrentParams(params, route) {\n  let newRoute = route;\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      newRoute += `;${key}=${params[key]}`;\n    }\n  }\n  return newRoute;\n}\n\nconst params = this.activatedRoute.snapshot.params;\n\ncustomRoute = (route:string) => this.bindCurrentParams(params,route);\n```\n\n----------------------------------------\n\nTITLE: Mention Component Basic Usage HTML\nDESCRIPTION: Demonstrates the basic usage of the `nz-mention` component with a textarea as the trigger element.  It uses `nzSuggestions` for autocomplete options and `ngModel` for two-way data binding.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/mention/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-mention [nzSuggestions]=\"suggestions\">\n  <textarea nz-input [(ngModel)]=\"value\" nzMentionTrigger> </textarea>\n</nz-mention>\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Structure - HTML\nDESCRIPTION: This code snippet demonstrates the basic structure of an Ng-Zorro-Antd menu using `nz-menu`, `nz-menu-item`, and `nz-submenu`. It shows how to create a simple menu with a submenu containing multiple items. No external dependencies are required beyond the Ng-Zorro-Antd library.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/menu/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul nz-menu>\n  <li nz-menu-item>Menu 1</li>\n  <li nz-menu-item>Menu 2</li>\n  <li nz-submenu nzTitle=\"SubMenu Title\">\n    <ul>\n      <li nz-menu-item>SubMenu Item 1</li>\n      <li nz-menu-item>SubMenu Item 2</li>\n      <li nz-menu-item>SubMenu Item 3</li>\n    </ul>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: AliObjectsLoader Factory Function - TypeScript\nDESCRIPTION: Creates an image loader function specifically for AliObjects CDN. It constructs the image URL by appending resizing parameters to the original source URL based on the provided domain and width.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * AliObjectsLoader return format\n * {domain}/{src}?x-oss-process=image/resize,w_{width}\n */\nexport function createAliObjectsLoader(domain: string): NzImageSrcLoader;\n```\n\n----------------------------------------\n\nTITLE: Using NG-ZORRO Button in Template - HTML\nDESCRIPTION: Demonstrates how to use the NG-ZORRO button component in an Angular component's template.  The `nz-button` directive indicates that it's an NG-ZORRO button, and `nzType=\"primary\"` sets the button style to primary.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button nz-button nzType=\"primary\">Primary</button>\n```\n\n----------------------------------------\n\nTITLE: Cascader basic usage HTML\nDESCRIPTION: This HTML snippet demonstrates the basic usage of the `nz-cascader` component in ng-zorro-antd. It binds the `nzOptions` property to an options array and uses `ngModel` for two-way data binding of the selected values.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cascader/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-cascader [nzOptions]=\"options\" [(ngModel)]=\"values\"></nz-cascader>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Variable Stylesheet in ng-zorro-antd\nDESCRIPTION: This code snippet demonstrates how to replace the standard ng-zorro-antd stylesheet import with the CSS Variable version.  This is a required step for enabling dynamic theme switching. Note that `babel-plugin-import` must be removed if used.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme-variable.zh-CN.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- @import \"~ng-zorro-antd/ng-zorro-antd.min.css\";\n+ @import \"~ng-zorro-antd/ng-zorro-antd.variable.min.css\";\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Data Immutably in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to add and remove data from an array immutably in Angular.  This is important for change detection when using OnPush strategy with ng-zorro-antd. It prevents unexpected behavior and performance issues. It uses the spread operator for adding and the filter method for removing data.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/faq.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    // add data\n    this.dataSet = [ ...this.dataSet, {\n      key    : `${this.i}`,\n      name   : `Edward King ${this.i}`,\n      age    : '32',\n      address: `London, Park Lane no. ${this.i}`\n    }];\n    // remove data\n    this.dataSet = this.dataSet.filter(d => d.key !== i);\n```\n\n----------------------------------------\n\nTITLE: Import NG-ZORRO CSS in angular.json\nDESCRIPTION: Adds the NG-ZORRO CSS file to the `styles` array in the `angular.json` file. This includes all component styles in the application.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"styles\": [\n    \"node_modules/ng-zorro-antd/ng-zorro-antd.min.css\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Route Data - Typescript\nDESCRIPTION: Demonstrates how to format or bind parameters and query strings to the route using `nzRouteFn`.  A `customRoute` function is used to manipulate the route based on the provided parameters.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.en-US.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// In component\nbindCurrentParams(params, route) {\n  let newRoute = route;\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      newRoute += `;${key}=${params[key]}`;\n    }\n  }\n  return newRoute;\n}\n\nconst params = this.activatedRoute.snapshot.params;\n\ncustomRoute = (route:string) => this.bindCurrentParams(params,route);\n```\n\n----------------------------------------\n\nTITLE: Tabs with Angular Router Integration - HTML\nDESCRIPTION: This snippet demonstrates integrating the ng-zorro Tabs component with Angular's router. Setting `nzLinkRouter` on `nz-tabset` enables synchronization between tab selection and route navigation.  The `routerLink` directive defines the target route for each tab.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tabs/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nz-tabset nzLinkRouter>\n  <nz-tab>\n    <a *nzTabLink nz-tab-link [routerLink]=\"['.']\">Link</a>\n    Default.\n  </nz-tab>\n</nz-tabset>\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Content using nzModalContent in HTML\nDESCRIPTION: This HTML snippet demonstrates customizing the content of an ng-zorro-antd modal using the `nzModalContent` directive. Use either a `div` or an `ng-template` element with the `*nzModalContent` or `[nzModalContent]` attribute to define the custom content.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/modal/doc/index.en-US.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div *nzModalContent> Custom Modal Content</div>\n\n<!-- or -->\n\n<ng-template [nzModalContent]> Custom Modal Content</ng-template>\n```\n\n----------------------------------------\n\nTITLE: CloudinaryLoader Factory Function - TypeScript\nDESCRIPTION: Creates an image loader function optimized for Cloudinary CDN.  It creates the image URL with Cloudinary parameters to limit size, automatically set the quality, and resize based on the width.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.zh-CN.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * CloudinaryLoader return format\n * {domain}/c_limit,q_auto,w_{width}/{src}\n */\nexport function createCloudinaryLoader(domain: string): NzImageSrcLoader;\n```\n\n----------------------------------------\n\nTITLE: Static Icon Loading with provideNzIcons\nDESCRIPTION: Illustrates how to statically load icons by registering them in `app.config.ts` using the `provideNzIcons` API. It shows how to import specific icons or all icons from `@ant-design/icons-angular/icons`. Static loading increases bundle size.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IconDefinition } from '@ant-design/icons-angular';\nimport { provideNzIcons } from 'ng-zorro-antd/icon';\n\n// Import what you need. RECOMMENDED. ✔️\nimport { AccountBookFill, AlertFill, AlertOutline } from '@ant-design/icons-angular/icons';\n\nconst icons: IconDefinition[] = [AccountBookFill, AlertOutline, AlertFill];\n\n// Import all. NOT RECOMMENDED. ❌\n// import * as AllIcons from '@ant-design/icons-angular/icons';\n\n// const antDesignIcons = AllIcons as Record<string, IconDefinition>;\n// const icons: IconDefinition[] = Object.keys(antDesignIcons).map(key => antDesignIcons[key])\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideNzIcons(icons)]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Less Theme Files\nDESCRIPTION: This LESS snippet demonstrates how to import the default or alternative NG-ZORRO theme files into a LESS stylesheet.  It imports the main `ng-zorro-antd.less` file and provides commented-out examples for importing the dark, compact, and aliyun themes.  This allows for quick switching between different predefined themes.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_1\n\nLANGUAGE: less\nCODE:\n```\n// 引入官方提供的默认 less 样式文件\n@import \"~ng-zorro-antd/ng-zorro-antd.less\";\n\n// 引入官方提供的暗黑 less 样式文件\n//@import \"~ng-zorro-antd/ng-zorro-antd.dark.less\";\n\n// 引入官方提供的紧凑 less 样式文件\n//@import \"~ng-zorro-antd/ng-zorro-antd.compact.less\";\n\n// 引入官方提供的阿里云 less 样式文件\n//@import \"~ng-zorro-antd/ng-zorro-antd.aliyun.less\";\n```\n\n----------------------------------------\n\nTITLE: Merging Global and Local Configurations - TypeScript\nDESCRIPTION: This snippet demonstrates merging the global configuration with a local configuration using `useFactory`. It injects the global `NzConfigService` (skipping the current component's service), retrieves the global configuration, defines a local configuration, and then merges them using the spread operator. The merged configuration is then returned as the `useFactory` result.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  providers: [\n    // reset local NzConfigService\n    NzConfigService,\n    {\n      provide: NZ_CONFIG,\n      useFactory: () => {\n        // get global NzConfigService\n        const globalConfig = inject(NzConfigService, { skipSelf: true }).getConfig();\n        const localConfig = {\n          select: {\n            nzBorderless: true\n          }\n        };\n        // merge local and global config\n        const mergedConfig = {\n          ...globalConfig,\n          ...localConfig\n        };\n        return mergedConfig;\n      },\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with NG-ZORRO Antd\nDESCRIPTION: This command initializes a project with NG-ZORRO Antd. It automates the configuration process, including importing internationalization files, modules, and styles.  The command needs to be run in the root directory of an Angular project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/schematics.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Implementation HTML\nDESCRIPTION: Demonstrates a basic implementation of the nz-select component in ng-zorro-antd using HTML. It showcases how to create a dropdown with a single option.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/select/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-select>\n  <nz-option nzValue=\"lucy\" nzLabel=\"Lucy\"></nz-option>\n</nz-select>\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Implementation with nz-auto-option - HTML\nDESCRIPTION: This code snippet demonstrates an alternative implementation of the Autocomplete component using nz-auto-option components. Each nz-auto-option component represents a single autocomplete suggestion. The [nzValue] property is used to bind the value that will be used by the ngModel, while the content within the tag represents what is displayed to the user.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/auto-complete/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<input nz-input [(ngModel)]=\"value\" [nzAutocomplete]=\"auto\">\n<nz-autocomplete #auto>\n  <nz-auto-option [nzValue]=\"'12345'\">12345</nz-auto-option>\n  <nz-auto-option [nzValue]=\"'23456'\">23456</nz-auto-option>\n  <nz-auto-option [nzValue]=\"'34567'\">34567</nz-auto-option>\n</nz-autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Menu Example - HTML\nDESCRIPTION: This code snippet demonstrates a basic implementation of a dropdown menu using ng-zorro-antd components. It uses `nz-dropdown` to trigger the menu on hover and `nz-dropdown-menu` to define the menu content.  The menu items are created using `nz-menu` and `nz-menu-item`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/dropdown/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a nz-dropdown [nzDropdownMenu]=\"menu\">Hover me</a>\n<nz-dropdown-menu #menu=\"nzDropdownMenu\">\n  <ul nz-menu>\n    <li nz-menu-item>1st menu item</li>\n    <li nz-menu-item>2nd menu item</li>\n    <li nz-menu-item>3rd menu item</li>\n  </ul>\n</nz-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Providing Template Instances using FactoryProvider - TypeScript\nDESCRIPTION: This snippet demonstrates the recommended approach for providing template instances using a `FactoryProvider`. It creates a `GlobalTemplatesComponent` to hold the template reference.  A factory function `nzConfigFactory` is defined, which creates the component, extracts the template reference, and returns an `NzConfig` object. This config is provided via `NZ_CONFIG` in the application config.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// The module-level Component which contains template references.\n// Exporting is required for AOT compatibility\n@Component({\n  template: `\n    <ng-template #nzIndicatorTpl>\n      <span class=\"ant-spin-dot\">\n        <nz-icon nzType=\"loading\" />\n      </span>\n    </ng-template>\n  `\n})\nexport class GlobalTemplatesComponent {\n  @ViewChild('nzIndicatorTpl', { static: true })\n  nzIndicator!: TemplateRef<void>;\n}\n\n// The Factory function\nconst nzConfigFactory = (): NzConfig => {\n  const environmentInjector = inject(EnvironmentInjector);\n  const { nzIndicator } = createComponent(component, { environmentInjector }).instance;\n  return {\n    spin: {\n      nzIndicator\n    }\n  };\n};\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    { // The FactoryProvider\n      provide: NZ_CONFIG,\n      useFactory: nzConfigFactory\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using nz-calendar component\nDESCRIPTION: This snippet shows how to use the `nz-calendar` component in an Angular template. It demonstrates data binding for the selected date (`ngModel`) and mode (`nzMode`), as well as event binding for panel and select changes. It also shows how to define a custom date cell using a template.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/calendar/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nz-calendar\n  [nzDateCell]=\"dateCellTpl\"\n  [(ngModel)]=\"selectedDate\"\n  [(nzMode)]=\"mode\"\n  (nzPanelChange)=\"panelChange($event)\"\n  (nzSelectChange)=\"selectChange($event)\"\n>\n  <!-- 定义 Cell 的另一种方式 -->\n  <div *dateCell>Foo</div>\n</nz-calendar>\n<!-- 传入 TemplateRef 的方式 -->\n<ng-template #dateCellTpl let-date><span>{{ date | date:'d'}}</span></ng-template>\n```\n\n----------------------------------------\n\nTITLE: Router Link Example - HTML\nDESCRIPTION: Demonstrates how to create router links inside tabs using *nzTabLink. Requires `nzLinkRouter` to be set to true.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tabs/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-tabset nzLinkRouter>\n  <nz-tab>\n    <a *nzTabLink nz-tab-link [routerLink]=\"['.']\">Link</a>\n    Default.\n  </nz-tab>\n</nz-tabset>\n```\n\n----------------------------------------\n\nTITLE: NzTreeNode Data Initialization and Reset - Typescript\nDESCRIPTION: This code snippet demonstrates how to initialize and reset properties associated with the `NzTreeNode` component in ng-zorro-antd.  It initializes `nzData` with a copy of the `nodes` array and resets `nzExpandedKeys`, `nzCheckedKeys`, and `nzSelectedKeys` to ensure they are synchronized with the updated data. It highlights the importance of resetting these properties after setting `nzData` to maintain consistency.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tree/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Demo\nthis.nzExpandAll = false;\nconst nodes = []; // source data\nthis.nzData = [...nodes];\n// Reset the above mentioned properties if you have used after setting of nzData\nthis.nzExpandedKeys = [...this.nzExpandedKeys];\n// this.nzExpandAll = true;\nthis.nzCheckedKeys = [...this.nzCheckedKeys];\nthis.nzSelectedKeys = [...this.nzSelectedKeys];\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Themes with Less\nDESCRIPTION: Demonstrates how to import the default, dark, compact, and Aliyun themes provided by NG-ZORRO using Less.  This involves importing the respective .less files and potentially overriding style variables.  The comments show alternative themes to import.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_1\n\nLANGUAGE: Less\nCODE:\n```\n// Import the official default less style file\n@import \"~ng-zorro-antd/ng-zorro-antd.less\";\n\n// Import the official dark less style file\n//@import \"~ng-zorro-antd/ng-zorro-antd.dark.less\";\n\n// Import the official compact less style file\n//@import \"~ng-zorro-antd/ng-zorro-antd.compact.less\";\n\n// Import the official Aliyun less style file\n//@import \"~ng-zorro-antd/ng-zorro-antd.aliyun.less\";\n```\n\n----------------------------------------\n\nTITLE: Disable Animation with nzNoAnimation Directive - HTML\nDESCRIPTION: This snippet shows how to disable animations for specific NG-ZORRO components directly in the template using the `nzNoAnimation` directive. By adding this directive to a component tag, the component's animations will be disabled. This approach provides a simple way to control animations at the individual component level.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.en-US.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nz-modal nzNoAnimation></nz-modal>\n<ul nz-menu nzNoAnimation></ul>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Locale at Runtime\nDESCRIPTION: This snippet demonstrates how to dynamically change the ng-zorro-antd locale at runtime using the `NzI18nService`. It injects the service into a component and uses the `setLocale` method to switch to a different language pack (e.g., `en_US`). This allows users to change the language of the application while it's running. Requires `ng-zorro-antd/i18n` dependency.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { en_US, NzI18nService } from 'ng-zorro-antd/i18n';\n\nclass SomeComponent {\n  private i18n = inject(NzI18nService);\n\n  switchLanguage() {\n    this.i18n.setLocale(en_US);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO CSS Theme Files\nDESCRIPTION: This CSS snippet shows how to import NG-ZORRO's CSS files directly into a CSS stylesheet. It uses the `@import` directive to include the `ng-zorro-antd.css` file.  Commented-out lines show how to import dark, compact, and aliyun CSS themes.  This provides a simple way to apply NG-ZORRO styles without using LESS.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"~ng-zorro-antd/ng-zorro-antd.css\";\n/*@import \"~ng-zorro-antd/ng-zorro-antd.dark.css\";*/\n/*@import \"~ng-zorro-antd/ng-zorro-antd.compact.css\";*/\n/*@import \"~ng-zorro-antd/ng-zorro-antd.aliyun.css\";*/\n```\n\n----------------------------------------\n\nTITLE: LESS Theme Customization File\nDESCRIPTION: This LESS snippet demonstrates customizing a theme by importing the dark theme variables and a base style file, then overriding specific variables.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_14\n\nLANGUAGE: less\nCODE:\n```\n@import (multiple) '../../../node_modules/ng-zorro-antd/src/style/themes/dark';\n@import './base';\n\n@layout-sider-background: @component-background;\n@layout-header-background: @component-background;\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Structure - HTML\nDESCRIPTION: This example demonstrates the basic structure of the Ng-Zorro layout component using nz-layout, nz-header, nz-sider, nz-content, and nz-footer. It showcases a nested layout with header, footer, content and multiple sidebars.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/layout/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-layout>\n  <nz-header>header</nz-header>\n  <nz-layout>\n    <nz-sider>left sidebar</nz-sider>\n    <nz-content>main content</nz-content>\n    <nz-sider>right sidebar</nz-sider>\n  </nz-layout>\n  <nz-footer>footer</nz-footer>\n</nz-layout>\n```\n\n----------------------------------------\n\nTITLE: Deadlock Example in Angular Component TypeScript\nDESCRIPTION: This TypeScript code demonstrates a deadlock scenario in an Angular component.  The value method is called every time change detection runs because it's used in the template.  Because value has side effects (console.log), it can cause performance issues or deadlocks. The Angular template binding calls the `value()` method during each change detection cycle.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/faq.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  template: `\n    <input [value]=\"value\" />\n  `\n})\nexport class BugComponent {\n  value(): string {\n    console.log('I will run every time');\n    return 'value';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Less in styles.less\nDESCRIPTION: Imports the main NG-ZORRO Less file into the project's `styles.less` file. This is a prerequisite for customizing the theme by overriding Less variables. Make sure that the path to ng-zorro-antd.less is correct relative to the project structure.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_4\n\nLANGUAGE: Less\nCODE:\n```\n// Custom Theming for NG-ZORRO\n// For more information: https://ng.ant.design/docs/customize-theme/en\n@import \"../node_modules/ng-zorro-antd/ng-zorro-antd.less\";\n...\n```\n\n----------------------------------------\n\nTITLE: Disable Animations Globally using provideNoopAnimations - Typescript\nDESCRIPTION: This snippet shows how to disable animations globally in an Angular application using `provideNoopAnimations`. It replaces `BrowserAnimationsModule` with `NoopAnimationsModule` to prevent animations throughout the application. The configuration is done in the application config file.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideNoopAnimations } from '@angular/platform-browser/animations';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    // ...\n    provideNoopAnimations()\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Input Number Custom Handler Icons - HTML\nDESCRIPTION: This code demonstrates how to use custom handler icons in the redesigned input-number component of NG-ZORRO-ANTD. It utilizes the `nz-icon` component with `nzInputNumberUpIcon` and `nzInputNumberDownIcon` directives to define the up and down icons for the input number.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Custom handler icons -->\n<nz-input-number>\n  <nz-icon nzInputNumberUpIcon />\n  <nz-icon nzInputNumberDownIcon />\n</nz-input-number>\n```\n\n----------------------------------------\n\nTITLE: Menu Group with Title and Icon - HTML\nDESCRIPTION: This code demonstrates how to create an `nz-menu-group` with a custom title and icon. Similar to `nz-submenu`, the title can be set directly via `nzTitle`, using the `title` slot with `nz-icon`, or through an `ng-template`.  This example depends on the presence of the `nz-icon` component from the ng-zorro-antd library.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/menu/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<li nz-menu-group nzTitle=\"SubTitle\" nzIcon=\"appstore\"></li>\n\n<li nz-menu-group>\n  < title>\n    <nz-icon nzType=\"appstore\" />\n    <span>SubTitle</span>\n  </span>\n</li>\n\n<li nz-menu-group [nzTitle]=\"titleTpl\"></li>\n<ng-template #titleTpl>\n  <nz-icon nzType=\"appstore\" />\n  <span>SubTitle</span>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: NzCascaderOption interface definition\nDESCRIPTION: This TypeScript interface defines the structure of a Cascader option, including properties for value, label, children, and more. It's used to define the data structure for the cascader options.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cascader/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NzCascaderOption {\n  value?: any;\n  label?: string;\n  title?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  isLeaf?: boolean;\n  children?: NzCascaderOption[];\n  disableCheckbox?: boolean;\n\n  [key: string]: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Footer using nzModalFooter in HTML\nDESCRIPTION: This HTML snippet demonstrates how to customize the footer of an ng-zorro-antd modal using the `nzModalFooter` directive. It includes custom buttons with `nz-button` directive, event bindings, and loading indicators. Use either a `div` or an `ng-template` element with the `*nzModalFooter` or `[nzModalFooter]` attribute to define the custom footer.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/modal/doc/index.en-US.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div *nzModalFooter>\n  <button nz-button nzType=\"default\" (click)=\"handleCancel()\">Custom Callback</button>\n  <button nz-button nzType=\"primary\" (click)=\"handleOk()\" [nzLoading]=\"isConfirmLoading\">Custom Submit</button>\n</div>\n\n<!-- or -->\n\n<ng-template [nzModalFooter]>\n  <button nz-button nzType=\"default\" (click)=\"handleCancel()\">Custom Callback</button>\n  <button nz-button nzType=\"primary\" (click)=\"handleOk()\" [nzLoading]=\"isConfirmLoading\">Custom Submit</button>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Registering Locale Data for DatePicker - Typescript\nDESCRIPTION: This code snippet demonstrates how to register locale data for the DatePicker component using Angular's `registerLocaleData` function. It imports the necessary modules and registers the English locale. This ensures that the DatePicker component displays dates and other locale-specific information correctly.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/date-picker/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\n\nregisterLocaleData(en);\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Usage\nDESCRIPTION: Demonstrates how to use the `nz-icon` component to display an SVG icon with a specified type and theme.  The `nzType` attribute specifies the icon name, and the `nzTheme` attribute sets the icon's visual style.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-icon nzType=\"star\" nzTheme=\"fill\" />\n```\n\n----------------------------------------\n\nTITLE: Using nz-icon component with theme\nDESCRIPTION: This code snippet demonstrates how to use the `nz-icon` component with a specified theme. The `nzType` attribute defines the icon type, and the `nzTheme` attribute sets the icon's theme (e.g., 'fill').\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-icon nzType=\"star\" nzTheme=\"fill\" />\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Themes with CSS\nDESCRIPTION: Demonstrates how to import NG-ZORRO themes via CSS, providing an alternative when Less is not used.  This includes importing the default, dark, compact, and Aliyun themes.  The comments show alternative themes to import.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"~ng-zorro-antd/ng-zorro-antd.css\";\n/*@import \"~ng-zorro-antd/ng-zorro-antd.dark.css\";*/\n/*@import \"~ng-zorro-antd/ng-zorro-antd.compact.css\";*/\n/*@import \"~ng-zorro-antd/ng-zorro-antd.aliyun.css\";*/\n```\n\n----------------------------------------\n\nTITLE: Import NzNoAnimationModule - Typescript\nDESCRIPTION: This snippet demonstrates how to import `NzNoAnimationModule` to disable animations for specific components. By importing this module into a component's imports array, animations can be controlled on a component-by-component basis. This allows fine-grained control over which components have animations enabled or disabled.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\n\n@Component({\n  imports: [\n    // ...\n    NzNoAnimationModule\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing NG-ZORRO as Dependency - Bash\nDESCRIPTION: Installs the NG-ZORRO library as a project dependency using npm or yarn. The `--save` flag (npm) adds the package to the `package.json` file.  Allows for importing and using NG-ZORRO components in your Angular project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ng-zorro-antd --save\n# Or if you use yarn\n$ yarn add ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Adding ng-zorro-antd to Angular Project\nDESCRIPTION: This command adds ng-zorro-antd to an existing Angular project. It configures settings like i18n files and stylesheets, and loads initial modules, streamlining the setup process.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/schematics.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng add ng-zorro-antd [options]\n```\n\n----------------------------------------\n\nTITLE: Setting Direction in Angular Template\nDESCRIPTION: Sets the text direction within an Angular template using the `dir` attribute. This attribute allows you to specify either \"rtl\" or \"ltr\" direction for the given element and its descendants. Requires the `BidiModule` to be imported and available in the module.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/direction.en-US.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div dir=\"rtl\"></div>\n```\n\n----------------------------------------\n\nTITLE: Closing Modal using NzModalRef in Typescript\nDESCRIPTION: This code snippet demonstrates how to obtain a reference to a modal created using the NzModalService and then close the modal using the `close()` or `destroy()` method of the `NzModalRef` object. The `destroy()` method immediately destroys the modal.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/modal/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(modal: NzModalService) {\n  const ref: NzModalRef = modal.info();\n  ref.close(); // Or ref.destroy(); This dialog will be destroyed directly\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Global Configurations - TypeScript\nDESCRIPTION: This snippet demonstrates how to dynamically change the global configuration of a component using the `set` method of `NzConfigService`. It injects `NzConfigService` and defines a method `onChangeConfig` which sets the `nzSize` property of the `button` component to 'large'. This change will affect all component instances that haven't been configured independently.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfigService } from 'ng-zorro-antd/core/config';\n\n@Component({})\nexport class ChangeZorroConfigComponent {\n  private nzConfigService = inject(NzConfigService);\n\n  onChangeConfig() {\n    this.nzConfigService.set('button', { nzSize: 'large' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Graph Node Template - HTML\nDESCRIPTION: Demonstrates how to customize the template for graph nodes using the `nzGraphNode` directive. This allows developers to define the content and appearance of individual nodes in the graph.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nz-graph [nzGraphData]=\"data\">\n  <ng-container *nzGraphNode=\"let node\">\n    <span>{{ node.name }} - {{ node.label }}</span>\n  </ng-container>\n</nz-graph>\n```\n\n----------------------------------------\n\nTITLE: Standalone Badge with Count Example HTML\nDESCRIPTION: Demonstrates the use of the nzStandalone property within the nz-badge component. The badge displays a count of 5 in standalone mode, meaning it doesn't have a parent element.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/badge/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-badge [nzCount]=\"5\" nzStandalone></nz-badge>\n```\n\n----------------------------------------\n\nTITLE: Using *nzTabLink - HTML\nDESCRIPTION: Demonstrates how to use the `*nzTabLink` directive with `nz-tab-link` and `routerLink` within an `nz-tab` to create a tab with a router link.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tabs/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-tab>\n  <a *nzTabLink=\"let visible = visible\" nz-tab-link [routerLink]=\"['.']\">...</a>\n</nz-tab>\n```\n\n----------------------------------------\n\nTITLE: Importing Angular CDK Bidi Module\nDESCRIPTION: This snippet shows how to import the `BidiModule` from `@angular/cdk/bidi`. This module is required to use the `dir` attribute within Angular templates. The dependency is `@angular/cdk/bidi`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/direction.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BidiModule } from '@angular/cdk/bidi';\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Styles in angular.json - JSON\nDESCRIPTION: Imports the pre-built NG-ZORRO stylesheet into the Angular project by adding it to the `styles` array in the `angular.json` file. This applies the default NG-ZORRO styles to all components in the application.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"styles\": [\n    \"node_modules/ng-zorro-antd/ng-zorro-antd.min.css\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Mention Suggestion Template HTML\nDESCRIPTION: Demonstrates how to customize the suggestion template using `*nzMentionSuggestion`.  `nzSuggestions` and `nzValueWith` properties are used with a custom template to display formatted suggestion items.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/mention/doc/index.en-US.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-mention [nzSuggestions]=\"items\" [nzValueWith]=\"valueWith\">\n  <input nz-input nzMentionTrigger />\n  <ng-container *nzMentionSuggestion=\"let item\">\n    <span>{{ item.label }} - {{ item.value }}</span>\n  </ng-container>\n</nz-mention>\n```\n\n----------------------------------------\n\nTITLE: Disable Animations on a Component - HTML\nDESCRIPTION: This snippet illustrates how to disable animations for a specific NG-ZORRO component using the `nzNoAnimation` directive in the HTML template. This allows for granular control over which components have animations enabled or disabled.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nz-modal nzNoAnimation></nz-modal>\n<ul nz-menu nzNoAnimation></ul>\n```\n\n----------------------------------------\n\nTITLE: Importing Base and Component Styles in style.less - LESS\nDESCRIPTION: Imports base styles and a specific component's styles (button) into `style.less`. Similar to the CSS example, this allows for selectively including styles. Requires a LESS preprocessor. Base styles must be imported first.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_10\n\nLANGUAGE: less\nCODE:\n```\n@import \"~ng-zorro-antd/style/entry.less\"; /* Import base styles */\n@import \"~ng-zorro-antd/button/style/entry.less\";  /* Import one component's styles */\n```\n\n----------------------------------------\n\nTITLE: NzResizeDirection and NzCursorType - Typescript\nDESCRIPTION: These TypeScript type aliases define the possible values for the direction of the resize handle (`NzResizeDirection`) and the cursor type (`NzCursorType`) for the `nz-resize-handle` component. `NzResizeDirection` specifies from which direction the element can be resized, while `NzCursorType` defines the cursor type used while dragging.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/resizable/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype NzResizeDirection = 'top' | 'right' | 'bottom' | 'left' | 'topRight' | 'bottomRight' | 'bottomLeft' | 'topLeft';\ntype NzCursorType = 'window' | 'grid';\n```\n\n----------------------------------------\n\nTITLE: Basic Timeline Usage ng-zorro-antd HTML\nDESCRIPTION: This example demonstrates the basic usage of the `nz-timeline` and `nz-timeline-item` components to create a simple timeline. It displays a series of events with default styling. No specific dependencies beyond the `ng-zorro-antd` library are required.  The output is a vertical timeline displaying the provided text labels.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/timeline/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-timeline>\n  <nz-timeline-item>创建服务现场 2015-09-01</nz-timeline-item>\n  <nz-timeline-item>初步排除网络异常 2015-09-01</nz-timeline-item>\n  <nz-timeline-item>技术测试异常 2015-09-01</nz-timeline-item>\n  <nz-timeline-item>网络异常正在修复 2015-09-01</nz-timeline-item>\n</nz-timeline>\n```\n\n----------------------------------------\n\nTITLE: Load CSS Dynamically in TypeScript\nDESCRIPTION: This TypeScript snippet shows a function `loadCss` that dynamically creates a `<link>` element to load a CSS file. It returns a `Promise` that resolves when the CSS is loaded or rejects if there is an error. The function handles cross-browser compatibility for loading CSS.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nprivate loadCss(href: string, id: string): Promise<Event> {\n  return new Promise((resolve, reject) => {\n    const style = document.createElement('link');\n    style.rel = 'stylesheet';\n    style.href = href;\n    style.id = id;\n    style.onload = resolve;\n    style.onerror = reject;\n    document.head.append(style);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Angular JSON Configuration - Adding NG-ZORRO Styles\nDESCRIPTION: This JSON snippet shows how to configure the `angular.json` file to include the default NG-ZORRO styles.  It modifies the `styles` array within the `build` options to point to the `ng-zorro-antd.min.css` file in the `node_modules` directory.  This ensures that the basic NG-ZORRO styles are applied to the Angular application.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"options\": {\n      \"styles\": [\n        \"./node_modules/ng-zorro-antd/ng-zorro-antd.min.css\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Input Number with Addons - HTML\nDESCRIPTION: This code shows how to implement addons before and after the nz-input-number. The `nzInputAddonBefore` and `nzInputAddonAfter` attributes are applied to span elements within the `nz-input-number` component to display elements before and after the input field. The component should be imported from the `ng-zorro-antd` library.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n  <!-- With addons -->\n  <nz-input-number>\n    <span nzInputAddonBefore>Before</span>\n    <span nzInputAddonAfter>After</span>\n  </nz-input-number>\n```\n\n----------------------------------------\n\nTITLE: Badge with Count Example HTML\nDESCRIPTION: Demonstrates basic usage of the nz-badge component with a numerical count. It wraps an anchor element with the class 'head-example' and displays a badge with the count of 5.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/badge/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-badge [nzCount]=\"5\">\n  <a class=\"head-example\"></a>\n</nz-badge>\n```\n\n----------------------------------------\n\nTITLE: Basic Card Implementation in Ng-Zorro (HTML)\nDESCRIPTION: Demonstrates the basic usage of the `nz-card` component in Ng-Zorro to create a card with a title and content. The `nzTitle` attribute sets the title of the card. The content between the opening and closing tags represents the card's body.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/card/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-card nzTitle=\"卡片标题\">卡片内容</nz-card>\n```\n\n----------------------------------------\n\nTITLE: Merging Global and Local Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates merging global and local configurations for a component. It injects the global `NzConfigService`, retrieves its configuration, and merges it with a local configuration object using the spread operator. This merged configuration is then provided as the `NZ_CONFIG` token. Modifications to global configs after initialization do not affect these configurations.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  providers: [\n    // 重设本地 NzConfigService\n    NzConfigService,\n    {\n      provide: NZ_CONFIG,\n      useFactory: () => {\n        // 获取全局 NzConfigService\n        const globalConfig = inject(NzConfigService, { skipSelf: true }).getConfig();\n        const localConfig = {\n          select: {\n            nzBorderless: true\n          }\n        };\n        // 合并全局配置与本地配置\n        const mergedConfig = {\n          ...globalConfig,\n          ...localConfig\n        };\n        return mergedConfig;\n      },\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Standalone Badge with Count - Ng-Zorro-Antd - HTML\nDESCRIPTION: This code snippet shows how to use the nz-badge component as a standalone element to display a badge with a numeric count. The nzCount property is set to 5, and the nzStandalone property is set to true, indicating that the badge is not attached to any other element.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/badge/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-badge [nzCount]=\"5\" nzStandalone></nz-badge>\n```\n\n----------------------------------------\n\nTITLE: NzNotificationRef Interface Definition\nDESCRIPTION: This code snippet defines the `NzNotificationDataRef` interface, which is returned when calling methods like `NzNotificationService.success`.  It includes properties such as `messageId`, `onClose` (a Subject that emits when the notification closes), and `onClick` (a Subject that emits when the notification is clicked). The onClose subject emits `true` when the user manually closes the notification.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/notification/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NzNotificationDataRef {\n  messageId: string;\n  onClose: Subject<boolean>; // 当 notification 关闭时它会派发一个事件，如果为用户手动关闭会派发 `true`\n  onClick: Subject<MouseEvent>;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Angular Locales Dependency - ng-zorro-antd (TypeScript)\nDESCRIPTION: This snippet shows the code that can be removed after switching to `date-fns` for date formatting to reduce package size. It removes the imports and registration of Angular locale data.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// The following code can be removed as needed\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nregisterLocaleData(en);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading CSS Theme File (TypeScript)\nDESCRIPTION: This TypeScript function dynamically creates a `<link>` tag to load a CSS theme file.  It takes the `href` (the path to the CSS file) and `id` (to identify the `<link>` tag) as parameters.  A Promise is used to handle the asynchronous loading of the CSS file, resolving on successful load and rejecting on error. This allows for handling CSS loading events.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nprivate loadCss(href: string, id: string): Promise<Event> {\n  return new Promise((resolve, reject) => {\n    const style = document.createElement('link');\n    style.rel = 'stylesheet';\n    style.href = href;\n    style.id = id;\n    style.onload = resolve;\n    style.onerror = reject;\n    document.head.append(style);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Animations in Modal and Drawer services - Typescript\nDESCRIPTION: This snippet shows how to disable animations when invoking Modal or Drawer services by setting `nzNoAnimation` to `true` in the configuration object. This allows for disabling animations specifically for instances created via these services.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // ...\n  nzNoAnimation: true\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Modal Content with nzModalContent in HTML\nDESCRIPTION: Demonstrates how to inject custom content inside modal dialog using `nzModalContent` directive. Content can be specified using a `div` or `ng-template`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/modal/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div *nzModalContent> Custom Modal Content </div>\n\n<!-- or -->\n\n<ng-template [nzModalContent]> Custom Modal Content </ng-template>\n```\n\n----------------------------------------\n\nTITLE: Customize Graph Group-Node Template - HTML\nDESCRIPTION: Demonstrates how to customize the template for group nodes using the `nzGraphGroupNode` directive. This enables developers to customize the visual representation of grouped nodes within the graph.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.en-US.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<nz-graph [nzGraphData]=\"data\">\n  <ng-container *nzGraphGroupNode=\"let node\">\n    <span>{{ node.name }} - {{ node.label }}</span>\n  </ng-container>\n</nz-graph>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tree Data in TypeScript\nDESCRIPTION: This code snippet demonstrates the proper order of initializing tree data properties in a TypeScript component using ng-zorro-antd. It shows the order in which properties like `nzExpandAll`, `nzData`, `nzExpandedKeys`, `nzCheckedKeys`, and `nzSelectedKeys` should be initialized to avoid potential issues.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tree/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 示例\nthis.nzExpandAll = false;\nconst nodes = []; // 源数据\nthis.nzData = [...nodes];\n// nzData 值异步获取变化后重新渲染一下属性\nthis.nzExpandedKeys = [...this.nzExpandedKeys];\n// this.nzExpandAll = true;\nthis.nzCheckedKeys = [...this.nzCheckedKeys];\nthis.nzSelectedKeys = [...this.nzSelectedKeys];\n```\n\n----------------------------------------\n\nTITLE: NzMessageRef Interface Definition\nDESCRIPTION: This code snippet defines the `NzMessageRef` interface, which is returned when calling `NzMessageService.success` or similar methods. It includes the `messageId` and an `onClose` Subject that emits when the message is closed.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/message/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NzMessageRef {\n  messageId: string;\n  onClose: Subject<false>; // 当 message 关闭时它会派发一个事件\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PageHeader Component - HTML\nDESCRIPTION: This code snippet demonstrates the basic initialization of the `nz-page-header` component with a title.  It uses the `nzTitle` input to set the title of the page header. No dependencies beyond ng-zorro-antd and Angular are needed.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/page-header/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-page-header nzTitle=\"Page Title\"></nz-page-header>\n```\n\n----------------------------------------\n\nTITLE: Dynamically changing ng-zorro-antd theme using NzConfigService\nDESCRIPTION: This snippet illustrates how to dynamically change the ng-zorro-antd theme at runtime using the `NzConfigService`. The `set` method is called to update the theme configuration. The `NzConfigService` must be injected.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme-variable.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfigService } from 'ng-zorro-antd/core/config';\n\n@Component({\n  selector: 'app-change-zorro-config'\n})\nexport class ChangeZorroConfigComponent {\n  private nzConfigService = inject(NzConfigService);\n\n  onChangeConfig() {\n    this.nzConfigService.set('theme', { primaryColor: '#1890ff' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Entry File\nDESCRIPTION: Content of the dark theme entry file. Imports the main NG-ZORRO less file and the specific dark theme customizations.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_14\n\nLANGUAGE: Less\nCODE:\n```\n@import '../../node_modules/ng-zorro-antd/ng-zorro-antd';\n@import \"./themes/dark\";\n```\n\n----------------------------------------\n\nTITLE: Angular JSON CSS Styles Configuration\nDESCRIPTION: Configures the styles array in `angular.json` to include the NG-ZORRO CSS file.  This is another example of setting up styles in `angular.json`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"build\": {\n    \"options\": {\n      \"styles\": [\n        \"node_modules/ng-zorro-antd/ng-zorro-antd.css\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NG-ZORRO Antd with ng add\nDESCRIPTION: This snippet demonstrates how to install a specific version of the NG-ZORRO Antd library into an Angular project using the `ng add` command. It assumes that the user has already navigated to the root directory of their project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.zh-CN.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd PROJECT-NAME\n$ ng add ng-zorro-antd@14.0.0\n```\n\n----------------------------------------\n\nTITLE: Custom Cascader Filter - Typescript\nDESCRIPTION: This code snippet shows an example of a custom filter function for the `nzShowSearch` option that ignores case sensitivity.  It converts both the input string `i` and the labels to lowercase before performing the search. This allows the filter to match regardless of the case of the input or the labels.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cascader/doc/index.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter: NzCascaderFilter = (i, p) => {\n  return p.some(o => {\n    const label = o.label;\n    return !!label && label.toLowerCase().indexOf(i.toLowerCase()) !== -1;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Initialize NG-ZORRO Configuration\nDESCRIPTION: Initializes the NG-ZORRO configuration in an Angular project. This command automatically imports the necessary modules, internationalization files, and style files.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ng add ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Static Icon Loading with provideNzIcons\nDESCRIPTION: This TypeScript code demonstrates how to statically load icons using `provideNzIcons`. It imports specific icons (AccountBookFill, AlertOutline, AlertFill) and provides them to the application, ensuring they are included in the initial bundle. This is the recommended approach for frequently used icons.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IconDefinition } from '@ant-design/icons-angular';\nimport { provideNzIcons } from 'ng-zorro-antd/icon';\n\n// 引入你需要的图标，比如你需要 fill 主题的 AccountBook Alert 和 outline 主题的 Alert，推荐 ✔️\nimport { AccountBookFill, AlertFill, AlertOutline } from '@ant-design/icons-angular/icons';\n\nconst icons: IconDefinition[] = [ AccountBookFill, AlertOutline, AlertFill ];\n\n// 引入全部的图标，不推荐 ❌\n// import * as AllIcons from '@ant-design/icons-angular/icons';\n\n// const antDesignIcons = AllIcons as Record<string, IconDefinition>;\n// const icons: IconDefinition[] = Object.keys(antDesignIcons).map(key => antDesignIcons[key])\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideNzIcons(icons)]\n}\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Customization File\nDESCRIPTION: This is the content of the dark theme customization file. Imports the dark theme variables from NG-ZORRO and the base styles, then overrides specific variables for the dark theme.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_15\n\nLANGUAGE: Less\nCODE:\n```\n@import (multiple) '../../../node_modules/ng-zorro-antd/src/style/themes/dark';\n@import './base';\n\n@layout-sider-background: @component-background;\n@layout-header-background: @component-background;\n```\n\n----------------------------------------\n\nTITLE: Mention Trigger with Input - HTML\nDESCRIPTION: This code snippet demonstrates using the `nzMentionTrigger` directive on an input element inside the `nz-mention` component. This configuration allows a standard input field to trigger the mention functionality.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/mention/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nz-mention>\n  <input nzMentionTrigger />\n</nz-mention>\n```\n\n----------------------------------------\n\nTITLE: Importing themeMixin\nDESCRIPTION: Shows how to import a mixin file using either a relative path or the configured `includePaths` in `angular.json`.  Using `includePaths` allows for shorter, more maintainable import statements.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_12\n\nLANGUAGE: CSS\nCODE:\n```\n// A relative path works\n@import 'src/path-to-mixin/mixin';\n// But now this works as well\n@import 'mixin';\n```\n\n----------------------------------------\n\nTITLE: AliObjectsLoader Creation - Typescript\nDESCRIPTION: This function creates an image source loader specific to AliObjects CDN. It takes the CDN domain as input and returns a function that appends image resizing parameters to the original image URL to optimize for a specific width.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * AliObjectsLoader return format\n * {domain}/{src}?x-oss-process=image/resize,w_{width}\n */\nexport function createAliObjectsLoader(domain: string): NzImageSrcLoader;\n```\n\n----------------------------------------\n\nTITLE: Submenu Title Definition - HTML\nDESCRIPTION: This code snippet demonstrates the different ways to define the title for an `nz-submenu` in Ng-Zorro-Antd. It covers using the `nzTitle` attribute directly, embedding HTML with an icon and span, and utilizing a template reference for more complex title structures. The code relies on Ng-Zorro-Antd's icon component (`nz-icon`).\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/menu/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<li nz-submenu nzTitle=\"SubTitle\" nzIcon=\"appstore\"></li>\n\n<li nz-submenu>\n  <span title>\n    <nz-icon nzType=\"appstore\" />\n    <span>SubTitle</span>\n  </span>\n</li>\n\n<li nz-submenu [nzTitle]=\"titleTpl\"></li>\n<ng-template #titleTpl>\n  <nz-icon nzType=\"appstore\" />\n  <span>SubTitle</span>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Import Graph Component Style - LESS\nDESCRIPTION: Imports the necessary LESS styles for the ng-zorro-antd Graph component. This ensures the correct visual appearance of the graph.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n@import 'node_modules/ng-zorro-antd/graph/style/entry.less';\n```\n\n----------------------------------------\n\nTITLE: Adding data immutably in Angular using Typescript\nDESCRIPTION: This code snippet demonstrates how to add data immutably to an array in Angular, which is necessary when using the OnPush change detection strategy in ng-zorro-antd. Mutating the original array will not trigger a change detection. The spread operator is used to create a new array with the added data.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/faq.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 增加数据\nthis.dataSet = [ ...this.dataSet, {\n  key    : `${this.i}`,\n  name   : `Edward King ${this.i}`,\n  age    : '32',\n  address: `London, Park Lane no. ${this.i}`\n}];\n```\n\n----------------------------------------\n\nTITLE: Basic Card Implementation in HTML\nDESCRIPTION: This code snippet demonstrates the basic implementation of an `nz-card` component with a title and content. It showcases the fundamental structure for displaying a card in an Angular application using ng-zorro-antd. The `nzTitle` attribute sets the title of the card, and the text between the opening and closing tags represents the card's content.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/card/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-card nzTitle=\"card title\">card content</nz-card>\n```\n\n----------------------------------------\n\nTITLE: Mention Usage with TextArea - HTML\nDESCRIPTION: This code snippet shows the basic usage of the `nz-mention` component with a textarea as the trigger element. The `nzSuggestions` input provides the list of suggestions, and `nzMentionTrigger` is applied to the textarea. The `ngModel` directive is used for two-way data binding.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/mention/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-mention [nzSuggestions]=\"suggestions\">\n  <textarea nz-input [(ngModel)]=\"value\" nzMentionTrigger> </textarea>\n</nz-mention>\n```\n\n----------------------------------------\n\nTITLE: Updating NG-ZORRO dependencies via Angular CLI\nDESCRIPTION: This command updates the ng-zorro-antd package using the Angular CLI. It ensures that the project's ng-zorro-antd dependency is upgraded to the latest compatible version. The command should be executed in the project's root directory.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/migration-v19.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng update ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Configuring assets and styles in angular.json (JSON)\nDESCRIPTION: This JSON snippet shows how to configure assets and styles in the `angular.json` file.  It adds the necessary assets (SVG icons) and styles (CSS) for NG-ZORRO to function correctly.  The assets configuration copies the SVG icons to the assets directory, and the styles configuration includes the NG-ZORRO CSS file in the project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n+   {\n+     \"glob\": \"**/*\",\n+     \"input\": \"./node_modules/@ant-design/icons-angular/src/inline-svg/\",\n+     \"output\": \"/assets/\"\n+   }\n  ],\n  \"styles\": [\n+   \"node_modules/ng-zorro-antd/ng-zorro-antd.min.css\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade NG-ZORRO\nDESCRIPTION: This command updates the ng-zorro-antd library to the latest v19 version. This process involves updating package versions, applying necessary migrations, and providing console warnings for deprecated or incompatible code. Review the console output for specific instructions after running this command.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/migration-v19.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng update ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Custom Webpack Builder Configuration\nDESCRIPTION: This JSON snippet shows the changes required in the `angular.json` file to use the `@angular-builders/custom-webpack` builder. It replaces the default Angular builder with the custom webpack builder and specifies the path to the custom webpack configuration file.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"architect\": {\n    \"build\": {\n-     \"builder\": \"@angular-devkit/build-angular:browser\",\n+     \"builder\": \"@angular-builders/custom-webpack:browser\",\n      \"options\": {\n+        \"customWebpackConfig\": {\n+          \"path\": \"./extra-webpack.config.js\",\n+          \"mergeStrategies\": {\n+            \"module.rules\": \"append\"\n+          },\n+          \"replaceDuplicatePlugins\": true\n+        }\n      },\n    },\n    \"serve\": {\n-      \"builder\": \"@angular-devkit/build-angular:dev-server\",\n+      \"builder\": \"@angular-builders/custom-webpack:dev-server\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Monaco Assets - Diff\nDESCRIPTION: Configures the `angular.json` file to include Monaco Editor assets for dynamic loading. This ensures that the necessary files are available during runtime when the editor is loaded dynamically. The `input` path should point to the Monaco Editor's `vs` directory.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/code-editor/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n\"assets\": [\n+ {\n+   \"glob\": \"**/*\",\n+   \"input\": \"./node_modules/monaco-editor/min/vs\",\n+   \"output\": \"/assets/vs/\"\n+ }\n],\n```\n\n----------------------------------------\n\nTITLE: NzChange Callback Object Structure - JavaScript\nDESCRIPTION: Describes the structure of the object returned by the `nzChange` callback when the upload file status changes. This object contains information about the file, the file list, and the event.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/upload/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   uid: 'uid',      // 文件唯一标识\n   name: 'xx.png'   // 文件名\n   status: 'done', // 状态有：uploading done error removed\n   response: '{\"status\": \"success\"}', // 服务端响应内容\n   linkProps: '{\"download\": \"image\"}', // 下载链接额外的 HTML 属性\n}\n```\n\n----------------------------------------\n\nTITLE: LESS Mixin for Theme Switching\nDESCRIPTION: This LESS mixin allows for applying theme-specific styles to components. It defines a `.themeMixin` that imports theme-specific LESS files (e.g., `default.less`, `dark.less`) and applies a set of rules based on the current theme. The mixin takes `@rules` as a parameter, which is a block of LESS code to be applied within each theme.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_17\n\nLANGUAGE: less\nCODE:\n```\n.themeMixin(@rules) {\n  html {\n    &.default {\n      @import './default.less';\n      @rules();\n    }\n    &.dark {\n      @import './dark.less';\n      @rules();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NzResizeHandleOption Interface - Typescript\nDESCRIPTION: This TypeScript interface defines the structure of the options that can be passed to the `nzDirections` input of the `nz-resize-handles` component.  It allows specifying both the direction and cursor type for individual handles. This provides a finer grain control over the resize handles.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/resizable/doc/index.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NzResizeHandleOption {\n  direction: NzResizeDirection;\n  cursorType: NzCursorType;\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Modal with NzModalRef in Typescript\nDESCRIPTION: This snippet demonstrates how to close or destroy a modal dialog created using the `NzModalService.xxx()` methods. It shows how to obtain an `NzModalRef` object and use its `close()` or `destroy()` method to programmatically close the modal.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/modal/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(modal: NzModalService) {\n  const ref: NzModalRef = modal.info();\n  ref.close(); // 或 ref.destroy(); 将直接销毁对话框\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Template Instances via NzConfigService - TypeScript\nDESCRIPTION: This snippet shows how to set template instances using `NzConfigService`.  It injects `NzConfigService` and uses `@ViewChild` to obtain a reference to a template.  Then, in `ngOnInit`, it sets the `nzIndicator` property of the `spin` component's configuration using `this.nzConfigService.set`.  This approach violates separation of concerns and is not recommended.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfigService } from 'ng-zorro-antd/core/config';\n\nexport class AppComponent implements OnInit {\n  private nzConfigService = inject(NzConfigService);\n\n  @ViewChild('nzIndicatorTpl', { static: true })\n  nzIndicator!: TemplateRef<void>;\n\n  ngOnInit(): void {\n    this.nzConfigService.set('spin', { nzIndicator: this.nzIndicator });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Modal Direction via Service (TypeScript)\nDESCRIPTION: Demonstrates setting the direction of a modal using the `NzModalService` in ng-zorro-antd. The `nzDirection` property is set to 'rtl' when creating the modal.  It also shows how to set the direction using `NzConfigService` which changes the default direction.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/direction.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent {\n  constructor(private modalService: NzModalService, private configService: NzConfigService) { }\n\n  openModal(): void {\n    this.modal.create({\n      nzDirection: 'rtl'\n    })\n  }\n\n  setDirWithConfig(): void {\n    this.nzConfigService.set('modal', { nzDirection: 'rtl' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NG-ZORRO Ant Design - Bash\nDESCRIPTION: This code snippet provides the command to install a specific version (16.0.0) of the ng-zorro-antd library using the Angular CLI. It assumes you are in the root directory of your Angular project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.zh-CN.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd PROJECT-NAME\n$ ng add ng-zorro-antd@16.0.0\n```\n\n----------------------------------------\n\nTITLE: Customizing Breadcrumb Label with nzRouteLabel - HTML\nDESCRIPTION: Illustrates how to customize the property name used for the breadcrumb label in the route's `data` object. The `nzRouteLabel` input property on the `<nz-breadcrumb>` component is used to specify the custom property name (e.g., `'customBreadcrumb'`).\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nz-breadcrumb [nzAutoGenerate]=\"true\" [nzRouteLabel]=\"'customBreadcrumb'\"></nz-breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Default Cascader Filter - Typescript\nDESCRIPTION: This code snippet demonstrates the default filter function for the `nzShowSearch` option in the NzCascaderComponent. It checks if the input string `i` is present in any of the labels along the cascaded path `p`. The function iterates through each option in the path and returns true if any label contains the input.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cascader/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultFilter: NzCascaderFilter = (i, p) => {\n  return p.some(o => {\n    const label = o.label;\n    return !!label && label.indexOf(i) !== -1;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: NzResizeHandleOption Interface (TypeScript)\nDESCRIPTION: Defines the `NzResizeHandleOption` interface, which allows customizing the direction and cursor type of individual resize handles.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/resizable/doc/index.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NzResizeHandleOption {\n  direction: NzResizeDirection;\n  cursorType: NzCursorType;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Direction in HTML\nDESCRIPTION: This snippet demonstrates how to set the default text direction to right-to-left (RTL) by setting the `dir` attribute on the `html` tag. This will affect the entire page. No dependencies are required.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/direction.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html dir=\"rtl\"></html>\n```\n\n----------------------------------------\n\nTITLE: Install NG-ZORRO\nDESCRIPTION: Installs the NG-ZORRO library as a dependency in the Angular project. The `--save` flag adds the package to the `package.json` file.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ng-zorro-antd --save\n```\n\n----------------------------------------\n\nTITLE: Custom Filter for NzShowSearchOptions\nDESCRIPTION: This TypeScript code snippet showcases a custom filter function that can be used in the Cascader component when `nzShowSearch` is enabled. This particular filter ignores case sensitivity when checking for the input string's presence in the labels of the cascaded options.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cascader/doc/index.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter: NzCascaderFilter = (i, p) => {\n  return p.some(o => {\n    const label = o.label;\n    return !!label && label.toLowerCase().indexOf(i.toLowerCase()) !== -1;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Install Custom Webpack Builder\nDESCRIPTION: Command line instruction to install the custom webpack builder.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nnpm i -D @angular-builders/custom-webpack\n```\n\n----------------------------------------\n\nTITLE: Remove Unused Theme in TypeScript\nDESCRIPTION: This TypeScript snippet defines a function to remove an unused theme by removing the theme's class from the document's `<html>` element and removing the corresponding `<link>` element from the `<head>`.  This function is used during theme switching to clean up the previous theme.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nprivate removeUnusedTheme(theme: ThemeType): void {\n  document.documentElement.classList.remove(theme);\n  const removedThemeStyle = document.getElementById(theme);\n  if (removedThemeStyle) {\n    document.head.removeChild(removedThemeStyle);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Angular JSON Configuration - Bundling Theme Styles\nDESCRIPTION: This JSON snippet configures the `styles` array in `angular.json` for dynamic theme switching.  It defines input files, bundle names, and sets `inject` to `false` to prevent automatic injection. This configuration allows to load the CSS dynamically.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"styles\": [\n      \"src/styles.less\",\n      {\n        \"input\": \"src/styles/default.less\",\n        \"bundleName\": \"default\",\n        \"inject\": false\n      },\n      {\n        \"input\": \"src/styles/dark.less\",\n        \"bundleName\": \"dark\",\n        \"inject\": false\n      }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Locale Data for Angular i18n - Typescript\nDESCRIPTION: This code snippet demonstrates how to register locale data for Angular i18n, which is required for the ng-zorro-antd Calendar component to display the correct locale. It imports `registerLocaleData` and the desired locale (e.g., 'en') from `@angular/common`, and then calls `registerLocaleData` with the locale data. This should be done in the `app.config.ts` file.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/calendar/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nregisterLocaleData(en);\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Component Module (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import a specific NG-ZORRO component module (NzButtonModule) into an Angular component. The component then declares the imported module in its `imports` array, making the button component available for use in the template.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzButtonModule } from 'ng-zorro-antd/button';\n\n@Component({\n  imports: [ NzButtonModule ]\n})\nexport class AppComponent {}\n```\n\n----------------------------------------\n\nTITLE: Fetch Icons from Iconfont\nDESCRIPTION: Shows how to use the `fetchFromIconfont` method to import custom icons from iconfont.cn.  It requires specifying the `scriptUrl` provided by the iconfont project to import the SVG sprite symbols. It is called on the `NzIconService`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis._iconService.fetchFromIconfont({\n  scriptUrl: 'https://at.alicdn.com/t/font_8d5l8fzk5b87iudi.js'\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling LESS with custom prefix in ng-zorro-antd\nDESCRIPTION: This command shows how to compile the ng-zorro-antd LESS files with a custom CSS Variable prefix.  This is useful when multiple CSS files are being used and there are CSS variable name conflicts.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme-variable.zh-CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlessc --js --modify-var=\"ant-prefix=custom\" ng-zorro-antd/ng-zorro-antd.variable.less modified.css\n```\n\n----------------------------------------\n\nTITLE: Custom Webpack Configuration\nDESCRIPTION: This JavaScript file configures webpack to override NG-ZORRO theme variables using the `less-loader`. It modifies the `primary-color`, `link-color`, and `border-radius-base` variables. This configuration requires the `@angular-builders/custom-webpack` package.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test   : /\\.less$/,\n        loader: 'less-loader',\n        options: {\n          modifyVars: { // modify theme variable\n            'primary-color': '#1DA57A',\n            'link-color': '#1DA57A',\n            'border-radius-base': '2px'\n          },\n          javascriptEnabled: true\n        }\n      }\n    ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Monaco Editor - Shell\nDESCRIPTION: This shell command shows how to install the Monaco Editor package as a dependency for the Angular project. The Monaco Editor is the underlying editor used by the ng-zorro-antd code editor component.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/code-editor/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install monaco-editor\n```\n\n----------------------------------------\n\nTITLE: Angular JSON Configuration - Adding NG-ZORRO Less\nDESCRIPTION: This JSON snippet adds the less file to the styles array. This enables webpack to build the less file and use it for styles. \nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"styles\": [\n    \"node_modules/ng-zorro-antd/ng-zorro-antd.less\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Login Form Component\nDESCRIPTION: This command generates a login form component using the `form-normal-login` schematic from NG-ZORRO Antd. It provides a quick way to create a basic login form with the specified name.  Ensure NG-ZORRO Antd is installed.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/schematics.zh-CN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng g ng-zorro-antd:form-normal-login login\n```\n\n----------------------------------------\n\nTITLE: Providing ResizeObserver Polyfill in Angular\nDESCRIPTION: This code snippet demonstrates how to provide a polyfill for the ResizeObserver API in an Angular application.  It imports the `NzResizeObserverFactory` from `ng-zorro-antd/cdk/resize-observer` and the `ResizeObserver` polyfill. The `AppModule` provides a custom `NzResizeObserverFactory` that creates a `ResizeObserver` instance using the polyfill if the native `ResizeObserver` is not available. This supports older browsers that lack native ResizeObserver support.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzResizeObserverFactory } from 'ng-zorro-antd/cdk/resize-observer';\nimport ResizeObserver from 'resize-observer-polyfill';\n\n@NgModule({\n  providers: [\n    { provide: NzResizeObserverFactory, useValue: {\n        create(callback: ResizeObserverCallback): ResizeObserver | null {\n          return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n        }\n      }\n    }\n  ]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Import Resizable Styles (LESS)\nDESCRIPTION: Imports the necessary LESS styles for the ng-zorro-antd Resizable component. This is required to apply the default styles to the component.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/resizable/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n@import 'node_modules/ng-zorro-antd/resizable/style/entry.less';\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Empty Content with NZ_CONFIG\nDESCRIPTION: This code snippet demonstrates how to configure the default empty content for ng-zorro-antd components using the `NZ_CONFIG` provider. This allows users to customize the appearance of empty states across the application by providing a custom component, template, or string for `nzDefaultEmptyContent`. The `useValue` object should contain an `empty` property, which contains the `nzDefaultEmptyContent` property.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/empty/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provide: NZ_CONFIG,\n  useValue: {\n    empty: {\n      nzDefaultEmptyContent\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Animations in Notification and Message services - Typescript\nDESCRIPTION: This snippet shows how to disable animations when invoking Notification or Message services by setting `nzAnimate` to `false` in the configuration object.  This provides control over animation behavior when using these services to display notifications or messages.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // ...\n  nzAnimate: false\n}\n```\n\n----------------------------------------\n\nTITLE: Affix Component Usage\nDESCRIPTION: This HTML snippet demonstrates how to use the `nz-affix` component in Ng-Zorro-Antd. The `style` attribute sets the position to absolute with top and left offsets.  It is important to note that children of `nz-affix` cannot be `position: absolute`.  This example sets `nz-affix` to `position: absolute`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/affix/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-affix style=\"position: absolute; top: 10px, left: 10px\">\n  ...\n</nz-affix>\n```\n\n----------------------------------------\n\nTITLE: Autocomplete with Static Options (HTML)\nDESCRIPTION: This snippet shows how to define autocomplete options directly within the `nz-autocomplete` component using `nz-auto-option` elements. Each `nz-auto-option` element represents a single autocomplete suggestion, with the `nzValue` property specifying the value to be used when the option is selected, and the content between the tags being displayed to the user. This uses the `nz-input` element.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/auto-complete/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input nz-input [(ngModel)]=\"value\" [nzAutocomplete]=\"auto\">\n<nz-autocomplete #auto>\n  <nz-auto-option [nzValue]=\"'12345'\">12345</nz-auto-option>\n  <nz-auto-option [nzValue]=\"'23456'\">23456</nz-auto-option>\n  <nz-auto-option [nzValue]=\"'34567'\">34567</nz-auto-option>\n</nz-autocomplete>\n```\n\n----------------------------------------\n\nTITLE: Customize Default Language Pack\nDESCRIPTION: Shows how to override specific text strings within the default ng-zorro-antd language pack.  It merges a custom object with the existing language pack. In this instance, the `items_per_page` text for the pagination component is being overridden.  Requires `ng-zorro-antd/i18n` dependency.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { en_US, provideNzI18n } from 'ng-zorro-antd/i18n';\n\nconst customLanguagePack = {\n  en_US,\n  ...{\n    Pagination: {\n      items_per_page: \"per page\"\n    }\n  }\n}\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzI18n(customLanguagePack)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using nzTreeNodeIndentLine for Node Indentation\nDESCRIPTION: This snippet demonstrates using `nzTreeNodeIndentLine` to display node indentation using indentation lines. No dependencies are required. It's applied directly to the `nz-tree-node` component.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tree-view/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nz-tree-node nzTreeNodeIndentLine></nz-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Customizing Edge Template\nDESCRIPTION: This snippet demonstrates how to customize the rendering of edges in the graph using the `nzGraphEdge` directive. The `edge` variable provides access to the edge's data, allowing for custom display and styling of edges within the template. SVG elements are used for rendering the custom edge.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.zh-CN.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<nz-graph [nzGraphData]=\"data\">\n  <ng-container *nzGraphEdge=\"let edge\">\n    <svg:g>\n      <path></path>\n    </svg:g>\n  </ng-container>\n</nz-graph>\n```\n\n----------------------------------------\n\nTITLE: Generating Component with NG-ZORRO Antd Schematic\nDESCRIPTION: This command generates a component using an NG-ZORRO Antd schematic.  It requires the NG-ZORRO Antd library to be installed in the project.  The `<name>` parameter specifies the name of the component to be created, and `[options]` specifies any additional options for the schematic.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/schematics.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng g ng-zorro-antd:[schematic] <name> [options]\n```\n\n----------------------------------------\n\nTITLE: Committing All Changes\nDESCRIPTION: This command commits all staged changes to your local repository, creating a new commit with a descriptive message following the project's commit message guidelines.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Import Angular Locale Data for Internationalization\nDESCRIPTION: This snippet demonstrates how to import and register locale data for Angular's internationalization support. This is necessary for the ng-zorro Calendar component to display dates and other localized information correctly. It imports the `registerLocaleData` function and the locale data for Simplified Chinese (`zh`) from `@angular/common`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/calendar/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerLocaleData } from '@angular/common';\nimport zh from '@angular/common/locales/zh';\nregisterLocaleData(zh);\n```\n\n----------------------------------------\n\nTITLE: Mention Trigger with textarea HTML\nDESCRIPTION: Shows how to use the `nzMentionTrigger` directive with a textarea element inside the `nz-mention` component.  This specifies the textarea as the element that triggers the mention functionality.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/mention/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-mention>\n  <textarea nzMentionTrigger></textarea>\n</nz-mention>\n```\n\n----------------------------------------\n\nTITLE: Mention Trigger with TextArea - HTML\nDESCRIPTION: This code snippet demonstrates using the `nzMentionTrigger` directive on a textarea element inside the `nz-mention` component. This configuration allows the textarea to trigger the mention functionality.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/mention/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nz-mention>\n  <textarea nzMentionTrigger></textarea>\n</nz-mention>\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment (Bash)\nDESCRIPTION: These commands describe the process of setting up the development environment for NG-ZORRO. It involves cloning the repository, navigating into the directory, installing dependencies using npm, and starting the development server. This allows developers to contribute to the NG-ZORRO project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:NG-ZORRO/ng-zorro-antd.git\n$ cd ng-zorro-antd\n$ npm install\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Serve Angular Application\nDESCRIPTION: Starts the Angular development server and opens the application in a browser. The `--port 0` option automatically selects an available port, and `--open` opens the application in the default browser.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ng serve --port 0 --open\n```\n\n----------------------------------------\n\nTITLE: Install Angular CLI\nDESCRIPTION: Installs the Angular CLI globally, which is a command-line interface for Angular development. This is a prerequisite for creating and managing Angular projects.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @angular/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Src Loader based on environment in ng-zorro-antd\nDESCRIPTION: This code snippet demonstrates how to configure the `nzSrcLoader` in ng-zorro-antd based on the environment (production vs. development). It imports necessary modules, defines an `NzConfig` object with the desired `nzSrcLoader` based on the `environment.production` flag, and provides this configuration using `provideNzConfig`.  The `aliObjectsLoader` (or `createAliObjectsLoader`) and `defaultImageSrcLoader` are used as the loaders. Specifying the base URL for `createAliObjectsLoader` when using it in production is important. Note the slight difference in function name between the two snippets.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/demo/src-loader.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { environment } from 'environments/environment';\n\nimport { NzConfig, provideNzConfig } from 'ng-zorro-antd/core/config';\nimport { aliObjectsLoader, defaultImageSrcLoader } from 'ng-zorro-antd/experimental/image';\n\nconst nzConfig: NzConfig = {\n  imageExperimental: {\n    nzSrcLoader: environment.production ? aliObjectsLoader : defaultImageSrcLoader\n  }\n};\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzConfig(nzConfig)\n  ]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { environment } from 'environments/environment';\n\nimport { NzConfig, provideNzConfig } from 'ng-zorro-antd/core/config';\nimport { createAliObjectsLoader, defaultImageSrcLoader } from 'ng-zorro-antd/experimental/image';\n\nconst nzConfig: NzConfig = {\n  imageExperimental: {\n    nzSrcLoader: environment.production ? createAliObjectsLoader('https://zos.alipayobjects.com/rmsportal') : defaultImageSrcLoader\n  }\n};\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzConfig(nzConfig)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling from Upstream\nDESCRIPTION: This command fetches changes from the upstream (official) repository and merges them into your local master branch, keeping your fork up to date.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: Custom Suggestion Template - HTML\nDESCRIPTION: This code snippet shows how to use a custom template for rendering mention suggestions using `nzMentionSuggestion`. The `nzValueWith` input allows specifying how to extract the value from each suggestion item.  The example displays both the `label` and `value` properties of each suggestion.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/mention/doc/index.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<nz-mention [nzSuggestions]=\"items\" [nzValueWith]=\"valueWith\">\n  <input nz-input nzMentionTrigger />\n  <ng-container *nzMentionSuggestion=\"let item\">\n    <span>{{ item.label }} - {{ item.value }}</span>\n  </ng-container>\n</nz-mention>\n```\n\n----------------------------------------\n\nTITLE: Initializing New Angular Project with Angular CLI\nDESCRIPTION: This snippet demonstrates how to initialize a new Angular project using the Angular CLI, navigate into the project directory, and add the ng-zorro-antd library. It relies on the Angular CLI being installed globally and the user having the necessary permissions to create directories and install packages.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/introduce.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ng new PROJECT_NAME\n$ cd PROJECT_NAME\n$ ng add ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Customizing Group Node Template\nDESCRIPTION: This snippet demonstrates how to customize the rendering of group nodes in the graph using the `nzGraphGroupNode` directive. The `node` variable provides access to the group node's data, allowing for custom display of node information within the template. The component loops and renders each of the nodes in the graph data.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.zh-CN.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<nz-graph [nzGraphData]=\"data\">\n  <ng-container *nzGraphGroupNode=\"let node\">\n    <span>{{ node.name }} - {{ node.label }}</span>\n  </ng-container>\n</nz-graph>\n```\n\n----------------------------------------\n\nTITLE: Input Number With Addons - HTML\nDESCRIPTION: This example demonstrates how to add addons before and after the `nz-input-number` component in NG-ZORRO-ANTD. It uses `span` elements with `nzInputAddonBefore` and `nzInputAddonAfter` directives to display content adjacent to the input field. This replaces the need for `nz-input-number-group` and `ng-template`. This example demonstrates how to use addons with the input number component.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- With addons -->\n<nz-input-number>\n  <span nzInputAddonBefore>Before</span>\n  <span nzInputAddonAfter>After</span>\n</nz-input-number>\n```\n\n----------------------------------------\n\nTITLE: Angular JSON Configuration - Style Preprocessor Options\nDESCRIPTION: This JSON snippet configures the style preprocessor options within the `angular.json` file. By adding a path to the `includePaths` array, it allows importing files from `src/styles/themes` without relative paths.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stylePreprocessorOptions\": {\n      \"includePaths\": [\n        \"src/styles/themes\"\n      ]\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Badge with Count - Ng-Zorro-Antd - HTML\nDESCRIPTION: This code snippet demonstrates how to use the nz-badge component to display a badge with a numeric count. The nzCount property is set to 5, indicating the number to be displayed in the badge. The badge is applied to an anchor element with the class 'head-example'.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/badge/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-badge [nzCount]=\"5\">\n  <a class=\"head-example\"></a>\n</nz-badge>\n```\n\n----------------------------------------\n\nTITLE: Using nzTreeNodeIndentLine for Node Indentation\nDESCRIPTION: This snippet shows how to use the `nzTreeNodeIndentLine` directive to display indentation lines for tree nodes.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tree-view/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nz-tree-node nzTreeNodeIndentLine></nz-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Adding NG-ZORRO with Angular CLI (Bash)\nDESCRIPTION: These commands demonstrate how to create a new Angular project, navigate into the project directory, and add the ng-zorro-antd library using the Angular CLI.  The `ng add` command automatically configures the project to use NG-ZORRO.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ng new PROJECT_NAME\n$ cd PROJECT_NAME\n$ ng add ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Customizing Leaf Node Template\nDESCRIPTION: This snippet demonstrates how to customize the rendering of leaf nodes in the graph using the `nzGraphNode` directive. The `node` variable provides access to the node's data, allowing for custom display of node information within the template. The component loops and renders each of the nodes in the graph data.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nz-graph [nzGraphData]=\"data\">\n  <ng-container *nzGraphNode=\"let node\">\n    <span>{{ node.name }} - {{ node.label }}</span>\n  </ng-container>\n</nz-graph>\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets for Dynamic Loading - Diff\nDESCRIPTION: This diff snippet shows how to configure the `angular.json` file to enable dynamic loading of the Monaco Editor assets. It adds a configuration to copy the Monaco Editor assets from the `node_modules` directory to the `assets/vs/` directory during the build process.  This allows the code editor component to load the necessary files at runtime. Make sure you are using the correct path to the `monaco-editor` folder.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/code-editor/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: Diff\nCODE:\n```\n\"assets\": [\n+ {\n+   \"glob\": \"**/*\",\n+   \"input\": \"./node_modules/monaco-editor/min/vs\",\n+   \"output\": \"/assets/vs/\"\n+ }\n],\n```\n\n----------------------------------------\n\nTITLE: Fetching Icons from Iconfont\nDESCRIPTION: This example demonstrates how to fetch icons from Iconfont using `fetchFromIconfont`.  You must provide the `scriptUrl` for the Iconfont project.  After fetching, you can use the icons by referencing their name with `nzIconfont`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis._iconService.fetchFromIconfont({\n  scriptUrl: 'https://at.alicdn.com/t/font_8d5l8fzk5b87iudi.js'\n});\n```\n\n----------------------------------------\n\nTITLE: Less Color Function Modification\nDESCRIPTION: This snippet shows the breaking change related to the usage of Less functions in NG-ZORRO Antd. Previously, antd provided Less functions needed to be wrapped with ~``, but this is no longer necessary.  The snippet demonstrates the code modification required to adapt to this change. colorEasing, colorPalette and tinycolor are some affected functions.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.zh-CN.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- color(~`colorPalette('@{primary-color}', 5)`)\n+ color(colorPalette('@{primary-color}', 5))\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Repository\nDESCRIPTION: This command adds the official NG-ZORRO repository as an upstream remote to your forked repository, allowing you to easily sync changes from the main repository.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/NG-ZORRO/ng-zorro-antd.git\n```\n\n----------------------------------------\n\nTITLE: Iconfont Usage in Template\nDESCRIPTION: Demonstrates how to use a custom icon from iconfont in the HTML template.  The `nzIconfont` attribute of the `nz-icon` component specifies the icon's name from the iconfont project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.en-US.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<nz-icon nzIconfont=\"icon-tuichu\" />\n```\n\n----------------------------------------\n\nTITLE: Import Basic NG-ZORRO CSS in style.css\nDESCRIPTION: Imports the basic NG-ZORRO CSS file and a specific component's CSS file in `style.css`. This imports common styles and only includes styles for the specified component, reducing CSS size.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@import \"~ng-zorro-antd/style/index.min.css\"; /* 引入基本样式 */\n@import \"~ng-zorro-antd/button/style/index.min.css\"; /* 引入组件样式 */\n```\n\n----------------------------------------\n\nTITLE: Using Template Variable in nz-tab[nzTitle] - HTML\nDESCRIPTION: Demonstrates how to use the template variable `visible` within the `nz-tab[nzTitle]` directive to determine if a tab title is within the visible area, for rendering purposes such as dropdown menus.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tabs/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-tab [nzTitle]=\"titleTemplate\">\n  ...\n  <ng-template #titleTemplate let-visible=\"visible\">...</ng-template>\n</nz-tab>\n```\n\n----------------------------------------\n\nTITLE: Using Template Variable in *nzTabLink - HTML\nDESCRIPTION: This code shows how to use a template variable with `*nzTabLink` to retrieve the visibility status, similar to `nz-tab[nzTitle]`. This is particularly useful when combining tabs with Angular Router links.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tabs/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nz-tab>\n  <a *nzTabLink=\"let visible = visible\" nz-tab-link [routerLink]=\"['.']\">...</a>\n</nz-tab>\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project for Production - Bash\nDESCRIPTION: Builds the Angular project for production, optimizing the code and generating the necessary files for deployment. The `--prod` flag enables production-specific optimizations.  Output files are placed in the `dist` directory by default.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ng build --prod\n```\n\n----------------------------------------\n\nTITLE: Overwriting Configuration in Component - TypeScript\nDESCRIPTION: This snippet shows how to overwrite the global configuration within a component. It provides a new `NzConfigService` and a `NZ_CONFIG` token with a specific configuration for the `button` component (setting `nzSize` to 'large'). This local configuration will only affect the component and its children.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  providers: [\n    // reset local NzConfigService\n    NzConfigService,\n    {\n      provide: NZ_CONFIG,\n      useValue: {\n        button: {\n          nzSize: 'large'\n        }\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Rebasing Branch\nDESCRIPTION: This command rebases your feature branch onto the origin/master branch, incorporating the latest changes from the main repository into your branch.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase origin/master\n```\n\n----------------------------------------\n\nTITLE: Upgrade Angular CDK\nDESCRIPTION: This command upgrades the Angular CDK (Component Development Kit) to the latest compatible version. This ensures compatibility with ng-zorro-antd v19, which depends on specific CDK features and versions. Run this command if your project utilizes `@angular/cdk`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/migration-v19.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cdk\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: This command commits your changes to the local repository, including a message describing the changes. Ensure the commit message follows the guidelines.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Input Number with Affixes - HTML\nDESCRIPTION: This snippet shows how to add prefixes and suffixes to the nz-input-number component.  The `nzInputPrefix` and `nzInputSuffix` attributes, applied to span elements within the `nz-input-number` component, are used to display text before and after the input field respectively.  The input field will inherit styles from the parent.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <!-- With affixes -->\n  <nz-input-number>\n    <span nzInputPrefix>Prefix</span>\n    <span nzInputSuffix>Suffix</span>\n  </nz-input-number>\n```\n\n----------------------------------------\n\nTITLE: Handling Abnormal Image Watermarks in HTML\nDESCRIPTION: This code snippet demonstrates how to handle cases where the image watermark fails to load correctly by providing fallback text content using the `nzContent` property. The `nzWidth`, `nzHeight`, `nzContent`, and `nzImage` properties are bound to the `nz-water-mark` component to customize the watermark.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/water-mark/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-water-mark\n  [nzWidth]=\"212\"\n  [nzHeight]=\"32\"\n  nzContent=\"NG Ant Design\"\n  nzImage=\"https://img.alicdn.com/imgextra/i3/O1CN01UR3Zkq1va9fnZsZcr_!!6000000006188-55-tps-424-64.svg\"\n>\n  <div style=\"height: 500px\"></div>\n</nz-water-mark>\n```\n\n----------------------------------------\n\nTITLE: Setting Image Priority in ng-zorro-antd HTML Template\nDESCRIPTION: This snippet demonstrates how to use the `nzPriority` attribute on the `nz-image` component in an ng-zorro-antd application. It iterates through a list of products and sets the `nzPriority` attribute to `true` for the first 9 items (index 0 to 8), indicating that these images should be preloaded with higher priority during server-side rendering (SSR). The `track product` expression improves performance by providing a unique identifier for each product, helping Angular efficiently update the DOM.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/demo/preloading.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@for (product of products; track product)\n  <nz-image [nzPriority]=\"$index <= 8\"></nz-image>\n}\n\n```\n\n----------------------------------------\n\nTITLE: ng-zorro-antd Table Query Parameters - Typescript\nDESCRIPTION: Illustrates the data structure for query parameters sent to the server when using server-side pagination, sorting, and filtering with ng-zorro-antd's table component.  The structure includes page index, page size, sort criteria (key, direction), and filter criteria (key, value).\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/table/demo/ajax.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  pageIndex: number;\n  pageSize: number;\n  sort: Array<{ key: string; value: 'ascend' | 'descend' | null }>;\n  filter: Array<{ key: string; value: any | any[] }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Template via NzConfigService (TypeScript)\nDESCRIPTION: This snippet shows how to set a default template for a component using `NzConfigService` in the `AppComponent`. It injects `NzConfigService` and uses the `set` method to set the `nzIndicator` template for the `spin` component. This method might lead to an overly large AppComponent.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfigService } from 'ng-zorro-antd/core/config';\n\nexport class AppComponent implements OnInit {\n  private nzConfigService = inject(NzConfigService);\n\n  @ViewChild('nzIndicatorTpl', { static: true })\n  nzIndicator!: TemplateRef<void>;\n\n  ngOnInit(): void {\n    this.nzConfigService.set('spin', { nzIndicator: this.nzIndicator });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supplementing Icons in Child Modules\nDESCRIPTION: This code snippet illustrates how to supplement icons in lazy-loaded modules using `provideNzIconsPatch`.  This approach adds icons specifically to a child component or route's providers, avoiding unnecessary bloat in the main bundle. Once the icons are loaded in the child module, they become available throughout the application.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzIconModule, provideNzIconsPatch } from 'ng-zorro-antd/icon';\n\n// 在 xxx.component.ts 中\n@Component({\n  imports: [NzIconModule],\n  providers: [provideNzIconsPatch([QuestionOutline])]\n})\nclass ChildComponent {}\n\n// 或 在 xxx.routes.ts 中\nconst routes: Routes = [{\n  path: '',\n  providers: [provideNzIconsPatch([QuestionOutline])],\n}]\n```\n\n----------------------------------------\n\nTITLE: Internationalization with nzRouteLabelFn - HTML\nDESCRIPTION: Demonstrates how to use `nzRouteLabelFn` for internationalization.  It specifies the name of the key from the `data` object to use and a translation function to format the breadcrumb label.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.en-US.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<nz-breadcrumb [nzAutoGenerate]=\"true\" [nzRouteLabel]=\"'breadcrumbI18nKey'\" [nzRouteLabelFn]=\"translateFn\"></nz-breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: NzCheckboxOption Interface Definition\nDESCRIPTION: Defines the structure for the `NzCheckboxOption` interface, which is used to specify the options for a checkbox group.  It includes properties for the label, value, and disabled state of each checkbox option. The `label` is a string, the `value` can be either a string or a number, and `disabled` is an optional boolean indicating whether the checkbox is disabled.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/checkbox/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NzCheckboxOption {\n  label: string;\n  value: string | number;\n  disabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Build Angular Project for Production\nDESCRIPTION: Builds the Angular project for production. The `--prod` flag enables optimizations such as minification and tree shaking, reducing the bundle size and improving performance.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ng build --prod\n```\n\n----------------------------------------\n\nTITLE: Installing cron-parser dependency\nDESCRIPTION: This command installs the `cron-parser` package, which is a dependency for the `nz-cron-expression` component. The component requires this package to function correctly.  Install the dependency using npm.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cron-expression/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cron-parser\n```\n\n----------------------------------------\n\nTITLE: Importing All Icons Statically\nDESCRIPTION: Shows the (not recommended) method of importing all icons statically. This involves importing all icons from `@ant-design/icons-angular/icons` and creating an array of `IconDefinition` objects.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.en-US.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as AllIcons from '@ant-design/icons-angular/icons';\n\nconst antDesignIcons = AllIcons as Record<string, IconDefinition>;\nconst icons: IconDefinition[] = Object.keys(antDesignIcons).map(key => antDesignIcons[key])\n```\n\n----------------------------------------\n\nTITLE: Avoid side effects in Angular template expressions - Typescript\nDESCRIPTION: This example shows the dangers of including side effects in Angular template expressions.  Calling a function with side effects in the template binding will cause that function to be executed on every change detection cycle, potentially leading to performance issues and infinite loops. Here, the `value()` method with the `console.log` creates a side effect.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/faq.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  template: `\n    <input [value]=\"value\" />\n  `\n})\nexport class BugComponent {\n  value(): string {\n    console.log('I will run every time');\n    return 'value';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Image Source Loader - TypeScript\nDESCRIPTION: Provides a default implementation of the NzImageSrcLoader function. This loader simply returns the original source URL of the image without any modifications.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const defaultImageSrcLoader: NzImageSrcLoader = ({ src }) => {\n  return src;\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Bundling Strategy in Angular.json\nDESCRIPTION: This configures the `styles` option in `angular.json` for dynamic theme switching. It defines separate bundles for default and dark themes, setting `inject` to `false` to prevent automatic injection and enabling runtime theme switching. `bundleName` specifies the CSS bundle filename.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"styles\": [\n    \"src/styles.less\",\n    {\n      \"input\": \"src/styles/default.less\",\n      \"bundleName\": \"default\",\n      \"inject\": false\n    },\n    {\n      \"input\": \"src/styles/dark.less\",\n      \"bundleName\": \"dark\",\n      \"inject\": false\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Direction in Angular Template\nDESCRIPTION: This snippet demonstrates how to set the text direction for a specific element in an Angular template using the `dir` attribute.  Requires `BidiModule` to be imported. The attribute can be set to 'rtl' for right-to-left or 'ltr' for left-to-right.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/direction.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div dir=\"rtl\"></div>\n```\n\n----------------------------------------\n\nTITLE: Basic Ng-Zorro Pagination Implementation - HTML\nDESCRIPTION: This code snippet shows the basic implementation of the Ng-Zorro pagination component in HTML. It sets the initial page index and the total number of items. The component displays pagination controls for navigating through the data.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/pagination/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-pagination [nzPageIndex]=\"1\" [nzTotal]=\"50\"></nz-pagination>\n```\n\n----------------------------------------\n\nTITLE: NzNotificationRef Interface Definition TypeScript\nDESCRIPTION: This code snippet defines the `NzNotificationRef` interface, which is the object returned when calling `NzNotificationService.success` and similar methods. It provides properties for accessing the notification's ID, a Subject for onClose events, and a Subject for onClick events.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/notification/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NzNotificationRef {\n  messageId: string;\n  onClose: Subject<boolean>; // It would emit an event when the notification is closed, and emit a `true` if it's closed by user\n  onClick: Subject<MouseEvent>;\n}\n```\n\n----------------------------------------\n\nTITLE: Angular JSON Configuration - Custom Webpack Builder\nDESCRIPTION: This JSON snippet shows the diff in the angular.json config file. The main change is switching from the default builder to the `@angular-builders/custom-webpack` builder and configuring the `customWebpackConfig` option to point to a custom webpack configuration file.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"architect\": {\n    \"build\": {\n-     \"builder\": \"@angular-devkit/build-angular:browser\",\n+     \"builder\": \"@angular-builders/custom-webpack:browser\",\n      \"options\": {\n+        \"customWebpackConfig\": {\n+          \"path\": \"./extra-webpack.config.js\",\n+          \"mergeStrategies\": {\n+            \"module.rules\": \"append\"\n+          },\n+          \"replaceDuplicatePlugins\": true\n+        }\n      },\n    },\n    \"serve\": {\n-      \"builder\": \"@angular-devkit/build-angular:dev-server\",\n+      \"builder\": \"@angular-builders/custom-webpack:dev-server\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Breakpoint Widths - JavaScript\nDESCRIPTION: Defines the breakpoint widths used for responsive layouts in Ng-Zorro.  These values are used to trigger responsive behavior based on screen size.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/layout/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  xs: '480px',\n  sm: '768px',\n  md: '992px',\n  lg: '1200px',\n  xl: '1600px',\n  xxl: '1600px'\n}\n```\n\n----------------------------------------\n\nTITLE: Base Theme Styles\nDESCRIPTION: Base theme styles for common styling variables.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_16\n\nLANGUAGE: Less\nCODE:\n```\n// base.less customizes common style variables\n@margin-md: 17px;\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Angular CDK via Angular CLI\nDESCRIPTION: This command updates the Angular CDK package using the Angular CLI. This is relevant if you are using `@angular/cdk` separately in your project. The command should be executed in the project's root directory.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/migration-v19.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng update @angular/cdk\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This command runs all unit tests for the NG-ZORRO library, ensuring that existing functionality is not broken and new features are working as expected.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Angular JSON Configuration - Adding NG-ZORRO CSS\nDESCRIPTION: This JSON snippet demonstrates how to include NG-ZORRO's CSS files within the `angular.json` configuration. It adds a string to the `styles` array, specifying the path to `ng-zorro-antd.css`.  This is an alternative to importing the CSS in a separate stylesheet and is useful when not using LESS.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"options\": {\n      \"styles\": [\n        \"node_modules/ng-zorro-antd/ng-zorro-antd.css\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch\nDESCRIPTION: This code snippet demonstrates how to create a new git branch for making changes to the NG-ZORRO project. The branch should be based on the `master` branch and named descriptively, such as `my-fix-branch`. This isolates changes and facilitates the pull request process.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-fix-branch master\n```\n\n----------------------------------------\n\nTITLE: Using nz-calendar Component - HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the `nz-calendar` component from ng-zorro-antd. It showcases binding to properties such as `ngModel` for date selection, `nzMode` for display mode (month/year), and event emitters for panel and selection changes. It also shows how to customize the display of date cells using templates referenced by `nzDateCell` and the `*nzDateCell` structural directive.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/calendar/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nz-calendar\n  [nzDateCell]=\"dateCellTpl\"\n  [(ngModel)]=\"selectedDate\"\n  [(nzMode)]=\"mode\"\n  (nzPanelChange)=\"panelChange($event)\"\n  (nzSelectChange)=\"selectChange($event)\"\n>\n  <!-- Another method for cell definition -->\n  <div *nzDateCell>Foo</div>\n</nz-calendar>\n<!-- Passing TemplateRef -->\n<ng-template #dateCellTpl let-date><span>{{ date | date:'d'}}</span></ng-template>\n```\n\n----------------------------------------\n\nTITLE: Input Number With Affixes - HTML\nDESCRIPTION: This code demonstrates how to add prefixes and suffixes to the redesigned input-number component of NG-ZORRO-ANTD. It uses `nzInputPrefix` and `nzInputSuffix` directives within `span` elements to display text before and after the input field, respectively.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.en-US.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- With affixes -->\n<nz-input-number>\n  <span nzInputPrefix>Prefix</span>\n  <span nzInputSuffix>Suffix</span>\n</nz-input-number>\n```\n\n----------------------------------------\n\nTITLE: NzShowSearchOptions type definition\nDESCRIPTION: This TypeScript type defines the structure of `nzShowSearch` options when using the search functionality of cascader, including properties for filter and sorter functions.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cascader/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NzShowSearchOptions = boolean | {\n  filter?: NzCascaderFilter;\n  sorter?: NzCascaderSorter;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Modal Title with nzModalTitle in HTML\nDESCRIPTION: Demonstrates how to create a custom title for a modal dialog using the `nzModalTitle` directive. This can be done using a `div` or a `ng-template` to define the title content.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/modal/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div *nzModalTitle> Custom Modal Title </div>\n\n<!-- or -->\n\n<ng-template [nzModalTitle]> Custom Modal Title </ng-template>\n```\n\n----------------------------------------\n\nTITLE: Mention Trigger with input HTML\nDESCRIPTION: Shows how to use the `nzMentionTrigger` directive with a standard input element inside the `nz-mention` component. The input will trigger the mention functionality.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/mention/doc/index.en-US.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-mention>\n  <input nzMentionTrigger />\n</nz-mention>\n```\n\n----------------------------------------\n\nTITLE: Importing Graph Component Styles with Less\nDESCRIPTION: This snippet demonstrates how to import the necessary LESS styles for the ng-zorro-antd Graph component. Importing the styles ensures that the component is rendered correctly with its default styling. This is essential for using the component in an Angular project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n@import 'node_modules/ng-zorro-antd/graph/style/entry.less';\n```\n\n----------------------------------------\n\nTITLE: NzResizeDirection Type (TypeScript)\nDESCRIPTION: Defines the `NzResizeDirection` type, which represents the possible directions for resizing the element. It includes options for top, right, bottom, left, and combinations of these.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/resizable/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype NzResizeDirection = 'top' | 'right' | 'bottom' | 'left' | 'topRight' | 'bottomRight' | 'bottomLeft' | 'topLeft';\n```\n\n----------------------------------------\n\nTITLE: Adding Icons in Lazy-loaded Components\nDESCRIPTION: Demonstrates how to import icons within lazy-loaded components using `provideNzIconsPatch`. This prevents increasing the main bundle size.  Icons become usable across the application once loaded.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzIconModule, provideNzIconsPatch } from 'ng-zorro-antd/icon';\n\n// in xxx.component.ts\n@Component({\n  imports: [NzIconModule],\n  providers: [provideNzIconsPatch([QuestionOutline])]\n})\nclass ChildComponent {}\n\n// or in xxx.routes.ts\nconst routes: Routes = [{\n  path: '',\n  providers: [provideNzIconsPatch([QuestionOutline])],\n}]\n```\n\n----------------------------------------\n\nTITLE: Setting NZ_DATE_LOCALE for date-fns\nDESCRIPTION: This snippet illustrates how to enable date-fns for date formatting in ng-zorro-antd. It provides the `NZ_DATE_LOCALE` token in the application configuration with a date-fns locale object (e.g., `enUS`). This will make all date-related components use date-fns for formatting.  Requires `date-fns/locale` dependency.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 在 App Config 中设置 NZ_DATE_LOCALE 的值，将激活 date-fns 方式的日期格式化展示\nimport { enUS, ja } from 'date-fns/locale';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    { provide: NZ_DATE_LOCALE, useValue: enUS }\n  ]\n}\n\n// 运行时切换语言为日语\nimport { NzI18nService } from 'ng-zorro-antd/i18n';\n\nexport class AppComponent{\n  private i18n = inject(NzI18nService);\n\n  switchLanguage() {\n    this.i18n.setDateLocale(ja);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out Feature Branch\nDESCRIPTION: This command switches your local working directory to the specified feature branch, allowing you to work on specific features or bug fixes in isolation.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout docs-fix\n```\n\n----------------------------------------\n\nTITLE: Using Template Variable in nz-tab[nzTitle] - HTML\nDESCRIPTION: This code demonstrates how to use a template variable within the `nz-tab[nzTitle]` to access the visibility status.  The `visible` variable indicates if the tab is currently displayed.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tabs/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-tab [nzTitle]=\"titleTemplate\">\n  ...\n  <ng-template #titleTemplate let-visible=\"visible\">...</ng-template>\n</nz-tab>\n```\n\n----------------------------------------\n\nTITLE: Compile LESS with custom prefix (bash)\nDESCRIPTION: This bash command demonstrates how to compile the `antd.variable.less` file with a custom prefix to resolve conflicts when multiple Ant Design style files are present.  It uses `lessc` with the `--modify-var` option to set a custom `ant-prefix`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme-variable.en-US.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlessc --js --modify-var=\"ant-prefix=custom\" antd/dist/antd.variable.less modified.css\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Origin\nDESCRIPTION: This command pushes your feature branch to your forked repository on GitHub, making your changes available for review and potential merging into the main codebase.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Basic Timeline Implementation - HTML\nDESCRIPTION: This code snippet demonstrates the basic usage of the `nz-timeline` component to create a simple timeline with four items.  Each `nz-timeline-item` represents a step in the timeline.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/timeline/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-timeline>\n  <nz-timeline-item>step1 2015-09-01</nz-timeline-item>\n  <nz-timeline-item>step2 2015-09-01</nz-timeline-item>\n  <nz-timeline-item>step3 2015-09-01</nz-timeline-item>\n  <nz-timeline-item>step4 2015-09-01</nz-timeline-item>\n</nz-timeline>\n```\n\n----------------------------------------\n\nTITLE: NzCursorType Type (TypeScript)\nDESCRIPTION: Defines the `NzCursorType` type, representing the cursor type used for the resize handle. The values can be 'window' or 'grid'.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/resizable/doc/index.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype NzCursorType = 'window' | 'grid';\n```\n\n----------------------------------------\n\nTITLE: Cascader Value Example - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to configure the cascader component with options and bind a value to it using `ngModel`.  It demonstrates the changes introduced in v19, where the value passed to `ngModel` should be the actual value in the options list.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n    template: `<nz-cascader [nzOptions]=\"options\" [ngModel]=\"value\"></nz-cascader>`\n  })\n  export class ExampleComponent {\n    value = [{ label: 'NG ZORRO', value: 'ng-zorro-antd' }]\n  }\n```\n\n----------------------------------------\n\nTITLE: Import Resizable Component Style - Less\nDESCRIPTION: This code snippet shows how to import the style for the Resizable component in ng-zorro-antd using Less. This is necessary to apply the component's visual styles.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/resizable/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n@import 'node_modules/ng-zorro-antd/resizable/style/entry.less';\n```\n\n----------------------------------------\n\nTITLE: Input Number With Affixes - HTML\nDESCRIPTION: This example demonstrates how to add prefixes and suffixes to the `nz-input-number` component in NG-ZORRO-ANTD. It uses `span` elements with `nzInputPrefix` and `nzInputSuffix` directives to display text before and after the input field. This approach is a replacement for the deprecated `nz-input-number-group` with `ng-template` method for achieveing the same effect. The code showcases the basic structure for adding affixes.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.zh-CN.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- With affixes -->\n<nz-input-number>\n  <span nzInputPrefix>Prefix</span>\n  <span nzInputSuffix>Suffix</span>\n</nz-input-number>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Icon Loading Configuration\nDESCRIPTION: This JSON configuration demonstrates how to set up dynamic icon loading in `angular.json`.  It configures the build process to copy SVG icon files from the `node_modules` directory to the `assets` directory, enabling NG-ZORRO to load icons on demand and reduces the initial bundle size. Note that you should configure the assets path correctly based on where the icons are physically located.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets\": [\n    {\n      \"glob\": \"**/*\",\n      \"input\": \"./node_modules/@ant-design/icons-angular/src/inline-svg/\",\n      \"output\": \"/assets/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Image Watermark Errors - HTML\nDESCRIPTION: This code snippet demonstrates how to use both an image and text content for the nz-water-mark component.  The text content acts as a fallback when the image fails to load. It is good practice to provide alternative content when using image watermarks.  This approach enhances the robustness of the watermark functionality. Requires nz-water-mark component from ng-zorro-antd.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/water-mark/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-water-mark\n  [nzWidth]=\"212\"\n  [nzHeight]=\"32\"\n  nzContent=\"NG Ant Design\"\n  nzImage=\"https://img.alicdn.com/imgextra/i3/O1CN01UR3Zkq1va9fnZsZcr_!!6000000006188-55-tps-424-64.svg\"\n>\n  <div style=\"height: 500px\"></div>\n</nz-water-mark>\n```\n\n----------------------------------------\n\nTITLE: Create a New Angular Project\nDESCRIPTION: Creates a new Angular project using the Angular CLI. This command initializes a new project directory with the specified name and installs the necessary dependencies.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ng new PROJECT-NAME\n```\n\n----------------------------------------\n\nTITLE: Importing DragDropModule for Drag Sorting\nDESCRIPTION: To enable drag-and-drop functionality, the DragDropModule from '@angular/cdk/drag-drop' needs to be imported.  This import statement is necessary to use the CDK's drag and drop features for implementing drag sorting in the application.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/table/demo/drag-sorting.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n```\n\n----------------------------------------\n\nTITLE: Basic Steps Component Usage - HTML\nDESCRIPTION: This code snippet demonstrates the basic usage of the `nz-steps` and `nz-step` components from ng-zorro-antd to create a simple steps navigation. It shows how to define the steps using `nz-step` elements within the `nz-steps` container and how to set the title for each step using the `nzTitle` property. No external dependencies are required other than the ng-zorro-antd library itself.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/steps/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-steps>\n  <nz-step nzTitle=\"第一步\"></nz-step>\n  <nz-step nzTitle=\"第二步\"></nz-step>\n  <nz-step nzTitle=\"第三步\"></nz-step>\n</nz-steps>\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for NG-ZORRO Dark/Compact Theme\nDESCRIPTION: This JavaScript snippet demonstrates configuring Webpack to load dark and compact themes.  It requires the `dark-theme` and `compact-theme` files from `ng-zorro-antd` and uses `less-loader` with `modifyVars` to apply theme-specific variables. `javascriptEnabled` is set to true to enable JavaScript in Less files.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst darkThemeVars = require('ng-zorro-antd/dark-theme');\nconst compactThemeVars = require('ng-zorro-antd/compact-theme');\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test   : /\\.less$/,\n        loader: 'less-loader',\n        options: {\n          modifyVars: {\n            'hack': `true;@import \"${require.resolve('ng-zorro-antd/style/color/colorPalette.less')}\";`,\n            ...darkThemeVars,\n            ...compactThemeVars\n          },\n          javascriptEnabled: true\n        }\n      }\n    ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Install Graph Component Dependencies - Shell\nDESCRIPTION: Installs the required dependencies for the ng-zorro-antd Graph component using npm. These dependencies are necessary for the graph layout and interaction.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dagre-compound dagre d3-transition d3-zoom d3-selection d3-shape d3-drag @types/d3\n```\n\n----------------------------------------\n\nTITLE: Updating date format - date-fns v1 to v2 in ng-zorro-antd\nDESCRIPTION: This code snippet illustrates the change in date format required when upgrading to date-fns v2 in ng-zorro-antd. It shows the difference in the `nzFormat` attribute for the `nz-date-picker` component.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- datefns v1 -->\n<nz-date-picker nzFormat=\"YYYY-MM-DD\"></nz-date-picker>\n\n<!-- datefns v2 -->\n<nz-date-picker nzFormat=\"yyyy-MM-dd\"></nz-date-picker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Empty Component\nDESCRIPTION: This code snippet demonstrates how to configure a global custom Empty component using `NZ_CONFIG`. The `nzDefaultEmptyContent` property is used to specify the custom component or template that should be used when data is empty.  This allows for a consistent look and feel across the application when displaying empty states. The `provide` and `useValue` syntax is part of Angular's dependency injection system.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/empty/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  provide: NZ_CONFIG,\n  useValue: {\n    empty: {\n      nzDefaultEmptyContent\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submenu with Title and Icon - HTML\nDESCRIPTION: This snippet shows how to define the title and icon of an `nz-submenu` using different approaches: directly with `nzTitle` and `nzIcon`, using the `title` slot with `nz-icon`, or utilizing an `ng-template`. The component relies on the ng-zorro-antd library for styling and functionality, requiring the `nz-icon` component.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/menu/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<li nz-submenu nzTitle=\"SubTitle\" nzIcon=\"appstore\"></li>\n\n<li nz-submenu>\n  <span title>\n    <nz-icon nzType=\"appstore\" />\n    <span>SubTitle</span>\n  </span>\n</li>\n\n<li nz-submenu [nzTitle]=\"titleTpl\"></li>\n<ng-template #titleTpl>\n  <nz-icon nzType=\"appstore\" />\n  <span>SubTitle</span>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Defining NzCascaderOption Interface in Typescript\nDESCRIPTION: This code snippet defines the `NzCascaderOption` interface used to represent options in the `nz-cascader` component. It includes properties for value, label, title, disabled state, loading state, leaf node indicator, child options, and checkbox disabling. It also allows for custom properties via an index signature.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cascader/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NzCascaderOption {\n  value?: any;\n  label?: string;\n  title?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  isLeaf?: boolean;\n  children?: NzCascaderOption[];\n  disableCheckbox?: boolean;\n\n  [key: string]: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing to Origin\nDESCRIPTION: This command pushes the changes from your local master branch to your forked repository on GitHub, making your updates available remotely.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Install Monaco Editor - Shell\nDESCRIPTION: Installs the Monaco Editor package using npm. This is a prerequisite for using the ng-zorro-antd Code Editor component, as it relies on Monaco Editor for its core functionality. Ensure npm is installed.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/code-editor/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install monaco-editor\n```\n\n----------------------------------------\n\nTITLE: Using FactoryProvider for Global Template (TypeScript)\nDESCRIPTION: This snippet demonstrates using a `FactoryProvider` to provide a default template for a component. A separate `GlobalTemplatesComponent` is defined to hold the template, and a factory function `nzConfigFactory` is used to create the configuration object. The `createComponent` function is used to access the component's instance and its template.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.zh-CN.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// The module-level Component which contains template references.\n// Exporting is required for AOT compatibility\n@Component({\n  template: `\n    <ng-template #nzIndicatorTpl>\n      <span class=\"ant-spin-dot\">\n        <nz-icon nzType=\"loading\" />\n      </span>\n    </ng-template>\n  `\n})\nexport class GlobalTemplatesComponent {\n  @ViewChild('nzIndicatorTpl', { static: true })\n  nzIndicator!: TemplateRef<void>;\n}\n\n// The Factory function\nconst nzConfigFactory = (): NzConfig => {\n  const environmentInjector = inject(EnvironmentInjector);\n  const { nzIndicator } = createComponent(component, { environmentInjector }).instance;\n  return {\n    spin: {\n      nzIndicator\n    }\n  };\n};\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    { // The FactoryProvider\n      provide: NZ_CONFIG,\n      useFactory: nzConfigFactory\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Input Number With Addons - HTML\nDESCRIPTION: This code demonstrates how to add addons before and after the redesigned input-number component of NG-ZORRO-ANTD. It uses `nzInputAddonBefore` and `nzInputAddonAfter` directives within `span` elements to display content before and after the input field, respectively.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.en-US.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- With addons -->\n<nz-input-number>\n  <span nzInputAddonBefore>Before</span>\n  <span nzInputAddonAfter>After</span>\n</nz-input-number>\n```\n\n----------------------------------------\n\nTITLE: Breakpoint Width Definitions - JavaScript\nDESCRIPTION: This JavaScript object defines the breakpoint widths used for responsive layout adjustments in ng-zorro. These breakpoints are used by the nz-sider component to determine when to collapse or expand the sidebar based on the screen size.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/layout/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  xs: '575px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px'\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Group Title Definition - HTML\nDESCRIPTION: This code snippet demonstrates the different ways to define the title for an `nz-menu-group` in Ng-Zorro-Antd. It covers using the `nzTitle` attribute directly, embedding HTML with an icon and span, and utilizing a template reference. Requires Ng-Zorro-Antd's icon component (`nz-icon`).\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/menu/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<li nz-menu-group nzTitle=\"SubTitle\" nzIcon=\"appstore\"></li>\n\n<li nz-menu-group>\n  < title>\n  <nz-icon nzType=\"appstore\" />\n  <span>SubTitle</span>\n  </span>\n</li>\n\n<li nz-menu-group [nzTitle]=\"titleTpl\"></li>\n<ng-template #titleTpl>\n  <nz-icon nzType=\"appstore\" />\n  <span>SubTitle</span>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default i18n Language - ng-zorro-antd (TypeScript)\nDESCRIPTION: This code snippet configures the default internationalization (i18n) language for ng-zorro-antd. It imports the necessary modules, registers locale data for Angular, and provides the `NzI18nService` with the desired language pack. It relies on `@angular/common` and `ng-zorro-antd/i18n`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/i18n.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** config angular i18n **/\nimport { registerLocaleData } from '@angular/common';\nimport en from '@angular/common/locales/en';\nregisterLocaleData(en);\n\n/** config ng-zorro-antd i18n **/\nimport { provideNzI18n, en_US } from 'ng-zorro-antd/i18n';\n\n/** set the default i18n config **/\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    // ...\n    provideNzI18n(en_US)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cascader Component Value Example - TypeScript\nDESCRIPTION: This code shows how the cascader component previously extracted values when the model was of type `NzCascaderOption[]`.  The component would extract the value from each item's `value` property. This behavior has been removed in v19 to ensure the input and output values are consistent.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  template: `<nz-cascader [nzOptions]=\"options\" [ngModel]=\"value\"></nz-cascader>`\n})\nexport class ExampleComponent {\n  value = [{ label: 'NG ZORRO', value: 'ng-zorro-antd' }]\n}\n```\n\n----------------------------------------\n\nTITLE: Development Setup for ng-zorro-antd\nDESCRIPTION: These bash commands are used to set up a local development environment for the ng-zorro-antd library. It involves cloning the repository, navigating to the project directory, installing dependencies using npm, and starting the development server using the `npm run start` command. This allows contributors to develop and test changes to the library.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/README-zh_CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:NG-ZORRO/ng-zorro-antd.git\n$ cd ng-zorro-antd\n$ npm install\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: NzResizeEvent Interface (TypeScript)\nDESCRIPTION: Defines the `NzResizeEvent` interface, which represents the event emitted when the resizable element is resized.  It includes properties for width, height, column, direction, and the original mouse event.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/resizable/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NzResizeEvent {\n  width?: number;\n  height?: number;\n  col?: number;\n  direction?: NzResizeDirection;\n  mouseEvent?: MouseEvent;\n}\n```\n\n----------------------------------------\n\nTITLE: Using nz-avatar-group in HTML (Angular)\nDESCRIPTION: This snippet demonstrates how to use the `nz-avatar-group` component in ng-zorro-antd. It wraps individual `nz-avatar` components, allowing them to be displayed as a group. The `nzIcon` property is used to display a user icon within the avatar.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/avatar/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-avatar-group>\n  <nz-avatar nzIcon=\"user\"></nz-avatar>\n  <!--  ...  -->\n</nz-avatar-group>\n```\n\n----------------------------------------\n\nTITLE: Disable Animations in Modal/Drawer Services - TS\nDESCRIPTION: This snippet shows how to disable animations when using the Modal or Drawer services by passing `nzNoAnimation: true` in the configuration object. This disables animations specifically for the modal or drawer instance being created.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    ...,\n    nzNoAnimation: true\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting data immutably in Angular using Typescript\nDESCRIPTION: This code snippet demonstrates how to delete data immutably from an array in Angular.  `filter` method is used to create a new array excluding the element that needs to be deleted. This approach is essential when using OnPush change detection in ng-zorro-antd, because mutating the original array will not trigger a change detection.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/faq.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 删除数据\nthis.dataSet = this.dataSet.filter(d => d.key !== i);\n```\n\n----------------------------------------\n\nTITLE: Input Number Custom Handler Icons - HTML\nDESCRIPTION: This example demonstrates how to add custom handler icons to the `nz-input-number` component in NG-ZORRO-ANTD.  It uses `nz-icon` components with `nzInputNumberUpIcon` and `nzInputNumberDownIcon` directives to customize the increment/decrement buttons. This replaces the older `nz-input-number-group` approach. The code shows the basic structure to achieve this.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Custom handler icons -->\n<nz-input-number>\n  <nz-icon nzInputNumberUpIcon />\n  <nz-icon nzInputNumberDownIcon />\n</nz-input-number>\n```\n\n----------------------------------------\n\nTITLE: Load Theme Dynamically in TypeScript\nDESCRIPTION: This TypeScript snippet provides a function `loadTheme` to dynamically load a theme by creating a link element and adding the theme's class to the `<html>` element. It also removes the previous theme.  It handles the initial load differently to prevent a flash of unstyled content.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nloadTheme(firstLoad = true): Promise<Event> {\n  const theme = this.currentTheme;\n  if (firstLoad) {\n    document.documentElement.classList.add(theme);\n  }\n  this.loadCss(`${theme}.css`, theme).then(\n    e => {\n      if (!firstLoad) {\n        document.documentElement.classList.add(theme);\n      }\n      this.removeUnusedTheme(this.previousTheme);\n      resolve(e);\n    },\n    e => reject(e)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Menu Usage - HTML\nDESCRIPTION: This code snippet demonstrates the basic implementation of a dropdown menu using ng-zorro-antd. It utilizes the `nz-dropdown` directive to trigger the dropdown and `nz-dropdown-menu` to define the menu content. The `nz-menu` and `nz-menu-item` components are used to create the individual menu items.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/dropdown/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a nz-dropdown [nzDropdownMenu]=\"menu\">Hover me</a>\n<nz-dropdown-menu #menu=\"nzDropdownMenu\">\n  <ul nz-menu>\n    <li nz-menu-item>1st menu item</li>\n    <li nz-menu-item>2nd menu item</li>\n    <li nz-menu-item>3rd menu item</li>\n  </ul>\n</nz-dropdown-menu>\n```\n\n----------------------------------------\n\nTITLE: Importing BidiModule in Angular\nDESCRIPTION: Imports the `BidiModule` from `@angular/cdk/bidi`. This module is required to utilize the bidi functionality within Angular templates. It enables the use of the `dir` attribute to control text direction at the component or element level.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/direction.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BidiModule } from '@angular/cdk/bidi';\n```\n\n----------------------------------------\n\nTITLE: Using Iconfont Icon in Template\nDESCRIPTION: This code shows how to use an Iconfont icon after it has been fetched and added to the application. The `nzIconfont` attribute is used to specify the name of the Iconfont icon to display.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<nz-icon nzIconfont=\"icon-tuichu\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ng-zorro-antd theme with NzConfig in TypeScript\nDESCRIPTION: This code snippet shows how to configure the ng-zorro-antd theme using the `NzConfig` interface and the `provideNzConfig` function.  The configuration is provided in the root injector. The `primaryColor` is being set here as an example.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme-variable.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfig, provideNzConfig } from 'ng-zorro-antd/core/config';\n\nconst ngZorroConfig: NzConfig = {\n  // 注意组件名称没有 nz 前缀\n  theme: {\n    primaryColor: '#1890ff'\n  }\n};\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzConfig(ngZorroConfig)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Data for Lazy Loaded Breadcrumb - Typescript\nDESCRIPTION: This example illustrates how to set breadcrumb data for lazy-loaded routes. The `data` property should be placed on the parent route configuration, ensuring that the breadcrumb information is available even when the child module is loaded asynchronously. The `breadcrumb` property defines the display name.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  path: 'first',\n  loadChildren: () => import('./first/first.module').then(m => m.FirstModule),\n  data: {\n    breadcrumb: 'First'\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing All Icons (Not Recommended)\nDESCRIPTION: This TypeScript code shows how to import all icons from `@ant-design/icons-angular`.  While possible, this approach is strongly discouraged as it can significantly increase the bundle size.  It's better to import only the icons that are actually used in the application.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.zh-CN.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as AllIcons from '@ant-design/icons-angular/icons';\n\nconst antDesignIcons = AllIcons as Record<string, IconDefinition>;\nconst icons: IconDefinition[] = Object.keys(antDesignIcons).map(key => antDesignIcons[key])\n```\n\n----------------------------------------\n\nTITLE: Local Configuration Override (TypeScript)\nDESCRIPTION: This snippet shows how to override the global configuration for a specific component using Angular's dependency injection. It provides a new `NzConfigService` and a `NZ_CONFIG` token with specific configuration values for the `button` component within the component's providers array.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  providers: [\n    // 重设本地 NzConfigService\n    NzConfigService,\n    {\n      provide: NZ_CONFIG,\n      useValue: {\n        button: {\n          nzSize: 'large'\n        }\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Angular Locale Data for Ng-Zorro DatePicker\nDESCRIPTION: This code snippet demonstrates how to import and register locale data in Angular, which is necessary for internationalizing the nz-date-picker component. It imports the registerLocaleData function and the zh (Chinese) locale data from @angular/common. This allows the DatePicker to display dates and times according to the Chinese locale.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/date-picker/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerLocaleData } from '@angular/common';\nimport zh from '@angular/common/locales/zh';\n\nregisterLocaleData(zh);\n```\n\n----------------------------------------\n\nTITLE: Defining Route Data for Breadcrumb - Typescript\nDESCRIPTION: This code snippet demonstrates how to define the `data` property within a route configuration to specify the breadcrumb display name when using the `nzAutoGenerate` feature. The `breadcrumb` property within the `data` object is used to set the text that will be displayed for the corresponding breadcrumb item.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  path: 'path',\n  component: SomeComponent,\n  data: {\n    breadcrumb: 'Display Name'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ng-zorro-antd Components in Angular\nDESCRIPTION: This code snippet shows how to import a specific component module (NzButtonModule) from the ng-zorro-antd library into an Angular component. This is essential for using the library's UI elements in your Angular application. The `imports` array in the `@Component` decorator is used to declare the module.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/README-zh_CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzButtonModule } from 'ng-zorro-antd/button';\n\n@Component({\n  imports: [ NzButtonModule ]\n})\nexport class AppComponent {}\n```\n\n----------------------------------------\n\nTITLE: Disable Animations Globally with NoopAnimationsModule - TS\nDESCRIPTION: This snippet demonstrates how to disable animations globally in an Angular application by replacing `BrowserAnimationsModule` with `NoopAnimationsModule`. It configures the application to use no animations, impacting all NG-ZORRO components.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideNoopAnimations } from '@angular/platform-browser/animations';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    // ...\n    provideNoopAnimations()\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Global Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to dynamically change the global configuration for a component using the `NzConfigService.set` method. It injects the `NzConfigService` and calls the `set` method to change the `nzSize` property of the `button` component's configuration.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/global-config.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzConfigService } from 'ng-zorro-antd/core/config';\n\n@Component({})\nexport class ChangeZorroConfigComponent {\n  private nzConfigService = inject(NzConfigService);\n\n  onChangeConfig() {\n    this.nzConfigService.set('button', { nzSize: 'large' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Breadcrumb Data for Lazy Loaded Modules - Typescript\nDESCRIPTION: Shows how to configure breadcrumb data for lazy-loaded modules. The `data` property is defined in the parent module's route configuration. The `breadcrumb` field in the `data` object specifies the display name for the breadcrumb item within the lazy-loaded module's context.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  path: 'first',\n  loadChildren: () => import('./first/first.module').then(m => m.FirstModule),\n  data: {\n    breadcrumb: 'First'\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BidiModule for RTL Support - ng-zorro-antd\nDESCRIPTION: This TypeScript code shows how to import the `BidiModule` from `@angular/cdk/bidi` to enable bi-directional support in your Angular application using ng-zorro-antd. This module is crucial for handling RTL layouts properly.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BidiModule } from '@angular/cdk/bidi';\n```\n\n----------------------------------------\n\nTITLE: Pulling from Upstream Master Branch\nDESCRIPTION: This command fetches and merges the latest changes from the upstream master branch into your local master branch, keeping your forked repository up-to-date.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream master\n```\n\n----------------------------------------\n\nTITLE: Configuring NZ_DATE_FNS_COMPATIBLE provider in Angular\nDESCRIPTION: This code snippet shows how to configure the `NZ_DATE_FNS_COMPATIBLE` provider in an Angular application to maintain compatibility with date-fns v1 formats when upgrading to ng-zorro-antd v9. This is a temporary solution, as support for v1 formats will be removed in a future version.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  {\n\t\t\tprovide: NZ_DATE_FNS_COMPATIBLE,\n\t\t\tuseValue: true\n\t\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Direction via HTML\nDESCRIPTION: Sets the default text direction for the entire document by adding the `dir` attribute to the `html` tag. This attribute can be set to either \"rtl\" (right-to-left) or \"ltr\" (left-to-right). This method applies the direction to all elements within the document unless overridden by a more specific setting.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/direction.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html dir=\"rtl\"></html>\n```\n\n----------------------------------------\n\nTITLE: Rebasing Feature Branch on Master\nDESCRIPTION: This command rebases your feature branch onto the latest changes from the origin/master branch, ensuring that your feature branch is based on the most up-to-date codebase.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase origin/master\n```\n\n----------------------------------------\n\nTITLE: Updating Dynamic Icon Assets Source\nDESCRIPTION: This example demonstrates how to use `NzIconService` to change the base URL for dynamic icon loading.  This is useful when serving icons from a CDN or a custom location.  The `changeAssetsSource` method updates the prefix used when fetching icons dynamically.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/icon/doc/index.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis._iconService.changeAssetsSource('https://mycdn.somecdn.com/icons')\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Route Function - HTML\nDESCRIPTION: This snippet showcases how to use the `nzRouteFn` input property to customize the route for breadcrumb links, enabling modifications like adding query parameters. A function `customRoute` is passed that modifies the URL of the generated breadcrumb link.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.zh-CN.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<nz-breadcrumb [nzAutoGenerate]=\"true\" [nzRouteLabel]=\"'breadcrumbI18nKey'\" [nzRouteLabelFn]=\"translateFn\" [nzRouteFn]=\"customRoute\"></nz-breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Route Data and Translation Function - Typescript\nDESCRIPTION: This code defines the route data containing the i18n key and the `translateFn` function, which uses a translation service to resolve the text from the provided key. The `breadcrumbI18nKey` is expected to hold a translation key.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// In Route\n{\n  path: 'path',\n  component: SomeComponent,\n  data: {\n    breadcrumbI18nKey: 'i18n.aaa.bbbb'\n  }\n}\n\n// In component\ntranslateFn = (key: string) => this.yourI18nService.translate(key);\n```\n\n----------------------------------------\n\nTITLE: Disable Wave Effect Globally - TS\nDESCRIPTION: This snippet shows how to disable the wave effect globally using `provideNzWave` and setting the `disabled` property to `true`. It can also be achieved by using `NoopAnimationsModule`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.zh-CN.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideNzWave } from 'ng-zorro-antd/core/wave';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzWave({ disabled: true })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Aliyun theme in Less - ng-zorro-antd\nDESCRIPTION: This Less code snippet shows how to import the built-in Aliyun theme for ng-zorro-antd. This allows you to quickly apply a pre-defined theme to your application. The import statement uses a relative path to the theme file within the `ng-zorro-antd` package.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Less\nCODE:\n```\n@import \"~ng-zorro-antd/ng-zorro-antd.aliyun.less\";\n```\n\n----------------------------------------\n\nTITLE: Migrating i element to span element in NG-ZORRO Antd icon component\nDESCRIPTION: This snippet demonstrates a breaking change in NG-ZORRO Antd where the `nz-icon` component has been updated to use `span` element instead of `i` element. This example demonstrates how to update the html code to reflect this change.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.zh-CN.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- <i nz-icon nzType=\"search\" nzTheme=\"outline\"></i>\n+ <span nz-icon nzType=\"search\" nzTheme=\"outline\"></span>\n```\n\n----------------------------------------\n\nTITLE: CloudinaryLoader Creation - Typescript\nDESCRIPTION: Creates an image source loader specifically for Cloudinary CDN. It requires the Cloudinary domain and returns a loader function that constructs the image URL with parameters for limiting size, automatic quality adjustment, and specified width optimization.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.en-US.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * CloudinaryLoader return format\n * {domain}/c_limit,q_auto,w_{width}/{src}\n */\nexport function createCloudinaryLoader(domain: string): NzImageSrcLoader;\n```\n\n----------------------------------------\n\nTITLE: Setting Direction in Ng-zorro Service (Modal)\nDESCRIPTION: This snippet demonstrates how to set the text direction for an ng-zorro modal service. It shows how to set the `nzDirection` property when creating a modal.  It also shows how to set the direction through the `NzConfigService`. The dependency is `NzModalService` and `NzConfigService` from `ng-zorro-antd`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/direction.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent {\n  constructor(private modalService: NzModalService, private configService: NzConfigService) { }\n\n  openModal(): void {\n    this.modal.create({\n      nzDirection: 'rtl'\n    })\n  }\n\n  setDirWithConfig(): void {\n    this.nzConfigService.set('modal', { nzDirection: 'rtl' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Wave Effect Globally using provideNzWave - Typescript\nDESCRIPTION: This snippet shows how to disable the wave effect globally in an Angular application using `provideNzWave`. Setting the `disabled` property to `true` prevents the wave effect from being rendered across the application. This is an alternative to using `NoopAnimationsModule`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideNzWave } from 'ng-zorro-antd/core/wave';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideNzWave({ disabled: true })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Filter for NzShowSearchOptions\nDESCRIPTION: This TypeScript code snippet showcases the default filter function used in the Cascader component when `nzShowSearch` is enabled. This filter checks if the input string is present in any of the labels of the cascaded options, enabling the search functionality.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cascader/doc/index.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultFilter: NzCascaderFilter = (i, p) => {\n  return p.some(o => {\n    const label = o.label;\n    return !!label && label.indexOf(i) !== -1;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing NG-ZORRO Theme Variables in Less\nDESCRIPTION: This LESS snippet shows how to override default NG-ZORRO theme variables. It imports the main NG-ZORRO LESS file and then redefines the `@primary-color` variable. This allows for easy modification of the theme's primary color.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_5\n\nLANGUAGE: less\nCODE:\n```\n// -------- 引入官方提供的 less 样式入口文件 -----------\n@import \"../node_modules/ng-zorro-antd/ng-zorro-antd.less\";\n\n// -------- 自定义参数覆盖 -----------\n@primary-color: #f5222d;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Route Label Data - Typescript\nDESCRIPTION: This code shows the route configuration when using a custom breadcrumb label.  The `customBreadcrumb` key in the `data` object corresponds to the value provided to `nzRouteLabel` in the HTML template. This determines what text is displayed in the breadcrumb.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  path: 'path',\n  component: SomeComponent,\n  data: {\n    customBreadcrumb: 'Display Name'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LESS Base Style Customization File\nDESCRIPTION: This LESS snippet defines a base style file (`base.less`) with common style variables to be used across multiple themes.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_15\n\nLANGUAGE: less\nCODE:\n```\n// base.less 定制通用样式变量\n@margin-md: 17px;\n```\n\n----------------------------------------\n\nTITLE: Checking Out the Master Branch\nDESCRIPTION: This code snippet demonstrates how to switch back to the `master` branch in a git repository.  The `-f` flag forces the checkout, discarding any local changes.  It's used after a pull request has been merged.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master -f\n```\n\n----------------------------------------\n\nTITLE: ImgixLoader Creation - Typescript\nDESCRIPTION: Creates an image source loader for Imgix CDN. It accepts the Imgix domain and returns a loader function that formats the image URL to include parameters for automatic format conversion, maximum fit, and specified width.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * ImgixLoader return format\n * {domain}/{src}?format=auto&fit=max&w={width}\n */\nexport function createImgixLoader(domain: string): NzImageSrcLoader;\n```\n\n----------------------------------------\n\nTITLE: Updating Master Branch with Upstream Changes\nDESCRIPTION: This code snippet demonstrates how to update the local `master` branch with the latest changes from the upstream repository. This ensures that the local `master` branch is synchronized with the main development branch. The `--ff` flag performs a fast-forward merge if possible.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit pull --ff upstream master\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CLI Globally - Bash\nDESCRIPTION: Installs the Angular CLI globally using npm or yarn.  This allows you to use the `ng` command to create, build, and manage Angular projects. It's a prerequisite for working with Angular.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @angular/cli\n# Or if you use yarn\n$ yarn global add @angular/cli\n```\n\n----------------------------------------\n\nTITLE: Installing ng-zorro-antd using ng add - Bash\nDESCRIPTION: This code snippet demonstrates how to install a specific version of ng-zorro-antd using the `ng add` command. It assumes the user is already in the project directory. It installs the specified version of the library and executes any associated schematics or setup tasks.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.en-US.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd PROJECT-NAME\n$ ng add ng-zorro-antd@16.0.0\n```\n\n----------------------------------------\n\nTITLE: Basic Affix Component Usage\nDESCRIPTION: This snippet shows how to use the `nz-affix` component with inline styling to simulate absolute positioning.  It demonstrates setting the affix element's position to absolute and specifying top and left offsets. The content to be affixed should be placed within the `<nz-affix>` tags. This usage avoids the need for absolute positioning on the child elements of the affix.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/affix/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-affix style=\"position: absolute; top: 10px, left: 10px\">\n  ...\n</nz-affix>\n```\n\n----------------------------------------\n\nTITLE: Using nzSanitizer Pipe in Angular Templates\nDESCRIPTION: This code snippet shows how to use the `nzSanitizer` pipe in Angular templates to sanitize various attributes. The pipe takes the value to be sanitized and the context (`'html'`, `'style'`, `'url'`, `'resourceUrl'`) as arguments.  The sanitized output is then bound to the corresponding HTML element attribute.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/pipes/demo/sanitizer.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div [innerHTML]=\"html | nzSanitizer: 'html'\"></div>\n<div [style]=\"style | nzSanitizer: 'style'\"></div>\n<img [src]=\"url | nzSanitizer: 'url'\" />\n<iframe [src]=\"resourceUrl | nzSanitizer: 'resourceUrl'\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Import NzElementPatchModule for Tooltip Anchoring\nDESCRIPTION: This snippet shows how to import the `NzElementPatchModule` from `ng-zorro-antd/core/element-patch`.  This module provides utility classes to easily patch and anchor tooltips to specific elements.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tooltip/demo/origin.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzElementPatchModule } from 'ng-zorro-antd/core/element-patch';\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git\nDESCRIPTION: This code snippet shows how to commit changes to a git repository. The `-a` flag automatically stages all modified and deleted files. A descriptive commit message following the project's conventions is crucial for generating release notes.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Using nzTreeNodePadding for Node Indentation\nDESCRIPTION: This snippet demonstrates the usage of the `nzTreeNodePadding` directive for displaying node indentation using padding.  It is the most performant method for showing indentation in the tree view. No dependencies are required. It's applied directly to the `nz-tree-node`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tree-view/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-tree-node nzTreeNodePadding></nz-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Route Label - HTML\nDESCRIPTION: This snippet demonstrates how to use the `nzRouteLabel` input property to customize the key used to retrieve the breadcrumb display name from the route `data`.  It requires enabling `nzAutoGenerate` to function correctly.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.zh-CN.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<nz-breadcrumb [nzAutoGenerate]=\"true\" [nzRouteLabel]=\"'customBreadcrumb'\"></nz-breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Styles in style.less - LESS\nDESCRIPTION: Imports the NG-ZORRO stylesheet into the `style.less` file using the `@import` rule. Requires a LESS preprocessor to be configured in the Angular project.  The `~` prefix resolves to the `node_modules` directory.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_8\n\nLANGUAGE: less\nCODE:\n```\n@import \"~ng-zorro-antd/ng-zorro-antd.less\";\n```\n\n----------------------------------------\n\nTITLE: Installing ng-zorro-antd using ng add - Bash\nDESCRIPTION: This code snippet demonstrates how to install a specific version of ng-zorro-antd using the `ng add` command. It assumes the user is already in the project directory. It installs the specified version of the library and executes any associated schematics or setup tasks.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd PROJECT-NAME\n$ ng add ng-zorro-antd@15.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing ng-zorro-antd via ng add\nDESCRIPTION: This snippet demonstrates how to install a specific version of ng-zorro-antd to an Angular project using the `ng add` command. This command handles dependencies installation and configuration setup within the target Angular project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.en-US.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cd PROJECT-NAME\n$ ng add ng-zorro-antd@14.0.0\n```\n\n----------------------------------------\n\nTITLE: Overriding Less Variables\nDESCRIPTION: Demonstrates how to override NG-ZORRO Less variables to customize the theme. It imports the necessary NG-ZORRO Less file and then redefines variables like `@primary-color`. The order is crucial; overrides must come after the import.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_5\n\nLANGUAGE: Less\nCODE:\n```\n// -------- import official less file -----------\n@import \"../node_modules/ng-zorro-antd/ng-zorro-antd.less\";\n\n// -------- override less variables -----------\n@primary-color: #f5222d;\n```\n\n----------------------------------------\n\nTITLE: Custom Webpack Configuration for Theme\nDESCRIPTION: This Javascript snippet is a custom webpack configuration for applying theme variables in the application. It uses less-loader to modify existing variables in the less files of the angular projects\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test   : /\\.less$/,\n        loader: 'less-loader',\n        options: {\n          modifyVars: { // 修改主题变量\n            'primary-color': '#1DA57A',\n            'link-color': '#1DA57A',\n            'border-radius-base': '2px'\n          },\n          javascriptEnabled: true\n        }\n      }\n    ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Customize Graph Edge Template - HTML\nDESCRIPTION: Demonstrates how to customize the template for graph edges using the `nzGraphEdge` directive. This allows developers to define the appearance and behavior of the connections between nodes in the graph.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.en-US.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<nz-graph [nzGraphData]=\"data\">\n  <ng-container *nzGraphEdge=\"let edge\">\n    <svg:g>\n      <path></path>\n    </svg:g>\n  </ng-container>\n</nz-graph>\n```\n\n----------------------------------------\n\nTITLE: NzImageSrcLoader Type Definition - Typescript\nDESCRIPTION: Defines the type for a custom image source loader function. This function takes an object with the image source (src) and width as input and returns a string representing the URL of the optimized image.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NzImageSrcLoader = (params: { src: string; width: number }) => string;\n```\n\n----------------------------------------\n\nTITLE: Disable Animations in a Module - TS\nDESCRIPTION: This snippet shows how to disable animations within a specific Angular module using `NzNoAnimationModule`. Importing this module and including it in the `imports` array of a component will allow using the `nzNoAnimation` directive.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.zh-CN.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\n\n@Component({\n  imports: [\n    // ...\n    NzNoAnimationModule\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: ImgixLoader Factory Function - TypeScript\nDESCRIPTION: Creates an image loader function for Imgix CDN.  It constructs the image URL using the Imgix format, adding parameters for auto formatting, max fitting, and width resizing.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.zh-CN.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * ImgixLoader return format\n * {domain}/{src}?format=auto&fit=max&w={width}\n */\nexport function createImgixLoader(domain: string): NzImageSrcLoader;\n```\n\n----------------------------------------\n\nTITLE: Applying CSS units using Angular's style binding\nDESCRIPTION: This snippet demonstrates the recommended way to apply CSS units in Angular templates using the `[style.property.unit]` syntax. This allows for dynamic and type-safe styling directly within the template, reducing the need for custom functions or directives to handle unit conversions.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/pipes/demo/css-unit.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div [style.border-radius.px]=\"1\">px</div>\n<div [style.border-radius.%]=\"1\">%</div>\n<div [style.border-radius.rem]=\"1\">rem</div>\n```\n\n----------------------------------------\n\nTITLE: Changing ng-icon tag from i to span\nDESCRIPTION: This snippet shows the diff of changing the HTML tag for the nz-icon component from `<i>` to `<span>`. This reflects a breaking change in how icons are rendered within the NG-ZORRO-ANTD library.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.en-US.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- <i nz-icon nzType=\"search\" nzTheme=\"outline\"></i>\n+ <span nz-icon nzType=\"search\" nzTheme=\"outline\"></span>\n```\n\n----------------------------------------\n\nTITLE: ng-zorro Breadcrumb Auto-generation Demo (StackBlitz)\nDESCRIPTION: This example demonstrates how to automatically generate breadcrumbs in an Angular application using ng-zorro-antd and `router.data`.  It utilizes a StackBlitz embed to showcase the implementation.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/demo/auto.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  src=\"https://stackblitz.com/edit/ng-zorro-breadcrumb-auto?embed=1&file=src/app/app.component.html&hideExplorer=1&hideNavigation=1&view=preview\"\n  height=\"460\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Force Pushing Changes\nDESCRIPTION: This code snippet outlines the process of rebasing a branch onto the `master` branch and force pushing the updated branch to GitHub. This is typically done after receiving feedback on a pull request and making necessary changes. It ensures a clean and linear commit history.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase master -i\ngit push -f\n```\n\n----------------------------------------\n\nTITLE: Import CSS Variable file (diff)\nDESCRIPTION: This snippet demonstrates how to replace the standard ng-zorro-antd CSS import with the CSS variable version in a `diff` format. This is a necessary step to enable dynamic theming.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme-variable.en-US.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- @import \"~ng-zorro-antd/ng-zorro-antd.min.css\";\n+ @import \"~ng-zorro-antd/ng-zorro-antd.variable.min.css\";\n```\n\n----------------------------------------\n\nTITLE: Installing ng-zorro-antd\nDESCRIPTION: This snippet demonstrates how to install ng-zorro-antd using the Angular CLI. It navigates to the project directory and then uses the `ng add` command to add the specified version of ng-zorro-antd.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.zh-CN.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cd PROJECT-NAME\n$ ng add ng-zorro-antd@15.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Graph Component Dependencies with npm\nDESCRIPTION: This command installs the required dependencies for the ng-zorro-antd Graph component. These include libraries like `dagre-compound`, `dagre`, `d3-transition`, `d3-zoom`, `d3-selection`, `d3-shape`, `d3-drag`, and `@types/d3`. These dependencies are used for layout calculations and rendering the graph.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/graph/doc/index.zh-CN.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dagre-compound dagre d3-transition d3-zoom d3-selection d3-shape d3-drag @types/d3\n```\n\n----------------------------------------\n\nTITLE: Installing cron-parser Dependency\nDESCRIPTION: This command installs the `cron-parser` library, which is a dependency for the `nz-cron-expression` component. The library is used for parsing and validating cron expressions. Run this command in your project's root directory.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/cron-expression/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install cron-parser\n```\n\n----------------------------------------\n\nTITLE: Applying LESS Mixin to Component Styles\nDESCRIPTION: This code snippet demonstrates how to use the `.themeMixin` to encapsulate component styles. By wrapping the component's style rules within the mixin, the styles will be applied conditionally based on the active theme. The `:host` selector targets the component's host element, allowing for theme-specific styling of the component itself.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.en-US.md#_snippet_18\n\nLANGUAGE: less\nCODE:\n```\n@import \"mixin\"; // Similarly, no need for relative path\n\n.themeMixin({\n  :host {\n    // Component styles\n    ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using nzTreeNodePadding for Node Indentation\nDESCRIPTION: This snippet demonstrates how to use the `nzTreeNodePadding` directive to add indentation to tree nodes. It's the most performant way to show indentation.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/tree-view/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-tree-node nzTreeNodePadding></nz-tree-node>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command installs all the dependencies required to build and test the NG-ZORRO library. It is a prerequisite for most other development tasks.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Formatting Route with nzRouteFn - HTML\nDESCRIPTION: Shows how to use the `nzRouteFn` to allow for custom formatting of the route. `nzRouteLabel` and `nzRouteLabelFn` are also in use.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.en-US.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<nz-breadcrumb [nzAutoGenerate]=\"true\" [nzRouteLabel]=\"'breadcrumbI18nKey'\" [nzRouteLabelFn]=\"translateFn\" [nzRouteFn]=\"customRoute\"></nz-breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Disable Animations in Notification/Message Services - TS\nDESCRIPTION: This snippet demonstrates how to disable animations when using the Notification or Message services by setting `nzAnimate: false` in the configuration object. This disables animations specifically for the notification or message being displayed.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/animations.zh-CN.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n   ...,\n   nzAnimate: false\n}\n```\n\n----------------------------------------\n\nTITLE: Checking out Branch\nDESCRIPTION: This command switches to a specific feature branch, allowing you to work on a new feature or bug fix without affecting the master branch.  'docs-fix' is used as an example branch name.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout docs-fix\n```\n\n----------------------------------------\n\nTITLE: Generating a Login Form with ng-zorro-antd\nDESCRIPTION: This command generates a login form component using the form-normal-login schematic provided by ng-zorro-antd. It creates the necessary files for a basic login form based on the ng-zorro-antd design system.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/schematics.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng g ng-zorro-antd:form-normal-login login\n```\n\n----------------------------------------\n\nTITLE: Serving the Angular Application - Bash\nDESCRIPTION: Starts the Angular development server and opens the application in your default browser.  The `--port 0` option automatically selects an available port and `--open` opens the browser.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/getting-started.en-US.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ng serve --port 0 --open\n```\n\n----------------------------------------\n\nTITLE: Import Code Editor Style - Less\nDESCRIPTION: Imports the necessary LESS styles for the ng-zorro-antd Code Editor component. This ensures proper styling and appearance of the editor within the Angular application. This import should be included in your main style file.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/code-editor/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: less\nCODE:\n```\n@import 'node_modules/ng-zorro-antd/code-editor/style/entry.less';\n```\n\n----------------------------------------\n\nTITLE: Importing Code Editor Styles - LESS\nDESCRIPTION: This LESS snippet demonstrates how to import the necessary styles for the ng-zorro-antd code editor component. This ensures the component's visual elements are correctly rendered in the application.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/code-editor/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: LESS\nCODE:\n```\n@import 'node_modules/ng-zorro-antd/code-editor/style/entry.less';\n```\n\n----------------------------------------\n\nTITLE: Default Image Source Loader - Typescript\nDESCRIPTION: A simple implementation of the NzImageSrcLoader that returns the original image source (src) without any modifications. This serves as the default loader when no custom loader is provided.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const defaultImageSrcLoader: NzImageSrcLoader = ({ src }) => {\n  return src;\n};\n```\n\n----------------------------------------\n\nTITLE: Internationalization: Route Data - Typescript\nDESCRIPTION: Shows how to define the route data when using internationalization. The `breadcrumbI18nKey` property will be used by translateFn to produce the breadcrumb label.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.en-US.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// In Route\n{\n  path: 'path',\n  component: SomeComponent,\n  data: {\n    breadcrumbI18nKey: 'i18n.aaa.bbbb'\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// In component\ntranslateFn = (key:string) => this.yourI18nService.translate(key);\n```\n\n----------------------------------------\n\nTITLE: Basic PageHeader Initialization - HTML\nDESCRIPTION: This snippet demonstrates the basic usage of the `nz-page-header` component in Ng-Zorro. It initializes a page header with a specified title. No external dependencies are required beyond the Ng-Zorro library. The `nzTitle` property sets the title of the page header.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/page-header/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<nz-page-header nzTitle=\"Page Title\"></nz-page-header>\n```\n\n----------------------------------------\n\nTITLE: Installing NG-ZORRO with NPM (Bash)\nDESCRIPTION: This command shows how to install the ng-zorro-antd library using npm.  This is an alternative to using the Angular CLI's `ng add` command. After installation, manual configuration is required.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Installing ng-zorro-antd Using npm\nDESCRIPTION: This snippet shows how to install the ng-zorro-antd library using npm. It assumes npm is installed and configured correctly in the user's environment. It adds ng-zorro-antd as a dependency to the project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/introduce.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Generating ng-zorro-antd Component\nDESCRIPTION: This command generates a specific ng-zorro-antd component using a schematic.  It takes a schematic name and a component name as arguments. The available options vary based on the specified schematic.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/schematics.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng g ng-zorro-antd:[schematic] <name> [options]\n```\n\n----------------------------------------\n\nTITLE: Importing NG-ZORRO Less in styles.less\nDESCRIPTION: This LESS snippet imports the main NG-ZORRO less file in the `src/styles.less` file. It is required when using custom theming in NG-ZORRO. Make sure to install ng-zorro-antd before using this statement.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n// Custom Theming for NG-ZORRO\n// For more information: https://ng.ant.design/docs/customize-theme/en\n@import \"../node_modules/ng-zorro-antd/ng-zorro-antd.less\";\n```\n\n----------------------------------------\n\nTITLE: Defining NzCheckboxOption Interface - TypeScript\nDESCRIPTION: This code snippet defines the `NzCheckboxOption` interface in TypeScript, used to represent a checkbox option within the `nz-checkbox-group` component. The interface includes properties for the label (string), value (string | number), and an optional disabled flag (boolean).\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/checkbox/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NzCheckboxOption {\n  label: string;\n  value: string | number;\n  disabled?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: NzResizeEvent Interface - Typescript\nDESCRIPTION: This TypeScript interface defines the structure of the event object emitted by the `nzResize`, `nzResizeStart`, and `nzResizeEnd` events of the `nz-resizable` component. It includes properties for width, height, column, direction, and the original mouse event.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/resizable/doc/index.en-US.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NzResizeEvent {\n  width?: number;\n  height?: number;\n  col?: number;\n  direction?: NzResizeDirection;\n  mouseEvent?: MouseEvent;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting NG-ZORRO Website Locally\nDESCRIPTION: This command starts the NG-ZORRO website locally for development and testing purposes. It allows developers to preview changes and interact with the components.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with Watch Mode\nDESCRIPTION: This command runs specific test files in watch mode, monitoring changes. It allows for faster feedback during development.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:watch [name]\n```\n\n----------------------------------------\n\nTITLE: Setting RTL direction using HTML - ng-zorro-antd\nDESCRIPTION: This HTML snippet demonstrates how to set the direction of the document to right-to-left (RTL) for enabling RTL support in ng-zorro-antd. It involves setting the `dir` attribute of the `html` tag to `rtl`.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<html dir=\"rtl\"></html>\n```\n\n----------------------------------------\n\nTITLE: Using nz-avatar-group\nDESCRIPTION: This snippet demonstrates how to group multiple avatars using the `nz-avatar-group` component in ng-zorro-antd. Each `nz-avatar` inside the group represents an individual avatar. Here, an avatar with a user icon is added to the group.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/avatar/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nz-avatar-group>\n  <nz-avatar nzIcon=\"user\"></nz-avatar>\n  <!--  ...  -->\n</nz-avatar-group>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for NG-ZORRO\nDESCRIPTION: This command installs the necessary dependencies for the NG-ZORRO project. It is a crucial first step before making any contributions.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Linting Code for NG-ZORRO\nDESCRIPTION: This command checks the code style of the NG-ZORRO project. It helps maintain consistency and readability across the codebase.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Watching Test File\nDESCRIPTION: This command runs the tests associated with a specific file and watches for changes, rerunning the tests automatically whenever the file is modified. '[name]' should be replaced with the name of the test file.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:watch [name]\n```\n\n----------------------------------------\n\nTITLE: NzMessageRef Interface Definition\nDESCRIPTION: This TypeScript interface defines the structure of the `NzMessageRef` object returned by the `NzMessageService` methods (e.g., `success`, `error`, `info`). It includes the `messageId` and an `onClose` Subject that emits when the message is closed. This interface allows developers to interact with and manage individual messages.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/message/doc/index.en-US.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NzMessageRef {\n  messageId: string;\n  onClose: Subject<false>; // It would emit an event when the message is closed\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Breadcrumb Label Data - Typescript\nDESCRIPTION: Shows how to set a custom property for the breadcrumb label using the `data` object within a route definition. This property's name must match the value provided to the `nzRouteLabel` input on the `<nz-breadcrumb>` component.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/breadcrumb/doc/index.en-US.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  path: 'path',\n  component: SomeComponent,\n  data: {\n    customBreadcrumb: 'Display Name'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Library\nDESCRIPTION: This command builds the NG-ZORRO library and outputs the compiled files to the 'publish' directory, preparing it for publishing or distribution.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:lib\n```\n\n----------------------------------------\n\nTITLE: LESS Theme Mixin Usage\nDESCRIPTION: This LESS snippet shows how to use the `.themeMixin(@rules)` mixin in a component's style file. It imports the `mixin.less` file and applies the mixin to the component's styles.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_17\n\nLANGUAGE: less\nCODE:\n```\n@import \"mixin\"; // 同样的，不需要完整的相对路径\n\n.themeMixin({\n  :host {\n    // 组件样式\n    ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: This command starts a local development server for the NG-ZORRO website, allowing developers to preview changes and test components in a live environment.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Building NG-ZORRO Library\nDESCRIPTION: This command creates a build of the NG-ZORRO library and places it in the `publish` directory. This build is used for distribution and deployment.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:lib\n```\n\n----------------------------------------\n\nTITLE: Running Tests for NG-ZORRO\nDESCRIPTION: This command executes the complete test suite for the NG-ZORRO project. It ensures that changes do not introduce regressions and that the codebase remains stable.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Master Branch to Origin\nDESCRIPTION: This command pushes your local master branch to your forked repository on GitHub, syncing your local and remote repositories.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Install Custom Webpack Builder\nDESCRIPTION: Bash command to install the custom webpack builder\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @angular-builders/custom-webpack\n```\n\n----------------------------------------\n\nTITLE: LESS Theme Mixin Definition\nDESCRIPTION: This LESS snippet defines a mixin `.themeMixin(@rules)` that generates theme-specific styles based on the HTML class. It imports theme-specific LESS files based on the HTML class and applies the given rules.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/customize-theme.zh-CN.md#_snippet_16\n\nLANGUAGE: less\nCODE:\n```\n.themeMixin(@rules) {\n  html {\n    &.default {\n      @import './default.less';\n      @rules();\n    }\n    &.dark {\n      @import './dark.less';\n      @rules();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Local Git Branch\nDESCRIPTION: This code snippet shows how to delete a local git branch. This removes the branch from the local machine after the corresponding pull request has been merged and the remote branch has been deleted.  The `-D` flag force deletes the branch.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit branch -D my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Linting Code\nDESCRIPTION: This command checks the code for stylistic errors and adherence to the project's coding standards, ensuring code consistency across the project.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: NzImageSrcLoader Type Definition - TypeScript\nDESCRIPTION: Defines the type for a function that loads image sources. It takes an object with the image source and width as parameters and returns a string representing the loaded image URL.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/components/experimental-image/doc/index.zh-CN.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport type NzImageSrcLoader = (params: { src: string; width: number }) => string;\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Upstream Repository\nDESCRIPTION: This command adds the original NG-ZORRO repository as a remote upstream repository to your forked repository, enabling you to fetch updates from the original repository.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.en-US.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/NG-ZORRO/ng-zorro-antd.git\n```\n\n----------------------------------------\n\nTITLE: Pushing Git Branch to GitHub\nDESCRIPTION: This code snippet demonstrates how to push a git branch to a remote repository on GitHub. This makes the local changes available for review and merging via a pull request. Replace `my-fix-branch` with the actual name of the branch.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Deleting a Remote Git Branch\nDESCRIPTION: This code snippet shows how to delete a remote git branch on GitHub after the corresponding pull request has been merged. This helps to keep the repository clean and organized.  The `origin` refers to the remote repository.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin --delete my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch\nDESCRIPTION: This command pushes your feature branch with the committed changes to your remote forked repository on GitHub. The `-f` flag might be needed if you have rebased.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/contributing.zh-CN.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Input Number Custom Handler Icons - HTML\nDESCRIPTION: This code snippet demonstrates how to use custom handler icons within the nz-input-number component using nz-icon directives. The `nzInputNumberUpIcon` and `nzInputNumberDownIcon` attributes are used to specify the icons for incrementing and decrementing the number.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <!-- Custom handler icons -->\n  <nz-input-number>\n    <nz-icon nzInputNumberUpIcon />\n    <nz-icon nzInputNumberDownIcon />\n  </nz-input-number>\n```\n\n----------------------------------------\n\nTITLE: Initializing Angular Project and Adding ng-zorro-antd\nDESCRIPTION: This snippet demonstrates how to create a new Angular project using Angular CLI and add the `ng-zorro-antd` library to the project. It requires Angular CLI to be installed globally.  The commands create a new project directory and then add the ng-zorro-antd package as a dependency. This sets up a basic development environment for using ng-zorro-antd components.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/introduce.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ng new PROJECT_NAME\n$ cd PROJECT_NAME\n$ ng add ng-zorro-antd\n```\n\n----------------------------------------\n\nTITLE: Cascader ngModel example - Typescript\nDESCRIPTION: This code snippet demonstrates how the `ngModel` property was used with the `nz-cascader` component in older versions of NG-ZORRO-ANTD.  It shows assigning an array of `NzCascaderOption` to the `ngModel`. In v19, this behavior is removed, and you should map the array to the actual value.\nSOURCE: https://github.com/ng-zorro/ng-zorro-antd/blob/master/docs/changelog.zh-CN.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  template: `<nz-cascader [nzOptions]=\"options\" [ngModel]=\"value\"></nz-cascader>`\n})\nexport class ExampleComponent {\n  value = [{ label: 'NG ZORRO', value: 'ng-zorro-antd' }]\n}\n```"
  }
]