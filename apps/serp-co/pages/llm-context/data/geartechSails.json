[
  {
    "owner": "gear-tech",
    "repo": "sails",
    "content": "TITLE: Implementing a Basic Sails Program with Service\nDESCRIPTION: Rust code demonstrating a simple Sails program implementation with a 'MyPing' service and a 'MyProgram' program. It shows how to use the #[service] and #[program] attributes.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#![no_std]\n\nuse sails_rs::{gstd::debug, prelude::*};\n\nstruct MyPing;\n\n#[service]\nimpl MyPing {\n    pub const fn new() -> Self {\n        Self\n    }\n\n    pub async fn ping(&mut self) -> bool {\n        debug!(\"Ping called\");\n        true\n    }\n}\n\n#[derive(Default)]\nstruct MyProgram;\n\n#[program]\nimpl MyProgram {\n    #[export(route = \"ping\")]\n    pub fn ping_svc(&self) -> MyPing {\n        MyPing::new()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Various Service Methods in Sails\nDESCRIPTION: Rust code showing different types of service methods in Sails, including commands, queries, and methods with special attributes like unwrap_result and value return.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[service]\nimpl MyService {\n    // This is a command\n    pub fn do_something(&mut self, p1: u32, p2: String) -> &'static [u8] {\n        ...\n    }\n\n    // This is a command returning value along with the result\n    pub fn withdraw(&mut self, amount: u64) -> CommandReply<()> {\n        CommandReply::new(()).with_value(amount)\n    }\n\n    // This is a command returning `()` or panicking\n    #[export(unwrap_result)]\n    pub fn do_somethig_with_unwrap_result(&mut self, amount: u64) -> Result<(), String> {\n        do_somethig_returning_result()?\n        Ok(())\n    }\n\n    // This is a query\n    pub fn something(&self, p1: Option<bool>) -> String {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Sails Function in JavaScript\nDESCRIPTION: Example of how to call a Sails function. This snippet demonstrates creating a transaction using a service function.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst transaction = sails.services.ServiceName.functions.FunctionName(arg1, arg2);\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending Transaction in JavaScript\nDESCRIPTION: Demonstrates how to sign and send a transaction, and how to handle the response including message ID, transaction hash, block hash, and finalization status.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst { msgId, blockHash, txHash, response, isFinalized } = await transaction.signAndSend();\n\nconsole.log('Message id:', msgId);\nconsole.log('Transaction hash:', txHash);\nconsole.log('Block hash:', blockHash);\nconsole.log('Is finalized:', await isFinalized);\n\nconst result = await response();\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Program with Constructors and Service Exposures\nDESCRIPTION: Rust code demonstrating a Sails program implementation with multiple constructors and a service exposure method. It shows how to use the #[program] attribute and customize routing.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[program]\nimpl MyProgram {\n    // Application constructor\n    pub fn new() -> Self {\n        ...\n    }\n\n    // Yet another application constructor\n    pub fn from_u32(p1: u32) -> Self {\n        ...\n    }\n\n    // Service constructor\n    pub fn ping_svc(&self) -> MyPing {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Sails Message Payloads in JavaScript\nDESCRIPTION: Example of how to decode Sails message payloads. This snippet shows getting service and function names from payload bytes, and decoding sent and received message payloads.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getServiceNamePrefix, getFnNamePrefix } from 'sails-js';\nconst payloadOfSentMessage = '0x<some bytes>';\nconst serviceName = getServiceNamePrefix(payloadOfSentMessage);\nconst functionName = getFnNamePrefix(payloadOfSentMessage);\nconsole.log(sails.services[serviceName].functions[functionName].decodeResult(payloadOfSentMessage));\n\nconst payloadOfReceivedMessage = '0x<some bytes>';\nconsole.log(sails.service[serviceName].functions[functionName].decodePayload(payloadOfReceivedMessage));\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handling in a Sails Service\nDESCRIPTION: Rust code demonstrating how to implement event handling in a Sails service using the events parameter of the #[service] attribute and the generated notify_on method.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn counter_mut() -> &'static mut u32 {\n    static mut COUNTER: u32 = 0;\n    unsafe { &mut COUNTER }\n}\n\nstruct MyCounter;\n\n#[derive(Encode, TypeInfo)]\nenum MyCounterEvent {\n    Incremented(u32),\n}\n\n#[service(events = MyCounterEvent)]\nimpl MyCounter {\n    pub fn new() -> Self {\n        Self\n    }\n\n    pub fn increment(&mut self) {\n        *counter_mut() += 1;\n        self.notify_on(MyCounterEvent::Incremented(*counter_mut())).unwrap();\n    }\n\n    // This method is generated by the `#[service]` attribute\n    fn notify_on(&mut self, event: MyCounterEvent) -> Result<()> {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GearApi instance for chain connection\nDESCRIPTION: JavaScript code to create an instance of GearApi for connecting to the chain. This is a prerequisite for using the generated client library.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GearApi } from '@gear-js/api';\n\nconst api = await GearApi.create();\n```\n\n----------------------------------------\n\nTITLE: Using query methods in generated Program class\nDESCRIPTION: JavaScript code demonstrating how to use query methods from the generated Program class. It shows how to call a query function with arguments and optional parameters.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst alice = '0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d';\nconst result = await program.serviceName.queryFnName(arg1, arg2, alice);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding Sails Constructor and Event Payloads in JavaScript\nDESCRIPTION: Example of how to encode and decode payloads for Sails constructors and events. This snippet shows methods for encoding constructor arguments and decoding event data.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsails.ctors.ConstructorName.encodePayload(arg1, arg2);\nsails.ctors.ConstructorName.decodePayload('<some bytes>');\n\nsails.events.EventName.decode('<some bytes>')\n```\n\n----------------------------------------\n\nTITLE: Using message methods in generated Program class\nDESCRIPTION: JavaScript code showing how to use message methods from the generated Program class. It demonstrates creating a transaction, setting the account, value, calculating gas, and sending the transaction.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst transaction = program.serviceName.functionName(arg1, arg2);\n\n// ## Set the account that is sending the message\n\n// The method accepts either the KeyringPair instance\nimport { Keyring } from '@polkadot/api';\nconst keyring = new Keyring({ type: 'sr25519' });\nconst pair = keyring.addFromUri('//Alice');\ntransaction.withAccount(pair)\n\n// Or the address and signerOptions\n// This case is mostly used on the frontend with connected wallet.\nimport { web3FromSource, web3Accounts } from '@polkadot/extension-dapp';\nconst allAccounts = await web3Accounts();\nconst account = allAccounts[0];\nconst injector = await web3FromSource(account.meta.source);\nconst signer = web3FromSource();\ntransaction.withAccount(account.address, { signer: injector.signer });\n\n// ## Set the value of the message\ntransaction.withValue(BigInt(10 * 1e12)); // 10 VARA\n\n// ## Calculate gas\n// Optionally you can provide 2 arguments.\n// The first argument `allowOtherPanics` either allows or forbids panics in other programs to be triggered. It's set to `false` by default.\n// The second argument `increaseGas` is percentage to increase the gas limit. It's set to `0` by default.\nawait transtaion.calculateGas();\n\n// The `withGas` method can be used instead of `calculateGas` if you want to set the gas limit manually.\ntransaction.withGas(100000n);\n\n// ## Send the transaction\n// `signAndSend` method returns the if of the sent message, the block hash in which the message is included and `response` function that can be used to get the response from the program.\nconst { msgId, blockHash, response } = await transaction.signAndSend();\n\nconst result = await response();\n\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with Complex Types (Rust)\nDESCRIPTION: Shows the definition of a service 'MyService' with a method 'do_something' that uses complex types for parameters and return value. This snippet is used as a basis for client interaction examples.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nstruct Output {\n    m1: u32,\n    m2: String,\n}\n\n#[service]\nimpl MyService {\n    pub fn do_something(&mut self, p1: u32, p2: String) -> Output {\n        ...\n    }\n}\n\n#[program]\nimpl MyProgram {\n    pub fn my_service(&self) -> MyService {\n        MyService::new()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Services in Sails (Rust)\nDESCRIPTION: Demonstrates how to extend multiple services in Sails using the 'extends' attribute. It shows the creation of MyServiceA, MyServiceB, and MyServiceC, where MyServiceC extends both A and B, inheriting their methods and allowing method overriding.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nstruct MyServiceA;\n\n#[service]\nimpl MyServiceA {\n    pub fn do_a(&mut self) {\n        ...\n    }\n}\n\nstruct MyServiceB;\n\n#[service]\nimpl MyServiceB {\n    pub fn do_b(&mut self) {\n        ...\n    }\n}\n\nstruct MyServiceC;\n\n#[service(extends = [MyServiceA, MyServiceB])]\nimpl MyServiceC {\n    // New method\n    pub fn do_c(&mut self) {\n        ...\n    }\n\n    // Overridden method from MyServiceA\n    pub fn do_a(&mut self) {\n        ...\n    }\n\n    // do_b from MyServiceB will exposed due to the extends argument\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Sails Query in JavaScript\nDESCRIPTION: Example of how to execute a Sails query. This snippet shows calling a query function with optional parameters for origin address, value, and block number.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst alice = 'kGkLEU3e3XXkJp2WK4eNpVmSab5xUNL9QtmLPh8QfCL2EgotW';\n// functionArg1, functionArg2 are the arguments of the query function from the IDL file\nconst result = await sails.services.ServiceName.queries.QueryName(alice, null, null, functionArg1, functionArg2);\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Sails Event in JavaScript\nDESCRIPTION: Example of how to subscribe to a Sails event. This snippet demonstrates using the subscribe method of an event object.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsails.services.ServiceName.events.EventName.subscribe((data) => {\n  console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Using event subscription methods in generated Program class\nDESCRIPTION: JavaScript code showing how to use event subscription methods from the generated Program class. It demonstrates subscribing to a specific event emitted by the program.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nprogram.subscribeToSomeEvent((data) => {\n  console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reference Service with Static State in Rust\nDESCRIPTION: This snippet demonstrates the complete implementation of a reference service. It includes a main function that interacts with the UserService to add users and retrieve references to them, along with the implementation of the UserService that maintains an encapsulated static state.\nSOURCE: https://github.com/gear-tech/sails/blob/master/examples/demo/app/src/references/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    // Create a couple of users.\n    let alice_ref = user_service::add_user(\"Alice\".into());\n    let bob_ref = user_service::add_user(\"Bob\".into());\n\n    // alice_ref and bob_ref are references to values owned by the user_service module\n    // You can only read from them or pass them around, not mutate them.\n    println!(\"User {} has id {}\", alice_ref.name, alice_ref.id);\n    println!(\"User {} has id {}\", bob_ref.name, bob_ref.id);\n\n    // You can also get a reference to a user by id:\n    let alice_again = user_service::get_user(alice_ref.id).unwrap();\n    println!(\"User {} has id {}\", alice_again.name, alice_again.id);\n\n    // Non-existing users are correctly reported:\n    match user_service::get_user(123) {\n        Some(user) => println!(\"Found user {}\", user.name),\n        None => println!(\"No user with id 123\")\n    }\n}\n\nmod user_service {\n    use std::collections::HashMap;\n    use std::sync::{Mutex, OnceLock};\n\n    pub struct User {\n        pub id: u64,\n        pub name: String,\n    }\n\n    struct ServiceState {\n        next_id: u64,\n        users_by_id: HashMap<u64, User>,\n    }\n\n    impl ServiceState {\n        fn new() -> Self {\n            Self {\n                next_id: 1,\n                users_by_id: HashMap::new(),\n            }\n        }\n    }\n\n    fn state() -> &'static Mutex<ServiceState> {\n        static STATE: OnceLock<Mutex<ServiceState>> = OnceLock::new();\n        STATE.get_or_init(|| Mutex::new(ServiceState::new()))\n    }\n\n    pub fn add_user(name: String) -> &'static User {\n        let mut state = state().lock().unwrap();\n        let id = state.next_id;\n        state.next_id += 1;\n\n        let user = User { id, name };\n        let user_ref = state.users_by_id.entry(id).or_insert(user);\n\n        // This is only possible because the users hashmap is 'static\n        // that means user_ref is also 'static\n        user_ref\n    }\n\n    pub fn get_user(id: u64) -> Option<&'static User> {\n        let state = state().lock().unwrap();\n        state.users_by_id.get(&id)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Interaction Using Generated Code (Option 1) (Rust)\nDESCRIPTION: Demonstrates how to use generated client code to interact with a Sails application. This option uses the generated code to encode and decode byte payloads for raw message sending.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ninclude!(concat!(env!(\"OUT_DIR\"), \"/my_service.rs\"));\n\nfn some_client_code() {\n    let call_payload = my_service::io::DoSomething::encode_call(42, \"Hello\".to_string());\n    let reply_bytes = gstd::msg::send_bytes_for_reply(target_app_id, call_payload, 0, 0).await.unwrap();\n    let reply = my_service::io::DoSomething::decode_reply(&reply_bytes).unwrap();\n    let m1 = reply.m1;\n    let m2 = reply.m2;\n}\n```\n\n----------------------------------------\n\nTITLE: Client Interaction Using Generated Code (Option 2) (Rust)\nDESCRIPTION: Shows an alternative way to use generated client code for interacting with a Sails application. This option provides an RPC-style interface and uses a 'remoting' abstraction for communication.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ninclude!(concat!(env!(\"OUT_DIR\"), \"/my_service.rs\"));\n\nfn some_client_code() {\n    let mut my_service = MyService::new(remoting); // remoting is an abstraction provided by Sails\n    let reply_ticket = client.do_something(42, \"Hello\".to_string())\n        .with_reply_deposit(42)\n        .publish(target_app_id)\n        .await.unwrap();\n    let reply = reply_ticket.reply().await.unwrap();\n    let m1 = reply.m1;\n    let m2 = reply.m2;\n}\n```\n\n----------------------------------------\n\nTITLE: Using constructor methods in generated Program class\nDESCRIPTION: JavaScript code demonstrating how to use constructor methods from the generated Program class. It shows how to deploy a program on the chain using either WASM bytes or a code ID.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst code = fs.readFileSync('path/to/program.wasm');\n// Or fetch function can be used to fetch the code on the frontend\nconst transaction = program.newCtorFromCode(code);\n\n// The same methods as in the message methods can be used to build and send the transaction\n```\n\n----------------------------------------\n\nTITLE: Encoding Sails Function Payload in JavaScript\nDESCRIPTION: Example of how to encode a payload for a specific Sails function. The resulting bytes can be used to send a message to the program.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst payload = sails.functions.SomeFunction.encodePayload(arg1, arg2);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Gear Chain in JavaScript\nDESCRIPTION: Example of how to connect to a Gear chain using @gear-js/api and set the API instance for a Sails object. This is necessary for sending messages, creating programs, and subscribing to events.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GearApi } from '@gear-js/api';\n\nconst api = await GearApi.create();\n\nsails.setApi(api);\n```\n\n----------------------------------------\n\nTITLE: Using SailsIdlParser with Sails.js\nDESCRIPTION: Example of initializing SailsIdlParser and using it with the Sails class from the sails-js library.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/parser/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sails } from 'sails-js';\nimport { SailsIdlParser } from 'sails-js-parser';\n\nconst parser = await SailsIdlParser.new();\nconst sails = new Sails(parser);\n```\n\n----------------------------------------\n\nTITLE: Setting Account for Transaction in JavaScript\nDESCRIPTION: Demonstrates two ways to set the account for a transaction: using a KeyringPair instance and using a connected wallet on the frontend.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Keyring } from '@polkadot/api';\nconst keyring = new Keyring({ type: 'sr25519' });\nconst pair = keyring.addFromUri('//Alice');\ntransaction.withAccount(pair)\n\n// This case is mostly used on the frontend with connected wallet.\nimport { web3FromSource, web3Accounts } from '@polkadot/extension-dapp';\nconst allAccounts = await web3Accounts();\nconst account = allAccounts[0];\nconst injector = await web3FromSource(account.meta.source);\nconst signer = web3FromSource();\ntransaction.withAccount(account.address, { signer: injector.signer });\n```\n\n----------------------------------------\n\nTITLE: Parsing Sails IDL with SailsIdlParser\nDESCRIPTION: Example of parsing a Sails IDL string which defines a constructor and a service with a method. The parse method returns a Program instance representing the parsed IDL.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/parser/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst idl = `\n  constructor {\n    New : ();\n  };\n\n  service SailsApp {\n    DoSomething : () -> str;\n  };\n`\nconst program = parser.parse(idl);\n```\n\n----------------------------------------\n\nTITLE: Parsing Sails IDL in JavaScript\nDESCRIPTION: Example of how to parse a Sails IDL file using the Sails and SailsIdlParser classes. This snippet demonstrates initializing the parser and creating a Sails instance.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Sails } from 'sails-js';\nimport { SailsIdlParser } from 'sails-js-parser';\n\nconst parser = await SailsIdlParser.new();\nconst sails = new Sails(parser);\n\nconst idl = '<idl content>';\n\nsails.parseIdl(idl);\n```\n\n----------------------------------------\n\nTITLE: Customizing Service and Method Routing in Sails\nDESCRIPTION: Rust code showing how to customize the routing of services and methods in a Sails program using the #[export] attribute with the route parameter.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[program]\nimpl MyProgram {\n    // The `MyPing` service is exposed as `Ping`\n    #[export(route = \"ping\")]\n    pub fn ping_svc(&self) -> MyPing {\n        ...\n    }\n}\n\n#[service]\nimpl MyPing {\n    // The `do_ping` method is exposed as `Ping`\n    #[export(route = \"ping\")]\n    pub fn do_ping(&mut self) {\n        ...\n    }\n\n    // The `ping_count` method is exposed as `PingCount`\n    pub fn ping_count(&self) -> u64 {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Wait Time for Gear Protocol Responses in Rust\nDESCRIPTION: This code snippet demonstrates how to increase the number of blocks allowed for waiting on a response from the Gear Protocol. It uses the with_wait_up_to method to set the wait time to 10,000 blocks, which helps mitigate network load issues without significantly increasing transaction costs.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nwith_wait_up_to(10000)\n```\n\n----------------------------------------\n\nTITLE: Using Reply Hook for Saga State Management in Rust\nDESCRIPTION: This code snippet shows the use of the with_reply_hook method in Rust for managing Saga state. It's used to handle cases where a response is received after a timeout, allowing for state updates and preventing redundant action execution.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nwith_reply_hook\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Gas Limit for Transaction in JavaScript\nDESCRIPTION: Shows how to manually set the gas limit for a transaction using the withGas method.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ntransaction.withGas(100_000_000_000n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Gas Limit for Transaction in JavaScript\nDESCRIPTION: Demonstrates how to calculate the gas limit for a transaction using the calculateGas method.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait transaction.calculateGas();\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Value in JavaScript\nDESCRIPTION: Shows how to set the value of a transaction using the withValue method.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntransaction.withValue(BigInt(10 * 1e12)); // 10 VARA\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Fee in JavaScript\nDESCRIPTION: Shows how to retrieve the transaction fee using the transactionFee method.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst fee = await transaction.transactionFee();\nconsole.log(fee);\n```\n\n----------------------------------------\n\nTITLE: Setting Voucher ID for Transaction in JavaScript\nDESCRIPTION: Demonstrates how to set a voucher ID for a transaction using the withVoucher method.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst voucherId = '0x...'\ntransaction.withVoucher(voucherId);\n```\n\n----------------------------------------\n\nTITLE: Setting Program ID for Sails Functions in JavaScript\nDESCRIPTION: Example of how to set the program ID for Sails functions. This is necessary before calling any function on the program.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsails.setProgramId('0x...');\n```\n\n----------------------------------------\n\nTITLE: Creating Program instance from generated library\nDESCRIPTION: JavaScript code to import and create an instance of the Program class from the generated library. It shows how to initialize with or without a program ID.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Program } from './lib';\n\nconst program = new Program(api);\n\n// provide the id of the program if the program is already uploaded to the chain\n\nconst programId = '0x...';\nconst program = new Program(api, programId);\n```\n\n----------------------------------------\n\nTITLE: Accessing Sails Constructor in JavaScript\nDESCRIPTION: Example of how to access a constructor from the Sails object. This snippet shows the structure of the constructor object and its available methods.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  args: Array<{name: string, type: string}>, // array of arguments with their names and scale codec types\n  encodePayload: (...args: any): HexString, // function to encode the payload\n  decodePayload: (bytes: HexString): any, // function to decode the payload\n  fromCode: (code: Uint8Array | Buffer, ...args: unkonwn[]): TransactionBuilder, // function to create a transaction builder to deploy the program using code bytes\n  fromCodeId: (codeId: string, ...args: unknown[]): TransactionBuilder // function to create a transaction builder to deploy the program using code id\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Fee Service in Rust\nDESCRIPTION: This code snippet defines a ValueFeeService struct and implements methods for handling value reception, fee deduction, and remainder return. It uses the gstd and primitive-types crates for gear-specific functionality and numeric types.\nSOURCE: https://github.com/gear-tech/sails/blob/master/examples/demo/app/src/value_fee/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse gstd::{msg, prelude::*, ActorId};\nuse primitive_types::U256;\n\n#[derive(Default)]\nstruct ValueFeeService {\n    fee_percentage: u8,\n    value_received: U256,\n    fee_collected: U256,\n}\n\nstatic mut SERVICE: Option<ValueFeeService> = None;\n\nimpl ValueFeeService {\n    fn receive_value(&mut self) {\n        self.value_received = msg::value();\n    }\n\n    fn deduct_fee(&mut self) {\n        let fee = self.value_received * U256::from(self.fee_percentage) / U256::from(100);\n        self.fee_collected += fee;\n        self.value_received -= fee;\n    }\n\n    fn return_remainder(&mut self) {\n        msg::send(msg::source(), \"\", self.value_received).expect(\"Error in sending back remainder\");\n        self.value_received = U256::zero();\n    }\n}\n\n#[no_mangle]\nextern \"C\" fn init() {\n    let service = ValueFeeService {\n        fee_percentage: 10, // 10% fee\n        ..Default::default()\n    };\n    unsafe {\n        SERVICE = Some(service);\n    }\n}\n\n#[no_mangle]\nextern \"C\" fn handle() {\n    let service = unsafe { SERVICE.as_mut().expect(\"The service is not initialized\") };\n    service.receive_value();\n    service.deduct_fee();\n    service.return_remainder();\n}\n\n#[no_mangle]\nextern \"C\" fn state() {\n    let service = unsafe { SERVICE.as_ref().expect(\"The service is not initialized\") };\n    msg::reply(\n        format!(\n            \"Fee collected: {}\",\n            service.fee_collected\n        ),\n        0,\n    )\n    .expect(\"Error in sending back state\");\n}\n```\n\n----------------------------------------\n\nTITLE: Service Documentation in Markdown\nDESCRIPTION: Documentation for a stateless service demonstrating various parameter and return value types.\nSOURCE: https://github.com/gear-tech/sails/blob/master/examples/demo/app/src/this_that/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ThisThat Service\n\nThis is a simple service which doesn't maintain any state. It showcases a variety\nof types which can be used as parameters and return values in service methods.\n```\n\n----------------------------------------\n\nTITLE: Adding Sails Dependency to Cargo.toml\nDESCRIPTION: Cargo.toml snippet showing how to add the Sails library as a dependency with the 'debug' feature enabled.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nsails-rs = { version = \"*\", features = [\"debug\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing Sails CLI with Cargo\nDESCRIPTION: Command to install the Sails CLI tool using Cargo, followed by a command to create a new Sails program named 'my-ping'.\nSOURCE: https://github.com/gear-tech/sails/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install sails-cli\ncargo sails program my-ping\n```\n\n----------------------------------------\n\nTITLE: Configuring Remoting Provider with NodeClient in C#\nDESCRIPTION: Demonstrates how to set up the IRemotingProvider implementation using NodeClient with a specific Gear node URI. This configuration is essential for establishing communication with Sails programs through the WebSocket protocol.\nSOURCE: https://github.com/gear-tech/sails/blob/master/net/src/Sails.Net/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar serviceCollection = new ServiceCollection();\nserviceCollection.AddRemotingViaNodeClient(\n    new NodeClientOptions\n    {\n        GearNodeUri = new Uri(\"wss://testnet.vara.network\"),\n    });\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript client library from Sails IDL file\nDESCRIPTION: Command to generate a TypeScript client library using sails-js-cli. It takes the path to the Sails IDL file as input and specifies an output directory for the generated library.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsails-js generate path/to/sails.idl -o path/to/out/dir\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript client library using npx\nDESCRIPTION: Command to generate a TypeScript client library using npx to run sails-js-cli without global installation. It takes the same arguments as the regular command.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sails-js-cli generate path/to/sails.idl -o path/to/out/dir\n```\n\n----------------------------------------\n\nTITLE: Generating a Sails Library with sails-js-cli\nDESCRIPTION: Command to generate a library using the sails-js-cli tool. It takes a client IDL file as input and generates the library in the current directory.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sails-js-cli generate ../../examples/demo/client/demo.idl .\n```\n\n----------------------------------------\n\nTITLE: Generating only lib.ts file without project structure\nDESCRIPTION: Command to generate only the lib.ts file without the full project structure using sails-js-cli. The --no-project flag is used to specify this behavior.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsails-js generate path/to/sails.idl -o path/to/out/dir --no-project\n```\n\n----------------------------------------\n\nTITLE: Building the Demo Application with Cargo\nDESCRIPTION: Command to build the demo application using Cargo with the release flag.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build -p demo --release\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building the Project\nDESCRIPTION: Commands to install the project dependencies using yarn and build the project.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running the Example Script\nDESCRIPTION: Command to run the main.js example script that demonstrates how to use the generated library.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode lib/main.js\n```\n\n----------------------------------------\n\nTITLE: Installing sails-js Library\nDESCRIPTION: Command to install the sails-js library using npm. The library requires @gear-js/api and @polkadot/api packages to be installed as well.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails-js\n```\n\n----------------------------------------\n\nTITLE: Installing sails-js-cli globally using npm\nDESCRIPTION: Command to install the sails-js-cli package globally using npm. This allows the tool to be used from any directory in the command line.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g sails-js-cli\n```\n\n----------------------------------------\n\nTITLE: Running sails-js-cli using npx without installation\nDESCRIPTION: Command to run sails-js-cli using npx without installing the package globally. This is useful for one-time use or to avoid global installation.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sails-js-cli command ...args\n```\n\n----------------------------------------\n\nTITLE: Configuring Sails.ClientGenerator in .NET Project\nDESCRIPTION: This XML snippet demonstrates how to configure a .NET project to use Sails.ClientGenerator. It includes adding an IDL file as an additional file and referencing the required NuGet packages.\nSOURCE: https://github.com/gear-tech/sails/blob/master/net/src/Sails.ClientGenerator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <!-- IDL file obtained from Sails program -->\n  <AdditionalFile Include=\"demo.idl\" />\n</ItemGroup>\n\n<ItemGroup>\n  <PackageReference Include=\"Sails.ClientGenerator\">\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n  <PackageReference Include=\"Sails.Net\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Walker Service Documentation Header\nDESCRIPTION: Markdown documentation header explaining the Walker service's purpose and relationship to the Dog service example\nSOURCE: https://github.com/gear-tech/sails/blob/master/examples/demo/walker/src/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Walker Service\n\nThis service is used as a part of the example showcasing service extension feature.\nSee the [Dog](/examples/demo/app/src/dog/) service for the usage.\n```\n\n----------------------------------------\n\nTITLE: Initializing SailsIdlParser\nDESCRIPTION: Basic initialization of the SailsIdlParser class with the asynchronous factory method.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/parser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SailsIdlParser } from 'sails-js-parser';\n\nconst parser = await SailsIdlParser.new();\n```\n\n----------------------------------------\n\nTITLE: Installing Sails IDL Parser using npm\nDESCRIPTION: Command to install the sails-js-parser library using npm package manager.\nSOURCE: https://github.com/gear-tech/sails/blob/master/js/parser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sails-js-parser\n```\n\n----------------------------------------\n\nTITLE: Documenting Demo App Structure in Markdown\nDESCRIPTION: This Markdown snippet outlines the organization of a demo program, explaining that it consists of multiple services in separate sub-folders under the 'src' directory. It also mentions the inclusion of code for building the program as a WASM app for the Gear network.\nSOURCE: https://github.com/gear-tech/sails/blob/master/examples/demo/app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Demo App\n\nThis folder contains a demo program comprised of several services. The services are\norganized into separate sub-folders under the `src` folder. It also contains code\nrequired for building the program as a WASM app ready for loading onto Gear network.\n```"
  }
]