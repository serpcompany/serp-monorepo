[
  {
    "owner": "microsoft",
    "repo": "terraform-provider-azuredevops",
    "content": "TITLE: Configuring Azure DevOps Environment with Kubernetes Resource using Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project, environment, Kubernetes service endpoint, and associate a Kubernetes resource with the environment using Terraform. It includes setting up the project, environment, service endpoint, and the Kubernetes resource with various configuration options.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/environment_kubernetes_resource.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_environment\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Environment\"\n}\n\nresource \"azuredevops_serviceendpoint_kubernetes\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Kubernetes\"\n  apiserver_url         = \"https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io\"\n  authorization_type    = \"AzureSubscription\"\n\n  azure_subscription {\n    subscription_id   = \"00000000-0000-0000-0000-000000000000\"\n    subscription_name = \"Example\"\n    tenant_id         = \"00000000-0000-0000-0000-000000000000\"\n    resourcegroup_id  = \"example-rg\"\n    namespace         = \"default\"\n    cluster_name      = \"example-aks\"\n  }\n}\n\nresource \"azuredevops_environment_resource_kubernetes\" \"example\" {\n  project_id          = azuredevops_project.example.id\n  environment_id      = azuredevops_environment.example.id\n  service_endpoint_id = azuredevops_serviceendpoint_kubernetes.example.id\n\n  name         = \"Example\"\n  namespace    = \"default\"\n  cluster_name = \"example-aks\"\n  tags         = [\"tag1\", \"tag2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project with Terraform\nDESCRIPTION: Example configuration for creating an Azure DevOps project with custom settings for visibility, version control, and feature toggles. Demonstrates setting up a private Git project with Agile work item template and disabled test plans and artifacts.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n  features = {\n    testplans = \"disabled\"\n    artifacts = \"disabled\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Service Connection with Approval Check in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to create an approval check for a service connection in Azure DevOps. It sets up a project, a generic service endpoint, and an approval check with specific approvers and timeout settings.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_approval.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_serviceendpoint_generic\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  server_url            = \"https://some-server.example.com\"\n  username              = \"username\"\n  password              = \"password\"\n  service_endpoint_name = \"Example Generic\"\n  description           = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_users\" \"example\" {\n  principal_name = \"someone@somewhere.com\"\n}\n\nresource \"azuredevops_check_approval\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  target_resource_id   = azuredevops_serviceendpoint_generic.example.id\n  target_resource_type = \"endpoint\"\n\n  requester_can_approve = false\n  approvers = [\n    one(data.azuredevops_users.example.users).id,\n  ]\n\n  timeout = 43200\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Provider in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the Azure DevOps provider in a Terraform configuration file. It specifies the required provider and creates a basic Azure DevOps project resource.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/index.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">= 0.1.0\"\n    }\n  }\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Project Name\"\n  description = \"Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Reviewers Branch Policy in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to create an auto-reviewers branch policy for an Azure DevOps project. It sets up a project, git repository, user entitlement, and the branch policy with specific settings including auto-reviewer IDs, path filters, and scope.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_auto_reviewers.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_user_entitlement\" \"example\" {\n  principal_name       = \"mail@email.com\"\n  account_license_type = \"basic\"\n}\n\nresource \"azuredevops_branch_policy_auto_reviewers\" \"example\" {\n  project_id = azuredevops_project.example.id\n\n  enabled  = true\n  blocking = true\n\n  settings {\n    auto_reviewer_ids  = [azuredevops_user_entitlement.example.id]\n    submitter_can_vote = false\n    message            = \"Auto reviewer\"\n    path_filters       = [\"*/src/*.ts\"]\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = azuredevops_git_repository.example.default_branch\n      match_type     = \"Exact\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Pull Request Trigger\nDESCRIPTION: Implements a build definition with pull request trigger configuration, including fork settings and branch filters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_definition.html.markdown#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_serviceendpoint_github\" \"example\" {\n  project_id          = data.azuredevops_project.example.id\n  service_endpoint_id = \"00000000-0000-0000-0000-000000000000\"\n}\n\nresource \"azuredevops_build_definition\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Build Definition\"\n  path       = \"\\\\ExampleFolder\"\n\n  ci_trigger {\n    use_yaml = false\n  }\n\n  repository {\n    repo_type             = \"GitHub\"\n    repo_id               = \"<GitHub Org>/<Repo Name>\"\n    branch_name           = \"main\"\n    yml_path              = \"azure-pipelines.yml\"\n    service_connection_id = data.azuredevops_serviceendpoint_github.example.id\n  }\n\n  pull_request_trigger {\n    override {\n      branch_filter {\n        include = [\"main\"]\n      }\n    }\n    forks {\n      enabled       = false\n      share_secrets = false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Work Item with Basic Configuration in HCL\nDESCRIPTION: This snippet demonstrates how to create a basic Azure DevOps work item using Terraform. It includes creating a project and a work item with essential properties like title, type, state, and tags.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/workitem.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\nresource \"azuredevops_workitem\" \"example\" {\n  project_id = data.azuredevops_project.example.id\n  title      = \"Example Work Item\"\n  type       = \"Issue\"\n  state      = \"Active\"\n  tags       = [\"Tag\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Resources with Terraform\nDESCRIPTION: Example showing how to configure Azure DevOps project, Git repository, and build pipeline using Terraform. Requires AZDO_PERSONAL_ACCESS_TOKEN and AZDO_ORG_SERVICE_URL environment variables to be set.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Make sure to set the following environment variables:\n#   AZDO_PERSONAL_ACCESS_TOKEN\n#   AZDO_ORG_SERVICE_URL\nterraform {\n  required_providers {\n    azuredevops = {\n      source = \"microsoft/azuredevops\"\n      version = \">=0.1.0\"\n    }\n  }\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name = \"My Awesome Project\"\n  description  = \"All of my awesomee things\"\n}\n\nresource \"azuredevops_git_repository\" \"repository\" {\n  project_id = azuredevops_project.project.id\n  name       = \"My Awesome Repo\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_build_definition\" \"build_definition\" {\n  project_id = azuredevops_project.project.id\n  name       = \"My Awesome Build Pipeline\"\n  path       = \"\\\"\n\n  repository {\n    repo_type   = \"TfsGit\"\n    repo_id     = azuredevops_git_repository.repository.id\n    branch_name = azuredevops_git_repository.repository.default_branch\n    yml_path    = \"azure-pipelines.yml\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Repository in Azure DevOps with Terraform\nDESCRIPTION: This snippet demonstrates how to create a new Git repository within an Azure DevOps project using Terraform. It includes the creation of the project and the repository with initialization settings.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_repository.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id     = azuredevops_project.example.id\n  name           = \"Example Git Repository\"\n  default_branch = \"refs/heads/main\"\n  initialization {\n    init_type = \"Clean\"\n  }\n  lifecycle {\n    ignore_changes = [\n      initialization,\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forking an Azure DevOps Git Repository with Terraform\nDESCRIPTION: This example demonstrates how to create a fork of an existing Azure DevOps Git repository using Terraform. It creates a new repository as a fork of an existing one within the same project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_repository.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id     = azuredevops_project.example.id\n  name           = \"Example Git Repository\"\n  default_branch = \"refs/heads/main\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_git_repository\" \"example-fork\" {\n  project_id           = azuredevops_project.example.id\n  name                 = \"Example Fork Repository\"\n  parent_repository_id = azuredevops_git_repository.example.id\n  initialization {\n    init_type = \"Fork\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Git Repository File in Azure DevOps\nDESCRIPTION: Demonstrates how to create a basic Git repository file using Terraform. This example creates a project, initializes a Git repository, and adds a .gitignore file with specific content.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_repository_file.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Git Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_git_repository_file\" \"example\" {\n  repository_id       = azuredevops_git_repository.example.id\n  file                = \".gitignore\"\n  content             = \"**/*.tfstate\"\n  branch              = \"refs/heads/master\"\n  commit_message      = \"First commit\"\n  overwrite_on_create = false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Service Endpoints in Azure DevOps with Terraform\nDESCRIPTION: Example of creating both DockerHub and custom Docker registry service connections in Azure DevOps. Shows configuration for project creation and two types of registry connections with their respective required parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_dockerregistry.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\n# dockerhub registry service connection\nresource \"azuredevops_serviceendpoint_dockerregistry\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Docker Hub\"\n  docker_username       = \"example\"\n  docker_email          = \"email@example.com\"\n  docker_password       = \"12345\"\n  registry_type         = \"DockerHub\"\n}\n\n# other docker registry service connection\nresource \"azuredevops_serviceendpoint_dockerregistry\" \"example-other\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Docker Registry\"\n  docker_registry       = \"https://sample.azurecr.io/v1\"\n  docker_username       = \"sample\"\n  docker_password       = \"12345\"\n  registry_type         = \"Others\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Git Repository Information in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_git_repository data source to retrieve information about a specific Git repository within an Azure DevOps project. It first retrieves the project ID and then uses it to fetch details of a named repository.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/git_repository.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\n# Load a specific Git repository by name\ndata \"azuredevops_git_repository\" \"example-single-repo\" {\n  project_id = data.azuredevops_project.example.id\n  name       = \"Example Repository\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Variable Group in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to create a simple variable group in Azure DevOps using Terraform. It includes creating a project and defining variables within the group, including a secret variable.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/variable_group.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_variable_group\" \"example\" {\n  project_id   = azuredevops_project.example.id\n  name         = \"Example Variable Group\"\n  description  = \"Example Variable Group Description\"\n  allow_access = true\n\n  variable {\n    name  = \"key1\"\n    value = \"val1\"\n  }\n\n  variable {\n    name         = \"key2\"\n    secret_value = \"val2\"\n    is_secret    = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Repository File with Author Email Pattern Policy\nDESCRIPTION: Shows how to create a Git repository file with an author email pattern policy. This example includes setting up the project, repository, email pattern policy, and creating a file with specific author details.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_repository_file.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Git Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_repository_policy_author_email_pattern\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  enabled               = true\n  blocking              = true\n  author_email_patterns = [\"auhtor@test.com\"]\n  repository_ids        = [azuredevops_git_repository.example.id]\n}\n\nresource \"azuredevops_git_repository_file\" \"example\" {\n  repository_id       = azuredevops_git_repository.example.id\n  file                = \".gitignore\"\n  content             = \"**/*.tfstate\"\n  branch              = \"refs/heads/master\"\n  commit_message      = \"First commit\"\n  overwrite_on_create = false\n  author_name         = \"authorname\"\n  author_email        = \"auhtor@test.com\"\n  depends_on          = [azuredevops_repository_policy_author_email_pattern.example]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Build Validation Branch Policy\nDESCRIPTION: Example of creating a build validation branch policy with multiple scopes and file patterns. Demonstrates setting up a project, git repository, build definition, and associated branch policy with various configuration options.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_build_validation.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_build_definition\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Build Definition\"\n\n  repository {\n    repo_type = \"TfsGit\"\n    repo_id   = azuredevops_git_repository.example.id\n    yml_path  = \"azure-pipelines.yml\"\n  }\n}\n\nresource \"azuredevops_branch_policy_build_validation\" \"example\" {\n  project_id = azuredevops_project.example.id\n\n  enabled  = true\n  blocking = true\n\n  settings {\n    display_name                = \"Example build validation policy\"\n    build_definition_id         = azuredevops_build_definition.example.id\n    queue_on_source_update_only = true\n    valid_duration              = 720\n    filename_patterns = [\n      \"/WebApp/*\",\n      \"!/WebApp/Tests/*\",\n      \"*.cs\"\n    ]\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = azuredevops_git_repository.example.default_branch\n      match_type     = \"Exact\"\n    }\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = \"refs/heads/releases\"\n      match_type     = \"Prefix\"\n    }\n\n    scope {\n      match_type = \"DefaultBranch\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Git and Agent Jobs\nDESCRIPTION: Sets up a build definition with generic Git repository integration and multiple agent and agentless jobs with dependencies and execution options.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_definition.html.markdown#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_serviceendpoint_generic_git\" \"example\" {\n  project_id            = data.azuredevops_project.example.id\n  repository_url        = \"https://gitlab.com/example/example.git\"\n  password              = \"token\"\n  service_endpoint_name = \"Example Generic Git\"\n}\n\n\nresource \"azuredevops_build_definition\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Build Definition\"\n  path       = \"\\\\ExampleFolder\"\n\n  ci_trigger {\n    use_yaml = false\n  }\n\n  repository {\n    repo_type             = \"Git\"\n    repo_id               = azuredevops_serviceendpoint_generic_git.example.repository_url\n    branch_name           = \"refs/heads/main\"\n    url                   = azuredevops_serviceendpoint_generic_git.example.repository_url\n    service_connection_id = azuredevops_serviceendpoint_generic_git.example.id\n  }\n\n  jobs {\n    name      = \"Agent Job1\"\n    ref_name  = \"agent_job1\"\n    condition = \"succeededOrFailed()\"\n    target {\n      type = \"AgentJob\"\n      execution_options {\n        type = \"None\"\n      }\n    }\n  }\n\n  jobs {\n    name      = \"Agent Job2\"\n    ref_name  = \"agent_job2\"\n    condition = \"succeededOrFailed()\"\n    dependencies {\n      scope = \"agent_job1\"\n    }\n    target {\n      type    = \"AgentJob\"\n      demands = [\"git\"]\n      execution_options {\n        type              = \"Multi-Configuration\"\n        continue_on_error = true\n        multipliers       = \"multipliers\"\n        max_concurrency   = 2\n      }\n    }\n  }\n\n  jobs {\n    name      = \"Agentless Job1\"\n    ref_name  = \"agentless_job1\"\n    condition = \"succeeded()\"\n    target {\n      type = \"AgentlessJob\"\n      execution_options {\n        type = \"None\"\n      }\n    }\n  }\n\n  jobs {\n    name                    = \"Agentless Job2\"\n    ref_name                = \"agentless_job2\"\n    condition               = \"succeeded()\"\n    job_authorization_scope = \"project\"\n    dependencies {\n      scope = \"agent_job2\"\n    }\n    dependencies {\n      scope = \"agentless_job1\"\n    }\n    target {\n      type = \"AgentlessJob\"\n      execution_options {\n        type              = \"Multi-Configuration\"\n        continue_on_error = true\n        multipliers       = \"multipliers\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Identity AzureRM Service Endpoint in Terraform\nDESCRIPTION: This snippet shows how to create an Azure Resource Manager service endpoint using Managed Identity authentication. It includes project creation and service endpoint configuration with Managed Service Identity.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azurerm.html.markdown#2025-04-23_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_serviceendpoint_azurerm\" \"example\" {\n  project_id                             = azuredevops_project.example.id\n  service_endpoint_name                  = \"Example AzureRM\"\n  service_endpoint_authentication_scheme = \"ManagedServiceIdentity\"\n  azurerm_spn_tenantid                   = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_id                = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_name              = \"Example Subscription Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch-Level Git Permissions in Azure DevOps with Terraform\nDESCRIPTION: This snippet illustrates how to set up branch-level Git permissions. It creates a project and repository, then assigns specific permissions to a group for a particular branch within that repository.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_permissions.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Empty Git Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\ndata \"azuredevops_group\" \"example-group\" {\n  name = \"Project Collection Administrators\"\n}\n\nresource \"azuredevops_git_permissions\" \"example-permissions\" {\n  project_id    = azuredevops_git_repository.example.project_id\n  repository_id = azuredevops_git_repository.example.id\n  branch_name   = \"refs/heads/master\"\n  principal     = data.azuredevops_group.example-group.id\n  permissions = {\n    RemoveOthersLocks = \"Allow\"\n    ForcePush         = \"Deny\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Manual AzureRM Service Endpoint (Subscription Scoped) in Terraform\nDESCRIPTION: This snippet demonstrates how to create a manual Azure Resource Manager service endpoint scoped to a subscription using Terraform. It includes creating a project and setting up the service endpoint with service principal credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azurerm.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_azurerm\" \"example\" {\n  project_id                             = azuredevops_project.example.id\n  service_endpoint_name                  = \"Example AzureRM\"\n  description                            = \"Managed by Terraform\"\n  service_endpoint_authentication_scheme = \"ServicePrincipal\"\n  credentials {\n    serviceprincipalid  = \"00000000-0000-0000-0000-000000000000\"\n    serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  }\n  azurerm_spn_tenantid      = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_id   = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_name = \"Example Subscription Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Project Pipeline Settings with Terraform\nDESCRIPTION: Example showing how to create an Azure DevOps project and configure its pipeline settings using Terraform. Demonstrates setting various pipeline security and scope controls.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project_pipeline_settings.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_project_pipeline_settings\" \"example\" {\n  project_id = azuredevops_project.example.id\n\n  enforce_job_scope                    = true\n  enforce_referenced_repo_scoped_token = false\n  enforce_settable_var                 = true\n  publish_pipeline_metadata            = false\n  status_badges_are_private            = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Definition with GitHub Enterprise Integration\nDESCRIPTION: Sets up a build definition that integrates with GitHub Enterprise, including service endpoint configuration and scheduled builds.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_definition.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_serviceendpoint_github_enterprise\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example GitHub Enterprise\"\n  url                   = \"https://github.contoso.com\"\n  description           = \"Managed by Terraform\"\n\n  auth_personal {\n    personal_access_token = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  }\n}\n\nresource \"azuredevops_build_definition\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Build Definition\"\n  path       = \"\\\\ExampleFolder\"\n\n  ci_trigger {\n    use_yaml = false\n  }\n\n  repository {\n    repo_type             = \"GitHubEnterprise\"\n    repo_id               = \"<GitHub Org>/<Repo Name>\"\n    github_enterprise_url = \"https://github.company.com\"\n    branch_name           = \"master\"\n    yml_path              = \"azure-pipelines.yml\"\n    service_connection_id = azuredevops_serviceendpoint_github_enterprise.example.id\n  }\n\n  schedules {\n    branch_filter {\n      include = [\"main\"]\n      exclude = [\"test\", \"regression\"]\n    }\n    days_to_build              = [\"Wed\", \"Sun\"]\n    schedule_only_with_changes = true\n    start_hours                = 10\n    start_minutes              = 59\n    time_zone                  = \"(UTC) Coordinated Universal Time\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Build Definition using Project GUID and ID in Terraform\nDESCRIPTION: This shell command provides an alternative method for importing an Azure DevOps Build Definition into Terraform state. It utilizes the project's unique identifier (GUID) `00000000-0000-0000-0000-000000000000` and the build definition ID (0). The `azuredevops_build_definition.example` refers to the resource name defined in the Terraform configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_definition.html.markdown#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_build_definition.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Iteration Permissions with Terraform\nDESCRIPTION: This snippet demonstrates how to use Terraform to set up a project, retrieve a group, and assign different permissions to iterations. It shows both project-level and specific iteration-level permission assignments.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/iteration_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_iteration_permissions\" \"example-root-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n  permissions = {\n    CREATE_CHILDREN = \"Deny\"\n    GENERIC_READ    = \"NotSet\"\n    DELETE          = \"Deny\"\n  }\n}\n\nresource \"azuredevops_iteration_permissions\" \"example-iteration-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n  path       = \"Iteration 1\"\n  permissions = {\n    CREATE_CHILDREN = \"Allow\"\n    GENERIC_READ    = \"NotSet\"\n    DELETE          = \"Allow\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Automatic AzureRM Service Endpoint in Terraform\nDESCRIPTION: This snippet demonstrates how to create an automatic Azure Resource Manager service endpoint using Terraform. It includes project creation and automatic service endpoint configuration without explicit credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azurerm.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_serviceendpoint_azurerm\" \"example\" {\n  project_id                             = azuredevops_project.example.id\n  service_endpoint_name                  = \"Example AzureRM\"\n  service_endpoint_authentication_scheme = \"ServicePrincipal\"\n  azurerm_spn_tenantid                   = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_id                = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_name              = \"Example Subscription Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Endpoint Permissions in Azure DevOps with Terraform\nDESCRIPTION: This snippet demonstrates how to set up a project, assign permissions to a group for all service endpoints in the project, create a Docker registry service endpoint, and assign specific permissions for that endpoint. It showcases the use of azuredevops_serviceendpoint_permissions resource.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_serviceendpoint_permissions\" \"example-root-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n  permissions = {\n    Use               = \"allow\"\n    Administer        = \"allow\"\n    Create            = \"allow\"\n    ViewAuthorization = \"allow\"\n    ViewEndpoint      = \"allow\"\n  }\n}\n\nresource \"azuredevops_serviceendpoint_dockerregistry\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Docker Hub\"\n  docker_username       = \"username\"\n  docker_email          = \"email@example.com\"\n  docker_password       = \"password\"\n  registry_type         = \"DockerHub\"\n}\n\nresource \"azuredevops_serviceendpoint_permissions\" \"example-permissions\" {\n  project_id         = azuredevops_project.example.id\n  principal          = data.azuredevops_group.example-readers.id\n  serviceendpoint_id = azuredevops_serviceendpoint_dockerregistry.example.id\n  permissions = {\n    Use               = \"allow\"\n    Administer        = \"deny\"\n    Create            = \"deny\"\n    ViewAuthorization = \"allow\"\n    ViewEndpoint      = \"allow\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Team Members with Terraform\nDESCRIPTION: This snippet demonstrates how to use Terraform to create a project, team, and manage team members in Azure DevOps. It creates a project, retrieves a group, creates a team, and assigns members to that team.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/team_members.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-project-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_team\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"${azuredevops_project.example.name} Team 2\"\n}\n\nresource \"azuredevops_team_members\" \"example-team-members\" {\n  project_id = azuredevops_team.example.project_id\n  team_id    = azuredevops_team.example.id\n  mode       = \"overwrite\"\n  members = [\n    data.azuredevops_group.example-project-readers.descriptor\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project, Wiki, and Wiki Page using Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project, a project wiki, and a wiki page using Terraform. It shows the configuration for azuredevops_project, azuredevops_wiki, and azuredevops_wiki_page resources.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/wiki_page.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name        = \"Example Project\"\n  description = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_wiki\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example project wiki \"\n  type       = \"projectWiki\"\n}\n\nresource \"azuredevops_wiki_page\" \"example\" {\n  project_id = azuredevops_project.example.id\n  wiki_id    = azuredevops_wiki.example.id\n  path       = \"/page\"\n  content    = \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps Teams Data in Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_teams data source to retrieve information about teams in Azure DevOps. It shows how to query team details and output various attributes such as project ID, name, administrators, and members.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/teams.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_teams\" \"example\" {\n}\n\noutput \"project_id\" {\n  value = data.azuredevops_teams.example.teams.*.project_id\n}\n\noutput \"name\" {\n  value = data.azuredevops_teams.example.teams.*.name\n}\n\noutput \"all_administrators\" {\n  value = data.azuredevops_teams.example.teams.*.administrators\n}\n\noutput \"administrators\" {\n  value = data.azuredevops_teams.example.teams.*.members\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Build Definition with Git Repository\nDESCRIPTION: Configures a basic build definition with a Git repository, variable groups, and scheduled triggers. Includes project setup, repository initialization, and variable configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_definition.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_variable_group\" \"example\" {\n  project_id   = azuredevops_project.example.id\n  name         = \"Example Pipeline Variables\"\n  description  = \"Managed by Terraform\"\n  allow_access = true\n\n  variable {\n    name  = \"FOO\"\n    value = \"BAR\"\n  }\n}\n\nresource \"azuredevops_build_definition\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Build Definition\"\n  path       = \"\\\\ExampleFolder\"\n\n  ci_trigger {\n    use_yaml = false\n  }\n\n  schedules {\n    branch_filter {\n      include = [\"master\"]\n      exclude = [\"test\", \"regression\"]\n    }\n    days_to_build              = [\"Wed\", \"Sun\"]\n    schedule_only_with_changes = true\n    start_hours                = 10\n    start_minutes              = 59\n    time_zone                  = \"(UTC) Coordinated Universal Time\"\n  }\n\n  repository {\n    repo_type   = \"TfsGit\"\n    repo_id     = azuredevops_git_repository.example.id\n    branch_name = azuredevops_git_repository.example.default_branch\n    yml_path    = \"azure-pipelines.yml\"\n  }\n\n  variable_groups = [\n    azuredevops_variable_group.example.id\n  ]\n\n  variable {\n    name  = \"PipelineVariable\"\n    value = \"Go Microsoft!\"\n  }\n\n  variable {\n    name         = \"PipelineSecret\"\n    secret_value = \"ZGV2cw\"\n    is_secret    = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and Service Endpoint in Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and a corresponding service endpoint using Terraform. It specifies project details and service endpoint configuration including organization URL, release API URL, and personal access token.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azuredevops.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_azuredevops\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Azure DevOps\"\n  org_url               = \"https://dev.azure.com/testorganization\"\n  release_api_url       = \"https://vsrm.dev.azure.com/testorganization\"\n  personal_access_token = \"0000000000000000000000000000000000000000000000000000\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from a Private Git Repository into Azure DevOps\nDESCRIPTION: This example illustrates how to import a private Git repository into Azure DevOps using Terraform. It includes options for authentication using either a service connection or username/password credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_repository.html.markdown#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_serviceendpoint_generic_git\" \"example-serviceendpoint\" {\n  project_id            = azuredevops_project.example.id\n  repository_url        = \"https://dev.azure.com/org/project/_git/repository\"\n  username              = \"username\"\n  password              = \"<password>/<PAT>\"\n  service_endpoint_name = \"Example Generic Git\"\n  description           = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example-import\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Import Existing Repository\"\n  initialization {\n    init_type             = \"Import\"\n    source_type           = \"Git\"\n    source_url            = \"https://dev.azure.com/example-org/private-repository.git\"\n    service_connection_id = azuredevops_serviceendpoint_generic_git.example-serviceendpoint.id\n  }\n}\n\nresource \"azuredevops_git_repository\" \"example-import2\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Import Existing Repository\"\n  initialization {\n    init_type   = \"Import\"\n    source_type = \"Git\"\n    source_url  = \"https://dev.azure.com/example-org/private-repository.git\"\n    username    = \"username\"\n    password    = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project, Git Repository, and Wikis using Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project, a Git repository, and two types of Wikis (project Wiki and code Wiki) using Terraform. It showcases the configuration for both project-level and repository-level Wikis.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/wiki.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name        = \"Example Project\"\n  description = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_wiki\" \"example\" {\n  name       = \"Example project wiki \"\n  project_id = azuredevops_project.example.id\n  type       = \"projectWiki\"\n}\n\nresource \"azuredevops_wiki\" \"example2\" {\n  name          = \"Example wiki in repository\"\n  project_id    = azuredevops_project.example.id\n  repository_id = azuredevops_git_repository.example.id\n  version       = \"main\"\n  type          = \"codeWiki\"\n  mapped_path   = \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Elastic Pool with Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project, service endpoint, and elastic pool using Terraform. It sets up the necessary resources and configures the elastic pool with specific parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/elastic_pool.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_azurerm\" \"example\" {\n  project_id                             = azuredevops_project.example.id\n  service_endpoint_name                  = \"Example Azure Connection\"\n  description                            = \"Managed by Terraform\"\n  service_endpoint_authentication_scheme = \"ServicePrincipal\"\n  credentials {\n    serviceprincipalid  = \"00000000-0000-0000-0000-000000000000\"\n    serviceprincipalkey = \"00000000-0000-0000-0000-000000000000\"\n  }\n  azurerm_spn_tenantid      = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_id   = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_name = \"Subscription Name\"\n}\n\nresource \"azuredevops_elastic_pool\" \"example\" {\n  name                   = \"Example Elastic Pool\"\n  service_endpoint_id    = azuredevops_serviceendpoint_azurerm.example.id\n  service_endpoint_scope = azuredevops_project.example.id\n  desired_idle           = 2\n  max_capacity           = 3\n  azure_resource_id      = \"/subscriptions/<Subscription Id>/resourceGroups/<Resource Name>/providers/Microsoft.Compute/virtualMachineScaleSets/<VMSS Name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure DevOps Team with Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and team using Terraform. It sets up a project, retrieves contributor and reader groups, and creates a team with specified administrators and members.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/team.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-project-contributors\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Contributors\"\n}\n\ndata \"azuredevops_group\" \"example-project-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_team\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Team\"\n  administrators = [\n    data.azuredevops_group.example-project-contributors.descriptor\n  ]\n  members = [\n    data.azuredevops_group.example-project-readers.descriptor\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Git Permissions in Azure DevOps with Terraform\nDESCRIPTION: This snippet demonstrates how to set up project-level Git permissions for a group in Azure DevOps. It creates a project, retrieves a group, and assigns specific Git permissions to that group.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_git_permissions\" \"example-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n  permissions = {\n    CreateRepository = \"Deny\"\n    DeleteRepository = \"Deny\"\n    RenameRepository = \"NotSet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Administrators in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_team_administrators resource to manage team administrators in an Azure DevOps project. It includes creating a project, retrieving the Contributors group, creating a team, and assigning administrators to that team.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/team_administrators.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-project-contributors\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Contributors\"\n}\n\nresource \"azuredevops_team\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"${azuredevops_project.example.name} Team 2\"\n}\n\nresource \"azuredevops_team_administrators\" \"example-team-administrators\" {\n  project_id = azuredevops_team.example.project_id\n  team_id    = azuredevops_team.example.id\n  mode       = \"overwrite\"\n  administrators = [\n    data.azuredevops_group.example-project-contributors.descriptor\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Git Repository in Azure DevOps\nDESCRIPTION: This snippet shows how to create an empty Git repository within an Azure DevOps project. It initializes the repository with a 'Clean' initialization type.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_repository.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Empty Git Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JFrog Artifactory Endpoint with Token Authentication in Azure DevOps\nDESCRIPTION: This snippet demonstrates how to create a JFrog Artifactory server endpoint in an Azure DevOps project using token authentication. It includes creating a project and setting up the service endpoint with a token.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_artifactory.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_artifactory\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Artifactory\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_token {\n    token = \"0000000000000000000000000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Build Folder Permissions in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to set specific permissions for a Build Folder in an Azure DevOps project. It creates a project, retrieves a group, creates a build folder, and sets permissions for that folder.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_folder_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_build_folder\" \"example\" {\n  project_id  = azuredevops_project.example.id\n  path        = \"\\\\ExampleFolder\"\n  description = \"ExampleFolder description\"\n}\n\nresource \"azuredevops_build_folder_permissions\" \"example\" {\n  project_id = azuredevops_project.example.id\n  path       = \"\\\\ExampleFolder\"\n  principal  = data.azuredevops_group.example-readers.id\n\n  permissions = {\n    \"ViewBuilds\" : \"Allow\",\n    \"EditBuildQuality\" : \"Allow\",\n    \"RetainIndefinitely\" : \"Allow\",\n    \"DeleteBuilds\" : \"Deny\",\n    \"ManageBuildQualities\" : \"Deny\",\n    \"DestroyBuilds\" : \"Deny\",\n    \"UpdateBuildInformation\" : \"Deny\",\n    \"QueueBuilds\" : \"Allow\",\n    \"ManageBuildQueue\" : \"Deny\",\n    \"StopBuilds\" : \"Allow\",\n    \"ViewBuildDefinition\" : \"Allow\",\n    \"EditBuildDefinition\" : \"Deny\",\n    \"DeleteBuildDefinition\" : \"Deny\",\n    \"AdministerBuildPermissions\" : \"NotSet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository-Level Case Enforcement Policy in Azure DevOps with Terraform\nDESCRIPTION: Creates a repository-specific case enforcement policy that blocks pushes that change name casing on files, folders, branches, and tags. Includes project and repository creation with the policy configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_case_enforcement.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_repository_policy_case_enforcement\" \"example\" {\n  project_id              = azuredevops_project.example.id\n  enabled                 = true\n  blocking                = true\n  enforce_consistent_case = true\n  repository_ids          = [azuredevops_git_repository.example.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Git Permissions Configuration in Azure DevOps using Terraform\nDESCRIPTION: This example demonstrates a complete setup of Git permissions at project, repository, and branch levels. It creates a project, repository, and assigns different permissions to various groups at each level.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_permissions.html.markdown#2025-04-23_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-project-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\ndata \"azuredevops_group\" \"example-project-contributors\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Contributors\"\n}\n\ndata \"azuredevops_group\" \"example-project-administrators\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Project administrators\"\n}\n\nresource \"azuredevops_git_permissions\" \"example-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-project-readers.id\n  permissions = {\n    CreateRepository = \"Deny\"\n    DeleteRepository = \"Deny\"\n    RenameRepository = \"NotSet\"\n  }\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id     = azuredevops_project.example.id\n  name           = \"TestRepo\"\n  default_branch = \"refs/heads/master\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_git_permissions\" \"example-repo-permissions\" {\n  project_id    = azuredevops_git_repository.example.project_id\n  repository_id = azuredevops_git_repository.example.id\n  principal     = data.azuredevops_group.example-project-administrators.id\n  permissions = {\n    RemoveOthersLocks = \"Allow\"\n    ManagePermissions = \"Deny\"\n    CreateTag         = \"Deny\"\n    CreateBranch      = \"NotSet\"\n  }\n}\n\nresource \"azuredevops_git_permissions\" \"example-branch-permissions\" {\n  project_id    = azuredevops_git_repository.example.project_id\n  repository_id = azuredevops_git_repository.example.id\n  branch_name   = \"master\"\n  principal     = data.azuredevops_group.example-project-contributors.id\n  permissions = {\n    RemoveOthersLocks = \"Allow\"\n    ForcePush         = \"Deny\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Policy for Work Item Linking in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to create a branch policy for work item linking in Azure DevOps. It sets up a project, a Git repository, and configures the policy with multiple scopes, including exact matching, prefix matching, and default branch matching.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_work_item_linking.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_branch_policy_work_item_linking\" \"example\" {\n  project_id = azuredevops_project.example.id\n\n  enabled  = true\n  blocking = true\n\n  settings {\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = azuredevops_git_repository.example.default_branch\n      match_type     = \"Exact\"\n    }\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = \"refs/heads/releases\"\n      match_type     = \"Prefix\"\n    }\n\n    scope {\n      match_type = \"DefaultBranch\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Azure DevOps Groups with Terraform\nDESCRIPTION: This snippet demonstrates how to create a project, reference existing groups, and create a new group with members in Azure DevOps using Terraform. It showcases the usage of azuredevops_project, azuredevops_group data sources, and the azuredevops_group resource.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/group.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\ndata \"azuredevops_group\" \"example-contributors\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Contributors\"\n}\n\nresource \"azuredevops_group\" \"example\" {\n  scope        = azuredevops_project.example.id\n  display_name = \"Example group\"\n  description  = \"Example description\"\n\n  members = [\n    data.azuredevops_group.example-readers.descriptor,\n    data.azuredevops_group.example-contributors.descriptor\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Azure DevOps Group Membership with Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_group_membership resource to manage group membership in Azure DevOps. It creates a project, adds a user entitlement, retrieves a group, and assigns the user to that group.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/group_membership.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_user_entitlement\" \"example\" {\n  principal_name = \"foo@contoso.com\"\n}\n\ndata \"azuredevops_group\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Build Administrators\"\n}\n\nresource \"azuredevops_group_membership\" \"example\" {\n  group = data.azuredevops_group.example.descriptor\n  members = [\n    azuredevops_user_entitlement.example.descriptor\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Service Principal Entitlement in Azure DevOps using Terraform\nDESCRIPTION: Demonstrates how to create a basic Service Principal Entitlement resource in Azure DevOps. The example shows the minimum required configuration using only the origin_id parameter.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/service_principal_entitlement.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_service_principal_entitlement\" \"example\" {\n  origin_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Build Definition using Project Name and ID in Terraform\nDESCRIPTION: This shell command demonstrates how to import an existing Azure DevOps Build Definition into Terraform state management using the project name (\"Example Project\") and the build definition ID (10). The `azuredevops_build_definition.example` refers to the resource name defined in the Terraform configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_definition.html.markdown#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_build_definition.example \"Example Project\"/10\n```\n\n----------------------------------------\n\nTITLE: Linking Azure DevOps Variable Group to Azure Key Vault using Terraform\nDESCRIPTION: This example shows how to create a variable group in Azure DevOps that is linked to an Azure Key Vault. It includes setting up an Azure service endpoint and referencing Key Vault secrets as variables.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/variable_group.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_azurerm\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example AzureRM\"\n  description           = \"Managed by Terraform\"\n  credentials {\n    serviceprincipalid  = \"00000000-0000-0000-0000-000000000000\"\n    serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  }\n  azurerm_spn_tenantid      = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_id   = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_name = \"Example Subscription Name\"\n}\n\nresource \"azuredevops_variable_group\" \"example\" {\n  project_id   = azuredevops_project.example.id\n  name         = \"Example Variable Group\"\n  description  = \"Example Variable Group Description\"\n  allow_access = true\n\n  key_vault {\n    name                = \"example-kv\"\n    service_endpoint_id = azuredevops_serviceendpoint_azurerm.example.id\n  }\n\n  variable {\n    name = \"key1\"\n  }\n\n  variable {\n    name = \"key2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Policy Merge Types in Azure DevOps using Terraform\nDESCRIPTION: Example of creating a branch policy that defines allowed merge types for repositories in Azure DevOps. The policy configures multiple scopes including specific repository branches and default branches, with different merge type options like squash, rebase, and fast-forward merges.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_merge_types.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_branch_policy_merge_types\" \"example\" {\n  project_id = azuredevops_project.example.id\n\n  enabled  = true\n  blocking = true\n\n  settings {\n    allow_squash                  = true\n    allow_rebase_and_fast_forward = true\n    allow_basic_no_fast_forward   = true\n    allow_rebase_with_merge       = true\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = azuredevops_git_repository.example.default_branch\n      match_type     = \"Exact\"\n    }\n\n    scope {\n      repository_id  = null # All repositories in the project\n      repository_ref = \"refs/heads/releases\"\n      match_type     = \"Prefix\"\n    }\n\n    scope {\n      match_type = \"DefaultBranch\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and Nexus Service Endpoint with Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and a Nexus IQ service endpoint using Terraform. It sets up a private project with Git version control and Agile work item template, then creates a Nexus service endpoint with specified credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_nexus.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_nexus\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"nexus-example\"\n  description           = \"Service Endpoint for 'Nexus IQ' (Managed by Terraform)\"\n  url                   = \"https://example.com\"\n\n  username = \"username\"\n  password = \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Business Hours Check for Service Connection\nDESCRIPTION: Creates a business hours check to protect a service connection. Defines operational hours between 7:00-15:30 UTC on Monday and Tuesday with a timeout of 1440 minutes.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_business_hours.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_serviceendpoint_generic\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  server_url            = \"https://some-server.example.com\"\n  username              = \"username\"\n  password              = \"password\"\n  service_endpoint_name = \"Example Generic\"\n  description           = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_check_business_hours\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = azuredevops_serviceendpoint_generic.example.id\n  target_resource_type = \"endpoint\"\n  start_time           = \"07:00\"\n  end_time             = \"15:30\"\n  time_zone            = \"UTC\"\n  monday               = true\n  tuesday              = true\n\n  timeout = 1440\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Git Repository Branch with Terraform\nDESCRIPTION: Example demonstrating how to create an Azure DevOps project, Git repository, and branches using Terraform. Shows creation of branches from both existing branches and commit IDs.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_repository_branch.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Git Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_git_repository_branch\" \"example\" {\n  repository_id = azuredevops_git_repository.example.id\n  name          = \"example-branch-name\"\n  ref_branch    = azuredevops_git_repository.example.default_branch\n}\n\nresource \"azuredevops_git_repository_branch\" \"example_from_commit_id\" {\n  repository_id = azuredevops_git_repository.example.id\n  name          = \"example-from-commit-id\"\n  ref_commit_id = azuredevops_git_repository_branch.example.last_commit_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Enterprise Server Service Endpoint with OAuth in Azure DevOps\nDESCRIPTION: This snippet shows how to create a GitHub Enterprise Server service endpoint in Azure DevOps using OAuth authentication. It includes creating a project and configuring the service endpoint with OAuth configuration ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_github_enterprise.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_github_enterprise\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example GitHub Enterprise\"\n  description           = \"Managed by Terraform\"\n  auth_oauth {\n    oauth_configuration_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Workload Identity Federation Manual AzureRM Service Endpoint in Terraform\nDESCRIPTION: This snippet shows how to create a manual Azure Resource Manager service endpoint using Workload Identity Federation. It includes project creation, user-assigned identity setup, and federated credential configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azurerm.html.markdown#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"=3.0.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nlocals {\n  service_connection_name = \"example-federated-sc\"\n}\n\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azurerm_resource_group\" \"identity\" {\n  name     = \"identity\"\n  location = \"UK South\"\n}\n\nresource \"azurerm_user_assigned_identity\" \"example\" {\n  location            = azurerm_resource_group.identity.location\n  name                = \"example-identity\"\n  resource_group_name = \"azurerm_resource_group.identity.name\"\n}\n\nresource \"azuredevops_serviceendpoint_azurerm\" \"example\" {\n  project_id                             = azuredevops_project.example.id\n  service_endpoint_name                  = local.service_connection_name\n  description                            = \"Managed by Terraform\"\n  service_endpoint_authentication_scheme = \"WorkloadIdentityFederation\"\n  credentials {\n    serviceprincipalid = azurerm_user_assigned_identity.example.client_id\n  }\n  azurerm_spn_tenantid      = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_id   = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_name = \"Example Subscription Name\"\n}\n\nresource \"azurerm_federated_identity_credential\" \"example\" {\n  name                = \"example-federated-credential\"\n  resource_group_name = azurerm_resource_group.identity.name\n  parent_id           = azurerm_user_assigned_identity.example.id\n  audience            = [\"api://AzureADTokenExchange\"]\n  issuer              = azuredevops_serviceendpoint_azurerm.example.workload_identity_federation_issuer\n  subject             = azuredevops_serviceendpoint_azurerm.example.workload_identity_federation_subject\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Template Check for Service Connection in Azure DevOps\nDESCRIPTION: Example configuration for protecting a service connection using Required Template Check. Creates a project, service endpoint, and applies a template check with specific repository requirements.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_required_template.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_serviceendpoint_generic\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  server_url            = \"https://some-server.example.com\"\n  username              = \"username\"\n  password              = \"password\"\n  service_endpoint_name = \"Example Generic\"\n  description           = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_check_required_template\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  target_resource_id   = azuredevops_serviceendpoint_generic.example.id\n  target_resource_type = \"endpoint\"\n\n  required_template {\n    repository_type = \"azuregit\"\n    repository_name = \"project/repository\"\n    repository_ref  = \"refs/heads/main\"\n    template_path   = \"template/path.yml\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project with Tags using Terraform\nDESCRIPTION: Example configuration for creating an Azure DevOps project with associated tags. Demonstrates setting up a private Git project with Agile work item template and applying tags.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project_tags.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_project_tags\" \"example\" {\n  project_id = azuredevops_project.example.id\n  tags       = [\"tag1\", \"tag2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Authorization in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to set up a project, create a Bitbucket service endpoint, and authorize it using Terraform. It shows the usage of azuredevops_project, azuredevops_serviceendpoint_bitbucket, and azuredevops_resource_authorization resources.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/resource_authorization.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_bitbucket\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  username              = \"username\"\n  password              = \"password\"\n  service_endpoint_name = \"example-bitbucket\"\n  description           = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_resource_authorization\" \"example\" {\n  project_id  = azuredevops_project.example.id\n  resource_id = azuredevops_serviceendpoint_bitbucket.example.id\n  authorized  = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ArgoCD Service Endpoint with Basic Authentication in Azure DevOps\nDESCRIPTION: Terraform configuration for creating an ArgoCD service endpoint using username and password authentication. Shows an alternative authentication method to token-based auth.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_argocd.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_argocd\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example ArgoCD\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://argocd.my.com\"\n  authentication_basic {\n    username = \"username\"\n    password = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Registry Service Endpoint with Service Principal in Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure Container Registry service endpoint using a Service Principal for authentication. It includes creating a project and setting up the service endpoint with necessary parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azurecr.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\n# azure container registry service connection\nresource \"azuredevops_serviceendpoint_azurecr\" \"example\" {\n  project_id                = azuredevops_project.example.id\n  service_endpoint_name     = \"Example AzureCR\"\n  resource_group            = \"example-rg\"\n  azurecr_spn_tenantid      = \"00000000-0000-0000-0000-000000000000\"\n  azurecr_name              = \"ExampleAcr\"\n  azurecr_subscription_id   = \"00000000-0000-0000-0000-000000000000\"\n  azurecr_subscription_name = \"subscription name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NPM Service Endpoint in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to create a NPM service endpoint in Azure DevOps using Terraform. It includes creating a project and setting up the NPM service endpoint with required parameters such as project ID, endpoint name, URL, and access token.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_npm.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_npm\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example npm\"\n  url                   = \"https://registry.npmjs.org\"\n  access_token          = \"00000000-0000-0000-0000-000000000000\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Check Branch Policy in Azure DevOps with Terraform\nDESCRIPTION: This snippet demonstrates how to create and configure a status check branch policy for an Azure DevOps project using Terraform. It includes setting up a project, Git repository, user entitlement, and the branch policy itself with various settings and scopes.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_status_check.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  features = {\n    testplans = \"disabled\"\n    artifacts = \"disabled\"\n  }\n  description = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_user_entitlement\" \"example\" {\n  principal_name       = \"mail@email.com\"\n  account_license_type = \"basic\"\n}\n\nresource \"azuredevops_branch_policy_status_check\" \"example\" {\n  project_id = azuredevops_project.example.id\n\n  enabled  = true\n  blocking = true\n\n  settings {\n    name                 = \"Release\"\n    author_id            = azuredevops_user_entitlement.example.id\n    invalidate_on_update = true\n    applicability        = \"conditional\"\n    display_name         = \"PreCheck\"\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = azuredevops_git_repository.example.default_branch\n      match_type     = \"Exact\"\n    }\n\n    scope {\n      match_type = \"DefaultBranch\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Pool Information with Terraform HCL\nDESCRIPTION: This example demonstrates how to retrieve information about an existing Agent Pool in Azure DevOps using the azuredevops_agent_pool data source, and how to output key properties including name, pool_type, auto_provision and auto_update.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/agent_pool.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_agent_pool\" \"example\" {\n  name = \"Example Agent Pool\"\n}\n\noutput \"name\" {\n  value = data.azuredevops_agent_pool.example.name\n}\n\noutput \"pool_type\" {\n  value = data.azuredevops_agent_pool.example.pool_type\n}\n\noutput \"auto_provision\" {\n  value = data.azuredevops_agent_pool.example.auto_provision\n}\n\noutput \"auto_update\" {\n  value = data.azuredevops_agent_pool.example.auto_update\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Work Item with Custom Fields in HCL\nDESCRIPTION: This snippet shows how to create an Azure DevOps work item with custom fields using Terraform. It includes creating a project and a work item with basic properties and a custom field.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/workitem.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\nresource \"azuredevops_workitem\" \"example\" {\n  project_id = data.azuredevops_project.example.id\n  title      = \"Example Work Item\"\n  type       = \"Issue\"\n  state      = \"Active\"\n  tags       = [\"Tag\"]\n  custom_fields = {\n    example : \"example\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Variable Group Permissions using Terraform\nDESCRIPTION: This snippet demonstrates how to use Terraform to create an Azure DevOps project, variable group, and set permissions for the variable group. It creates a project, a variable group within that project, and then assigns 'View', 'Administer', and 'Use' permissions to the project's 'Readers' group.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/variable_group_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"project\" {\n  name               = \"Testing\"\n  description        = \"Testing-description\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_variable_group\" \"example\" {\n  project_id   = azuredevops_project.project.id\n  name         = \"test\"\n  description  = \"Test Description\"\n  allow_access = true\n\n  variable {\n    name  = \"key1\"\n    value = \"val1\"\n  }\n}\n\ndata \"azuredevops_group\" \"tf-project-readers\" {\n  project_id = azuredevops_project.project.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_variable_group_permissions\" \"permissions\" {\n  project_id        = azuredevops_project.project.id\n  variable_group_id = azuredevops_variable_group.example.id\n  principal         = data.azuredevops_group.tf-project-readers.id\n  permissions = {\n    \"View\" : \"allow\",\n    \"Administer\" : \"allow\",\n    \"Use\" : \"allow\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps Groups with Terraform\nDESCRIPTION: Example showing how to query groups at both organization and project level using the azuredevops_identity_groups data source. The first query loads all groups in an organization, while the second loads groups specific to a project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/identity_groups.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\n# load all existing groups inside an organization\ndata \"azuredevops_identity_groups\" \"example-all-groups\" {\n}\n\n# load all existing groups inside a specific project\ndata \"azuredevops_identity_groups\" \"example-project-groups\" {\n  project_id = data.azuredevops_project.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Policy Comment Resolution in Azure DevOps with Terraform\nDESCRIPTION: Example of creating a comment resolution policy for multiple branch scopes including exact matches, prefix matches, and default branch. The configuration includes project creation, repository initialization, and policy settings.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_comment_resolution.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_branch_policy_comment_resolution\" \"example\" {\n  project_id = azuredevops_project.example.id\n\n  enabled  = true\n  blocking = true\n\n  settings {\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = azuredevops_git_repository.example.default_branch\n      match_type     = \"Exact\"\n    }\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = \"refs/heads/releases\"\n      match_type     = \"Prefix\"\n    }\n\n    scope {\n      match_type = \"DefaultBranch\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and SSH Service Endpoint using Terraform (HCL)\nDESCRIPTION: This snippet demonstrates how to define and provision an Azure DevOps project and an associated SSH service endpoint using Terraform's HCL syntax. Dependencies include the Terraform Azure DevOps provider, and required parameters such as project name, visibility, version control, host, and username. Inputs are project details and endpoint configuration; outputs include provisioned resources with managed state within Terraform. Limitations include dependency on a properly configured provider and required authentication for Terraform operations.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_ssh.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_ssh\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example SSH\"\n  host                  = \"1.2.3.4\"\n  username              = \"username\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Terraform Service Endpoint in Azure DevOps with HCL\nDESCRIPTION: This snippet demonstrates how to create a GCP for Terraform service endpoint in Azure DevOps using Terraform HCL. It includes creating a project and setting up the service endpoint with required parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_gcp_terraform.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_gcp_terraform\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  token_uri             = \"https://oauth2.example.com/token\"\n  client_email          = \"gcp-sa-example@example.iam.gserviceaccount.com\"\n  private_key           = \"0000000000000000000000000000000000000\"\n  service_endpoint_name = \"Example GCP Terraform extension\"\n  gcp_project_id        = \"Example GCP Project\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Queue Pipelines Service Hook in Azure DevOps using Terraform\nDESCRIPTION: This example demonstrates how to create a Storage Queue Pipelines Service Hook in Azure DevOps. It sets up a project, resource group, storage account, and queue, then configures the service hook with run state changed events.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/servicehook_storage_queue_pipelines.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"example-project\"\n}\n\nresource \"azurerm_resource_group\" \"example\" {\n  name     = \"example-resources\"\n  location = \"West Europe\"\n}\n\nresource \"azurerm_storage_account\" \"example\" {\n  name                     = \"servicehookexamplestacc\"\n  resource_group_name      = azurerm_resource_group.example.name\n  location                 = azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\nresource \"azurerm_storage_queue\" \"example\" {\n  name                 = \"examplequeue\"\n  storage_account_name = azurerm_storage_account.example.name\n}\n\nresource \"azuredevops_servicehook_storage_queue_pipelines\" \"example\" {\n  project_id   = azuredevops_project.example.id\n  account_name = azurerm_storage_account.example.name\n  account_key  = azurerm_storage_account.example.primary_access_key\n  queue_name   = azurerm_storage_queue.example.name\n  visi_timeout = 30\n  run_state_changed_event {\n    run_state_filter  = \"Completed\"\n    run_result_filter = \"Succeeded\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure DevOps Project and JFrog Artifactory V2 Service Endpoint with Token Authentication using Terraform (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to use the terraform azuredevops_serviceendpoint_jfrog_artifactory_v2 resource to set up a JFrog Artifactory V2 service endpoint in an Azure DevOps project using token-based authentication. Dependencies include the Azure DevOps and JFrog Artifactory providers in Terraform, as well as installation of the JFrog Extension in Azure DevOps. Required parameters include project_id, service_endpoint_name, url, and an authentication_token block. It creates both the Azure DevOps project and the corresponding Artifactory service endpoint resource, outputting managed identifiers upon creation.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jfrog_artifactory_v2.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_jfrog_artifactory_v2\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example JFrog Artifactory V2\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_token {\n    token = \"0000000000000000000000000000000000000000\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and SonarQube Service Endpoint\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and a SonarQube Server service endpoint using Terraform. It specifies project details and SonarQube connection information.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_sonarqube.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_sonarqube\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example SonarQube\"\n  url                   = \"https://sonarqube.my.com\"\n  token                 = \"0000000000000000000000000000000000000000\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure DevOps Environment Data with Terraform\nDESCRIPTION: This code demonstrates how to create a project and environment, then retrieve environment information using a data source. The example shows required parameters and proper resource dependencies.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/environment.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_environment\" \"example\" {\n  project_id  = azuredevops_project.example.id\n  name        = \"Example Environment\"\n  description = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_environment\" \"example\" {\n  project_id     = azuredevops_project.example.id\n  environment_id = azuredevops_environment.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Service Endpoint with Personal Access Token\nDESCRIPTION: Configures a GitHub service endpoint using personal access token authentication. Requires a project resource and personal access token for authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_github.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_github\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example GitHub Personal Access Token\"\n\n  auth_personal {\n    # Also can be set with AZDO_GITHUB_SERVICE_CONNECTION_PAT environment variable\n    personal_access_token = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Organization-Scoped Feed in Azure DevOps with Terraform\nDESCRIPTION: This snippet demonstrates how to create a feed at the organization level in Azure DevOps using Terraform. It specifies the name of the feed as the only required parameter.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/feed.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_feed\" \"example\" {\n  name = \"examplefeed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AzureDevops Project Permissions with Terraform\nDESCRIPTION: Example of setting up project permissions for an Azure DevOps project. Creates a new project, retrieves the Readers group, and assigns specific permissions including DELETE, EDIT_BUILD_STATUS, WORK_ITEM_MOVE, and DELETE_TEST_RESULTS.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_project_permissions\" \"example-permission\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n  permissions = {\n    DELETE              = \"Deny\"\n    EDIT_BUILD_STATUS   = \"NotSet\"\n    WORK_ITEM_MOVE      = \"Allow\"\n    DELETE_TEST_RESULTS = \"Deny\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and Environment with Terraform\nDESCRIPTION: Example showing how to create an Azure DevOps project and environment using Terraform. The environment is created within the project and requires project ID and name configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/environment.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_environment\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Environment\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps Projects with Terraform\nDESCRIPTION: Example of using the azuredevops_projects data source to retrieve project information and output various project attributes including ID, name, URL, and state. The example filters projects by name and state.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/projects.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_projects\" \"example\" {\n  name  = \"Example Project\"\n  state = \"wellFormed\"\n}\n\noutput \"project_id\" {\n  value = data.azuredevops_projects.example.projects.*.project_id\n}\n\noutput \"name\" {\n  value = data.azuredevops_projects.example.projects.*.name\n}\n\noutput \"project_url\" {\n  value = data.azuredevops_projects.example.projects.*.project_url\n}\n\noutput \"state\" {\n  value = data.azuredevops_projects.example.projects.*.state\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Provider in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the Azure DevOps provider in a Terraform configuration file. It includes the required provider block and an example resource for creating an Azure DevOps project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_using_the_personal_access_token.html.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=0.1.0\"\n    }\n  }\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Test Project\"\n  description = \"Test Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Team Dashboard in Azure DevOps using Terraform\nDESCRIPTION: Example demonstrating how to create a team-level dashboard in Azure DevOps. Creates a project, team, and associates a dashboard with the team.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/dashboard.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name        = \"Example Project\"\n  description = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_team\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example team\"\n}\n\nresource \"azuredevops_dashboard\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example dashboard\"\n  team_id    = azuredevops_team.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Azure DevOps Project Features with Terraform\nDESCRIPTION: Example showing how to create an Azure DevOps project and configure its features using Terraform. Demonstrates setting up a private Git project with specific feature toggles for testplans and artifacts.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project_features.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_project_features\" \"example-features\" {\n  project_id = azuredevops_project.example.id\n  features = {\n    testplans = \"disabled\"\n    artifacts = \"enabled\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project, Repository, and Max File Size Policy\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project, a Git repository within it, and apply a max file size policy to the repository. It sets up a private project with Git version control and applies a 1MB file size limit policy to a specific repository.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_max_file_size.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_repository_policy_max_file_size\" \"example\" {\n  project_id     = azuredevops_project.example.id\n  enabled        = true\n  blocking       = true\n  max_file_size  = 1\n  repository_ids = [azuredevops_git_repository.example.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Generic Service Endpoint with Terraform\nDESCRIPTION: Example configuration for creating a generic service endpoint in Azure DevOps. Shows how to set up a private project and configure a service endpoint with basic authentication credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_generic.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_generic\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  server_url            = \"https://some-server.example.com\"\n  username              = \"username\"\n  password              = \"password\"\n  service_endpoint_name = \"Example Generic\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Control for Service Connection in Azure DevOps\nDESCRIPTION: Creates a branch control check to protect a service connection by limiting which branches can use it. Includes project creation and service endpoint configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_branch_control.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_serviceendpoint_generic\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  server_url            = \"https://some-server.example.com\"\n  username              = \"username\"\n  password              = \"password\"\n  service_endpoint_name = \"Example Generic\"\n  description           = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_check_branch_control\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = azuredevops_serviceendpoint_generic.example.id\n  target_resource_type = \"endpoint\"\n  allowed_branches     = \"refs/heads/main, refs/heads/features/*\"\n\n  timeout = 1440\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure DevOps Groups in Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_groups data source to retrieve all groups in an organization and project-specific groups. It also shows how to reference an Azure DevOps project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/groups.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\n# load all existing groups inside an organization\ndata \"azuredevops_groups\" \"example-all-groups\" {\n}\n\n# load all existing groups inside a specific project\ndata \"azuredevops_groups\" \"example-project-groups\" {\n  project_id = data.azuredevops_project.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NuGet Service Endpoint in Azure DevOps with Terraform\nDESCRIPTION: This snippet demonstrates how to create a NuGet service endpoint in Azure DevOps using Terraform. It includes creating a project and a NuGet service endpoint with an API key.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_nuget.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_nuget\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  api_key               = \"apikey\"\n  service_endpoint_name = \"Example NuGet\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Queue from Organization Pool\nDESCRIPTION: Creates an agent queue from an existing organization-level pool and grants access to all pipelines in the project. Demonstrates the usage of azuredevops_project, azuredevops_agent_pool data source, azuredevops_agent_queue, and azuredevops_resource_authorization resources.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/agent_queue.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\ndata \"azuredevops_agent_pool\" \"example\" {\n  name = \"example-pool\"\n}\n\nresource \"azuredevops_agent_queue\" \"example\" {\n  project_id    = azuredevops_project.example.id\n  agent_pool_id = data.azuredevops_agent_pool.example.id\n}\n\n# Grant access to queue to all pipelines in the project\nresource \"azuredevops_resource_authorization\" \"example\" {\n  project_id  = azuredevops_project.example.id\n  resource_id = azuredevops_agent_queue.example.id\n  type        = \"queue\"\n  authorized  = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Feed Permission in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to create a feed permission in Azure DevOps. It sets up a project, group, feed, and then assigns a 'reader' role to the group for the feed.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/feed_permission.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_group\" \"example\" {\n  scope        = azuredevops_project.example.id\n  display_name = \"Example group\"\n  description  = \"Example description\"\n}\n\nresource \"azuredevops_feed\" \"example\" {\n  name = \"examplefeed\"\n}\n\nresource \"azuredevops_feed_permission\" \"permission\" {\n  feed_id             = azuredevops_feed.example.id\n  role                = \"reader\"\n  identity_descriptor = azuredevops_group.example.descriptor\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Project-Level Max File Size Repository Policy\nDESCRIPTION: This snippet shows how to set a project-level max file size repository policy in Azure DevOps. It creates a project and applies a 1MB file size limit policy to all repositories within the project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_max_file_size.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_repository_policy_max_file_size\" \"example\" {\n  project_id    = azuredevops_project.example.id\n  enabled       = true\n  blocking      = true\n  max_file_size = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Repository-Specific Author Email Pattern Policy in Azure DevOps\nDESCRIPTION: Creates a repository-specific email pattern policy that restricts commit authors to specific email patterns. The policy is applied to a single repository within a project and includes project creation and repository initialization.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_author_email_pattern.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_repository_policy_author_email_pattern\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  enabled               = true\n  blocking              = true\n  author_email_patterns = [\"user1@test.com\", \"user2@test.com\"]\n  repository_ids        = [azuredevops_git_repository.example.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Maven Service Endpoint with Basic Authentication in Azure DevOps using Terraform\nDESCRIPTION: This snippet shows how to create a Maven service endpoint in Azure DevOps using basic authentication with a username and password. It includes creating a project and setting up the service endpoint with a URL, repository ID, and authentication credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_maven.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_maven\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"maven-example\"\n  description           = \"Service Endpoint for 'Maven' (Managed by Terraform)\"\n  url                   = \"https://example.com\"\n  repository_id         = \"example\"\n\n  authentication_basic {\n    username = \"username\"\n    password = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Reviewers Branch Policy in Azure DevOps using Terraform\nDESCRIPTION: Creates a branch policy that enforces minimum reviewer requirements for pull requests. Configures settings like reviewer count, voting rules, and scope definitions for repositories and branches. Demonstrates integration with Azure DevOps project and Git repository resources.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_min_reviewers.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_branch_policy_min_reviewers\" \"example\" {\n  project_id = azuredevops_project.example.id\n\n  enabled  = true\n  blocking = true\n\n  settings {\n    reviewer_count                         = 7\n    submitter_can_vote                     = false\n    last_pusher_cannot_approve             = true\n    allow_completion_with_rejects_or_waits = false\n    on_push_reset_approved_votes           = true # OR on_push_reset_all_votes = true\n    on_last_iteration_require_vote         = false\n\n    scope {\n      repository_id  = azuredevops_git_repository.example.id\n      repository_ref = azuredevops_git_repository.example.default_branch\n      match_type     = \"Exact\"\n    }\n\n    scope {\n      repository_id  = null # All repositories in the project\n      repository_ref = \"refs/heads/releases\"\n      match_type     = \"Prefix\"\n    }\n\n    scope {\n      match_type = \"DefaultBranch\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Organization-Level Feed Retention Policy in Azure DevOps using Terraform\nDESCRIPTION: Shows how to create an organization-level feed retention policy without project association. Includes feed creation and retention policy configuration with package limits and retention days.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/feed_retention_policy.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_feed\" \"example\" {\n  name = \"examplefeed\"\n}\n\nresource \"azuredevops_feed_retention_policy\" \"example\" {\n  feed_id                                   = azuredevops_feed.example.id\n  count_limit                               = 20\n  days_to_keep_recently_downloaded_packages = 30\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Dashboard in Azure DevOps using Terraform\nDESCRIPTION: Example showing how to create a project-level dashboard in Azure DevOps. Creates a project and associates a dashboard with it.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/dashboard.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name        = \"Example Project\"\n  description = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_dashboard\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example dashboard\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Repository-Specific File Path Pattern Policy in Azure DevOps\nDESCRIPTION: Creates a repository-specific file path pattern policy that blocks pushes matching specific file patterns. This example creates a project, a Git repository, and applies the policy to that specific repository.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_file_path_pattern.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_repository_policy_file_path_pattern\" \"example\" {\n  project_id = azuredevops_project.example.id\n\n  enabled           = true\n  blocking          = true\n  filepath_patterns = [\"*.go\", \"/home/test/*.ts\"]\n  repository_ids    = [azuredevops_git_repository.example.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps Git Repositories with Terraform\nDESCRIPTION: Example showing how to retrieve Git repository information using the azuredevops_git_repositories data source. Demonstrates querying all repositories in a project and filtering by repository name.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/git_repositories.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\n# Load all Git repositories of a project, which are accessible for the current user\ndata \"azuredevops_git_repositories\" \"example-all-repos\" {\n  project_id     = data.azuredevops_project.example.id\n  include_hidden = true\n}\n\n# Load a specific Git repository by name\ndata \"azuredevops_git_repositories\" \"example-single-repo\" {\n  project_id = data.azuredevops_project.example.id\n  name       = \"Example Repository\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusive Lock for Azure DevOps Git Repository\nDESCRIPTION: Implements an exclusive lock check for a Git repository in Azure DevOps. The configuration creates a project, initializes a repository, and applies an exclusive lock with a timeout of 43200 minutes.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_exclusive_lock.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_check_exclusive_lock\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  target_resource_id   = \"${azuredevops_project.example.id}.${azuredevops_git_repository.example.id}\"\n  target_resource_type = \"repository\"\n  timeout              = 43200\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bitbucket Service Endpoint in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to create a Bitbucket service endpoint in Azure DevOps using Terraform. It includes creating a project and setting up the Bitbucket service endpoint with required credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_bitbucket.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_bitbucket\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  username              = \"username\"\n  password              = \"password\"\n  service_endpoint_name = \"Example Bitbucket\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Area Permissions in Azure DevOps using Terraform HCL\nDESCRIPTION: This snippet demonstrates how to set up area permissions for a project in Azure DevOps. It creates a new project, retrieves the 'Readers' group, and sets specific permissions for that group on the root area path.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/area_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-project-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_area_permissions\" \"example-root-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-project-readers.id\n  path       = \"/\"\n  permissions = {\n    CREATE_CHILDREN = \"Deny\"\n    GENERIC_READ    = \"Allow\"\n    DELETE          = \"Deny\"\n    WORK_ITEM_READ  = \"Allow\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Folder-Level Work Item Query Permissions (Terraform HCL)\nDESCRIPTION: Sets permissions for a specific folder inside Azure DevOps Shared Queries by including both \"project_id\" and a \"path\" (such as \"/Team\"). The assigned \"principal\" derives from a group data source. Permissions like \"Contribute\", \"Delete\", and \"Read\" are mapped to allowed states. This requires both the parent project and group to exist. The result is targeted access control for the group within a specific query folder. Use \"/\" as the path value to target the Shared Queries folder root.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/workitemquery_permissions.html.markdown#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_workitemquery_permissions\" \"example-permissions\" {\n  project_id = azuredevops_project.example.id\n  path       = \"/Team\"\n  principal  = data.azuredevops_group.example-readers.id\n  permissions = {\n    Contribute = \"Allow\"\n    Delete     = \"Deny\"\n    Read       = \"NotSet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure DevOps Extension with Terraform\nDESCRIPTION: Example configuration for installing an Azure DevOps extension using Terraform. Demonstrates basic setup with required extension_id and publisher_id parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/extension.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_extension\" \"example\" {\n  extension_id = \"extension ID\"\n  publisher_id = \"publisher ID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline Authorization for a Specific Pipeline in Azure DevOps using Terraform\nDESCRIPTION: This snippet shows how to set up pipeline authorization for a specific pipeline in an Azure DevOps project. It creates a project, an agent pool, an agent queue, a git repository, a build definition, and then authorizes the specific pipeline to access the agent queue.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/pipeline_authorization.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_agent_pool\" \"example\" {\n  name           = \"Example Pool\"\n  auto_provision = false\n  auto_update    = false\n}\n\nresource \"azuredevops_agent_queue\" \"example\" {\n  project_id    = azuredevops_project.example.id\n  agent_pool_id = azuredevops_agent_pool.example.id\n}\n\ndata \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Project\"\n}\n\nresource \"azuredevops_build_definition\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Pipeline\"\n\n  repository {\n    repo_type = \"TfsGit\"\n    repo_id   = data.azuredevops_git_repository.example.id\n    yml_path  = \"azure-pipelines.yml\"\n  }\n}\n\nresource \"azuredevops_pipeline_authorization\" \"example\" {\n  project_id  = azuredevops_project.example.id\n  resource_id = azuredevops_agent_queue.example.id\n  type        = \"queue\"\n  pipeline_id = azuredevops_build_definition.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Azure DevOps Group Entitlement by Origin ID in Terraform (HCL)\nDESCRIPTION: Declares an Azure DevOps group entitlement resource referencing an external group (e.g., Azure Active Directory) via `origin` and `origin_id`. The `origin` (such as `aad`) and the unique `origin_id` are required to link to the correct external group. This usage is for situations where managing an external security group or membership is required and leverages Azure DevOps' support for different origin types. Prerequisites include knowing the external group's GUID and ensuring Azure DevOps permissions are correctly configured.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/group_entitlement.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_group_entitlement\" \"example\" {\n  origin    = \"aad\"\n  origin_id = \"00000000-0000-0000-0000-000000000000\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Checkmarx One Service Endpoint with API Key in Azure DevOps (HCL)\nDESCRIPTION: This snippet demonstrates how to create a Checkmarx One service endpoint in Azure DevOps using an API key for authorization. It creates a project and then sets up the service endpoint with the required parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_checkmarx_one.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_checkmarx_one\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Checkmarx One\"\n  server_url            = \"https://server.com\"\n  api_key               = \"apikey\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Service Endpoint with GitHub Apps\nDESCRIPTION: Configures a GitHub service endpoint using GitHub Apps authentication. Requires a project resource and pre-configured GitHub App integration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_github.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_github\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example GitHub Apps: Azure Pipelines\"\n  # Note Github Apps do not support a description and will always be empty string. Must be explicitly set to override the default value.  \n  description = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Business Hours Check for Agent Queue\nDESCRIPTION: Creates a business hours check to protect an agent queue. Configures operational hours between 7:00-15:30 UTC on Monday and Tuesday.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_business_hours.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_agent_pool\" \"example\" {\n  name = \"example-pool\"\n}\n\nresource \"azuredevops_agent_queue\" \"example\" {\n  project_id    = azuredevops_project.example.id\n  agent_pool_id = azuredevops_agent_pool.example.id\n}\n\nresource \"azuredevops_check_business_hours\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = azuredevops_agent_queue.example.id\n  target_resource_type = \"queue\"\n  start_time           = \"07:00\"\n  end_time             = \"15:30\"\n  time_zone            = \"UTC\"\n  monday               = true\n  tuesday              = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Path Length Repository Policy for a Specific Repository in Azure DevOps\nDESCRIPTION: This snippet demonstrates how to create a project, a Git repository, and set a max path length policy for that specific repository using Terraform. It sets up a private project with a Git repository and applies a max path length policy of 500 characters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_max_path_length.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Sample Repo\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_repository_policy_max_path_length\" \"example\" {\n  project_id      = azuredevops_project.example.id\n  enabled         = true\n  blocking        = true\n  max_path_length = 500\n  repository_ids  = [azuredevops_git_repository.example.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Provider with Base64 Encoded Certificate\nDESCRIPTION: Terraform configuration demonstrating how to set up the Azure DevOps provider using a base64 encoded certificate string. Shows provider configuration with encoded certificate and required service principal details.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_service_principal_using_a_client_certificate.html.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=0.1.0\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n  org_service_url = \"https://dev.azure.com/my-org\"\n  client_id                   = \"00000000-0000-0000-0000-000000000001\"\n  tenant_id                   = \"00000000-0000-0000-0000-000000000001\"\n  client_certificate          = \"MII....lots.and.lots.of.ascii.characters\"\n  client_certificate_password = \"cert password\"\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Test Project\"\n  description = \"Test Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure DevOps Build Folder with Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and a build folder within it using Terraform. It specifies the project details and the build folder's path and description.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_folder.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_build_folder\" \"example\" {\n  project_id  = azuredevops_project.example.id\n  path        = \"\\\\ExampleFolder\"\n  description = \"ExampleFolder description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Visual Studio Marketplace Service Endpoint with Basic Authentication - Terraform HCL\nDESCRIPTION: Provides an example of defining an Azure DevOps project and associating a Visual Studio Marketplace service endpoint using username and password for authentication. Utilizes the terraform-provider-azuredevops with required azuredevops_project and azuredevops_serviceendpoint_visualstudiomarketplace resources, where the authentication_basic block specifies both username and password parameters for Marketplace login. Critical parameters are project_id, service_endpoint_name, url, description, and authentication_basic. The outcome is an integrated endpoint in Azure DevOps for Visual Studio Marketplace interaction.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_visualstudiomarketplace.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_visualstudiomarketplace\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Marketplace\"\n  url                   = \"https://markpetplace.com\"\n  authentication_basic {\n    username = \"username\"\n    password = \"password\"\n  }\n  description = \"Managed by Terraform\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Queue Pipelines Service Hook with Empty Event Block\nDESCRIPTION: This example shows how to configure a Storage Queue Pipelines Service Hook with an empty run_state_changed_event block, which will trigger the associated action for all events.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/servicehook_storage_queue_pipelines.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_servicehook_storage_queue_pipelines\" \"example\" {\n  project_id   = azuredevops_project.example.id\n  account_name = azurerm_storage_account.example.name\n  account_key  = azurerm_storage_account.example.primary_access_key\n  queue_name   = azurerm_storage_queue.example.name\n  visi_timeout = 30\n  run_state_changed_event {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Level Feed Retention Policy in Azure DevOps using Terraform\nDESCRIPTION: Demonstrates how to create a project-level feed retention policy with specified count limits and retention days. Includes project creation, feed creation, and retention policy configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/feed_retention_policy.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_feed\" \"example\" {\n  name       = \"ExampleFeed\"\n  project_id = azuredevops_project.example.id\n}\n\nresource \"azuredevops_feed_retention_policy\" \"example\" {\n  project_id                                = azuredevops_project.example.id\n  feed_id                                   = azuredevops_feed.example.id\n  count_limit                               = 20\n  days_to_keep_recently_downloaded_packages = 30\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Project-Level Max Path Length Repository Policy in Azure DevOps\nDESCRIPTION: This snippet shows how to set a project-level max path length repository policy in Azure DevOps using Terraform. It creates a private project and applies a max path length policy of 1000 characters to all repositories in the project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_max_path_length.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_repository_policy_max_path_length\" \"example\" {\n  project_id      = azuredevops_project.example.id\n  enabled         = true\n  blocking        = true\n  max_path_length = 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Repository-Level Git Permissions in Azure DevOps using Terraform\nDESCRIPTION: This example shows how to configure repository-level Git permissions. It creates a project and a repository, then assigns specific permissions to a group for that repository.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_permissions.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-group\" {\n  name = \"Project Collection Administrators\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Empty Git Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_git_permissions\" \"example-permissions\" {\n  project_id    = azuredevops_git_repository.example.project_id\n  repository_id = azuredevops_git_repository.example.id\n  principal     = data.azuredevops_group.example-group.id\n  permissions = {\n    RemoveOthersLocks = \"Allow\"\n    ManagePermissions = \"Deny\"\n    CreateTag         = \"Deny\"\n    CreateBranch      = \"NotSet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Checkmarx SCA Service Endpoint in Azure DevOps with Terraform\nDESCRIPTION: Demonstrates how to create a Checkmarx SCA service endpoint in Azure DevOps using Terraform. Includes project creation and service endpoint configuration with required parameters like URLs, account credentials, and authentication details.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_checkmarx_sca.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_checkmarx_sca\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Checkmarx SCA\"\n  access_control_url    = \"https://accesscontrol.com\"\n  server_url            = \"https://server.com\"\n  web_app_url           = \"https://webapp.com\"\n  account               = \"account\"\n  username              = \"username\"\n  password              = \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Openshift Endpoint with KubeConfig in HCL\nDESCRIPTION: This HCL example illustrates creating an Azure DevOps project and an Openshift service endpoint configured to use a kubeconfig file for authentication via the `auth_none` block. It requires the project ID, service endpoint name, server URL, and the kubeconfig content within the `kube_config` argument inside `auth_none`.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_openshift.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_openshift\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Openshift\"\n  server_url            = \"https://example.server\"\n  auth_none {\n    kube_config = \"config\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Azure DevOps Organization Information with azuredevops_client_config Data Source\nDESCRIPTION: This example demonstrates how to use the azuredevops_client_config data source to access information about the configured Azure DevOps organization and output the organization URL.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/client_config.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_client_config\" \"example\" {}\n\noutput \"org_url\" {\n  value = data.azuredevops_client_config.example.organization_url\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline Authorization for All Pipelines in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to set up pipeline authorization for all pipelines in an Azure DevOps project. It creates a project, an agent pool, an agent queue, and then authorizes all pipelines to access the agent queue.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/pipeline_authorization.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_agent_pool\" \"example\" {\n  name           = \"Example Pool\"\n  auto_provision = false\n  auto_update    = false\n}\n\nresource \"azuredevops_agent_queue\" \"example\" {\n  project_id    = azuredevops_project.example.id\n  agent_pool_id = azuredevops_agent_pool.example.id\n}\n\nresource \"azuredevops_pipeline_authorization\" \"example\" {\n  project_id  = azuredevops_project.example.id\n  resource_id = azuredevops_agent_queue.example.id\n  type        = \"queue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JFrog Distribution V2 Service Endpoint with Token Authentication in Azure DevOps\nDESCRIPTION: This snippet demonstrates how to create a JFrog Distribution V2 service endpoint in Azure DevOps using token authentication. It includes creating a project and the service endpoint with necessary configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jfrog_distribution_v2.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_jfrog_distribution_v2\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example JFrog Distribution V2\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_token {\n    token = \"0000000000000000000000000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure DevOps User Data with Terraform\nDESCRIPTION: Example showing how to retrieve user information from Azure DevOps using the principal_name attribute. This data source allows fetching various user attributes including display name, email, domain, and origin details.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/user.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_user\" \"example\" {\n  principal_name = \"example@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Agent Pool with Terraform\nDESCRIPTION: Example configuration for creating an Azure DevOps agent pool with specific settings for auto-provisioning and auto-update features.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/agent_pool.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_agent_pool\" \"example\" {\n  name           = \"Example-pool\"\n  auto_provision = false\n  auto_update    = false\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Wiki using Terraform\nDESCRIPTION: This snippet shows how to import an existing Azure DevOps Wiki into Terraform state management using its ID. This is useful for managing existing Wikis with Terraform.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/wiki.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_wiki.wiki 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and Jenkins Service Endpoint in HCL\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and a Jenkins service endpoint using Terraform. It sets up a private project with Git version control and Agile work item template, then creates a Jenkins service endpoint with specified credentials and settings.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jenkins.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_jenkins\" \"example\" {\n  project_id             = azuredevops_project.example.id\n  service_endpoint_name  = \"jenkins-example\"\n  description            = \"Service Endpoint for 'Jenkins' (Managed by Terraform)\"\n  url                    = \"https://example.com\"\n  accept_untrusted_certs = false\n  username               = \"username\"\n  password               = \"password\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Provider with Terraform Cloud Workload Identity\nDESCRIPTION: Terraform configuration for Azure DevOps provider using Terraform Cloud workload identity token.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_service_principal_using_an_oidc_token.html.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=1.0.1\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n  org_service_url = \"https://dev.azure.com/my-org\"\n  client_id = \"00000000-0000-0000-0000-000000000001\"\n  tenant_id = \"00000000-0000-0000-0000-000000000001\"\n  use_oidc  = true\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Test Project\"\n  description = \"Test Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Library Permissions in HCL\nDESCRIPTION: This snippet demonstrates how to set up a project, retrieve a group, and assign library permissions using Terraform. It creates a private project, fetches the 'Readers' group, and grants them View, Administer, and Use permissions for the library.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/library_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"project\" {\n  name               = \"Testing\"\n  description        = \"Testing-description\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\ndata \"azuredevops_group\" \"tf-project-readers\" {\n  project_id = azuredevops_project.project.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_library_permissions\" \"permissions\" {\n  project_id = azuredevops_project.project.id\n  principal  = data.azuredevops_group.tf-project-readers.id\n  permissions = {\n    \"View\" : \"allow\",\n    \"Administer\" : \"allow\",\n    \"Use\" : \"allow\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Build Definition Data in HCL\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_build_definition data source to retrieve information about an existing build definition in Azure DevOps. It includes fetching project data and outputting the build definition ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/build_definition.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\ndata \"azuredevops_build_definition\" \"example\" {\n  project_id = data.azuredevops_project.example.id\n  name       = \"existing\"\n}\n\noutput \"id\" {\n  value = data.azuredevops_build_definition.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Workload Identity Federation Automatic AzureRM Service Endpoint in Terraform\nDESCRIPTION: This snippet demonstrates how to create an automatic Azure Resource Manager service endpoint using Workload Identity Federation. It includes project creation and automatic service endpoint configuration with Workload Identity Federation.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azurerm.html.markdown#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_serviceendpoint_azurerm\" \"example\" {\n  project_id                             = azuredevops_project.example.id\n  service_endpoint_name                  = \"Example AzureRM\"\n  service_endpoint_authentication_scheme = \"WorkloadIdentityFederation\"\n  azurerm_spn_tenantid                   = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_id                = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_subscription_name              = \"Example Subscription Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting an Environment with Approval Check in Azure DevOps using Terraform\nDESCRIPTION: This snippet shows how to create an approval check for an environment in Azure DevOps. It creates a project, an environment, a group, and sets up an approval check with the group as the approver.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_approval.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_environment\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Environment\"\n}\n\nresource \"azuredevops_group\" \"example\" {\n  display_name = \"some-azdo-group\"\n}\n\nresource \"azuredevops_check_approval\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  target_resource_id   = azuredevops_environment.example.id\n  target_resource_type = \"environment\"\n\n  requester_can_approve = true\n  approvers = [\n    azuredevops_group.example.origin_id,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Control for Variable Group in Azure DevOps\nDESCRIPTION: Establishes branch control protection for a variable group containing both regular and secret variables.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_branch_control.html.markdown#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_variable_group\" \"example\" {\n  project_id   = azuredevops_project.example.id\n  name         = \"Example Variable Group\"\n  description  = \"Example Variable Group Description\"\n  allow_access = true\n\n  variable {\n    name  = \"key1\"\n    value = \"val1\"\n  }\n\n  variable {\n    name         = \"key2\"\n    secret_value = \"val2\"\n    is_secret    = true\n  }\n}\n\nresource \"azuredevops_check_branch_control\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = azuredevops_variable_group.example.id\n  target_resource_type = \"variablegroup\"\n  allowed_branches     = \"refs/heads/main, refs/heads/features/*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Provider with Separate Plan & Apply Service Principals\nDESCRIPTION: Terraform configuration using different service principals for plan and apply operations with OIDC authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_service_principal_using_an_oidc_token.html.md#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=1.0.1\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n  org_service_url = \"https://dev.azure.com/my-org\"\n  client_id_plan  = \"00000000-0000-0000-0000-000000000001\"\n  client_id_apply = \"00000000-0000-0000-0000-000000000001\"\n  tenant_id_plan  = \"00000000-0000-0000-0000-000000000001\"\n  tenant_id_apply = \"00000000-0000-0000-0000-000000000001\"\n  use_oidc        = true\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Test Project\"\n  description = \"Test Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JFrog Artifactory Endpoint with Basic Authentication in Azure DevOps\nDESCRIPTION: This snippet shows how to create a JFrog Artifactory server endpoint in an Azure DevOps project using basic authentication with a username and password. It includes creating a project and setting up the service endpoint with credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_artifactory.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_artifactory\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Artifactory\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_basic {\n    username = \"username\"\n    password = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Azure DevOps Team Information using Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_team data source to retrieve information about an existing team in an Azure DevOps project. It first creates a project resource and then uses its ID to fetch team data.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/team.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_team\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Project Team\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure DevOps Reserved Names Repository Policy\nDESCRIPTION: This snippet demonstrates how to create a reserved names repository policy for a specific repository within an Azure DevOps project. It includes creating a project, a Git repository, and applying the policy to that repository.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_reserved_names.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_repository_policy_reserved_names\" \"example\" {\n  project_id     = azuredevops_project.example.id\n  enabled        = true\n  blocking       = true\n  repository_ids = [azuredevops_git_repository.example.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitLab Service Endpoint in Azure DevOps with Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and a GitLab service endpoint using Terraform. It includes setting up the project with specific visibility and work item template, and configuring the GitLab service endpoint with necessary parameters like URL, username, and API token.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_gitlab.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_gitlab\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example GitLab\"\n  url                   = \"https://gitlab.com\"\n  username              = \"username\"\n  api_token             = \"token\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Provider with Provider Block in Terraform\nDESCRIPTION: This snippet shows how to configure the Azure DevOps provider in Terraform using the provider block for managed identity authentication. It includes the required providers block and a provider block with the 'use_msi' parameter set to true.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_managed_identity.html.md#2025-04-23_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=0.1.0\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n  use_msi = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Root Build Folder Permissions in Azure DevOps using Terraform\nDESCRIPTION: This snippet shows how to set permissions for the root build folder in an Azure DevOps project. It creates a project, retrieves a group, and sets a specific permission for the root folder.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_folder_permissions.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_build_folder_permissions\" \"example\" {\n  project_id = azuredevops_project.example.id\n  path       = \"\\\\\"\n  principal  = data.azuredevops_group.example-readers.id\n\n  permissions = {\n    \"RetainIndefinitely\" : \"Allow\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Incoming WebHook Service Endpoint\nDESCRIPTION: This snippet shows how to import an existing Azure DevOps Incoming WebHook Service Endpoint into Terraform state. It uses the format projectID/serviceEndpointID or projectName/serviceEndpointID for the import command.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_incomingwebhook.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nterraform import azuredevops_serviceendpoint_incomingwebhook.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Service Endpoint in Azure DevOps with Terraform\nDESCRIPTION: Terraform configuration for creating an AWS service endpoint in Azure DevOps. Creates a project and configures an AWS service endpoint with access credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_aws.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_aws\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example AWS\"\n  access_key_id         = \"00000000-0000-0000-0000-000000000000\"\n  secret_access_key     = \"accesskey\"\n  description           = \"Managed by AzureDevOps\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Visual Studio Marketplace Service Endpoint with Token Authentication - Terraform HCL\nDESCRIPTION: Demonstrates the creation of an Azure DevOps project and a Visual Studio Marketplace service endpoint authenticated by a personal access token using the terraform-provider-azuredevops. Requires the azuredevops_project resource for the associated project and the azuredevops_serviceendpoint_visualstudiomarketplace resource with an authentication_token block, where the 'token' parameter supplies the PAT for marketplace access. Key inputs include project_id, service_endpoint_name, url, description, and the authentication_token block. Outputs include a managed service endpoint integrated into the specified Azure DevOps project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_visualstudiomarketplace.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_visualstudiomarketplace\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Marketplace\"\n  url                   = \"https://markpetplace.com\"\n  authentication_token {\n    token = \"token\"\n  }\n  description = \"Managed by Terraform\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Maven Service Endpoint with Token Authentication in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to create a Maven service endpoint in Azure DevOps using token authentication. It includes creating a project and setting up the service endpoint with a URL, repository ID, and authentication token.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_maven.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_maven\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"maven-example\"\n  description           = \"Service Endpoint for 'Maven' (Managed by Terraform)\"\n  url                   = \"https://example.com\"\n  repository_id         = \"example\"\n\n  authentication_token {\n    token = \"0000000000000000000000000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusive Lock for Azure DevOps Service Endpoint\nDESCRIPTION: Creates an exclusive lock check for a service endpoint in Azure DevOps. This configuration includes creating a project, setting up a generic service endpoint, and applying an exclusive lock with a timeout of 43200 minutes.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_exclusive_lock.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_serviceendpoint_generic\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  server_url            = \"https://some-server.example.com\"\n  username              = \"username\"\n  password              = \"password\"\n  service_endpoint_name = \"Example Generic\"\n  description           = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_check_exclusive_lock\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  target_resource_id   = azuredevops_serviceendpoint_generic.example.id\n  target_resource_type = \"endpoint\"\n\n  timeout = 43200\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Business Hours Check for Variable Group\nDESCRIPTION: Creates a business hours check to protect a variable group containing both regular and secret variables. Defines operational hours between 7:00-15:30 UTC on Monday and Tuesday.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_business_hours.html.markdown#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_variable_group\" \"example\" {\n  project_id   = azuredevops_project.example.id\n  name         = \"Example Variable Group\"\n  description  = \"Example Variable Group Description\"\n  allow_access = true\n\n  variable {\n    name  = \"key1\"\n    value = \"val1\"\n  }\n\n  variable {\n    name         = \"key2\"\n    secret_value = \"val2\"\n    is_secret    = true\n  }\n}\n\nresource \"azuredevops_check_business_hours\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = azuredevops_variable_group.example.id\n  target_resource_type = \"variablegroup\"\n  start_time           = \"07:00\"\n  end_time             = \"15:30\"\n  time_zone            = \"UTC\"\n  monday               = true\n  tuesday              = true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying AzureRM Service Endpoint by ID in Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_serviceendpoint_azurerm data source to retrieve information about an AzureRM service endpoint using its ID. It also shows how to output the service endpoint name.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/serviceendpoint_azurerm.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuredevops_project\" \"sample\" {\n  name = \"Sample Project\"\n}\n\ndata \"azuredevops_serviceendpoint_azurerm\" \"serviceendpoint\" {\n  project_id          = data.azuredevops_project.sample.id\n  service_endpoint_id = \"00000000-0000-0000-0000-000000000000\"\n}\n\noutput \"service_endpoint_name\" {\n  value = data.azuredevops_serviceendpoint_azurerm.serviceendpoint.service_endpoint_name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and Kubernetes Service Endpoints\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and three different types of Kubernetes service endpoints using Terraform. It includes examples for Azure Subscription, Kubeconfig, and Service Account authorization types.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_kubernetes.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_kubernetes\" \"example-azure\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Kubernetes\"\n  apiserver_url         = \"https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io\"\n  authorization_type    = \"AzureSubscription\"\n\n  azure_subscription {\n    subscription_id   = \"00000000-0000-0000-0000-000000000000\"\n    subscription_name = \"Example\"\n    tenant_id         = \"00000000-0000-0000-0000-000000000000\"\n    resourcegroup_id  = \"example-rg\"\n    namespace         = \"default\"\n    cluster_name      = \"example-aks\"\n  }\n}\n\nresource \"azuredevops_serviceendpoint_kubernetes\" \"example-kubeconfig\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Kubernetes\"\n  apiserver_url         = \"https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io\"\n  authorization_type    = \"Kubeconfig\"\n\n  kubeconfig {\n    kube_config            = <<EOT\n                              apiVersion: v1\n                              clusters:\n                              - cluster:\n                                  certificate-authority: fake-ca-file\n                                  server: https://1.2.3.4\n                                name: development\n                              contexts:\n                              - context:\n                                  cluster: development\n                                  namespace: frontend\n                                  user: developer\n                                name: dev-frontend\n                              current-context: dev-frontend\n                              kind: Config\n                              preferences: {}\n                              users:\n                              - name: developer\n                                user:\n                                  client-certificate: fake-cert-file\n                                  client-key: fake-key-file\n                             EOT\n    accept_untrusted_certs = true\n    cluster_context        = \"dev-frontend\"\n  }\n}\n\nresource \"azuredevops_serviceendpoint_kubernetes\" \"example-service-account\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Kubernetes\"\n  apiserver_url         = \"https://sample-kubernetes-cluster.hcp.westeurope.azmk8s.io\"\n  authorization_type    = \"ServiceAccount\"\n\n  service_account {\n    token   = \"000000000000000000000000\"\n    ca_cert = \"0000000000000000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Azure DevOps Project with Terraform (HCL)\nDESCRIPTION: Defines a new Azure DevOps project resource using Terraform, specifying its name, work item template, version control system, visibility, and a description. This resource is fundamental for other permissions and group assignments that depend on a fully configured project. \"name\", \"work_item_template\", \"version_control\", and \"visibility\" are required parameters; \"description\" is optional but often included for documentation purposes. The output is the creation of an Azure DevOps project instance in the organization.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/workitemquery_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Security Role Assignment in HCL\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_securityrole_assignment resource to assign a security role to a group for an environment within a project. It includes the necessary setup for creating a project, environment, and group.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/securityrole_assignment.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_environment\" \"example\" {\n  project_id  = azuredevops_project.example.id\n  name        = \"Example Environment\"\n  description = \"Example pipeline deployment environment\"\n}\n\nresource \"azuredevops_group\" \"example\" {\n  scope        = azuredevops_project.example.id\n  display_name = \"Example group\"\n  description  = \"Description of example group\"\n}\n\nresource \"azuredevops_securityrole_assignment\" \"example\" {\n  scope       = \"distributedtask.environmentreferencerole\"\n  resource_id = format(\"%s_%s\", azuredevops_project.example.id, azuredevops_environment.example.id)\n  identity_id = azuredevops_group.example.origin_id\n  role_name   = \"Administrator\"\n}\n```\n\n----------------------------------------\n\nTITLE: Acceptance Tests Environment Setup\nDESCRIPTION: Bash commands for setting up environment variables and running acceptance tests.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export AZDO_ORG_SERVICE_URL=\"...\"\n$ export AZDO_PERSONAL_ACCESS_TOKEN=\"...\"\n$ export AZDO_GITHUB_SERVICE_CONNECTION_PAT=\"...\"\n\n$ ./scripts/acctest.sh\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps Users with HCL in Terraform\nDESCRIPTION: Examples of using the azuredevops_users data source to retrieve user information from Azure DevOps. Demonstrates various filtering options and features like concurrent processing.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/users.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Load single user by using it's principal name\ndata \"azuredevops_users\" \"example\" {\n  principal_name = \"contoso-user@contoso.onmicrosoft.com\"\n}\n\n# Load all users know inside an organization\ndata \"azuredevops_users\" \"example-all-users\" {\n}\n\n# Load all users know inside an organization with concurrent processing\ndata \"azuredevops_users\" \"example-all-users\" {\n  features {\n    concurrent_workers = 10\n  }\n}\n\n# Load all users know inside an organization originating from a specific source (origin)\ndata \"azuredevops_users\" \"example-all-from-origin\" {\n  origin = \"aad\"\n}\n\n# Load all users know inside an organization filtered by their subject types\ndata \"azuredevops_users\" \"example-all-from-subject_types\" {\n  subject_types = [\"aad\", \"msa\"]\n}\n\n# Load a single user by origin and origin ID\ndata \"azuredevops_users\" \"example-all-from-origin-id\" {\n  origin    = \"aad\"\n  origin_id = \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamics Lifecycle Services Service Endpoint in Azure DevOps with Terraform\nDESCRIPTION: This code snippet demonstrates how to create a Dynamics Lifecycle Services service endpoint in Azure DevOps using Terraform. It includes creating a project and setting up the service endpoint with required parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_dynamics_lifecycle_services.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_dynamics_lifecycle_services\" \"example\" {\n  project_id                      = azuredevops_project.example.id\n  service_endpoint_name           = \"Example Service connection\"\n  authorization_endpoint          = \"https://login.microsoftonline.com/organization\"\n  lifecycle_services_api_endpoint = \"https://lcsapi.lcs.dynamics.com\"\n  client_id                       = \"00000000-0000-0000-0000-000000000000\"\n  username                        = \"username\"\n  password                        = \"password\"\n  description                     = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tagging Permissions in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to set up tagging permissions for a project in Azure DevOps. It creates a project, retrieves the Readers group, and assigns specific tagging permissions to that group.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/tagging_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_tagging_permissions\" \"example-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n  permissions = {\n    Enumerate = \"allow\"\n    Create    = \"allow\"\n    Update    = \"allow\"\n    Delete    = \"allow\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Extension Resource\nDESCRIPTION: Command for importing an existing Azure DevOps extension into Terraform state using publisher ID and extension ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/extension.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_extension.example publisherId/extensionId\n```\n\n----------------------------------------\n\nTITLE: Creating JFrog Platform V2 Service Endpoint with Token Authentication in Azure DevOps\nDESCRIPTION: This snippet demonstrates how to create a JFrog Platform V2 service endpoint in an Azure DevOps project using token authentication. It includes creating a project and setting up the service endpoint with a token.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jfrog_platform_v2.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_jfrog_platform_v2\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Artifactory\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_token {\n    token = \"0000000000000000000000000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Provider with Build Script\nDESCRIPTION: Command to execute the build script which verifies dependencies, runs unit tests, and compiles the provider codebase.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/build.sh\n...\n[INFO] Executing unit tests\n...\n[INFO] Build finished successfully\n```\n\n----------------------------------------\n\nTITLE: Configuring Business Hours Check for Environment\nDESCRIPTION: Creates a business hours check to protect an environment. Sets operational hours from 7:00-15:30 UTC on Monday and Tuesday.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_business_hours.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_environment\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Environment\"\n}\n\nresource \"azuredevops_check_business_hours\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = azuredevops_environment.example.id\n  target_resource_type = \"environment\"\n  start_time           = \"07:00\"\n  end_time             = \"15:30\"\n  time_zone            = \"UTC\"\n  monday               = true\n  tuesday              = true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GitHub Service Endpoint by ID in Azure DevOps using Terraform\nDESCRIPTION: Example showing how to query a GitHub service endpoint using its ID. Demonstrates retrieving the service endpoint name from a specific project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/serviceendpoint_github.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"sample\" {\n  name = \"Sample Project\"\n}\n\ndata \"azuredevops_serviceendpoint_github\" \"serviceendpoint\" {\n  project_id          = data.azuredevops_project.sample.id\n  service_endpoint_id = \"00000000-0000-0000-0000-000000000000\"\n}\n\noutput \"service_endpoint_name\" {\n  value = data.azuredevops_serviceendpoint_github.serviceendpoint.service_endpoint_name\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps Group Information with Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_group data source to retrieve information about existing groups in Azure DevOps. It shows examples for both project-specific groups and collection-level groups.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/group.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\ndata \"azuredevops_group\" \"example\" {\n  project_id = data.azuredevops_project.example.id\n  name       = \"Example Group\"\n}\n\noutput \"group_id\" {\n  value = data.azuredevops_group.example.id\n}\n\noutput \"group_descriptor\" {\n  value = data.azuredevops_group.example.descriptor\n}\n\ndata \"azuredevops_group\" \"example-collection-group\" {\n  name = \"Project Collection Administrators\"\n}\n\noutput \"collection_group_id\" {\n  value = data.azuredevops_group.example.id\n}\n\noutput \"collection_group_descriptor\" {\n  value = data.azuredevops_group.example.descriptor\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Service Endpoint with OAuth\nDESCRIPTION: Configures a GitHub service endpoint using OAuth authentication. Requires a project resource and existing OAuth configuration ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_github.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_github\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example GitHub\"\n  auth_oauth {\n    oauth_configuration_id = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Apply for Debugging\nDESCRIPTION: This shell command runs Terraform apply with input disabled, used as part of the debugging process to start the provider.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/debugging.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nterraform apply -input=false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Principal Information using Terraform in Azure DevOps\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_service_principal data source to retrieve information about an existing Service Principal. It shows how to specify the display name and output the ID of the Service Principal.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/service_principal.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_service_principal\" \"example\" {\n  display_name = \"existing\"\n}\n\noutput \"id\" {\n  value = data.azuredevops_service_principal.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Provider with Direct Client Secret\nDESCRIPTION: Shows how to configure the Azure DevOps provider using a client secret provided directly as a string. This method includes the secret in the configuration file and should be used with caution. Includes provider setup and a sample project resource.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_service_principal_using_a_client_secret.html.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=0.1.0\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n  org_service_url = \"https://dev.azure.com/my-org\"\n  client_id     = \"00000000-0000-0000-0000-000000000001\"\n  tenant_id     = \"00000000-0000-0000-0000-000000000001\"\n  client_secret = \"top-secret-password-string\"\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Test Project\"\n  description = \"Test Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Scoped Feed in Azure DevOps with Terraform\nDESCRIPTION: This example shows how to create a feed within a specific project in Azure DevOps. It first creates a project resource and then uses its ID to create a feed scoped to that project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/feed.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_feed\" \"example\" {\n  name       = \"examplefeed\"\n  project_id = azuredevops_project.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps Agent Pools using Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_agent_pools data source to retrieve information about existing agent pools in Azure DevOps. It also shows how to output various attributes of the agent pools.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/agent_pools.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuredevops_agent_pools\" \"example\" {\n}\n\noutput \"agent_pool_name\" {\n  value = data.azuredevops_agent_pools.example.agent_pools.*.name\n}\n\noutput \"auto_provision\" {\n  value = data.azuredevops_agent_pools.example.agent_pools.*.auto_provision\n}\n\noutput \"auto_update\" {\n  value = data.azuredevops_agent_pools.example.agent_pools.*.auto_update\n}\n\noutput \"pool_type\" {\n  value = data.azuredevops_agent_pools.example.agent_pools.*.pool_type\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Container Registry Service Endpoint with Workload Identity Federation in Terraform\nDESCRIPTION: This snippet shows how to create an Azure Container Registry service endpoint using Workload Identity Federation for authentication. It includes creating a project, user-assigned identity, and setting up the service endpoint with the necessary parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azurecr.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azurerm_resource_group\" \"identity\" {\n  name     = \"identity\"\n  location = \"UK South\"\n}\n\nresource \"azurerm_user_assigned_identity\" \"example\" {\n  location            = azurerm_resource_group.identity.location\n  name                = \"example-identity\"\n  resource_group_name = azurerm_resource_group.identity.name\n}\n\n# azure container registry service connection\nresource \"azuredevops_serviceendpoint_azurecr\" \"example\" {\n  project_id                             = azuredevops_project.example.id\n  resource_group                         = \"Example AzureCR ResourceGroup\"\n  service_endpoint_name                  = \"Example AzureCR\"\n  service_endpoint_authentication_scheme = \"WorkloadIdentityFederation\"\n  azurecr_spn_tenantid                   = \"00000000-0000-0000-0000-000000000000\"\n  azurecr_name                           = \"ExampleAcr\"\n  azurecr_subscription_id                = \"00000000-0000-0000-0000-000000000000\"\n  azurecr_subscription_name              = \"subscription name\"\n  credentials {\n    serviceprincipalid = azurerm_user_assigned_identity.example.client_id\n  }\n}\n\nresource \"azurerm_federated_identity_credential\" \"example\" {\n  name                = \"example-federated-credential\"\n  resource_group_name = azurerm_resource_group.identity.name\n  parent_id           = azurerm_user_assigned_identity.example.id\n  audience            = [\"api://AzureADTokenExchange\"]\n  issuer              = azuredevops_serviceendpoint_azurecr.example.workload_identity_federation_issuer\n  subject             = azuredevops_serviceendpoint_azurecr.example.workload_identity_federation_subject\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Generic Service Endpoint\nDESCRIPTION: Command for importing an existing generic service endpoint into Terraform state using project ID and service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_generic.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_generic.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and SonarCloud Service Endpoint with Terraform\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and a SonarCloud service endpoint using Terraform. It sets up a private project with Git version control and Agile work item template, then creates a SonarCloud service endpoint with a specified token.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_sonarcloud.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_sonarcloud\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example SonarCloud\"\n  token                 = \"0000000000000000000000000000000000000000\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Template Check for Environment in Azure DevOps\nDESCRIPTION: Example configuration for protecting an environment using Required Template Check. Creates a project, environment, and applies multiple template checks with different template paths.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_required_template.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_environment\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Environment\"\n}\n\nresource \"azuredevops_check_required_template\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  target_resource_id   = azuredevops_environment.example.id\n  target_resource_type = \"environment\"\n\n  required_template {\n    repository_name = \"project/repository\"\n    repository_ref  = \"refs/heads/main\"\n    template_path   = \"template/path.yml\"\n  }\n\n  required_template {\n    repository_name = \"project/repository\"\n    repository_ref  = \"refs/heads/main\"\n    template_path   = \"template/alternate-path.yml\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving NPM Service Endpoint Data in Azure DevOps using Terraform\nDESCRIPTION: Example showing how to retrieve an existing NPM Service Endpoint's information using its project ID and service endpoint name. The example also demonstrates how to output the service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/serviceendpoint_npm.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_serviceendpoint_npm\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example npm\"\n}\n\noutput \"service_endpoint_id\" {\n  value = data.azuredevops_serviceendpoint_npm.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Build Definition Permissions with Terraform\nDESCRIPTION: Complete example showing how to set up an Azure DevOps project with a Git repository, build definition, and permission configuration. Demonstrates setting specific permissions for a reader group including view builds, edit build quality, delete builds, and stop builds capabilities.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_definition_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_build_definition\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Build Definition\"\n  path       = \"\\\\ExampleFolder\"\n\n  ci_trigger {\n    use_yaml = true\n  }\n\n  repository {\n    repo_type   = \"TfsGit\"\n    repo_id     = azuredevops_git_repository.example.id\n    branch_name = azuredevops_git_repository.example.default_branch\n    yml_path    = \"azure-pipelines.yml\"\n  }\n}\n\nresource \"azuredevops_build_definition_permissions\" \"example\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n\n  build_definition_id = azuredevops_build_definition.example.id\n\n  permissions = {\n    ViewBuilds       = \"Allow\"\n    EditBuildQuality = \"Deny\"\n    DeleteBuilds     = \"Deny\"\n    StopBuilds       = \"Allow\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure DevOps Variable Group Configuration\nDESCRIPTION: Example showing how to retrieve an existing Variable Group from an Azure DevOps project using the data source. The configuration retrieves the Variable Group by project ID and name, then outputs its ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/variable_group.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\ndata \"azuredevops_variable_group\" \"example\" {\n  project_id = data.azuredevops_project.example.id\n  name       = \"Example Variable Group\"\n}\n\noutput \"id\" {\n  value = data.azuredevops_variable_group.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JFrog Platform V2 Service Endpoint with Basic Authentication in Azure DevOps\nDESCRIPTION: This snippet shows how to create a JFrog Platform V2 service endpoint in an Azure DevOps project using basic authentication with a username and password. It includes creating a project and setting up the service endpoint with credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jfrog_platform_v2.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_jfrog_platform_v2\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Artifactory\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_basic {\n    username = \"username\"\n    password = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Jenkins Service Endpoint in Shell\nDESCRIPTION: This snippet shows how to import an existing Azure DevOps Jenkins Service Endpoint into Terraform state. It uses the 'terraform import' command with the resource type, resource name, and a combination of project name and service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jenkins.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_serviceendpoint_jenkins.example projectName/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure DevOps Storage Key using Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_storage_key data source to retrieve information about an existing Storage Key. It shows how to specify the descriptor and access the resulting storage key and ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/storage_key.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_storage_key\" \"example\" {\n  descriptor = \"aad.000000000000000000000000000000000000\"\n}\n\noutput \"id\" {\n  value = data.azuredevops_storage_key.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Dashboard using Terraform\nDESCRIPTION: Commands showing how to import existing Azure DevOps dashboards into Terraform state, supporting both project-level and team-level dashboard imports.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/dashboard.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_dashboard.dashboard 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_dashboard.dashboard 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Creating Snyk Security Scan Service Endpoint in Azure DevOps with Terraform\nDESCRIPTION: This code snippet demonstrates how to create a Snyk Security Scan service endpoint in Azure DevOps using Terraform. It includes creating a project and setting up the Snyk service endpoint with required parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_snyk.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_snyk\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  server_url            = \"https://snyk.io/\"\n  api_token             = \"00000000-0000-0000-0000-000000000000\"\n  service_endpoint_name = \"Example Snyk\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sonar Cloud Service Endpoint Data in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_serviceendpoint_sonarcloud data source to retrieve information about an existing Sonar Cloud Service Endpoint. It requires a project ID and service endpoint name, and outputs the service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/serviceendpoint_sonarcloud.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_serviceendpoint_sonarcloud\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Sonar Cloud\"\n}\n\noutput \"service_endpoint_id\" {\n  value = data.azuredevops_serviceendpoint_sonarcloud.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Run Pipeline Service Endpoint in HCL\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and configure a Run Pipeline Service Connection using Terraform. It sets up a private project with Git version control and configures a service endpoint for running pipelines.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_runpipeline.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_runpipeline\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Pipeline Runner\"\n  organization_name     = \"Organization Name\"\n  auth_personal {\n    # Also can be set with AZDO_PERSONAL_ACCESS_TOKEN environment variable\n    personal_access_token = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  }\n  description = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing External TFS Service Endpoint in Terraform\nDESCRIPTION: Command example for importing an existing Azure DevOps External TFS service endpoint into Terraform state using project ID and service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_externaltfs.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_externaltfs.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Level File Path Pattern Policy in Azure DevOps\nDESCRIPTION: Creates a project-level file path pattern policy that applies to all repositories within the project. This example creates a project and applies the policy at the project level without specifying individual repository IDs.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_file_path_pattern.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_repository_policy_file_path_pattern\" \"examplep\" {\n  project_id        = azuredevops_project.example.id\n  enabled           = true\n  blocking          = true\n  filepath_patterns = [\"*.go\", \"/home/test/*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Provider with File-based OIDC Token\nDESCRIPTION: Terraform configuration for Azure DevOps provider using OIDC token stored in a file system.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_service_principal_using_an_oidc_token.html.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=1.0.1\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n  org_service_url = \"https://dev.azure.com/my-org\"\n  client_id            = \"00000000-0000-0000-0000-000000000001\"\n  tenant_id            = \"00000000-0000-0000-0000-000000000001\"\n  oidc_token_file_path = \"C:\\\\my_oidc_token.txt\"\n  use_oidc             = true\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Test Project\"\n  description = \"Test Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps User Identity - Display Name Filter\nDESCRIPTION: Example demonstrating how to query a user using their display name as the search filter.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/identity_user.html.markdown#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_identity_user\" \"contoso-user-upn\" {\n  name          = \"Contoso User\"\n  search_filter = \"DisplayName\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Hook Permissions in Azure DevOps with Terraform\nDESCRIPTION: This snippet demonstrates how to create a project, retrieve a group, and set Service Hook permissions using Terraform. It shows the configuration for allowing a 'Readers' group to view, edit, delete subscriptions, and publish events.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/servicehook_permissions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\nresource \"azuredevops_servicehook_permissions\" \"example-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n  permissions = {\n    ViewSubscriptions   = \"allow\"\n    EditSubscriptions   = \"allow\"\n    DeleteSubscriptions = \"allow\"\n    PublishEvents       = \"allow\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Repository Policy\nDESCRIPTION: Command for importing an existing Azure DevOps repository policy into Terraform state using project ID and policy ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_file_path_pattern.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_repository_policy_file_path_pattern.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Provider with File-Based Client Secret\nDESCRIPTION: Demonstrates how to configure the Azure DevOps provider using a client secret stored in a file. This approach is more secure as it keeps sensitive credentials out of the code. The configuration includes provider initialization and a sample project resource.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_service_principal_using_a_client_secret.html.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=0.1.0\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n  org_service_url = \"https://dev.azure.com/my-org\"\n  client_id          = \"00000000-0000-0000-0000-000000000001\"\n  tenant_id          = \"00000000-0000-0000-0000-000000000001\"\n  client_secret_path = \"C:\\\\my_secret.txt\"\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Test Project\"\n  description = \"Test Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Control for Agent Queue in Azure DevOps\nDESCRIPTION: Implements branch control protection for an agent queue by creating an agent pool and queue, then restricting branch access.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_branch_control.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_agent_pool\" \"example\" {\n  name = \"example-pool\"\n}\n\nresource \"azuredevops_agent_queue\" \"example\" {\n  project_id    = azuredevops_project.example.id\n  agent_pool_id = azuredevops_agent_pool.example.id\n}\n\nresource \"azuredevops_check_branch_control\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = azuredevops_agent_queue.example.id\n  target_resource_type = \"queue\"\n  allowed_branches     = \"refs/heads/main, refs/heads/features/*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Business Hours Check for Repository\nDESCRIPTION: Creates a business hours check to protect a Git repository. Sets operational hours from 7:00-15:30 UTC on Monday and Tuesday.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_business_hours.html.markdown#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Empty Git Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_check_business_hours\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = \"${azuredevops_project.example.id}.${azuredevops_git_repository.example.id}\"\n  target_resource_type = \"repository\"\n  start_time           = \"07:00\"\n  end_time             = \"15:30\"\n  time_zone            = \"UTC\"\n  monday               = true\n  tuesday              = true\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps User Identity - Mail Address Filter\nDESCRIPTION: Example demonstrating how to query a user using their email address as the search filter.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/identity_user.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_identity_user\" \"contoso-user-upn\" {\n  name          = \"contoso-user@contoso.onmicrosoft.com\"\n  search_filter = \"MailAddress\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Checkmarx SAST Service Endpoint\nDESCRIPTION: Command for importing an existing Checkmarx SAST service endpoint into Terraform state using project and endpoint IDs.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_checkmarx_sast.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_serviceendpoint_checkmarx_sast.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Control for Environment in Azure DevOps\nDESCRIPTION: Sets up branch control protection for an Azure DevOps environment, restricting which branches can deploy to it.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_branch_control.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_environment\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Environment\"\n}\n\nresource \"azuredevops_check_branch_control\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = azuredevops_environment.example.id\n  target_resource_type = \"environment\"\n  allowed_branches     = \"refs/heads/main, refs/heads/features/*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Project-Specific Feed in Terraform\nDESCRIPTION: This example demonstrates how to access a feed within a specific project by first retrieving the project information with azuredevops_project data source and then using its ID to filter the feed lookup.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/feed.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\ndata \"azuredevops_feed\" \"example\" {\n  name       = \"releases\"\n  project_id = data.azuredevops_project.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Branch Policy\nDESCRIPTION: Example command for importing an existing Azure DevOps branch policy into Terraform state using project ID and policy configuration ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_build_validation.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_branch_policy_build_validation.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Control for Git Repository in Azure DevOps\nDESCRIPTION: Creates a branch control check for a Git repository, including repository initialization and branch access control.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_branch_control.html.markdown#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Empty Git Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_check_branch_control\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  display_name         = \"Managed by Terraform\"\n  target_resource_id   = \"${azuredevops_project.example.id}.${azuredevops_git_repository.example.id}\"\n  target_resource_type = \"repository\"\n  allowed_branches     = \"refs/heads/main, refs/heads/features/*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Azure DevOps Descriptor Using Terraform\nDESCRIPTION: Example showing how to use the azuredevops_descriptor data source to resolve a storage key to a descriptor and output its ID. The storage key represents resources like users, groups, or scopes in Azure DevOps.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/descriptor.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_descriptor\" \"example\" {\n  storage_key = \"00000000-0000-0000-0000-000000000000\"\n}\n\noutput \"id\" {\n  value = data.azuredevops_descriptor.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps Group Data with Terraform (HCL)\nDESCRIPTION: Retrieves information about a group within an Azure DevOps project using a Terraform data source. \"project_id\" references the project resource and \"name\" specifies the group's display name (e.g., 'Readers' or 'Contributors'). This snippet depends on the project being previously defined and is commonly used as a prerequisite for assigning permissions. Returns the group's unique ID, which can be referenced elsewhere.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/workitemquery_permissions.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Generic Git Service Endpoint\nDESCRIPTION: This command shows how to import an existing Azure DevOps Generic Git Service Endpoint into Terraform state. It uses the format 'projectID/serviceEndpointID' or 'projectName/serviceEndpointID' for the import.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_generic_git.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_generic_git.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure DevOps Provider Authentication\nDESCRIPTION: This snippet shows how to set the required environment variables AZDO_PERSONAL_ACCESS_TOKEN and AZDO_ORG_SERVICE_URL for authenticating with Azure DevOps using a personal access token in a bash environment.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_using_the_personal_access_token.html.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport AZDO_PERSONAL_ACCESS_TOKEN=<Personal Access Token>\nexport AZDO_ORG_SERVICE_URL=https://dev.azure.com/<Your Org Name>\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Repository Case Enforcement Policy\nDESCRIPTION: Command for importing an existing case enforcement policy into Terraform state using project ID and policy ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_case_enforcement.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_repository_policy_case_enforcement.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Creating Service Fabric Endpoint with Client Certificate Authentication in HCL\nDESCRIPTION: This snippet demonstrates how to create a Service Fabric service endpoint using client certificate authentication. It includes creating a project and configuring the endpoint with certificate details.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_servicefabric.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_servicefabric\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Service Fabric\"\n  description           = \"Managed by Terraform\"\n  cluster_endpoint      = \"tcp://test\"\n\n  certificate {\n    server_certificate_lookup     = \"Thumbprint\"\n    server_certificate_thumbprint = \"0000000000000000000000000000000000000000\"\n    client_certificate            = filebase64(\"certificate.pfx\")\n    client_certificate_password   = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Iteration Information in Azure DevOps using Terraform\nDESCRIPTION: This code snippet demonstrates how to use the azuredevops_iteration data source to access information about existing Iterations (Sprints) within an Azure DevOps project. It includes creating a project and retrieving information about root and child iterations.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/iteration.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_iteration\" \"example-root-iteration\" {\n  project_id     = azuredevops_project.example.id\n  path           = \"/\"\n  fetch_children = true\n}\n\ndata \"azuredevops_iteration\" \"example-child-iteration\" {\n  project_id     = azuredevops_project.example.id\n  path           = \"/Iteration 1\"\n  fetch_children = true\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Existing Group in Azure DevOps Project using Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_identity_group data source to load an existing group with a specific name within an Azure DevOps project. It requires the project ID and the group name as inputs.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/identity_group.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_identity_group\" \"example-project-group\" {\n  project_id = data.azuredevops_project.example.id\n  name       = \"[Project-Name]\\\\Group-Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Branch Policy Configuration\nDESCRIPTION: Command example for importing an existing Azure DevOps branch policy merge types configuration into Terraform state using project ID and policy configuration ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_merge_types.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_branch_policy_merge_types.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Querying Security Role Definitions in Azure DevOps using Terraform\nDESCRIPTION: Example showing how to retrieve security role definitions for a specific scope in Azure DevOps and output the definitions using Terraform. The example demonstrates querying environment reference roles and accessing their properties.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/securityrole_definitions.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_securityrole_definitions\" \"example\" {\n  scope = \"distributedtask.environmentreferencerole\"\n}\n\noutput \"securityrole_definitions\" {\n  value = data.aazuredevops_securityrole_definitions.example.definitions\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps SSH Service Endpoint using Terraform CLI (Shell)\nDESCRIPTION: This shell command snippet shows how to import an existing Azure DevOps SSH service endpoint into Terraform's managed state. Prerequisites include prior creation of the resource in Azure DevOps and initialization of the Terraform project. The command expects projectID/serviceEndpointID or projectName/serviceEndpointID as input and does not create or manage the endpoint itself but connects Terraform state to the existing resource for further management. The main constraint is that valid IDs must be provided and the resource must already exist.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_ssh.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_ssh.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools on macOS\nDESCRIPTION: This shell command installs the Xcode Command Line Tools on macOS, which may be necessary for debugging Go programs in VS Code.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n% xcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Provider with Environment Variables in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the Azure DevOps provider in Terraform using environment variables for managed identity authentication. It includes the required providers block and an empty provider block, as the actual authentication is handled via environment variables.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_managed_identity.html.md#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=0.1.0\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Area Information in Azure DevOps using Terraform\nDESCRIPTION: This example demonstrates how to create a project and access its root area node information. It creates a new Azure DevOps project and then uses the azuredevops_area data source to fetch information about the root area, with children fetching disabled.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/area.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_area\" \"example\" {\n  project_id     = azuredevops_project.example.id\n  path           = \"/\"\n  fetch_children = \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Authentication Chain with ChainedTokenCredential in Go\nDESCRIPTION: This example shows how to create a custom authentication flow using ChainedTokenCredential, combining managed identity and Azure CLI authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmanaged, err := azidentity.NewManagedIdentityCredential(nil)\nif err != nil {\n  // handle error\n}\nazCLI, err := azidentity.NewAzureCLICredential(nil)\nif err != nil {\n  // handle error\n}\nchain, err := azidentity.NewChainedTokenCredential([]azcore.TokenCredential{managed, azCLI}, nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", chain, nil)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure DevOps Project Data in Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_project data source to fetch information about an existing Azure DevOps project. It retrieves the project by name and outputs the entire project data.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/project.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\noutput \"project\" {\n  value = data.azuredevops_project.example\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Git Repository into Azure DevOps with Terraform\nDESCRIPTION: This snippet shows how to import an existing Git repository from an external source into Azure DevOps using Terraform. It demonstrates the 'Import' initialization type with a source URL.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_repository.html.markdown#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_git_repository\" \"example-import\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Import Repository\"\n  initialization {\n    init_type   = \"Import\"\n    source_type = \"Git\"\n    source_url  = \"https://github.com/microsoft/terraform-provider-azuredevops.git\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Branch Policy using Terraform\nDESCRIPTION: Command example for importing an existing Azure DevOps branch policy into Terraform state using project ID and policy configuration ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_min_reviewers.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_branch_policy_min_reviewers.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Rest API Check in Terraform\nDESCRIPTION: This snippet demonstrates how to create a Rest API check in Azure DevOps using Terraform. It includes the creation of a project, service endpoints, variable group, and the Rest API check itself.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_rest_api.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_serviceendpoint_generic\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  server_url            = \"https://some-server.example.com\"\n  service_endpoint_name = \"Example Generic\"\n  username              = \"username\"\n  password              = \"password\"\n  description           = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_generic\" \"example_azure\" {\n  project_id            = azuredevops_project.example.id\n  server_url            = \"https://dev.azure.com/\"\n  service_endpoint_name = \"Example Generic Azure\"\n  username              = \"username\"\n  password              = \"dummy\"\n}\n\nresource \"azuredevops_variable_group\" \"example\" {\n  project_id   = azuredevops_project.example.id\n  name         = \"Example Variable Group\"\n  allow_access = true\n\n  variable {\n    name  = \"FOO\"\n    value = \"BAR\"\n  }\n}\n\nresource \"azuredevops_check_rest_api\" \"example\" {\n  project_id                      = azuredevops_project.example.id\n  target_resource_id              = azuredevops_serviceendpoint_generic.example.id\n  target_resource_type            = \"endpoint\"\n  display_name                    = \"Example REST API Check\"\n  connected_service_name_selector = \"connectedServiceName\"\n  connected_service_name          = azuredevops_serviceendpoint_generic.example_azure.service_endpoint_name\n  method                          = \"POST\"\n  headers                         = \"{\\\"contentType\\\":\\\"application/json\\\"}\"\n  body                            = \"{\\\"params\\\":\\\"value\\\"}\"\n  completion_event                = \"ApiResponse\"\n  success_criteria                = \"eq(root['status'], '200')\"\n  url_suffix                      = \"user/1\"\n  retry_interval                  = 4000\n  variable_group_name             = azuredevops_variable_group.example.name\n  timeout                         = \"40000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Branch Policy Configuration\nDESCRIPTION: Command for importing an existing Azure DevOps branch policy into Terraform state using project ID and policy configuration ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/branch_policy_comment_resolution.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_branch_policy_comment_resolution.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Build Pipeline with GitHub Integration\nDESCRIPTION: This snippet references a YAML file for an Azure DevOps build pipeline. The pipeline is configured to trigger builds based on the specified trigger block in the YAML file.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/examples/github-based-cicd-simple/README.md#2025-04-23_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n.azdo/azure-pipeline-nightly.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Openshift Endpoint with Basic Auth in HCL\nDESCRIPTION: This HCL configuration snippet demonstrates how to create an Azure DevOps project and an Openshift service endpoint within it using basic authentication. It defines the project details and configures the service endpoint with the server URL, username, password, and optionally accepts untrusted certificates and specifies a certificate authority file. Requires `project_id`, `service_endpoint_name`, `server_url`, and `auth_basic` block with `username` and `password`.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_openshift.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_openshift\" \"example\" {\n  project_id                 = azuredevops_project.example.id\n  service_endpoint_name      = \"Example Openshift\"\n  server_url                 = \"https://example.server\"\n  certificate_authority_file = \"/opt/file\"\n  accept_untrusted_certs     = true\n  auth_basic {\n    username = \"username\"\n    password = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Checkmarx One Service Endpoint with Client ID and Secret in Azure DevOps (HCL)\nDESCRIPTION: This snippet shows how to create a Checkmarx One service endpoint in Azure DevOps using client ID and secret for authorization. It creates a project and then configures the service endpoint with the necessary credentials and URLs.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_checkmarx_one.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_checkmarx_one\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Checkmarx One\"\n  server_url            = \"https://server.com\"\n  client_id             = \"clientid\"\n  client_secret         = \"secret\"\n  authorization_url     = \"https://authurl.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Bitbucket Service Endpoint by ID in Terraform HCL\nDESCRIPTION: Example of retrieving a Bitbucket service endpoint using its ID. This snippet demonstrates how to access project information and query a specific service endpoint using its unique identifier.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/serviceendpoint_bitbucket.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\ndata \"azuredevops_serviceendpoint_bitbucket\" \"example\" {\n  project_id          = data.azuredevops_project.example.id\n  service_endpoint_id = \"00000000-0000-0000-0000-000000000000\"\n}\n\noutput \"service_endpoint_name\" {\n  value = data.azuredevops_serviceendpoint_bitbucket.example.service_endpoint_name\n}\n```\n\n----------------------------------------\n\nTITLE: Updating VS Code Launch Configuration with Provider Process ID\nDESCRIPTION: This JSON configuration updates the VS Code launch.json file with the correct process ID of the Terraform provider for debugging.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/debugging.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\"name\": \"Attach\",\n\t\t\"type\": \"go\",\n\t\t\"request\": \"attach\",\n\t\t\"mode\": \"local\",\n\t\t\"processId\": 2663   // Have now added the correct process id.\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Visual Studio Marketplace Service Endpoint Resource - Shell\nDESCRIPTION: Shows the command for importing an existing Azure DevOps Visual Studio Marketplace Service Endpoint into Terraform state using the terraform import command. Requires either projectID/serviceEndpointID or projectName/serviceEndpointID as the identifier. The input is the fully qualified resource string and the output is the resource's inclusion in Terraform state for management.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_visualstudiomarketplace.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_visualstudiomarketplace.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Error Type with errors.As in Go\nDESCRIPTION: Shows how to use the standard library errors.As function to extract a specific error type from a multierror.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Provider for Local Use\nDESCRIPTION: Commands to navigate to an example directory and set the required environment variables to use the provider locally with Terraform.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd examples/github-based-cicd-simple/\n\n# AZDO_ORG_SERVICE_URL will be the URL of the AzDO org that you want to provision\n# resources inside of.\n#   ex: https://dev.azure.com/<your org name>\n$ export AZDO_ORG_SERVICE_URL=\"...\"\n\n# AZDO_PERSONAL_ACCESS_TOKEN will be the personal access token that grants access\n# to provision and manage resources in Azure DevOps.\n# You'll need to configure permissions for AzDO and Github PATS detailed in ./website/docs\n#   documentation: https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\n$ export AZDO_PERSONAL_ACCESS_TOKEN=\"...\"\n\n# Note: AZDO_GITHUB_SERVICE_CONNECTION_PAT is not specifically required\n# by the provider, but it is required by the example in this folder.\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Openshift Endpoint with Token Auth in HCL\nDESCRIPTION: This HCL configuration snippet shows how to set up an Azure DevOps project and an Openshift service endpoint using token-based authentication. It specifies the project ID, service endpoint name, server URL, and provides an API token within the `auth_token` block. It also demonstrates allowing untrusted certificates and using a certificate authority file. Requires `project_id`, `service_endpoint_name`, `server_url`, and `auth_token` block with `token`.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_openshift.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_openshift\" \"example\" {\n  project_id                 = azuredevops_project.example.id\n  service_endpoint_name      = \"Example Openshift\"\n  server_url                 = \"https://example.server\"\n  certificate_authority_file = \"/opt/file\"\n  accept_untrusted_certs     = true\n  auth_token {\n    token = \"username\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Bus Service Endpoint in Azure DevOps with Terraform\nDESCRIPTION: Terraform configuration for creating an Azure Service Bus service endpoint in an Azure DevOps project. Demonstrates setting up a project and service endpoint with required parameters including queue name and connection string.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azure_service_bus.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_azure_service_bus\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Azure Service Bus\"\n  queue_name            = \"queue\"\n  connection_string     = \"connection string\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ArgoCD Service Endpoint with Token Authentication in Azure DevOps\nDESCRIPTION: Terraform configuration for creating an ArgoCD service endpoint using token-based authentication. Requires an Azure DevOps project and the ArgoCD Extension to be installed.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_argocd.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_serviceendpoint_argocd\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example ArgoCD\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://argocd.my.com\"\n  authentication_token {\n    token = \"0000000000000000000000000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure DevOps Group Entitlement via Terraform (Bash)\nDESCRIPTION: Demonstrates how to import an existing group entitlement resource into Terraform state using the `terraform import` command. The command requires the resource address (e.g., azuredevops_group_entitlement.example) and the unique group entitlement ID (UUID). This enables Terraform to manage pre-existing group entitlements within the Azure DevOps organization. The resource must already exist in Azure DevOps, and its UUID must be known.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/group_entitlement.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform import azuredevops_group_entitlement.example 00000000-0000-0000-0000-000000000000\n\n```\n\n----------------------------------------\n\nTITLE: Importing an Azure DevOps Build Folder in Terraform\nDESCRIPTION: These commands show how to import an existing Azure DevOps build folder into Terraform state. Two methods are provided: using the project name/path or the project id/path.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_folder.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_build_folder.example \"Example Project/\\\\ExampleFolder\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_build_folder.example 00000000-0000-0000-0000-000000000000/\\\\ExampleFolder\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Provider with File-Based Certificate Authentication\nDESCRIPTION: Terraform configuration showing how to set up the Azure DevOps provider using a certificate file stored on the filesystem. Includes provider configuration with client certificate path and required service principal details.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_service_principal_using_a_client_certificate.html.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=0.1.0\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n  org_service_url = \"https://dev.azure.com/my-org\"\n  client_id                   = \"00000000-0000-0000-0000-000000000001\"\n  tenant_id                   = \"00000000-0000-0000-0000-000000000001\"\n  client_certificate_path     = \"C:\\\\cert.pfx\"\n  client_certificate_password = \"cert password\"\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Test Project\"\n  description = \"Test Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing NPM Service Endpoint in Azure DevOps using Terraform\nDESCRIPTION: This snippet shows the command to import an existing NPM Service Endpoint into Terraform state. It requires the project ID and service endpoint ID in the format projectID/serviceEndpointID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_npm.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_npm.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling with MessagePack in Golang\nDESCRIPTION: Example demonstrating how to use msgpack to marshal a struct into bytes and then unmarshal those bytes back into a struct. It shows basic usage of the library for encoding and decoding data.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/vmihailenco/msgpack/v5/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/vmihailenco/msgpack/v5\"\n\nfunc ExampleMarshal() {\n    type Item struct {\n        Foo string\n    }\n\n    b, err := msgpack.Marshal(&Item{Foo: \"bar\"})\n    if err != nil {\n        panic(err)\n    }\n\n    var item Item\n    err = msgpack.Unmarshal(b, &item)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(item.Foo)\n    // Output: bar\n}\n```\n\n----------------------------------------\n\nTITLE: Build Tags Configuration for Go Test Files\nDESCRIPTION: Example showing how to configure build tags in Go test files to organize tests by resource type and allow selective test execution.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// +build all core data_sources data_git_repositories\n// +build !exclude_data_sources !exclude_data_git_repositories\n\npackage azuredevops\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example: Assigning Multiple Query Permissions (Terraform HCL)\nDESCRIPTION: Demonstrates end-to-end configuration: defining an Azure DevOps project, creating multiple group data sources, and assigning different folder- and project-level permissions for each group. Dependencies include the existence of the project and correct group names within the project. \"permissions\" is set as a key-value map for each resource, specifying one or more allowed or denied actions. The example illustrates both project- and shared queries folder-level scenarios, using \"/\" as the root folder. Expected inputs are valid project, group, and permission values; outputs are permission state assignments for each specified group. Limitations include no support for importing existing resources.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/workitemquery_permissions.html.markdown#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\n\ndata \"azuredevops_group\" \"example-readers\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Readers\"\n}\n\ndata \"azuredevops_group\" \"example-contributors\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Contributors\"\n}\n\nresource \"azuredevops_workitemquery_permissions\" \"example-project-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n  permissions = {\n    Read              = \"Allow\"\n    Delete            = \"Deny\"\n    Contribute        = \"Deny\"\n    ManagePermissions = \"Deny\"\n  }\n}\n\nresource \"azuredevops_workitemquery_permissions\" \"example-sharedqueries-permissions\" {\n  project_id = azuredevops_project.example.id\n  path       = \"/\"\n  principal  = data.azuredevops_group.example-contributors.id\n  permissions = {\n    Read   = \"Allow\"\n    Delete = \"Deny\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Manual AzureRM Service Endpoint (ManagementGroup Scoped) in Terraform\nDESCRIPTION: This snippet shows how to create a manual Azure Resource Manager service endpoint scoped to a management group using Terraform. It includes project creation and service endpoint configuration with management group details.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azurerm.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_azurerm\" \"example\" {\n  project_id                             = azuredevops_project.example.id\n  service_endpoint_name                  = \"Example AzureRM\"\n  description                            = \"Managed by Terraform\"\n  service_endpoint_authentication_scheme = \"ServicePrincipal\"\n  credentials {\n    serviceprincipalid  = \"00000000-0000-0000-0000-000000000000\"\n    serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  }\n  azurerm_spn_tenantid          = \"00000000-0000-0000-0000-000000000000\"\n  azurerm_management_group_id   = \"managementGroup\"\n  azurerm_management_group_name = \"managementGroup\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Calls in HCL\nDESCRIPTION: EBNF grammar for function calls in HCL. Includes syntax for function identifiers, argument lists, and the ellipsis operator for expanding list or tuple arguments.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_10\n\nLANGUAGE: ebnf\nCODE:\n```\nFunctionCall = Identifier \"(\" arguments \")\";\nArguments = (\n    () ||\n    (Expression (\",\" Expression)* (\",\" | \"...\")?)\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Azure DevOps Project by Name\nDESCRIPTION: Shell command demonstrating how to import an existing Azure DevOps project into Terraform state using the project name.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_project.example \"Example Project\"\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Agent Queue\nDESCRIPTION: Shows how to import an existing Azure DevOps agent queue into Terraform state using project ID and agent queue ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/agent_queue.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_agent_queue.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Importing Octopus Deploy Service Endpoint using Terraform CLI in Shell\nDESCRIPTION: This shell snippet provides the command to import an existing Octopus Deploy service endpoint into Terraform's state using the Terraform CLI. It requires Terraform to be installed and an existing Azure DevOps service endpoint. The user must replace the example IDs with actual project and service endpoint GUIDs. The output is the imported Terraform resource state, and limitations include correct identification of the resource to avoid import errors.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_octopusdeploy.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_octopusdeploy.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Operation Syntax in EBNF\nDESCRIPTION: Defines the grammar for unary and binary operations, including arithmetic, comparison, and logical operators with precedence rules.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_15\n\nLANGUAGE: ebnf\nCODE:\n```\nOperation = unaryOp | binaryOp;\nunaryOp = (\"-\" | \"!\") ExprTerm;\nbinaryOp = ExprTerm binaryOperator ExprTerm;\nbinaryOperator = compareOperator | arithmeticOperator | logicOperator;\ncompareOperator = \"==\" | \"!=\" | \"<\" | \">\" | \"<=\" | \">=\";\narithmeticOperator = \"+\" | \"-\" | \"*\" | \"/\" | \"%\";\nlogicOperator = \"&&\" | \"||\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Azure Identity Logging in Go\nDESCRIPTION: Configures logging for Azure Identity credentials to help debug authentication issues by printing logs to stdout. The code demonstrates how to set up a log listener and filter for specific credential events.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Creating Project-Level Azure DevOps Queue\nDESCRIPTION: Creates an agent queue at the project level without requiring organization-level permissions. Uses azuredevops_project data source and azuredevops_agent_queue resource.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/agent_queue.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_agent_queue\" \"example\" {\n  name       = \"example-queue\"\n  project_id = data.azuredevops_project.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Subsystem Logger in go-hclog\nDESCRIPTION: Demonstrates how to create a child logger with a subsystem name that will be included in the log output. This allows for hierarchical organization of logs.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsubsystemLogger := appLogger.Named(\"transport\")\nsubsystemLogger.Info(\"we are transporting something\")\n```\n\n----------------------------------------\n\nTITLE: Defining Template Syntax in HCL using EBNF\nDESCRIPTION: Defines the syntax for templates in HCL using Extended Backus-Naur Form (EBNF). Templates are used to combine strings and other values to produce other strings.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_20\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplate = (\n    TemplateLiteral |\n    TemplateInterpolation |\n    TemplateDirective\n)*\nTemplateDirective = TemplateIf | TemplateFor;\n```\n\n----------------------------------------\n\nTITLE: Creating Service Fabric Endpoint with Windows Authentication in HCL\nDESCRIPTION: This snippet illustrates the creation of a Service Fabric service endpoint using Windows authentication. It includes project setup and endpoint configuration with Windows authentication details.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_servicefabric.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"project\" {\n  name               = \"Sample Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_serviceendpoint_servicefabric\" \"test\" {\n  project_id            = azuredevops_project.project.id\n  service_endpoint_name = \"Sample Service Fabric\"\n  description           = \"Managed by Terraform\"\n  cluster_endpoint      = \"tcp://test\"\n\n  none {\n    unsecured   = false\n    cluster_spn = \"HTTP/www.contoso.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Docker Registry Service Endpoint\nDESCRIPTION: Command for importing an existing Docker Registry Service Endpoint into Terraform state using project ID and service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_dockerregistry.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_dockerregistry.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Implementing HCL Configuration Parser in Go\nDESCRIPTION: Demonstrates how to create a Go program that parses and decodes HCL configuration files using the hclsimple package. The example shows struct definitions with HCL tags and basic file loading functionality.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/hashicorp/hcl/v2/hclsimple\"\n)\n\ntype Config struct {\n\tIOMode  string        `hcl:\"io_mode\"`\n\tService ServiceConfig `hcl:\"service,block\"`\n}\n\ntype ServiceConfig struct {\n\tProtocol   string          `hcl:\"protocol,label\"`\n\tType       string          `hcl:\"type,label\"`\n\tListenAddr string          `hcl:\"listen_addr\"`\n\tProcesses  []ProcessConfig `hcl:\"process,block\"`\n}\n\ntype ProcessConfig struct {\n\tType    string   `hcl:\"type,label\"`\n\tCommand []string `hcl:\"command\"`\n}\n\nfunc main() {\n\tvar config Config\n\terr := hclsimple.DecodeFile(\"config.hcl\", nil, &config)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load configuration: %s\", err)\n\t}\n\tlog.Printf(\"Configuration is %#v\", config)\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Azure DevOps Local Group Entitlement Resource in Terraform (HCL)\nDESCRIPTION: Defines a Terraform resource for managing a group entitlement within Azure DevOps for a locally managed group. The only required parameter shown is `display_name`, which sets the group's display name in the Azure DevOps UI. No external dependencies are required, but provider configuration for Azure DevOps is implied. This configuration creates a new local group entitlement, with output attributes such as `id` and `principal_name` available after creation.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/group_entitlement.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_group_entitlement\" \"example\" {\n  display_name = \"Group Name\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Openshift Endpoint using Terraform CLI\nDESCRIPTION: This shell command demonstrates how to import an existing Azure DevOps Openshift service endpoint into Terraform state management. It uses the `terraform import` command, specifying the resource type (`azuredevops_serviceendpoint_openshift`), a local resource name (`example`), and the Azure DevOps identifier composed of `projectID/serviceEndpointID` or `projectName/serviceEndpointID`.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_openshift.html.markdown#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_openshift.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Using WrapString in Go to wrap text\nDESCRIPTION: Example of how to use the WrapString function from the go-wordwrap package to wrap a string to a specified line length of 3 characters. The function breaks the input string at whitespace to ensure words remain intact.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nwrapped := wordwrap.WrapString(\"foo bar baz\", 3)\nfmt.Println(wrapped)\n```\n\n----------------------------------------\n\nTITLE: Migrating Managed Identity Credential Creation in Go\nDESCRIPTION: Shows how to update ManagedIdentityCredential initialization after the removal of the direct ID parameter, using the new options-based approach for specifying client or resource IDs.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewManagedIdentityCredential(\"client-id\", nil)\n// or, for a resource ID\nopts := &ManagedIdentityCredentialOptions{ID: ResourceID}\ncred, err := NewManagedIdentityCredential(\"/subscriptions/...\", opts)\n\n// after\nclientID := ClientID(\"7cf7db0d-...\")\nopts := &ManagedIdentityCredentialOptions{ID: clientID}\n// or, for a resource ID\nresID := ResourceID(\"/subscriptions/...\")\nopts := &ManagedIdentityCredentialOptions{ID: resID}\ncred, err := NewManagedIdentityCredential(opts)\n```\n\n----------------------------------------\n\nTITLE: Disabling a Git Repository in Azure DevOps with Terraform\nDESCRIPTION: This snippet demonstrates how to disable a Git repository in Azure DevOps using Terraform. It sets the 'disabled' attribute to true while creating the repository.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/git_repository.html.markdown#2025-04-23_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Empty Git Repository\"\n  disabled   = true\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the System-wide Standard Logger in go-hclog\nDESCRIPTION: Shows how to configure the global standard library logger to use hclog for output. This allows existing code using the standard logger to benefit from hclog's features.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// log the standard logger from 'import \"log\"'\nlog.SetOutput(appLogger.StandardWriter(&hclog.StandardLoggerOptions{InferLevels: true}))\nlog.SetPrefix(\"\")\nlog.SetFlags(0)\n\nlog.Printf(\"[DEBUG] %d\", 42)\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Pipeline Settings\nDESCRIPTION: Command to import existing Azure DevOps project pipeline settings into Terraform state using the project ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project_pipeline_settings.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_project_pipeline_settings.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Converting a Retryable HTTP Client to Standard HTTP Client in Go\nDESCRIPTION: This code shows how to create a retryablehttp Client with custom retry settings and then convert it to a standard *http.Client. This allows for easy integration with existing code that expects the standard library client.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nretryClient := retryablehttp.NewClient()\nretryClient.RetryMax = 10\n\nstandardClient := retryClient.StandardClient() // *http.Client\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Service Endpoint in Azure DevOps\nDESCRIPTION: Shell command for importing an existing AWS service endpoint into Terraform state using project ID and service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_aws.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_aws.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Core Client Module with Go Modules\nDESCRIPTION: Command to add the latest version of the Azure Core Client Module (azcore) to your Go project using the go get command. This will update your go.mod file with the appropriate dependency.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/azcore\n```\n\n----------------------------------------\n\nTITLE: HTTP Header Configuration Example\nDESCRIPTION: Example showing how to add custom HTTP headers to the request context\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nazcore.WithHTTPHeader\n```\n\n----------------------------------------\n\nTITLE: Creating a Release for Azure DevOps Terraform Provider\nDESCRIPTION: This bash script sets up the environment and uses goreleaser to create a new release of the Azure DevOps Terraform Provider. It requires setting a GitHub PAT token and specifying the release version.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nexport GITHUB_TOKEN=<Your PAT token>\nRELEASE_VERSION=\"v0.1.7\"\ngit tag $RELEASE_VERSION && goreleaser release --rm-dist\n```\n\n----------------------------------------\n\nTITLE: Enabling Distributed Tracing in Go\nDESCRIPTION: Shows how to set up distributed tracing by setting the TracingProvider field in policy.ClientOptions.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\noptions := policy.ClientOptions{\n    TracingProvider: myTracingImplementation,\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Error Handling in Azure SDK for Go\nDESCRIPTION: Changes the NewResponseError function to no longer require an error parameter, simplifying error creation for HTTP responses.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nruntime.NewResponseError()\n```\n\n----------------------------------------\n\nTITLE: Setting a Project-Level Azure DevOps Reserved Names Repository Policy\nDESCRIPTION: This snippet shows how to create a project-level reserved names repository policy in Azure DevOps. It applies the policy to all repositories within the project by omitting the repository_ids argument.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_reserved_names.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_repository_policy_reserved_names\" \"example\" {\n  project_id = azuredevops_project.example.id\n  enabled    = true\n  blocking   = true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Service Principal Entitlement into Terraform State\nDESCRIPTION: Shows the command to import an existing Service Principal Entitlement into Terraform state management using its resource ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/service_principal_entitlement.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_service_principal_entitlement.example 8480c6eb-ce60-47e9-88df-eca3c801638b\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication with azidentity\nDESCRIPTION: Sets up client credential authentication using the new azidentity package with support for sovereign clouds.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\nclientOpts := azcore.ClientOptions{Cloud: cloud.AzureChina}\n\ncred, err := azidentity.NewClientSecretCredential(\n    tenantID, clientID, secret, &azidentity.ClientSecretCredentialOptions{ClientOptions: clientOpts},\n)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusive Lock for Azure DevOps Environment\nDESCRIPTION: Sets up an exclusive lock check for an Azure DevOps environment. The configuration creates a project and environment, then applies an exclusive lock with a timeout of 43200 minutes.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/check_exclusive_lock.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\nresource \"azuredevops_environment\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Environment\"\n}\n\nresource \"azuredevops_check_exclusive_lock\" \"example\" {\n  project_id           = azuredevops_project.example.id\n  target_resource_id   = azuredevops_environment.example.id\n  target_resource_type = \"environment\"\n\n  timeout = 43200\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GitHub Service Endpoint by Name in Azure DevOps using Terraform\nDESCRIPTION: Example showing how to query a GitHub service endpoint using its name. Demonstrates retrieving the service endpoint ID from a specific project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/serviceendpoint_github.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"sample\" {\n  name = \"Sample Project\"\n}\n\ndata \"azuredevops_serviceendpoint_github\" \"serviceendpoint\" {\n  project_id            = data.azuredevops_project.sample.id\n  service_endpoint_name = \"Example-Service-Endpoint\"\n}\n\noutput \"service_endpoint_id\" {\n  value = data.azuredevops_serviceendpoint_github.serviceendpoint.id\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Client Usage Example\nDESCRIPTION: Code reference showing how plugin users instantiate and use plugins via the client interface.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-plugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nplugin.Client\n```\n\n----------------------------------------\n\nTITLE: Verifying App Service Managed Identity Endpoint\nDESCRIPTION: Shell command to verify managed identity availability in Azure App Service by making a request to the identity endpoint using environment variables.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&api-version=2019-08-01\" -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\"\n```\n\n----------------------------------------\n\nTITLE: Running Acceptance Tests for Azure DevOps Terraform Provider\nDESCRIPTION: This bash script sets up the necessary environment variables and runs the acceptance tests for the Azure DevOps Terraform Provider. It requires setting up authentication tokens and organization URLs.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# AZDO_ORG_SERVICE_URL will be the URL of the AzDO org that you want to provision\n# resources inside of.\n#   ex: https://dev.azure.com/<your org name>\n$ export AZDO_ORG_SERVICE_URL=\"...\"\n\n# AZDO_PERSONAL_ACCESS_TOKEN will be the personal access token that grants access\n# to provision and manage resources in Azure DevOps.\n#   documentation: https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\n$ export AZDO_PERSONAL_ACCESS_TOKEN=\"...\"\n\n# Note: AZDO_GITHUB_SERVICE_CONNECTION_PAT is not specifically required\n# by the provider, but it is required by the acceptance tests in order to test\n# the authentication with GitHub for build definitions hosted in GitHub.\n#   documentation: https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\n$ export AZDO_GITHUB_SERVICE_CONNECTION_PAT=\"...\"\n\n# Note: AZDO_TEST_AAD_USER_EMAIL will be the e-mail address that is not included in the current organization\n# ,but needs to be an account in the Azure Active Directory. The e-mail is used for acceptance testing of the User Entitlement resource.\n$ export AZDO_TEST_AAD_USER_EMAIL=\"...\"\n\n$ ./scripts/acctest.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform with Azure DevOps Provider\nDESCRIPTION: Shows how to set up the Azure DevOps provider using a GitHub personal access token and initialize Terraform.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#   documentation: https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line\n$ export AZDO_GITHUB_SERVICE_CONNECTION_PAT=\"...\"\n\n$ terraform init\n...\nTerraform has been successfully initialized!\n...\n```\n\n----------------------------------------\n\nTITLE: Using the Test Helper at Runtime with RuntimeT Implementation\nDESCRIPTION: Shows how to use the test helper function in a runtime context (not during tests) by using the RuntimeT implementation provided by the library. This allows using test helpers outside of the testing environment.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mitchellh/go-testing-interface/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mitchellh/go-testing-interface\"\n\nfunc main() {\n    TestHelper(&testing.RuntimeT{})\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Yamux Client-Server Communication in Go\nDESCRIPTION: Example demonstrating how to set up both client and server sides of a Yamux connection. Shows creation of sessions, opening streams, and basic data transmission. Includes error handling and demonstrates the net.Conn interface implementation.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/yamux/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc client() {\n    // Get a TCP connection\n    conn, err := net.Dial(...)\n    if err != nil {\n        panic(err)\n    }\n\n    // Setup client side of yamux\n    session, err := yamux.Client(conn, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    // Open a new stream\n    stream, err := session.Open()\n    if err != nil {\n        panic(err)\n    }\n\n    // Stream implements net.Conn\n    stream.Write([]byte(\"ping\"))\n}\n\nfunc server() {\n    // Accept a TCP connection\n    conn, err := listener.Accept()\n    if err != nil {\n        panic(err)\n    }\n\n    // Setup server side of yamux\n    session, err := yamux.Server(conn, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    // Accept a stream\n    stream, err := session.Accept()\n    if err != nil {\n        panic(err)\n    }\n\n    // Listen for a message\n    buf := make([]byte, 4)\n    stream.Read(buf)\n}\n```\n\n----------------------------------------\n\nTITLE: Client Secret Authentication with azidentity\nDESCRIPTION: Implements client secret authentication and subscription client initialization using azidentity.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: HCL Native Syntax Configuration Example\nDESCRIPTION: Shows an example of HCL native syntax configuration defining service and process configurations with nested blocks and attributes.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nio_mode = \"async\"\n\nservice \"http\" \"web_proxy\" {\n  listen_addr = \"127.0.0.1:8080\"\n  \n  process \"main\" {\n    command = [\"/usr/local/bin/awesome-app\", \"server\"]\n  }\n\n  process \"mgmt\" {\n    command = [\"/usr/local/bin/awesome-app\", \"mgmt\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Feed Data Source Usage in Terraform\nDESCRIPTION: A simple example showing how to access information about an existing feed named 'releases' in Azure DevOps using the azuredevops_feed data source.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/feed.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_feed\" \"example\" {\n  name = \"releases\"\n}\n```\n\n----------------------------------------\n\nTITLE: MapReduce with Generic LINQ Functions in Go\nDESCRIPTION: Complex example demonstrating word frequency analysis using generic LINQ functions to process sentences and find top 5 most used words.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/ahmetb/go-linq/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nFrom(sentences).\n\tSelectManyT(func(sentence string) Query {\n\t\treturn From(strings.Split(sentence, \" \"))\n\t}).\n\tGroupByT(\n\t\tfunc(word string) string { return word },\n\t\tfunc(word string) string { return word },\n\t).\n\tOrderByDescendingT(func(wordGroup Group) int {\n\t\treturn len(wordGroup.Group)\n\t}).\n\tThenByT(func(wordGroup Group) string {\n\t\treturn wordGroup.Key.(string)\n\t}).\n\tTake(5).\n\tSelectIndexedT(func(index int, wordGroup Group) string {\n\t\treturn fmt.Sprintf(\"Rank: #%d, Word: %s, Counts: %d\", index+1, wordGroup.Key, len(wordGroup.Group))\n\t}).\n\tToSlice(&results)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Type in Go\nDESCRIPTION: Demonstrates how to create a custom error type in Go by implementing the error interface. This example shows a simple struct with a message field and an Error() method.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MyCustomErr struct {\n  Msg string\n}\nfunc (m MyCustomErr) Error() string { // This implements \"error\"\n  return m.Msg\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Attaching Debugger to Terraform Provider\nDESCRIPTION: This JSON configuration for VS Code's launch.json file sets up an 'attach-to-process' configuration for debugging a Terraform provider. The processId is a placeholder to be replaced later.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n \t\t{\n\t\t\t\"name\": \"Attach\",\n\t\t\t\"type\": \"go\",\n\t\t\t\"request\": \"attach\",\n            \"mode\": \"local\",\n            \"processId\": 1234   // Put any number here. We will fill this in later.\n        }\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication with autorest/adal\nDESCRIPTION: Sets up OAuth configuration and service principal token authentication using autorest/adal package.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.chinacloudapi.cn\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.chinacloudapi.cn/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Levenshtein Package in Go\nDESCRIPTION: This command installs the Levenshtein package from GitHub using the Go get command. It fetches the package and its dependencies, compiles, and installs them.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/agext/levenshtein/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/agext/levenshtein\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Credentials Check Policy in Azure DevOps with Terraform\nDESCRIPTION: Creates an Azure DevOps project and configures a project-wide credentials check policy that applies to all repositories in the project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_check_credentials.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_repository_policy_check_credentials\" \"example\" {\n  project_id = azuredevops_project.example.id\n  enabled    = true\n  blocking   = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Expression Decoder with cty Capsule Type in Go\nDESCRIPTION: Example of creating a custom type that decodes expressions as static keywords using the CustomExpressionDecoder extension. This implementation validates that expressions are keywords and returns them as capsule values.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar keywordType cty.Type\nkeywordType = cty.CapsuleWithOps(\"keyword\", reflect.TypeOf(\"\"), &cty.CapsuleOps{\n    ExtensionData: func(key interface{}) interface{} {\n        switch key {\n        case customdecode.CustomExpressionDecoder:\n            return customdecode.CustomExpressionDecoderFunc(\n                func(expr hcl.Expression, ctx *hcl.EvalContext) (cty.Value, hcl.Diagnostics) {\n                    var diags hcl.Diagnostics\n                    kw := hcl.ExprAsKeyword(expr)\n                    if kw == \"\" {\n                        diags = append(diags, &hcl.Diagnostic{\n                            Severity: hcl.DiagError,\n                            Summary:  \"Invalid keyword\",\n                            Detail:   \"A keyword is required\",\n                            Subject:  expr.Range().Ptr(),\n                        })\n                        return cty.UnkownVal(keywordType), diags\n                    }\n                    return cty.CapsuleVal(keywordType, &kw)\n                },\n            )\n        default:\n            return nil\n        }\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Sorting Versions in Go\nDESCRIPTION: Example demonstrating how to sort a collection of version strings according to SemVer rules. The code parses string versions into Version objects, then uses the Collection type with Go's sort package to properly order them.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nversionsRaw := []string{\"1.1\", \"0.7.1\", \"1.4-beta\", \"1.4\", \"2\"}\nversions := make([]*version.Version, len(versionsRaw))\nfor i, raw := range versionsRaw {\n    v, _ := version.NewVersion(raw)\n    versions[i] = v\n}\n\n// After this, the versions are properly sorted\nsort.Sort(version.Collection(versions))\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request with go-retryablehttp in Go\nDESCRIPTION: This code demonstrates how to make a simple GET request using the retryablehttp library. It shows the basic usage pattern which is similar to the standard net/http library, with the added benefit of automatic retries on failures.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresp, err := retryablehttp.Get(\"/foo\")\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: HCL Expression Examples\nDESCRIPTION: Shows examples of HCL expressions including arithmetic operations, string interpolation, and function calls.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Arithmetic with literals and application-provided variables\nsum = 1 + addend\n\n# String interpolation and templates\nmessage = \"Hello, ${name}!\"\n\n# Application-provided functions\nshouty_message = upper(message)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing the Provider with Make\nDESCRIPTION: Make command to build and install the Azure DevOps Terraform provider locally, which executes the build.sh script with appropriate flags.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Installing MessagePack Library for Golang\nDESCRIPTION: Commands to initialize a Go module and install the msgpack/v5 library. It emphasizes the importance of including 'v5' in the import path.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/vmihailenco/msgpack/v5/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init github.com/my/repo\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/vmihailenco/msgpack/v5\n```\n\n----------------------------------------\n\nTITLE: Parsing Structured Tags in Go\nDESCRIPTION: Example function demonstrating how to use the tagparser package to parse a structured tag with a name and key-value options. Shows how to access the parsed name and options map.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/vmihailenco/tagparser/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleParse() {\n\ttag := tagparser.Parse(\"some_name,key:value,key2:'complex value'\")\n\tfmt.Println(tag.Name)\n\tfmt.Println(tag.Options)\n\t// Output: some_name\n\t// map[key:value key2:'complex value']\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Source Schema in Go for Azure DevOps Provider\nDESCRIPTION: Demonstrates the structure of a simple data source schema in Go, using the example of a group data source.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n\"projects\": {\n  Type:     schema.TypeSet,\n  Computed: true,\n  Set:      getProjectHash,\n  Elem: &schema.Resource{\n    Schema: map[string]*schema.Schema{\n      \"name\": {\n        Type:     schema.TypeString,\n        Computed: true,\n      },\n      \"project_id\": {\n        Type:     schema.TypeString,\n        Computed: true,\n      },\n      \"project_url\": {\n        Type:     schema.TypeString,\n        Computed: true,\n      },\n      \"state\": {\n        Type:     schema.TypeString,\n        Computed: true,\n      },\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapper Interface for Custom Error Types in Go\nDESCRIPTION: This snippet shows how to implement the Wrapper interface for custom error types to work with errwrap functions. It defines an AppError struct and implements the WrappedErrors method.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CallErr for HTTP Call Errors in Go\nDESCRIPTION: Defines a CallErr struct to represent HTTP call errors. It includes fields for the request, response, and error, and implements the error interface. It also provides a Verbose() method for detailed error information.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// CallErr represents an HTTP call error. Has a Verbose() method that allows getting the\n// http.Request and Response objects. Implements error.\ntype CallErr struct {\n    Req  *http.Request\n    Resp *http.Response\n    Err  error\n}\n\n// Errors implements error.Error().\nfunc (e CallErr) Error() string {\n    return e.Err.Error()\n}\n\n// Verbose prints a versbose error message with the request or response.\nfunc (e CallErr) Verbose() string {\n    e.Resp.Request = nil // This brings in a bunch of TLS stuff we don't need\n    e.Resp.TLS = nil     // Same\n    return fmt.Sprintf(\"%s:\\nRequest:\\n%s\\nResponse:\\n%s\", e.Err, prettyConf.Sprint(e.Req), prettyConf.Sprint(e.Resp))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Attribute Specification with hcldec in Go\nDESCRIPTION: Example of using a custom type constraint in a hcldec.AttrSpec to enable custom decoding for an attribute named \"keyword\". This allows the HCL input to use a bare keyword that will be processed by the custom decoder.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nkeywordSpec := &hcldec.AttrSpec{\n    Name: \"keyword\",\n    Type: keywordType,\n}\n```\n\n----------------------------------------\n\nTITLE: Complex LINQ Query with GroupBy and OrderBy in Go\nDESCRIPTION: Advanced example demonstrating how to find the author with the most books using SelectMany, GroupBy, and OrderByDescending operations.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/ahmetb/go-linq/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nauthor := From(books).SelectMany(\n\tfunc(book interface{}) Query {\n\t\treturn From(book.(Book).authors)\n\t}).GroupBy(\n\tfunc(author interface{}) interface{} {\n\t\treturn author\n\t}, func(author interface{}) interface{} {\n\t\treturn author\n\t}).OrderByDescending(\n\tfunc(group interface{}) interface{} {\n\t\treturn len(group.(Group).Group)\n\t}).Select(\n\tfunc(group interface{}) interface{} {\n\t\treturn group.(Group).Key\n\t}).First()\n```\n\n----------------------------------------\n\nTITLE: Referencing Azure DevOps Terraform Template in Markdown\nDESCRIPTION: This snippet provides a link to a Terraform template that exemplifies the feature set being targeted for the V1 milestone. The template is located in the samples folder of the project repository.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/roadmap.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Terraform Template](../examples/azdo-based-cicd/main.tf)\n```\n\n----------------------------------------\n\nTITLE: Creating a Built-in Terraform Provider Address in Go\nDESCRIPTION: Shows how to properly construct an address for the built-in 'terraform' provider, which requires special handling compared to standard providers.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npAddr := NewProvider(BuiltInProviderHost, BuiltInProviderNamespace, \"terraform\")\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard format for documenting version releases including version number, date, and categorized changes (Features Added, Breaking Changes, Bugs Fixed, Other Changes).\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.8.2 (2025-02-12)\n\n### Other Changes\n* Upgraded dependencies\n\n## 1.8.1 (2025-01-15)\n\n### Bugs Fixed\n* User credential types inconsistently log access token scopes\n* `DefaultAzureCredential` skips managed identity in Azure Container Instances\n```\n\n----------------------------------------\n\nTITLE: Integrating Color into Existing Go Code\nDESCRIPTION: Demonstrates how to use the color package with existing code and mix parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Use handy standard colors\ncolor.Set(color.FgYellow)\n\nfmt.Println(\"Existing text will now be in yellow\")\nfmt.Printf(\"This one %s\\n\", \"too\")\n\ncolor.Unset() // Don't forget to unset\n\n// You can mix up parameters\ncolor.Set(color.FgMagenta, color.Bold)\ndefer color.Unset() // Use it in your function\n\nfmt.Println(\"All text will now be bold magenta.\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Group Membership Data in Azure DevOps using Terraform\nDESCRIPTION: This code snippet demonstrates how to use the azuredevops_group_membership data source in Terraform to retrieve information about existing group memberships in Azure DevOps. It requires the group_descriptor as an input and provides access to the group's members.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/group_membership.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_group_membership\" \"example\" {\n  group_descriptor = \"groupdescroptpr\"\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Colored Text Using Standard Colors in Go\nDESCRIPTION: Demonstrates how to use default helper functions to print text in various colors.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Print with default helper functions\ncolor.Cyan(\"Prints text in cyan.\")\n\n// A newline will be appended automatically\ncolor.Blue(\"Prints %s in blue.\", \"text\")\n\n// These are using the default foreground colors\ncolor.Red(\"We have red\")\ncolor.Magenta(\"And many others ..\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Yamux Session Termination Error Codes\nDESCRIPTION: Defines the error codes used in the Go Away message for session termination, including normal termination, protocol error, and internal error.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/yamux/spec.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* 0x0 Normal termination\n* 0x1 Protocol error\n* 0x2 Internal error\n```\n\n----------------------------------------\n\nTITLE: Implementing Build Completion Trigger\nDESCRIPTION: Configures a build definition with a build completion trigger, which starts the build when another specified build completes.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/build_definition.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_build_definition\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Build Definition\"\n  path       = \"\\\\ExampleFolder\"\n\n  ci_trigger {\n    use_yaml = false\n  }\n\n  repository {\n    repo_type             = \"GitHubEnterprise\"\n    repo_id               = \"<GitHub Org>/<Repo Name>\"\n    github_enterprise_url = \"https://github.company.com\"\n    branch_name           = \"main\"\n    yml_path              = \"azure-pipelines.yml\"\n    service_connection_id = azuredevops_serviceendpoint_github_enterprise.example.id\n  }\n\n  build_completion_trigger {\n    build_definition_id = 10\n    branch_filter {\n      include = [\"main\"]\n      exclude = [\"test\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus with Colorable Output in Go\nDESCRIPTION: Example code showing how to set up logrus logging with forced colors using go-colorable. Demonstrates configuration of logrus formatter and output writer to enable colored console output on Windows.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mattn/go-colorable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogrus.SetFormatter(&logrus.TextFormatter{ForceColors: true})\nlogrus.SetOutput(colorable.NewColorableStdout())\n\nlogrus.Info(\"succeeded\")\nlogrus.Warn(\"not correct\")\nlogrus.Error(\"something error\")\nlogrus.Fatal(\"panic\")\n```\n\n----------------------------------------\n\nTITLE: Building a List of Errors with Append in Go\nDESCRIPTION: Demonstrates how to use the Append function to create a list of errors. This approach works with nil, multierror.Error, or any other error type as the first argument.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Returning multierror Only If Errors Exist in Go\nDESCRIPTION: Shows how to use the ErrorOrNil function to return an error implementation only if there are errors to return, otherwise returning nil.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with DefaultAzureCredential in Go\nDESCRIPTION: This snippet demonstrates how to authenticate a client from the armresources module using DefaultAzureCredential.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Enabling Key Conversion for Basic or Manual Scaling in Go App Engine\nDESCRIPTION: This code snippet demonstrates how to enable key conversion for all handlers in a Go App Engine service using basic or manual scaling. It sets up a handler for the /_ah/start endpoint that calls datastore.EnableKeyConversion().\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/appengine/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandleFunc(\"/_ah/start\", func(w http.ResponseWriter, r *http.Request) {\n    datastore.EnableKeyConversion(appengine.NewContext(r))\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Colored Text into Non-Colored Strings in Go\nDESCRIPTION: Shows how to use SprintFunc to mix colored and non-colored strings, and demonstrates helper functions.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Create SprintXxx functions to mix strings with other non-colorized strings:\nyellow := color.New(color.FgYellow).SprintFunc()\nred := color.New(color.FgRed).SprintFunc()\nfmt.Printf(\"This is a %s and this is %s.\\n\", yellow(\"warning\"), red(\"error\"))\n\ninfo := color.New(color.FgWhite, color.BgGreen).SprintFunc()\nfmt.Printf(\"This %s rocks!\\n\", info(\"package\"))\n\n// Use helper functions\nfmt.Println(\"This\", color.RedString(\"warning\"), \"should be not neglected.\")\nfmt.Printf(\"%v %v\\n\", color.GreenString(\"Info:\"), \"an important message.\")\n\n// Windows supported too! Just don't forget to change the output to color.Output\nfmt.Fprintf(color.Output, \"Windows support: %s\", color.GreenString(\"PASS\"))\n```\n\n----------------------------------------\n\nTITLE: Importing NuGet Service Endpoint in Azure DevOps with Terraform\nDESCRIPTION: This snippet shows how to import an existing Azure DevOps NuGet Service Endpoint into Terraform using the project ID or name and the service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_nuget.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_nuget.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Adding Sleep for Debugging in Go Terraform Provider\nDESCRIPTION: This Go code snippet shows how to add a time.Sleep() call in a Terraform provider resource creation function to allow time for attaching a debugger before the process exits.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc resourceFooCreate(d *schema.ResourceData, m interface{}) error {\n\ttime.Sleep(60 * time.Second)\n\tfookey := d.Get(\"fookey\").(string)\n\td.SetId(fookey)\n\treturn resourceFooRead(d, m)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Reflection Service on a gRPC Server in Go\nDESCRIPTION: This snippet demonstrates how to register the gRPC reflection service on a server. It imports the reflection package, creates a new gRPC server, registers an application-specific service, then registers the reflection service before starting the server.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/grpc/reflection/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc/reflection\"\n\ns := grpc.NewServer()\npb.RegisterYourOwnServer(s, &server{})\n\n// Register reflection service on gRPC server.\nreflection.Register(s)\n\ns.Serve(lis)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Mapstructure Use Case\nDESCRIPTION: A sample JSON object that demonstrates the need for mapstructure. This example shows a case where the structure type is determined by a field within the JSON itself, making standard static struct decoding difficult.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Custom 'with' Function in HCL\nDESCRIPTION: Example of using the custom 'with' function in an HCL configuration. This demonstrates how the ExpressionClosureType allows for evaluating an expression with additional context variables.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-23_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n  foo = with({name = \"Cory\"}, \"${greeting}, ${name}!\")\n```\n\n----------------------------------------\n\nTITLE: Basic MessagePack encoding and decoding with structs in Go\nDESCRIPTION: Example demonstrating how to use msgpack to marshal a struct into MessagePack format and unmarshal it back. This shows the basic functionality of encoding and decoding Go struct data.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/vmihailenco/msgpack/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleMarshal() {\n\ttype Item struct {\n\t\tFoo string\n\t}\n\n\tb, err := msgpack.Marshal(&Item{Foo: \"bar\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar item Item\n\terr = msgpack.Unmarshal(b, &item)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(item.Foo)\n\t// Output: bar\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Formatting in Go\nDESCRIPTION: Shows how to customize the format of the Error() string function by specifying a custom ErrorFormat.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JFrog XRay V2 Service Endpoint with Token Authentication in Azure DevOps\nDESCRIPTION: This snippet demonstrates how to create a JFrog XRay V2 service endpoint using token authentication. It includes creating a project and the service endpoint with necessary configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jfrog_xray_v2.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_jfrog_xray_v2\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Artifactory\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_token {\n    token = \"0000000000000000000000000000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fprint Functions with Go Color Package\nDESCRIPTION: Demonstrates how to create custom fprint functions for use with specific writers.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nblue := color.New(color.FgBlue).FprintfFunc()\nblue(myWriter, \"important notice: %s\", stars)\n\n// Mix up with multiple attributes\nsuccess := color.New(color.Bold, color.FgGreen).FprintlnFunc()\nsuccess(myWriter, \"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Azure RM Service Endpoint using Terraform CLI\nDESCRIPTION: This command demonstrates how to import an existing Azure DevOps Azure Resource Manager Service Endpoint into Terraform state management using the `terraform import` command. It requires the project ID (or name) and the service endpoint ID, separated by a slash.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azurerm.html.markdown#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_azurerm.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Integrating with Standard Library Logger in go-hclog\nDESCRIPTION: Demonstrates how to create a standard library compatible logger from an hclog.Logger with level inference. This allows using hclog with code that expects a standard logger.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nstdLogger := appLogger.StandardLogger(&hclog.StandardLoggerOptions{\n\tInferLevels: true,\n})\n// Printf() is provided by stdlib log.Logger interface, not hclog.Logger\nstdLogger.Printf(\"[DEBUG] %+v\", stdLogger)\n```\n\n----------------------------------------\n\nTITLE: Modifying HTTP Response Handling in Go Azure SDK\nDESCRIPTION: Removes the SkipBodyDownload method from the Request type and replaces it with a standalone function. Also removes the HTTPResponse interface type.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nruntime.SkipBodyDownload(req *http.Request)\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Enterprise Server Service Endpoint with Personal Access Token in Azure DevOps\nDESCRIPTION: This snippet demonstrates how to create a GitHub Enterprise Server service endpoint in Azure DevOps using a personal access token for authentication. It includes creating a project and configuring the service endpoint with necessary parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_github_enterprise.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_github_enterprise\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example GitHub Enterprise\"\n  url                   = \"https://github.contoso.com\"\n  description           = \"Managed by Terraform\"\n\n  auth_personal {\n    # Also can be set with AZDO_GITHUB_ENTERPRISE_SERVICE_CONNECTION_PAT environment variable\n    personal_access_token = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing HTTP Server Lifecycle with run.Group in Go\nDESCRIPTION: This example shows how to manage an HTTP server with run.Group. It creates a TCP listener, then adds the server to the run.Group with an execute function that runs the server and an interrupt function that closes the listener.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/oklog/run/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nln, _ := net.Listen(\"tcp\", \":8080\")\ng.Add(func() error {\n\treturn http.Serve(ln, nil)\n}, func(error) {\n\tln.Close()\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Context Lifecycle with run.Group in Go\nDESCRIPTION: This snippet demonstrates how to use run.Group to manage a process that responds to context cancellation. It creates a context with cancel function, adds it to the run.Group with an execute function that runs a process and an interrupt function that cancels the context.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/oklog/run/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithCancel(context.Background())\ng.Add(func() error {\n\treturn myProcess(ctx, ...)\n}, func(error) {\n\tcancel()\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Project-Level Author Email Pattern Policy in Azure DevOps\nDESCRIPTION: Creates a project-wide email pattern policy that applies to all repositories within the project. The policy restricts commit authors to specific email patterns and includes project creation configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_author_email_pattern.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_repository_policy_author_email_pattern\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  enabled               = true\n  blocking              = true\n  author_email_patterns = [\"user1@test.com\", \"user2@test.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Feed with Soft Delete in Azure DevOps using Terraform\nDESCRIPTION: This snippet illustrates how to create a feed with soft delete functionality enabled. It uses the 'features' block to set 'permanent_delete' to false, allowing for potential restoration of the feed.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/feed.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_feed\" \"example\" {\n  name = \"examplefeed\"\n  features {\n    permanent_delete = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Values with hclog.Fmt() in go-hclog\nDESCRIPTION: Shows how to use the hclog.Fmt() function to format values in log messages, similar to Printf() style formatting, while maintaining structured logging.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntotalBandwidth := 200\nappLogger.Info(\"total bandwidth exceeded\", \"bandwidth\", hclog.Fmt(\"%d GB/s\", totalBandwidth))\n```\n\n----------------------------------------\n\nTITLE: Using the Test Helper in a Real Test with Go's Testing Package\nDESCRIPTION: Demonstrates how to use the test helper function in an actual Go test by passing a *testing.T parameter. This is the standard way to use test helpers during regular testing.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mitchellh/go-testing-interface/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"testing\"\n\nfunc TestThing(t *testing.T) {\n    TestHelper(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Structural Elements in EBNF\nDESCRIPTION: EBNF grammar rules for HCL's core structural elements including configuration files, bodies, attributes, and blocks.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_2\n\nLANGUAGE: ebnf\nCODE:\n```\nConfigFile   = Body;\nBody         = (Attribute | Block | OneLineBlock)*;\nAttribute    = Identifier \"=\" Expression Newline;\nBlock        = Identifier (StringLit|Identifier)* \"{\" Newline Body \"}\" Newline;\nOneLineBlock = Identifier (StringLit|Identifier)* \"{\" (Identifier \"=\" Expression)? \"}\" Newline;\n```\n\n----------------------------------------\n\nTITLE: Running Test Commands for Azure DevOps Provider\nDESCRIPTION: Shell commands for running test suites, including vet checks and race condition testing. These commands must pass before any PR can be merged.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/vet.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Handling Legacy Provider Address Format in Go\nDESCRIPTION: Shows how to parse a legacy provider address format with placeholder namespace as used in Terraform v0.13, resulting in a legacy namespace designation.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npAddr, err := ParseProviderSource(\"-/aws\")\nif err != nil {\n\t// deal with error\n}\n\n// pAddr == Provider{\n//   Type:      \"aws\",\n//   Namespace: LegacyProviderNamespace,     // \"-\"\n//   Hostname:  DefaultProviderRegistryHost, // \"registry.terraform.io\"\n// }\npAddr.HasKnownNamespace() // == true\npAddr.IsLegacy() // == true\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Checkmarx SCA Service Endpoint\nDESCRIPTION: Shows the command syntax for importing an existing Checkmarx SCA service endpoint into Terraform state using project ID and service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_checkmarx_sca.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_checkmarx_sca.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Repository Credentials Check Policy with Terraform\nDESCRIPTION: Command for importing an existing Azure DevOps repository credentials check policy into Terraform state using project ID and policy ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_check_credentials.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_repository_policy_check_credentials.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Importing GCP Terraform Service Endpoint in Azure DevOps with Shell Command\nDESCRIPTION: This snippet shows the shell command to import an existing GCP for Terraform Service Endpoint into Terraform state. It uses the format projectID/serviceEndpointID or projectName/serviceEndpointID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_gcp_terraform.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_serviceendpoint_gcp_terraform.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: HCL Version Import Example in Go\nDESCRIPTION: Shows how to import both HCL 1 and HCL 2 versions in the same Go program using semantic import versioning.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    hcl1 \"github.com/hashicorp/hcl\"\n    hcl2 \"github.com/hashicorp/hcl/v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing Provider Source Address in Go\nDESCRIPTION: Demonstrates how to parse a provider source address using the ParseProviderSource function. This example shows parsing a qualified provider address with namespace like 'hashicorp/aws'.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npAddr, err := ParseProviderSource(\"hashicorp/aws\")\nif err != nil {\n\t// deal with error\n}\n\n// pAddr == Provider{\n//   Type:      \"aws\",\n//   Namespace: \"hashicorp\",\n//   Hostname:  DefaultProviderRegistryHost,\n// }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Git Repository File Data in Azure DevOps using Terraform\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_git_repository_file data source to retrieve information about a specific file in an Azure DevOps Git repository. It first retrieves project and repository data, then uses that information to fetch details about a specific file.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/git_repository_file.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\n# Load a specific Git repository by name\ndata \"azuredevops_git_repository\" \"example\" {\n  project_id = data.azuredevops_project.example.id\n  name       = \"Example Repository\"\n}\n\ndata \"azuredevops_git_repository_file\" \"example\" {\n  repository_id = data.azuredevops_git_repository.example.id\n  branch        = \"refs/heads/main\"\n  file          = \"MyFile.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Identifier Syntax in EBNF\nDESCRIPTION: EBNF grammar definition for HCL identifiers, following Unicode UAX #31 specification with additional support for dash characters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\nIdentifier = ID_Start (ID_Continue | '-')*;\n```\n\n----------------------------------------\n\nTITLE: Managing Stream Reading with run.Group in Go\nDESCRIPTION: This example demonstrates using run.Group with an io.ReadCloser. It creates a scanner to read from a connection, adds it to the run.Group with an execute function that scans until EOF or error, and an interrupt function that closes the connection.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/oklog/run/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar conn io.ReadCloser = ...\ng.Add(func() error {\n\ts := bufio.NewScanner(conn)\n\tfor s.Scan() {\n\t\tprintln(s.Text())\n\t}\n\treturn s.Err()\n}, func(error) {\n\tconn.Close()\n})\n```\n\n----------------------------------------\n\nTITLE: System Call Interface Functions in Assembly\nDESCRIPTION: These are the three function signatures implemented in hand-written assembly for system call dispatch. They provide different ways to make system calls with varying numbers of arguments and scheduling behaviors.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Logger with go-hclog\nDESCRIPTION: Initializes a new named logger with a specific log level. The name will be included in log entries, and only messages at or above the specified level will be output.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nappLogger := hclog.New(&hclog.LoggerOptions{\n\tName:  \"my-app\",\n\tLevel: hclog.LevelFromString(\"DEBUG\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ArgoCD Service Endpoint in Azure DevOps\nDESCRIPTION: Command for importing an existing ArgoCD service endpoint into Terraform state using project ID and service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_argocd.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_argocd.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Expression Grammar in EBNF\nDESCRIPTION: EBNF grammar specification for HCL expressions, including terms, operations, and conditionals.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_3\n\nLANGUAGE: ebnf\nCODE:\n```\nExpression = (\n    ExprTerm |\n    Operation |\n    Conditional\n);\n```\n\n----------------------------------------\n\nTITLE: Using hc-install CLI to Install Terraform\nDESCRIPTION: Example command demonstrating how to use the hc-install CLI to install a specific version of Terraform.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hc-install/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhc-install install -version 1.3.7 terraform\n```\n\n----------------------------------------\n\nTITLE: Using go-isatty to Detect Terminal Types in Go\nDESCRIPTION: This example demonstrates how to use the go-isatty library to detect if the standard output is connected to a terminal, Cygwin/MSYS2 terminal, or neither. It imports the necessary packages and performs conditional checks on the file descriptor.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/mattn/go-isatty\"\n\t\"os\"\n)\n\nfunc main() {\n\tif isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Terminal\")\n\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Cygwin/MSYS2 Terminal\")\n\t} else {\n\t\tfmt.Println(\"Is Not Terminal\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Values in HCL\nDESCRIPTION: EBNF grammar for tuple and object collection values in HCL. Includes syntax for creating tuples and objects, as well as handling of newlines and commas.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_6\n\nLANGUAGE: ebnf\nCODE:\n```\nCollectionValue = tuple | object;\ntuple = \"[\" (\n    (Expression (((\",\" | Newline) Expression)* \",\"?)?)\n) \"]\";\nobject = \"{\" (\n    (objectelem ((( \",\" | Newline) objectelem)* \",\"?)?)\n) \"}\";\nobjectelem = (Identifier | Expression) (\"=\" | \":\") Expression;\n```\n\n----------------------------------------\n\nTITLE: Creating a Logger with Fixed Key/Value Pairs in go-hclog\nDESCRIPTION: Shows how to create a logger that automatically includes specific key/value pairs in all log messages. This is useful for adding context like request IDs to log entries.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nrequestID := \"5fb446b6-6eba-821d-df1b-cd7501b6a363\"\nrequestLogger := subsystemLogger.With(\"request\", requestID)\nrequestLogger.Info(\"we are transporting a request\")\n```\n\n----------------------------------------\n\nTITLE: Importing Bitbucket Service Endpoint in Azure DevOps using Terraform\nDESCRIPTION: This snippet shows the command to import an existing Azure DevOps Bitbucket Service Endpoint into Terraform. It uses the format projectID/serviceEndpointID or projectName/serviceEndpointID for the import.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_bitbucket.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_bitbucket.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Agent Pool\nDESCRIPTION: Command for importing an existing Azure DevOps agent pool into Terraform state using the pool ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/agent_pool.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_agent_pool.example 0\n```\n\n----------------------------------------\n\nTITLE: Showcasing Logic Operators in HCL\nDESCRIPTION: Presents the syntax for logic operators in HCL. These operators apply only to boolean values and always produce boolean values as results.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\na && b   logical AND\na || b   logical OR\n!a       logical NOT\n```\n\n----------------------------------------\n\nTITLE: JSON Equivalent of HCL Configuration\nDESCRIPTION: Demonstrates the JSON representation of the same configuration structure shown in the HCL native syntax example.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"io_mode\": \"async\",\n  \"service\": {\n    \"http\": {\n      \"web_proxy\": {\n        \"listen_addr\": \"127.0.0.1:8080\",\n        \"process\": {\n          \"main\": {\n            \"command\": [\"/usr/local/bin/awesome-app\", \"server\"]\n          },\n          \"mgmt\": {\n            \"command\": [\"/usr/local/bin/awesome-app\", \"mgmt\"]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using azuredevops_agent_queue Data Source with Terraform\nDESCRIPTION: This example demonstrates how to use the azuredevops_agent_queue data source to access information about an existing Agent Queue. It creates a project and references an agent queue within that project, then outputs the queue name and pool ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/agent_queue.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  work_item_template = \"Agile\"\n  version_control    = \"Git\"\n  visibility         = \"private\"\n  description        = \"Managed by Terraform\"\n}\ndata \"azuredevops_agent_queue\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Agent Queue\"\n}\n\noutput \"name\" {\n  value = data.azuredevops_agent_queue.example.name\n}\n\noutput \"pool_id\" {\n  value = data.azuredevops_agent_queue.example.agent_pool_id\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authorization in Go\nDESCRIPTION: Demonstrates how to use BearerTokenOptions.AuthorizationHandler to extend runtime.BearerTokenPolicy with custom authorization logic.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\noptions := BearerTokenOptions{\n    AuthorizationHandler: func(req *http.Request, token string) error {\n        // Custom authorization logic here\n        return nil\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Literals in HCL\nDESCRIPTION: EBNF grammar for string literals in HCL. This production allows escape sequences but does not permit template interpolation or directive sequences.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_8\n\nLANGUAGE: ebnf\nCODE:\n```\nStringLit = '\"' (quoted literals as defined in prose above) '\"';\n```\n\n----------------------------------------\n\nTITLE: Migrating Client Certificate Credential Creation in Go\nDESCRIPTION: Demonstrates how to migrate from the old certificate path-based approach to the new method requiring parsed certificate data and private key for client certificate authentication.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewClientCertificateCredential(\"tenant\", \"client-id\", \"/cert.pem\", nil)\n\n// after\ncertData, err := os.ReadFile(\"/cert.pem\")\ncerts, key, err := ParseCertificates(certData, password)\ncred, err := NewClientCertificateCredential(tenantID, clientID, certs, key, nil)\n```\n\n----------------------------------------\n\nTITLE: Getting Azure CLI Access Token\nDESCRIPTION: Azure CLI command to obtain an access token for the management API.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-23_snippet_5\n\nLANGUAGE: azurecli\nCODE:\n```\naz account get-access-token --output json --resource https://management.core.windows.net\n```\n\n----------------------------------------\n\nTITLE: OpenURL function for opening URLs in browser\nDESCRIPTION: Function to open a new browser window pointing to the specified URL. Takes a URL string as input and returns an error if the operation fails.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenURL(url string) error\n```\n\n----------------------------------------\n\nTITLE: Using Verbose() Function for Detailed Error Information in Go\nDESCRIPTION: Demonstrates how to use the Verbose() function to retrieve the most detailed error message from any error provided by the library.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(errors.Verbose(err))\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Errwrap Package in Go\nDESCRIPTION: This snippet demonstrates the basic usage of the errwrap package. It includes a function that wraps an error and shows how to check for specific errors using Contains and ContainsType functions.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Numeric Literal Syntax in EBNF\nDESCRIPTION: EBNF grammar specification for numeric literals in HCL, supporting integer, fractional, and exponential parts.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_1\n\nLANGUAGE: ebnf\nCODE:\n```\nNumericLit = decimal+ (\".\" decimal+)? (expmark decimal+)?;\ndecimal    = '0' .. '9';\nexpmark    = ('e' | 'E') (\"+\" | \"-\")?\n```\n\n----------------------------------------\n\nTITLE: Checking Azure Developer CLI Configuration\nDESCRIPTION: Shell command to list the Azure Developer CLI configuration and verify the logged in account.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nazd config list\n```\n\n----------------------------------------\n\nTITLE: Getting Azure Developer CLI Token\nDESCRIPTION: Shell command to obtain an access token from Azure Developer CLI for the management API scope.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nazd auth token --output json --scope https://management.core.windows.net/.default\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Azure DevOps Project by GUID\nDESCRIPTION: Shell command showing how to import an existing Azure DevOps project into Terraform state using the project GUID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_project.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Updating Poller Creation in Azure SDK for Go\nDESCRIPTION: Modifies the NewPoller functions to remove the 'eu' parameter, simplifying the creation of long-running operation pollers.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\narm.NewPoller()\nruntime.NewPoller()\n```\n\n----------------------------------------\n\nTITLE: Attribute Access Operator Syntax in EBNF\nDESCRIPTION: Defines the grammar for accessing object attributes using dot notation.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_13\n\nLANGUAGE: ebnf\nCODE:\n```\nGetAttr = \".\" Identifier;\n```\n\n----------------------------------------\n\nTITLE: Creating JFrog Distribution V2 Service Endpoint with Basic Authentication in Azure DevOps\nDESCRIPTION: This snippet shows how to create a JFrog Distribution V2 service endpoint in Azure DevOps using basic authentication with username and password. It includes creating a project and the service endpoint with necessary configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jfrog_distribution_v2.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_jfrog_distribution_v2\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example JFrog Distribution V2\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_basic {\n    username = \"username\"\n    password = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Structured Log Messages with Key/Value Pairs in go-hclog\nDESCRIPTION: Shows how to log an info-level message with structured key/value pairs for input validation. The pairs will be formatted appropriately in the log output.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ninput := \"5.5\"\n_, err := strconv.ParseInt(input, 10, 32)\nif err != nil {\n\tappLogger.Info(\"Invalid input for ParseInt\", \"input\", input, \"error\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template For Directive Syntax in HCL using EBNF\nDESCRIPTION: Defines the syntax for the template 'for' directive in HCL using Extended Backus-Naur Form (EBNF). This directive produces zero or more copies of its sub-template based on the elements of a collection.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_23\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateFor = (\n    (\"%{\" | \"%{~\") \"for\" Identifier (\",\" Identifier) \"in\" Expression (\"}\" | \"~}\")\n    Template\n    (\"%{\" | \"%{~\") \"endfor\" (\"}\" | \"~}\")\n);\n```\n\n----------------------------------------\n\nTITLE: Validator Usage Example in Go\nDESCRIPTION: Demonstrates how to create and use the new Validator type for claims validation, replacing the previous direct Valid() function calls.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar v = jwt.NewValidator(jwt.WithLeeway(5*time.Second))\nv.Validate(myClaims)\n```\n\n----------------------------------------\n\nTITLE: Verifying IMDS Availability on Azure VM\nDESCRIPTION: Shell command to verify if the managed identity endpoint is available on an Azure VM by making a request to the IMDS endpoint.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net&api-version=2018-02-01' -H \"Metadata: true\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Azure DevOps Terraform Provider Repository\nDESCRIPTION: Git commands to clone the Azure DevOps Terraform provider repository and navigate to the project directory.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/microsoft/terraform-provider-azuredevops.git\n$ cd terraform-provider-azuredevops/\n```\n\n----------------------------------------\n\nTITLE: Illustrating Arithmetic Operators in HCL\nDESCRIPTION: Demonstrates the syntax for arithmetic operators in HCL. These operators apply only to number values and always produce number values as results.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\na + b   sum        (addition)\na - b   difference (subtraction)\na * b   product    (multiplication)\na / b   quotient   (division)\na % b   remainder  (modulo)\n-a      negation\n```\n\n----------------------------------------\n\nTITLE: Documenting Breaking Changes for Azure Identity Library v1.6.0\nDESCRIPTION: This section describes a behavioral change to DefaultAzureCredential in IMDS managed identity scenarios. It explains how the first request to IMDS is now sent without the \"Metadata\" header to expedite endpoint validation.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/BREAKING_CHANGES.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.6.0\n\n### Behavioral change to `DefaultAzureCredential` in IMDS managed identity scenarios\n\nAs of `azidentity` v1.6.0, `DefaultAzureCredential` makes a minor behavioral change when it uses IMDS managed\nidentity. It sends its first request to IMDS without the \"Metadata\" header, to expedite validating whether the endpoint\nis available. This precedes the credential's first token request and is guaranteed to fail with a 400 error. This error\nresponse can appear in logs but doesn't indicate authentication failed.\n```\n\n----------------------------------------\n\nTITLE: Enumerating Yamux Message Types\nDESCRIPTION: Lists and describes the supported message types in Yamux, including Data, Window Update, Ping, and Go Away.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/yamux/spec.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* 0x0 Data - Used to transmit data. May transmit zero length payloads\n  depending on the flags.\n\n* 0x1 Window Update - Used to updated the senders receive window size.\n  This is used to implement per-session flow control.\n\n* 0x2 Ping - Used to measure RTT. It can also be used to heart-beat\n  and do keep-alives over TCP.\n\n* 0x3 Go Away - Used to close a session.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Remote for Fork\nDESCRIPTION: Git command to add your personal fork as a remote repository. This allows you to push changes to your fork before submitting pull requests.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add fork git@github.com:GITHUB_USERNAME/appengine.git\n```\n\n----------------------------------------\n\nTITLE: Finding Terraform Provider Process ID\nDESCRIPTION: This shell command uses grep to find the process ID of the Terraform provider, which is needed for attaching the debugger.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/debugging.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nps | grep azuredevops\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps SonarQube Server Service Endpoint\nDESCRIPTION: This snippet shows the command to import an existing Azure DevOps SonarQube Server Service Endpoint into Terraform state. It requires the project ID and service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_sonarqube.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nterraform import azuredevops_serviceendpoint_sonarqube.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Running the Provider Binary Directly\nDESCRIPTION: Command demonstrating that Terraform provider plugins cannot be run directly and must be executed through Terraform.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/terraform-provider-azuredevops_v0.0.1\n\nThis binary is a plugin. These are not meant to be executed directly.\nPlease execute the program that consumes these plugins, which will\nload any plugins automatically\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Provider Release History Documentation\nDESCRIPTION: Markdown formatted changelog documenting version history, new features, improvements, and bug fixes for the Azure DevOps Terraform provider.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0 \n\nFEATURES:\n* **New Resource** `azuredevops_servicehook_permissions` [#504]\n* **New Resource** `azuredevops_tagging_permissions ` [#510]\n* **New Resource** `azuredevops_serviceendpoint_argocd ` [#501]\n* **New Resource** `azuredevops_environment` [#143]\n* **New Data Resource** `azuredevops_variable_group` [#311]\n\nBUG FIX:\n* `azuredevops_serviceconnection_azurerm` - Service principal secret will not be updated when update other settings. [#495]\n* `azuredevops_build_definition`\n  - Enhance repository check. [#493]\n  - `path` cannot end with backslash. [#513]\n* `azuredevops_git_repository` - `default_branch` cannot set with initialize type `Uninitialized`. [#498]\n* `azuredevops_variable_group` - Support search top 500 Key Vault secrets. [#388]\n* `azuredevops_group` - Import group not set scope. [#345]\n\nIMPROVEMENTS:\n* `data_project` - Optimize read operation [#524]\n* Document scaffold - Generate document from source code [#503]\n* Upgrade Azure DevOps API to V6  [#494]\n* **All permission resources**\n  - Refactor the implementation of `SecurityNamespace` and the according helper functions. [#149]\n  - All permission resources will now clear the `Id` on a `Read` operation when the connected ACLs not found. [#149]\n  \nBREAKING CHANGE:\n* All service endpoint - Service endpoint `project_id` only support project ID, project name is no longer supported since v0.2.0. [#494]\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and Incoming WebHook Service Endpoint\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and an Incoming WebHook service endpoint using Terraform. It sets up a private project with Git version control and an Agile work item template, then creates an Incoming WebHook with specified parameters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_incomingwebhook.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_incomingwebhook\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  webhook_name          = \"example_webhook\"\n  secret                = \"secret\"\n  http_header           = \"X-Hub-Signature\"\n  service_endpoint_name = \"Example IncomingWebhook\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hc-install via Homebrew (macOS / Linux)\nDESCRIPTION: Command to install hc-install using the Homebrew package manager on macOS or Linux systems.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hc-install/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install hashicorp/tap/hc-install\n```\n\n----------------------------------------\n\nTITLE: gRPC Connection Error Example\nDESCRIPTION: Example of a common error message when attempting to fetch gRPC package from blocked domains.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ go get -u google.golang.org/grpc\npackage google.golang.org/grpc: unrecognized import path \"google.golang.org/grpc\" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\n```\n\n----------------------------------------\n\nTITLE: Installing go-isatty via Go Get\nDESCRIPTION: Command to install the go-isatty library using the Go package manager. This will fetch the package from GitHub and make it available for import in Go projects.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mattn/go-isatty\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Color for Specific Instances in Go\nDESCRIPTION: Demonstrates how to enable and disable color output for individual color instances.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nc := color.New(color.FgCyan)\nc.Println(\"Prints cyan text\")\n\nc.DisableColor()\nc.Println(\"This is printed without any color\")\n\nc.EnableColor()\nc.Println(\"This prints again cyan...\")\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests Script\nDESCRIPTION: Bash command for running unit tests for specific resources or data sources using the unittest.sh script.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/unittest.sh resource_project\n```\n\n----------------------------------------\n\nTITLE: Verifying Azure CLI Account\nDESCRIPTION: Azure CLI command to verify the currently logged in account details.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-23_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz account show\n```\n\n----------------------------------------\n\nTITLE: Checking for Exact Error Value with errors.Is in Go\nDESCRIPTION: Demonstrates how to use the standard library errors.Is function to check for the presence of a specific error value in a multierror.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the browser package in Go\nDESCRIPTION: Import statement for the browser package which provides helpers to open files, readers, and URLs in a browser window.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pkg/browser\"\n```\n\n----------------------------------------\n\nTITLE: Defining Stdout variable in browser package\nDESCRIPTION: Declaration of Stdout as an io.Writer to which executed commands write standard output, defaulting to os.Stdout.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar Stdout io.Writer = os.Stdout\n```\n\n----------------------------------------\n\nTITLE: Custom LINQ Query Implementation in Go\nDESCRIPTION: Example showing how to implement a custom LINQ query method that filters values greater than a specified threshold.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/ahmetb/go-linq/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype MyQuery Query\n\nfunc (q MyQuery) GreaterThan(threshold int) Query {\n\treturn Query{\n\t\tIterate: func() Iterator {\n\t\t\tnext := q.Iterate()\n\n\t\t\treturn func() (item interface{}, ok bool) {\n\t\t\t\tfor item, ok = next(); ok; item, ok = next() {\n\t\t\t\t\tif item.(int) > threshold {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn\n\t\t\t}\n\t\t},\n\t}\n}\n\nresult := MyQuery(Range(1,10)).GreaterThan(5).Results()\n```\n\n----------------------------------------\n\nTITLE: Using the Global Logger in Go with go-hclog\nDESCRIPTION: Demonstrates how to use the default global logger provided by go-hclog to log an info-level message.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-hclog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhclog.Default().Info(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Terraform Debug Logging in Shell\nDESCRIPTION: This snippet shows how to enable debug logging for Terraform execution by setting an environment variable.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TF_LOG=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Running AppEngine System Tests\nDESCRIPTION: Command to execute all system tests for the Google AppEngine package. This command runs tests in verbose mode for all subpackages.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v google.golang.org/appengine/...\n```\n\n----------------------------------------\n\nTITLE: Debugging Build Errors for Azure SDK on macOS\nDESCRIPTION: This snippet demonstrates a common build error when cgo is not enabled on macOS. It shows undefined 'accessor' symbols, indicating that cgo needs to be enabled for proper compilation.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ GOOS=darwin go build\n# github.com/Azure/azure-sdk-for-go/sdk/azidentity/cache\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:19: undefined: accessor.New\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:38: undefined: accessor.WithAccount\n```\n\n----------------------------------------\n\nTITLE: Assigning Project-Level Work Item Query Permissions (Terraform HCL)\nDESCRIPTION: Assigns permissions for all work item queries inside an Azure DevOps project by specifying only the \"project_id\". The resource accepts a group principal (from a data source) and a map of permissions, such as \"CreateRepository\", \"DeleteRepository\", and \"RenameRepository\", each set to \"Allow\", \"Deny\", or \"NotSet\". Dependencies include prior creation of both the project and group. The resource outputs permission settings for the specified group at the project-wide query level. Only group principals are supported; single users are not allowed.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/workitemquery_permissions.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_workitemquery_permissions\" \"project-wiq-root-permissions\" {\n  project_id = azuredevops_project.example.id\n  principal  = data.azuredevops_group.example-readers.id\n  permissions = {\n    CreateRepository = \"Deny\"\n    DeleteRepository = \"Deny\"\n    RenameRepository = \"NotSet\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation Reference for Go Plugin Interface\nDESCRIPTION: Code reference showing the basic Go interface implementation pattern mentioned in the documentation. This represents what plugin authors need to implement.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nplugin.Serve()\n```\n\n----------------------------------------\n\nTITLE: Defining Yamux Flag Field Values\nDESCRIPTION: Enumerates and explains the supported flags in Yamux, including SYN, ACK, FIN, and RST, used to provide additional information for messages.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/yamux/spec.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* 0x1 SYN - Signals the start of a new stream. May be sent with a data or\n  window update message. Also sent with a ping to indicate outbound.\n\n* 0x2 ACK - Acknowledges the start of a new stream. May be sent with a data\n  or window update message. Also sent with a ping to indicate response.\n\n* 0x4 FIN - Performs a half-close of a stream. May be sent with a data\n  message or window update.\n\n* 0x8 RST - Reset a stream immediately. May be sent with a data or\n  window update message.\n```\n\n----------------------------------------\n\nTITLE: Setting Unix Socket Group Permissions Environment Variable\nDESCRIPTION: Shows how to set group write permissions and custom group name or gid owner for Unix sockets using an environment variable. This enables fine-grained control over socket permissions.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-plugin/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPLUGIN_UNIX_SOCKET_GROUP\n```\n\n----------------------------------------\n\nTITLE: Example Azure Identity Error Response\nDESCRIPTION: Shows an example of a ClientSecretCredential authentication failure response from Microsoft Entra ID, including error codes and correlation IDs for troubleshooting.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"AADSTS7000215: Invalid client secret provided. Ensure the secret being sent in the request is the client secret value, not the client secret ID, for a secret added to app '86be4c01-505b-45e9-bfc0-9b825fd84'.\\r\\nTrace ID: 03da4b8e-5ffe-48ca-9754-aff4276f0100\\r\\nCorrelation ID: 7b12f9bb-2eef-42e3-ad75-eee69ec9088d\\r\\nTimestamp: 2022-03-02 18:25:26Z\",\n  \"error_codes\": [\n    7000215\n  ],\n  \"timestamp\": \"2022-03-02 18:25:26Z\",\n  \"trace_id\": \"03da4b8e-5ffe-48ca-9754-aff4276f0100\",\n  \"correlation_id\": \"7b12f9bb-2eef-42e3-ad75-eee69ec9088d\",\n  \"error_uri\": \"https://login.microsoftonline.com/error?code=7000215\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CallErr in HTTP Request Handler in Go\nDESCRIPTION: Shows how to create and return a CallErr in an HTTP request handler. This includes the request, response, and a formatted error message with details about the HTTP call.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nreturn nil, errors.CallErr{\n    Req:  req,\n    Resp: reply,\n    Err:  fmt.Errorf(\"http call(%s)(%s) error: reply status code was %d:\\n%s\", req.URL.String(), req.Method, reply.StatusCode, ErrorResponse), //ErrorResponse is the json body extracted from the http response\n    }\n```\n\n----------------------------------------\n\nTITLE: Go Import Reference\nDESCRIPTION: Reference to the Go plugin standard library import used for dynamic library loading.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-plugin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngolang.org/pkg/plugin/\n```\n\n----------------------------------------\n\nTITLE: Disabling Checkpoint in Packer using Environment Variable\nDESCRIPTION: This snippet demonstrates how to disable Checkpoint calls in Packer using the CHECKPOINT_DISABLE environment variable. Setting this variable to 1 prevents Packer from making remote calls to the Checkpoint service during execution.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-checkpoint/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCHECKPOINT_DISABLE=1 packer build\n```\n\n----------------------------------------\n\nTITLE: Running the Website Scaffolder for Terraform Azure DevOps Provider in Go\nDESCRIPTION: Example command for running the website scaffolder utility to generate documentation for an Azure DevOps agent pool resource. The command specifies the resource name, brand name, type, resource ID, and target website path.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/azuredevops/internal/website-scaffold/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n$ go run main.go -name azuredevops_agent_pool -brand-name \"Agent Pool\" -type \"resource\" -resource-id \"00000000-0000-0000-0000-000000000000\" -website-path ../../../../website/\n```\n\n----------------------------------------\n\nTITLE: Implementing Level-Based Logging with Logutils in Go\nDESCRIPTION: Demonstrates how to set up and use logutils to implement level-based logging in a Go application. The example shows configuration of log levels (DEBUG, WARN, ERROR), setting a minimum log level (WARN), and writing logs to standard error. Messages without levels continue to print normally.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/logutils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/hashicorp/logutils\"\n)\n\nfunc main() {\n\tfilter := &logutils.LevelFilter{\n\t\tLevels: []logutils.LogLevel{\"DEBUG\", \"WARN\", \"ERROR\"},\n\t\tMinLevel: logutils.LogLevel(\"WARN\"),\n\t\tWriter: os.Stderr,\n\t}\n\tlog.SetOutput(filter)\n\n\tlog.Print(\"[DEBUG] Debugging\") // this will not print\n\tlog.Print(\"[WARN] Warning\") // this will\n\tlog.Print(\"[ERROR] Erring\") // and so will this\n\tlog.Print(\"Message I haven't updated\") // and so will this\n}\n```\n\n----------------------------------------\n\nTITLE: Import Azure DevOps Repository Policy Command\nDESCRIPTION: Shell command demonstrating how to import an existing Azure DevOps repository policy into Terraform state using project ID and policy configuration ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_author_email_pattern.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_repository_policy_author_email_pattern.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Setting ARM Cross-Tenant Authentication in Go\nDESCRIPTION: Demonstrates how to enable ARM cross-tenant authentication by setting the AuxiliaryTenants field of arm.ClientOptions.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\noptions := arm.ClientOptions{\n    AuxiliaryTenants: []string{\"tenant1\", \"tenant2\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Checkmarx SAST Service Endpoint in Azure DevOps with Terraform\nDESCRIPTION: Example Terraform configuration for creating a Checkmarx SAST service endpoint in Azure DevOps. Creates a project and configures a service endpoint with required credentials and settings.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_checkmarx_sast.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_checkmarx_sast\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Checkmarx SAST\"\n  server_url            = \"https://server.com\"\n  username              = \"username\"\n  password              = \"password\"\n  team                  = \"team\"\n  preset                = \"preset\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Provider Locally\nDESCRIPTION: Command to execute the local-install script which installs the provider into a location discoverable by Terraform.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/local-install.sh\n[INFO] Installing provider to /home/$USER/.terraform.d/plugins/\n```\n\n----------------------------------------\n\nTITLE: Setting gRPC Broker Multiplexing Environment Variable\nDESCRIPTION: Illustrates the environment variable used to indicate support for gRPC broker multiplexing in plugins written in other languages. This allows for more efficient use of connections.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-plugin/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nPLUGIN_MULTIPLEX_GRPC\n```\n\n----------------------------------------\n\nTITLE: Getting the AppEngine Package with Go\nDESCRIPTION: Command to download the Google AppEngine package using Go's package manager. This is the first step in setting up the development environment.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -d google.golang.org/appengine\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Case Enforcement Policy in Azure DevOps with Terraform\nDESCRIPTION: Creates a project-wide case enforcement policy that applies to all repositories within the project. The policy blocks pushes that change name casing on files, folders, branches, and tags.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_case_enforcement.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_repository_policy_case_enforcement\" \"example\" {\n  project_id              = azuredevops_project.example.id\n  enabled                 = true\n  blocking                = true\n  enforce_consistent_case = true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing both HCL 1 and HCL 2 using semantic import versioning\nDESCRIPTION: Example showing how to import both versions of HCL into a single Go program using Go's semantic import versioning mechanism.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    hcl1 \"github.com/hashicorp/hcl\"\n    hcl2 \"github.com/hashicorp/hcl/v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Package in Go\nDESCRIPTION: Basic import statement to include gRPC package in Go code. This import allows automatic fetching of dependencies when building or running the code.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Project Features\nDESCRIPTION: Command example for importing existing Azure DevOps project features into Terraform state using the project ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project_features.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_project_features.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Modules for Alternative gRPC Source\nDESCRIPTION: Shell commands to set up Go module replacement for accessing gRPC when google.golang.org is inaccessible. Uses github.com as an alternative source.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps External TFS Service Endpoint in Terraform\nDESCRIPTION: Example of creating an External TFS service endpoint resource in Azure DevOps using Terraform. Shows configuration of project settings and authentication using personal access token.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_externaltfs.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_externaltfs\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example External TFS Name\"\n  connection_url        = \"https://dev.azure.com/myorganization\"\n  description           = \"Managed by Terraform\"\n\n  auth_personal {\n    # Also can be set with AZDO_PERSONAL_ACCESS_TOKEN environment variable\n    personal_access_token = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package for Go\nDESCRIPTION: This command installs the uuid package from GitHub using the go get command. It adds the package to your Go project's dependencies.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/google/uuid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Installing msgpack Go package using go get\nDESCRIPTION: Command to install the vmihailenco/msgpack package using go get. This step is required before using the library in your Go project.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/vmihailenco/msgpack/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/vmihailenco/msgpack\n```\n\n----------------------------------------\n\nTITLE: Defining State Machine Function Type in Go\nDESCRIPTION: Defines the core state machine function type used for processing JSON data streams. Based on Rob Pike's lexer/parser pattern, this type represents state transitions in the marshaling/unmarshaling process.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/internal/json/design.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype stateFn func() (stateFn, error)\n```\n\n----------------------------------------\n\nTITLE: Importing Feed Retention Policy in Azure DevOps using Terraform\nDESCRIPTION: Examples of import commands for existing feed retention policies, showing both project-level and organization-level import syntax.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/feed_retention_policy.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform import azuredevops_feed_retention_policy.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Expression Terms in EBNF\nDESCRIPTION: EBNF grammar rules for HCL expression terms, including various value types and operations.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_4\n\nLANGUAGE: ebnf\nCODE:\n```\nExprTerm = (\n    LiteralValue |\n    CollectionValue |\n    TemplateExpr |\n    VariableExpr |\n    FunctionCall |\n    ForExpr |\n    ExprTerm Index |\n    ExprTerm GetAttr |\n    ExprTerm Splat |\n    \"(\" Expression \")\"\n);\n```\n\n----------------------------------------\n\nTITLE: Installing JWT-Go Library in Go\nDESCRIPTION: Command to install the jwt-go package as a dependency in a Go program using go get.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/golang-jwt/jwt/v5\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment Using GOPATH\nDESCRIPTION: Shell commands for setting up the development environment using GOPATH model, including cloning the repository and installing dependencies.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir -p $GOPATH/src/github.com/terraform-providers && cd \"$_\"\n$ git clone git@github.com:microsoft/terraform-provider-azuredevops.git\n$ cd terraform-provider-azuredevops\n```\n\n----------------------------------------\n\nTITLE: Installing tagparser Go Package via Command Line\nDESCRIPTION: Command to install the tagparser package using Go's package manager. This installs version 2 of the package from GitHub.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/vmihailenco/tagparser/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/vmihailenco/tagparser/v2\n```\n\n----------------------------------------\n\nTITLE: Installing Mapstructure Go Library\nDESCRIPTION: Command to install the mapstructure library using Go's package manager. This allows you to include the library in your Go projects for decoding map values to structures.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Creating a User Entitlement in Azure DevOps using Terraform HCL\nDESCRIPTION: This snippet demonstrates how to create a user entitlement in Azure DevOps using the azuredevops_user_entitlement resource in Terraform. It sets the principal_name attribute to an email address.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/user_entitlement.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"azuredevops_user_entitlement\" \"example\" {\n  principal_name = \"foo@contoso.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Project Tags using Terraform\nDESCRIPTION: Command for importing existing Azure DevOps project tags into Terraform state using the project ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/project_tags.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_project_tags.example 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Operator Syntax in HCL using EBNF\nDESCRIPTION: Defines the syntax for the conditional operator in HCL using Extended Backus-Naur Form (EBNF). This operator allows selecting from one of two expressions based on a boolean expression.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_19\n\nLANGUAGE: ebnf\nCODE:\n```\nConditional = Expression \"?\" Expression \":\" Expression;\n```\n\n----------------------------------------\n\nTITLE: Updated Claims Interface Implementation in Go\nDESCRIPTION: Shows the new Claims interface structure that replaces the previous Valid() error implementation. The interface now provides getter methods for retrieving specific claim values.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Claims interface {\n\tGetExpirationTime() (*NumericDate, error)\n\tGetIssuedAt() (*NumericDate, error)\n\tGetNotBefore() (*NumericDate, error)\n\tGetIssuer() (string, error)\n\tGetSubject() (string, error)\n\tGetAudience() (ClaimStrings, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Module with Go\nDESCRIPTION: This command installs the Azure Identity module using Go's package manager.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: OpenFile function for opening files in browser\nDESCRIPTION: Function to open a new browser window for the specified file path. Takes a path string as input and returns an error if the operation fails.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenFile(path string) error\n```\n\n----------------------------------------\n\nTITLE: Installing go-version Library with Go Get\nDESCRIPTION: Command to install the go-version library using the Go package manager.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/hashicorp/go-version\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps User Identity - Account Name Filter\nDESCRIPTION: Example showing how to query a user using their account name as the search filter.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/identity_user.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_identity_user\" \"contoso-user-upn\" {\n  name          = \"contoso-user@contoso.onmicrosoft.com\"\n  search_filter = \"AccountName\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Template Expressions in HCL\nDESCRIPTION: EBNF grammar for quoted and heredoc template expressions in HCL. Includes syntax for both single-line quoted templates and multi-line heredoc templates.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_7\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateExpr = quotedTemplate | heredocTemplate;\nquotedTemplate = (as defined in prose above);\nheredocTemplate = (\n    (\"<<\" | \"<<-\") Identifier Newline\n    (content as defined in prose above)\n    Identifier Newline\n);\n```\n\n----------------------------------------\n\nTITLE: Generic LINQ Query in Go\nDESCRIPTION: Simplified version of the car query using generic functions (WhereT and SelectT) to avoid type assertions.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/ahmetb/go-linq/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nFrom(cars).WhereT(func(c Car) bool {\n\treturn c.year >= 2015\n}).SelectT(func(c Car) string {\n\treturn c.owner\n}).ToSlice(&owners)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Workspace\nDESCRIPTION: Commands to create and navigate to a development workspace directory where the Azure DevOps Terraform provider code will be cloned.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ DEV_ROOT=\"$HOME/workspace\"\n$ mkdir -p \"$DEV_ROOT\"\n$ cd \"$DEV_ROOT\"\n```\n\n----------------------------------------\n\nTITLE: Go Package Dependencies Declaration\nDESCRIPTION: Explicit declaration of Go package dependencies including x/tools, Google AppEngine, gRPC, Protobuf, and YAML libraries. Each package includes version information and sub-package imports.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/modules.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n## explicit; go 1.19\ngolang.org/x/tools/cmd/stringer\ngolang.org/x/tools/go/gcexportdata\ngolang.org/x/tools/go/internal/packagesdriver\ngolang.org/x/tools/go/packages\ngolang.org/x/tools/go/types/objectpath\n# google.golang.org/appengine v1.6.8\n## explicit; go 1.11\ngoogle.golang.org/appengine\ngoogle.golang.org/appengine/datastore\n# google.golang.org/grpc v1.69.4\n## explicit; go 1.22\ngoogle.golang.org/grpc\n# google.golang.org/protobuf v1.36.3\n## explicit; go 1.21\ngoogle.golang.org/protobuf/encoding/protojson\n# gopkg.in/yaml.v3 v3.0.1\n## explicit\ngopkg.in/yaml.v3\n```\n\n----------------------------------------\n\nTITLE: Declaring Azure DevOps Project and Octopus Deploy Service Endpoint using Terraform HCL\nDESCRIPTION: This HCL snippet demonstrates how to define an Azure DevOps project and an associated Octopus Deploy service endpoint resource using the Terraform Azure DevOps Provider. It requires the provider to be installed and assumes valid credentials for Azure DevOps and Octopus Deploy. Key parameters include project details such as name, visibility, and version control type, as well as Octopus-specific endpoint details like URL, API key, and endpoint name. Expected inputs are resource attributes, and the output is the creation of both Terraform-managed resources.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_octopusdeploy.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_octopusdeploy\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  url                   = \"https://octopus.com\"\n  api_key               = \"000000000000000000000000000000000000\"\n  service_endpoint_name = \"Example Octopus Deploy\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Compiled Provider Binary\nDESCRIPTION: Command to list the compiled Terraform provider binary in the bin directory, showing the output of successful build.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -lah ./bin/\n...\n-rwxrwxrwx 1 ... terraform-provider-azuredevops_v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Literal Values in EBNF\nDESCRIPTION: EBNF grammar specification for HCL literal values, including numeric literals, booleans, and null.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_5\n\nLANGUAGE: ebnf\nCODE:\n```\nLiteralValue = (\n  NumericLit |\n  \"true\" |\n  \"false\" |\n  \"null\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating JFrog XRay V2 Service Endpoint with Basic Authentication in Azure DevOps\nDESCRIPTION: This snippet shows how to create a JFrog XRay V2 service endpoint using basic authentication with username and password. It includes creating a project and the service endpoint with necessary configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jfrog_xray_v2.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_jfrog_xray_v2\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Artifactory\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_basic {\n    username = \"username\"\n    password = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Name Declaration - Plaintext\nDESCRIPTION: Simple text file containing the repository name 'azuredevops' used for repository configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/PROVIDER_NAME.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nazuredevops\n```\n\n----------------------------------------\n\nTITLE: Setting Unix Socket Directory Environment Variable\nDESCRIPTION: Demonstrates how to set the directory for creating Unix sockets using an environment variable. This allows customization of the socket location for plugin communication.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-plugin/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPLUGIN_UNIX_SOCKET_DIR\n```\n\n----------------------------------------\n\nTITLE: Defining Stderr variable in browser package\nDESCRIPTION: Declaration of Stderr as an io.Writer to which executed commands write standard error, defaulting to os.Stderr.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar Stderr io.Writer = os.Stderr\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML Data in Go\nDESCRIPTION: This example demonstrates how to use the yaml.v3 package to unmarshal YAML data into both a typed struct and an untyped map, and then marshal those objects back to YAML. It shows struct tag usage for customizing field names and formatting.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/gopkg.in/yaml.v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pretty Print Logging in Go for Azure DevOps API\nDESCRIPTION: This Go code snippet demonstrates how to add logging using the tfhelpers.PrettyPrint method to display trace information during Terraform execution, including passed and response objects from the Azure DevOps API.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntfhelper.PrettyPrint(createdVariableGroup)\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps JFrog Artifactory V2 Service Endpoint Using Terraform CLI (Shell)\nDESCRIPTION: This shell command demonstrates how to import an existing azuredevops_serviceendpoint_jfrog_artifactory_v2 resource into Terraform state using terraform import. The project ID and service endpoint ID must be specified in the required format, separated by a slash. It is assumed that Terraform and the Azure DevOps provider are installed, along with necessary permissions to access the resources. No output is returned by the command, but it updates the state file.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jfrog_artifactory_v2.html.markdown#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_jfrog_artifactory_v2.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n\n```\n\n----------------------------------------\n\nTITLE: OpenReader function for displaying content in browser\nDESCRIPTION: Function that consumes the contents of an io.Reader and presents the results in a new browser window. Returns an error if the operation fails.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/pkg/browser/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenReader(r io.Reader) error\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Logging in Go\nDESCRIPTION: Example showing how to set up logging for Azure SDK authentication events. Demonstrates configuring log output to stdout and filtering for specific azidentity credential logs using the azcore/log package.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Container Registry Service Endpoint Data in HCL\nDESCRIPTION: This snippet demonstrates how to use the azuredevops_serviceendpoint_azurecr data source to retrieve information about an existing Azure Container Registry Service Endpoint. It shows the basic structure and how to output the service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/serviceendpoint_azurecr.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_serviceendpoint_azurecr\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example Azure Container Registry\"\n}\n\noutput \"service_endpoint_id\" {\n  value = data.azuredevops_serviceendpoint_azurecr.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Output in Go Using Command-Line Flags\nDESCRIPTION: Shows how to programmatically disable color output using a command-line flag.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar flagNoColor = flag.Bool(\"no-color\", false, \"Disable color output\")\n\nif *flagNoColor {\n\tcolor.NoColor = true // disables colorized output\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints in Go\nDESCRIPTION: Example showing how to create and use version constraints to check if a version satisfies specific requirements. The code creates a version constraint with a range and verifies if a version meets those constraints.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\n\n// Constraints example.\nconstraints, err := version.NewConstraint(\">= 1.0, < 1.4\")\nif constraints.Check(v1) {\n\tfmt.Printf(\"%s satisfies constraints %s\", v1, constraints)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Service Fabric Endpoint with Azure Active Directory Authentication in HCL\nDESCRIPTION: This snippet shows how to create a Service Fabric service endpoint using Azure Active Directory authentication. It includes project creation and endpoint configuration with AAD credentials.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_servicefabric.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"project\" {\n  name               = \"Sample Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n}\n\nresource \"azuredevops_serviceendpoint_servicefabric\" \"test\" {\n  project_id            = azuredevops_project.project.id\n  service_endpoint_name = \"Sample Service Fabric\"\n  description           = \"Managed by Terraform\"\n  cluster_endpoint      = \"tcp://test\"\n\n  azure_active_directory {\n    server_certificate_lookup     = \"Thumbprint\"\n    server_certificate_thumbprint = \"0000000000000000000000000000000000000000\"\n    username                      = \"username\"\n    password                      = \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pipeline Creation in Go for Azure SDK\nDESCRIPTION: Changes to the NewPipeline function in the Azure SDK for Go, moving policy parameters into a new PipelineOptions struct. Also renames the Host field to Endpoint in ClientOptions.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nruntime.NewPipeline(options runtime.PipelineOptions)\n```\n\n----------------------------------------\n\nTITLE: Parsing and Comparing Versions in Go\nDESCRIPTION: Example demonstrating how to create Version objects and compare them using the LessThan method. The code shows version parsing with and without metadata and demonstrates the comparison functionality.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\nv2, err := version.NewVersion(\"1.5+metadata\")\n\n// Comparison example. There is also GreaterThan, Equal, and just\n// a simple Compare that returns an int allowing easy >=, <=, etc.\nif v1.LessThan(v2) {\n    fmt.Printf(\"%s is less than %s\", v1, v2)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Go Environment Variables for Go 1.13+\nDESCRIPTION: Commands to set Go environment variables to fix module verification issues in Go 1.13 and above. These commands disable the Go checksum database and set the proxy to direct connections.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo env -w GOPROXY=direct\ngo env -w GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Retry Logic in Go\nDESCRIPTION: Shows how to use the ShouldRetry field in policy.RetryOptions for custom control over retry behavior.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\noptions := policy.RetryOptions{\n    ShouldRetry: func(req *http.Request, resp *http.Response, err error) (bool, time.Duration) {\n        // Custom retry logic here\n        return false, 0\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Running CI Checks for Azure DevOps Terraform Provider\nDESCRIPTION: This bash command runs all CI checks except for acceptance tests. It uses the make command to execute the ci target.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ make ci\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom 'with' Function with Expression Closure in Go\nDESCRIPTION: Implementation of a function that captures an expression along with its evaluation context, allowing for deferred evaluation with additional variables. This demonstrates using ExpressionClosureType for advanced HCL expression handling.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/ext/customdecode/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar WithFunc = function.New(&function.Spec{\n    Params: []function.Parameter{\n        {\n            Name: \"variables\",\n            Type: cty.DynamicPseudoType,\n        },\n        {\n            Name: \"expression\",\n            Type: customdecode.ExpressionClosureType,\n        },\n    },\n    Type: func(args []cty.Value) (cty.Type, error) {\n        varsVal := args[0]\n        exprVal := args[1]\n        if !varsVal.Type().IsObjectType() {\n            return cty.NilVal, function.NewArgErrorf(0, \"must be an object defining local variables\")\n        }\n        if !varsVal.IsKnown() {\n            // We can't predict our result type until the variables object\n            // is known.\n            return cty.DynamicPseudoType, nil\n        }\n        vars := varsVal.AsValueMap()\n        closure := customdecode.ExpressionClosureFromVal(exprVal)\n        result, err := evalWithLocals(vars, closure)\n        if err != nil {\n            return cty.NilVal, err\n        }\n        return result.Type(), nil\n    },\n    Impl: func(args []cty.Value, retType cty.Type) (cty.Value, error) {\n        varsVal := args[0]\n        exprVal := args[1]\n        vars := varsVal.AsValueMap()\n        closure := customdecode.ExpressionClosureFromVal(exprVal)\n        return evalWithLocals(vars, closure)\n    },\n})\n\nfunc evalWithLocals(locals map[string]cty.Value, closure *customdecode.ExpressionClosure) (cty.Value, error) {\n    childCtx := closure.EvalContext.NewChild()\n    childCtx.Variables = locals\n    val, diags := closure.Expression.Value(childCtx)\n    if diags.HasErrors() {\n        return cty.NilVal, function.NewArgErrorf(1, \"couldn't evaluate expression: %s\", diags.Error())\n    }\n    return val, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Azure DevOps Terraform Provider\nDESCRIPTION: This bash command executes the unit tests for the Azure DevOps Terraform Provider. It uses a script located in the scripts directory.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/unittest.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository-Level Credentials Check Policy in Azure DevOps with Terraform\nDESCRIPTION: Creates an Azure DevOps project with a Git repository and configures a repository-specific credentials check policy. The policy blocks pushes that introduce files, folders, or branch names with reserved names or incompatible characters.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/repository_policy_check_credentials.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_git_repository\" \"example\" {\n  project_id = azuredevops_project.example.id\n  name       = \"Example Repository\"\n  initialization {\n    init_type = \"Clean\"\n  }\n}\n\nresource \"azuredevops_repository_policy_check_credentials\" \"example\" {\n  project_id     = azuredevops_project.example.id\n  enabled        = true\n  blocking       = true\n  repository_ids = [azuredevops_git_repository.example.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Error List with Type Assertion in Go\nDESCRIPTION: Demonstrates how to use type switches to access the list of errors when a multierror might be returned.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Repository Structure for Azure DevOps Terraform Provider\nDESCRIPTION: Shows the high-level directory structure of the Azure DevOps Terraform provider repository using the tree command.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/contributing.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ tree -L 2\n.\n├── azdosdkmocks --------> Generated mocks for AzDO Go SDK\n├── azuredevops ---------> Provider implementation\n│   ├── config.go -------> AzDO SDK initialization lives here\n│   ├── provider.go -----> Exports the AzDO terraform provider\n│   ├── data_*.go -------> data_*.go files contain terraform data sources implementations\n│   ├── resource_*.go ---> resource_*.go files contain terraform resource implementations\n│   └── utils -----------> Utilities used across the codebase\n├── docs ----------------> Developer documentation\n├── go.mod --------------> Describes project dependencies\n├── scripts -------------> All scripts live here\n└── website -------------> Client facing documentation\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Print Functions with Go Color Package\nDESCRIPTION: Shows how to create custom print functions for convenience and mix multiple attributes.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Create a custom print function for convenience\nred := color.New(color.FgRed).PrintfFunc()\nred(\"Warning\")\nred(\"Error: %s\", err)\n\n// Mix up multiple attributes\nnotice := color.New(color.Bold, color.FgGreen).PrintlnFunc()\nnotice(\"Don't forget this...\")\n```\n\n----------------------------------------\n\nTITLE: Querying AzureRM Service Endpoint by Name in Terraform\nDESCRIPTION: This snippet shows how to use the azuredevops_serviceendpoint_azurerm data source to retrieve information about an AzureRM service endpoint using its name. It also demonstrates how to output the service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/serviceendpoint_azurerm.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"azuredevops_project\" \"sample\" {\n  name = \"Sample Project\"\n}\n\ndata \"azuredevops_serviceendpoint_azurerm\" \"serviceendpoint\" {\n  project_id            = data.azuredevops_project.sample.id\n  service_endpoint_name = \"Example-Service-Endpoint\"\n}\n\noutput \"service_endpoint_id\" {\n  value = data.azuredevops_serviceendpoint_azurerm.serviceendpoint.id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure DevOps Project and Generic Git Service Endpoint\nDESCRIPTION: This snippet demonstrates how to create an Azure DevOps project and a Generic Git service endpoint using Terraform. It sets up a private project with Git version control and creates a service endpoint for an external Git repository.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_generic_git.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_generic_git\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  repository_url        = \"https://dev.azure.com/org/project/_git/repository\"\n  username              = \"username\"\n  password              = \"password\"\n  service_endpoint_name = \"Example Generic Git\"\n  description           = \"Managed by Terraform\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Output Streams in Go Color Package\nDESCRIPTION: Demonstrates how to use custom io.Writer outputs with the color package.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Use your own io.Writer output\ncolor.New(color.FgBlue).Fprintln(myWriter, \"blue color!\")\n\nblue := color.New(color.FgBlue)\nblue.Fprint(writer, \"This will print text in blue.\")\n```\n\n----------------------------------------\n\nTITLE: Querying Bitbucket Service Endpoint by Name in Terraform HCL\nDESCRIPTION: Example of retrieving a Bitbucket service endpoint using its name. This snippet shows how to access project information and query a specific service endpoint using its name instead of ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/serviceendpoint_bitbucket.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_project\" \"example\" {\n  name = \"Example Project\"\n}\n\ndata \"azuredevops_serviceendpoint_bitbucket\" \"example\" {\n  project_id            = data.azuredevops_project.example.id\n  service_endpoint_name = \"Example\"\n}\n\noutput \"service_endpoint_id\" {\n  value = data.azuredevops_serviceendpoint_bitbucket.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing and Reusing Colors in Go\nDESCRIPTION: Shows how to create custom color objects, combine colors, and apply multiple attributes.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create a new color object\nc := color.New(color.FgCyan).Add(color.Underline)\nc.Println(\"Prints cyan text with an underline.\")\n\n// Or just add them to New()\nd := color.New(color.FgCyan, color.Bold)\nd.Printf(\"This prints bold cyan %s\\n\", \"too!.\")\n\n// Mix up foreground and background colors, create new mixes!\nred := color.New(color.FgRed)\n\nboldRed := red.Add(color.Bold)\nboldRed.Println(\"This will print text in bold red.\")\n\nwhiteBackground := red.Add(color.BgWhite)\nwhiteBackground.Println(\"Red text with white background.\")\n```\n\n----------------------------------------\n\nTITLE: Querying Azure DevOps User Identity - Basic Usage\nDESCRIPTION: Example showing how to load a single user using their principal name in Terraform configuration.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/d/identity_user.html.markdown#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"azuredevops_identity_user\" \"contoso-user\" {\n  name = \"contoso-user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Namespace-less Provider Address in Go\nDESCRIPTION: Demonstrates parsing an ambiguous namespace-less provider address format used in Terraform v0.12, resulting in an unknown namespace placeholder.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npAddr, err := ParseProviderSource(\"aws\")\nif err != nil {\n\t// deal with error\n}\n\n// pAddr == Provider{\n//   Type:      \"aws\",\n//   Namespace: UnknownProviderNamespace,    // \"?\"\n//   Hostname:  DefaultProviderRegistryHost, // \"registry.terraform.io\"\n// }\npAddr.HasKnownNamespace() // == false\npAddr.IsLegacy() // == false\n```\n\n----------------------------------------\n\nTITLE: Mock Generation Script\nDESCRIPTION: Bash command for generating mocks for Azure DevOps SDK clients using GoMock.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./scripts/generate-mocks.sh\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Provider with Direct OIDC Token\nDESCRIPTION: Terraform configuration for Azure DevOps provider using direct OIDC token string.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_service_principal_using_an_oidc_token.html.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    azuredevops = {\n      source  = \"microsoft/azuredevops\"\n      version = \">=1.0.1\"\n    }\n  }\n}\n\nprovider \"azuredevops\" {\n  org_service_url = \"https://dev.azure.com/my-org\"\n  client_id  = \"00000000-0000-0000-0000-000000000001\"\n  tenant_id  = \"00000000-0000-0000-0000-000000000001\"\n  oidc_token = \"top-secret-base64-encoded-oidc-token-string\"\n  use_oidc   = true\n}\n\nresource \"azuredevops_project\" \"project\" {\n  name        = \"Test Project\"\n  description = \"Test Project Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Module Source Address in Go\nDESCRIPTION: Shows how to parse a module source address with the ParseModuleSource function. This example demonstrates parsing a module address with submodule path.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/terraform-registry-address/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmAddr, err := ParseModuleSource(\"hashicorp/consul/aws//modules/consul-cluster\")\nif err != nil {\n\t// deal with error\n}\n\n// mAddr == Module{\n//   Package: ModulePackage{\n//     Host:         DefaultProviderRegistryHost,\n//     Namespace:    \"hashicorp\",\n//     Name:         \"consul\",\n//     TargetSystem: \"aws\",\n//   },\n//   Subdir: \"modules/consul-cluster\",\n// },\n```\n\n----------------------------------------\n\nTITLE: Importing and Defining a Test Helper Function in Go\nDESCRIPTION: Shows how to import the go-testing-interface package and define a test helper function that accepts the testing.T interface parameter. This allows the helper to be used in both test and runtime contexts.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mitchellh/go-testing-interface/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/mitchellh/go-testing-interface\"\n\nfunc TestHelper(t testing.T) {\n    t.Fatal(\"I failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: hc-install CLI Output Example\nDESCRIPTION: Example output from the hc-install CLI when installing Terraform, showing the installation progress and destination.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hc-install/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhc-install: will install terraform@1.3.7\ninstalled terraform@1.3.7 to /current/working/dir/terraform\n```\n\n----------------------------------------\n\nTITLE: Basic LINQ Query with Type Assertions in Go\nDESCRIPTION: Example showing how to query a collection of cars to find owners of vehicles manufactured after 2015 using type assertions.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/ahmetb/go-linq/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nFrom(cars).Where(func(c interface{}) bool {\n\treturn c.(Car).year >= 2015\n}).Select(func(c interface{}) interface{} {\n\treturn c.(Car).owner\n}).ToSlice(&owners)\n```\n\n----------------------------------------\n\nTITLE: Output of WrapString function\nDESCRIPTION: Example output from the WrapString function demonstrating how the input string \"foo bar baz\" is wrapped to fit within 3 characters per line, resulting in each word appearing on its own line.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mitchellh/go-wordwrap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfoo\nbar\nbaz\n```\n\n----------------------------------------\n\nTITLE: Installing copystructure Go Library with go get\nDESCRIPTION: Command to install the copystructure library using the standard Go package manager. This allows developers to add the deep copying functionality to their Go projects.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/mitchellh/copystructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Responses in Go\nDESCRIPTION: Demonstrates how to enable capturing of HTTP responses using runtime.WithCaptureResponse.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nresp, err := client.Do(req, runtime.WithCaptureResponse(&httpResponse))\n```\n\n----------------------------------------\n\nTITLE: Setting gRPC Logging Environment Variables\nDESCRIPTION: Console commands to enable verbose logging in gRPC-Go by setting environment variables for log verbosity and severity levels.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99\n$ export GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Using Errwrap with Custom Error Types in Go\nDESCRIPTION: This snippet demonstrates how to use errwrap functions with custom error types that implement the Wrapper interface. It shows how to use ContainsType with a custom AppError.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JWT-Go Library in Go\nDESCRIPTION: Go import statement to include the jwt-go library in Go code.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang-jwt/jwt/v5\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions OIDC Permissions\nDESCRIPTION: YAML configuration to enable OIDC token writing permissions in GitHub Actions workflows.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/guides/authenticating_service_principal_using_an_oidc_token.html.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n  id-token: write\n```\n\n----------------------------------------\n\nTITLE: Changing to the AppEngine Directory\nDESCRIPTION: Command to navigate to the Google AppEngine package directory within your Go workspace after downloading the package.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/google.golang.org/appengine/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/google.golang.org/appengine\n```\n\n----------------------------------------\n\nTITLE: Defining Template If Directive Syntax in HCL using EBNF\nDESCRIPTION: Defines the syntax for the template 'if' directive in HCL using Extended Backus-Naur Form (EBNF). This directive allows selection of one of two sub-templates based on a predicate expression.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_22\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateIf = (\n    (\"%{\" | \"%{~\") \"if\" Expression (\"}\" | \"~}\")\n    Template\n    (\n        (\"%{\" | \"%{~\") \"else\" (\"}\" | \"~}\")\n        Template\n    )?\n    (\"%{\" | \"%{~\") \"endif\" (\"}\" | \"~}\")\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Azure Service Bus Service Endpoint Configuration\nDESCRIPTION: Command for importing an existing Azure Service Bus service endpoint into Terraform state using project ID and service endpoint ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_azure_service_bus.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_serviceendpoint_azure_service_bus.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Importing Azure DevOps Environment Resource\nDESCRIPTION: Command for importing an existing Azure DevOps Environment into Terraform state using project ID and environment ID.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/environment.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform import azuredevops_environment.example 00000000-0000-0000-0000-000000000000/0\n```\n\n----------------------------------------\n\nTITLE: Defining Template Interpolation Syntax in HCL using EBNF\nDESCRIPTION: Defines the syntax for template interpolations in HCL using Extended Backus-Naur Form (EBNF). Interpolations evaluate an expression and replace themselves with the resulting string.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_21\n\nLANGUAGE: ebnf\nCODE:\n```\nTemplateInterpolation = (\"${\" | \"${~\") Expression (\"}\" | \"~}\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Comparison Operators in HCL\nDESCRIPTION: Shows the syntax for equality and numeric comparison operators in HCL. These operators produce boolean values by testing the relationship between two values.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\na == b  equal\na != b  not equal\n```\n\nLANGUAGE: hcl\nCODE:\n```\na < b   less than\na <= b  less than or equal to\na > b   greater than\na >= b  greater than or equal to\n```\n\n----------------------------------------\n\nTITLE: Index Operator Syntax in EBNF\nDESCRIPTION: Specifies the grammar for the index operator used to access elements in collections. Includes both standard and legacy index syntax.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_12\n\nLANGUAGE: ebnf\nCODE:\n```\nIndex = \"[\" Expression \"]\";\nLegacyIndex = '.' digit+\n```\n\n----------------------------------------\n\nTITLE: Splat Operator Syntax in EBNF\nDESCRIPTION: Specifies the grammar for splat operators that enable attribute access and indexing across collections.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_14\n\nLANGUAGE: ebnf\nCODE:\n```\nSplat = attrSplat | fullSplat;\nattrSplat = \".\" \"*\" GetAttr*;\nfullSplat = \"[\" \"*\" \"]\" (GetAttr | Index)*;\n```\n\n----------------------------------------\n\nTITLE: For Expression Syntax in EBNF\nDESCRIPTION: Defines the grammar for HCL for expressions, which can produce either tuple or object values. Includes syntax for iteration variables, conditions, and collection construction.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_11\n\nLANGUAGE: ebnf\nCODE:\n```\nForExpr = forTupleExpr | forObjectExpr;\nforTupleExpr = \"[\" forIntro Expression forCond? \"]\";\nforObjectExpr = \"{\" forIntro Expression \"=>\" Expression \"...\"? forCond? \"}\";\nforIntro = \"for\" Identifier (\",\" Identifier)? \"in\" Expression \":\";\nforCond = \"if\" Expression;\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Expressions in HCL\nDESCRIPTION: EBNF grammar for variable expressions in HCL. A variable expression is simply an identifier that corresponds to a defined variable.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/hclsyntax/spec.md#2025-04-23_snippet_9\n\nLANGUAGE: ebnf\nCODE:\n```\nVariableExpr = Identifier;\n```\n\n----------------------------------------\n\nTITLE: Checking for CallErr Type in Go\nDESCRIPTION: Shows how to use the errors.As() function to check if an error is of type CallErr. This allows for specific handling of HTTP call errors.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar callErr CallErr\nif errors.As(err, &callErr) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Yamux Frame Header Structure\nDESCRIPTION: Specifies the structure of the Yamux frame header, including field sizes and descriptions for Version, Type, Flags, StreamID, and Length.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/yamux/spec.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Version (8 bits)\n* Type (8 bits)\n* Flags (16 bits)\n* StreamID (32 bits)\n* Length (32 bits)\n```\n\n----------------------------------------\n\nTITLE: Resource Name Generation in Go Tests\nDESCRIPTION: Example demonstrating how to generate resource names for acceptance tests using the testutils helper function.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/docs/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestAccGitRepo_CreateAndUpdate(t *testing.T) {\n\tprojectName := testutils.GenerateResourceName()\n\tgitRepoNameFirst := testutils.GenerateResourceName()\n\tgitRepoNameSecond := testutils.GenerateResourceName()\n\ttfRepoNode := \"azuredevops_git_repository.repository\"\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ChainedTokenCredential Creation in Go\nDESCRIPTION: Shows the signature change for creating a ChainedTokenCredential, moving from directly passing credential instances to providing them in a slice with an optional configuration parameter.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewChainedTokenCredential(credA, credB)\n\n// after\ncred, err := NewChainedTokenCredential([]azcore.TokenCredential{credA, credB}, nil)\n```\n\n----------------------------------------\n\nTITLE: JSON Expression Examples\nDESCRIPTION: Demonstrates how expressions can be used within JSON strings using interpolation syntax.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/hashicorp/hcl/v2/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sum\": \"${1 + addend}\",\n  \"message\": \"Hello, ${name}!\",\n  \"shouty_message\": \"${upper(message)}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Client Secret Authentication with autorest/adal\nDESCRIPTION: Implements client secret authentication and subscription client initialization using autorest/adal.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.azure.com/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure DevOps Project and JFrog Artifactory V2 Service Endpoint with Basic (Username/Password) Authentication using Terraform (HCL)\nDESCRIPTION: This HCL configuration provides an alternative method for setting up a JFrog Artifactory V2 service endpoint in Azure DevOps, leveraging basic authentication via username and password. It defines an Azure DevOps project and service endpoint, using the authentication_basic block for credentials. Dependencies mirror the token method (Terraform, Azure DevOps provider, JFrog extension), and inputs include project_id, service_endpoint_name, url, username, and password. Outputs include project and service endpoint resource identifiers.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/website/docs/r/serviceendpoint_jfrog_artifactory_v2.html.markdown#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azuredevops_project\" \"example\" {\n  name               = \"Example Project\"\n  visibility         = \"private\"\n  version_control    = \"Git\"\n  work_item_template = \"Agile\"\n  description        = \"Managed by Terraform\"\n}\n\nresource \"azuredevops_serviceendpoint_jfrog_artifactory_v2\" \"example\" {\n  project_id            = azuredevops_project.example.id\n  service_endpoint_name = \"Example JFrog Artifactory V2\"\n  description           = \"Managed by Terraform\"\n  url                   = \"https://artifactory.my.com\"\n  authentication_basic {\n    username = \"username\"\n    password = \"password\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Breaking Changes for Azure Identity Library v1.8.0\nDESCRIPTION: This section details new errors from NewManagedIdentityCredential in certain environments where user-assigned identities are not supported. It lists the affected hosting environments.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/BREAKING_CHANGES.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.8.0\n\n### New errors from `NewManagedIdentityCredential` in some environments\n\n`NewManagedIdentityCredential` now returns an error when `ManagedIdentityCredentialOptions.ID` is set in a hosting environment whose managed identity API doesn't support user-assigned identities. `ManagedIdentityCredential.GetToken()` formerly logged a warning in these cases. Returning an error instead prevents the credential authenticating an unexpected identity. The affected hosting environments are:\n  * Azure Arc\n  * Azure ML (when a resource or object ID is specified; client IDs are supported)\n  * Cloud Shell\n  * Service Fabric\n```\n\n----------------------------------------\n\nTITLE: Custom Claims Implementation with Validation in Go\nDESCRIPTION: Shows how to implement custom claims with additional validation logic using the new ClaimsValidator interface while maintaining standard validation.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// MyCustomClaims includes all registered claims, plus Foo.\ntype MyCustomClaims struct {\n\tFoo string `json:\"foo\"`\n\tjwt.RegisteredClaims\n}\n\n// Validate can be used to execute additional application-specific claims\n// validation.\nfunc (m MyCustomClaims) Validate() error {\n\tif m.Foo != \"bar\" {\n\t\treturn errors.New(\"must be foobar\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Color Package via Go Get\nDESCRIPTION: Command to install the 'color' package using Go's package management system.\nSOURCE: https://github.com/microsoft/terraform-provider-azuredevops/blob/main/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/color\n```"
  }
]