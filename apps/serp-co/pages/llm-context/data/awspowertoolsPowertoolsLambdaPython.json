[
  {
    "owner": "aws-powertools",
    "repo": "powertools-lambda-python",
    "content": "TITLE: Processing SQS FIFO Messages with BatchProcessor\nDESCRIPTION: This Python code demonstrates how to process SQS FIFO messages with the `BatchProcessor`.  It shows how to instantiate the processor and process messages, respecting the ordering within the FIFO queue.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_sqs_fifo.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Processing Kinesis Messages with BatchProcessor\nDESCRIPTION: This Python code demonstrates how to process Kinesis Data Streams messages using the `BatchProcessor` class.  It shows how to initialize the processor with `EventType.KinesisDataStreams`, define a handler for individual records, and use `process_partial_response` to process the batch, incorporating Tracer and Logger for improved observability.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_kinesis.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Verifying Release Provenance\nDESCRIPTION: This is a complete shell script designed to verify the provenance of a release. It automates the process of downloading the SLSA Verifier, attestation file, and release artifact, verifying the SLSA Verifier's integrity, and running the verification process.  It takes the release version as an argument.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/security.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n---\n          ---8<-- \".github/actions/verify-provenance/verify_provenance.sh\"\n          \n```\n\n----------------------------------------\n\nTITLE: Processing S3 EventBridge Notifications with Python Lambda\nDESCRIPTION: Demonstrates handling S3 EventBridge notifications using the S3EventBridgeNotification data model. This integration allows processing S3 events routed through EventBridge with advanced filtering capabilities.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/s3_event_bridge.py\"\n```\n\n----------------------------------------\n\nTITLE: Simplifying Routes with APIGatewayRestResolver\nDESCRIPTION: This code demonstrates using `APIGatewayRestResolver` from Powertools for AWS Lambda (Python) to simplify API Gateway route handling. It uses decorators to map routes to handler functions, enabling direct access to request parameters and simplifying response formatting. The `app.resolve` method handles route resolution, serialization, and validation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools.event_handler import APIGatewayRestResolver\n\napp = APIGatewayRestResolver()\n\n\n@app.get(\"/hello/<name>\")\ndef hello_name(name):\n    return {\"message\": f\"hello {name}!\"}\n\n\n@app.get(\"/hello\")\ndef hello():\n    return {\"message\": \"hello unknown!\"}\n\n\ndef lambda_handler(event, context):\n    return app.resolve(event, context)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Function with Powertools Metrics in Python\nDESCRIPTION: Sample Lambda function that uses Powertools for AWS Lambda (Python) to implement Metrics, Logging, and Tracing. This demonstrates how to reduce boilerplate code when creating custom CloudWatch metrics using EMF format, and includes API Gateway routing.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools import Logger, Tracer, Metrics\nfrom aws_lambda_powertools.event_handler import APIGatewayRestResolver\nfrom aws_lambda_powertools.logging import correlation_paths\nfrom aws_lambda_powertools.metrics import MetricUnit\n\n\nlogger = Logger(service=\"APP\")\ntracer = Tracer(service=\"APP\")\nmetrics = Metrics(namespace=\"MyApp\", service=\"APP\")\napp = APIGatewayRestResolver()\n\n\n@app.get(\"/hello/<name>\")\n@tracer.capture_method\ndef hello_name(name):\n    tracer.put_annotation(key=\"User\", value=name)\n    logger.info(f\"Request from {name} received\")\n    metrics.add_metric(name=\"SuccessfulGreetings\", unit=MetricUnit.Count, value=1)\n    return {\"message\": f\"hello {name}!\"}\n\n\n@app.get(\"/hello\")\n@tracer.capture_method\ndef hello():\n    tracer.put_annotation(key=\"User\", value=\"unknown\")\n    logger.info(\"Request from unknown received\")\n    metrics.add_metric(name=\"SuccessfulGreetings\", unit=MetricUnit.Count, value=1)\n    return {\"message\": \"hello unknown!\"}\n\n\n@tracer.capture_lambda_handler\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST, log_event=True)\n@metrics.log_metrics(capture_cold_start_metric=True)\ndef lambda_handler(event, context):\n    try:\n        return app.resolve(event, context)\n    except Exception as e:\n        logger.exception(e)\n        raise\n```\n\n----------------------------------------\n\nTITLE: Requirements for AWS Lambda Powertools and X-Ray SDK\nDESCRIPTION: This Bash code lists the required dependencies for setting up AWS Lambda Powertools and AWS X-Ray SDK for Python. These libraries must be included in the Lambda deployment package to enable logging and tracing functionalities.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n```bash\naws-lambda-powertools\naws-xray-sdk\n```\n```\n\n----------------------------------------\n\nTITLE: Simplified Tracing with AWS Lambda Powertools\nDESCRIPTION: Refactored version using Powertools Tracer utility that provides the same functionality with less boilerplate code. Includes automatic cold start tracking and service annotations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools import Logger, Tracer\nfrom aws_lambda_powertools.event_handler import APIGatewayRestResolver\nfrom aws_lambda_powertools.logging import correlation_paths\n\nlogger = Logger(service=\"APP\")\ntracer = Tracer(service=\"APP\")\napp = APIGatewayRestResolver()\n\n\n@app.get(\"/hello/<name>\")\n@tracer.capture_method\ndef hello_name(name):\n    tracer.put_annotation(key=\"User\", value=name)\n    logger.info(f\"Request from {name} received\")\n    return {\"message\": f\"hello {name}!\"}\n\n\n@app.get(\"/hello\")\n@tracer.capture_method\ndef hello():\n    tracer.put_annotation(key=\"User\", value=\"unknown\")\n    logger.info(\"Request from unknown received\")\n    return {\"message\": \"hello unknown!\"}\n\n\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST, log_event=True)\n@tracer.capture_lambda_handler\ndef lambda_handler(event, context):\n    return app.resolve(event, context)\n```\n\n----------------------------------------\n\nTITLE: Payment Function with Payload Subset for Idempotency\nDESCRIPTION: This example uses the `event_key_jmespath` parameter in `IdempotencyConfig` to select specific parts of the payload as the idempotency key. This allows you to ignore dynamic or irrelevant parts of the payload and only consider the relevant fields (e.g., user_id and product_id) for determining idempotency, ensuring that the function is truly idempotent even with changing payloads.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"6-10 18 31\"\n--8<-- \"examples/idempotency/src/working_with_payload_subset.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Lambda Timeouts with Idempotency\nDESCRIPTION: This code shows how to use `register_lambda_context` to protect against concurrent executions due to Lambda timeouts. This function calculates and includes the remaining invocation time in the idempotency record, ensuring that if a Lambda function times out before completing, the same request will only be accepted when the idempotency record expires or the timeout period registered via lambda context has passed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"working_with_lambda_timeout.py\" hl_lines=\"14 23\"\n--8<-- \"examples/idempotency/src/working_with_lambda_timeout.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Feature Flag Evaluation for Single Feature in Python\nDESCRIPTION: This snippet outlines how to evaluate a single feature flag using the `AppConfigStore`. It details the initialization of `AppConfigStore`, `FeatureFlags` instance, and the optional parameters for context evaluation and default values. It's crucial for dynamically testing feature rules against a given context or fallback value.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/getting_started_single_feature_flag.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing Kinesis Stream CloudWatch Logs Event in Lambda Python\nDESCRIPTION: This code shows how to process CloudWatch Logs streamed to Kinesis Data Stream using Python in a Lambda function.  It uses the `extract_cloudwatch_logs_from_event` helper function from AWS Lambda Powertools to decode, decompress, and extract the logs. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"5-7 11\"\n--8<-- \"examples/event_sources/src/kinesisStreamCloudWatchLogs.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Refactoring with Powertools for AWS Lambda (Python) Logger\nDESCRIPTION: This Python code demonstrates the use of the AWS Lambda Powertools Logger to improve structured logging in a Lambda function. The logger is initialized for the service 'APP' and it captures logs for API Gateway requests, both for known and unknown users, automatically injecting key Lambda context information.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom aws_lambda_powertools import Logger\nfrom aws_lambda_powertools.event_handler import APIGatewayRestResolver\nfrom aws_lambda_powertools.logging import correlation_paths\n\nlogger = Logger(service=\"APP\")\n\napp = APIGatewayRestResolver()\n\n\n@app.get(\"/hello/<name>\")\ndef hello_name(name):\n    logger.info(f\"Request from {name} received\")\n    return {\"message\": f\"hello {name}!\"}\n\n\n@app.get(\"/hello\")\ndef hello():\n    logger.info(\"Request from unknown received\")\n    return {\"message\": \"hello unknown!\"}\n\n\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST, log_event=True)\ndef lambda_handler(event, context):\n    return app.resolve(event, context)\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Lambda Function with Validator Decorator in Python\nDESCRIPTION: This code demonstrates how to use the `validator` decorator from Powertools for AWS Lambda (Python) to validate both the inbound event and the function's response against predefined JSON schemas. It raises a `SchemaValidationError` exception if the event or response doesn't conform to the schema.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"8 27 28 42\"\n    --8<-- \"examples/validation/src/getting_started_validator_decorator_function.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Processing AppSync Resolver Event in Lambda Python\nDESCRIPTION: This code demonstrates handling an AppSync Resolver event in a Lambda function using Python. It uses AWS Lambda Powertools to parse the AppSync event and extracts relevant information. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2-4 9\"\n--8<-- \"examples/event_sources/src/appSyncResolver.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Processing API Gateway Proxy V2 Event in Lambda Python\nDESCRIPTION: This code snippet demonstrates processing an API Gateway HTTP API event using v2 proxy integration with Python in a Lambda function.  It utilizes a data class provided by AWS Lambda Powertools. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"1 4\"\n--8<-- \"examples/event_sources/src/apigw_proxy_v2.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Extracting Data with JMESPath Query Function\nDESCRIPTION: Demonstrates using the query function to extract and manipulate JSON data with JMESPath expressions, supporting nested data extraction and filtering\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/jmespath_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools.utilities.data_classes import JMESPathExtractor\n\nextractor = JMESPathExtractor()\ndata = extractor.query(event, 'detail')\n```\n\n----------------------------------------\n\nTITLE: SAST check workflow definition\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that uses CodeQL for static analysis security testing (SAST) of the AWS Powertools Lambda Python codebase. CodeQL scans the entire codebase to identify potential security vulnerabilities and coding errors, providing early detection and prevention of security issues.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n\".github/workflows/codeql-analysis.yml#L20\"\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data Using AWS SDK - Python\nDESCRIPTION: The Python code snippet demonstrates encrypting data using AWS Encryption SDK. It explains implementing encryption with provider association and multi-key options for increased availability.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/data_masking/src/getting_started_encrypt_data.py\"\n```\n\n----------------------------------------\n\nTITLE: Tracing Lambda Handler with capture_lambda_handler\nDESCRIPTION: This Python code demonstrates how to use the `capture_lambda_handler` decorator from the `aws_lambda_powertools.tracing` module to trace an AWS Lambda handler function.  The decorator automatically captures cold starts, service names, responses, and exceptions as tracing metadata.  This greatly simplifies the process of adding tracing to Lambda functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/capture_lambda_handler.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolvers with Powertools Event Handler\nDESCRIPTION: This Python code demonstrates how to use the Powertools Event Handler to implement GraphQL resolvers for getTodo, listTodos, and createTodo operations. It includes error handling and uses scalar type utilities for generating IDs and timestamps.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools.event_handler import AppSyncResolver\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\nfrom aws_lambda_powertools.logging import correlation_paths\nfrom aws_lambda_powertools import Logger, Tracer\nfrom aws_lambda_powertools.event_handler.appsync import scalar_types_utils\n\ntracer = Tracer()\nlogger = Logger()\napp = AppSyncResolver()\n\ntodos = {}\n\n@app.resolver(type_name=\"Query\", field_name=\"getTodo\")\ndef get_todo(id: str):\n    logger.info(f\"Fetching todo {id}\")\n    if id not in todos:\n        return None\n\n    return todos[id]\n\n@app.resolver(type_name=\"Query\", field_name=\"listTodos\")\ndef list_todos():\n    logger.info(f\"Listing todos, total: {len(todos)}\")\n    return list(todos.values())\n\n@app.resolver(type_name=\"Mutation\", field_name=\"createTodo\")\ndef create_todo(name: str, description: str = None):\n    logger.info(f\"Creating new todo {name}\")\n    todo_id = scalar_types_utils.make_id()\n    created_at = scalar_types_utils.aws_datetime()\n\n    new_todo = {\n        \"id\": todo_id,\n        \"name\": name,\n        \"description\": description,\n        \"createdAt\": created_at,\n    }\n    todos[todo_id] = new_todo\n\n    return new_todo\n\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.APPSYNC_RESOLVER)\n@tracer.capture_lambda_handler\ndef lambda_handler(event: dict, context: LambdaContext) -> dict:\n    return app.resolve(event, context)\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Project using SAM CLI - Bash\nDESCRIPTION: This snippet shows how to use the SAM CLI to initialize a sample AWS Lambda project with Python 3.13 and pip as the dependency manager. The command sets up a basic project structure for further development.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsam init --runtime python3.13 --dependency-manager pip --app-template hello-world --name powertools-quickstart\n```\n\n----------------------------------------\n\nTITLE: Creating Bedrock Agent using AWS CDK and Generative AI Constructs\nDESCRIPTION: CDK code that creates an Amazon Bedrock Agent using the Generative AI CDK constructs. It handles permission setup and code bundling for the Lambda function that will be used by the agent.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/cdk/bedrock_agent_stack.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing SQS Messages with BatchProcessor\nDESCRIPTION: This Python code demonstrates how to process SQS messages using the `BatchProcessor` class from Powertools for AWS Lambda.  It initializes the processor with `EventType.SQS`, defines a handler function for processing individual records, and uses `process_partial_response` to handle the batch, leveraging Tracer and Logger utilities for enhanced observability.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_sqs.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling with BatchProcessor in Python\nDESCRIPTION: This code snippet handles exceptions raised by the record handler function in a Lambda. It catches exceptions and includes item identifiers in the response dictionary for items that failed during processing. Dependencies include AWS Lambda and Python's error handling mechanisms.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/getting_started_error_handling.py\"\n```\n\n----------------------------------------\n\nTITLE: SAM Template for API Gateway Integration\nDESCRIPTION: This SAM template defines a Lambda function and integrates it with API Gateway.  It configures API Gateway routes for `/hello` and `/hello/{name}` to trigger the Lambda function. The template also defines output values for the API Gateway endpoint URL.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nAWSTemplateFormatVersion: \"2010-09-09\"\nTransform: AWS::Serverless-2016-10-31\nDescription: Sample SAM Template for powertools-quickstart\nGlobals:\n    Function:\n        Timeout: 3\nResources:\n    HelloWorldFunction:\n        Type: AWS::Serverless::Function\n        Properties:\n            CodeUri: hello_world/\n            Handler: app.lambda_handler\n            Runtime: python3.9\n            Events:\n                HelloWorld:\n                    Type: Api\n                    Properties:\n                        Path: /hello\n                        Method: get\n                HelloWorldName:\n                    Type: Api\n                    Properties:\n                        Path: /hello/{name}\n                        Method: get\nOutputs:\n    HelloWorldApi:\n        Description: \"API Gateway endpoint URL for Prod stage for Hello World function\"\n        Value: !Sub \"https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/\"\n```\n\n----------------------------------------\n\nTITLE: Manually Flushing Metrics in Python\nDESCRIPTION: This snippet shows how to manually flush metrics using `flush_metrics()`. This is useful when using frameworks like AWS Lambda Web Adapter or custom middleware with metric logic.  The method serializes and prints the metrics to standard output and then clears the in-memory metrics data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools import Metrics\nfrom aws_lambda_powertools.metrics import MetricUnit\n\nmetrics = Metrics(service=\"MyApplication\")\n\n\ndef handler(event, context):\n    try:\n        # Your code that generates metrics\n        metrics.add_metric(name=\"SuccessfulOperation\", unit=MetricUnit.Count, value=1)\n\n        # Simulate an operation that might fail\n        if event.get(\"fail\", False):\n            raise ValueError(\"Operation failed\")\n\n        return {\"message\": \"Operation successful\"}\n\n    except Exception as e:\n        # Handle the exception\n        print(f\"Error: {str(e)}\")\n\n        # Flush metrics in case of an exception\n        metrics.flush_metrics()\n\n        raise\n\n    finally:\n        # Ensure metrics are flushed even if no exception occurs\n        metrics.flush_metrics()\n\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Streams Processing with Pydantic in Python\nDESCRIPTION: This Python snippet illustrates integrating Pydantic models for data validation in DynamoDB Streams processing in AWS Lambda. It inherits from DynamoDBStreamRecordModel to obtain critical identifiers necessary for error reporting.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/pydantic_dynamodb.py\"\n```\n\n----------------------------------------\n\nTITLE: SSM Parameter Store Provider Configuration\nDESCRIPTION: Configuring SSM Parameter Store providers with options for single and recursive parameter retrieval, decryption, and custom SDK client configuration\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbuiltin_provider_ssm_single_parameter.py\n```\n\nLANGUAGE: python\nCODE:\n```\nbuiltin_provider_ssm_recursive_parameter.py\n```\n\nLANGUAGE: python\nCODE:\n```\nbuiltin_provider_ssm_with_decrypt.py\n```\n\nLANGUAGE: python\nCODE:\n```\nbuiltin_provider_ssm_with_no_recursive.py\n```\n\n----------------------------------------\n\nTITLE: Integrating Idempotency with Batch Processing in AWS Lambda\nDESCRIPTION: This snippet shows how to use an idempotency function decorator within a batch processor in AWS Lambda. It allows for unique message handling per record during batch operations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" Integration of idempotency in batch processing for AWS Lambda. \n   The function decorator helps maintain idempotency across multiple records in a single invocation. \n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single SSM Parameter in Python\nDESCRIPTION: Demonstrates how to fetch a single parameter from AWS Systems Manager Parameter Store using AWS Powertools Parameters utility\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/getting_started_single_ssm_parameter.py\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Exception Handling in Python\nDESCRIPTION: Demonstrates using the exception_handler decorator to centrally manage and handle different types of exceptions in GraphQL resolvers\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/exception_handling_graphql.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing CloudFormation Custom Resource Event in Lambda Python\nDESCRIPTION: This code snippet demonstrates how to process a CloudFormation custom resource event using Python in a Lambda function. The Lambda function handles CloudFormation create, update and delete requests for a custom resource. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2-3 11 15 21\"\n--8<-- \"examples/event_sources/src/cloudformation_custom_resource_handler.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Pydantic Output Serialization with Idempotency (Explicit)\nDESCRIPTION: This example shows how to use the `PydanticSerializer` with an explicit model type provided as an input. Instead of relying on type inference, the specific Pydantic model is passed to the serializer. This gives more control over the serialization process, allowing the user to explicitly define the schema used for serializing and deserializing the output when using `@idempotent_function`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"8 27 35 35 47\"\n--8<-- \"examples/idempotency/src/working_with_pydantic_explicitly_output_serializer.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Processing DynamoDB Messages with BatchProcessor\nDESCRIPTION: This Python code demonstrates processing DynamoDB Streams messages using the `BatchProcessor` class.  It illustrates initializing the processor with `EventType.DynamoDBStreams`, defining a handler for individual records, and utilizing `process_partial_response` to process the batch, along with Tracer and Logger for enhanced monitoring.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_dynamodb.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Reusing Tracer in Python\nDESCRIPTION: This code snippet demonstrates how to reuse the Tracer utility in a Python module. The Tracer is initialized in the main module and then reused in another module, where the configuration is inherited, but modules are automatically patched only once. This is useful in situations where you want to trace operations across multiple files or functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Tracer reuse example\"\"\"\n\nfrom aws_lambda_powertools import Tracer\n\n\ntracer = Tracer()\n\n@tracer.capture_method\ndef my_method(name):\n    return f\"{name} is here\"\n\n```\n\n----------------------------------------\n\nTITLE: Enabling In-Memory Cache with Idempotency\nDESCRIPTION: This code snippet demonstrates enabling in-memory caching for the Idempotency decorator using the `use_local_cache` parameter in `IdempotencyConfig`. When enabled, responses are cached locally within the Lambda execution environment.  The `local_cache_max_items` parameter can be adjusted to configure the cache capacity.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"15\"\n--8<-- \"examples/idempotency/src/working_with_local_cache.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Streaming S3 Object Content with Python in Non-Versioned Buckets\nDESCRIPTION: This snippet demonstrates streaming content from a non-versioned S3 bucket with Python. It requires the boto3 library to access AWS S3 and handle data streaming efficiently, consuming minimal memory. Key parameters include the bucket name and object key. The output is streamed data fetched in parts. The snippet must be adapted for environment configurations like AWS credentials.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_basic_stream.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing API Gateway Authorizer V2 Event in Lambda Python\nDESCRIPTION: This code snippet demonstrates handling an API Gateway HTTP API Lambda Authorizer payload version 2 event using Python.  It uses the appropriate data class from AWS Lambda Powertools. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"4-6 16\"\n--8<-- \"examples/event_sources/src/apigw_auth_v2.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Lambda Event Data Class (Direct Initialization)\nDESCRIPTION: Demonstrates direct initialization of an event data class by passing the Lambda event object to its constructor, specifically for API Gateway Proxy events\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/getting_started_data_classes.py\"\n```\n\n----------------------------------------\n\nTITLE: Validating Data with Standalone Validate Function in Python\nDESCRIPTION: This example demonstrates using the standalone `validate` function from Powertools for AWS Lambda (Python) to validate data against a JSON schema.  It shows how to handle `SchemaValidationError` exceptions to gracefully manage validation errors and returns the validated event as a JSON object.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"5 16 17 26\"\n    --8<-- \"examples/validation/src/getting_started_validator_standalone_function.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Bedrock Agent Handler with BedrockAgentResolver\nDESCRIPTION: Lambda handler using BedrockAgentResolver to create an Agent action for Amazon Bedrock. The code includes request validation, routing, and response handling with Powertools for AWS Lambda features like Logger and Tracer.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/getting_started.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing S3 Events with Python Lambda\nDESCRIPTION: Shows how to handle S3 events in AWS Lambda using the S3Event data model from Powertools. The function processes notifications triggered by S3 operations like object creation or deletion.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/s3Event.py\"\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Batch Processing with Context Manager\nDESCRIPTION: This Python code showcases using the `BatchProcessor` as a context manager for DynamoDB Streams batch processing.  It demonstrates how to define a record handler and automatically manage batch processing and failure reporting, improving code clarity and maintainability.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_dynamodb_context_manager.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling S3 Batch Operations with Python Lambda\nDESCRIPTION: Demonstrates processing S3 Batch Operations events using the S3BatchEvent data model. The function handles batch jobs and returns appropriate results for each task, with support for versioned objects.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/s3_batch_operation.py\"\n```\n\n----------------------------------------\n\nTITLE: Patching Modules Explicitly\nDESCRIPTION: This Python code demonstrates how to explicitly patch specific modules using the `patch_modules` parameter when initializing the `Tracer` class. By default, Tracer automatically patches all supported libraries by X-Ray. Explicit patching can reduce overhead by only patching the modules you need.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/patch_modules.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Lambda Mask in Python\nDESCRIPTION: This code snippet demonstrates using the `DataMasking` utility to mask sensitive data within a Lambda function. It showcases how to initialize the utility and apply masking operations to specific fields.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/tests/lambda_mask.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Pydantic Output Serialization with Idempotency (Inferring)\nDESCRIPTION: This example demonstrates how to use the `PydanticSerializer` with the Idempotency decorator to automatically serialize the output of a function using Pydantic models. The serializer infers the model type from the function's return type annotation, ensuring that the returned data is properly serialized and deserialized when retrieved from persistent storage. This maintains type consistency when using `@idempotent_function`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"8 27 35 38 48\"\n--8<-- \"examples/idempotency/src/working_with_pydantic_deduced_output_serializer.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Built-in Envelope Extraction for AWS Event Sources\nDESCRIPTION: Shows how to use predefined JMESPath envelopes to extract data from different AWS Lambda event sources like API Gateway, CloudWatch Events, and SNS\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/jmespath_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools.utilities.data_classes import event_source\n\n@event_source(data_class=SNSEvent)\ndef handler(event, context):\n    sns_event = event.Records[0].Sns.Message\n    parsed_message = powertools_json(sns_event)\n```\n\n----------------------------------------\n\nTITLE: Idempotent_function Decorator with Pydantic\nDESCRIPTION: This Python snippet shows the use of the idempotent_function decorator applied to a function using Pydantic models. It demonstrates flexibility in defining idempotency keys and handling JSON serializable data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/src/working_with_idempotent_function_pydantic.py\"\n```\n\n----------------------------------------\n\nTITLE: Example Input Payload Causing Validation Failure\nDESCRIPTION: Sample input payload that contains invalid data that will fail validation against the schema rules. Shows how invalid requests are structured when sent to the Bedrock Agent Lambda.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/validation_failure_input.json\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Batch Resolvers for GraphQL\nDESCRIPTION: Implements batch resolvers to efficiently handle multiple GraphQL requests in a single Lambda invocation, solving the N+1 query problem\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/advanced_batch_resolver.py\"\n```\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/advanced_batch_resolver_payload.json\"\n```\n\nLANGUAGE: graphql\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/advanced_batch_query.graphql\"\n```\n\n----------------------------------------\n\nTITLE: SQS Batch Processing with Context Manager\nDESCRIPTION: This Python code showcases the usage of `BatchProcessor` as a context manager for SQS batch processing.  It demonstrates how to define a handler function to process SQS records and leverages the context manager to automatically handle batch processing and failure reporting, simplifying the code structure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_sqs_context_manager.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Payload Validation in Lambda Idempotency\nDESCRIPTION: Example showing how to validate payload changes across idempotent requests using payload_validation_jmespath. This code demonstrates handling payment transactions with validation for amount changes.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n@idempotent_function()\ndef handler(event, context):\n    # Lambda handler code here\n    pass\n```\n\n----------------------------------------\n\nTITLE: SQS FIFO Batch Processing with Context Manager\nDESCRIPTION: This Python code shows how to process SQS FIFO messages using `BatchProcessor` as a context manager, which simplifies resource management and streamlines the processing logic.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_sqs_fifo_context_manager.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Lambda Context in Record Handler Python\nDESCRIPTION: Demonstrates how to inject Lambda context into record handler functions for timeout tracking and context awareness\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/advanced_accessing_lambda_context.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining Bedrock Agent Resources with AWS SAM Template\nDESCRIPTION: SAM template that defines Lambda function and role permissions required for Amazon Bedrock Agents. Creates IAM roles with the necessary permissions for Bedrock to invoke foundation models and Lambda functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/sam/template.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS AppConfig Store with CDK in Python\nDESCRIPTION: This snippet demonstrates creating an AppConfig feature flag store using the AWS CDK in Python. It defines premium feature rules and deploys configurations across environments. Dependencies include the `aws-cdk` library with focus on `aws_appconfig` and `core`. It initializes configuration for a \"product-catalogue\" app with specific versioning and deployment strategies.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nimport aws_cdk.aws_appconfig as appconfig\nfrom aws_cdk import core\n\n\nclass SampleFeatureFlagStore(core.Construct):\n    def __init__(self, scope: core.Construct, id_: str) -> None:\n        super().__init__(scope, id_)\n\n        features_config = {\n            \"premium_features\": {\n                \"default\": False,\n                \"rules\": {\n                    \"customer tier equals premium\": {\n                        \"when_match\": True,\n                        \"conditions\": [{\"action\": \"EQUALS\", \"key\": \"tier\", \"value\": \"premium\"}],\n                    }\n                },\n            },\n            \"ten_percent_off_campaign\": {\"default\": True},\n        }\n\n        self.config_app = appconfig.CfnApplication(\n            self,\n            id=\"app\",\n            name=\"product-catalogue\",\n        )\n        self.config_env = appconfig.CfnEnvironment(\n            self,\n            id=\"env\",\n            application_id=self.config_app.ref,\n            name=\"dev-env\",\n        )\n        self.config_profile = appconfig.CfnConfigurationProfile(\n            self,\n            id=\"profile\",\n            application_id=self.config_app.ref,\n            location_uri=\"hosted\",\n            name=\"features\",\n        )\n        self.hosted_cfg_version = appconfig.CfnHostedConfigurationVersion(\n            self,\n            \"version\",\n            application_id=self.config_app.ref,\n            configuration_profile_id=self.config_profile.ref,\n            content=json.dumps(features_config),\n            content_type=\"application/json\",\n        )\n        self.app_config_deployment = appconfig.CfnDeployment(\n            self,\n            id=\"deploy\",\n            application_id=self.config_app.ref,\n            configuration_profile_id=self.config_profile.ref,\n            configuration_version=self.hosted_cfg_version.ref,\n            deployment_strategy_id=\"AppConfig.AllAtOnce\",\n            environment_id=self.config_env.ref,\n        )\n\n```\n\n----------------------------------------\n\nTITLE: Kinesis Batch Processing with Context Manager\nDESCRIPTION: This Python code showcases using `BatchProcessor` as a context manager for Kinesis Data Streams batch processing. It demonstrates how to define a record handler and automatically manage batch processing and failure reporting, enhancing code simplicity and readability.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_kinesis_context_manager.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Batch Processor in Python\nDESCRIPTION: Provides an example of unit testing batch processing with scenarios for successful and failed record processing\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/getting_started_with_test.py\"\n```\n\n----------------------------------------\n\nTITLE: Decompressing and Deserializing CSV with Python\nDESCRIPTION: This snippet shows how to decompress gzip content and deserialize CSV data from S3 in Python. It requires gzip and csv libraries. Key parameters involve constructor-level settings for CSV and Gzip transformations. The output is a dictionary representation of each CSV line post-transformation. Configuration of transformation settings is necessary.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_transform_common.py\"\n```\n\n----------------------------------------\n\nTITLE: Custom Data Model with Amazon EventBridge using Powertools Parser\nDESCRIPTION: Demonstrates creating a custom data model to validate and extract information from EventBridge events, allowing structured event handling and validation\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parser.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parser/src/custom_data_model_with_eventbridge.py\"\n```\n\n----------------------------------------\n\nTITLE: Flushing Metrics and Using Logger Decorator in Python\nDESCRIPTION: Illustrates the use of the 'log_metrics' decorator for automatically validating and flushing metrics upon execution completion. Offers schema validation and serialization to optimize the output.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/add_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Custom Output Serialization with Idempotency\nDESCRIPTION: This example showcases the use of `CustomDictSerializer` to implement custom serialization and deserialization logic for the idempotent function. It provides functions to convert any type to a JSON serializable dictionary (`to_dict`) before saving and from a dictionary back to its original form (`from_dict`) when retrieved. This allows full control over serialization for complex types when using `@idempotent_function`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"9 34 38 42 52 54 64\"\n--8<-- \"examples/idempotency/src/working_with_idempotent_function_custom_output_serializer.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Tracing Context Manager with capture_method\nDESCRIPTION: This Python code illustrates tracing a context manager using the `capture_method` decorator. The `capture_method` is applied to a class's `__enter__` method, enabling tracing of the operations within the context manager's scope.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/capture_method_context_manager.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Custom Boto3 Session Example in Python\nDESCRIPTION: Demonstrates the use of a custom boto3 session with AWS Powertools Parameters. This allows for cross-account/region parameter retrieval or for snapshot testing scenarios by injecting a custom session.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/parameters/src/custom_boto_session.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling VPC Lattice V2 Events with Python Lambda\nDESCRIPTION: Demonstrates integrating Lambda with Amazon VPC Lattice using Payload V2 format and the VPCLatticeEventV2 data model. This allows the Lambda function to act as a service within a VPC Lattice service network.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/vpc_lattice_v2.py\"\n```\n\n----------------------------------------\n\nTITLE: Single Metric with Different Timestamp in Python\nDESCRIPTION: This code shows how to emit metrics with different timestamps using the `single_metric` method. It imports necessary modules, calculates a timestamp 5 minutes ago, and then emits several metrics using that timestamp.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta, timezone\n\nfrom aws_lambda_powertools import Metrics\nfrom aws_lambda_powertools.metrics import MetricUnit\n\n\ndef handler(event, context):\n    metrics = Metrics(service=\"MyApplication\")\n\n    # Calculate a timestamp 5 minutes ago\n    five_minutes_ago = datetime.now(timezone.utc) - timedelta(minutes=5)\n\n    # Use the datetime object for the timestamp parameter\n    metrics.single_metric(\n        name=\"ProcessingLatency\", unit=MetricUnit.Milliseconds, value=100, timestamp=five_minutes_ago\n    )\n    metrics.single_metric(name=\"Errors\", unit=MetricUnit.Count, value=1, timestamp=five_minutes_ago)\n\n    return {}\n\n```\n\n----------------------------------------\n\nTITLE: Using Idempotent Response Hook in Python\nDESCRIPTION: Demonstrates how to set up and use a response_hook in the IdempotentConfig class to manipulate returned data when an operation is idempotent.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/src/working_with_response_hook.py\"\n```\n\n----------------------------------------\n\nTITLE: Using EphemeralMetrics for Isolated Metrics in Python\nDESCRIPTION: Example demonstrating how to use the EphemeralMetrics class to isolate metrics with distinct namespaces and dimensions, typically useful for multi-tenant applications or emitting same metrics for different applications.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/ephemeral_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: SQS Batch Processing with Pydantic in Python\nDESCRIPTION: This code snippet demonstrates how to integrate Pydantic models into SQS batch processing with AWS Lambda. Inheritance from SqsRecordModel is crucial to access message IDs and sequence numbers on failure. Dependencies include Pydantic, AWS Lambda, and Python typing libraries.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/pydantic_sqs.py\"\n```\n\n----------------------------------------\n\nTITLE: Idempotent Decorator in Python AWS Lambda\nDESCRIPTION: A Python script demonstrating the use of an idempotent decorator on AWS Lambda functions. It uses the entire event as an idempotency key, allowing repeated processing of the same event within a time window to return the previously stored result.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/src/getting_started_with_idempotency.py\"\n```\n\n----------------------------------------\n\nTITLE: Async Batch Resolver Implementation\nDESCRIPTION: Demonstrates the implementation of an async batch resolver using async_batch_resolver decorator for handling asynchronous functions in AppSync Lambda resolvers.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/advanced_batch_async_resolver.py\"\n```\n\n----------------------------------------\n\nTITLE: Time-Based Feature Flag Implementation in Python\nDESCRIPTION: This snippet demonstrates how to implement time-based feature flags using Powertools for AWS Lambda (Python). It shows how to use the `feature_flags` decorator and define features that are enabled based on time ranges.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Time based feature flag example\"\"\"\nimport json\nimport os\nfrom datetime import datetime\n\nfrom aws_lambda_powertools import Tracer\nfrom aws_lambda_powertools.utilities.feature_flags import FeatureFlagsProvider, LazyLoadingCache\n\ntracer = Tracer()\nFEATURE_FLAG_ENV = os.getenv(\"FEATURE_FLAG_FILE\", \"timebased_features.json\")\n\ncache = LazyLoadingCache(load_function=lambda: FeatureFlagsProvider(config_file=FEATURE_FLAG_ENV, logger=None))\n\n\n@tracer.capture_method\ndef is_christmas_mode_enabled(username: str) -> bool:\n    # Use the provider instance to evaluate if a feature is enabled for a given context\n    feature_set = {\"username\": username}\n    return cache.get().evaluate_feature(\"christmas_mode\", feature_set, default=False)\n\n\n@tracer.capture_method\ndef is_support_chat_enabled(username: str) -> bool:\n    # Use the provider instance to evaluate if a feature is enabled for a given context\n    feature_set = {\"username\": username}\n    return cache.get().evaluate_feature(\"support_chat\", feature_set, default=True)\n\n\n@tracer.capture_method\ndef is_maintenance_mode_enabled(username: str) -> bool:\n    # Use the provider instance to evaluate if a feature is enabled for a given context\n    feature_set = {\"username\": username}\n    return cache.get().evaluate_feature(\"maintenance_mode\", feature_set, default=False)\n\n\n@tracer.capture_method\ndef lambda_handler(event, context):\n    username = event.get(\"username\", None)\n    if not username:\n        return {\"message\": \"username parameter is missing\"}\n\n    is_christmas_enabled = is_christmas_mode_enabled(username)\n    is_support_enabled = is_support_chat_enabled(username)\n    is_maintenance_enabled = is_maintenance_mode_enabled(username)\n\n    return {\n        \"username\": username,\n        \"christmas_mode\": is_christmas_enabled,\n        \"support_chat\": is_support_enabled,\n        \"maintenance_mode\": is_maintenance_enabled,\n        \"datetime\": str(datetime.now()),\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Processing SQS Events with Python Lambda\nDESCRIPTION: Shows how to handle Simple Queue Service (SQS) events in Lambda using the SQSEvent data model. The function processes messages from an SQS queue and extracts the message content.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/sqs_event.py\"\n```\n\n----------------------------------------\n\nTITLE: Tracing Async Concurrent Functions\nDESCRIPTION: This Python code provides a workaround to safely trace concurrent asynchronous functions using the `in_subsegment_async` method available via the Tracer's escape hatch (`tracer.provider`). This approach avoids exceptions raised by the X-Ray SDK when tracing async functions concurrently.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/capture_method_async_concurrency.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations with put_annotation method\nDESCRIPTION: This Python code demonstrates how to add annotations to a trace using the `put_annotation` method of the `Tracer` class. Annotations are key-value pairs that are indexed by AWS X-Ray, allowing you to filter traces and create Trace Groups. This enables you to slice and dice your transactions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/put_trace_annotations.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schemas for Validator Decorator in Python\nDESCRIPTION: This code defines JSON schemas used for validating both inbound events and function responses using the `validator` decorator. These schemas are used to ensure the structure and data types of the input event and output response conform to the specified rules.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"10 12 17 19 24 26 28 44 46 51 53\"\n    --8<-- \"examples/validation/src/getting_started_validator_decorator_schema.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Processing Bedrock Agent Event in Lambda Python\nDESCRIPTION: This code snippet demonstrates how to process a Bedrock Agent event within a Lambda function using Python.  It uses AWS Lambda Powertools to parse the incoming event and creates a response compatible with Bedrock Agent's expected format. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2 7\"\n--8<-- \"examples/event_sources/src/bedrock_agent.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Evaluating Static Feature Flags in Python\nDESCRIPTION: This snippet provides methods for evaluating static feature flags using Python. Unlike dynamic flags, it does not require conditional context. The snippet is useful for checking feature toggles that are universally applicable without specific evaluation contexts.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/getting_started_static_flag.py\"\n```\n\n----------------------------------------\n\nTITLE: Reusing Tracer Configuration\nDESCRIPTION: This snippet showcases how a new Tracer instance reuses the configuration from a previously initialized Tracer, functioning similarly to a Singleton. This allows you to maintain a consistent tracing configuration across your application without explicitly passing configuration parameters.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Tracer reuse module example\"\"\"\n\nfrom aws_lambda_powertools import Tracer\nfrom tracer_reuse import my_method\n\n\ntracer = Tracer()\n\n@tracer.capture_method\ndef greeting(name):\n    return f\"{my_method(name=name)}!\"\n\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in AWS Lambda Python\nDESCRIPTION: This snippet demonstrates how to handle unhandled exceptions and persistent layer errors in an AWS Lambda function. By raising the appropriate errors, we can manage idempotency effectively even when exceptions occur.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" Handling exceptions in AWS Lambda by managing idempotency records. \n   This ensures that idempotency is maintained when exceptions are encountered. \n   The IdempotencyPersistenceLayerError is raised for persistence layer issues. \n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with python-json-logger\nDESCRIPTION: This Python code implements structured logging using the `python-json-logger` library. It configures a JSON formatter for the standard Python logger to output logs in JSON format. This allows for easier parsing and analysis of logs in tools like CloudWatch Insights.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport os\n\nfrom pythonjsonlogger import jsonlogger\nfrom aws_lambda_powertools.event_handler import APIGatewayRestResolver\n\nlogger = logging.getLogger(\"APP\")\nlogHandler = logging.StreamHandler()\nformatter = jsonlogger.JsonFormatter(fmt=\"%(asctime)s %(levelname)s %(name)s %(message)s\")\nlogHandler.setFormatter(formatter)\nlogger.addHandler(logHandler)\nlogger.setLevel(os.getenv(\"POWERTOOLS_LOG_LEVEL\", \"INFO\"))\n\napp = APIGatewayRestResolver()\n\n\n@app.get(\"/hello/<name>\")\ndef hello_name(name):\n    logger.info(f\"Request from {name} received\")\n    return {\"message\": f\"hello {name}!\"}\n\n\n@app.get(\"/hello\")\ndef hello():\n    logger.info(\"Request from unknown received\")\n    return {\"message\": \"hello unknown!\"}\n\n\ndef lambda_handler(event, context):\n    logger.debug(event)\n    return app.resolve(event, context)\n```\n\n----------------------------------------\n\nTITLE: Working with Composite Primary Key in DynamoDB\nDESCRIPTION: This snippet illustrates how to handle idempotency keys when using a composite primary key in a DynamoDB table, including the customization of the partition key and the sort key attributes.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" Managing DynamoDB with composite primary keys to enhance idempotency tracking. \n   The method enables settings for primary and sort keys along with static values. \n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Encryption Context for Integrity (Python)\nDESCRIPTION: This code snippet shows how to use encryption context for adding metadata to encryption operations and verifying it during decryption. The encryption context ensures the integrity and authenticity of the encrypted data and is crucial for preventing confused deputy situations. Encryption context must match during decryption, otherwise the operation will fail.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/getting_started_encryption_context.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Router in Python\nDESCRIPTION: This code defines a simple router class to handle different API Gateway paths and HTTP methods, mapping them to specific handler functions. It reduces boilerplate routing code and simplifies adding additional URLs. The Router class stores routes in a dictionary and retrieves the appropriate handler based on the path and method.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\n\ndef hello_name(event, **kargs):\n    username = event[\"pathParameters\"][\"name\"]\n    return {\"statusCode\": 200, \"body\": json.dumps({\"message\": f\"hello {username}!\"})}\n\n\ndef hello(**kargs):\n    return {\"statusCode\": 200, \"body\": json.dumps({\"message\": \"hello unknown!\"})}\n\n\nclass Router:\n    def __init__(self):\n        self.routes = {}\n\n    def set(self, path, method, handler):\n        self.routes[f\"{path}-{method}\"] = handler\n\n    def get(self, path, method):\n        try:\n            route = self.routes[f\"{path}-{method}\"]\n        except KeyError:\n            raise RuntimeError(f\"Cannot route request to the correct method. path={path}, method={method}\")\n        return route\n\nrouter = Router()\nrouter.set(path=\"/hello\", method=\"GET\", handler=hello)\nrouter.set(path=\"/hello/{name}\", method=\"GET\", handler=hello_name)\n\n\ndef lambda_handler(event, context):\n    path = event[\"resource\"]\n    http_method = event[\"httpMethod\"]\n    method = router.get(path=path, method=http_method)\n    return method(event=event)\n```\n\n----------------------------------------\n\nTITLE: Implementing Validated Input/Output for Bedrock Agent\nDESCRIPTION: Lambda handler that uses Pydantic for data validation with type annotations. Demonstrates validation of input parameters (like EmailStr) and return types for Bedrock Agent requests and responses.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/getting_started_with_validation.py\"\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Testing Implementation\nDESCRIPTION: Example showing how to unit test feature flags using pytest and pytest-mock. Demonstrates mocking of AppConfig responses for testing feature flag evaluation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/getting_started_with_tests.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting SSM Parameter in Python\nDESCRIPTION: Demonstrates creating and setting a parameter in AWS Systems Manager Parameter Store\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/getting_started_set_single_ssm_parameter.py\"\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data using AWS Encryption SDK Provider (Python)\nDESCRIPTION: This snippet demonstrates how to decrypt data using the AWSEncryptionSDKProvider and KMS. It utilizes KMS Key ARN for decryption, emphasizing the importance of using the correct key identifier. Multiple KMS keys can be used for higher availability, but this increases latency.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/getting_started_decrypt_data.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Logging Metrics with Default Dimensions in Python\nDESCRIPTION: Demonstrates adding default dimensions directly in the 'log_metrics' decorator call, providing a consistent approach to using preset metric attributes across invocations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/set_default_dimensions_log_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Response Auto-Capture\nDESCRIPTION: This Python code showcases disabling the automatic capture of function responses as metadata by setting `capture_response=False` in both `capture_lambda_handler` and `capture_method` decorators. This is useful for preventing sensitive information from being added to traces or when working with streaming objects that can only be read once.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/disable_capture_response.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Envelopes for Popular Event Sources in Python\nDESCRIPTION: This code demonstrates how to use built-in envelopes provided by Powertools for AWS Lambda (Python) to easily extract the payload from popular event sources, such as API Gateway.  The `envelope` parameter is set to a pre-defined envelope name, simplifying the process of unwrapping common event structures before validation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2 9 14\"\n    --8<-- \"examples/validation/src/unwrapping_popular_event_source_function.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Passing additional SDK arguments in Python\nDESCRIPTION: This snippet shows how to pass arbitrary keyword arguments directly to the underlying SDK method using the AWS Powertools Parameters utility. This allows for fine-grained control over the SDK calls and access to less commonly used features.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/parameters/src/working_with_sdk_additional_arguments.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Working with Custom Serializer (Python)\nDESCRIPTION: This code example shows how to use a custom JSON serializer and deserializer for advanced data masking scenarios. It demonstrates replacing the default json.dumps and json.loads functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/advanced_custom_serializer.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Time-Based Happy Hour Feature Flag Implementation in Python\nDESCRIPTION: This snippet demonstrates how to implement a time-based feature flag, specifically for a \"happy hour\" scenario, using Powertools for AWS Lambda (Python). It uses `SCHEDULE_TIME_RANGE` to control when a feature is enabled.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Time based feature flag example\"\"\"\nimport json\nimport os\n\nfrom aws_lambda_powertools import Tracer\nfrom aws_lambda_powertools.utilities.feature_flags import FeatureFlagsProvider, LazyLoadingCache\n\ntracer = Tracer()\nFEATURE_FLAG_ENV = os.getenv(\"FEATURE_FLAG_FILE\", \"timebased_happyhour_features.json\")\n\ncache = LazyLoadingCache(load_function=lambda: FeatureFlagsProvider(config_file=FEATURE_FLAG_ENV, logger=None))\n\n\n@tracer.capture_method\ndef is_happy_hour_enabled(username: str) -> bool:\n    # Use the provider instance to evaluate if a feature is enabled for a given context\n    feature_set = {\"username\": username}\n    return cache.get().evaluate_feature(\"happy_hour\", feature_set, default=False)\n\n\n@tracer.capture_method\ndef lambda_handler(event, context):\n    username = event.get(\"username\", None)\n    if not username:\n        return {\"message\": \"username parameter is missing\"}\n\n    is_happy_hour = is_happy_hour_enabled(username)\n\n    return {\n        \"username\": username,\n        \"happy_hour\": is_happy_hour,\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Custom Idempotency Key Prefix in Lambda Handler\nDESCRIPTION: This example demonstrates defining a custom prefix for the Idempotency Key using the `key_prefix` parameter in the `@idempotent` decorator. This allows you to decouple the idempotency key from the function name, which can be useful during application refactoring or when you need to ensure consistent key naming across different functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"25\"\n--8<-- \"examples/idempotency/src/working_with_custom_idempotency_key_prefix.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Async GraphQL Resolvers\nDESCRIPTION: This example demonstrates how to use async functions with the GraphQL Event Handler for Python 3.8+ runtimes. It shows async implementations of getTodo, listTodos, and createTodo resolvers.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom aws_lambda_powertools.event_handler import AppSyncResolver\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\nfrom aws_lambda_powertools.event_handler.appsync import scalar_types_utils\n\napp = AppSyncResolver()\n\ntodos = {}\n\n@app.resolver(type_name=\"Query\", field_name=\"getTodo\")\nasync def get_todo(id: str):\n    await asyncio.sleep(0.1)  # Simulate I/O operation\n    return todos.get(id)\n\n@app.resolver(type_name=\"Query\", field_name=\"listTodos\")\nasync def list_todos():\n    await asyncio.sleep(0.1)  # Simulate I/O operation\n    return list(todos.values())\n\n@app.resolver(type_name=\"Mutation\", field_name=\"createTodo\")\nasync def create_todo(name: str, description: str = None):\n    await asyncio.sleep(0.1)  # Simulate I/O operation\n    todo_id = scalar_types_utils.make_id()\n    new_todo = {\n        \"id\": todo_id,\n        \"name\": name,\n        \"description\": description,\n    }\n    todos[todo_id] = new_todo\n    return new_todo\n\ndef lambda_handler(event: dict, context: LambdaContext) -> dict:\n    return asyncio.run(app.resolve(event, context))\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested GraphQL Resolvers\nDESCRIPTION: This example shows how to use nested app.resolver() decorators to handle fields with the same return value in a more complex GraphQL schema. It demonstrates resolving fields for User, Post, and Comment types.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools.event_handler import AppSyncResolver\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\napp = AppSyncResolver()\n\n@app.resolver(type_name=\"Query\", field_name=\"getUser\")\n@app.resolver(type_name=\"Post\", field_name=\"author\")\n@app.resolver(type_name=\"Comment\", field_name=\"author\")\ndef get_user(id: str = None) -> dict:\n    return {\n        \"id\": id or \"1\",\n        \"username\": \"alex\",\n    }\n\n@app.resolver(type_name=\"User\", field_name=\"posts\")\ndef get_user_posts(id: str) -> list:\n    return [\n        {\"id\": \"1\", \"title\": \"My first post\", \"content\": \"Hello world\"},\n        {\"id\": \"2\", \"title\": \"My second post\", \"content\": \"Hello again\"},\n    ]\n\n@app.resolver(type_name=\"Post\", field_name=\"comments\")\ndef get_post_comments(id: str) -> list:\n    return [\n        {\"id\": \"1\", \"content\": \"Great post!\"},\n        {\"id\": \"2\", \"content\": \"Thanks for sharing\"},\n    ]\n\ndef lambda_handler(event: dict, context: LambdaContext) -> dict:\n    return app.resolve(event, context)\n```\n\n----------------------------------------\n\nTITLE: Testing Idempotency with Mock Redis in Python\nDESCRIPTION: Shows how to test the idempotency utility using a mock Redis implementation for a simulated Redis environment.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/tests/test_with_mock_redis.py\"\n```\n\n----------------------------------------\n\nTITLE: Handling VPC Lattice V1 Events with Python Lambda\nDESCRIPTION: Shows how to integrate Lambda with Amazon VPC Lattice using the original payload format and the VPCLatticeEvent data model. This enables the Lambda function to serve as a service within a VPC Lattice network.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/vpc_lattice.py\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Cold Start Metrics with Datadog\nDESCRIPTION: Example showing how to capture Lambda cold start as a metric using the capture_cold_start_metric parameter.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/capture_cold_start_datadog_metric.py\"\n```\n\n----------------------------------------\n\nTITLE: Modulo Range Feature Flag Implementation in Python\nDESCRIPTION: This snippet showcases how to implement feature flags with modulo range conditions using Powertools for AWS Lambda (Python). It uses the `CONTEXT_VALUE_MODULO_RANGE` condition to enable a feature for a segment of users.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Modulo Range feature flag example\"\"\"\nimport json\nimport os\n\nfrom aws_lambda_powertools import Tracer\nfrom aws_lambda_powertools.utilities.feature_flags import FeatureFlagsProvider, LazyLoadingCache\n\ntracer = Tracer()\nFEATURE_FLAG_ENV = os.getenv(\"FEATURE_FLAG_FILE\", \"modulo_range_features.json\")\n\ncache = LazyLoadingCache(load_function=lambda: FeatureFlagsProvider(config_file=FEATURE_FLAG_ENV, logger=None))\n\n\n@tracer.capture_method\ndef is_new_pricing_enabled(user_id: int) -> bool:\n    # Use the provider instance to evaluate if a feature is enabled for a given context\n    feature_set = {\"user_id\": user_id}\n    return cache.get().evaluate_feature(\"new_pricing\", feature_set, default=False)\n\n\n@tracer.capture_method\ndef lambda_handler(event, context):\n    user_id = event.get(\"user_id\", None)\n    if not user_id:\n        return {\"message\": \"user_id parameter is missing\"}\n\n    is_pricing_enabled = is_new_pricing_enabled(user_id)\n\n    return {\n        \"user_id\": user_id,\n        \"new_pricing\": is_pricing_enabled,\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics in Python\nDESCRIPTION: This snippet demonstrates how to add metrics using the 'add_metric' method in Python. The metrics are aggregated in memory to optimize for cost efficiency. The 'Metrics' class requires installation of the 'aws-powertools' Python library.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/add_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: AWS SAM Template for X-Ray Permissions\nDESCRIPTION: This YAML snippet demonstrates how to configure an AWS Lambda function's IAM role within an AWS Serverless Application Model (SAM) template to grant the necessary permissions for sending traces to AWS X-Ray.  The `Policies` section defines the `AWSXRayWriteOnlyAccess` policy, enabling the Lambda function to write trace data to X-Ray.  It is required to enable tracing for lambda functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"--8<-- \\\"examples/tracer/sam/template.yaml\\\"\"\n```\n\n----------------------------------------\n\nTITLE: SAM Template for DynamoDB Streams Batch Processing\nDESCRIPTION: This YAML snippet presents the Serverless Application Model (SAM) template configuration for DynamoDB Streams batch processing.  It defines the resources for a Lambda function triggered by a DynamoDB stream, incorporating settings for batching and error handling through a Dead Letter Queue (DLQ).\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/sam/dynamodb_batch_processing.yaml\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Validating Custom JSON Schema Formats in Python\nDESCRIPTION: This code demonstrates how to define and use custom formats in JSON schemas for validation purposes. It showcases defining a regular expression or a function and passing them to the `formats` parameter in the `validator` function to instruct the validator on how to handle the custom format.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"5 8 10 11 17 27\"\n    --8<-- \"examples/validation/src/custom_format_function.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Capturing Cold Start Metric with Metrics in Python\nDESCRIPTION: This snippet demonstrates how to capture cold start metrics using the `log_metrics` decorator and the `capture_cold_start_metric` parameter. When enabled, it creates a separate EMF blob containing the `ColdStart` metric along with the `function_name` and `service` dimensions if it's a cold start invocation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Capture cold start metric\\n\\nEnvironment variables:\\n\\n* POWERTOOLS_SERVICE_NAME (str): Service name\\n\"\"\"\nfrom aws_lambda_powertools import Metrics\nfrom aws_lambda_powertools.metrics import MetricUnit\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\nmetrics = Metrics(service=\"MyApplication\")\n\n\n@metrics.log_metrics(capture_cold_start_metric=True)\ndef handler(event: dict, context: LambdaContext) -> dict:\n    metrics.add_metric(name=\"SuccessfulInvocations\", unit=MetricUnit.Count, value=1)\n\n    return {\n        \"message\": \"Hello world\",\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Async Processing with AsyncBatchProcessor in Python\nDESCRIPTION: A Python snippet for processing messages concurrently in AWS Lambda using the AsyncBatchProcessor class. It utilizes asyncio for concurrent execution. Dependencies include `AsyncBatchProcessor` and `asyncio.gather`. Key parameters include async functions processing batch items.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/getting_started_async.py\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Expiration Window for Idempotency Records\nDESCRIPTION: This code shows how to change the expiration window for idempotency records using the `expires_after_seconds` parameter. This parameter determines how long an idempotency record is considered valid. After the specified duration, a transaction with the same payload will no longer be considered idempotent and the function will be executed again, allowing for a new result to be stored.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"14\"\n--8<-- \"examples/idempotency/src/working_with_record_expiration.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Kinesis Batch Processing with Pydantic in Python\nDESCRIPTION: The Python snippet shows how to use Pydantic models within a Kinesis data stream processing setup in AWS Lambda. It involves inheriting from KinesisDataStreamRecord for access to message metadata and error handling.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/pydantic_kinesis.py\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Error Tracking with Sentry.io\nDESCRIPTION: Demonstrates how to override failure_handler to capture processing exceptions using Sentry SDK\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/sentry_error_tracking.py\"\n```\n\n----------------------------------------\n\nTITLE: Sample CloudWatch Embedded Metric Format (EMF) Output in JSON\nDESCRIPTION: Example of a CloudWatch Embedded Metric Format (EMF) log entry generated by the Lambda function. This JSON structure shows how metrics are formatted with dimensions, allowing CloudWatch to extract and create metrics automatically.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_aws\": {\n    \"Timestamp\": 1638115724269,\n    \"CloudWatchMetrics\": [\n      {\n        \"Namespace\": \"CustomMetrics\",\n        \"Dimensions\": [\n          [\n            \"method\",\n            \"service\"\n          ]\n        ],\n        \"Metrics\": [\n          {\n            \"Name\": \"AppMethodsInvocations\",\n            \"Unit\": \"Count\"\n          }\n        ]\n      }\n    ]\n  },\n  \"method\": \"/hello/<name>\",\n  \"service\": \"APP\",\n  \"AppMethodsInvocations\": [\n    1\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Boto3 Clients with all Providers in Python\nDESCRIPTION: This code snippet demonstrates how to use your own boto3 client instance with the AWS Powertools Parameters utility. This is useful for unit testing, snapshot testing, and SDK customizations. Different providers expect different levels of boto3 clients, e.g., low-level vs high-level.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/parameters/src/custom_boto3_all_providers.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Processing IoT Core Thing Type Association Events with Python Lambda\nDESCRIPTION: Demonstrates handling IoT Core registry events for thing type associations using the IoTRegistryThingTypeAssociationEvent data model. This processes events when things are associated or disassociated with thing types.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/iot_registry_thing_type_association_event.py\"\n```\n\n----------------------------------------\n\nTITLE: AWS SAM Template for Lambda Function - YAML\nDESCRIPTION: The SAM template is used to define the serverless application's infrastructure. It specifies a Lambda function with a defined timeout, a method for handling API Gateway events, and the runtime environment.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: Sample SAM Template for powertools-quickstart\nGlobals:\n    Function:\n        Timeout: 3\nResources:\n    HelloWorldFunction:\n        Type: AWS::Serverless::Function\n        Properties:\n            CodeUri: hello_world/\n            Handler: app.lambda_handler\n            Runtime: python3.9\n            Architectures:\n                - x86_64\n            Events:\n                HelloWorld:\n                    Type: Api\n                    Properties:\n                        Path: /hello\n                        Method: get\nOutputs:\n    HelloWorldApi:\n        Description: \"API Gateway endpoint URL for Prod stage for Hello World function\"\n        Value: !Sub \"https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/\"\n```\n\n----------------------------------------\n\nTITLE: Unzipping LZMA Compressed S3 Data with Python\nDESCRIPTION: This is for unzipping LZMA compressed data from an S3 stream using Python. It involves using zipfile with a focus on the 'compression' parameter for LZMA. The output is an uncompressed data stream extracted via Python's LZMA support. Correct handling of compressed formats is crucial for correct implementation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_transform_lzma.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Unwrapped Event Validation in Python\nDESCRIPTION: This code defines a JSON schema for validating a specific portion of an event after it has been unwrapped using a JMESPath expression.  It contains validation rules for the unwrapped data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"9-14 23 25 28 33 36 41 44 48 51\"\n    --8<-- \"examples/validation/src/getting_started_validator_unwrapping_schema.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Multiple Modulo Range Feature Flag Implementation in Python\nDESCRIPTION: This snippet demonstrates how to implement multiple experiments or variants simultaneously using modulo range conditions with Powertools for AWS Lambda (Python).\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Modulo Range feature flag example\"\"\"\nimport json\nimport os\n\nfrom aws_lambda_powertools import Tracer\nfrom aws_lambda_powertools.utilities.feature_flags import FeatureFlagsProvider, LazyLoadingCache\n\ntracer = Tracer()\nFEATURE_FLAG_ENV = os.getenv(\"FEATURE_FLAG_FILE\", \"modulo_range_multiple_features.json\")\n\ncache = LazyLoadingCache(load_function=lambda: FeatureFlagsProvider(config_file=FEATURE_FLAG_ENV, logger=None))\n\n\n@tracer.capture_method\ndef get_active_variant(user_id: int) -> str:\n    # Use the provider instance to evaluate which variant is enabled for a given context\n    feature_set = {\"user_id\": user_id}\n    if cache.get().evaluate_feature(\"variant_a\", feature_set, default=False):\n        return \"A\"\n    elif cache.get().evaluate_feature(\"variant_b\", feature_set, default=False):\n        return \"B\"\n    else:\n        return \"Control\"\n\n\n@tracer.capture_method\ndef is_variant_a_enabled(user_id: int) -> bool:\n    # Use the provider instance to evaluate if a feature is enabled for a given context\n    feature_set = {\"user_id\": user_id}\n    return cache.get().evaluate_feature(\"variant_a\", feature_set, default=False)\n\n\n@tracer.capture_method\ndef is_variant_b_enabled(user_id: int) -> bool:\n    # Use the provider instance to evaluate if a feature is enabled for a given context\n    feature_set = {\"user_id\": user_id}\n    return cache.get().evaluate_feature(\"variant_b\", feature_set, default=False)\n\n\n@tracer.capture_method\ndef lambda_handler(event, context):\n    user_id = event.get(\"user_id\", None)\n    if not user_id:\n        return {\"message\": \"user_id parameter is missing\"}\n\n    active_variant = get_active_variant(user_id)\n    is_variant_a = is_variant_a_enabled(user_id)\n    is_variant_b = is_variant_b_enabled(user_id)\n\n    return {\n        \"user_id\": user_id,\n        \"active_variant\": active_variant,\n        \"variant_a\": is_variant_a,\n        \"variant_b\": is_variant_b,\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Generating Traces with AWS X-Ray and Powertools for AWS Lambda (Python)\nDESCRIPTION: This Python Lambda function code integrates AWS X-Ray for distributed tracing. The AWS X-Ray SDK captures traces for each API endpoint execution and the Lambda handler itself. It leverages Powertools for structured logging, enhancing observability by logging requests and responses.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom aws_xray_sdk.core import xray_recorder\n\nfrom aws_lambda_powertools import Logger\nfrom aws_lambda_powertools.event_handler import APIGatewayRestResolver\nfrom aws_lambda_powertools.logging import correlation_paths\n\nlogger = Logger(service=\"APP\")\n\napp = APIGatewayRestResolver()\n\n\n@app.get(\"/hello/<name>\")\n@xray_recorder.capture('hello_name')\ndef hello_name(name):\n    logger.info(f\"Request from {name} received\")\n    return {\"message\": f\"hello {name}!\"}\n\n\n@app.get(\"/hello\")\n@xray_recorder.capture('hello')\ndef hello():\n    logger.info(\"Request from unknown received\")\n    return {\"message\": \"hello unknown!\"}\n\n\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST, log_event=True)\n@xray_recorder.capture('handler')\ndef lambda_handler(event, context):\n    return app.resolve(event, context)\n```\n```\n\n----------------------------------------\n\nTITLE: Tracing aiohttp Requests\nDESCRIPTION: This Python code demonstrates how to trace `aiohttp` requests using the `aiohttp_trace_config` function. It creates a valid `aiohttp.TraceConfig` object that integrates with the X-Ray SDK to capture request details.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/tracing_aiohttp.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Custom Boto Client Example in Python\nDESCRIPTION: Demonstrates the use of a custom boto3 client with AWS Powertools Parameters. This allows the ability to pass a custom client altogether, which can be useful when using VPC private endpoints or for testing when injecting fake instances.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/parameters/src/custom_boto_client.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using event_source Decorator for Lambda Event Parsing\nDESCRIPTION: Shows an alternative method of parsing Lambda events using the event_source decorator, which automatically handles event parsing for API Gateway Proxy events\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/apigw_proxy_decorator.py\"\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Parameter Store Configuration\nDESCRIPTION: Configuring DynamoDB providers for single and multiple parameter retrieval with custom table structures and endpoint configuration\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nbuiltin_provider_dynamodb_single_parameter.py\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsam_dynamodb_table_single.yaml\n```\n\nLANGUAGE: python\nCODE:\n```\nbuiltin_provider_dynamodb_custom_endpoint.py\n```\n\nLANGUAGE: python\nCODE:\n```\nbuiltin_provider_dynamodb_recursive_parameter.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets from AWS Secrets Manager in Python\nDESCRIPTION: Demonstrates fetching secrets using AWS Powertools Parameters utility from AWS Secrets Manager\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/getting_started_secret.py\"\n```\n\n----------------------------------------\n\nTITLE: Testing clear_caches function globally\nDESCRIPTION: This code illustrates the use of the `clear_caches` standalone function to clear all caches globally when using multiple providers. It is particularly important when tests affect shared global state.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\n    def test_clear_caches_global():\n        clear_caches()  # Clears global caches to reset state\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest SSM Parameters with Force Fetch\nDESCRIPTION: Demonstrates how to always fetch the latest parameter from the parameter store by using the `force_fetch` parameter across different AWS services\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsingle_ssm_parameter_force_fetch.py\n```\n\nLANGUAGE: python\nCODE:\n```\nrecursive_ssm_parameter_force_fetch.py\n```\n\nLANGUAGE: python\nCODE:\n```\nsecret_force_fetch.py\n```\n\nLANGUAGE: python\nCODE:\n```\nappconfig_force_fetch.py\n```\n\n----------------------------------------\n\nTITLE: Configuring a New Route in Lambda - Python\nDESCRIPTION: This code snippet implements a new Lambda function that greets a user by their name, extracted from the URL path parameters. It enhances the application by accepting dynamic input.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\n\ndef hello_name(name):\n    return {\"statusCode\": 200, \"body\": json.dumps({\"message\": f\"hello {name}!\"})}\n\n\ndef lambda_handler(event, context):\n    name = event[\"pathParameters\"][\"name\"]\n    return hello_name(name)\n```\n\n----------------------------------------\n\nTITLE: Example Output Payload from Bedrock Agent Lambda\nDESCRIPTION: Response payload sent back to Amazon Bedrock from the Lambda function after processing the agent request. Contains the response data that will be used by the Bedrock agent to continue the conversation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/getting_started_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Transform S3 Stream and Return New Object in Python\nDESCRIPTION: This code snippet illustrates applying transformations on S3 data stream and returning the modified stream. It needs proper external libraries to support transformations. Inputs typically involve the initial S3 stream, with the output being a new stream after transformations. Ensure proper handling of stream content type.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_transform.py\"\n```\n\n----------------------------------------\n\nTITLE: Fetching All Enabled Features with Context in Python\nDESCRIPTION: This code demonstrates fetching all enabled features using a context input to reduce API costs and gaining insights into multiple features. The `get_enabled_features` method helps retrieve features applicable per context without iterating each feature evaluation individually.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/getting_all_enabled_features.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining Least-Privileged IAM Permissions with SAM\nDESCRIPTION: This YAML snippet demonstrates defining the least-privileged IAM permissions for a Lambda function using AWS SAM. It showcases how to restrict permissions for the Lambda Powertools. The `hl_lines` attribute specifies which lines are important.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n\"--8<-- \\\"examples/homepage/install/sar/scoped_down_iam.yaml\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Event Parsing with Envelope Decorator in Python\nDESCRIPTION: Showcases using the event_parser decorator to extract and parse specific portions of complex nested JSON structures from event sources like EventBridge\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parser.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parser/src/envelope_with_event_parser.py\"\n```\n\n----------------------------------------\n\nTITLE: Skipping CSV Rows Using Python Seek\nDESCRIPTION: This showcases using Python’s seek to skip initial rows in a large uniform CSV for efficient data processing. Requires prior knowledge of row size and offsets. Inputs include seek offset positions. It is efficient for large datasets where memory usage needs to be optimized.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_csv_stream_seek.py\"\n```\n\n----------------------------------------\n\nTITLE: Working with Dataclasses (Python)\nDESCRIPTION: This snippet shows how to integrate data masking with Python dataclasses. Dataclasses are automatically converted to dictionaries, ensuring compatibility with masking and encryption operations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/working_with_dataclass_types.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Secrets in AWS Secrets Manager in Python\nDESCRIPTION: Shows how to set and update secrets in AWS Secrets Manager with minimal API calls\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/getting_started_setting_secret.py\"\n```\n\n----------------------------------------\n\nTITLE: Splitting GraphQL Operations with Router in Python\nDESCRIPTION: Demonstrates how to split GraphQL operations across multiple files using the Router feature, allowing for better code organization and maintenance\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/split_operation_module.py\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/split_operation.py\"\n```\n\n----------------------------------------\n\nTITLE: SQS Standard Batch Processing Diagram\nDESCRIPTION: A sequence diagram representing the batch processing flow for SQS Standard queues using BatchProcessor in AWS Lambda. It illustrates interactions and message handling between SQS and Lambda services.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant SQS queue\n    participant Lambda service\n    participant Lambda function\n    Lambda service->>SQS queue: Poll\n    Lambda service->>Lambda function: Invoke (batch event)\n    Lambda function->>Lambda service: Report some failed messages\n    activate SQS queue\n    Lambda service->>SQS queue: Delete successful messages\n    SQS queue-->>SQS queue: Failed messages return\n    Note over SQS queue,Lambda service: Process repeat\n    deactivate SQS queue\n```\n\n----------------------------------------\n\nTITLE: Adjusting Cache TTL for SSM Parameter in Python\nDESCRIPTION: Shows how to customize the cache time-to-live (TTL) for parameter retrieval with custom max_age\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/single_ssm_parameter_with_cache.py\"\n```\n\n----------------------------------------\n\nTITLE: Parameter Value Transformation and Deserialization\nDESCRIPTION: Handling parameter transformations for JSON and Base64 encoded values, with options for error handling during multiple parameter retrieval\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nworking_with_transform_high_level.py\n```\n\nLANGUAGE: python\nCODE:\n```\nworking_with_transform_provider.py\n```\n\nLANGUAGE: python\nCODE:\n```\nhandling_error_transform.py\n```\n\n----------------------------------------\n\nTITLE: CDK Script for DynamoDB Setup\nDESCRIPTION: This Python snippet shows parts of an AWS CDK script meant to configure a DynamoDB table for use with idempotency features. The configuration includes specific attribute settings required for idempotency record management. It helps automate infrastructure setup using AWS CDK.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/templates/cdk.py\"\n```\n\n----------------------------------------\n\nTITLE: Idempotent_function Decorator with Dataclass\nDESCRIPTION: A Python snippet demonstrating the use of the idempotent_function decorator with a dataclass. It allows full flexibility for making any synchronous function idempotent, offering advanced use cases involving data extraction to create idempotency keys.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/src/working_with_idempotent_function_dataclass.py\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dimensions to Metrics in Python\nDESCRIPTION: This code snippet explains how to add dimensions using the 'add_dimension' method. Proper setup requires setting up the environment variables 'POWERTOOLS_METRICS_NAMESPACE' and 'POWERTOOLS_SERVICE_NAME'.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/add_dimension.py\"\n```\n\n----------------------------------------\n\nTITLE: Custom S3 Store Provider Class Definition\nDESCRIPTION: Implementation of a custom store provider class that uses Amazon S3 as the backend storage. Shows required method implementations for get_raw_configuration and get_configuration.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/custom_s3_store_provider.py\"\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Event with JMESPath using Validator Decorator in Python\nDESCRIPTION: This code demonstrates using the `envelope` parameter in the `validator` decorator to unwrap a portion of the event using a JMESPath expression before validation. This is useful when only a specific part of the event needs to be validated against a schema.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2 8 14\"\n    --8<-- \"examples/validation/src/getting_started_validator_unwrapping_function.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Working with Custom Types (Python)\nDESCRIPTION: This snippet demonstrates how to work with custom data types when masking or encrypting data. It showcases that the custom types are automatically converted into dictionaries before masking and encrypting operations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/working_with_custom_types.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Fetching AppConfig Configurations in Python\nDESCRIPTION: Demonstrates retrieving application configurations from AWS AppConfig with caching support\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/getting_started_appconfig.py\"\n```\n\n----------------------------------------\n\nTITLE: Read Individual File in ZIP as Stream with Python\nDESCRIPTION: This allows reading a specific file in a ZIP stream using Python's zipfile module. Parameters include file index/identifier within the ZIP archive. Outputs are bytes of the targeted file content. This doesn't support combining with other transformations due to multiple files per ZIP structure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_transform_zipfile.py\"\n```\n\n----------------------------------------\n\nTITLE: Mocking DynamoDB I/O Operations for Idempotency Testing in Python\nDESCRIPTION: Demonstrates how to mock DynamoDB I/O operations for testing the idempotency utility by passing a mocked Table resource or stubbing various methods.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/tests/test_with_io_operations.py\"\n```\n\n----------------------------------------\n\nTITLE: SQS FIFO Processing Skipping Group on Error\nDESCRIPTION: This Python code demonstrates how to enable the `skip_group_on_error` option when processing SQS FIFO messages with `BatchProcessor`.  This option allows the processor to continue processing messages from different group IDs even if messages from a previous group ID have failed, enhancing overall processing efficiency.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_sqs_fifo_skip_on_error.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Rotating AWS Secrets Manager Secrets with Python Lambda\nDESCRIPTION: Implements a Lambda function for AWS Secrets Manager rotation using the SecretsManagerEvent data model. The function processes rotation events and updates secrets accordingly.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/secrets_manager.py\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Validator Decorator\nDESCRIPTION: This code represents a sample JSON payload that would be validated against a defined schema using the validator decorator. The payload's structure and data types should align with the constraints specified in the corresponding schema to pass validation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n    --8<-- \"examples/validation/src/getting_started_validator_decorator_payload.json\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Deserializing TSV Data Using CsvTransform in Python\nDESCRIPTION: This demonstrates deserializing tab-separated values data using Python's CsvTransform with a specified delimiter. Key parameters include CsvTransform configuration with delimiter set as '\t'. Outputs are dictionary objects of parsed TSV rows. Proper configuration of CsvTransform is key for accuracy.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_transform_tsv.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing API Gateway Proxy Event in Lambda Python\nDESCRIPTION: This snippet illustrates how to process an API Gateway REST API or HTTP API event using v1 proxy integration with Python and AWS Lambda.  It relies on a data class from AWS Lambda Powertools. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"1 4\"\n--8<-- \"examples/event_sources/src/apigw_proxy_decorator.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Powertools Layer\nDESCRIPTION: This Terraform snippet provides an example of how to deploy Powertools for AWS Lambda (Python) using Terraform. It demonstrates the configuration required to integrate the Serverless Application Repository (SAR) application into your Terraform infrastructure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_16\n\nLANGUAGE: terraform\nCODE:\n```\n--8<-- \"examples/homepage/install/sar/terraform.tf\"\n```\n\n----------------------------------------\n\nTITLE: Processing CloudWatch Logs Event in Lambda Python\nDESCRIPTION: This code demonstrates how to handle CloudWatch Logs events in a Lambda function using Python. It decodes, decompresses, and parses the JSON data from the event using a helper function. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2-3 8\"\n--8<-- \"examples/event_sources/src/cloudwatch_logs.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Datetime-Based Feature Flag Implementation in Python\nDESCRIPTION: This Python code demonstrates how to enable feature flags based on specific dates and times. It uses `SCHEDULE_BETWEEN_DATETIME_RANGE` to define the time period when the feature is enabled.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Time based feature flag example\"\"\"\nimport json\nimport os\n\nfrom aws_lambda_powertools import Tracer\nfrom aws_lambda_powertools.utilities.feature_flags import FeatureFlagsProvider, LazyLoadingCache\n\ntracer = Tracer()\nFEATURE_FLAG_ENV = os.getenv(\"FEATURE_FLAG_FILE\", \"datetime_features.json\")\n\ncache = LazyLoadingCache(load_function=lambda: FeatureFlagsProvider(config_file=FEATURE_FLAG_ENV, logger=None))\n\n\n@tracer.capture_method\ndef is_christmas_sale_enabled(username: str) -> bool:\n    # Use the provider instance to evaluate if a feature is enabled for a given context\n    feature_set = {\"username\": username}\n    return cache.get().evaluate_feature(\"christmas_sale\", feature_set, default=False)\n\n\n@tracer.capture_method\ndef lambda_handler(event, context):\n    username = event.get(\"username\", None)\n    if not username:\n        return {\"message\": \"username parameter is missing\"}\n\n    is_christmas_sale = is_christmas_sale_enabled(username)\n\n    return {\n        \"username\": username,\n        \"christmas_sale\": is_christmas_sale,\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Processing IoT Core Thing Group Membership Events with Python Lambda\nDESCRIPTION: Demonstrates handling IoT Core registry events for thing group membership changes using the IoTRegistryAddOrRemoveThingFromThingGroupEvent data model. This processes events when things are added to or removed from groups.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/iot_registry_add_or_remove_from_thing_group_event.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing SNS Events with Python Lambda\nDESCRIPTION: Demonstrates handling Simple Notification Service (SNS) events in Lambda using the SNSEvent data model. The function processes published messages and extracts relevant information from the notification.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/sns_event.py\"\n```\n\n----------------------------------------\n\nTITLE: Implementing X-Ray SDK Tracing in Python Lambda\nDESCRIPTION: Example showing how to enrich AWS X-Ray traces with annotations and metadata using the AWS X-Ray SDK directly. Includes cold start tracking, user annotations, and response metadata capture.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_xray_sdk.core import patch_all, xray_recorder\n\nfrom aws_lambda_powertools import Logger\nfrom aws_lambda_powertools.event_handler import APIGatewayRestResolver\nfrom aws_lambda_powertools.logging import correlation_paths\n\nlogger = Logger(service=\"APP\")\n\napp = APIGatewayRestResolver()\ncold_start = True\npatch_all()\n\n\n@app.get(\"/hello/<name>\")\n@xray_recorder.capture('hello_name')\ndef hello_name(name):\n    subsegment = xray_recorder.current_subsegment()\n    subsegment.put_annotation(key=\"User\", value=name)\n    logger.info(f\"Request from {name} received\")\n    return {\"message\": f\"hello {name}!\"}\n\n\n@app.get(\"/hello\")\n@xray_recorder.capture('hello')\ndef hello():\n    subsegment = xray_recorder.current_subsegment()\n    subsegment.put_annotation(key=\"User\", value=\"unknown\")\n    logger.info(\"Request from unknown received\")\n    return {\"message\": \"hello unknown!\"}\n\n\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST, log_event=True)\n@xray_recorder.capture('handler')\ndef lambda_handler(event, context):\n    global cold_start\n\n    subsegment = xray_recorder.current_subsegment()\n    subsegment.put_annotation(key=\"ColdStart\", value=cold_start)\n\n    if cold_start:\n        cold_start = False\n\n    result = app.resolve(event, context)\n    subsegment.put_metadata(\"response\", result)\n\n    return result\n```\n\n----------------------------------------\n\nTITLE: Tracing Generator Function with capture_method\nDESCRIPTION: This Python code demonstrates how to trace a generator function using the `capture_method` decorator. The `capture_method` is applied to the generator function, enabling tracing of the generator's execution and yielded values.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/capture_method_generators.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Sample DynamoDB Event\nDESCRIPTION: This JSON snippet presents an example of the DynamoDB Streams event structure received by the Lambda function.  It shows an array of records, each representing a change in the DynamoDB table, including details like eventID, eventName, and dynamodb attributes.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_dynamodb_event.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Erasing Data with Custom Masking - Python\nDESCRIPTION: This Python code snippet shows how to erase sensitive data by replacing it with a placeholder ('*****') or a custom mask. It operates based on specified fields and supports advanced masking behavior.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/data_masking/src/getting_started_erase_data.py\"\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration for Idempotency Management\nDESCRIPTION: This snippet demonstrates the configuration for connecting to a Redis cache layer with SSL settings for enhanced security. It includes parameters for Redis endpoint and port.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" Initialization of RedisCachePersistenceLayer for managing idempotency records. \n   The setup includes SSL settings for secure connections. \n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Serializing Metrics for Datadog Provider in Python\nDESCRIPTION: This code snippet demonstrates the serialize_metric_set method of the DatadogProvider class. It shows how the metrics are serialized into a format suitable for sending to Datadog.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/metrics/provider_datadog.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef serialize_metric_set(self) -> List[Dict[str, Any]]:\n    if self.flush_to_log:\n        return self.metrics_collection.flush()\n    return []\n```\n\n----------------------------------------\n\nTITLE: Decryption Context for Integrity (Python)\nDESCRIPTION: This code snippet shows how to use encryption context for adding metadata to decryption operations and verifying it during decryption. The encryption context ensures the integrity and authenticity of the encrypted data and is crucial for preventing confused deputy situations. Encryption context must match during decryption, otherwise the operation will fail.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/getting_started_decryption_context.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Data Models for AppSync Resolver Events\nDESCRIPTION: This example shows how to create a custom data model by subclassing AppSyncResolverEvent. It demonstrates adding custom methods to handle incoming events and using the custom model in the resolve method.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools.event_handler import AppSyncResolver\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\nfrom aws_lambda_powertools.utilities.data_classes import AppSyncResolverEvent\n\nclass CustomAppSyncResolverEvent(AppSyncResolverEvent):\n    def get_user_id(self) -> str:\n        return self.identity.claims.get(\"sub\", \"\")\n\napp = AppSyncResolver()\n\n@app.resolver(type_name=\"Query\", field_name=\"getUser\")\ndef get_user(event: CustomAppSyncResolverEvent):\n    user_id = event.get_user_id()\n    return {\n        \"id\": user_id,\n        \"username\": f\"user_{user_id}\",\n    }\n\ndef lambda_handler(event: dict, context: LambdaContext) -> dict:\n    return app.resolve(event, context, data_model=CustomAppSyncResolverEvent)\n```\n\n----------------------------------------\n\nTITLE: Accessing Processed Messages with Context Manager in Python\nDESCRIPTION: Shows how to use a context manager to access processed messages, including successful and failed record processing details\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/context_manager_access.py\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recursive SSM Parameters in Python\nDESCRIPTION: Shows how to recursively fetch multiple parameters from a specific path in AWS Systems Manager Parameter Store, with path name stripping\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/getting_started_recursive_ssm_parameter.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing IoT Core Thing Type Registry Events with Python Lambda\nDESCRIPTION: Shows how to handle IoT Core registry events for thing type operations using the IoTRegistryThingTypeEvent data model. The function responds to creation, updates, and state changes of IoT thing types.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/iot_registry_thing_type_event.py\"\n```\n\n----------------------------------------\n\nTITLE: Tracing a Function with capture_method\nDESCRIPTION: This Python code demonstrates how to use the `capture_method` decorator from the `aws_lambda_powertools.tracing` module to trace an arbitrary synchronous function.  The decorator automatically captures the function's response and stores it as JSON, by default. This provides insights into function execution and helps in debugging.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/capture_method.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Processing SES Events with Python Lambda\nDESCRIPTION: Shows how to handle Simple Email Service (SES) events in Lambda using the SESEvent data model. The function processes incoming emails or delivery status notifications from SES.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/ses_event.py\"\n```\n\n----------------------------------------\n\nTITLE: Custom JMESPath Function for Advanced Decoding\nDESCRIPTION: Demonstrates creating a custom JMESPath function to handle specialized data decoding using zlib compression, extending the built-in powertools functions\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/jmespath_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport zlib\nfrom jmespath import functions\n\nclass CustomFunctions(functions.Functions):\n    @functions.signature({'types': ['string']})\n    def _func_custom_decompress(self, data):\n        return zlib.decompress(data).decode('utf-8')\n```\n\n----------------------------------------\n\nTITLE: SQS Sample Event in JSON\nDESCRIPTION: A JSON sample event demonstrating the structure of an SQS message event when using Pydantic with AWS Lambda batch processing. It includes attributes like sequence number and message ID.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/batch_processing/src/pydantic_sqs_event.json\"\n```\n\n----------------------------------------\n\nTITLE: Passing Additional SDK Arguments in Python\nDESCRIPTION: This code snippet demonstrates how to pass additional arguments to the `AWSEncryptionSDKProvider` via the `provider_options` parameter. This is useful as an escape hatch mechanism for customizing the AWS Encryption SDK, such as choosing a different encryption algorithm.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/changing_default_algorithm.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Working with S3 Store Provider Implementation\nDESCRIPTION: Example implementation showing how to use a custom S3-based feature flag store provider. Demonstrates initialization and usage of feature flags with an S3 backend.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/working_with_own_s3_store_provider.py\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dimension to Datadog Provider in Python\nDESCRIPTION: This code snippet illustrates the add_dimension method of the DatadogProvider class. It shows how to add a dimension (key-value pair) to the Datadog metrics provider's tags.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/metrics/provider_datadog.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef add_dimension(self, name: str, value: str) -> None:\n    self.tags[name] = value\n```\n\n----------------------------------------\n\nTITLE: Importing Pydantic Classes and Utilities\nDESCRIPTION: Illustrates how to import key modules from Pydantic, such as BaseModel, Field, and ValidationError, for model definition and error handling. No external dependencies are required beyond Pydantic. These imports allow defining and validating data structures within your Python applications.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parser.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, Field, ValidationError\n```\n\n----------------------------------------\n\nTITLE: In-Place Transformation of S3 Stream in Python\nDESCRIPTION: The snippet describes in-place transformation of data streams with Python where no new object is returned. Dependencies include transformation-related libraries. It modifies the stream directly with no return value. This is suitable for direct data handling and manipulation scenarios.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_transform_in_place.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing API Gateway Authorizer Request WebSocket in Lambda Python\nDESCRIPTION: This snippet demonstrates processing an API Gateway Authorizer request event for WebSocket APIs using Python. It uses the `APIGatewayAuthorizerRequestEvent` data class. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2-4 8 18\"\n--8<-- \"examples/event_sources/src/apigw_authorizer_request_websocket.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Extracting Feature Flags from Envelope Configuration\nDESCRIPTION: Python example showing how to extract feature flags from an envelope configuration using a JMESPath expression, allowing feature flags to be part of a larger configuration structure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/extracting_envelope.py\"\n```\n\n----------------------------------------\n\nTITLE: Auto-transform parameters by suffix with get_multiple in Python\nDESCRIPTION: This snippet demonstrates how to use the `transform=\"auto\"` feature with the `get_multiple()` method to automatically transform parameters based on their suffix. It retrieves parameters from SSM Parameter Store and infers their type based on suffixes like `.json` and `.binary`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/parameters/src/working_with_auto_transform.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Batch Processor Decorators\nDESCRIPTION: The snippet demonstrates the process of migrating from deprecated batch processor decorators to new methods in version 3 of AWS PowerTools. It transitions from using `@batch_processor` decorator to `process_partial_response` function. Dependencies include the AWS PowerTools utilities for batch processing and data classes for SQS events.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport json\n\nfrom aws_lambda_powertools.utilities.batch import BatchProcessor, EventType, batch_processor, process_partial_response\nfrom aws_lambda_powertools.utilities.data_classes.sqs_event import SQSRecord\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\nprocessor = BatchProcessor(event_type=EventType.SQS)\n\n@tracer.capture_method\ndef record_handler(record: SQSRecord):\n    payload: str = record.body\n    if payload:\n        item: dict = json.loads(payload)\n        logger.info(item)\n\n# BEFORE - v2\n#@batch_processor(record_handler=record_handler, processor=processor)\n#def lambda_handler(event, context: LambdaContext):\n#    return processor.response()\n\n# NOW - v3\ndef lambda_handler(event, context: LambdaContext):\n return process_partial_response(\n      event=event,\n      record_handler=record_handler,\n      processor=processor,\n      context=context,\n   )\n\n```\n\n----------------------------------------\n\nTITLE: Tracing Asynchronous Function with capture_method\nDESCRIPTION: This Python code demonstrates how to trace asynchronous functions using the `capture_method` decorator from the `aws_lambda_powertools.tracing` module.  The code shows how to apply the decorator to an `async` function, enabling tracing of asynchronous operations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/capture_method_async.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Working with Lambda Context Methods and Properties\nDESCRIPTION: Showcases how to access and utilize various methods and properties of the Lambda context object using type hinting. Provides type safety and improved development experience.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/typing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef handler(event, context: LambdaContext):\n    function_name = context.function_name\n    remaining_time = context.get_remaining_time_in_millis()\n    aws_request_id = context.aws_request_id\n```\n\n----------------------------------------\n\nTITLE: Adding Multi-Value Metrics in Python\nDESCRIPTION: This code snippet shows how to use 'add_metric()' with the same metric name multiple times, grouping the values into a list. The usage is beneficial when a metric records multiple data points under the same identifier.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/add_multi_value_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Dimensions in Python\nDESCRIPTION: This snippet involves using 'set_default_dimensions()' method to persist certain dimensions across different metric logs and invocations. This can improve organizational consistency and retrieval.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/set_default_dimensions.py\"\n```\n\n----------------------------------------\n\nTITLE: Beyond Boolean Feature Configuration JSON\nDESCRIPTION: This JSON configures a feature flag named `premium_tier` that returns a list of features instead of a boolean value. It demonstrates returning non-boolean data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"premium_tier\": {\n      \"default\": [],\n      \"rules\": {\n        \"admin_users\": {\n          \"when_match\": [\"feature_A\", \"feature_B\", \"feature_C\"],\n          \"conditions\": [\n            {\n              \"key\": \"username\",\n              \"value\": \"admin\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Providers for Multiple Services\nDESCRIPTION: Creating custom parameter providers for Hashicorp Vault, Amazon S3, and other external services by inheriting the BaseProvider class\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nworking_with_own_provider_vault.py\n```\n\nLANGUAGE: python\nCODE:\n```\ncustom_provider_vault.py\n```\n\nLANGUAGE: python\nCODE:\n```\nworking_with_own_provider_s3.py\n```\n\nLANGUAGE: python\nCODE:\n```\ncustom_provider_s3.py\n```\n\n----------------------------------------\n\nTITLE: Defining AWS SAM Template for CloudWatch EMF\nDESCRIPTION: This snippet provides an example AWS Serverless Application Model (SAM) template configuration that is utilized for setting up CloudWatch EMF metrics within a serverless environment. It's necessary to have the AWS SAM CLI installed for deployment.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"examples/metrics/sam/template.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Adding Datadog Metrics in Python Lambda Function\nDESCRIPTION: Example of how to add Datadog metrics in a Lambda function using the DatadogMetrics class with the add_metric method.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/add_datadog_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Dataclass Output Serialization with Idempotency (Inferring)\nDESCRIPTION: This example demonstrates using `DataclassSerializer` to serialize a function's output annotated with a Dataclass. The serializer automatically infers the Dataclass type from the return type annotation. This ensures that the data returned from the persistent storage is correctly deserialized back into a Dataclass instance, maintaining type consistency when using `@idempotent_function`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"9 30 38 41 51\"\n--8<-- \"examples/idempotency/src/working_with_dataclass_deduced_output_serializer.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Processor Failure Handling in Python\nDESCRIPTION: Demonstrates how to configure batch processing to handle partial batch failures by setting the raise_on_entire_batch_failure option to False\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/working_with_entire_batch_fail.py\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Boto3 Client with Feature Flags\nDESCRIPTION: Example showing how to provide a custom pre-configured boto3 client when initializing the feature flags AppConfig provider.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/custom_boto_client_feature_flags.py\"\n```\n\n----------------------------------------\n\nTITLE: Mocking get_parameter with unittest.mock\nDESCRIPTION: This code uses the unittest.mock library to fully mock the `get_parameter` function by replacing it with a MagicMock. This allows for more detailed inspection of the arguments passed to the mocked function during tests.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\nfrom unittest.mock import patch\n\ndef test_get_parameter_with_mock():\n    with patch('aws_lambda_powertools.utilities.parameters.get_parameter') as get_parameter_mock:\n        get_parameter_mock.return_value = 'mocked_value'\n        assert some_function() == expected_value\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Metrics in Python\nDESCRIPTION: This code demonstrates how to add high-cardinality metadata to Metrics logs using the `add_metadata` method. This is useful for searching contextual information along with your metrics in your logs, but it won't be available during metrics visualization.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools import Metrics\nfrom aws_lambda_powertools.metrics import MetricUnit\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\nmetrics = Metrics(service=\"MyApplication\")\n\n\n@metrics.log_metrics\ndef handler(event: dict, context: LambdaContext) -> dict:\n    metrics.add_metric(name=\"SuccessfulInvocations\", unit=MetricUnit.Count, value=1)\n    metrics.add_metadata(key=\"invocationId\", value=context.aws_request_id)\n\n    return {\n        \"message\": \"Hello world\",\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Processing API Gateway Authorizer Request in Lambda Python\nDESCRIPTION: This code snippet shows how to process an API Gateway Authorizer request event in a Lambda function using Python. It uses the `APIGatewayAuthorizerRequestEvent` data class. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2-4 8 18\"\n--8<-- \"examples/event_sources/src/apigw_authorizer_request.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Application Code for Testing with DynamoDB Local in Python\nDESCRIPTION: Sample application code used in the test for idempotency with DynamoDB Local.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/tests/app_test_dynamodb_local.py\"\n```\n\n----------------------------------------\n\nTITLE: Overwriting SSM Parameter in Python\nDESCRIPTION: Shows how to overwrite an existing parameter in AWS Systems Manager Parameter Store\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/getting_started_set_ssm_parameter_overwrite.py\"\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Persistence Layer Configuration\nDESCRIPTION: This snippet sets up a DynamoDBPersistenceLayer, which allows you to use or create a DynamoDB table for managing idempotency states. Parameters such as table_name and key_attr can be customized for specific use cases.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" DynamoDB Persistence Layer establishment for idempotency state. \n   This configures the necessary attributes for storing and retrieving idempotency records. \n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Partial Batch Processor in Python\nDESCRIPTION: Demonstrates how to create a custom batch processor by inheriting from BasePartialProcessor and implementing required methods\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/custom_partial_processor.py\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameters by Name in Python\nDESCRIPTION: Demonstrates fetching distinct parameters by their full name with optional custom caching and transformation\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/getting_started_parameter_by_name.py\"\n```\n\n----------------------------------------\n\nTITLE: Single Metric with Default Dimensions Inheritance in Python\nDESCRIPTION: This snippet demonstrates how to use the `default_dimensions` argument in `single_metric` to inherit default dimensions while adding a new metric. In the first `single_metric` call, default dimensions are inherited and new dimensions are added and in the second call,  only the default dimension `service` is used.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools import Metrics\nfrom aws_lambda_powertools.metrics import MetricUnit\n\nmetrics = Metrics(service=\"MyApplication\")\nmetrics.add_dimension(name=\"operation\", value=\"add\")\n\n\ndef handler(event, context):\n    metrics.single_metric(\n        name=\"ProcessingLatency\",\n        unit=MetricUnit.Milliseconds,\n        value=100,\n        default_dimensions=True,\n        dimensions={\"other\": \"value\"},\n    )\n    metrics.single_metric(\n        name=\"SingleMetric\", unit=MetricUnit.Count, value=1, default_dimensions=False\n    )\n\n    return {}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags with Custom Boto Config\nDESCRIPTION: Example demonstrating how to use a custom boto configuration with the feature flags AppConfig provider to customize AWS client behavior.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/custom_boto_config_feature_flags.py\"\n```\n\n----------------------------------------\n\nTITLE: Masking Rules Example - Python\nDESCRIPTION: A snippet showing custom data masking rules applied to specific data fields in Python. It caters to flexible masking strategies such as dynamic masks and custom patterns.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/data_masking/src/custom_data_masking.py\"\n```\n\n----------------------------------------\n\nTITLE: Multiple EMF Blobs Module for Testing\nDESCRIPTION: Module implementation for testing multiple EMF blobs functionality in the Metrics utility.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/assert_multiple_emf_blobs_module.py\"\n```\n\n----------------------------------------\n\nTITLE: Testing Idempotency with DynamoDB Local in Python\nDESCRIPTION: Shows how to test the idempotency utility with DynamoDB Local by replacing the DynamoDB client used by the persistence layer.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/tests/test_with_dynamodb_local.py\"\n```\n\n----------------------------------------\n\nTITLE: Extending BatchProcessor with Custom Failure Handling in Python\nDESCRIPTION: Shows how to subclass BatchProcessor and override success and failure handling methods to add custom processing logic\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/extending_processor_handlers.py\"\n```\n\n----------------------------------------\n\nTITLE: Field Validator for Event Data Validation\nDESCRIPTION: Uses Pydantic's field_validator decorator to perform quick validation on individual fields, ensuring specific constraints are met\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parser.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parser/src/field_validator.py\"\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON for Complex Expressions Erasing\nDESCRIPTION: This JSON showcases the output after erasing data using a complex expression. The result highlights conditional masking based on postcode values.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_complex_search_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Processing Application Load Balancer Event in Lambda Python\nDESCRIPTION: This code shows how to handle an Application Load Balancer event in a Lambda function with Python. It relies on data classes provided by AWS Lambda Powertools. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"1 4\"\n--8<-- \"examples/event_sources/src/albEvent.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-commit Checks in YAML\nDESCRIPTION: This snippet shows the configuration for pre-commit checks, including merge conflict detection, code linting, CloudFormation linting, Markdown linting, GitHub Actions linting, Terraform linting, and secrets detection.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.4.0\n  hooks:\n    - id: check-merge-conflict\n- repo: https://github.com/aws-cloudformation/cfn-lint\n  rev: v0.77.4\n  hooks:\n    - id: cfn-lint\n- repo: https://github.com/igorshubovych/markdownlint-cli\n  rev: v0.35.0\n  hooks:\n    - id: markdownlint\n- repo: https://github.com/rhysd/actionlint\n  rev: v1.6.25\n  hooks:\n    - id: actionlint\n- repo: https://github.com/antonbabenko/pre-commit-terraform\n  rev: v1.81.0\n  hooks:\n    - id: terraform_fmt\n- repo: https://github.com/awslabs/git-secrets\n  rev: b9e96b3cf19da695e9f7fe41eb2a89dc7d78bc07\n  hooks:\n    - id: git-secrets\n```\n\n----------------------------------------\n\nTITLE: Custom Idempotency Key Prefix in Standalone Functions\nDESCRIPTION: This example shows how to use a custom prefix for the Idempotency Key when using `@idempotent_function` for standalone functions.  The `key_prefix` parameter allows decoupling of the idempotency key name from the function name, useful when refactoring or ensuring consistent naming.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"32\"\n--8<-- \"examples/idempotency/src/working_with_custom_idempotency_key_prefix_standalone.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Single Metric with Different Dimensions in Python\nDESCRIPTION: This code shows how to use `single_metric` to create a metric with different dimensions than the default. It initializes a Metrics object, adds a default dimension, and then creates a single metric with a different set of dimensions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools import Metrics\nfrom aws_lambda_powertools.metrics import MetricUnit\n\nmetrics = Metrics(service=\"MyApplication\")\nmetrics.add_dimension(name=\"operation\", value=\"add\")\n\n\ndef handler(event, context):\n    metrics.single_metric(\n        name=\"ProcessingLatency\",\n        unit=MetricUnit.Milliseconds,\n        value=100,\n        dimensions={\"service\": \"SubmissionService\", \"operation\": \"submit\"},\n    )\n\n    return {}\n\n```\n\n----------------------------------------\n\nTITLE: Switching to JMESPath Query Function\nDESCRIPTION: The snippet replaces the `extract_data_from_envelope` function with the `query` function for working with JMESPath in AWS PowerTools. This change clarifies usage and aligns with similar tools. The handler demonstrates how data extraction is performed using a simplified, renamed function.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/upgrade.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom aws_lambda_powertools.utilities.jmespath_utils import extract_data_from_envelope, query\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\n\ndef handler(event: dict, context: LambdaContext) -> dict:\n    # BEFORE - v2\n#   some_data = extract_data_from_envelope(data=event, envelope=\"powertools_json(body)\")\n\n    # NOW - v3\n    some_data = query(data=event, envelope=\"powertools_json(body)\")\n\n    return {\"data\": some_data}\n\n```\n\n----------------------------------------\n\nTITLE: Beyond Boolean Feature Flag Implementation in Python\nDESCRIPTION: This snippet showcases how to return non-boolean values from feature flags by setting `boolean_type` to `false`. The feature flag can return any JSON value (dictionary, list, string, etc.).\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Beyond boolean feature flag example\"\"\"\nimport json\nimport os\n\nfrom aws_lambda_powertools.utilities.feature_flags import FeatureFlagsProvider\n\nFEATURE_FLAG_ENV = os.getenv(\"FEATURE_FLAG_FILE\", \"beyond_boolean_features.json\")\n\nprovider = FeatureFlagsProvider(config_file=FEATURE_FLAG_ENV, logger=None, boolean_type=False)\n\n\ndef lambda_handler(event, context):\n    # Mock user context, you would resolve this from event or authentication info\n    username = event.get(\"username\", None)\n    if not username:\n        return {\"message\": \"username parameter is missing\"}\n\n    feature_set = {\"username\": username}\n\n    # Use the provider instance to evaluate if a feature is enabled for a given context\n    premium_features = provider.evaluate_feature(\"premium_tier\", feature_set, default=[])\n\n    return {\"username\": username, \"premium_features\": premium_features}\n\n```\n\n----------------------------------------\n\nTITLE: Application Code for Testing Mocked DynamoDB I/O Operations in Python\nDESCRIPTION: Sample application code used in the test for mocking DynamoDB I/O operations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/tests/app_test_io_operations.py\"\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Data Transform Using Python\nDESCRIPTION: Illustrates creating a custom JSON data transformation in Python by extending a BaseTransform class. It requires defining a transform method in your subclass. Key responsibilities include receiving and returning IO[bytes] objects. Custom logic should ensure accurate transformation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_json_transform.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing AppSync Authorizer Event in Lambda Python\nDESCRIPTION: This code snippet demonstrates how to handle an AppSync Authorizer event within a Lambda function using Python.  It leverages the AWS Lambda Powertools library. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"5-7 20\"\n--8<-- \"examples/event_sources/src/appSyncAuthorizer.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Layer with CDK\nDESCRIPTION: This Python snippet shows how to deploy a Lambda Layer using AWS CDK (Cloud Development Kit). It defines a CDK stack to deploy the Lambda Powertools layer. The `hl_lines` attribute specifies which lines are important.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/homepage/install/sar/cdk_sar.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Testing Synchronous GraphQL Resolvers\nDESCRIPTION: Example of testing synchronous GraphQL resolvers by mocking AppSync Lambda events and using app.resolve() or app() methods.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/assert_graphql_response.py\"\n```\n\n----------------------------------------\n\nTITLE: SAM Template for SQS Batch Processing\nDESCRIPTION: This YAML snippet demonstrates the Serverless Application Model (SAM) template configuration for SQS batch processing.  It includes the necessary resources and properties for defining a Lambda function triggered by an SQS queue, along with settings for batching and error handling using a Dead Letter Queue (DLQ).\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/sam/sqs_batch_processing.yaml\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Updated AWS SAM Template for New Route - YAML\nDESCRIPTION: This updated SAM template adds a new Lambda function resource to handle incoming requests for the newly defined route '/hello/{name}', allowing requests to be processed dynamically by name.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nAWSTemplateFormatVersion: \"2010-09-09\"\nTransform: AWS::Serverless-2016-10-31\nDescription: Sample SAM Template for powertools-quickstart\nGlobals:\n    Function:\n        Timeout: 3\nResources:\n    HelloWorldFunction:\n        Type: AWS::Serverless::Function\n        Properties:\n            CodeUri: hello_world/\n            Handler: app.lambda_handler\n            Runtime: python3.9\n            Events:\n                HelloWorld:\n                    Type: Api\n                    Properties:\n                        Path: /hello\n                        Method: get\n\n    HelloWorldByNameFunctionName:\n        Type: AWS::Serverless::Function\n        Properties:\n            CodeUri: hello_world/\n            Handler: hello_by_name.lambda_handler\n            Runtime: python3.9\n            Events:\n                HelloWorldName:\n                    Type: Api\n                    Properties:\n                        Path: /hello/{name}\n                        Method: get\nOutputs:\n    HelloWorldApi:\n        Description: \"API Gateway endpoint URL for Prod stage for Hello World function\"\n        Value: !Sub \"https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tags for Datadog Metrics\nDESCRIPTION: Example showing how to set default tags that will persist across Lambda invocations and DatadogMetrics instances.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/set_default_tags.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing CloudWatch Dashboard Custom Widget Event in Lambda Python\nDESCRIPTION: This code demonstrates processing a CloudWatch Dashboard custom widget event in a Lambda function using Python. It extracts information from the event, such as dashboard name and widget details, to return formatted content. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2 7\"\n--8<-- \"examples/event_sources/src/cloudWatchDashboard.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Building the Powertools Layer with CDK (Python)\nDESCRIPTION: This snippet demonstrates how to build the AWS Lambda Powertools layer by passing the version as a context variable during the CDK synthesis process. It requires the specified Powertools for AWS Lambda (Python) version to be available in PyPi.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/layer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncdk synth --context version=1.25.1\n```\n\n----------------------------------------\n\nTITLE: Handling Expired Idempotency Records in AWS Lambda\nDESCRIPTION: This diagram illustrates how expired idempotency records are handled in AWS Lambda. When a record is found but has expired, the function executes again as if it were processing the request for the first time, ensuring data consistency.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_31\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Lambda\n    participant Persistence Layer\n    alt initial request\n        Client->>Lambda: Invoke (event)\n        Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n        activate Persistence Layer\n        Note over Lambda,Persistence Layer: Set record status to INPROGRESS. <br> Prevents concurrent invocations <br> with the same payload\n        Lambda-->>Lambda: Call your function\n        Lambda->>Persistence Layer: Update record with result\n        deactivate Persistence Layer\n        Persistence Layer-->>Persistence Layer: Update record\n        Note over Lambda,Persistence Layer: Set record status to COMPLETE. <br> New invocations with the same payload <br> now return the same result\n        Lambda-->>Client: Response sent to client\n    else retried request\n        Client->>Lambda: Invoke (event)\n        Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n        activate Persistence Layer\n        Persistence Layer-->>Lambda: Already exists in persistence layer.\n        deactivate Persistence Layer\n        Note over Lambda,Persistence Layer: Record status is COMPLETE but expired hours ago\n        loop Repeat initial request process\n            Note over Lambda,Persistence Layer: 1. Set record to INPROGRESS, <br> 2. Call your function, <br> 3. Set record to COMPLETE\n        end\n        Lambda-->>Client: Same response sent to client\n    end\n```\n\n----------------------------------------\n\nTITLE: Adding Datadog Metrics in Python Tests\nDESCRIPTION: This snippet demonstrates functionality for adding Datadog metrics within test cases. It is essential for generating metrics in a test environment and ensures that new metrics are correctly recorded.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n```python\n    --8<-- \"examples/metrics_datadog/src/add_datadog_metrics.py\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Disabling Tracer Response Auto-Capture\nDESCRIPTION: Shows how to disable response auto-capturing in Tracer to prevent exceeding tracing data limits for large batch sizes\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/batch_processing/src/disable_tracing.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing CloudWatch Alarm State Change Action Event in Lambda Python\nDESCRIPTION: This code snippet illustrates how to process a CloudWatch Alarm state change action event within a Lambda function.  It makes use of the `CloudWathAlarmEvent` data class to access alarm details. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2 8\"\n--8<-- \"examples/event_sources/src/cloudwatch_alarm_event.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Required Idempotency Key Implementation\nDESCRIPTION: Example showing how to make idempotency keys required by setting raise_on_no_idempotency_key to True. This ensures that transactions without an idempotency key raise an IdempotencyKeyError.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n@idempotent_function(config=IdempotencyConfig(raise_on_no_idempotency_key=True))\ndef handler(event, context):\n    return {\n        \"statusCode\": 200,\n        \"message\": \"success\"\n    }\n```\n\n----------------------------------------\n\nTITLE: CDK Configuration for Powertools Layer (Python)\nDESCRIPTION: This Python snippet illustrates how to deploy Powertools for AWS Lambda (Python) using AWS Cloud Development Kit (CDK) via the Serverless Application Repository (SAR). It shows how to define the SAR application and its properties within a CDK stack.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/homepage/install/sar/cdk_sar.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Popular Event Source in Python\nDESCRIPTION: This code defines a JSON schema for validating the payload extracted from a popular event source using a built-in envelope. This schema will be applied after the event has been unwrapped.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"7 9 12 17 20\"\n    --8<-- \"examples/validation/src/unwrapping_popular_event_source_schema.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Processing Active MQ Event in Lambda Python\nDESCRIPTION: This code snippet demonstrates how to process an Active MQ event within a Lambda function using Python. It leverages the Active MQ event source data class from AWS Lambda Powertools to handle the event payload.  Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"5 10\"\n--8<-- \"examples/event_sources/src/active_mq_example.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Tracing with in_subsegment Escape Hatch\nDESCRIPTION: This Python code demonstrates how to use the `in_subsegment` method via the Tracer's escape hatch (`tracer.provider`) to trace a specific code block. This is useful when you need features from the underlying AWS X-Ray SDK that are not directly exposed by the Tracer utility.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/sdk_escape_hatch.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Sharing Contextual Data Between Router and App\nDESCRIPTION: Shows how to use append_context to share data between App and Router instances, enabling cross-component data sharing and middleware integration\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/split_operation_append_context.py\"\n```\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/split_operation_append_context_module.py\"\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Configuration for AppConfig Provider\nDESCRIPTION: JSON configuration defining feature flags for use with AppConfig provider, showing the structure expected by the feature flags system.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/feature_flags/src/appconfig_provider_options_features.json\"\n```\n\n----------------------------------------\n\nTITLE: Handling Concurrent Identical Requests in AWS Lambda with Idempotency\nDESCRIPTION: This diagram shows how concurrent identical requests are handled with the idempotency pattern. When a second identical request arrives while the first is still processing, an IdempotencyAlreadyInProgressError is raised to prevent duplicate processing.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_32\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Lambda\n    participant Persistence Layer\n    Client->>Lambda: Invoke (event)\n    Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n    activate Persistence Layer\n    Note over Lambda,Persistence Layer: Set record status to INPROGRESS. <br> Prevents concurrent invocations <br> with the same payload\n      par Second request\n          Client->>Lambda: Invoke (event)\n          Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n          Lambda--xLambda: IdempotencyAlreadyInProgressError\n          Lambda->>Client: Error sent to client if unhandled\n      end\n    Lambda-->>Lambda: Call your function\n    Lambda->>Persistence Layer: Update record with result\n    deactivate Persistence Layer\n    Persistence Layer-->>Persistence Layer: Update record\n    Note over Lambda,Persistence Layer: Set record status to COMPLETE. <br> New invocations with the same payload <br> now return the same result\n    Lambda-->>Client: Response sent to client\n```\n\n----------------------------------------\n\nTITLE: Kinesis Stream CloudWatch Logs Example Event JSON\nDESCRIPTION: This JSON shows the structure of a Kinesis Stream event containing CloudWatch logs.  The event is structured so that the lambda function can extract and process the CloudWatch Logs data. The python code expects this event structure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/kinesisStreamCloudWatchLogsEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Response Capture for StreamingBody\nDESCRIPTION: This snippet shows how to disable automatic response capture when dealing with botocore StreamingBody objects, which can only be read once.  Setting `capture_response=False` prevents the Tracer from consuming the StreamingBody, allowing subsequent code to read it.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/disable_capture_response_streaming_body.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar Values with scalar_types_utils\nDESCRIPTION: This code snippet demonstrates how to use scalar_types_utils to generate values for common AWS AppSync Scalar types such as ID, AWSDate, AWSTime, AWSDateTime, and AWSTimestamp.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools.event_handler.appsync import scalar_types_utils\n\nid_value = scalar_types_utils.make_id()\ndate_value = scalar_types_utils.aws_date()\ntime_value = scalar_types_utils.aws_time()\ndatetime_value = scalar_types_utils.aws_datetime()\ntimestamp_value = scalar_types_utils.aws_timestamp()\n```\n\n----------------------------------------\n\nTITLE: Time-Based Happy Hour Feature Configuration JSON\nDESCRIPTION: This JSON configures a feature flag named `happy_hour` to be enabled only during specific hours (16:00-18:00). It uses the `SCHEDULE_TIME_RANGE` condition key.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"happy_hour\": {\n      \"default\": false,\n      \"rules\": {\n        \"happy_hour_time\": {\n          \"when_match\": true,\n          \"conditions\": [\n            {\n              \"key\": \"SCHEDULE_TIME_RANGE\",\n              \"value\": \"16:00-18:00\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Persistent Store for Idempotency in Python\nDESCRIPTION: Example of creating a custom persistent store by inheriting from BasePersistenceLayer and implementing required methods like _get_record(), _put_record(), _update_record(), and _delete_record().\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/src/bring_your_own_persistent_store.py\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Parameter Retrieval in Python\nDESCRIPTION: Shows how to handle errors when fetching parameters, with options to gracefully manage parameter retrieval failures\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parameters/src/get_parameter_by_name_error_handling.py\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Layer with SAM\nDESCRIPTION: This YAML snippet demonstrates how to define a Lambda Layer using AWS SAM (Serverless Application Model). It includes the necessary resource definition to deploy the Lambda Powertools layer. The `hl_lines` attribute specifies which lines are important.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n\"--8<-- \\\"examples/homepage/install/sar/sam.yaml\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Function Name for Cold Start Metrics in Python\nDESCRIPTION: This snippet shows how to customize the function name dimension for cold start metrics using the `function_name` parameter in the Metrics constructor. This allows you to override the default `context.function_name` value.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools import Metrics\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\nmetrics = Metrics(service=\"MyApplication\", function_name=\"CustomFunctionName\")\n\n\n@metrics.log_metrics(capture_cold_start_metric=True)\ndef handler(event: dict, context: LambdaContext) -> dict:\n    return {\n        \"message\": \"Hello world\",\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Processing API Gateway Authorizer Token Event in Lambda Python\nDESCRIPTION: This code shows how to handle an API Gateway Authorizer token event in a Lambda function using Python. It utilizes the `APIGatewayAuthorizerTokenEvent` data class. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2-4 8\"\n--8<-- \"examples/event_sources/src/apigw_authorizer_token.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Installing specific Powertools extra dependencies\nDESCRIPTION: Install multiple specific extra dependencies for aws-lambda-powertools using pip. This allows you to select the specific optional features you need. It requires Python and pip to be installed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install \\\"aws-lambda-powertools[tracer,parser,datamasking]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: SQS FIFO Batch Processing Without Skip Flag Diagram\nDESCRIPTION: A sequence diagram illustrating the batch processing behavior in AWS Lambda with SQS FIFO queues when the `skip_group_on_error` flag is not used.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_21\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant SQS queue\n    participant Lambda service\n    participant Lambda function\n    Lambda service->>SQS queue: Poll\n    Lambda service->>Lambda function: Invoke (batch event)\n    activate Lambda function\n    Lambda function-->Lambda function: Process 2 out of 10 batch items\n    Lambda function--xLambda function: Fail on 3rd batch item\n    Lambda function->>Lambda service: Report 3rd batch item and unprocessed messages as failure\n    deactivate Lambda function\n    activate SQS queue\n    Lambda service->>SQS queue: Delete successful messages (1-2)\n    SQS queue-->>SQS queue: Failed messages return (3-10)\n    deactivate SQS queue\n```\n\n----------------------------------------\n\nTITLE: Custom Boto Config Example in Python\nDESCRIPTION: Demonstrates the use of a custom botocore config object with AWS Powertools Parameters.  This snippet shows how to pass in a custom botocore config object when constructing built-in provider classes.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/parameters/src/custom_boto_config.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Powertools Validation Dependency\nDESCRIPTION: Install the validation dependency for aws-lambda-powertools using pip. This enables input validation for your Lambda functions. It requires Python and pip to be installed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install \\\"aws-lambda-powertools[validation]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Ignoring HTTP Endpoints\nDESCRIPTION: This Python code demonstrates how to use the `ignore_endpoint` method to prevent certain HTTP endpoints from being traced.  The code provides examples of ignoring endpoints based on hostname and/or URL, using globs (`*`) for pattern matching.  This can be useful for excluding high-volume or sensitive endpoints from tracing.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/ignore_endpoints.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Flag Conditions in JSON\nDESCRIPTION: JSON structure for defining feature flag conditions, where each condition contains action, key, and value properties that determine when a feature flag is enabled.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/feature_flags/src/conditions.json\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting In-Memory Cache in Python\nDESCRIPTION: This snippet demonstrates how to override the default `max_age` parameter when instantiating the store to adjust the in-memory cache duration in Powertools for AWS Lambda (Python).\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom aws_lambda_powertools.utilities.feature_flags import FeatureFlagsProvider\n\nFEATURE_FLAG_ENV = os.getenv(\"FEATURE_FLAG_FILE\", \"getting_started_with_cache_features.json\")\nprovider = FeatureFlagsProvider(config_file=FEATURE_FLAG_ENV, max_age=10, logger=None)  # Cache for 10 seconds\n\n```\n\n----------------------------------------\n\nTITLE: Mock Redis Implementation for Idempotency Testing in Python\nDESCRIPTION: Implementation of a mock Redis class used for testing the idempotency utility with a simulated Redis environment.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/tests/mock_redis.py\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp for Metrics in Python\nDESCRIPTION: Example of utilizing the 'set_timestamp' function to customize the timestamp for metrics creation. The input requires either a datetime object or epoch timestamp in milliseconds.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/set_custom_timestamp_log_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Streaming S3 Object Content with Python in Versioned Buckets\nDESCRIPTION: This snippet is similar to the non-versioned bucket stream but includes handling of versioned S3 objects using optional version ID. It requires the boto3 library. Inputs include bucket name, object key, and version ID (optional). The output is the versioned object's streamed content. Ensure AWS environment settings are configured.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_basic_stream_with_version.py\"\n```\n\n----------------------------------------\n\nTITLE: Input Payload with Validated Fields for Bedrock Agent\nDESCRIPTION: Example input payload for a Bedrock Agent that contains fields requiring validation. Demonstrates how the agent sends structured data to be validated against the schema rules.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/getting_started_with_validation.json\"\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Caching Encrypt Operations with Encryption SDK\nDESCRIPTION: This Mermaid sequence diagram illustrates the caching mechanism for encrypt operations using the AWS Encryption SDK. It shows how data keys are cached and reused to improve performance, while also explaining the conditions under which a new data key is requested.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_46\n\nLANGUAGE: mermaid\nCODE:\n```\n\"sequenceDiagram\n    autonumber\n    participant Client\n    participant Lambda\n    participant DataMasking as Data Masking\n    participant EncryptionProvider as Encryption Provider\n    Client->>Lambda: Invoke (event)\n    Lambda->>DataMasking: Init Encryption Provider with master key\n    Note over Lambda,DataMasking: AWSEncryptionSDKProvider([KMS_KEY])\n    Lambda->>DataMasking: encrypt(data)\n    DataMasking->>EncryptionProvider: Create unique data key\n    Note over DataMasking,EncryptionProvider: KMS GenerateDataKey API\n    DataMasking->>DataMasking: Cache new unique data key\n    DataMasking->>DataMasking: DATA_KEY.encrypt(data)\n    DataMasking->>DataMasking: MASTER_KEY.encrypt(DATA_KEY)\n    DataMasking->>DataMasking: Create encrypted message\n    Note over DataMasking: Encrypted message includes encrypted data, data key encrypted, algorithm, and more.\n    DataMasking->>Lambda: Ciphertext from encrypted message\n    Lambda->>DataMasking: encrypt(another_data)\n    DataMasking->>DataMasking: Searches for data key in cache\n    alt Is Data key in cache?\n        DataMasking->>DataMasking: Reuses data key\n    else Is Data key evicted from cache?\n        DataMasking->>EncryptionProvider: Create unique data key\n        DataMasking->>DataMasking: MASTER_KEY.encrypt(DATA_KEY)\n    end\n    DataMasking->>DataMasking: DATA_KEY.encrypt(data)\n    DataMasking->>DataMasking: Create encrypted message\n    DataMasking->>Lambda: Ciphertext from encrypted message\n    Lambda-->>Client: Return response\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Exception Auto-Capture\nDESCRIPTION: This Python code demonstrates how to disable the automatic capture of exceptions as metadata by setting `capture_error=False` in both `capture_lambda_handler` and `capture_method` decorators. This is useful when exceptions or stack traces contain sensitive information that should not be included in the tracing metadata.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/disable_capture_error.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Processing Rabbit MQ Events with Python Lambda\nDESCRIPTION: Demonstrates handling Rabbit MQ events in AWS Lambda using the RabbitMQEvent data model from Powertools. The function processes messages from a Rabbit MQ queue by parsing the event structure and extracting relevant data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/rabbit_mq_example.py\"\n```\n\n----------------------------------------\n\nTITLE: Working with Pydantic Types (Python)\nDESCRIPTION: This snippet demonstrates how to work with Pydantic models for data masking. Pydantic models are converted to dictionaries before operations, but the return object will still be a dictionary.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/working_with_pydantic_types.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Error Handling in JSON\nDESCRIPTION: The JSON code snippet depicts the sample response structure when handling errors in batch processing within AWS Lambda. The response will list failed items.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/batch_processing/src/getting_started_sqs_response.json\"\n```\n\n----------------------------------------\n\nTITLE: Sample SQS Event\nDESCRIPTION: This JSON snippet shows an example of the SQS event structure received by the Lambda function. It contains an array of records, each representing a message from the SQS queue, and provides details such as messageId, receiptHandle, and message attributes.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_sqs_event.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing S3 Object Lambda with Python\nDESCRIPTION: Shows how to use S3 Object Lambda to transform S3 objects on retrieval using the S3ObjectLambdaEvent data model. This enables custom data processing as objects are being accessed from S3.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/s3_object_lambda.py\"\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON for Top Keys Erasing\nDESCRIPTION: This JSON showcases the output after the `card_number` field has been erased from the input data.  The value is replaced with a masking character.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_top_keys_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Individual Batch Item Processing in AppSync Lambda Resolver\nDESCRIPTION: Demonstrates how to process batch items individually using the batch_resolver decorator with aggregate=False. This approach trades performance for granular control over each item.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/advanced_batch_resolver_individual.py\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Lambda Event Fields in Python\nDESCRIPTION: Demonstrates how to use the __str__ method to print event fields for debugging purposes. Sensitive fields like secret_access_key and session_token are marked as [SENSITIVE], and fields that cannot be deserialized are marked as [Cannot be deserialized].\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/debugging.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Metrics Testing in Bash\nDESCRIPTION: Shell script showing how to set necessary environment variables (POWERTOOLS_METRICS_NAMESPACE and POWERTOOLS_SERVICE_NAME) before running tests to prevent SchemaValidation exceptions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n--8<-- \"examples/metrics/src/run_tests_env_var.sh\"\n```\n\n----------------------------------------\n\nTITLE: Update draft release workflow definition\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow that utilizes Release Drafter to automate the generation of release notes drafts for the AWS Powertools Lambda Python project. Release Drafter creates and updates a draft release with suggested changes, reducing the manual effort needed to create high-quality release notes.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\n\".github/workflows/release-drafter.yml#L25\"\n```\n\n----------------------------------------\n\nTITLE: AWS SAM Template for DynamoDB\nDESCRIPTION: This YAML snippet provides an AWS SAM template configuration for setting up a DynamoDB table specifically for idempotency records. Key configurations include partition key settings, TTL attribute name, and basic setup instructions. The primary use is to automate the deployment of the necessary infrastructure for recording idempotency states.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"examples/idempotency/templates/sam.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Basic Lambda Function Implementation - Python\nDESCRIPTION: This code defines a simple Lambda function in Python that returns a JSON response with a greeting message. The 'lambda_handler' serves as the entry point for the function, delegating to the 'hello' function.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\n\ndef hello():\n    return {\"statusCode\": 200, \"body\": json.dumps({\"message\": \"hello unknown!\"})}\n\n\ndef lambda_handler(event, context):\n    return hello()\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics with Tags in Python\nDESCRIPTION: Example demonstrating how to add tags to Datadog metrics for filtering and organization.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/add_metrics_with_tags.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining IdempotencyInconsistentStateError Exception in Python\nDESCRIPTION: Exception raised when the idempotency record is in an inconsistent state, indicating a potential issue with the persistence mechanism or concurrent modifications.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/idempotency/exceptions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass IdempotencyInconsistentStateError(Exception):\n    \"\"\"Raised when get and update operations are inconsistent when updating the status\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Idempotency Utility for Testing in Python\nDESCRIPTION: Demonstrates how to disable the idempotency logic for testing purposes using environment variables and pytest's monkeypatch fixture.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/tests/test_disabling_idempotency_utility.py\"\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics with Custom Timestamp in Python\nDESCRIPTION: Example showing how to add Datadog metrics with a custom timestamp using the timestamp parameter.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/add_metrics_with_timestamp.py\"\n```\n\n----------------------------------------\n\nTITLE: Time-Based Feature Configuration JSON\nDESCRIPTION: This JSON configures feature flags with rules based on the current time. Features are enabled or disabled based on these time-based rules. Includes maintenance mode and support chat examples.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"christmas_mode\": {\n      \"default\": false\n    },\n    \"maintenance_mode\": {\n      \"default\": false,\n      \"rules\": {\n        \"weekend\": {\n          \"when_match\": true,\n          \"conditions\": [\n            {\n              \"key\": \"SCHEDULE_WEEKDAY_RANGE\",\n              \"value\": \"sat-sun\"\n            }\n          ]\n        }\n      }\n    },\n    \"support_chat\": {\n      \"default\": true,\n      \"rules\": {\n        \"after_hours\": {\n          \"when_match\": false,\n          \"conditions\": [\n            {\n              \"key\": \"SCHEDULE_TIME_RANGE\",\n              \"value\": \"00:00-08:00\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SAM Template for Kinesis Batch Processing\nDESCRIPTION: This YAML snippet showcases the Serverless Application Model (SAM) template configuration for Kinesis Data Streams batch processing. It includes the resource definitions for a Lambda function triggered by a Kinesis stream, with configurations for batching and error handling using a Dead Letter Queue (DLQ).\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/sam/kinesis_batch_processing.yaml\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Lambda Function with Amplify CLI - Python\nDESCRIPTION: This snippet outlines the process of creating a new AWS Lambda function using the Amplify CLI with Python runtime. It includes prompts for selecting capabilities and configuring settings, particularly for enabling Lambda layers. The intended input is function name and Lambda layer ARNs, and the expected output is a configured Lambda function ready for deployment.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/examples/homepage/install/x86_64/amplify.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n❯ amplify add function\n? Select which capability you want to add: Lambda function (serverless function)\n? Provide an AWS Lambda function name: <NAME-OF-FUNCTION>\n? Choose the runtime that you want to use: Python\n? Do you want to configure advanced settings? Yes\n...\n? Do you want to enable Lambda layers for this function? Yes\n? Enter up to 5 existing Lambda layer ARNs (comma-separated): arn:aws:lambda:eu-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:12\n❯ amplify push -y\n```\n\n----------------------------------------\n\nTITLE: End-to-end tests workflow definition\nDESCRIPTION: This YAML snippet represents a GitHub Actions workflow for running end-to-end tests on the AWS Powertools Lambda Python project.  It automates testing with a high degree of parallelization for multiple Python versions to ensure comprehensive coverage and early detection of issues. The infrastructure used for these tests is ephemeral for each change and Python version.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n\".github/workflows/run-e2e-tests.yml#L41\"\n```\n\n----------------------------------------\n\nTITLE: Capture Cold Start Metric Output JSON\nDESCRIPTION: This JSON snippet represents the expected output when capturing cold start metrics. It includes the `ColdStart` metric and the `function_name` and `service` dimensions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_aws\": {\n        \"Timestamp\": 1686247427220,\n        \"CloudWatchMetrics\": [\n            {\n                \"Namespace\": \"MyApplication\",\n                \"Dimensions\": [\n                    [\n                        \"function_name\",\n                        \"service\"\n                    ]\n                ],\n                \"Metrics\": [\n                    {\n                        \"Name\": \"ColdStart\",\n                        \"Unit\": \"Count\"\n                    }\n                ]\n            },\n            {\n                \"Namespace\": \"MyApplication\",\n                \"Dimensions\": [\n                    [\n                        \"service\"\n                    ]\n                ],\n                \"Metrics\": [\n                    {\n                        \"Name\": \"SuccessfulInvocations\",\n                        \"Unit\": \"Count\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"function_name\": \"metrics-example\",\n    \"service\": \"MyApplication\",\n    \"message\": \"Hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Processing IoT Core Thing Group Registry Events with Python Lambda\nDESCRIPTION: Shows how to handle IoT Core registry events for thing group lifecycle operations using the IoTRegistryThingGroupEvent data model. This processes creation, updates, and deletion of IoT thing groups.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/iot_registry_thing_group_event.py\"\n```\n\n----------------------------------------\n\nTITLE: Testing clear_cache method\nDESCRIPTION: This snippet shows how to use the `clear_cache` method available in every parameter provider to avoid interference during testing when using the same parameter name. This utility helps to maintain test isolation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\n    def test_clear_cache():\n        clear_cache()  # Ensures previous parameter values do not interfere\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining IdempotencyAlreadyInProgressError Exception in Python\nDESCRIPTION: Exception raised when an idempotent function is already being executed with the same parameters. This helps prevent parallel execution of the same operation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/idempotency/exceptions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass IdempotencyAlreadyInProgressError(Exception):\n    \"\"\"Raised when we tried to start a new function execution but detected an already ongoing execution\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Raising Exception on Empty Metrics in Python\nDESCRIPTION: This snippet configures the 'log_metrics' decorator to raise a 'SchemaValidationError' if no metrics are added, illustrating the enforcement of metric emission per execution.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/raise_on_empty_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Processing Kinesis Stream CloudWatch Logs Event with Batch in Lambda Python\nDESCRIPTION: This code demonstrates how to use `extract_cloudwatch_logs_from_record` to integrate with the Batch utility for robust log processing in a Kinesis stream.  It requires AWS Lambda Powertools and utilizes Batch utility. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"7-9 18\"\n--8<-- \"examples/event_sources/src/kinesis_batch_example.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Running Lambda Locally with SAM CLI - Bash\nDESCRIPTION: This command builds and starts the local API Gateway for the AWS Lambda project using the SAM CLI. This allows testing of the API endpoint locally before deployment.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsam build && sam local start-api\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SAM Template for AppSync and Lambda\nDESCRIPTION: This YAML configuration sets up the AWS resources needed for the AppSync API and Lambda function. It includes the API, Lambda function, and necessary IAM roles and policies.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: Sample SAM Template for GraphQL Event Handler\n\nGlobals:\n  Function:\n    Timeout: 3\n    MemorySize: 128\n    Runtime: python3.9\n\nResources:\n  GraphQLHandlerFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: hello_world/\n      Handler: app.lambda_handler\n      Policies:\n        - AWSLambdaBasicExecutionRole\n\n  GraphQLApi:\n    Type: AWS::AppSync::GraphQLApi\n    Properties:\n      Name: Sample GraphQL API\n      AuthenticationType: API_KEY\n\n  GraphQLApiKey:\n    Type: AWS::AppSync::ApiKey\n    Properties:\n      ApiId: !GetAtt GraphQLApi.ApiId\n\n  GraphQLSchema:\n    Type: AWS::AppSync::GraphQLSchema\n    Properties:\n      ApiId: !GetAtt GraphQLApi.ApiId\n      Definition: |\n        type Todo {\n          id: ID!\n          name: String!\n          description: String\n        }\n\n        type Query {\n          getTodo(id: ID!): Todo\n          listTodos: [Todo]\n        }\n\n        type Mutation {\n          createTodo(name: String!, description: String): Todo\n        }\n\n  GetTodoDataSource:\n    Type: AWS::AppSync::DataSource\n    Properties:\n      ApiId: !GetAtt GraphQLApi.ApiId\n      Name: GetTodoDataSource\n      Type: AWS_LAMBDA\n      LambdaConfig:\n        LambdaFunctionArn: !GetAtt GraphQLHandlerFunction.Arn\n      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn\n\n  GetTodoResolver:\n    Type: AWS::AppSync::Resolver\n    Properties:\n      ApiId: !GetAtt GraphQLApi.ApiId\n      TypeName: Query\n      FieldName: getTodo\n      DataSourceName: !GetAtt GetTodoDataSource.Name\n\n  ListTodosDataSource:\n    Type: AWS::AppSync::DataSource\n    Properties:\n      ApiId: !GetAtt GraphQLApi.ApiId\n      Name: ListTodosDataSource\n      Type: AWS_LAMBDA\n      LambdaConfig:\n        LambdaFunctionArn: !GetAtt GraphQLHandlerFunction.Arn\n      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn\n\n  ListTodosResolver:\n    Type: AWS::AppSync::Resolver\n    Properties:\n      ApiId: !GetAtt GraphQLApi.ApiId\n      TypeName: Query\n      FieldName: listTodos\n      DataSourceName: !GetAtt ListTodosDataSource.Name\n\n  CreateTodoDataSource:\n    Type: AWS::AppSync::DataSource\n    Properties:\n      ApiId: !GetAtt GraphQLApi.ApiId\n      Name: CreateTodoDataSource\n      Type: AWS_LAMBDA\n      LambdaConfig:\n        LambdaFunctionArn: !GetAtt GraphQLHandlerFunction.Arn\n      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn\n\n  CreateTodoResolver:\n    Type: AWS::AppSync::Resolver\n    Properties:\n      ApiId: !GetAtt GraphQLApi.ApiId\n      TypeName: Mutation\n      FieldName: createTodo\n      DataSourceName: !GetAtt CreateTodoDataSource.Name\n\n  AppSyncServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: appsync.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: AppSyncLambdaPolicy\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - lambda:InvokeFunction\n                Resource: !GetAtt GraphQLHandlerFunction.Arn\n\nOutputs:\n  GraphQLApiEndpoint:\n    Description: \"GraphQL API Endpoint\"\n    Value: !GetAtt GraphQLApi.GraphQLUrl\n  GraphQLApiKey:\n    Description: \"GraphQL API Key\"\n    Value: !GetAtt GraphQLApiKey.ApiKey\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for DynamoDB\nDESCRIPTION: This Terraform snippet sets up a DynamoDB table for the idempotency utility, detailing the table's configuration, required attributes, and settings. It facilitates the use of Terraform for infrastructure management and deployment.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\n--8<-- \"examples/idempotency/templates/terraform.tf\"\n```\n\n----------------------------------------\n\nTITLE: API Gateway Authorizer Request Example Event JSON\nDESCRIPTION: This JSON represents an example event for an API Gateway Authorizer request. It outlines the structure of the data that a Lambda function handling an API Gateway Authorizer request event would receive. It is used in conjunction with the `APIGatewayAuthorizerRequestEvent` data class from AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n```json hl_lines=\"3 11\"\n--8<-- \"tests/events/apiGatewayAuthorizerRequestEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for SAR App Deployment (YAML)\nDESCRIPTION: This YAML snippet provides a least-privileged IAM policy example for deploying the Serverless Application Repository (SAR) app. It defines specific permissions required for the deployment, enhancing security by limiting access to only necessary resources.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"examples/homepage/install/sar/scoped_down_iam.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Active MQ Example Event JSON\nDESCRIPTION: This JSON snippet represents an example Active MQ event.  It provides the structure of the event data that the Lambda function will receive. It is meant to be used with the Active MQ event source data class from AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json hl_lines=\"6 9 18 21\"\n--8<-- \"tests/events/activeMQEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Terraform Lambda Layer ARN\nDESCRIPTION: This is a Terraform configuration demonstrating how to fetch the Lambda Layer ARN from SSM Parameter Store. It uses a data source to retrieve the ARN based on the specified architecture, Python version, and Layer version.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n\"data \\\"aws_ssm_parameter\\\" \\\"powertools_version\\\" {\n    name = \\\"/aws/service/powertools/python/{arch}/{python_version}/{version}\\\"\n}\n\nresource \\\"aws_lambda_function\\\" \\\"test_lambda\\\" {\n    ...\n\n    runtime = \\\"python3.13\\\"\n\n    layers = [data.aws_ssm_parameter.powertools_version.value]\n}\"\n```\n\n----------------------------------------\n\nTITLE: Getting Fetched Configuration in Python\nDESCRIPTION: This snippet demonstrates how to access the raw configuration fetched from the store using the `get_raw_configuration` property within the store instance in Powertools for AWS Lambda (Python).\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom aws_lambda_powertools.utilities.feature_flags import FeatureFlagsProvider\n\nFEATURE_FLAG_ENV = os.getenv(\"FEATURE_FLAG_FILE\", \"getting_started_with_cache_features.json\")\nprovider = FeatureFlagsProvider(config_file=FEATURE_FLAG_ENV, logger=None)\n\n\ndef lambda_handler(event, context):\n    # Access the raw configuration\n    raw_config = provider.get_raw_configuration()\n    print(raw_config)\n\n```\n\n----------------------------------------\n\nTITLE: API Gateway Authorizer V2 Example Event JSON\nDESCRIPTION: This JSON represents an example event for an API Gateway Authorizer version 2. It defines the expected structure of the event data for a Lambda function that handles API Gateway Authorizer V2 events. It works with the corresponding data class from AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/apiGatewayAuthorizerV2Event.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Powertools with PDM\nDESCRIPTION: Install the core aws-lambda-powertools package using PDM. This installs the basic library without any extra dependencies. It requires PDM to be installed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"pdm add \\\"aws-lambda-powertools\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Powertools Tracer Dependency\nDESCRIPTION: Install the tracer dependency for aws-lambda-powertools using pip. This adds tracing capabilities to your Lambda functions. It requires Python and pip to be installed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install \\\"aws-lambda-powertools[tracer]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Generic Data Input - JSON\nDESCRIPTION: A JSON file providing sample input data that supports data masking operations, serving as an example for implementing erasure on nested or complex data structures.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/data_masking/src/generic_data_input.json\"\n```\n\n----------------------------------------\n\nTITLE: Example Input Payload for Bedrock Agent\nDESCRIPTION: Sample input payload sent by Amazon Bedrock to the Lambda function when invoking an agent action. Contains the API request details and parameters extracted from the user's conversation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/getting_started.json\"\n```\n\n----------------------------------------\n\nTITLE: Datetime-Based Feature Configuration JSON\nDESCRIPTION: This JSON configures a feature flag named `christmas_sale` to be enabled between specific dates. It uses the `SCHEDULE_BETWEEN_DATETIME_RANGE` condition key with start and end date/time values.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"christmas_sale\": {\n      \"default\": false,\n      \"rules\": {\n        \"christmas_dates\": {\n          \"when_match\": true,\n          \"conditions\": [\n            {\n              \"key\": \"SCHEDULE_BETWEEN_DATETIME_RANGE\",\n              \"value\": \"2023-12-24T00:00-2023-12-26T23:59\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Powertools as Dependency\nDESCRIPTION: This code snippet specifies the `aws-lambda-powertools` dependency in the `requirements.txt` file. It includes the `tracer` extra, which requires the AWS X-Ray SDK dependency, enabling tracing functionality for Lambda functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naws-lambda-powertools[tracer]  # Tracer requires AWS X-Ray SDK dependency\n```\n\n----------------------------------------\n\nTITLE: S3 Store Provider Payload Schema\nDESCRIPTION: JSON schema example for the S3 store provider payload configuration. Shows the structure expected by the custom store provider.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/feature_flags/src/working_with_own_s3_store_provider_payload.json\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Metrics Between Tests with Pytest Fixture\nDESCRIPTION: Python code for a Pytest fixture that clears metrics between tests, ensuring metrics are reset including cold start tracking for proper test isolation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/clear_metrics_in_tests.py\"\n```\n\n----------------------------------------\n\nTITLE: Single Metric with Default Dimensions in Python\nDESCRIPTION: This code snippet demonstrates how to use the single_metric method with default dimensions set to False.  This skips all previously defined dimensions, including default dimensions, when emitting the single metric.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools import Metrics\nfrom aws_lambda_powertools.metrics import MetricUnit\n\n\ndef handler(event, context):\n    metrics = Metrics(service=\"MyApplication\")\n\n    metrics.single_metric(\n        name=\"SingleMetric\", unit=MetricUnit.Count, value=1, default_dimensions=False\n    )\n\n    return {}\n\n```\n\n----------------------------------------\n\nTITLE: CloudWatch Alarm Example Event JSON\nDESCRIPTION: This JSON represents an example event for a CloudWatch alarm state change. It shows the structure of data the Lambda function receives from CloudWatch when an alarm's state changes. This event is parsed by the associated python code.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/cloudWatchAlarmEventSingleMetric.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Idempotency with Real Redis in Python\nDESCRIPTION: Demonstrates how to set up and use a real Redis client for integration testing of the idempotency utility.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/tests/test_with_real_redis.py\"\n```\n\n----------------------------------------\n\nTITLE: Model Validator for Complex Data Validation\nDESCRIPTION: Implements model_validator to perform comprehensive validation across multiple fields, enabling complex validation logic and inter-field comparisons\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parser.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parser/src/model_validator.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing Powertools Parser Dependency\nDESCRIPTION: Install the parser dependency for aws-lambda-powertools using pip. This allows you to parse input using Pydantic. It requires Python and pip to be installed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install \\\"aws-lambda-powertools[parser]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Lambda Timeout Scenarios with Idempotency Controls\nDESCRIPTION: This diagram shows how Lambda timeout scenarios are handled with idempotency controls. When a Lambda function times out, the idempotency record remains in INPROGRESS state. On retry after the timeout period, the function resets the in_progress_expiry attribute and processes the request again.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_34\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Lambda\n    participant Persistence Layer\n    alt initial request\n        Client->>Lambda: Invoke (event)\n        Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n        activate Persistence Layer\n        Note over Lambda,Persistence Layer: Set record status to INPROGRESS. <br> Prevents concurrent invocations <br> with the same payload\n        Lambda-->>Lambda: Call your function\n        Note right of Lambda: Time out\n        Lambda--xLambda: Time out error\n        Lambda-->>Client: Return error response\n        deactivate Persistence Layer\n    else retry after Lambda timeout elapses\n        Client->>Lambda: Invoke (event)\n        Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n        activate Persistence Layer\n        Note over Lambda,Persistence Layer: Set record status to INPROGRESS. <br> Reset in_progress_expiry attribute\n        Lambda-->>Lambda: Call your function\n        Lambda->>Persistence Layer: Update record with result\n        deactivate Persistence Layer\n        Persistence Layer-->>Persistence Layer: Update record\n        Lambda-->>Client: Response sent to client\n    end\n```\n\n----------------------------------------\n\nTITLE: Application Load Balancer Example Event JSON\nDESCRIPTION: This JSON defines the structure of an example Application Load Balancer event. It provides the data format that a Lambda function processing ALB events would receive. The event is used with the Python code and AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n```json hl_lines=\"7 8\"\n--8<-- \"tests/events/albEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: CloudWatch Logs Example Event JSON\nDESCRIPTION: This JSON is an example event payload for CloudWatch Logs. It is compressed and base64 encoded. The Lambda function uses the AWS Lambda Powertools library to decode, decompress and parse the JSON data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/cloudWatchLogEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Roadmap Status Visualization using Mermaid\nDESCRIPTION: This snippet visualizes the roadmap status workflow, showing the progression of ideas from initial conception to eventual release. It uses Mermaid syntax to define a directed graph, illustrating the flow from 'Ideas' to 'Shipped' through various stages like 'Backlog', 'Working on it', and 'Coming soon'.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/roadmap.md#2025-04-21_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\ngraph LR\n    Ideas --> Backlog --> Work[\"Working on it\"] --> Merged[\"Coming soon\"] --> Shipped\n```\n```\n\n----------------------------------------\n\nTITLE: SAM Configuration for Powertools Layer (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the Serverless Application Model (SAM) to use the Powertools Lambda Layer.  It includes specifying the application and its properties for seamless integration.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"examples/homepage/install/sar/sam.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Updating the Lambda Handler with DynamoDBStreamModel\nDESCRIPTION: This code snippet demonstrates the changes needed in the lambda handler when migrating from v2 to v3. The updated handler utilizes the DynamoDBStreamModel for better data deserialization and access.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport json\nfrom typing import Any\n\nfrom aws_lambda_powertools.utilities.parser import event_parser\nfrom aws_lambda_powertools.utilities.parser.models import DynamoDBStreamModel\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\n\ndef send_to_sqs(data: dict):\n    body = json.dumps(data)\n    ...\n\n@event_parser\ndef lambda_handler(event: DynamoDBStreamModel, context: LambdaContext):\n\n    for record in event.Records:\n\n-        # BEFORE - v2\n-        new_image: dict[str, Any] = record.dynamodb.NewImage\n-        event_type = new_image[\"eventType\"][\"S\"]\n-        if event_type == \"PENDING\":\n-            # deserialize attribute value into Python native type\n-            # NOTE: nested objects would need additional logic\n-            data = dict(new_image)\n-            send_to_sqs(data)\n\n+        # NOW - v3\n+        new_image: dict[str, Any] = record.dynamodb.NewImage\n+        if new_image.get(\"eventType\") == \"PENDING\":\n+            send_to_sqs(new_image)  # Here new_image is just a Python Dict type\n\n```\n\nLANGUAGE: python\nCODE:\n```\n- #BEFORE - v2\n- from aws_lambda_powertools.utilities.parser.pydantic import EmailStr\n\n+ # NOW - v3\n+ from pydantic import EmailStr\n\n```\n\n----------------------------------------\n\nTITLE: Using a pytest fixture for parameter mocking\nDESCRIPTION: This snippet refactors the mocking pattern into a reusable pytest fixture to avoid repetition in tests. It provides a cleaner way to apply the mocking logic across multiple test cases.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\n@pytest.fixture\ndef mocked_get_parameter(monkeypatch):\n    monkeypatch.setattr('aws_lambda_powertools.utilities.parameters.get_parameter', lambda x: 'mocked_value')\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Custom Resource Example Event JSON\nDESCRIPTION: This JSON represents an example CloudFormation custom resource event for a 'Create' request.  It illustrates the structure of data that the Lambda function receives when CloudFormation creates a resource. The Python code handles this particular event structure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/cloudformationCustomResourceCreate.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Asserting Single EMF Blob in Functional Tests\nDESCRIPTION: Example using pytest with the capsys fixture to capture and assert that a single EMF (Enhanced Metrics Format) blob is correctly emitted in standard output.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/assert_single_emf_blob.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing all Powertools extra dependencies\nDESCRIPTION: Install all extra dependencies for aws-lambda-powertools using pip. This installs all optional features in one go. It requires Python and pip to be installed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install \\\"aws-lambda-powertools[all]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics Implementation Example\nDESCRIPTION: Implementation example showing how to add metrics for functional testing of the Metrics utility.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/add_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Modulo Range Feature Configuration JSON\nDESCRIPTION: This JSON configures two feature flags, `variant_a` and `variant_b`, each with a modulo range condition. This allows for assigning different user segments to different experiment variants. Each variant is assigned a non-overlapping spectrum segment to each experiment variant.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"variant_a\": {\n      \"default\": false,\n      \"rules\": {\n        \"user_segment\": {\n          \"when_match\": true,\n          \"conditions\": [\n            {\n              \"key\": \"CONTEXT_VALUE_MODULO_RANGE\",\n              \"value\": {\n                \"BASE\": 100,\n                \"START\": 0,\n                \"END\": 33\n              }\n            }\n          ]\n        }\n      }\n    },\n    \"variant_b\": {\n      \"default\": false,\n      \"rules\": {\n        \"user_segment\": {\n          \"when_match\": true,\n          \"conditions\": [\n            {\n              \"key\": \"CONTEXT_VALUE_MODULO_RANGE\",\n              \"value\": {\n                \"BASE\": 100,\n                \"START\": 34,\n                \"END\": 66\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Makefile for Redis-based Idempotency Testing\nDESCRIPTION: Makefile script to set up a temporary Redis Docker container for testing and automatically remove it upon completion.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ntest-idempotency-redis: # (1)!\n\tdocker run --name test-idempotency-redis -d -p 63005:6379 redis\n\tpytest test_with_real_redis.py;docker stop test-idempotency-redis;docker rm test-idempotency-redis\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Standalone Validation in Python\nDESCRIPTION: This code showcases a JSON schema used with the standalone `validate` function.  It specifies the required fields, data types, and any default values for the data being validated.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"7 8 10 12 17 19 24 26 28\"\n    --8<-- \"examples/validation/src/getting_started_validator_standalone_schema.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Erase Operation\nDESCRIPTION: This Mermaid sequence diagram illustrates the flow of an erase operation within the DataMasking utility.  The operation occurs in-memory, replacing the original data with asterisks, without involving encryption providers.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_42\n\nLANGUAGE: mermaid\nCODE:\n```\n\"sequenceDiagram\n    autonumber\n    participant Client\n    participant Lambda\n    participant DataMasking as Data Masking (in memory)\n    Client->>Lambda: Invoke (event)\n    Lambda->>DataMasking: erase(data)\n    DataMasking->>DataMasking: replaces data with *****\n    Note over Lambda,DataMasking: No encryption providers involved.\n    DataMasking->>Lambda: data masked\n    Lambda-->>Client: Return response\"\n```\n\n----------------------------------------\n\nTITLE: Updating Headers Access in AWS Lambda Python\nDESCRIPTION: This snippet illustrates the deprecation of the `get_header_value` function, replacing it with direct header access using `app.current_event.headers.get`. It removes the `case_sensitive` parameter, normalizing headers automatically. No external dependencies are necessary apart from those imported, and it demonstrates how headers are accessed differently in version 3 of AWS PowerTools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nfrom requests import Response\n\nfrom aws_lambda_powertools import Logger, Tracer\nfrom aws_lambda_powertools.event_handler import APIGatewayRestResolver\nfrom aws_lambda_powertools.logging import correlation_paths\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\ntracer = Tracer()\nlogger = Logger()\napp = APIGatewayRestResolver()\n\n\n@app.get(\"/todos\")\n@tracer.capture_method\ndef get_todos():\n    endpoint = \"https://jsonplaceholder.typicode.com/todos\"\n\n    # BEFORE - v2\n#   api_key: str = app.current_event.get_header_value(name=\"X-Api-Key\", case_sensitive=True, default_value=\"\")\n\n    # NOW - v3\n    api_key: str = app.current_event.headers.get(\"X-Api-Key\", \"\")\n\n    todos: Response = requests.get(endpoint, headers={\"X-Api-Key\": api_key})\n    todos.raise_for_status()\n\n    return {\"todos\": todos.json()}\n\n\n# You can continue to use other utilities just as before\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST)\n@tracer.capture_lambda_handler\ndef lambda_handler(event: dict, context: LambdaContext) -> dict:\n    return app.resolve(event, context)\n\n```\n\n----------------------------------------\n\nTITLE: Encrypt Data Output Example - JSON\nDESCRIPTION: A JSON example illustrating the output after encrypting data. It provides an example of how data is transformed into an encrypted form.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/data_masking/src/encrypt_data_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Event for Payload Subset\nDESCRIPTION: This JSON snippet is a sample event payload demonstrating the structure used when selecting a payload subset for idempotency. The `event_key_jmespath` configuration will extract the relevant fields from this payload to generate the idempotency key.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n```json hl_lines=\"28\"\n--8<-- \"examples/idempotency/src/working_with_payload_subset_payload.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Example Output Payload with Validation Error\nDESCRIPTION: Response payload when validation fails in a Bedrock Agent Lambda function. Shows the 422 error response format returned to the Bedrock Agent with details about the validation failure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/validation_failure_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Data Transformations in Python\nDESCRIPTION: This code illustrates testing data transformations using Python's io.BytesIO for input payloads. It helps validate transformation logic in testing environments to ensure expected outputs. Important for debugging and verifying data accuracy in transformation procedures.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/assert_transformation.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing Powertools with Poetry\nDESCRIPTION: Install the core aws-lambda-powertools package using poetry. This installs the basic library without any extra dependencies. It requires Poetry to be installed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"poetry add \\\"aws-lambda-powertools\\\"\"\n```\n\n----------------------------------------\n\nTITLE: API Gateway Authorizer Token Example Event JSON\nDESCRIPTION: This JSON represents an example event for an API Gateway Authorizer token. It defines the structure of the event data for a Lambda function processing API Gateway Authorizer token events. It complements the `APIGatewayAuthorizerTokenEvent` data class from AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n```json hl_lines=\"2 3\"\n--8<-- \"tests/events/apiGatewayAuthorizerTokenEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing AWSEncryptionSDKProvider in Python\nDESCRIPTION: This code snippet demonstrates how to customize the default values when initializing the `AWSEncryptionSDKProvider` class. Parameters such as `local_cache_capacity`, `max_cache_age_seconds`, `max_messages_encrypted`, and `max_bytes_encrypted` can be modified to best accommodate your security and performance thresholds.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/aws_encryption_provider_example.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Definition Within Envelope\nDESCRIPTION: JSON structure defining feature flags that are referenced by the envelope extraction, showing the actual feature flag configuration format.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/feature_flags/src/extracting_envelope_features.json\"\n```\n\n----------------------------------------\n\nTITLE: Using New boto_config Parameter\nDESCRIPTION: This snippet highlights the renaming of the `config` parameter to `boto_config` in the AWS PowerTools parameters utility to standardize naming conventions. Existing functionality remains intact, offering a streamlined configuration for botocore within AWS Lambda functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/upgrade.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom botocore.config import Config\n\nfrom aws_lambda_powertools.utilities import parameters\n\n# BEFORE - v2\n#ssm_provider = parameters.SSMProvider(config=Config(region_name=\"us-west-1\"))\n\n# NOW - v3\nssm_provider = parameters.SSMProvider(boto_config=Config(region_name=\"us-west-1\"))\n\ndef handler(event, context):\n    value = ssm_provider.get(\"/my/parameter\")\n    return {\"message\": value}\n\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Encrypt Operation with Encryption SDK (KMS)\nDESCRIPTION: This Mermaid sequence diagram illustrates the flow of an encrypt operation using the AWS Encryption SDK with KMS. It shows how a unique data key is generated and cached for multiple encrypt operations to improve performance and prevent throttling.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_43\n\nLANGUAGE: mermaid\nCODE:\n```\n\"sequenceDiagram\n    autonumber\n    participant Client\n    participant Lambda\n    participant DataMasking as Data Masking\n    participant EncryptionProvider as Encryption Provider\n    Client->>Lambda: Invoke (event)\n    Lambda->>DataMasking: Init Encryption Provider with master key\n    Note over Lambda,DataMasking: AWSEncryptionSDKProvider([KMS_KEY])\n    Lambda->>DataMasking: encrypt(data)\n    DataMasking->>EncryptionProvider: Create unique data key\n    Note over DataMasking,EncryptionProvider: KMS GenerateDataKey API\n    DataMasking->>DataMasking: Cache new unique data key\n    DataMasking->>DataMasking: DATA_KEY.encrypt(data)\n    DataMasking->>DataMasking: MASTER_KEY.encrypt(DATA_KEY)\n    DataMasking->>DataMasking: Create encrypted message\n    Note over DataMasking: Encrypted message includes encrypted data, data key encrypted, algorithm, and more.\n    DataMasking->>Lambda: Ciphertext from encrypted message\n    Lambda-->>Client: Return response\"\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI Schema for Bedrock Agent\nDESCRIPTION: Automatically generated OpenAPI schema from the Lambda handler that describes the API structure, parameters, and actions that the Bedrock agent can perform.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/getting_started_schema.json\"\n```\n\n----------------------------------------\n\nTITLE: Output Payload with Validated Response for Bedrock Agent\nDESCRIPTION: Response payload after successful validation in a Bedrock Agent Lambda function. Shows the formatted response that will be sent back to the Bedrock Agent.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/getting_started_with_validation_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Release Artifact with SLSA Verifier (Manual)\nDESCRIPTION: This snippet demonstrates how to manually verify a release artifact using the SLSA Verifier tool. It involves downloading the SLSA Verifier binary, the release artifact from PyPi, and the attestation file. The SLSA Verifier is then run with specific options to verify the artifact against the attestation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/security.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\n    ./slsa-verifier-darwin-arm64 verify-artifact \\\n        --provenance-path \"multiple.intoto.jsonl\" \\\n        --source-uri github.com/aws-powertools/powertools-lambda-python \\\n        aws_lambda_powertools-2.20.0-py3-none-any.whl\n    \n```\n\n----------------------------------------\n\nTITLE: Sample Event JSON for Idempotent Example\nDESCRIPTION: This JSON snippet represents a sample event payload for an AWS Lambda function using the idempotent decorator. It provides a practical example of input data structure to test the idempotent logic.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/idempotency/src/getting_started_with_idempotency_payload.json\"\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Sample Event in JSON\nDESCRIPTION: A JSON sample event schema for DynamoDB Streams when using Pydantic models in AWS Lambda. This structure helps validate the input and access sequence numbers or message IDs.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/batch_processing/src/pydantic_dynamodb_event.json\"\n```\n\n----------------------------------------\n\nTITLE: Adapting Event Source Default Values\nDESCRIPTION: This code snippet updates the behavior of Event Source Data classes to return empty collections instead of None for optional dictionaries and lists. It simplifies code by removing the need for conditional checks and remains backward compatible. The snippet utilizes AWS PowerTools utilities for DynamoDB stream events.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/upgrade.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom aws_lambda_powertools.utilities.data_classes import DynamoDBStreamEvent, event_source\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\n\n@event_source(data_class=DynamoDBStreamEvent)\ndef lambda_handler(event: DynamoDBStreamEvent, context: LambdaContext):\n    for record in event.records:\n\n        # BEFORE - v2\n#        old_image_type_return_v2 = type(record.dynamodb.old_image)\n#        # Output is <class 'NoneType'>\n\n        # NOW - v3\n        old_image_type_return_v3 = type(record.dynamodb.old_image)\n        # Output is <class 'dict'>\n\n```\n\n----------------------------------------\n\nTITLE: Using Multiple KMS Keys with AWSEncryptionSDKProvider in Python\nDESCRIPTION: This code snippet demonstrates how to instantiate the `AWSEncryptionSDKProvider` with multiple KMS keys from different AWS accounts for higher availability. This can be used to improve resilience and ensure data is encrypted even if one KMS key is unavailable.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/using_multiple_keys.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaValidationError Exception in Python\nDESCRIPTION: This code snippet defines the SchemaValidationError exception class, which is raised when there's an error validating the metrics schema. It inherits from MetricUnitError and includes a default error message.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/metrics/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SchemaValidationError(MetricUnitError):\n    \"\"\"When serialization fail due to incorrect types\"\"\"\n\n    def __init__(self, message=\"Invalid metric unit type\"):\n        super().__init__(message)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom JSON Schema Format in Python\nDESCRIPTION: This code defines a JSON schema with a custom format (`awsaccountid`).  This custom format requires a validation function or regular expression to be provided when the schema is used.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"7 9 12 13 17 20\"\n    --8<-- \"examples/validation/src/custom_format_schema.py\"\n\t```\n```\n\n----------------------------------------\n\nTITLE: Verifying Release Artifact with verify_provenance.sh Script (Automated)\nDESCRIPTION: This snippet shows how to automate the verification of a release artifact using the `verify_provenance.sh` script.  The script downloads the SLSA Verifier, verifies its integrity, downloads the attestation file and release artifact, runs the SLSA Verifier, and cleans up downloaded files.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/security.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash verify_provenance.sh 2.20.0\n```\n\n----------------------------------------\n\nTITLE: Processing IoT Core Thing Group Hierarchy Events with Python Lambda\nDESCRIPTION: Shows how to handle IoT Core registry events for thing group hierarchy changes using the IoTRegistryAddOrDeleteThingGroupEvent data model. This processes events when child groups are added to or deleted from parent groups.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/iot_registry_add_or_delete_from_thing_group_event.py\"\n```\n\n----------------------------------------\n\nTITLE: Erased Data Output Example - JSON\nDESCRIPTION: This JSON file demonstrates the output of a data erasure operation, depicting how original data is replaced by a placeholder or masked value.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/data_masking/src/getting_started_erase_data_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Aligning Type Imports with Python Standards\nDESCRIPTION: This snippet updates type imports to utilize the standard `typing` library or `typing_extensions` instead of `aws_lambda_powertools.shared.types`. This change ensures compatibility with Python 3.9+ and provides additional type support via `typing_extensions`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/upgrade.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# BEFORE - v2\n#from aws_lambda_powertools.shared.types import Annotated\n\n# NOW - v3\nfrom typing_extensions import Annotated\n\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\n\ndef handler(event: dict, context: LambdaContext) -> dict:\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: AWS CloudFormation Template for Redis\nDESCRIPTION: A YAML snippet for an AWS CloudFormation template to configure Redis instances for using the idempotency feature. The configuration addresses aspects like security group settings specific to VPC access, guiding users in infrastructure setup.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"examples/idempotency/templates/cfn_redis_serverless.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Metrics in AWS Lambda Function (Python)\nDESCRIPTION: This code snippet shows how to implement custom metrics in an AWS Lambda function using the AWS SDK. It includes creating a CloudWatch client, defining a custom function to send metrics, and integrating it with API Gateway endpoints.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport boto3\n\nfrom aws_lambda_powertools import Logger, Tracer\nfrom aws_lambda_powertools.event_handler import APIGatewayRestResolver\nfrom aws_lambda_powertools.logging import correlation_paths\n\ncold_start = True\nmetric_namespace = \"MyApp\"\n\nlogger = Logger(service=\"APP\")\ntracer = Tracer(service=\"APP\")\nmetrics = boto3.client(\"cloudwatch\")\napp = APIGatewayRestResolver()\n\n\n@tracer.capture_method\ndef add_greeting_metric(service: str = \"APP\"):\n    function_name = os.getenv(\"AWS_LAMBDA_FUNCTION_NAME\", \"undefined\")\n    service_dimension = {\"Name\": \"service\", \"Value\": service}\n    function_dimension = {\"Name\": \"function_name\", \"Value\": function_name}\n    is_cold_start = True\n\n    global cold_start\n    if cold_start:\n        cold_start = False\n    else:\n        is_cold_start = False\n\n    return metrics.put_metric_data(\n        MetricData=[\n            {\n                \"MetricName\": \"SuccessfulGreetings\",\n                \"Dimensions\": [service_dimension],\n                \"Unit\": \"Count\",\n                \"Value\": 1,\n            },\n            {\n                \"MetricName\": \"ColdStart\",\n                \"Dimensions\": [service_dimension, function_dimension],\n                \"Unit\": \"Count\",\n                \"Value\": int(is_cold_start)\n            }\n        ],\n        Namespace=metric_namespace,\n    )\n\n\n@app.get(\"/hello/<name>\")\n@tracer.capture_method\ndef hello_name(name):\n    tracer.put_annotation(key=\"User\", value=name)\n    logger.info(f\"Request from {name} received\")\n    add_greeting_metric()\n    return {\"message\": f\"hello {name}!\"}\n\n\n@app.get(\"/hello\")\n@tracer.capture_method\ndef hello():\n    tracer.put_annotation(key=\"User\", value=\"unknown\")\n    logger.info(\"Request from unknown received\")\n    add_greeting_metric()\n    return {\"message\": \"hello unknown!\"}\n\n\n@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST, log_event=True)\n@tracer.capture_lambda_handler\ndef lambda_handler(event, context):\n    return app.resolve(event, context)\n```\n\n----------------------------------------\n\nTITLE: Sample Kinesis Event\nDESCRIPTION: This JSON snippet shows an example of the Kinesis Data Streams event structure received by the Lambda function.  It contains an array of records, each representing a message from the Kinesis stream, and providing details such as sequenceNumber, data, and invocationId.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_kinesis_event.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Feature with Rules Schema JSON\nDESCRIPTION: This JSON represents a more complex feature flag schema with rules and conditions. Each rule has a `when_match` value and a list of `conditions`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"discount_feature\": {\n      \"default\": false,\n      \"rules\": {\n        \"premium_users\": {\n          \"when_match\": true,\n          \"conditions\": [\n            {\n              \"key\": \"user_group\",\n              \"value\": \"premium\"\n            }\n          ]\n        }\n      }\n    },\n    \"early_access\": {\n      \"default\": false,\n      \"rules\": {\n        \"admin_users\": {\n          \"when_match\": true,\n          \"conditions\": [\n            {\n              \"key\": \"permissions\",\n              \"value\": \"admin\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking get_parameter with pytest monkeypatch\nDESCRIPTION: This code snippet demonstrates how to use the pytest monkeypatch fixture to mock calls to the parameters utility method `get_parameter`. This approach is useful in unit tests to avoid actual AWS API calls and ensure isolated testing of the function's logic.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\n    def test_get_parameter(mocked_get_parameter):\n        assert some_function() == expected_value\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Sample Input JSON for Decryption\nDESCRIPTION: This JSON file represents the input data used for the decryption example.  It contains a ciphertext that needs to be decrypted using the specified KMS key.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/getting_started_decrypt_data_input.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Complex Nested Keys Erasing\nDESCRIPTION: This JSON demonstrates how to erase the `name` field using a complex nested key expression (`category..name`).\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_complex_nested_keys.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON for All Fields in a List Erasing\nDESCRIPTION: This JSON shows the result of erasing the street fields at any index inside the address list using a JSONPath expression.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_list_all_index_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tags with log_metrics Decorator\nDESCRIPTION: Example demonstrating how to set default tags using the log_metrics decorator parameter.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/set_default_tags_log_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Kinesis and DynamoDB Streams Single Failure Diagram\nDESCRIPTION: A sequence diagram that outlines the single batch item failure scenario for AWS Lambda processing Kinesis or DynamoDB Streams using BatchProcessor.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_23\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant Streams\n    participant Lambda service\n    participant Lambda function\n    Lambda service->>Streams: Poll latest records\n    Lambda service->>Lambda function: Invoke (batch event)\n    activate Lambda function\n    Lambda function-->Lambda function: Process 2 out of 10 batch items\n    Lambda function--xLambda function: Fail on 3rd batch item\n    Lambda function-->Lambda function: Continue processing batch items (4-10)\n    Lambda function->>Lambda service: Report batch item as failure (3)\n    deactivate Lambda function\n    activate Streams\n    Lambda service->>Streams: Checkpoints to sequence number from 3rd batch item\n    Lambda service->>Streams: Poll records starting from updated checkpoint\n    deactivate Streams\n```\n\n----------------------------------------\n\nTITLE: Running the Cold Start Benchmark Script with SAM CLI\nDESCRIPTION: Bash command sequence for executing the Lambda cold start benchmark. It sets an S3 bucket environment variable for SAM deployment artifacts, navigates to the benchmark directory, and runs the benchmark.sh script that measures performance differences.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/benchmark/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport S3_BUCKET=code-artifact-s3-bucket\n\ncd benchmark\n./benchmark.sh\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Built-in Envelope Validation\nDESCRIPTION: This code represents a sample JSON payload from a popular event source with a pre-defined envelope. The unwrapped payload will be validated against a defined schema.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n```json hl_lines=\"12 13\"\n    --8<-- \"examples/validation/src/unwrapping_popular_event_source_payload.json\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Sample DynamoDB Batch Processing Response\nDESCRIPTION: This JSON snippet provides an example of the response structure returned by the `BatchProcessor` when processing DynamoDB Streams messages. It shows the `batchItemFailures` list, indicating which records (identified by their sequence number) failed during processing.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_dynamodb_response.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: AppConfig Payload with Feature Flags Envelope\nDESCRIPTION: Sample JSON payload used with AppConfig provider, showing feature flags within a nested configuration structure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/feature_flags/src/appconfig_provider_options_payload.json\"\n```\n\n----------------------------------------\n\nTITLE: Raising Schema Validation Error on Empty Metrics\nDESCRIPTION: Example showing how to configure the metrics system to raise an error when no metrics are emitted.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/raise_on_empty_datadog_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Time-Based Feature Event JSON\nDESCRIPTION: This JSON provides an example event payload for the time-based feature flag example. It includes a username parameter that is used to evaluate the feature flags.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"username\": \"johndoe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON for Complex Nested Keys Erasing\nDESCRIPTION: This JSON showcases the output after erasing the `name` field using the complex nested key expression.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_complex_nested_keys_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Python 3.12 Lambda Powertools Layer ARNs by Region\nDESCRIPTION: AWS Lambda Layer ARNs for AWS Powertools Python 3.12 across multiple global regions, enabling easy integration of observability and utility features.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/includes/_layer_homepage_x86.md#2025-04-21_snippet_1\n\nLANGUAGE: aws\nCODE:\n```\narn:aws:lambda:{region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:12\n```\n\n----------------------------------------\n\nTITLE: Testing Lambda Mask in Python\nDESCRIPTION: This is a test file which showcases a test lambda function that uses the Data Masking utility.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/tests/test_lambda_mask.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory Cache for Idempotent Requests in AWS Lambda\nDESCRIPTION: This diagram shows the flow of a successful idempotent request with in-memory caching enabled. The cache reduces the need to query the persistence layer on subsequent requests, improving performance for repeated operations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_29\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Lambda\n    participant Persistence Layer\n    alt initial request\n      Client->>Lambda: Invoke (event)\n      Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n      activate Persistence Layer\n      Note over Lambda,Persistence Layer: Set record status to INPROGRESS. <br> Prevents concurrent invocations <br> with the same payload\n      Lambda-->>Lambda: Call your function\n      Lambda->>Persistence Layer: Update record with result\n      deactivate Persistence Layer\n      Persistence Layer-->>Persistence Layer: Update record\n      Note over Lambda,Persistence Layer: Set record status to COMPLETE. <br> New invocations with the same payload <br> now return the same result\n      Lambda-->>Lambda: Save record and result in memory\n      Lambda-->>Client: Response sent to client\n    else retried request\n      Client->>Lambda: Invoke (event)\n      Lambda-->>Lambda: Get idempotency_key=hash(payload)\n      Note over Lambda,Persistence Layer: Record status is COMPLETE and not expired\n      Lambda-->>Client: Same response sent to client\n    end\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for JSON Logging\nDESCRIPTION: This snippet shows the dependencies added to the `requirements.txt` file for enabling JSON logging.  It includes `aws-lambda-powertools` and `python-json-logger`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\naws-lambda-powertools\npython-json-logger\n```\n\n----------------------------------------\n\nTITLE: Minimal Feature Schema JSON\nDESCRIPTION: This JSON represents a minimal feature flag schema with a name and a default value. It represents the most basic structure for a static flag.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"my_feature\": {\n      \"default\": true\n    },\n    \"another_feature\": {\n      \"default\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding High-Resolution Metrics in Python\nDESCRIPTION: This snippet illustrates adding high-resolution metrics by passing a 'resolution' parameter to the 'add_metric' method. It requires the 'MetricResolution' enum or values 1 or 60 passed as resolution.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/add_high_resolution_metric.py\"\n```\n\n----------------------------------------\n\nTITLE: Single Metric with Different Dimensions Output JSON\nDESCRIPTION: This JSON snippet showcases the structure of a log entry when a single metric with different dimensions is emitted.  It shows how the `ProcessingLatency` metric includes specific dimensions like `service` and `operation`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_aws\": {\n        \"Timestamp\": 1686248095011,\n        \"CloudWatchMetrics\": [\n            {\n                \"Namespace\": \"MyApplication\",\n                \"Dimensions\": [\n                    [\n                        \"service\",\n                        \"operation\"\n                    ]\n                ],\n                \"Metrics\": [\n                    {\n                        \"Name\": \"ProcessingLatency\",\n                        \"Unit\": \"Milliseconds\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample SQS Batch Processing Response\nDESCRIPTION: This JSON snippet provides an example of the response structure returned by the BatchProcessor when processing SQS messages.  It includes the `batchItemFailures` list, indicating which messages (identified by their messageId) failed to be processed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_sqs_response.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Lambda Layer Pipeline Visualization\nDESCRIPTION: This Mermaid code defines a diagram that visually represents the Lambda Layer pipeline for building and deploying Lambda Layers with multiple Python versions and architectures. It showcases the different stages of the pipeline, from fetching the PyPi release to deploying the CDK assets in beta and production environments, including canary tests.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_11\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph LR\n    Fetch[Fetch PyPi release] --> P39[<strong>Python 3.9</strong>]\n    Fetch --> P310[<strong>Python 3.10</strong>]\n    Fetch --> P311[<strong>Python 3.11</strong>]\n    Fetch --> P312[<strong>Python 3.12</strong>]\n    Fetch --> P313[<strong>Python 3.13</strong>]\n\n    subgraph build [\"LAYER BUILD\"]\n      P39 --> P39x86[build x86_64]\n      P39 --> P39arm64[build arm64]\n      P310 --> P310x86[build x86_64]\n      P310 --> P310arm64[build arm64]\n      P311 --> P311x86[build x86_64]\n      P311 --> P311arm64[build arm64]\n      P312 --> P312x86[build x86_64]\n      P312 --> P312arm64[build arm64]\n      P313 --> P313x86[build x86_64]\n      P313 --> P313arm64[build arm64]\n      P39x86 --> CDKP2[CDK Package]\n      P39arm64 --> CDKP2[CDK Package]\n      P310x86 --> CDKP3[CDK Package]\n      P310arm64 --> CDKP3[CDK Package]\n      P311x86 --> CDKP4[CDK Package]\n      P311arm64 --> CDKP4[CDK Package]\n      P312x86 --> CDKP5[CDK Package]\n      P312arm64 --> CDKP5[CDK Package]\n      P313x86 --> CDKP6[CDK Package]\n      P313arm64 --> CDKP6[CDK Package]\n    end\n\n    subgraph beta [\"BETA (all regions)\"]\n      CDKP2 --> DeployBeta\n      CDKP3 --> DeployBeta\n      CDKP4 --> DeployBeta\n      CDKP5 --> DeployBeta\n      CDKP6 --> DeployBeta\n      DeployBeta --> RunBetaCanary[\"Beta canary tests<br> <i>(all packages)</i>\"]\n    end\n    subgraph prod [\"PROD (all regions)\"]\n        RunBetaCanary---|<strong>If successful</strong>|DeployProd[Deploy to Prod]\n        DeployProd --> RunProdCanary[\"Prod canary tests<br> <i>(all packages)</i>\"]\n    end\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON for Nested Key Erasing\nDESCRIPTION: This JSON showcases the output after the nested `postcode` field has been erased. The value within the address object is replaced with masking characters.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_nested_key_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Executing Static Typing Analysis in Makefile\nDESCRIPTION: This snippet shows how to run static typing analysis using mypy through a Makefile command. It uses the 'type-check' target to perform static type checking on the codebase.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\ntype-check:\n\t${PYTHON} -m mypy aws_lambda_powertools tests examples\n```\n\n----------------------------------------\n\nTITLE: ScheduledNotification Example Event JSON\nDESCRIPTION: This JSON represents an example of a ScheduledNotification event for AWS Config Rule. It shows the structure of event data the Lambda function would receive for Config Rule Scheduled events.  The python code in the example expects this JSON structure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/awsConfigRuleScheduled.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: AWS Powertools Lambda Parser Reference\nDESCRIPTION: This snippet refers to the parser module within the aws_lambda_powertools.utilities.parser package. It indicates the starting point for exploring the parser's functionalities, classes, and methods available within this module.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/parser.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"::: aws_lambda_powertools.utilities.parser.parser\"\n```\n\n----------------------------------------\n\nTITLE: Defining Layer ARNs for Python 3.12 - AWS Lambda\nDESCRIPTION: This section outlines the ARN for AWS Lambda Powertools compatible with Python 3.12 across various AWS regions. These ARNs are crucial for developers integrating or deploying Lambda functions using the latest Python runtime.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/includes/_layer_homepage_arm64.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **`af-south-1`**     | **arn:aws:lambda:af-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:     |\n| **`ap-east-1`**      | **arn:aws:lambda:ap-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:      |\n| **`ap-northeast-1`** | **arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-northeast-2`** | **arn:aws:lambda:ap-northeast-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-northeast-3`** | **arn:aws:lambda:ap-northeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-south-1`**     | **arn:aws:lambda:ap-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:     |\n| **`ap-south-2`**     | **arn:aws:lambda:ap-south-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:     |\n| **`ap-southeast-1`** | **arn:aws:lambda:ap-southeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-2`** | **arn:aws:lambda:ap-southeast-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-3`** | **arn:aws:lambda:ap-southeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-4`** | **arn:aws:lambda:ap-southeast-4:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-5`** | **arn:aws:lambda:ap-southeast-5:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-7`** | **arn:aws:lambda:ap-southeast-7:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard: |\n| **`ca-central-1`**   | **arn:aws:lambda:ca-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:   |\n| **`eu-central-1`**   | **arn:aws:lambda:eu-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:   |\n| **`eu-central-2`**   | **arn:aws:lambda:eu-central-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:   |\n| **`eu-north-1`**     | **arn:aws:lambda:eu-north-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:     |\n| **`eu-south-1`**     | **arn:aws:lambda:eu-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:     |\n| **`eu-south-2`**     | **arn:aws:lambda:eu-south-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:     |\n| **`eu-west-1`**      | **arn:aws:lambda:eu-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:      |\n| **`eu-west-2`**      | **arn:aws:lambda:eu-west-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:      |\n| **`eu-west-3`**      | **arn:aws:lambda:eu-west-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:      |\n| **`il-central-1`**   | **arn:aws:lambda:il-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:   |\n| **`me-central-1`**   | **arn:aws:lambda:me-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:   |\n| **`me-south-1`**     | **arn:aws:lambda:me-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12**{: .copyMe}:clipboard:     |\n```\n\n----------------------------------------\n\nTITLE: Deleting a SAM Stack\nDESCRIPTION: Bash command to delete a deployed serverless application using the SAM CLI. The command removes the specified CloudFormation stack, freeing up AWS resources tied to it.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/tests/performance/data_masking/load_test_data_masking/pt-load-test-stack/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsam delete --stack-name \"pt-load-test-stack\"\n```\n\n----------------------------------------\n\nTITLE: Sample Event for Record Expiration\nDESCRIPTION: This JSON snippet represents a sample event payload used in conjunction with the record expiration example. The event is used as input to the Lambda function, and its idempotency record will be subject to the configured expiration window.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"examples/idempotency/src/working_with_record_expiration_payload.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Cold Start Metric Output JSON\nDESCRIPTION: Example JSON output showing the structure of cold start metric data after being processed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/capture_cold_start_metric_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Custom Masked Output Example - JSON\nDESCRIPTION: A JSON example depicting the result of applying custom data masking to input data, showing various masked outputs for each respective field.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/data_masking/src/output_custom_masking.json\"\n```\n\n----------------------------------------\n\nTITLE: CDK App Generation for E2E Testing\nDESCRIPTION: Dynamic CDK app generation for specific Python version and feature testing\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/maintainers.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom tests.e2e.event_handler.infrastructure import EventHandlerStack\nstack = EventHandlerStack()\nstack.create_resources()\nstack.app.synth()\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Serverless Application Repository (SAR)\nDESCRIPTION: This snippet defines the metadata for the AWS Serverless Application Repository (SAR). It includes information such as the application name, description, author, license, labels, homepage URL, semantic version, and source code URL.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/layer/sar/template.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"Metadata:\\n  AWS::ServerlessRepo::Application:\\n    Name: <SAR_APP_NAME>\\n    Description: \\\"AWS Lambda Layer for aws-lambda-powertools\\\"\\n    Author: AWS\\n    SpdxLicenseId: Apache-2.0\\n    LicenseUrl: <LAYER_CONTENT_PATH>/LICENSE\\n    ReadmeUrl: <LAYER_CONTENT_PATH>/README.md\\n    Labels: ['layer','lambda','powertools','python', 'aws']\\n    HomePageUrl: https://github.com/aws-powertools/powertools-lambda-python\\n    SemanticVersion: <VERSION>\\n    SourceCodeUrl: https://github.com/aws-powertools/powertools-lambda-python\"\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting in Makefile\nDESCRIPTION: This snippet demonstrates how to run code linting using a Makefile command. It uses the 'lint' target to execute linting checks on the codebase.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nlint:\n\t$(MAKE) style\n\t$(MAKE) lint-docs\n\t${PYTHON} -m ruff check .\n```\n\n----------------------------------------\n\nTITLE: Modulo Range Feature Event JSON\nDESCRIPTION: This JSON provides an example event payload for the modulo range feature flag example. It includes a user_id parameter, which is used in the modulo range calculation to determine if the feature is enabled for that user.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": 12345\n}\n```\n\n----------------------------------------\n\nTITLE: Modulo Range Feature Configuration JSON\nDESCRIPTION: This JSON configures a feature flag named `new_pricing` based on a modulo range condition. Users with user IDs that fall within the specified modulo range (BASE=100, START=0, END=20) will have the feature enabled.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"new_pricing\": {\n      \"default\": false,\n      \"rules\": {\n        \"user_segment\": {\n          \"when_match\": true,\n          \"conditions\": [\n            {\n              \"key\": \"CONTEXT_VALUE_MODULO_RANGE\",\n              \"value\": {\n                \"BASE\": 100,\n                \"START\": 0,\n                \"END\": 20\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing IoT Core Thing Registry Events with Python Lambda\nDESCRIPTION: Demonstrates handling IoT Core registry events for thing creation, updates, and deletion using the IoTRegistryThingEvent data model. This allows for automated responses to IoT device lifecycle events.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_sources/src/iot_registry_thing_event.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Gitpod Cloud Development Environment\nDESCRIPTION: Command to launch a pre-configured Gitpod cloud development environment using your forked repository. Requires replacing YOUR_USERNAME with your GitHub username.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/contributing/setup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://gitpod.io/#https://github.com/YOUR_USERNAME/powertools-lambda-python  #(1)!\n```\n\n----------------------------------------\n\nTITLE: Visualizing Successful Idempotent Request Flow in AWS Lambda\nDESCRIPTION: This diagram illustrates the flow of a successful idempotent request in AWS Lambda, showing both the initial request and subsequent retry. It demonstrates how the persistence layer prevents duplicate processing by storing the execution state and result.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_28\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Lambda\n    participant Persistence Layer\n    alt initial request\n        Client->>Lambda: Invoke (event)\n        Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n        activate Persistence Layer\n        Note over Lambda,Persistence Layer: Set record status to INPROGRESS. <br> Prevents concurrent invocations <br> with the same payload\n        Lambda-->>Lambda: Call your function\n        Lambda->>Persistence Layer: Update record with result\n        deactivate Persistence Layer\n        Persistence Layer-->>Persistence Layer: Update record\n        Note over Lambda,Persistence Layer: Set record status to COMPLETE. <br> New invocations with the same payload <br> now return the same result\n        Lambda-->>Client: Response sent to client\n    else retried request\n        Client->>Lambda: Invoke (event)\n        Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n        activate Persistence Layer\n        Persistence Layer-->>Lambda: Already exists in persistence layer.\n        deactivate Persistence Layer\n        Note over Lambda,Persistence Layer: Record status is COMPLETE and not expired\n        Lambda-->>Client: Same response sent to client\n    end\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous GraphQL Resolvers\nDESCRIPTION: Demonstrates testing approach for async GraphQL resolvers using pytest-asyncio, including both direct async testing and synchronous handler testing.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/assert_async_graphql_response.py\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Local Lambda Function with cURL - Bash\nDESCRIPTION: This command uses cURL to invoke the locally running Lambda function via the exposed API endpoint. It returns the JSON message from the Lambda function.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://127.0.0.1:3000/hello\n{\"message\": \"hello unknown!\"}\n```\n\n----------------------------------------\n\nTITLE: JSON Data for All Fields in a List Erasing\nDESCRIPTION: This JSON demonstrates how to erase a field (street) located at any index of the address list using a JSONPath expression `address[*].street`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_list_all_index.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiple EMF Blobs in Functional Tests\nDESCRIPTION: Advanced testing example for when using capture_cold_start_metric=True or when both Metrics and single_metric are used, verifying multiple EMF blobs are correctly emitted.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics/src/assert_multiple_emf_blobs.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining BaseLoggingException Class for AWS Lambda Powertools\nDESCRIPTION: Base exception class for all logging-related exceptions in AWS Lambda Powertools. It extends the built-in Exception class and serves as the parent class for more specific logging exceptions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/logger/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BaseLoggingException(Exception):\n    \"\"\"Base exception for all logging exceptions\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Performing Complexity Analysis in Makefile\nDESCRIPTION: This snippet shows how to run complexity analysis on the codebase using a Makefile command. It uses the 'complexity' target to execute various complexity checks.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\ncomplexity:\n\t${PYTHON} -m radon cc aws_lambda_powertools -a -nc\n\t${PYTHON} -m radon mi aws_lambda_powertools\n\t${PYTHON} -m radon raw aws_lambda_powertools\n\t${PYTHON} -m radon hal aws_lambda_powertools\n```\n\n----------------------------------------\n\nTITLE: Defining IdempotencyItemAlreadyExistsError Exception in Python\nDESCRIPTION: Exception raised when an idempotency record with the same idempotency key already exists in the persistence layer. This indicates a concurrent execution of the same function with the same parameters.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/idempotency/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass IdempotencyItemAlreadyExistsError(Exception):\n    \"\"\"Raised when an item already exists in the persistence layer\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Configuration Schema\nDESCRIPTION: JSON schema showing the feature flags configuration structure used by the custom store provider. Defines the format for feature flag definitions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/feature_flags/src/working_with_own_s3_store_provider_features.json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Standalone Validate Function\nDESCRIPTION: This code represents a sample JSON payload that would be validated against a defined schema using the standalone validate function. The payload's structure and data types should align with the constraints specified in the corresponding schema to pass validation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json\n    --8<-- \"examples/validation/src/getting_started_validator_standalone_payload.json\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Lambda Powertools Idempotency Persistence Module\nDESCRIPTION: This snippet demonstrates how to import the idempotency persistence module from AWS Lambda Powertools for Python. It uses a special markdown syntax to reference the module documentation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/idempotency/persistence.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: aws_lambda_powertools.utilities.idempotency.persistence\n```\n\n----------------------------------------\n\nTITLE: Single Metric with Different Timestamp Payload JSON\nDESCRIPTION: This JSON snippet shows the output when using different timestamps for single metrics. It demonstrates that each metric includes the specified timestamp.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_aws\": {\n        \"Timestamp\": 1686248309761,\n        \"CloudWatchMetrics\": [\n            {\n                \"Namespace\": \"MyApplication\",\n                \"Dimensions\": [\n                    [\n                        \"service\"\n                    ]\n                ],\n                \"Metrics\": [\n                    {\n                        \"Name\": \"ProcessingLatency\",\n                        \"Unit\": \"Milliseconds\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"service\": \"MyApplication\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Flushing Datadog Metrics\nDESCRIPTION: Example showing how to manually flush metrics when using AWS Lambda Web Adapter or custom middleware.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/flush_datadog_metrics.py\"\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON for Multiple Keys Erasing\nDESCRIPTION: This JSON shows the output after erasing both the `postcode` and `street` fields within the `address` object.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_multiple_keys_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Kinesis and DynamoDB Streams Multiple Failures Diagram\nDESCRIPTION: This sequence diagram represents the AWS Lambda batch processing for Kinesis and DynamoDB streams. It shows the processing path with multiple batch item failures.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_24\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant Streams\n    participant Lambda service\n    participant Lambda function\n    Lambda service->>Streams: Poll latest records\n    Lambda service->>Lambda function: Invoke (batch event)\n    activate Lambda function\n    Lambda function-->Lambda function: Process 2 out of 10 batch items\n    Lambda function--xLambda function: Fail on 3-5 batch items\n    Lambda function-->Lambda function: Continue processing batch items (6-10)\n    Lambda function->>Lambda service: Report batch items as failure (3-5)\n    deactivate Lambda function\n    activate Streams\n    Lambda service->>Streams: Checkpoints to lowest sequence number\n    Lambda service->>Streams: Poll records starting from updated checkpoint\n    deactivate Streams\n```\n\n----------------------------------------\n\nTITLE: Debugging Output JSON Format\nDESCRIPTION: Example of how the debugging output appears after processing, showing masked sensitive fields and any deserialization failures.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_sources/events/debugging_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Lambda Event JSON Structure\nDESCRIPTION: Example JSON structure of a Lambda event containing sensitive fields that will be masked during debugging output.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_sources/events/debugging_event.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining IdempotencyValidationError Exception in Python\nDESCRIPTION: Exception raised when the payload validation fails, which could occur when comparing the current request payload against a previously stored one to determine idempotency.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/idempotency/exceptions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass IdempotencyValidationError(Exception):\n    \"\"\"Raised when payload doesn't match the stored record\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Started with Cache Feature Configuration JSON\nDESCRIPTION: This JSON provides a basic feature flag configuration. It can be used to observe the effects of caching.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"example_feature\": {\n      \"default\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Simple JSON Erasing\nDESCRIPTION: This is example input in simple json format for masking `card_number` and `address.postcode`\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_simple_json.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference Links\nDESCRIPTION: Markdown directives for including AWS Lambda Powertools batch processing documentation modules\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/batch/decorators.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- markdownlint-disable MD043 MD041 -->\n::: aws_lambda_powertools.utilities.batch.decorators\n::: aws_lambda_powertools.utilities.batch.sqs_fifo_partial_processor\n```\n\n----------------------------------------\n\nTITLE: Standard Output Metrics JSON Format\nDESCRIPTION: Sample JSON output format when metrics are flushed to standard output for Datadog Forwarder integration.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/log_metrics_standard_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Idempotency with JSON Schema Validation in Python\nDESCRIPTION: Shows how to use the idempotency utility with the validator decorator, ensuring idempotency is the innermost decorator.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/src/integrate_idempotency_with_validator.py\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Testing\nDESCRIPTION: Bash script example showing how to set required environment variables before running tests.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/run_tests_env_var.sh\"\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Nested Key Erasing\nDESCRIPTION: This JSON example demonstrates the structure of the input data for erasing the nested `postcode` field within the `address` object.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_nested_key.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Contributing Process Flow Chart using Mermaid\nDESCRIPTION: A flow chart diagram showing the end-to-end contribution process from learning about contributions to taking learnings forward.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/contributing/getting_started.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    Learn[\"Learn about contributions\"] --> Find[\"Find areas to work / get mentoring\"] --> Work[\"Prepare pull request\"] --> Closing[\"Take learnings with you\"]\n```\n\n----------------------------------------\n\nTITLE: SQS FIFO Batch Processing With Skip Flag Diagram\nDESCRIPTION: The sequence diagram shows how the `SqsFifoPartialProcessor` manages batch processing in AWS Lambda with SQS FIFO queues using the `skip_group_on_error` flag.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant SQS queue\n    participant Lambda service\n    participant Lambda function\n    Lambda service->>SQS queue: Poll\n    Lambda service->>Lambda function: Invoke (batch event)\n    activate Lambda function\n    Lambda function-->Lambda function: Process 2 out of 10 batch items\n    Lambda function--xLambda function: Fail on 3rd batch item\n    Lambda function-->Lambda function: Process messages from another MessageGroupID\n    Lambda function->>Lambda service: Report 3rd batch item and all messages within the same MessageGroupID as failure\n    deactivate Lambda function\n    activate SQS queue\n    Lambda service->>SQS queue: Delete successful messages processed\n    SQS queue-->>SQS queue: Failed messages return\n    deactivate SQS queue\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from log_metrics Decorator\nDESCRIPTION: Example JSON output showing the structure of metrics data after being processed by the log_metrics decorator.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/log_metrics_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining BatchProcessingError Exception in AWS Lambda Powertools\nDESCRIPTION: Base exception for batch processing errors in the AWS Lambda Powertools batch utility. This exception serves as the parent class for more specific batch processing exceptions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/batch/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BatchProcessingError(Exception):\n    \"\"\"Base exception for batch processing errors\"\"\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema with Validation Rules\nDESCRIPTION: Generated OpenAPI schema that includes validation rules based on the type annotations in the Lambda handler. Describes the expected input and output formats with constraints.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/bedrock_agents.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_handler_bedrock_agents/src/getting_started_with_validation_schema.json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Kinesis Batch Processing Response\nDESCRIPTION: This JSON snippet provides an example of the response structure returned by the `BatchProcessor` when processing Kinesis Data Streams messages. It includes the list of `batchItemFailures` containing sequence numbers of records that failed to be processed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/batch_processing/src/getting_started_kinesis_response.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Including AWS AppConfig Feature Flags Documentation in Markdown\nDESCRIPTION: This markdown directive instructs documentation generators to include the API documentation for the AWS Lambda Powertools feature flags utility that integrates with AWS AppConfig.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/feature_flags/appconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: aws_lambda_powertools.utilities.feature_flags.appconfig\n```\n\n----------------------------------------\n\nTITLE: Multi-Value Metrics Output in JSON\nDESCRIPTION: This snippet contains the JSON output format for multi-value metrics, visually demonstrating how multiple values are grouped under the same metric name. The values are formatted as an array in the JSON output.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/metrics/src/add_multi_value_metrics_output.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handler Infrastructure with CDK\nDESCRIPTION: Demonstrates creating a CDK stack for Event Handler feature with infrastructure definition and resource creation\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/maintainers.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass EventHandlerStack(BaseInfrastructure):\n    def create_resources(self):\n        functions = self.create_lambda_functions()\n\n        self._create_alb(function=functions[\"AlbHandler\"])\n        ...\n\n    def _create_alb(self, function: Function):\n        vpc = ec2.Vpc.from_lookup(\n            self.stack,\n            \"VPC\",\n            is_default=True,\n            region=self.region,\n        )\n\n        alb = elbv2.ApplicationLoadBalancer(self.stack, \"ALB\", vpc=vpc, internet_facing=True)\n        CfnOutput(self.stack, \"ALBDnsName\", value=alb.load_balancer_dns_name)\n        ...\n```\n\n----------------------------------------\n\nTITLE: Getting Started with Cache Payload JSON\nDESCRIPTION: This JSON provides an example event payload for the caching feature flag example. It contains parameters typically used in lambda functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation\": \"get_user\",\n  \"user_id\": 123\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SAM Project\nDESCRIPTION: This bash command initializes a new AWS SAM project using the hello-world-powertools-python template. It specifies the package type as Zip and the runtime as python3.11, disabling tracing. This prepares a project with Lambda Powertools included.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n\"sam init --app-template hello-world-powertools-python --name sam-app --package-type Zip --runtime python3.11 --no-tracing\"\n```\n\n----------------------------------------\n\nTITLE: Defining Output for Lambda Layer ARN\nDESCRIPTION: This snippet defines the output for the Lambda Layer ARN (Amazon Resource Name).  It provides a description and the value of the ARN, referencing the LambdaLayer resource. It also exports the ARN with a name that includes the stack name.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/layer/sar/template.txt#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"Outputs:\\n  LayerVersionArn:\\n    Description: ARN for the published Layer version\\n    Value: !Ref LambdaLayer\\n    Export:\\n      Name: !Sub 'LayerVersionArn-${AWS::StackName}'\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Datadog Metrics Provider in Python\nDESCRIPTION: This code snippet demonstrates how to initialize the DatadogProvider class for sending metrics to Datadog. It shows the class constructor with its parameters and their default values.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/metrics/provider_datadog.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DatadogProvider(BaseProvider):\n    def __init__(\n        self,\n        namespace: str = \"\",\n        service: str = \"\",\n        api_key: Optional[str] = None,\n        site: Optional[str] = None,\n        host: Optional[str] = None,\n        flush_to_log: bool = True,\n        prefix: Optional[str] = None,\n        tags: Optional[Dict[str, Any]] = None,\n        constant_tags: Optional[Dict[str, Any]] = None,\n    ):\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON for Simple JSON Erasing\nDESCRIPTION: This JSON showcases the output after erasing data using the json data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_simple_json_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Lambda Layer using AWS SAM Template in YAML\nDESCRIPTION: This code snippet presents an AWS SAM template defining an AWS Lambda Layer. It specifies the metadata including the application name, description, author, and license, and declares a serverless transformation. The Resources section defines a LambdaLayer with properties such as description, compatible architectures, and runtimes. It outputs the LayerVersionArn. No specific dependencies are mentioned, but it requires AWS SAM and CloudFormation capabilities.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/layer_v3/sar/template.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nAWSTemplateFormatVersion: '2010-09-09'\\n\\nMetadata:\\n  AWS::ServerlessRepo::Application:\\n    Name: <SAR_APP_NAME>\\n    Description: \\\"AWS Lambda Layer for Powertools for AWS Lambda V3 [<ARCHITECTURE>] with python <PYTHON_RUNTIME>\\\"\\n    Author: AWS\\n    SpdxLicenseId: Apache-2.0\\n    LicenseUrl: <LAYER_CONTENT_PATH>/LICENSE\\n    ReadmeUrl: <LAYER_CONTENT_PATH>/README.md\\n    Labels: ['layer','lambda','powertools','python', 'aws', '<ARCHITECTURE>']\\n    HomePageUrl: https://github.com/aws-powertools/powertools-lambda-python\\n    SemanticVersion: <VERSION>\\n    SourceCodeUrl: https://github.com/aws-powertools/powertools-lambda-python\\n\\nTransform: AWS::Serverless-2016-10-31\\nDescription: AWS Lambda Layer for Powertools for AWS Lambda V3 [<ARCHITECTURE>] with python <PYTHON_RUNTIME>\\n\\nResources:\\n  LambdaLayer:\\n    Type: AWS::Serverless::LayerVersion\\n    Properties:\\n      Description: \\\"AWS Lambda Layer for Powertools for AWS Lambda V3 [<ARCHITECTURE>] - python <PYTHON_RUNTIME> - version <VERSION>\\\"\\n      LayerName: <SAR_APP_NAME>\\n      ContentUri: <LAYER_CONTENT_PATH>\\n      CompatibleArchitectures:\\n        - <ARCHITECTURE>\\n      CompatibleRuntimes:\\n        - python<PYTHON_RUNTIME>\\n      LicenseInfo: 'Available under the Apache-2.0 license.'\\n      RetentionPolicy: Retain\\n\\nOutputs:\\n  LayerVersionArn:\\n    Description: ARN for the published Layer version\\n    Value: !Ref LambdaLayer\\n    Export:\\n      Name: !Sub 'LayerVersionArn-${AWS::StackName}'\n```\n\n----------------------------------------\n\nTITLE: CloudWatch Dashboard Example Event JSON\nDESCRIPTION: This JSON represents an example event for a CloudWatch Dashboard custom widget. It outlines the structure of data that a Lambda function handling CloudWatch dashboard events would receive, which is processed in the corresponding python example using AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/cloudWatchDashboardEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Include Directive for AWS Powertools Validation Module\nDESCRIPTION: This directive specifies that documentation for the AWS Lambda Powertools validation utilities module should be included at this location. This is a documentation syntax directive that likely tells a documentation generator to insert API documentation for the specified module.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/validation.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: aws_lambda_powertools.utilities.validation\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Top Keys Erasing\nDESCRIPTION: This JSON example demonstrates the structure of the input data for erasing the top-level `card_number` field using the `erase` function with the `fields` parameter.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_top_keys.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AppConfig Store Provider with Options\nDESCRIPTION: Python example demonstrating how to configure the AppConfig store provider with various options including environment, application, caching settings, and custom loggers.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/appconfig_provider_options.py\"\n```\n\n----------------------------------------\n\nTITLE: Rebuild Changelog workflow definition\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow that automatically rebuilds the changelog for the AWS Powertools Lambda Python project upon code changes. By automating changelog generation, the workflow reduces the risk of human error and maintains an accurate, up-to-date record of project changes, while also keeping a protected branch.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n\".github/workflows/build_changelog.yml#L23\"\n```\n\n----------------------------------------\n\nTITLE: Beyond Boolean Payload JSON\nDESCRIPTION: This JSON provides an example event payload for the beyond boolean feature flag example. It includes a username parameter to be used in evaluating the feature flags.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"johndoe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Powertools Data Masking Dependency\nDESCRIPTION: Install the data masking dependency for aws-lambda-powertools using pip. This adds data masking capabilities to your Lambda functions. It requires Python and pip to be installed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install \\\"aws-lambda-powertools[datamasking]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: State Diagram for Data Masking Operations - Mermaid\nDESCRIPTION: This diagram visualizes the flow of data within the data masking utility, illustrating how sensitive information is processed through erasure, encryption, or decryption, with the help of AWS Encryption SDK.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    direction LR\n    LambdaFn: Your Lambda function\n    DataMasking: DataMasking\n    Operation: Possible operations\n    Input: Sensitive value\n    Erase: <strong>Erase</strong>\n    Encrypt: <strong>Encrypt</strong>\n    Decrypt: <strong>Decrypt</strong>\n    Provider: AWS Encryption SDK provider\n    Result: Data transformed <i>(erased, encrypted, or decrypted)</i>\n\n    LambdaFn --> DataMasking\n    DataMasking --> Operation\n\n    state Operation {\n        [*] --> Input\n        Input --> Erase: Irreversible\n        Input --> Encrypt\n        Input --> Decrypt\n        Encrypt --> Provider\n        Decrypt --> Provider\n    }\n\n    Operation --> Result\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Powertools Feature Flags Base Path Reference\nDESCRIPTION: Directory path reference for the feature flags base utility documentation using markdown directive syntax.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/feature_flags/base.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: aws_lambda_powertools.utilities.feature_flags.base\n```\n\n----------------------------------------\n\nTITLE: Including OpenAPI Documentation with Markdown Directive\nDESCRIPTION: This snippet uses a markdown directive to include OpenAPI documentation from the aws_lambda_powertools.event_handler.openapi module. The directive is used in a documentation system to embed or reference the module's documentation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/event_handler/openapi.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: aws_lambda_powertools.event_handler.openapi\n```\n\n----------------------------------------\n\nTITLE: Kinesis Sample Event in JSON\nDESCRIPTION: A JSON sample represents a Kinesis Data Streams event structure when integrated with Pydantic models in AWS Lambda processing. Important fields include sequence number and data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/batch.md#2025-04-21_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/batch_processing/src/pydantic_kinesis_event.json\"\n```\n\n----------------------------------------\n\nTITLE: Custom Boto Config Implementation\nDESCRIPTION: Example showing how to use custom botocore configuration for the idempotency persistence layer.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nconfig = Config(retries={\"max_attempts\": 5})\npersistence_store = DynamoDBPersistenceLayer(table_name=\"idempotency_store\", boto_config=config)\n\n@idempotent_function(persistence_store=persistence_store)\ndef handler(event, context):\n    return {\n        \"statusCode\": 200,\n        \"message\": \"success\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Structuring E2E Framework with Pytest Fixtures in Shell\nDESCRIPTION: This shell structure outline is part of the project's End-to-End (E2E) testing framework. It uses Pytest fixtures to coordinate infrastructure setup and test parallelization. The directory structure organizes feature-specific infrastructure definitions, Lambda handlers, and utility functions for testing AWS services. The expected outcome is a well-organized directory that supports efficient parallelized testing using Pytest and AWS CDK.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/maintainers.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── __init__.py\n├── conftest.py # builds Lambda Layer once\n├── logger\n│   ├── __init__.py\n│   ├── conftest.py  # deploys LoggerStack\n│   ├── handlers\n│   │   └── basic_handler.py\n│   ├── infrastructure.py # LoggerStack definition\n│   └── test_logger.py\n├── metrics\n│   ├── __init__.py\n│   ├── conftest.py  # deploys MetricsStack\n│   ├── handlers\n│   │   ├── basic_handler.py\n│   │   └── cold_start.py\n│   ├── infrastructure.py # MetricsStack definition\n│   └── test_metrics.py\n├── tracer\n│   ├── __init__.py\n│   ├── conftest.py  # deploys TracerStack\n│   ├── handlers\n│   │   ├── async_capture.py\n│   │   └── basic_handler.py\n│   ├── infrastructure.py  # TracerStack definition\n│   └── test_tracer.py\n└── utils\n    ├── __init__.py\n    ├── data_builder  # build_service_name(), build_add_dimensions_input, etc.\n    ├── data_fetcher  # get_traces(), get_logs(), get_lambda_response(), etc.\n    ├── infrastructure.py # base infrastructure like deploy logic, etc.\n```\n\n----------------------------------------\n\nTITLE: Custom Masking Input Example - JSON\nDESCRIPTION: The JSON input example that accompanies custom masking rules, illustrating how input data looks before applying dynamic or pattern-based masking.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/data_masking/src/payload_custom_masking.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining ExceptionInfo Class in AWS Lambda Powertools\nDESCRIPTION: A dataclass that stores information about exceptions encountered during batch processing. It captures the exception instance and an optional context dictionary for additional information.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/batch/exceptions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ExceptionInfo:\n    \"\"\"Class for storing information about an exception\"\"\"\n\n    exception: Exception\n    context: Dict[str, Any] = field(default_factory=dict)\n```\n\n----------------------------------------\n\nTITLE: Application code utilizing parameters\nDESCRIPTION: This section provides application code that may utilize the parameters utility but does not include specific testing or mocking logic. It serves as a contextual reference for understanding how parameters are integrated within the application.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parameters.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"python\n    def main_function():\n        value = get_parameter('my_parameter')\n        return value\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Layer with Serverless Framework\nDESCRIPTION: This YAML snippet shows how to deploy a Lambda Layer using the Serverless Framework.  It demonstrates the resource definition to pull the Lambda Powertools Layer.  The `hl_lines` attribute specifies which lines are important.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n\"--8<-- \\\"examples/homepage/install/sar/serverless.yml\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Idempotency Record with Mermaid\nDESCRIPTION: This snippet provides a visual representation of an idempotency record using Mermaid class diagrams. It shows the structure and relationship of the IdempotencyRecord class with the Status enumeration. This aids in understanding how idempotency records are modeled and their statuses represented.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nclassDiagram\n    direction LR\n    class IdempotencyRecord {\n        idempotency_key str\n        status Status\n        expiry_timestamp int\n        in_progress_expiry_timestamp int\n        response_data str~JSON~\n        payload_hash str\n    }\n    class Status {\n        <<Enumeration>>\n        INPROGRESS\n        COMPLETE\n        EXPIRED internal_only\n    }\n    IdempotencyRecord -- Status\n\n```\n\n----------------------------------------\n\nTITLE: Defining MetricValueError Exception in Python\nDESCRIPTION: This code snippet defines the MetricValueError exception class, which is raised when there's an error with the metric value. It inherits from Exception and serves as a base class for more specific metric-related exceptions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/metrics/exceptions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MetricValueError(Exception):\n    \"\"\"When invalid metric value provided\"\"\"\n```\n\n----------------------------------------\n\nTITLE: ALB Lambda Handler with Event Handler Resolver\nDESCRIPTION: Implements an ALB Lambda function using AWS Lambda Powertools event handler with routing and response configuration\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/maintainers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_powertools.event_handler import ALBResolver, Response, content_types\n\napp = ALBResolver()\n\n\n@app.get(\"/todos\")\ndef hello():\n    return Response(\n        status_code=200,\n        content_type=content_types.TEXT_PLAIN,\n        body=\"Hello world\",\n        cookies=[\"CookieMonster\", \"MonsterCookie\"],\n        headers={\"Foo\": [\"bar\", \"zbr\"]},\n    )\n\n\ndef lambda_handler(event, context):\n    return app.resolve(event, context)\n```\n\n----------------------------------------\n\nTITLE: AppSync Authorizer Example Event JSON\nDESCRIPTION: This JSON represents the structure of an AppSync Authorizer event. It defines the data expected in a Lambda function that is configured as an AppSync authorizer. The Python code expects this JSON format when handling events.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/appSyncAuthorizerEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Clearing Metrics Between Tests with Pytest\nDESCRIPTION: This snippet demonstrates the use of a Pytest fixture to clear Datadog metrics between test cases. It ensures metrics are reset, accounting for cold starts. The snippet is intended for use in test setups where metric state needs to be consistent across multiple tests.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/clear_datadog_metrics_in_tests.py\"\n```\n\n----------------------------------------\n\nTITLE: Specification of Package Hashes and Dependencies for MkDocs\nDESCRIPTION: This snippet specifies multiple dependencies for a Python project utilizing MkDocs. Each package is defined with its version and associated SHA-256 hash values, ensuring the package's integrity. Listed packages include mkdocs, mkdocs-get-deps, pyyaml-env-tag, and others. These dependencies are likely essential for building or documenting MkDocs projects. The use of the 'via' comments indicates the transitive nature of some dependencies.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/requirements.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--hash=sha256:6395c297d42274772abc367baaa79683958044e5d3835486c16da75d2a694631 \\\n--hash=sha256:688ba32a1cffef67fd2e9398a2efebaea461578b0923624778664cc1c914db5d \\\n--hash=sha256:68ccc6023a3400877818152ad9a1033e3db8625d899c72eacb5a668902e4d652 \\\n--hash=sha256:70b189594dbe54f75ab3a1acec5f1e3faa7e8cf2f1e08d9b561cb41b845f69d5 \\\n--hash=sha256:797b4f722ffa07cc8d62053e4cff1486fa6dc094105d13fea7b1de7d8bf71c9e \\\n--hash=sha256:7c36280e6fb8385e520936c3cb3b8042851904eba0e58d277dca80a5cfed590b \\\n--hash=sha256:7e7401d0de89a9a855c839bc697c079a4af81cf878373abd7dc625847d25cbd8 \\\n--hash=sha256:80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476 \\\n--hash=sha256:82d09873e40955485746739bcb8b4586983670466c23382c19cffecbf1fd8706 \\\n--hash=sha256:8388ee1976c416731879ac16da0aff3f63b286ffdd57cdeb95f3f2e085687563 \\\n--hash=sha256:8824b5a04a04a047e72eea5cec3bc266db09e35de6bdfe34c9436ac5ee27d237 \\\n--hash=sha256:8b9c7197f7cb2738065c481a0461e50ad02f18c78cd75775628afb4d7137fb3b \\\n--hash=sha256:9056c1ecd25795207ad294bcf39f2db3d845767be0ea6e6a34d856f006006083 \\\n--hash=sha256:936d68689298c36b53b29f23c6dbb74de12b4ac12ca6cfe0e047bedceea56180 \\\n--hash=sha256:9b22676e8097e9e22e36d6b7bda33190d0d400f345f23d4065d48f4ca7ae0425 \\\n--hash=sha256:a4d3091415f010369ae4ed1fc6b79def9416358877534caf6a0fdd2146c87a3e \\\n--hash=sha256:a8786accb172bd8afb8be14490a16625cbc387036876ab6ba70912730faf8e1f \\\n--hash=sha256:a9f8c2e67970f13b16084e04f134610fd1d374bf477b17ec1599185cf611d725 \\\n--hash=sha256:bc2fa7c6b47d6bc618dd7fb02ef6fdedb1090ec036abab80d4681424b84c1183 \\\n--hash=sha256:c70c95198c015b85feafc136515252a261a84561b7b1d51e3384e0655ddf25ab \\\n--hash=sha256:cc1c1159b3d456576af7a3e4d1ba7e6924cb39de8f67111c735f6fc832082774 \\\n--hash=sha256:ce826d6ef20b1bc864f0a68340c8b3287705cae2f8b4b1d932177dcc76721725 \\\n--hash=sha256:d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e \\\n--hash=sha256:d7fded462629cfa4b685c5416b949ebad6cec74af5e2d42905d41e257e0869f5 \\\n--hash=sha256:d84a1718ee396f54f3a086ea0a66d8e552b2ab2017ef8b420e92edbc841c352d \\\n--hash=sha256:d8e03406cac8513435335dbab54c0d385e4a49e4945d2909a581c83647ca0290 \\\n--hash=sha256:e10ce637b18caea04431ce14fabcf5c64a1c61ec9c56b071a4b7ca131ca52d44 \\\n--hash=sha256:ec031d5d2feb36d1d1a24380e4db6d43695f3748343d99434e6f5f9156aaa2ed \\\n--hash=sha256:ef6107725bd54b262d6dedcc2af448a266975032bc85ef0172c5f059da6325b4 \\\n--hash=sha256:efdca5630322a10774e8e98e1af481aad470dd62c3170801852d752aa7a783ba \\\n--hash=sha256:f753120cb8181e736c57ef7636e83f31b9c0d1722c516f7e86cf15b7aa57ff12 \\\n--hash=sha256:ff3824dc5261f50c9b0dfb3be22b4567a6f938ccce4587b38952d85fd9e9afe4\n# via\n#   mkdocs\n#   mkdocs-get-deps\n#   pyyaml-env-tag\npyyaml-env-tag==0.1 \\\n--hash=sha256:70092675bda14fdec33b31ba77e7543de9ddc88f2e5b99160396572d11525bdb \\\n--hash=sha256:af31106dec8a4d68c60207c1886031cbf839b68aa7abccdb19868200532c2069\n# via mkdocs\nsix==1.16.0 \\\n--hash=sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926 \\\n--hash=sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\n# via python-dateutil\nsmmap==5.0.1 \\\n--hash=sha256:dceeb6c0028fdb6734471eb07c0cd2aae706ccaecab45965ee83f11c8d3b1f62 \\\n--hash=sha256:e6d8668fa5f93e706934a62d7b4db19c8d9eb8cf2adbb75ef1b675aa332b69da\n# via gitdb\nwatchdog==5.0.2 \\\n--hash=sha256:14dd4ed023d79d1f670aa659f449bcd2733c33a35c8ffd88689d9d243885198b \\\n--hash=sha256:29e4a2607bd407d9552c502d38b45a05ec26a8e40cc7e94db9bb48f861fa5abc \\\n--hash=sha256:3960136b2b619510569b90f0cd96408591d6c251a75c97690f4553ca88889769 \\\n--hash=sha256:3e8d5ff39f0a9968952cce548e8e08f849141a4fcc1290b1c17c032ba697b9d7 \\\n--hash=sha256:53ed1bf71fcb8475dd0ef4912ab139c294c87b903724b6f4a8bd98e026862e6d \\\n--hash=sha256:5597c051587f8757798216f2485e85eac583c3b343e9aa09127a3a6f82c65ee8 \\\n--hash=sha256:638bcca3d5b1885c6ec47be67bf712b00a9ab3d4b22ec0881f4889ad870bc7e8 \\\n--hash=sha256:6bec703ad90b35a848e05e1b40bf0050da7ca28ead7ac4be724ae5ac2653a1a0 \\\n--hash=sha256:726eef8f8c634ac6584f86c9c53353a010d9f311f6c15a034f3800a7a891d941 \\\n--hash=sha256:72990192cb63872c47d5e5fefe230a401b87fd59d257ee577d61c9e5564c62e5 \\\n--hash=sha256:7d1aa7e4bb0f0c65a1a91ba37c10e19dabf7eaaa282c5787e51371f090748f4b \\\n--hash=sha256:8c47150aa12f775e22efff1eee9f0f6beee542a7aa1a985c271b1997d340184f \\\n--hash=sha256:901ee48c23f70193d1a7bc2d9ee297df66081dd5f46f0ca011be4f70dec80dab \\\n--hash=sha256:963f7c4c91e3f51c998eeff1b3fb24a52a8a34da4f956e470f4b068bb47b78ee \\\n--hash=sha256:9814adb768c23727a27792c77812cf4e2fd9853cd280eafa2bcfa62a99e8bd6e \\\n--hash=sha256:aa9cd6e24126d4afb3752a3e70fce39f92d0e1a58a236ddf6ee823ff7dba28ee \\\n--hash=sha256:b6dc8f1d770a8280997e4beae7b9a75a33b268c59e033e72c8a10990097e5fde \\\n--hash=sha256:b84bff0391ad4abe25c2740c7aec0e3de316fdf7764007f41e248422a7760a7f \\\n--hash=sha256:ba32efcccfe2c58f4d01115440d1672b4eb26cdd6fc5b5818f1fb41f7c3e1889 \\\n--hash=sha256:bda40c57115684d0216556671875e008279dea2dc00fcd3dde126ac8e0d7a2fb \\\n--hash=sha256:c4a440f725f3b99133de610bfec93d570b13826f89616377715b9cd60424db6e \\\n--hash=sha256:d010be060c996db725fbce7e3ef14687cdcc76f4ca0e4339a68cc4532c382a73 \\\n--hash=sha256:d2ab34adc9bf1489452965cdb16a924e97d4452fcf88a50b21859068b50b5c3b \\\n--hash=sha256:d7594a6d32cda2b49df3fd9abf9b37c8d2f3eab5df45c24056b4a671ac661619 \\\n--hash=sha256:d961f4123bb3c447d9fcdcb67e1530c366f10ab3a0c7d1c0c9943050936d4877 \\\n--hash=sha256:dae7a1879918f6544201d33666909b040a46421054a50e0f773e0d870ed7438d \\\n--hash=sha256:dcebf7e475001d2cdeb020be630dc5b687e9acdd60d16fea6bb4508e7b94cf76 \\\n--hash=sha256:f627c5bf5759fdd90195b0c0431f99cff4867d212a67b384442c51136a098ed7 \\\n--hash=sha256:f8b2918c19e0d48f5f20df458c84692e2a054f02d9df25e6c3c930063eca64c1 \\\n--hash=sha256:fb223456db6e5f7bd9bbd5cd969f05aae82ae21acc00643b60d81c770abd402b\n# via mkdocs\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Slicing a List Erasing\nDESCRIPTION: This JSON demonstrates how to erase data by slicing a list using a JSONPath expression `address[-1].street`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_list_slice.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: AWS SAM Template for Lambda Function with Tracing\nDESCRIPTION: This YAML code defines an AWS SAM template that describes an AWS Lambda function with API Gateway enabled for tracing. It includes properties such as function timeout, tracing configuration, and API events for the application endpoints.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nAWSTemplateFormatVersion: \"2010-09-09\"\nTransform: AWS::Serverless-2016-10-31\nDescription: Sample SAM Template for powertools-quickstart\nGlobals:\n    Function:\n        Timeout: 3\n    Api:\n      TracingEnabled: true\nResources:\n    HelloWorldFunction:\n        Type: AWS::Serverless::Function\n        Properties:\n            CodeUri: hello_world/\n            Handler: app.lambda_handler\n            Runtime: python3.9\n            Tracing: Active\n            Events:\n                HelloWorld:\n                    Type: Api\n                    Properties:\n                        Path: /hello\n                        Method: get\n                HelloWorldName:\n                    Type: Api\n                    Properties:\n                        Path: /hello/{name}\n                        Method: get\nOutputs:\n    HelloWorldApi:\n        Description: \"API Gateway endpoint URL for Prod stage for Hello World function\"\n        Value: !Sub \"https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/\"\n```\n```\n\n----------------------------------------\n\nTITLE: API Gateway Proxy Example Event JSON\nDESCRIPTION: Sample JSON payload representing an API Gateway Proxy event used for demonstrating event source data class initialization\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/event_sources/events/apigw_event.json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Unwrapping Event Validation\nDESCRIPTION: This code represents a sample JSON payload which contains the detail that will be validated using a defined schema and JMESPath. The detail's structure and data types should align with the constraints specified in the corresponding schema to pass validation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n```json\n    --8<-- \"examples/validation/src/getting_started_validator_unwrapping_payload.json\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: AWS CLI command to download Lambda Layer content\nDESCRIPTION: This bash command retrieves the Lambda Layer version details by ARN using the AWS CLI. The command takes the ARN of the Lambda Layer and the region as arguments and returns the layer's metadata.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\naws lambda get-layer-version-by-arn --arn arn:aws:lambda:eu-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:12 --region eu-west-1\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata Output JSON\nDESCRIPTION: This JSON snippet represents the expected output when adding metadata to the metrics. It includes the `invocationId` in the output.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_aws\": {\n        \"Timestamp\": 1686247837721,\n        \"CloudWatchMetrics\": [\n            {\n                \"Namespace\": \"MyApplication\",\n                \"Dimensions\": [\n                    [\n                        \"service\"\n                    ]\n                ],\n                \"Metrics\": [\n                    {\n                        \"Name\": \"SuccessfulInvocations\",\n                        \"Unit\": \"Count\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"service\": \"MyApplication\",\n    \"invocationId\": \"4f6b2586-647a-44e8-a744-b200f66c08ca\",\n    \"message\": \"Hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IdempotencyPersistenceLayerError Exception in Python\nDESCRIPTION: Base exception for errors related to the persistence layer used by the idempotency utility. Serves as a parent class for more specific persistence layer exceptions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/idempotency/exceptions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass IdempotencyPersistenceLayerError(Exception):\n    \"\"\"Base class for persistence layer errors\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Release Process Visualization with Mermaid Gantt Chart\nDESCRIPTION: Detailed visualization of the release process showing various stages, steps, and approximate time taken for each component of the release workflow\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/maintainers.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngantt\n\ntitle      Release process\ndateFormat HH:mm\naxisFormat %H:%M\n\nRelease commit   : milestone, m1, 10:00,2m\n\nsection Seal\n    Bump release version        : active, 8s\n    Prevent source tampering    : active, 43s\nsection QA\n    Quality checks              : active, 2.2m\nsection Build\n    Checksum                    : active, 8s\n    Build release artifact      : active, 39s\n    Seal                        : active, 8s\nsection Provenance\n    Attest build                : active, 8s\n    Sign attestation            : active, attestation, 10:06, 8s\n\nsection Release\n    Checksum                    : active, 8s\n    PyPi temp credentials       : active, 8s\n    Publish PyPi                : active, pypi, 10:07, 29s\n\nPyPi release : milestone, m2, 10:07,1s\n\nsection Git release\n    Checksum                    : active, after pypi, 8s\n    Git Tag                     : active, 8s\n    Bump package version        : active, 8s\n    Create PR                   : active, 8s\n    Upload attestation          : active, 8s\n\nsection Layer release\n    Build (x86_64+ARM)             : active, layer_build, 10:08, 6m\n    Deploy Beta                 : active, layer_beta, after layer_build, 6.3m\n    Deploy Prod                 : active, layer_prod, after layer_beta, 6.3m\n\nLayer release : milestone, m3, 10:26,1s\n\nsection SAR release\n    Deploy Beta                 : active, sar_beta, after layer_beta, 2.2m\n    Deploy Prod                 : active, sar_prod, after sar_beta, 2.2m\n\nSAR release : milestone, m4, 10:25,1s\n\nsection Docs\n    Create PR (Layer ARN)       : active, after layer_prod, 8s\n    Release versioned docs      : active, 2.2m\n\nDocumentation release : milestone, m4, 10:28,1m\n\nsection Post-release\n    Close pending issues        : active, 8s\n\nRelease complete : milestone, m6, 10:31,2m\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON for All Nested Keys Erasing\nDESCRIPTION: This JSON displays the output after the entire `address` object has been erased from the input data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_all_nested_keys_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata with put_metadata method\nDESCRIPTION: This Python code demonstrates how to add arbitrary metadata to a trace using the `put_metadata` method of the `Tracer` class. Metadata are key-value pairs that are associated with traces but not indexed by AWS X-Ray.  You can use them to add additional context for an operation using any native object.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/tracer.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"--8<-- \\\"examples/tracer/src/put_trace_metadata.py\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Development Setup using Make command\nDESCRIPTION: This command is used to set up the development environment locally. It likely creates a virtual environment and installs the necessary dependencies.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON for Slicing a List Erasing\nDESCRIPTION: This JSON showcases the output after erasing the street field at index -1 of the address list\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_list_slice_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for AppSync Direct Lambda Resolver\nDESCRIPTION: This GraphQL schema defines types for Todo items and queries to fetch and list todos. It's used as a sample infrastructure for the initial examples with an AppSync Direct Lambda Resolver.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Todo {\n  id: ID!\n  name: String!\n  description: String\n}\n\ntype Query {\n  getTodo(id: ID!): Todo\n  listTodos: [Todo]\n}\n\ntype Mutation {\n  createTodo(name: String!, description: String): Todo\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Event JSON for Idempotent Response Hook\nDESCRIPTION: Example JSON payload for testing the idempotent response hook functionality.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/idempotency/src/working_with_response_hook_payload.json\"\n```\n\n----------------------------------------\n\nTITLE: AWS CLI get-layer-version-by-arn Command\nDESCRIPTION: This AWS CLI command retrieves the version information for a specified Lambda Layer ARN, and the `Location` key in the output includes pre-signed URL for downloading the layer content. Replace the example ARN and region with the actual values.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"aws lambda get-layer-version-by-arn --arn arn:aws:lambda:eu-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:12 --region eu-west-1\"\n```\n\n----------------------------------------\n\nTITLE: Updating AWS Lambda Function with Amplify CLI - Python\nDESCRIPTION: This snippet explains how to update an existing AWS Lambda function using the Amplify CLI. It specifically addresses modifying the configuration for Lambda layers. Users must provide the function name and the ARN for the Lambda layers they wish to enable. The outcome is an updated Lambda function that incorporates the specified layers.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/examples/homepage/install/x86_64/amplify.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n❯ amplify update function\n? Select the Lambda function you want to update test2\nGeneral information\n- Name: <NAME-OF-FUNCTION>\n? Which setting do you want to update? Lambda layers configuration\n? Do you want to enable Lambda layers for this function? Yes\n? Enter up to 5 existing Lambda layer ARNs (comma-separated): arn:aws:lambda:eu-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:12\n? Do you want to edit the local lambda function now? No\n```\n\n----------------------------------------\n\nTITLE: Installing Powertools with pip\nDESCRIPTION: Install the core aws-lambda-powertools package using pip.  This installs the basic library without any extra dependencies.  It requires Python and pip to be installed.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install \\\"aws-lambda-powertools\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Encrypted Data Input Example - JSON\nDESCRIPTION: JSON input data used for encryption examples. This illustrates how data is structured before encryption using the AWS Encryption SDK.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/data_masking/src/generic_data_input.json\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Boto3 Session with Feature Flags\nDESCRIPTION: Example showing how to use a custom boto3 session when initializing the feature flags AppConfig provider, allowing for custom AWS credentials or configurations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/feature_flags/src/custom_boto_session_feature_flags.py\"\n```\n\n----------------------------------------\n\nTITLE: Run documentation website locally using Make command\nDESCRIPTION: This command starts a local server to serve the documentation website. This allows developers to view and test the documentation website locally before contributing.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake docs-local\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies\nDESCRIPTION: Defines the required dependencies for the project, specifically the aws-lambda-powertools tracer extension and the requests library.  It specifies the minimum version of the requests library that is required.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/examples/event_handler_graphql/src/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"aws-lambda-powertools[tracer]\\nrequests>=2.32.0\"\n```\n\n----------------------------------------\n\nTITLE: Processing AWS Config Rule Event in Lambda Python\nDESCRIPTION: This code shows how to handle an AWS Config Rule event using Python in a Lambda function. It leverages AWS Lambda Powertools to parse the incoming event. Dependencies include AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"2-3 10\"\n--8<-- \"examples/event_sources/src/aws_config_rule.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaValidationError Exception in Python\nDESCRIPTION: Defines an exception class for schema validation errors in feature flags. This exception is raised when there are issues with the schema of feature flags.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/feature_flags/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SchemaValidationError(Exception):\n    \"\"\"When schema doesn't follow OpenAPI specification\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Metric to Datadog Provider in Python\nDESCRIPTION: This code snippet shows the add_metric method of the DatadogProvider class. It demonstrates how to add a metric with its name, unit, and value to the Datadog metrics collection.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/metrics/provider_datadog.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef add_metric(self, name: str, unit: Optional[str], value: Number) -> None:\n    self.metrics_collection.distribution(\n        metric_name=self._get_metric_name(name),\n        value=value,\n        tags=self._get_metric_tags(),\n    )\n```\n\n----------------------------------------\n\nTITLE: JSON Data for All Nested Keys Erasing\nDESCRIPTION: This JSON demonstrates how to erase an entire nested object (`address`) from the input data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_all_nested_keys.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest\nDESCRIPTION: Commands for running unit and integration tests using pytest for the serverless application. Installs test dependencies with pip and executes tests located in the 'tests' folder. Integration testing requires an existing deployed stack.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/tests/performance/data_masking/load_test_data_masking/pt-load-test-stack/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npt-load-test-stack$ pip install -r tests/requirements.txt --user\n# unit test\npt-load-test-stack$ python -m pytest tests/unit -v\n# integration test, requiring deploying the stack first.\n# Create the env variable AWS_SAM_STACK_NAME with the name of the stack we are testing\npt-load-test-stack$ AWS_SAM_STACK_NAME=\"pt-load-test-stack\" python -m pytest tests/integration -v\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Lambda Powertools via pip\nDESCRIPTION: This code snippet shows how to install the AWS Lambda Powertools library using pip, the Python package installer.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/benchmark/src/instrumented/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install aws-lambda-powertools\n```\n\n----------------------------------------\n\nTITLE: Managing Unhandled Exceptions in Idempotent AWS Lambda Functions\nDESCRIPTION: This diagram illustrates how unhandled exceptions are managed in idempotent Lambda functions. When an exception occurs, the idempotency record is deleted to allow future retry attempts, preventing the function from getting stuck in a failed state.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_33\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Lambda\n    participant Persistence Layer\n    Client->>Lambda: Invoke (event)\n    Lambda->>Persistence Layer: Get or set (id=event.search(payload))\n    activate Persistence Layer\n    Note right of Persistence Layer: Locked during this time. Prevents multiple<br/>Lambda invocations with the same<br/>payload running concurrently.\n    Lambda--xLambda: Call handler (event).<br/>Raises exception\n    Lambda->>Persistence Layer: Delete record (id=event.search(payload))\n    deactivate Persistence Layer\n    Lambda-->>Client: Return error response\n```\n\n----------------------------------------\n\nTITLE: Bedrock Agent Example Event JSON\nDESCRIPTION: This JSON provides the example event structure for a Bedrock Agent event.  It details the format and content of the event data sent to the Lambda function from Bedrock Agent.  The Python code relies on this structure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/bedrockAgentEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Run API documentation locally using Make command\nDESCRIPTION: This command starts a local server to serve the API documentation. This allows developers to view and test the API documentation locally before contributing.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake docs-api-local\n```\n\n----------------------------------------\n\nTITLE: Defining Python dependencies\nDESCRIPTION: This snippet defines the dependencies required for the AWS Lambda Powertools for Python project. It specifies the minimum versions for requests and aws-encryption-sdk. Additionally, it includes the 'tracer' extra which adds tracing capabilities to aws-lambda-powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/tests/performance/data_masking/load_test_data_masking/pt-load-test-stack/function_1769/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"requests>=2.32.0\naws-lambda-powertools[tracer]\naws-encryption-sdk>=3.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaValidationError Exception in Python\nDESCRIPTION: Defines an exception class for feature not found errors. This exception is raised when a requested feature flag is not found in the configuration.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/feature_flags/exceptions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass FeatureNotFoundError(Exception):\n    \"\"\"When feature is not found in schema\"\"\"\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Logged Metrics\nDESCRIPTION: Provides the JSON formatted output that results from the logging and flushing of metrics, employing serialized metric structures to conform with CloudWatch requirements.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/metrics/src/log_metrics_output.json\"\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Multiple Keys Erasing\nDESCRIPTION: This JSON demonstrates how to erase multiple fields (`postcode` and `street`) within a nested object (`address`).\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_multiple_keys.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Local Testing with SAM CLI\nDESCRIPTION: Commands to test serverless functions locally using SAM CLI. It includes building with 'sam build --use-container', invoking a function with 'sam local invoke', and starting a local API with 'sam local start-api'. Requires the SAM CLI and Docker.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/tests/performance/data_masking/load_test_data_masking/pt-load-test-stack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npt-load-test-stack$ sam build --use-container\n```\n\nLANGUAGE: bash\nCODE:\n```\npt-load-test-stack$ sam local invoke HelloWorldFunction --event events/event.json\n```\n\nLANGUAGE: bash\nCODE:\n```\npt-load-test-stack$ sam local start-api\npt-load-test-stack$ curl http://localhost:3000/\n```\n\n----------------------------------------\n\nTITLE: Synthesizing CDK application with version context\nDESCRIPTION: This command synthesizes the CDK application, providing the Powertools for AWS Lambda (Python) version and Python version as context variables. The version is specified as a string (e.g., '3.0.0') and the Python version as well (e.g., '3.12').\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/layer_v3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncdk synth --context version=3.0.0 --pythonVersion=3.12\n```\n\n----------------------------------------\n\nTITLE: Normal Log Output Example\nDESCRIPTION: This is an example of a non-structured log output, demonstrating the contrast with JSON logging.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n[INFO]  2021-11-22T15:32:02.145Z        ba3bea3d-fe3a-45db-a2ce-72e813d55b91    Request from unknown received\n```\n\n----------------------------------------\n\nTITLE: AWS SAM Template for Data Masking - YAML\nDESCRIPTION: This is a placeholder for an AWS SAM template YAML, which describes required resources and configurations to set up data masking operations in an AWS Lambda environment using AWS Encryption SDK.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"examples/data_masking/sam/template.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Run documentation website locally using Docker and Make command\nDESCRIPTION: This command starts a local server to serve the documentation website using Docker. This provides a consistent environment for viewing and testing the documentation website locally before contributing.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake docs-local-docker\n```\n\n----------------------------------------\n\nTITLE: Envelope Encryption Visualized - Mermaid\nDESCRIPTION: This graph illustrates the concept of envelope encryption using master and data keys for securely managing sensitive data encryption, as implemented by the AWS Encryption SDK.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    M(Master key) --> |Encrypts| D(Data key)\n    D(Data key) --> |Encrypts| S(Sensitive data)\n```\n\n----------------------------------------\n\nTITLE: Custom Envelope Implementation for Event Bridge\nDESCRIPTION: Demonstrates creating a custom envelope by inheriting from BaseEnvelope and implementing a custom parse method to extract specific event details\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parser.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parser/src/bring_your_own_envelope.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining MetricUnitError Exception in Python\nDESCRIPTION: This code snippet defines the MetricUnitError exception class, which is a base exception for metric unit-related errors. It inherits from MetricValueError and includes a default error message.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/metrics/exceptions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MetricUnitError(MetricValueError):\n    \"\"\"When invalid metric unit provided\"\"\"\n\n    def __init__(self, unit: str, message: str = \"Unknown metric unit\"):\n        self.unit = unit\n        super().__init__(f\"{message}: {unit}\")\n```\n\n----------------------------------------\n\nTITLE: Defining IdempotencyKeyError Exception in Python\nDESCRIPTION: Exception raised when there's an issue with the idempotency key, such as being unable to extract a key from the provided event or function parameters.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/idempotency/exceptions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass IdempotencyKeyError(Exception):\n    \"\"\"Raised when an idempotency key cannot be extracted from the event\"\"\"\n```\n\n----------------------------------------\n\nTITLE: JSON Data for Complex Expressions Erasing\nDESCRIPTION: This JSON demonstrates erasing data with a conditional expression.  The example shows erasing data in a list using the conditional expression `$.address[?(@.postcode > 12000)]`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/choosing_payload_complex_search.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying with AWS SAM\nDESCRIPTION: Commands to build and deploy a serverless application using AWS SAM. 'sam build --use-container' prepares the source code, and 'sam deploy --guided' facilitates packaging and deploying the application with guided prompts. Prerequisites include the SAM CLI and Docker.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/tests/performance/data_masking/load_test_data_masking/pt-load-test-stack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsam build --use-container\nsam deploy --guided\n```\n\n----------------------------------------\n\nTITLE: Run tests and code baseline checks using Make command\nDESCRIPTION: This command runs all the tests and code baseline checks for the project. It ensures that the code meets the required standards and that all tests pass before submitting a pull request.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake pr\n```\n\n----------------------------------------\n\nTITLE: Python Requirements Specification\nDESCRIPTION: Detailed dependency list with version constraints and hash verification for MkDocs and related documentation tools\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nclick==8.1.7 \\\n    --hash=sha256:ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28\n```\n\n----------------------------------------\n\nTITLE: Defining Layer ARNs for Python 3.11 - AWS Lambda\nDESCRIPTION: This section specifies the ARN for AWS Lambda Powertools compatible with Python 3.11 across various AWS regions. Similarly, developers can copy these ARNs for deploying Lambda functions that require these packages.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/includes/_layer_homepage_arm64.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **`af-south-1`**     | **arn:aws:lambda:af-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:     |\n| **`ap-east-1`**      | **arn:aws:lambda:ap-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:      |\n| **`ap-northeast-1`** | **arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-northeast-2`** | **arn:aws:lambda:ap-northeast-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-northeast-3`** | **arn:aws:lambda:ap-northeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-south-1`**     | **arn:aws:lambda:ap-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:     |\n| **`ap-south-2`**     | **arn:aws:lambda:ap-south-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:     |\n| **`ap-southeast-1`** | **arn:aws:lambda:ap-southeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-2`** | **arn:aws:lambda:ap-southeast-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-3`** | **arn:aws:lambda:ap-southeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-4`** | **arn:aws:lambda:ap-southeast-4:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-5`** | **arn:aws:lambda:ap-southeast-5:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-7`** | **arn:aws:lambda:ap-southeast-7:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard: |\n| **`ca-central-1`**   | **arn:aws:lambda:ca-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:   |\n| **`eu-central-1`**   | **arn:aws:lambda:eu-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:   |\n| **`eu-central-2`**   | **arn:aws:lambda:eu-central-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:   |\n| **`eu-north-1`**     | **arn:aws:lambda:eu-north-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:     |\n| **`eu-south-1`**     | **arn:aws:lambda:eu-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:     |\n| **`eu-south-2`**     | **arn:aws:lambda:eu-south-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:     |\n| **`eu-west-1`**      | **arn:aws:lambda:eu-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:      |\n| **`eu-west-2`**      | **arn:aws:lambda:eu-west-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:      |\n| **`eu-west-3`**      | **arn:aws:lambda:eu-west-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:      |\n| **`il-central-1`**   | **arn:aws:lambda:il-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:   |\n| **`me-central-1`**   | **arn:aws:lambda:me-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:   |\n| **`me-south-1`**     | **arn:aws:lambda:me-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:     |\n| **`mx-central-1`**   | **arn:aws:lambda:mx-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:   |\n| **`sa-east-1`**      | **arn:aws:lambda:sa-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:      |\n| **`us-east-1`**      | **arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:      |\n| **`us-east-2`**      | **arn:aws:lambda:us-east-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:      |\n| **`us-west-1`**      | **arn:aws:lambda:us-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:      |\n| **`us-west-2`**      | **arn:aws:lambda:us-west-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python311-arm64:12**{: .copyMe}:clipboard:      |\n```\n\n----------------------------------------\n\nTITLE: Including Metrics Documentation Content\nDESCRIPTION: Markdown include directive that imports the main metrics documentation content from the core documentation directory.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"docs/core/metrics.md\"\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Lambda Layer ARN\nDESCRIPTION: This is a CloudFormation snippet showing how to add a Lambda Layer using SSM Parameter Store. It uses placeholders for architecture, Python version, and Layer version to be replaced with the desired values.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"MyFunction:\n    Type: \\\"AWS::Lambda::Function\\\"\n    Properties:\n        ...\n        Layers:\n        - {{resolve:ssm:/aws/service/powertools/python/{arch}/{python_version}/{version}}}\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Directive for AWS Lambda Powertools Logging Documentation\nDESCRIPTION: A markdown directive that imports and displays documentation for the AWS Lambda Powertools logging module for Python. The directive uses a custom syntax to reference the module path.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/logger/logger.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: aws_lambda_powertools.logging.logger\n```\n\n----------------------------------------\n\nTITLE: Sample Output JSON after Decryption\nDESCRIPTION: This JSON file showcases the expected output after the data has been successfully decrypted. The ciphertext from the input JSON is transformed into plaintext.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"--8<-- \\\"examples/data_masking/src/getting_started_decrypt_data_output.json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Lambda Logs using SAM CLI\nDESCRIPTION: Command to stream logs from AWS Lambda functions using the SAM CLI. Allows fetching, tailing, and filtering logs for troubleshooting. Supports any Lambda function deployed through SAM.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/tests/performance/data_masking/load_test_data_masking/pt-load-test-stack/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npt-load-test-stack$ sam logs -n HelloWorldFunction --stack-name pt-load-test-stack --tail\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Makefile\nDESCRIPTION: This snippet demonstrates how to execute various types of tests (unit, functional, and performance) using a Makefile command. It uses the 'test' target to run the test suite.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\ntest: dev-install\n\t${PYTHON} -m pytest tests/unit tests/functional\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Decrypt Operation with Encryption SDK (KMS)\nDESCRIPTION: This Mermaid sequence diagram illustrates the decrypt operation using the AWS Encryption SDK with KMS. It shows how the encrypted data key is decrypted, followed by authentication and integrity checks, and finally the decryption of the original data.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_45\n\nLANGUAGE: mermaid\nCODE:\n```\n\"sequenceDiagram\n    autonumber\n    participant Client\n    participant Lambda\n    participant DataMasking as Data Masking\n    participant EncryptionProvider as Encryption Provider\n    Client->>Lambda: Invoke (event)\n    Lambda->>DataMasking: Init Encryption Provider with master key\n    Note over Lambda,DataMasking: AWSEncryptionSDKProvider([KMS_KEY])\n    Lambda->>DataMasking: decrypt(data)\n    DataMasking->>EncryptionProvider: Decrypt encrypted data key\n    Note over DataMasking,EncryptionProvider: KMS Decrypt API\n    DataMasking->>DataMasking: Authentication and integrity checks\n    DataMasking->>DataMasking: DATA_KEY.decrypt(data)\n    DataMasking->>DataMasking: MASTER_KEY.encrypt(DATA_KEY)\n    DataMasking->>DataMasking: Discards decrypted data key\n    DataMasking->>Lambda: Plaintext\n    Lambda-->>Client: Return response\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog with AWS SAM\nDESCRIPTION: AWS Serverless Application Model (SAM) configuration example showing how to set up Datadog layers and SDK for a Lambda function.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"examples/metrics_datadog/sam/template.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Using Mermaid Flow Chart for Development Process\nDESCRIPTION: A Mermaid graph showing the end-to-end contribution process from development environment setup to collaboration.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/contributing/setup.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    Dev[\"Development environment\"] --> Quality[\"Run quality checks locally\"] --> PR[\"Prepare pull request\"] --> Collaborate\n```\n\n----------------------------------------\n\nTITLE: Initializing Lambda Context Type Hints in Function Handler\nDESCRIPTION: Demonstrates how to use LambdaContext typing in a Lambda function handler to provide static type hinting for context object. Helps developers leverage IDE type hints and improve code clarity.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/typing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aws_lambda_typing import LambdaContext\n\ndef handler(event, context: LambdaContext):\n    # Function implementation\n```\n\n----------------------------------------\n\nTITLE: Defining Layer ARNs for Python 3.10 - AWS Lambda\nDESCRIPTION: This section lists the ARN for AWS Lambda Powertools compatible with Python 3.10 across different AWS regions. Each ARN can be copied easily for use in AWS Lambda function configurations. This is essential for developers deploying Lambda functions that utilize these libraries.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/includes/_layer_homepage_arm64.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **`us-east-2`**      | **arn:aws:lambda:us-east-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-arm64:12**{: .copyMe}:clipboard:      |\n| **`us-west-1`**      | **arn:aws:lambda:us-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-arm64:12**{: .copyMe}:clipboard:      |\n| **`us-west-2`**      | **arn:aws:lambda:us-west-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-arm64:12**{: .copyMe}:clipboard:      |\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration with Feature Flags Envelope\nDESCRIPTION: Sample JSON payload containing feature flags within an envelope structure, demonstrating how flags can be nested within a larger configuration document.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/feature_flags.md#2025-04-21_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/feature_flags/src/extracting_envelope_payload.json\"\n```\n\n----------------------------------------\n\nTITLE: Importing Feature Flags Module in Python\nDESCRIPTION: This snippet demonstrates how to import the feature flags module from AWS Lambda Powertools for Python. It shows the correct import statement to use the feature flags functionality in your Lambda functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/feature_flags/feature_flags.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: aws_lambda_powertools.utilities.feature_flags.feature_flags\n```\n\n----------------------------------------\n\nTITLE: Code Integration Journey Timeline using Mermaid\nDESCRIPTION: This Mermaid timeline diagram illustrates the code integration journey for the project. It outlines the steps involved in project setup, pre-commit checks, pre-pull request checks, pull request checks, and after-merge checks, providing a visual representation of the CI process.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n    title Code integration journey (CI)\n    Project setup <br> (make dev)   : Code checkout\n                                    : Virtual environment\n                                    : Dependencies\n                                    : Git pre-commit hooks\n                                    : Local branch\n                                    : Local changes\n                                    : Local tests\n\n    Pre-commit checks <br> (git commit)     : Merge conflict check\n                                            : Trailing whitespaces\n                                            : TOML checks\n                                            : Code linting (standards)\n                                            : Markdown linting\n                                            : CloudFormation linting\n                                            : GitHub Actions linting\n                                            : Terraform linting\n                                            : Secrets linting\n\n    Pre-Pull Request <br> (make pr)     : Code linting\n                                        : Docs linting\n                                        : Static typing analysis\n                                        : Tests (unit|functional|perf|dependencies)\n                                        : Security baseline\n                                        : Complexity baseline\n                                        : +pre-commit checks\n\n    Pull Request <br> (CI checks)   : Semantic PR title check\n                                    : Related issue check\n                                    : Acknowledgment check\n                                    : Code coverage diff\n                                    : Contribution size check\n                                    : Contribution category check\n                                    : Dependency vulnerability check\n                                    : GitHub Actions security check\n                                    : +pre-pull request checks\n\n    After merge <br> (CI checks)    : End-to-end tests\n                                    : Longer SAST check\n                                    : Security posture check (scorecard)\n                                    : GitHub Actions security check\n                                    : Rebuild Changelog\n                                    : Deploy staging docs\n                                    : Update draft release\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Linting for AWS Lambda Powertools Docs\nDESCRIPTION: HTML comment that disables specific markdownlint rules (MD043 and MD041) and references the AWS Lambda Powertools idempotency base utility path.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/idempotency/base.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- markdownlint-disable MD043 MD041 -->\n::: aws_lambda_powertools.utilities.idempotency.base\n```\n\n----------------------------------------\n\nTITLE: Stage documentation workflow definition\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to rebuild and deploy documentation changes to a staged version for the AWS Powertools Lambda Python project. Staging the documentation provides a safe environment to verify documentation updates before they are released to the production environment, ensuring that the documentation can always be rebuilt and is ready for release.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n\".github/workflows/on_push_docs.yml#L27C16-L27C16\"\n```\n\n----------------------------------------\n\nTITLE: Python 3.13 Lambda Powertools Layer ARNs by Region\nDESCRIPTION: AWS Lambda Layer ARNs for AWS Powertools Python 3.13 across multiple global regions, providing latest features and compatibility for Lambda functions.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/includes/_layer_homepage_x86.md#2025-04-21_snippet_2\n\nLANGUAGE: aws\nCODE:\n```\narn:aws:lambda:{region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-x86_64:12\n```\n\n----------------------------------------\n\nTITLE: Package Requirements with Hashes\nDESCRIPTION: A pip requirements file containing package versions with their SHA256 hashes for security and reproducibility. Generated automatically by pip-compile for a Python 3.11 environment.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/.gitpod_requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ncfgv==3.3.1 \\\n    --hash=sha256:c6a0883f3917a037485059700b9e75da2464e6c27051014ad85ba6aaa5884426 \\\n    --hash=sha256:f5a830efb9ce7a445376bb66ec94c638a9787422f96264c98edc6bdeed8ab736\n    # via pre-commit\ndistlib==0.3.6 \\\n    --hash=sha256:14bad2d9b04d3a36127ac97f30b12a19268f211063d8f8ee4f47108896e11b46 \\\n    --hash=sha256:f35c4b692542ca110de7ef0bea44d73981caeb34ca0b9b6b2e6d7790dda8f80e\n    # via virtualenv\nfilelock==3.12.2 \\\n    --hash=sha256:002740518d8aa59a26b0c76e10fb8c6e15eae825d34b6fdf670333fd7b938d81 \\\n    --hash=sha256:cbb791cdea2a72f23da6ac5b5269ab0a0d161e9ef0100e653b69049a7706d1ec\n    # via virtualenv\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Powertools Parser with Pydantic\nDESCRIPTION: The snippet provides the command to install the AWS Powertools Parser with a dependency on Pydantic v2 using pip. Ensure that Pydantic v2 is pre-installed as it is required for the parser functionality.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parser.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install aws-lambda-powertools[parser]\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Linting Rules for Documentation\nDESCRIPTION: Markdown linting configuration to disable specific rules (MD043 and MD041) for documentation formatting.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/feature_flags/base.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- markdownlint-disable MD043 MD041 -->\n```\n\n----------------------------------------\n\nTITLE: API Gateway Proxy Example Event JSON\nDESCRIPTION: This JSON represents an example event for an API Gateway proxy integration. It shows the structure of data that the Lambda function would receive for API Gateway proxy events. This event structure corresponds to the event handled in the Python code using AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n```json hl_lines=\"3 4\"\n--8<-- \"examples/event_sources/events/apigw_event.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing AWS Lambda Powertools Python Streaming Utilities\nDESCRIPTION: This snippet shows the markdown syntax for referencing AWS Lambda Powertools Python streaming utilities documentation. It includes references to S3 object streaming and various data transformations.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/streaming.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: aws_lambda_powertools.utilities.streaming.s3_object\n::: aws_lambda_powertools.utilities.streaming.transformations.csv\n::: aws_lambda_powertools.utilities.streaming.transformations.gzip\n::: aws_lambda_powertools.utilities.streaming.transformations.zip\n```\n\n----------------------------------------\n\nTITLE: Installing Powertools for AWS Lambda\nDESCRIPTION: This bash command installs the Powertools for AWS Lambda (Python) library via pip. Powertools enhances serverless applications with utilities for logging, tracing, and metrics. Ensure pip is installed before running this command.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/tests/performance/data_masking/load_test_data_masking/pt-load-test-stack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install aws-lambda-powertools\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Layer with Terraform\nDESCRIPTION: This Terraform snippet shows how to deploy a Lambda Layer. It demonstrates the Terraform configuration necessary to deploy the Lambda Powertools Layer. The `hl_lines` attribute specifies which lines are important.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_21\n\nLANGUAGE: terraform\nCODE:\n```\n\"--8<-- \\\"examples/homepage/install/sar/terraform.tf\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Encrypt Operation with Multiple KMS Keys\nDESCRIPTION: This Mermaid sequence diagram illustrates the encrypt operation when using multiple KMS keys. The diagram shows how the data is encrypted with each of the specified keys, making additional API calls for each key.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_masking.md#2025-04-21_snippet_44\n\nLANGUAGE: mermaid\nCODE:\n```\n\"sequenceDiagram\n    autonumber\n    participant Client\n    participant Lambda\n    participant DataMasking as Data Masking\n    participant EncryptionProvider as Encryption Provider\n    Client->>Lambda: Invoke (event)\n    Lambda->>DataMasking: Init Encryption Provider with master key\n    Note over Lambda,DataMasking: AWSEncryptionSDKProvider([KEY_1, KEY_2])\n    Lambda->>DataMasking: encrypt(data)\n    DataMasking->>EncryptionProvider: Create unique data key\n    Note over DataMasking,EncryptionProvider: KMS GenerateDataKey API - KEY_1\n    DataMasking->>DataMasking: Cache new unique data key\n    DataMasking->>DataMasking: DATA_KEY.encrypt(data)\n    DataMasking->>DataMasking: KEY_1.encrypt(DATA_KEY)\n    loop For every additional KMS Key\n        DataMasking->>EncryptionProvider: Encrypt DATA_KEY\n        Note over DataMasking,EncryptionProvider: KMS Encrypt API - KEY_2\n    end\n    DataMasking->>DataMasking: Create encrypted message\n    Note over DataMasking: Encrypted message includes encrypted data, all data keys encrypted, algorithm, and more.\n    DataMasking->>Lambda: Ciphertext from encrypted message\n    Lambda-->>Client: Return response\"\n```\n\n----------------------------------------\n\nTITLE: Powertools CI/CD Timeline\nDESCRIPTION: This Mermaid code defines a timeline diagram illustrating the CI/CD pipeline for Powertools for AWS Lambda (Python). It covers stages like Continuous Integration, Continuous Delivery, and specific processes for Lambda Layers and Documentation. The diagram outlines checks, builds, releases, and deployments.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/diagram_src/cicd_steps.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ntimeline\n    title Powertools for AWS Lambda (Python) CI/CD pipeline\n\n    section Continuous Integration\n    Project setup <br> (make dev)   : Code checkout\n                                    : Virtual environment\n                                    : Dependencies\n                                    : Git pre-commit hooks\n                                    : Local branch\n                                    : Local changes\n                                    : Local tests\n\n    Pre-commit checks <br> (git commit)     : Merge conflict check\n                                            : Trailing whitespaces\n                                            : TOML checks\n                                            : Code linting (standards)\n                                            : Markdown linting\n                                            : CloudFormation linting\n                                            : GitHub Actions linting\n                                            : Terraform linting\n                                            : Secrets linting\n\n    Pre-Pull Request <br> (make pr)     : Code linting\n                                        : Docs linting\n                                        : Static typing analysis\n                                        : Tests (unit|functional|perf)\n                                        : Security baseline\n                                        : Complexity baseline\n                                        : +pre-commit checks\n\n    Pull Request <br> (CI checks)   : Semantic PR title check\n                                    : Related issue check\n                                    : Acknowledgment check\n                                    : Code coverage diff\n                                    : Contribution size check\n                                    : Contribution category check\n                                    : Dependency vulnerability check\n                                    : GitHub Actions security check\n                                    : +pre-pull request checks\n\n    After merge <br> (CI checks)    : End-to-end tests\n                                    : Longer SAST check\n                                    : Security posture check (scorecard)\n                                    : GitHub Actions security check\n                                    : Rebuild Changelog\n                                    : Deploy staging docs\n                                    : Update draft release\n\n    section Continuous Delivery\n\n    Source code anti-tampering  : Checkout release commit code\n                                : Bump release version\n                                : Seal and upload artifact\n\n    Quality Assurance           : Restore sealed code\n                                : +Continuous Integration checks\n\n    Build                       : Restore sealed code\n                                : Integrity check\n                                : Build release artifact\n                                : Seal and upload artifact\n\n    Provenance                  : Detect build environment\n                                : Generate SLSA Builder\n                                : Verify SLSA Builder provenance\n                                : Create and sign provenance\n                                : Seal and upload artifact\n                                : Write to public ledger\n\n    Release                     : Restore sealed build\n                                : Integrity check\n                                : PyPi ephemeral credentials\n                                : Publish PyPi\n                                : Baking time\n\n    Git tagging                 : Restore sealed code\n                                : Integrity check\n                                : Bump git tag\n                                : Create temporary branch\n                                : Create PR\n\n    Lambda Layers               : Fetch PyPi release\n                                : Build x86_64 architecture\n                                : Build ARM architecture\n                                : Deploy Beta\n                                : Canary testing\n                                : Deploy Prod\n\n    Lambda Layers SAR           : Deploy Beta\n                                : Deploy Prod\n\n    Documentation               : Update Lambda Layer ARNs\n                                : Build User Guide\n                                : Build API Guide\n                                : Rebuild Changelog\n                                : Release new version\n                                : Update latest alias\n                                : Create temporary branch\n                                : Create PR\n\n    Post-release                : Close pending-release issues\n                                : Notify customers\n```\n\n----------------------------------------\n\nTITLE: Pytest Infrastructure Fixture for E2E Testing\nDESCRIPTION: Creates a Pytest fixture for deploying and tearing down infrastructure during end-to-end testing\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/maintainers.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\nfrom tests.e2e.event_handler.infrastructure import EventHandlerStack\n\n\n@pytest.fixture(autouse=True, scope=\"module\")\ndef infrastructure():\n    \"\"\"Setup and teardown logic for E2E test infrastructure\n\n    Yields\n    ------\n    Dict[str, str]\n        CloudFormation Outputs from deployed infrastructure\n    \"\"\"\n    stack = EventHandlerStack()\n    try:\n        yield stack.deploy()\n    finally:\n        stack.delete()\n```\n\n----------------------------------------\n\nTITLE: AppSync Resolver Example Event JSON\nDESCRIPTION: This JSON defines the expected structure of an AppSync resolver event. It is the data format a Lambda function receives when acting as an AppSync resolver. The python code expects this event structure.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/appSyncResolverEvent.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Importing External Markdown File in MkDocs\nDESCRIPTION: This snippet demonstrates how to include an external CHANGELOG.md file directly into MkDocs documentation. It uses the MkDocs-specific --8<-- syntax to inject the content of another file, while disabling markdownlint for this section due to the changelog's special formatting.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: <> (Includes Changelog content entire file as a snippet)\n<!-- changelog is partially generated, so it doesn't follow headings and required structure, so we disable it. -->\n<!-- markdownlint-disable -->\n--8<-- \"CHANGELOG.md\"\n```\n\n----------------------------------------\n\nTITLE: API Gateway Proxy V2 Example Event JSON\nDESCRIPTION: This JSON represents an example event for the API Gateway proxy v2 integration.  It provides the structure of the API Gateway proxy v2 event. It corresponds to the event processed in the related Python code using AWS Lambda Powertools.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/data_classes.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"tests/events/apiGatewayProxyV2Event.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Layer Resource with SAM\nDESCRIPTION: This snippet configures the AWS Lambda Layer resource using the Serverless Application Model (SAM). It sets properties such as the layer description, name, content URI, compatible runtimes (Python 3.13, 3.12, 3.11, 3.10, and 3.9), license information, and retention policy.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/layer/sar/template.txt#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"Resources:\\n  LambdaLayer:\\n    Type: AWS::Serverless::LayerVersion\\n    Properties:\\n      Description: \\\"AWS Lambda Layer for aws-lambda-powertools version <VERSION>\\\"\\n      LayerName: <SAR_APP_NAME>\\n      ContentUri: <LAYER_CONTENT_PATH>\\n      CompatibleRuntimes:\\n        - python3.13\\n        - python3.12\\n        - python3.11\\n        - python3.10\\n        - python3.9\\n      LicenseInfo: 'Available under the Apache-2.0 license.'\\n      RetentionPolicy: Retain\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling in AppSync Batch Resolver\nDESCRIPTION: Shows implementation of error handling in batch resolvers using raise_on_error flag to propagate exceptions instead of returning null values.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/event_handler/appsync.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/event_handler_graphql/src/advanced_batch_resolver_handling_error.py\"\n```\n\n----------------------------------------\n\nTITLE: Functional Testing of Datadog Metrics Output\nDESCRIPTION: This code snippet illustrates how to read standard output and assert that a single Datadog metric has been flushed using the built-in `capsys` fixture in Pytest. This method is crucial for validating that the metrics output behaves as expected during testing.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n=== \"assert_single_datadog_metric.py\"\n\n    ```python hl_lines=\"7\"\n    --8<-- \"examples/metrics_datadog/src/assert_single_datadog_metric.py\"  \n    ```\n```\n\n----------------------------------------\n\nTITLE: Dataclass Output Serialization with Idempotency (Explicit)\nDESCRIPTION: This example illustrates using the `DataclassSerializer` with an explicitly provided Dataclass type. Instead of relying on automatic type inference, the serializer is initialized with the specific Dataclass. This allows for explicit control over the serialization process, ensuring that the output is correctly handled when using `@idempotent_function`.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python hl_lines=\"8 30 38 40 50\"\n--8<-- \"examples/idempotency/src/working_with_dataclass_explicitly_output_serializer.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Last CSV Row Using Python Seek\nDESCRIPTION: This snippet demonstrates reading the last row of a large non-uniform CSV using Python's seek method. Prerequisites include understanding of file structure (row byte sizes). Inputs involve the file handle's seek position and read limit. Useful in scenarios for optimized memory usage and specific data extraction.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/s3_csv_stream_non_uniform_seek.py\"\n```\n\n----------------------------------------\n\nTITLE: Updating an existing Lambda function with Amplify\nDESCRIPTION: This snippet demonstrates how to update an existing Lambda function to add the AWS Lambda Powertools layer using the Amplify CLI. It walks through the interactive prompts for selecting the function to update, configuring Lambda layers, and specifying the layer ARN.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/examples/homepage/install/arm64/amplify.txt#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"> amplify update function\n? Select the Lambda function you want to update test2\nGeneral information\n- Name: <NAME-OF-FUNCTION>\n? Which setting do you want to update? Lambda layers configuration\n? Do you want to enable Lambda layers for this function? Yes\n? Enter up to 5 existing Lambda layer ARNs (comma-separated): arn:aws:lambda:eu-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12\n? Do you want to edit the local lambda function now? No\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SAM Template for Lambda Function with CloudWatch Permissions (YAML)\nDESCRIPTION: This SAM template configures the Lambda function with the necessary permissions to send metrics to CloudWatch. It includes the CloudWatchPutMetricPolicy and sets up API Gateway endpoints.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nAWSTemplateFormatVersion: \"2010-09-09\"\nTransform: AWS::Serverless-2016-10-31\nDescription: Sample SAM Template for powertools-quickstart\nGlobals:\n    Function:\n        Timeout: 3\nResources:\n    HelloWorldFunction:\n        Type: AWS::Serverless::Function\n        Properties:\n            CodeUri: hello_world/\n            Handler: app.lambda_handler\n            Runtime: python3.9\n            Tracing: Active\n            Events:\n                HelloWorld:\n                    Type: Api\n                    Properties:\n                        Path: /hello\n                        Method: get\n                HelloWorldName:\n                    Type: Api\n                    Properties:\n                        Path: /hello/{name}\n                        Method: get\n            Policies:\n                - CloudWatchPutMetricPolicy: {}\nOutputs:\n    HelloWorldApi:\n        Description: \"API Gateway endpoint URL for Prod stage for Hello World function\"\n        Value: !Sub \"https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/\"\n```\n\n----------------------------------------\n\nTITLE: JSON Data String Field Validation\nDESCRIPTION: Demonstrates using Pydantic's Json Type to parse and validate string fields containing JSON data, ensuring type safety and data integrity\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/parser.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/parser/src/string_fields_contain_json.py\"\n```\n\n----------------------------------------\n\nTITLE: Using Response Hooks with Idempotent AWS Lambda Functions\nDESCRIPTION: This diagram demonstrates how to use response hooks with idempotent Lambda functions. The response hook allows for custom manipulation of the cached response before it's sent back to the client on subsequent identical requests.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_30\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Lambda\n    participant Response hook\n    participant Persistence Layer\n    alt initial request\n        Client->>Lambda: Invoke (event)\n        Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n        activate Persistence Layer\n        Note over Lambda,Persistence Layer: Set record status to INPROGRESS. <br> Prevents concurrent invocations <br> with the same payload\n        Lambda-->>Lambda: Call your function\n        Lambda->>Persistence Layer: Update record with result\n        deactivate Persistence Layer\n        Persistence Layer-->>Persistence Layer: Update record\n        Note over Lambda,Persistence Layer: Set record status to COMPLETE. <br> New invocations with the same payload <br> now return the same result\n        Lambda-->>Client: Response sent to client\n    else retried request\n        Client->>Lambda: Invoke (event)\n        Lambda->>Persistence Layer: Get or set idempotency_key=hash(payload)\n        activate Persistence Layer\n        Persistence Layer-->>Response hook: Already exists in persistence layer.\n        deactivate Persistence Layer\n        Note over Response hook,Persistence Layer: Record status is COMPLETE and not expired\n        Response hook->>Lambda: Response hook invoked\n        Lambda-->>Client: Manipulated idempotent response sent to client\n    end\n```\n\n----------------------------------------\n\nTITLE: Sample Event for In-Memory Cache\nDESCRIPTION: This JSON snippet represents a sample event payload that can be used with the in-memory cache example. The event data is used as input to the Lambda function, and the resulting response will be cached based on the function's logic and the `IdempotencyConfig` settings.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n```json\n--8<-- \"examples/idempotency/src/working_with_local_cache_payload.json\"\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating with Datadog Forwarder\nDESCRIPTION: Example showing how to flush metrics to standard output for integration with Datadog Forwarder.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/metrics_datadog/src/flush_metrics_to_standard_output.py\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Module-based Data Transformations in Python\nDESCRIPTION: Demonstrates assertion of data transformation in a module-based setup using Python. It ensures modular transformation logic behaves as expected. Key for ensuring transformations are consistent and accurate across various module contexts.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/streaming.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/streaming/src/assert_transformation_module.py\"\n```\n\n----------------------------------------\n\nTITLE: Custom Boto3 Session Configuration\nDESCRIPTION: Example demonstrating how to customize the boto3 session configuration for the idempotency persistence layer.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nsession = boto3.Session()\npersistence_store = DynamoDBPersistenceLayer(table_name=\"idempotency_store\", boto3_session=session)\n\n@idempotent_function(persistence_store=persistence_store)\ndef handler(event, context):\n    return {\n        \"statusCode\": 200,\n        \"message\": \"success\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Serverless Framework Configuration (YAML)\nDESCRIPTION: This YAML snippet shows how to integrate Powertools Lambda Layer using the Serverless Framework. It demonstrates the configuration needed in `serverless.yml` to utilize the SAR application.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/index.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"examples/homepage/install/sar/serverless.yml\"\n```\n\n----------------------------------------\n\nTITLE: JSON Log Output Example\nDESCRIPTION: This is an example of a structured JSON log output.  It includes the timestamp, log level, logger name, and message.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/tutorial/index.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"asctime\": \"2021-11-22 15:32:02,145\",\n    \"levelname\": \"INFO\",\n    \"name\": \"APP\",\n    \"message\": \"Request from unknown received\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigurationStoreError Exception in Python\nDESCRIPTION: Defines an exception class for configuration store errors in feature flags. This exception is raised when there are issues with the configuration store used for feature flags.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/feature_flags/exceptions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ConfigurationStoreError(Exception):\n    \"\"\"When provider fails to retrieve configuration\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Custom Format Validation\nDESCRIPTION: This code represents a sample JSON payload with a custom format that will be validated against a defined schema. The format of the accountid should align with the constraints specified in the corresponding schema to pass validation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/validation.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n```json hl_lines=\"12 13\"\n    --8<-- \"examples/validation/src/custom_format_payload.json\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Displaying Redirect Notice in Markdown\nDESCRIPTION: A Markdown comment to disable markdownlint and a link to the new location of the maintainers' playbook for AWS Lambda Powertools for Python.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/MAINTAINERS.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- markdownlint-disable -->\n\nMaintainers' playbook moved: https://docs.powertools.aws.dev/lambda/python/latest/maintainers/\n```\n\n----------------------------------------\n\nTITLE: Sample Event JSON for Idempotency with Validation\nDESCRIPTION: Example JSON payload for testing the integration of idempotency with JSON schema validation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"examples/idempotency/src/integrate_idempotency_with_validator_payload.json\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Datadog Metrics Flow with Mermaid\nDESCRIPTION: A mermaid diagram showing the flow of metrics from a Lambda function to Datadog Dashboard via the Datadog Lambda Extension.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/core/metrics/datadog.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    direction LR\n    LambdaFn: Your Lambda function\n    LambdaCode: DatadogMetrics\n    DatadogSDK: Datadog SDK\n    DatadogExtension: Datadog Lambda Extension\n    Datadog: Datadog Dashboard\n    LambdaExtension: Lambda Extension\n\n    LambdaFn --> LambdaCode\n    LambdaCode --> DatadogSDK\n    DatadogSDK --> DatadogExtension\n    DatadogExtension --> Datadog: async\n\n    state LambdaExtension {\n        DatadogExtension\n    }\n```\n\n----------------------------------------\n\nTITLE: Application Code for Testing Disabled Idempotency in Python\nDESCRIPTION: Sample application code used in the test for disabling idempotency utility.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/utilities/idempotency.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n--8<-- \"examples/idempotency/tests/app_test_disabling_idempotency_utility.py\"\n```\n\n----------------------------------------\n\nTITLE: Defining BatchProcessingItemError Exception in AWS Lambda Powertools\nDESCRIPTION: Exception for batch processing item errors that stores a collection of ExceptionInfo objects. It's used when one or more items in a batch fail processing but don't cause the entire batch to fail.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/batch/exceptions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BatchProcessingItemError(BatchProcessingError):\n    \"\"\"Exception raised when batch processing fails for one or more items\"\"\"\n\n    def __init__(self, msg=\"Batch processing failed for one or more items\", child_exceptions=None):\n        \"\"\"\n        Initialize BatchProcessingItemError\n\n        Parameters\n        ----------\n        msg: str, optional\n            Exception message\n        child_exceptions: List[ExceptionInfo], optional\n            List of exception information objects that led to this error\n        \"\"\"\n        self.msg = msg\n        self.child_exceptions = child_exceptions or []\n        super().__init__(self.msg)\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Lambda Powertools Logging Module in Markdown\nDESCRIPTION: This snippet demonstrates how to import and reference the lambda_context module from AWS Lambda Powertools for Python in a markdown documentation file. It uses a custom markdown syntax to include module documentation.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/logger/lambda_context.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: aws_lambda_powertools.logging.lambda_context\n```\n\n----------------------------------------\n\nTITLE: Implementing InvalidLoggerSamplingRateError Exception\nDESCRIPTION: Custom exception that's raised when an invalid sampling rate is provided to the logger. The sampling rate must be a float between 0 and 1 inclusive.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/api_doc/logger/exceptions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass InvalidLoggerSamplingRateError(BaseLoggingException):\n    \"\"\"When sampling rate provided is not a float between 0 and 1\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Security posture check workflow definition\nDESCRIPTION: This YAML snippet sets up a GitHub Actions workflow utilizing OSSF Scorecard to continuously monitor the security posture of the AWS Powertools Lambda Python project. OSSF Scorecard performs automated security checks and raises alerts if the project deviates from established security best practices, ensuring ongoing adherence to security standards.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/automation.md#2025-04-21_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n\".github/workflows/ossf_scorecard.yml#L14\"\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS Lambda Layer ARNs Markdown Table\nDESCRIPTION: The markdown tables list AWS Lambda Layer ARNs for AWS Powertools for Python across different AWS regions. This snippet includes ARNs specifically for Python 3.9 and 3.10. Users can copy the needed ARN for deploying AWS Lambda functions. No additional software dependencies are required. The tables cover numerous global AWS regions, enabling wide geographical compatibility.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/includes/_layer_homepage_x86.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Region               | Layer ARN                                                                                                 |\n| -------------------- | --------------------------------------------------------------------------------------------------------- |\n| **`af-south-1`**     | **arn:aws:lambda:af-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:     |\n| **`ap-east-1`**      | **arn:aws:lambda:ap-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n| **`ap-northeast-1`** | **arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-northeast-2`** | **arn:aws:lambda:ap-northeast-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-northeast-3`** | **arn:aws:lambda:ap-northeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-south-1`**     | **arn:aws:lambda:ap-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:     |\n| **`ap-south-2`**     | **arn:aws:lambda:ap-south-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:     |\n| **`ap-southeast-1`** | **arn:aws:lambda:ap-southeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-2`** | **arn:aws:lambda:ap-southeast-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-3`** | **arn:aws:lambda:ap-southeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-4`** | **arn:aws:lambda:ap-southeast-4:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-5`** | **arn:aws:lambda:ap-southeast-5:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-7`** | **arn:aws:lambda:ap-southeast-7:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard: |\n| **`ca-central-1`**   | **arn:aws:lambda:ca-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:   |\n| **`ca-west-1`**      | **arn:aws:lambda:ca-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n| **`eu-central-1`**   | **arn:aws:lambda:eu-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:   |\n| **`eu-central-2`**   | **arn:aws:lambda:eu-central-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:   |\n| **`eu-north-1`**     | **arn:aws:lambda:eu-north-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:     |\n| **`eu-south-1`**     | **arn:aws:lambda:eu-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:     |\n| **`eu-south-2`**     | **arn:aws:lambda:eu-south-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:     |\n| **`eu-west-1`**      | **arn:aws:lambda:eu-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n| **`eu-west-2`**      | **arn:aws:lambda:eu-west-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n| **`eu-west-3`**      | **arn:aws:lambda:eu-west-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n| **`il-central-1`**   | **arn:aws:lambda:il-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:   |\n| **`me-central-1`**   | **arn:aws:lambda:me-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:   |\n| **`me-south-1`**     | **arn:aws:lambda:me-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:     |\n| **`mx-central-1`**   | **arn:aws:lambda:mx-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:   |\n| **`sa-east-1`**      | **arn:aws:lambda:sa-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n| **`us-east-1`**      | **arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n| **`us-east-2`**      | **arn:aws:lambda:us-east-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n| **`us-west-1`**      | **arn:aws:lambda:us-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n| **`us-west-2`**      | **arn:aws:lambda:us-west-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python39-x86_64:12**{: .copyMe}:clipboard:      |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Region               | Layer ARN                                                                                                 |\n| -------------------- | --------------------------------------------------------------------------------------------------------- |\n| **`af-south-1`**     | **arn:aws:lambda:af-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:     |\n| **`ap-east-1`**      | **arn:aws:lambda:ap-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:      |\n| **`ap-northeast-1`** | **arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-northeast-2`** | **arn:aws:lambda:ap-northeast-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-northeast-3`** | **arn:aws:lambda:ap-northeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-south-1`**     | **arn:aws:lambda:ap-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:     |\n| **`ap-south-2`**     | **arn:aws:lambda:ap-south-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:     |\n| **`ap-southeast-1`** | **arn:aws:lambda:ap-southeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-2`** | **arn:aws:lambda:ap-southeast-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-3`** | **arn:aws:lambda:ap-southeast-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-4`** | **arn:aws:lambda:ap-southeast-4:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-5`** | **arn:aws:lambda:ap-southeast-5:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard: |\n| **`ap-southeast-7`** | **arn:aws:lambda:ap-southeast-7:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard: |\n| **`ca-central-1`**   | **arn:aws:lambda:ca-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:   |\n| **`ca-west-1`**      | **arn:aws:lambda:ca-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:      |\n| **`eu-central-1`**   | **arn:aws:lambda:eu-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:   |\n| **`eu-central-2`**   | **arn:aws:lambda:eu-central-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:   |\n| **`eu-north-1`**     | **arn:aws:lambda:eu-north-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:     |\n| **`eu-south-1`**     | **arn:aws:lambda:eu-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:     |\n| **`eu-south-2`**     | **arn:aws:lambda:eu-south-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:     |\n| **`eu-west-1`**      | **arn:aws:lambda:eu-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:      |\n| **`eu-west-2`**      | **arn:aws:lambda:eu-west-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:      |\n| **`eu-west-3`**      | **arn:aws:lambda:eu-west-3:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:      |\n| **`il-central-1`**   | **arn:aws:lambda:il-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:   |\n| **`me-central-1`**   | **arn:aws:lambda:me-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:   |\n| **`me-south-1`**     | **arn:aws:lambda:me-south-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python310-x86_64:12**{: .copyMe}:clipboard:     |\n```\n\n----------------------------------------\n\nTITLE: Feature Request Workflow Visualization using Mermaid\nDESCRIPTION: This snippet visualizes the feature request workflow. It uses Mermaid syntax to define a directed graph, illustrating the flow from a feature request through triage, RFC (if needed), approval, and eventual implementation or deferral.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/docs/roadmap.md#2025-04-21_snippet_1\n\nLANGUAGE: Mermaid\nCODE:\n```\n```mermaid\ngraph LR\n    PFR[Feature request] --> Triage{Need RFC?}\n    Triage --> |Complex/major change or new utility?| RFC[Ask or write RFC] --> Approval{Approved?}\n    Triage --> |Minor feature or enhancement?| NoRFC[No RFC required] --> Approval\n    Approval --> |Yes| Backlog\n    Approval --> |No | Reject[\"Inform next steps\"]\n    Backlog --> |Prioritized| Implementation\n    Backlog --> |Defer| WelcomeContributions[\"help-wanted label\"]\n```\n```\n\n----------------------------------------\n\nTITLE: SQS Record Processing Example Data\nDESCRIPTION: This data structure represents a list of tuples, each containing a processing result ('fail' or 'success'), a message (either an exception message or a success indicator), and the SQS record itself (either an SQSRecord object or a dictionary representing an SQS record).  It is intended for testing and demonstration purposes, outlining possible outcomes when processing messages from an SQS queue.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/examples/batch_processing/src/context_manager_access_output.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[\\n    (\\n        \"fail\",\\n        \"<class 'Exception': Failed to process record\",  # (1)!\\n        <aws_lambda_powertools.utilities.data_classes.sqs_event.SQSRecord object at 0x103c590a0>\\n    ),\\n    (\\n        \"success\",\\n        \"success\",\\n        {'messageId': '88891c36-32eb-4a25-9905-654a32916893', 'receiptHandle': 'AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a', 'body': 'success', 'attributes': {'ApproximateReceiveCount': '1', 'SentTimestamp': '1545082649183', 'SenderId': 'AIDAIENQZJOLO23YVJ4VO', 'ApproximateFirstReceiveTimestamp': '1545082649185'}, 'messageAttributes': {}, 'md5OfBody': 'e4e68fb7bd0e697a0ae8f1bb342846b3', 'eventSource': 'aws:sqs', 'eventSourceARN': 'arn:aws:sqs:us-east-2:123456789012:my-queue', 'awsRegion': 'us-east-1'}\\n    )\\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a new Lambda function with Amplify\nDESCRIPTION: This snippet demonstrates how to create a new Lambda function with the AWS Lambda Powertools layer using the Amplify CLI.  It shows the interactive prompts for configuring the function, enabling Lambda layers, and specifying the layer ARN.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/examples/homepage/install/arm64/amplify.txt#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"> amplify add function\n? Select which capability you want to add: Lambda function (serverless function)\n? Provide an AWS Lambda function name: <NAME-OF-FUNCTION>\n? Choose the runtime that you want to use: Python\n? Do you want to configure advanced settings? Yes\n...\n? Do you want to enable Lambda layers for this function? Yes\n? Enter up to 5 existing Lambda layer ARNs (comma-separated): arn:aws:lambda:eu-central-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-arm64:12\n> amplify push -y\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Routes in SAM Template\nDESCRIPTION: YAML configuration defining API routes in the SAM template. Specifies the path and HTTP method for invoking the Lambda function. This snippet is part of the application's AWS resources defined in the template.\nSOURCE: https://github.com/aws-powertools/powertools-lambda-python/blob/develop/tests/performance/data_masking/load_test_data_masking/pt-load-test-stack/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nEvents:\n  HelloWorld:\n    Type: Api\n    Properties:\n      Path: /hello\n      Method: get\n```"
  }
]