[
  {
    "owner": "pancakeswap",
    "repo": "pancake-developer",
    "content": "TITLE: Performing Multi-Pool ExactIn Swap in Infinity\nDESCRIPTION: Shows how to perform a multi-pool exactIn swap in Infinity, combining a CL pool swap and a Bin pool swap. It includes building swap parameters for both pool types, creating the Infinity payload, and executing the swap through the Universal Router.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/perform-a-swap.mdx#2025-04-19_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n// step 1: build the Infinity swap param \nICLRouterBase.CLSwapExactInputSingleParams memory clParam =\n    ICLRouterBase.CLSwapExactInputSingleParams({\n        poolKey: poolKey0, // struct which determine the poolKey \n        zeroForOne: true, // if true means 0->1 else 1->0\n        amountIn: amountIn, // amountIn \n        amountOutMinimum: 0, // minAmountOut, ideally it should not be 0 \n        hookData: \"\" // hook data \n    });\n\nIBinRouterBase.BinSwapExactInputSingleParams memory binParam =\n    IBinRouterBase.BinSwapExactInputSingleParams({\n        poolKey: poolKey1, // struct which determine the poolKey \n        swapForY: true, // if true means 0->1 else 1->0\n        amountIn: ActionConstants.OPEN_DELTA, \n        amountOutMinimum: 0, // minAmountOut, ideally it should not be 0 \n        hookData: \"\" // hook data \n    });\n\n// step 2: build the Infinity payload with CL token0->token1 and Bin token1->token2    \nPlan plan = Planner.init();\nplan.add(Actions.CL_SWAP_EXACT_IN_SINGLE, abi.encode(clParam));\nplan.add(Actions.BIN_SWAP_EXACT_IN_SINGLE, abi.encode(binParam));\nbytes memory data = plan.finalizeSwap(poolKey0.currency0, poolKey1.currency1, ActionConstants.MSG_SENDER);\n\n// step 3: build command/input \nbytes memory commands = abi.encodePacked(bytes1(uint8(Commands.INFI_SWAP)));\nbytes[] memory inputs = new bytes[](1);\ninputs[0] = data;\n\n// Step 4: call universal router \nrouter.execute(commands, inputs);\n```\n\n----------------------------------------\n\nTITLE: Performing ExactIn Swap with PCS StableSwap in Solidity\nDESCRIPTION: Defines the structure for performing an exactIn swap with PancakeSwap StableSwap. It includes parameters for recipient, amount in, minimum amount out, token path, pool flags, and payer specification.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/perform-a-swap.mdx#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n{\n    address recipient; // recipient of output token\n    uint256 amountIn; // amountIn \n    uint256 amountOutMin; // revert if amout out is lesser than amountOutMin\n    address[] path; // eg. (token0->token1): path[0] = token0, path[1] = token1\n    uint256[] flag; // eg. flag[0] = 2 indicate StableSwapTwoPool, 3 = indicate StableSwapThreePool\n    bool payerIsUser; // if true, transfer token from sender, else take token from contract\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SmartRouterV3 Contract in Solidity\nDESCRIPTION: Constructor for the SmartRouterV3 contract that initializes with factory addresses for V2 and V3, as well as other essential contract references. It takes addresses for factoryV2, deployer, factoryV3, positionManager, stableFactory, stableInfo, and WETH9 as parameters.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/smartrouter/index.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(address _factoryV2, address _deployer, address _factoryV3, address _positionManager, address _stableFactory, address _stableInfo, address _WETH9) public\n```\n\n----------------------------------------\n\nTITLE: swapExactTokensForTokens in PancakeSwap Router\nDESCRIPTION: Swaps an exact amount of input tokens for as many output tokens as possible. This function requires the input amount, minimum tokens to receive, token path, recipient address, and deadline timestamp. Returns an array with the swap amounts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactTokensForTokens(\n  uint amountIn,\n  uint amountOutMin,\n  address[] calldata path,\n  address to,\n  uint deadline\n) external returns (uint[] memory amounts);\n```\n\n----------------------------------------\n\nTITLE: Implementing exactOutput Function in Solidity\nDESCRIPTION: Defines the exactOutput function for swapping as little as possible of one token for a specific amount of another token along a specified path (reversed). It returns the amount of the input token used.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/smartrouter/v3swaprouter.md#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction exactOutput(struct IV3SwapRouter.ExactOutputParams params) external payable returns (uint256 amountIn)\n```\n\n----------------------------------------\n\nTITLE: Swapping Tokens for Exact Tokens in Solidity\nDESCRIPTION: Function to receive an exact amount of output tokens for as few input tokens as possible. It takes parameters for the desired output amount, maximum input amount, token path, recipient address, and deadline.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapTokensForExactTokens(\n  uint amountOut,\n  uint amountInMax,\n  address[] calldata path,\n  address to,\n  uint deadline\n) external returns (uint[] memory amounts);\n```\n\n----------------------------------------\n\nTITLE: swapExactTokensForETH in PancakeSwap Router\nDESCRIPTION: Swaps an exact amount of input tokens for as much BNB as possible. This function requires the amount of tokens to send, minimum BNB to receive, token path, recipient address, and deadline timestamp. Returns an array with the swap amounts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n  external\n  returns (uint[] memory amounts);\n```\n\n----------------------------------------\n\nTITLE: Swapping Exact Input Tokens in PancakeSwap (Rust)\nDESCRIPTION: Function to swap an exact amount of input token X for a minimum amount of output token Y. Used when users know precisely how much they want to spend.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun swap_exact_input<X, Y>(\n    sender: &signer,\n    x_in: u64,\n    y_min_out: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: Token Swapping in PancakeSwap V3 Pool\nDESCRIPTION: Function to perform token swaps with specified parameters and price limits. Includes callback functionality for handling the swap execution.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data) external returns (int256 amount0, int256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exact Input Token Swap in PancakeSwap V2 Router\nDESCRIPTION: Function that executes a token swap with an exact input amount, returning the output amount received. Supports automatic balance detection when amountIn is 0. Returns the actual amount of tokens received after the swap.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/smartrouter/v2swaprouter.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to) external payable returns (uint256 amountOut)\n```\n\n----------------------------------------\n\nTITLE: Implementing Permit2 Frontend Integration\nDESCRIPTION: Example of creating permit signature and multicall for frontend integration with PositionManager\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/manage-liquidity.mdx#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nbytes[] memory calls = new bytes[](2);\n\n// signature from user\ncalls[0] = abi.encodeWithSelector(IAllowanceTransfer.Permit.selector, owner, PermitSingle permitSIngle, bytes signature);\n// modifyLiquidites call - explained in next section\ncalls[1] = abi.encodeWithSelector(IPositionManager.modifyLiquidities.selector, abi.encode(...));\n\npositonManager.multiCall(...)\n```\n\n----------------------------------------\n\nTITLE: Adding Liquidity to BEP20â‡„BEP20 Pool in Solidity\nDESCRIPTION: Function for adding liquidity to a pair of BEP20 tokens. It takes parameters for token addresses, desired amounts, minimum amounts (for slippage protection), recipient address, and deadline for the transaction.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addLiquidity(\n  address tokenA,\n  address tokenB,\n  uint amountADesired,\n  uint amountBDesired,\n  uint amountAMin,\n  uint amountBMin,\n  address to,\n  uint deadline\n) external returns (uint amountA, uint amountB, uint liquidity);\n```\n\n----------------------------------------\n\nTITLE: swapTokensForExactETH in PancakeSwap Router\nDESCRIPTION: Swaps tokens for an exact amount of ETH, using as few input tokens as possible. This function requires the exact ETH amount to receive, maximum tokens to spend, token path, recipient address, and deadline timestamp. Returns an array with the swap amounts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n  external\n  returns (uint[] memory amounts);\n```\n\n----------------------------------------\n\nTITLE: Minting Liquidity in PancakeSwap V3 Pool\nDESCRIPTION: Function to add liquidity for a given position defined by recipient and tick range. Returns amounts of both tokens used to mint the liquidity.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes data) external returns (uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Triple-Hop Exact Output Swap in PancakeSwap (Rust)\nDESCRIPTION: Function to swap token X for an exact amount of token A through intermediate tokens Y and Z (using three pools). Allows receiving a specific amount through multiple hops.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun swap_exact_output_triplehop<X, Y, Z, A>(\n    sender: &signer,\n    a_out: u64,\n    x_max_in: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: swapExactTokensForETHSupportingFeeOnTransferTokens in PancakeSwap Router\nDESCRIPTION: Swaps an exact amount of tokens for as much BNB as possible, with support for tokens that take a fee on transfer. This function requires the input amount, minimum BNB to receive, token path, recipient address, and deadline timestamp.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n  uint amountIn,\n  uint amountOutMin,\n  address[] calldata path,\n  address to,\n  uint deadline\n) external;\n```\n\n----------------------------------------\n\nTITLE: Swapping Exact ETH for Tokens in Solidity\nDESCRIPTION: This function swaps an exact amount of BNB for as many output tokens as possible. It takes the minimum output amount, an array of token addresses for the swap path, recipient address, and deadline as parameters. The function is payable and returns an array of amounts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n  external\n  payable\n  returns (uint[] memory amounts);\n```\n\n----------------------------------------\n\nTITLE: Burning Liquidity in PancakeSwap V3 Pool\nDESCRIPTION: Function to burn liquidity from a position and receive underlying tokens. Returns the amounts of tokens sent to the recipient.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Double-Hop Exact Output Swap in PancakeSwap (Rust)\nDESCRIPTION: Function to swap token X for an exact amount of token Z through an intermediate token Y (using two pools). Allows users to specify the exact output amount they want to receive.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun swap_exact_output_doublehop<X, Y, Z>(\n    sender: &signer,\n    z_out: u64,\n    x_max_in: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing exactInputSingle Function in Solidity\nDESCRIPTION: Defines the exactInputSingle function for swapping a specific amount of one token for as much as possible of another token. It returns the amount of the received token.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/smartrouter/v3swaprouter.md#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction exactInputSingle(struct IV3SwapRouter.ExactInputSingleParams params) external payable returns (uint256 amountOut)\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity from BEP20â‡„WBNB Pool in Solidity\nDESCRIPTION: Function for removing liquidity from a pair consisting of a BEP20 token and WBNB. It burns LP tokens and returns the BEP20 token and unwrapped BNB to the specified recipient address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityETH(\n  address token,\n  uint liquidity,\n  uint amountTokenMin,\n  uint amountETHMin,\n  address to,\n  uint deadline\n) external returns (uint amountToken, uint amountETH);\n```\n\n----------------------------------------\n\nTITLE: Implementing exactInput Function in Solidity\nDESCRIPTION: Defines the exactInput function for swapping a specific amount of one token for as much as possible of another token along a specified path. It returns the amount of the received token.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/smartrouter/v3swaprouter.md#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction exactInput(struct IV3SwapRouter.ExactInputParams params) external payable returns (uint256 amountOut)\n```\n\n----------------------------------------\n\nTITLE: Collecting Fees from Position in PancakeSwap (Solidity)\nDESCRIPTION: This function collects up to a maximum amount of fees owed to a specific position and sends them to the recipient. It takes CollectParams as input and returns the amounts of token0 and token1 collected.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction collect(struct INonfungiblePositionManager.CollectParams params) external payable returns (uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Performing ExactInSingle Swap with CL Pool in Infinity\nDESCRIPTION: Demonstrates how to perform an exactInSingle swap with a Concentrated Liquidity pool in Infinity. It includes building swap parameters, creating the Infinity payload, and executing the swap through the Universal Router.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/perform-a-swap.mdx#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n// step 1: build the Infinity swap param \nICLRouterBase.CLSwapExactInputSingleParams memory params =\n    ICLRouterBase.CLSwapExactInputSingleParams({\n        poolKey: poolKey, // struct which determine the poolKey \n        zeroForOne: true, // if true, means 0->1 else 1->0\n        amountIn: amountIn, // amountIn \n        amountOutMinimum: 0, // minAmountOut, ideally it should not be 0 \n        hookData: \"\" // hook data \n    });\n\n// Step 2: build the Infinity payload \nPlan plan = Planner.init();\nplan.add(Actions.CL_SWAP_EXACT_IN_SINGLE, abi.encode(params));\nbytes memory data = plan.finalizeSwap(poolKey.currency0, poolKey.currency1, ActionConstants.MSG_SENDER);\n\n// step 3: build command/input \nbytes memory commands = abi.encodePacked(bytes1(uint8(Commands.INFI_SWAP)));\nbytes[] memory inputs = new bytes[](1);\ninputs[0] = data;\n\n// Step 4: call universal router \nrouter.execute(commands, inputs);\n```\n\n----------------------------------------\n\nTITLE: Calling Infinity CL Position Manager in Solidity\nDESCRIPTION: Demonstrates how to make a call to the Infinity CL position manager, specifically for the CL_MINT_POSITION action. It includes setting up a PoolKey, defining tick ranges, and using the Planner to encode the action.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/perform-a-swap.mdx#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nPoolKey memory clPoolKey;\nint24 tickLower;\nint24 tickUpper;\nPlan memory planner = Planner.init();\nplanner.add(Actions.CL_MINT_POSITION, abi.encode(clPoolKey, tickLower, tickUpper, 1 ether, 10 ether, 10 ether, alice, \"\"));\n// remember to add settlement action   \n\ninput[i] = abi.encodeWithSelector(IPositionManager.modifyLiquidities.selector, planner.encode(), block.timestamp);\n```\n\n----------------------------------------\n\nTITLE: Quadruple-Hop Exact Input Swap in PancakeSwap (Rust)\nDESCRIPTION: Function to swap an exact amount of token X for token B through intermediate tokens Y, Z, and A (using four pools). Enables complex routing across multiple token pairs.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun swap_exact_input_quadruplehop<X, Y, Z, A, B>(\n    sender: &signer,\n    x_in: u64,\n    b_min_out: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: Closing a Lottery Round (TypeScript)\nDESCRIPTION: This function is called by the Operator to close a lottery round. It checks if the lottery is open and if the end time has passed. It then requests a random number from the generator and updates the lottery status to Close.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/lottery-contract.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction closeLottery(uint256 _lotteryId) external override onlyOperator nonReentrant {\n    require(_lotteries[_lotteryId].status == Status.Open, \"Lottery not open\");\n    require(block.timestamp > _lotteries[_lotteryId].endTime, \"Lottery not over\");\n    _lotteries[_lotteryId].firstTicketIdNextLottery = currentTicketId;\n\n    // Request a random number from the generator based on a seed\n    randomGenerator.getRandomNumber(uint256(keccak256(abi.encodePacked(_lotteryId, currentTicketId))));\n\n    _lotteries[_lotteryId].status = Status.Close;\n\n    emit LotteryClose(_lotteryId, currentTicketId);\n}\n```\n\n----------------------------------------\n\nTITLE: Decreasing Position Liquidity\nDESCRIPTION: Decreases the amount of liquidity in a position and accounts it to the position's tokens owed. Returns the amounts of token0 and token1 that were removed from the position.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decreaseLiquidity(struct INonfungiblePositionManager.DecreaseLiquidityParams params) external payable returns (uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Approving Universal Router in Permit2\nDESCRIPTION: Shows how to approve the Universal Router in the Permit2 contract, granting infinite approval for a specific token. This is necessary for contract calls to the Universal Router.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/perform-a-swap.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\n\n// example infinite approval to universalRouter\npermit2.approve(tokenAddress, address(universalRouter), type(uint160).max, type(uint48).max);\n```\n\n----------------------------------------\n\nTITLE: PositionManager Function Signatures\nDESCRIPTION: Core function signatures for modifying liquidity with and without vault lock\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/manage-liquidity.mdx#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// @notice Unlocks Vault and batches actions for modifying liquidity\nfunction modifyLiquidities(bytes calldata payload, uint256 deadline) external payable;\n\n// @notice Batches actions for modifying liquidity without getting a lock from vault\nfunction modifyLiquiditiesWithoutLock(bytes calldata actions, bytes[] calldata params) external payable;\n```\n\n----------------------------------------\n\nTITLE: Implementing exactOutputSingle Function in Solidity\nDESCRIPTION: Defines the exactOutputSingle function for swapping as little as possible of one token for a specific amount of another token. It returns the amount of the input token used.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/smartrouter/v3swaprouter.md#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction exactOutputSingle(struct IV3SwapRouter.ExactOutputSingleParams params) external payable returns (uint256 amountIn)\n```\n\n----------------------------------------\n\nTITLE: Claiming Winning Lottery Tickets in Solidity\nDESCRIPTION: Function to claim winning tickets for a 'Claimable' Lottery round. It validates the lottery status, ticket ownership, eligibility, and whether the ticket falls within the eligible prize bracket (0-5).\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n    function claimTickets(\n        uint256 _lotteryId,\n        uint256[] calldata _ticketIds,\n        uint32[] calldata _brackets\n    ) external override notContract nonReentrant;\n```\n\n----------------------------------------\n\nTITLE: Direct Swap with Exact Input in PancakeSwap (Rust)\nDESCRIPTION: Public function to swap an exact amount of token X for token Y, returning the output token resource directly. This allows programmatic interaction with the router in composable transactions.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npublic fun swap_exact_x_to_y_direct_external<X, Y>(x_in: coin::Coin<X>): coin::Coin<Y>\n```\n\n----------------------------------------\n\nTITLE: Implementing pancakeV3SwapCallback Function in Solidity\nDESCRIPTION: Defines the pancakeV3SwapCallback function, which is called after executing a swap via IPancakeV3Pool#swap. It handles token transfers based on the swap results.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/smartrouter/v3swaprouter.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes _data) external\n```\n\n----------------------------------------\n\nTITLE: Burning Non-Fungible Position Token in PancakeSwap (Solidity)\nDESCRIPTION: This function burns a token ID, deleting it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first. It takes the tokenId as input.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(uint256 tokenId) external payable\n```\n\n----------------------------------------\n\nTITLE: Pool Creation Function\nDESCRIPTION: Creates a new pool for given token pairs and fee amount. Returns the address of the newly created pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool)\n```\n\n----------------------------------------\n\nTITLE: Starting New Lottery Round in Solidity\nDESCRIPTION: Operator function to start a new lottery round, setting it to 'Open' state. The current lottery status must be 'Claimable' for this function to work, and it requires setting various parameters like end time and reward breakdown.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\n    function startLottery(\n        uint256 _endTime,\n        uint256 _priceTicketInCake,\n        uint256 _discountDivisor,\n        uint256[6] calldata _rewardsBreakdown,\n        uint256 _treasuryFee\n    ) external override onlyOperator;\n```\n\n----------------------------------------\n\nTITLE: Creating Token Pair Pools in PancakeSwap Router v2 (Rust)\nDESCRIPTION: Function to create a new liquidity pool pair for tokens X and Y. This is the first step required before adding liquidity or performing swaps between these tokens.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun create_pair<X, Y>(sender: &signer)\n```\n\n----------------------------------------\n\nTITLE: Defining PancakeSwap Router01 Interface in Solidity\nDESCRIPTION: Interface definition for IPancakeRouter01, including functions for liquidity management, token swaps, and price calculations. This interface provides the core functionality for interacting with PancakeSwap.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.6.2;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Required Input Amount in PancakeSwap (Rust)\nDESCRIPTION: Function to calculate the amount of token X needed to receive a specific amount of token Y. This allows for price checking before executing a swap transaction.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\npublic fun get_amount_in<X, Y>(y_out_amount: u64): u64\n```\n\n----------------------------------------\n\nTITLE: Buying Lottery Tickets in Solidity\nDESCRIPTION: Function to buy tickets for the current 'Open' Lottery round, with support for purchasing between 1 and 100 tickets per transaction. The price per ticket is calculated using the calculateTotalPriceForBulkTickets function.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction buyTickets(uint256 _lotteryId, uint32[] calldata _ticketNumbers) external override notContract nonReentrant;\n```\n\n----------------------------------------\n\nTITLE: Defining MintParams Structure for Liquidity Book AMM\nDESCRIPTION: This snippet defines the MintParams struct used for adding liquidity to the Liquidity Book AMM. It includes liquidityConfigs for specifying bins and distribution percentages, amountIn for the intended amount, and salt to distinguish different mints from the same owner.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/liquidity-book.mdx#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct MintParams {\n  // see more at LiquidityConfigurations.sol\n  //   [0 - 24[: id\n  //   [24 - 88[: distributionY - 1e18 represent 100% of token into this bin\n  //   [88 - 152[: distributionX - 1e18 represent 100% of token into this bin \n  //   [152 - 256[: empty\n  bytes32[] liquidityConfigs;\n\n  // amountIn intended\n  bytes32 amountIn;\n  \n  // the salt to distinguish different mint from the same owner\n  bytes32 salt;\n}\n\n/// @dev see more at BinPoolManager.sol \nfunction mint(PoolKey memory key, IBinPoolManager.MintParams calldata params, bytes calldata hookData);\n```\n\n----------------------------------------\n\nTITLE: Collect Position Fees\nDESCRIPTION: Collects accumulated fees for a specific position up to specified maximum amounts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction collect(struct INonfungiblePositionManagerStruct.CollectParams params) external returns (uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Increasing Position Liquidity\nDESCRIPTION: Increases the amount of liquidity in an existing position, with tokens paid by the message sender. Returns the new liquidity amount and the actual amounts of tokens used to achieve it.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction increaseLiquidity(struct INonfungiblePositionManager.IncreaseLiquidityParams params) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: swapExactTokensForTokensSupportingFeeOnTransferTokens in PancakeSwap Router\nDESCRIPTION: Swaps an exact amount of input tokens for as many output tokens as possible, with support for tokens that take a fee on transfer. This function requires the input amount, minimum tokens to receive, token path, recipient address, and deadline timestamp.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n  uint amountIn,\n  uint amountOutMin,\n  address[] calldata path,\n  address to,\n  uint deadline\n) external;\n```\n\n----------------------------------------\n\nTITLE: Generating EIP 712 Signature for Market Maker Pool Swap in Solidity\nDESCRIPTION: This snippet demonstrates how to create an EIP 712 signature for a swap in the Market Maker Pool. It defines the domain, quote type, and quote value structures required for the signature.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/market-maker-pool.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nconst domain = {\n  name: \"PCS MM Pool\",\n  version: \"1\",\n  chainId: // 1 or 56,\n  verifyingContract: // please refer to the address above,\n};\n\nconst quoteType = {\n  Quote: [\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"user\", type: \"address\" },\n    { name: \"baseToken\", type: \"address\" },\n    { name: \"quoteToken\", type: \"address\" },\n    { name: \"baseTokenAmount\", type: \"uint256\" },\n    { name: \"quoteTokenAmount\", type: \"uint256\" },\n    { name: \"expiryTimestamp\", type: \"uint256\" },\n  ],\n};\n\nconst quoteValue = {\n    nonce,\n    user,\n    baseToken,\n    quoteToken,\n    baseTokenAmount,\n    quoteTokenAmount,\n    expiryTimestamp,\n};\n\n// EIP 712 Signature\nconst signature = await mm._signTypedData(domain, quoteType, quoteValue);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lottery Information in Solidity\nDESCRIPTION: Function that returns detailed information about a specified Lottery round, including timing, pricing, rewards structure, and winner statistics.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction viewLottery(uint256 _lotteryId) external view returns (Lottery memory);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n        uint256 startTime;\n        uint256 endTime;\n        uint256 priceTicketInCake;\n        uint256 discountDivisor;\n        uint256[6] rewardsBreakdown; // 0: 1 matching number // 5: 6 matching numbers\n        uint256 treasuryFee; // 500: 5% // 200: 2% // 50: 0.5%\n        uint256[6] cakePerBracket;\n        uint256[6] countWinnersPerBracket;\n        uint256 firstTicketId;\n        uint256 firstTicketIdNextLottery;\n        uint256 amountCollectedInCake;\n        uint32 finalNumber;\n```\n\n----------------------------------------\n\nTITLE: Defining PancakeSwap Router02 Interface in Solidity\nDESCRIPTION: Interface definition for IPancakeRouter02, which extends IPancakeRouter01 with additional functions to support fee-on-transfer tokens. This interface includes methods for removing liquidity and swapping tokens with fee-on-transfer support.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity >=0.6.2;\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Deposit Function for Syrup Pools in Rust for Aptos\nDESCRIPTION: Entry function that allows users to deposit stake tokens into a Syrup Pool. It calculates and transfers any pending rewards to the user during the deposit operation.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/syrup-pools.md#2025-04-19_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun deposit<StakeToken, RewardToken, UID>(\n    account: &signer,\n    amount: u64\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Deposit Function in Rust for Aptos\nDESCRIPTION: Entry function that allows users to deposit stake tokens into a pool. It automatically handles reward distribution if applicable.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun deposit<CoinType>(\n    sender: &signer,\n    amount: u64\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PoolKey Struct in Solidity\nDESCRIPTION: This snippet shows the structure of PoolKey, which is used to identify a pool in PancakeSwap Infinity. It includes properties such as currencies, hooks, pool manager, fee, and parameters.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer-poolmanager.mdx#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct PoolKey {\n    Currency currency0;\n    Currency currency1;\n    IHooks hooks;\n    IPoolManager poolManager;\n    uint24 fee;\n    bytes32 parameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Triple-Hop Exact Input Swap in PancakeSwap (Rust)\nDESCRIPTION: Function to swap an exact amount of token X for token A through intermediate tokens Y and Z (using three pools). Enables more complex routing for tokens that require multiple hops.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun swap_exact_input_triplehop<X, Y, Z, A>(\n    sender: &signer,\n    x_in: u64,\n    a_min_out: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseHook for Concentrated Liquidity Pool\nDESCRIPTION: Example of implementing a BaseHook for a concentrated liquidity pool, including setting up callbacks and overriding methods.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/develop-a-hook.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// Snippet from CLCounterHook.sol\nimport {CLBaseHook} from \"./CLBaseHook\";\n\ncontract CLCounterHook is CLBaseHook {\n\n  constructor(ICLPoolManager _poolManager) CLBaseHook(_poolManager) {}\n\n  // 1. Set up callback required. in this case, 4 callback are required\n  function getHooksRegistrationBitmap() external pure override returns (uint16) {\n    return _hooksRegistrationBitmapFrom(\n        Permissions({\n            beforeInitialize: false,\n            afterInitialize: false,\n            beforeAddLiquidity: true,\n            afterAddLiquidity: true,\n            beforeRemoveLiquidity: false,\n            afterRemoveLiquidity: false,\n            beforeSwap: true,\n            afterSwap: true,\n            beforeDonate: false,\n            afterDonate: false,\n            beforeSwapReturnDelta: false,\n            afterSwapReturnDelta: false,\n            afterAddLiquidityReturnDelta: false,\n            afterRemoveLiquidityReturnDelta: false\n        })\n    );\n  }\n\n  // 2. For each callback required, overwrite the method\n  function _beforeAddLiquidity(address, PoolKey calldata key, ICLPoolManager.ModifyLiquidityParams calldata, bytes calldata)\n    external override poolManagerOnly returns (bytes4) {\n      // implement hook logic and then return selector\n      return this.beforeAddLiquidity.selector;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upkeep Period for Liquidity Mining in Solidity\nDESCRIPTION: Manages upkeep for a liquidity mining period. Allows injecting CAKE tokens with specified amount and duration, with an option to update all pools.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction upkeep(uint256 _amount, uint256 _duration, bool _withUpdate) external\n```\n\n----------------------------------------\n\nTITLE: Withdraw Function for Syrup Pools in Rust for Aptos\nDESCRIPTION: Entry function that allows users to withdraw their staked tokens from a Syrup Pool. It also calculates and transfers any pending rewards during the withdrawal operation.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/syrup-pools.md#2025-04-19_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun withdraw<StakeToken, RewardToken, UID>(\n    account: &signer,\n    amount: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: Incrementing Nonce for Non-Fungible Position Token in PancakeSwap (Solidity)\nDESCRIPTION: This internal function gets the current nonce for a token ID and then increments it, returning the original value. It takes the tokenId as input and returns the original nonce.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _getAndIncrementNonce(uint256 tokenId) internal returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Changing Random Number Generator Contract in Solidity\nDESCRIPTION: Owner function to change the random number generator contract address. The lottery must be in 'Claimable' state for this function to be executed successfully.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\n    function changeRandomGenerator(address _randomGeneratorAddress) external onlyOwner;\n```\n\n----------------------------------------\n\nTITLE: Adding Liquidity to PancakeSwap Pools (Rust)\nDESCRIPTION: Function to add liquidity to an existing pool pair. Allows users to specify desired amounts for both tokens and minimum acceptable amounts to handle slippage.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun add_liquidity<X, Y>(\n    sender: &signer,\n    amount_x_desired: u64,\n    amount_y_desired: u64,\n    amount_x_min: u64,\n    amount_y_min: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PoolDeployer Contract Interface for PancakeSwap V3 in Solidity\nDESCRIPTION: This code defines the PoolDeployer contract which handles the deployment of liquidity pools in PancakeSwap V3. It includes a Parameters struct to store deployment parameters and implements IPoolDeployer interface.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/syrup-pools/pooldeployer.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport './interfaces/IPoolDeployer.sol';\n\n/// @title Canonical PancakeSwap V3 pool deployer\n/// @notice Deploys PancakeSwap V3 pools and manages ownership and control over pool protocol fees\ncontract PoolDeployer is IPoolDeployer {\n    /// @inheritdoc IPoolDeployer\n    Parameters public override parameters;\n\n    /// @inheritdoc IPoolDeployer\n    function deploy(address factory, address token0, address token1, uint24 fee, int24 tickSpacing) external override returns (address pool) {\n        parameters = Parameters({factory: factory, token0: token0, token1: token1, fee: fee, tickSpacing: tickSpacing});\n        pool = address(\n            new PancakeV3Pool{\n                salt: keccak256(abi.encode(token0, token1, fee))\n            }()\n        );\n        delete parameters;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flash Loan Function in PancakeSwap V3 Pool\nDESCRIPTION: Function to execute flash loans of both tokens with callback functionality for repayment. Can also be used for pro-rata donations to liquidity providers.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction flash(address recipient, uint256 amount0, uint256 amount1, bytes data) external\n```\n\n----------------------------------------\n\nTITLE: Computing Price Ratio from sqrtPriceX96 for CAKE/WETH Pool\nDESCRIPTION: Example calculation showing how to derive the token price ratio from sqrtPriceX96 value for the CAKE/WETH pool. This demonstrates working with the binary fixed-point representation of prices in concentrated liquidity pools.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/concentrated-liquidity.mdx#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// token0: CAKE (18 decimals)\n// token1: WETH (18 decimals)\n// sqrtPriceX96: 2574020484831874748518739167 (as of 12 March 2024)\n\n// Price ratio of token0 (CAKE) and token1 (WETH):\nprice = (2574020484831874748518739167 / 2**96) **2 = 0.00105551602\n\nCAKE to WETH: 1 CAKE = 0.00105551602 WETH \nWETH to CAKE: 1 / 0.00105551602: 1 WETH = 947.40 CAKE \n\n// CAKE is around $4.3 and ETH is $4100. so 947.40 CAKE = 4073 USDC\n```\n\n----------------------------------------\n\nTITLE: Wrapping ETH to WETH in Solidity\nDESCRIPTION: Specifies the structure for wrapping a given amount of ETH to WETH. The amount can be set to contract balance or delta balance using predefined constants.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/manage-liquidity.mdx#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n{\n  // set to ActionConstants.CONTRACT_BALANCE to wrap contract balance. \n  // set to ActionConstants.OPEN_DELTA to wrap delta balance\n  uint256 amount; \n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Position Information By Token ID\nDESCRIPTION: Function that returns comprehensive position information associated with a given NFT token ID. Throws an error if the token ID is not valid. Provides all details about a liquidity position including tokens, tick range, and fees.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction positions(uint256 tokenId) external view returns (uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)\n```\n\n----------------------------------------\n\nTITLE: Defining Hook Callbacks with Bitmap in Solidity\nDESCRIPTION: Example of implementing the getHooksRegistrationBitmap method to define which callbacks the hook will use. This specific example enables the beforeSwap callback for a pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/custom-layer-hook.mdx#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n/// @dev Below indicate `beforeSwap` callback required\nfunction getHooksRegistrationBitmap() external pure override returns (uint16) {\n  return _hooksRegistrationBitmapFrom(\n    Permissions({\n      beforeInitialize: false,\n      afterInitialize: false,\n      beforeAddLiquidity: true,\n      afterAddLiquidity: true,\n      beforeRemoveLiquidity: false,\n      afterRemoveLiquidity: false,\n      beforeSwap: true, // beforeSwap enabled // [!code hl]\n      afterSwap: true,\n      beforeDonate: false,\n      afterDonate: false,\n\n      // Hook return delta (documented below)\n      beforeSwapReturnsDelta: false,\n      afterSwapReturnsDelta: false,\n      afterAddLiquidityReturnsDelta: false,\n      afterRemoveLiquidityReturnsDelta: false\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: swapExactETHForTokensSupportingFeeOnTransferTokens in PancakeSwap Router\nDESCRIPTION: Swaps an exact amount of BNB for as many output tokens as possible, with support for tokens that take a fee on transfer. This function is payable and requires minimum amount of tokens to receive, token path, recipient address, and deadline timestamp.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n  uint amountOutMin,\n  address[] calldata path,\n  address to,\n  uint deadline\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Adding Liquidity to BEP20â‡„WBNB Pool in Solidity\nDESCRIPTION: Function for adding liquidity to a pair consisting of a BEP20 token and WBNB. This is a payable function that accepts BNB and handles the wrapping to WBNB internally.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addLiquidityETH(\n  address token,\n  uint amountTokenDesired,\n  uint amountTokenMin,\n  uint amountETHMin,\n  address to,\n  uint deadline\n) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n```\n\n----------------------------------------\n\nTITLE: State Variables in PancakeV3Pool Contract\nDESCRIPTION: Core state variables including factory address, token addresses, fee settings, and pool parameters.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\naddress factory\naddress token0\naddress token1\nuint24 fee\nint24 tickSpacing\nuint128 maxLiquidityPerTick\nuint32 PROTOCOL_FEE_SP\nuint256 PROTOCOL_FEE_DENOMINATOR\n```\n\n----------------------------------------\n\nTITLE: Swap State Structure Definition\nDESCRIPTION: Struct definition for maintaining swap state including remaining amounts, pricing, and fee information.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nstruct SwapState {\n  int256 amountSpecifiedRemaining;\n  int256 amountCalculated;\n  uint160 sqrtPriceX96;\n  int24 tick;\n  uint256 feeGrowthGlobalX128;\n  uint128 protocolFee;\n  uint128 liquidity;\n}\n```\n\n----------------------------------------\n\nTITLE: Double-Hop Exact Input Swap in PancakeSwap (Rust)\nDESCRIPTION: Function to swap an exact amount of token X for token Z through an intermediate token Y (using two pools). This allows swapping between token pairs that don't have a direct liquidity pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun swap_exact_input_doublehop<X, Y, Z>(\n    sender: &signer,\n    x_in: u64,\n    z_min_out: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: Forming adapterParams for CAKE Bridging in JavaScript\nDESCRIPTION: This code snippet demonstrates how to construct the adapterParams for the CAKE bridging function. It includes parameters for version, destination gas limit, native gas transfer amount, and the recipient address on the destination chain.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/cake/cross-chain-cake-bridging.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst adapterParams = utils.solidityPack(\n    [\"uint16\", \"uint\", \"uint\", \"bytes\"],\n    [2, 200000, 0, \"0xYourAptosAddress\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Get Pool Info Function for Syrup Pools in Rust for Aptos\nDESCRIPTION: Public function that returns comprehensive information about a specific Syrup Pool, including staked and reward token amounts, reward rates, and timestamps.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/syrup-pools.md#2025-04-19_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npublic fun get_pool_info<StakeToken, RewardToken, UID>(): (u64, u64, u64, u64, u64, u64, u64)\n```\n\n----------------------------------------\n\nTITLE: Injecting Funds into Lottery (TypeScript)\nDESCRIPTION: This function allows the Injector or Owner to add funds to a specific lottery round. It requires the lottery to be open and transfers CAKE tokens from the caller to the contract.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/lottery-contract.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction injectFunds(uint256 _lotteryId, uint256 _amount) external override onlyOwnerOrInjector {\n    require(_lotteries[_lotteryId].status == Status.Open, \"Lottery not open\");\n\n    cakeToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n    _lotteries[_lotteryId].amountCollectedInCake += _amount;\n\n    emit LotteryInjection(_lotteryId, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping ETH for Exact Tokens in Solidity\nDESCRIPTION: This function swaps BNB for an exact amount of output tokens. It takes the desired output amount, an array of token addresses representing the swap path, recipient address, and deadline as parameters. The function is payable and returns an array of amounts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n  external\n  payable\n  returns (uint[] memory amounts);\n```\n\n----------------------------------------\n\nTITLE: Querying LP Balance in Rust\nDESCRIPTION: Public function that retrieves the LP token balance of a specific address for a given token pair. This allows users to check their liquidity position in a pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npublic fun lp_balance<X, Y>(addr: address): u64\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Fee Flag in PoolKey\nDESCRIPTION: Example of setting the dynamic fee flag in the PoolKey structure for allowing dynamic swap fees.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/develop-a-hook.mdx#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nkey = PoolKey({\n    currency0: currency0,\n    currency1: currency1,\n    hooks: hook,\n    poolManager: poolManager,\n    fee: LPFeeLibrary.DYNAMIC_FEE_FLAG, \n    parameters: bytes32(uint256(hook.getHooksRegistrationBitmap())).setTickSpacing(10)\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Fee in BeforeSwap Hook\nDESCRIPTION: Example implementation of the beforeSwap hook function that sets a dynamic LP fee of 0.3% for swaps. The hook returns the appropriate function selector, zero delta, and the fee with an override flag.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/custom-layer-hook.mdx#2025-04-19_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n// Pool will call hook.beforeSwap() before a swap:\n\n// With the hook.beforeSwap() implementation: \nfunction beforeSwap(..) external returns (bytes4 selector, BeforeSwapDelta delta, uint24 lpFeeOverRide) {\n  // Set 0.3% for this swap. In your hook, you can add custom logic here.\n  uint24 lpFee = 3000;\n\n  return (\n    this.beforeSwap.selector, \n    BeforeSwapDeltaLibrary.ZERO_DELTA, \n    lpFee | LPFeeLibrary.OVERRIDE_FEE_FLAG);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PancakeSwap Factory Interface in Solidity\nDESCRIPTION: Complete interface definition for the PancakeSwap Factory contract. Includes event definitions, view functions for accessing pair information and fee settings, and write functions for pair creation and fee management.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/factory-v2.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity =0.5.16;\n\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Minting New Position NFTs\nDESCRIPTION: Creates a new liquidity position wrapped in an NFT. This function should be called when the pool exists and is initialized. Returns the token ID, liquidity amount, and token amounts used in the position.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mint(struct INonfungiblePositionManager.MintParams params) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity from BEP20â‡„BEP20 Pool in Solidity\nDESCRIPTION: Function for removing liquidity from a pair of BEP20 tokens. It burns LP tokens and returns the underlying assets to the specified recipient address, respecting minimum amount parameters for slippage protection.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidity(\n  address tokenA,\n  address tokenB,\n  uint liquidity,\n  uint amountAMin,\n  uint amountBMin,\n  address to,\n  uint deadline\n) external returns (uint amountA, uint amountB);\n```\n\n----------------------------------------\n\nTITLE: Querying Total LP Supply in Rust\nDESCRIPTION: Public function that returns the total supply of LP tokens for a specific token pair. This represents the total amount of liquidity that has been provided to the pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npublic fun total_lp_supply<X, Y>(): u128\n```\n\n----------------------------------------\n\nTITLE: Initializing a Pool with a Hook in Solidity\nDESCRIPTION: Code example showing how to initialize a PancakeSwap pool with a hook contract. The hook's registration bitmap is included in the pool parameters to specify which callbacks will be used.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/custom-layer-hook.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nkey = PoolKey({\n  currency0: currency0,\n  currency1: currency1,\n  hooks: hook, // hook contract address \n  poolManager: poolManager,\n  fee: uint24(3000), // 0.3% swap fee \n  // parameters include hook callback and tickSpacing: 10\n  parameters: bytes32(uint256(hook.getHooksRegistrationBitmap())).setTickSpacing(10)\n});\n\n/// Initialize the pool \npoolManager.initialize(key, Constants.SQRT_RATIO_1_1, new bytes(0));\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity ETH with Permit for Fee-on-Transfer Tokens in Solidity\nDESCRIPTION: This function removes liquidity from a BEP20â‡„WBNB pair and receives BNB via permit for tokens that take a fee on transfer. It has the same parameters as the regular removeLiquidityETHWithPermit function but is specifically designed for fee-on-transfer tokens.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n  address token,\n  uint liquidity,\n  uint amountTokenMin,\n  uint amountETHMin,\n  address to,\n  uint deadline,\n  bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external returns (uint amountETH);\n```\n\n----------------------------------------\n\nTITLE: Calling Infinity BinPositionManager in Solidity\nDESCRIPTION: Shows how to make a call to the Infinity BinPositionManager, specifically for the BIN_ADD_LIQUIDITY action. It uses the Planner to encode the action and prepare the input for the position manager.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/perform-a-swap.mdx#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nPlan memory planner = Planner.init();\n// addParam would be IBinPositionManager.BinAddLiquidityParams\nplanner.add(Actions.BIN_ADD_LIQUIDITY, abi.encode(addParams));\n// remember to add settlement action \n\ninput[i] = abi.encodeWithSelector(IPositionManager.modifyLiquidities.selector, planner.encode(), block.timestamp);\n```\n\n----------------------------------------\n\nTITLE: Withdraw LP Tokens\nDESCRIPTION: Withdraws LP tokens from pool for a specific NFT position and sends them to specified address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw(uint256 _tokenId, address _to) external returns (uint256 reward)\n```\n\n----------------------------------------\n\nTITLE: Direct Swap with Exact Output in PancakeSwap (Rust)\nDESCRIPTION: Public function to swap token X for an exact amount of token Y, returning both unused X tokens and the output Y tokens. Enables precise output control in programmatic transactions.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\npublic fun swap_x_to_exact_y_direct_external<X, Y>(x_in: coin::Coin<X>, y_out_amount:u64): (coin::Coin<X>, coin::Coin<Y>)\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity ETH with Permit in Solidity\nDESCRIPTION: This function removes liquidity from a BEP20â‡„WBNB pair and receives BNB, without pre-approval, using a permit. It takes token address, liquidity amount, minimum token and ETH amounts, recipient address, deadline, and permit signature components as parameters.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityETHWithPermit(\n  address token,\n  uint liquidity,\n  uint amountTokenMin,\n  uint amountETHMin,\n  address to,\n  uint deadline,\n  bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external returns (uint amountToken, uint amountETH);\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity from PancakeSwap Pools (Rust)\nDESCRIPTION: Function to remove liquidity from a pool by burning LP tokens. Includes parameters for minimum token amounts to account for potential slippage during the removal process.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun remove_liquidity<X, Y>(\n    sender: &signer,\n    liquidity: u64,\n    amount_x_min: u64,\n    amount_y_min: u64\n)\n```\n\n----------------------------------------\n\nTITLE: Step Computations Structure Definition\nDESCRIPTION: Struct definition for storing intermediate swap step calculations including prices and amounts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nstruct StepComputations {\n  uint160 sqrtPriceStartX96;\n  int24 tickNext;\n  bool initialized;\n  uint160 sqrtPriceNextX96;\n  uint256 amountIn;\n  uint256 amountOut;\n  uint256 feeAmount;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vault Lock Mechanism in Solidity\nDESCRIPTION: An example demonstrating the four-step process of using the Vault's lock mechanism for liquidity operations. This includes acquiring a lock, performing actions with the pool manager, and reconciling balances through take() or settle().\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/accounting-layer-vault.mdx#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// An example of the 4 steps process, some codes are removed to keep this simple\ncontract ExamplePositionManager {\n    function addLiquidity(AddLiquidity calldata params) external {\n        // Step 1: Get a lock\n        vault.lock(..)\n    }\n\n    function lockAcquired(bytes calldata rawData) external {\n        // Step 2: Perform action with pool manager\n        CallbackData memory data = abi.decode(rawData, (CallbackData));\n        (BalanceDelta delta, ) = poolManager.mint(...)\n\n        // Step 4: Reconcile balance, an example of token0 below\n        if (delta.amount0() > 0) {\n            vault.take(poolKey.currency0, user, uint128(delta.amount0()));\n        } else {\n            // sync -> transfer token0 to the vault -> then call vault.settle\n            vault.sync(poolKey.currency0);\n            pay(poolKey.currency0, user, address(vault), uint256(int256(-delta.amount0())));\n            vault.settle(poolKey.currency0);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Funds into Lottery in Solidity\nDESCRIPTION: Owner function to inject additional CAKE tokens into an 'Open' lottery round. This increases the potential rewards for winners of the current lottery.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction injectFunds(uint256 _lotteryId, uint256 _amount) external override onlyOwner;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom AMM Curve Hook in Solidity for PancakeSwap Infinity\nDESCRIPTION: This code snippet shows the implementation of a custom hook that modifies the AMM curve to allow 1:1 swaps between stablecoins. It uses the beforeSwap() callback to return a custom BalanceDelta, effectively creating a zero-slippage exchange.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/hook-examples/overwriting-amm-curve.mdx#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// [!include ~/snippets/CustomAMMCurveHook.sol]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bin Liquidity and Reserves\nDESCRIPTION: Function for retrieving the current reserves and liquidity of a specific bin from the BinPoolManager. Returns a 128.128-binary fixed-point number representing the bin's state.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/liquidity-book.mdx#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n// ref: BinPoolManager.sol\nbinPoolManager.getBin(PoolId id, uint24 binId)\n  returns (uint128 binReserveX, uint128 binReserveY, uint256 binLiquidity);\n```\n\n----------------------------------------\n\nTITLE: Slot0 Struct Definition\nDESCRIPTION: Definition of Slot0 struct containing pool state variables for gas optimization.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Slot0 {\n  uint160 sqrtPriceX96;\n  int24 tick;\n  uint16 observationIndex;\n  uint16 observationCardinality;\n  uint16 observationCardinalityNext;\n  uint32 feeProtocol;\n  bool unlocked;\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Price Ratio from sqrtPriceX96 for WETH/USDT Pool\nDESCRIPTION: Example calculation showing how to derive the token price ratio from sqrtPriceX96 value for the WETH/USDT pool, accounting for different token decimals. This demonstrates the additional adjustment needed when tokens have different decimal places.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/concentrated-liquidity.mdx#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// token0: WETH (18 decimals)\n// token1: USDT (6 decimals)\n// sqrtPriceX96: 5046499860369450237927407 (as of 12 March 2024)\n\n// Price ratio of token0 (WETH) in term of token1 (USDT): 4.0571e-9 ETH for 1 USDC\nprice = (5046499860369450237927407 / 2**96) **2 = 4.0571e-9\n\nWETH to USDC: 4.0571e-9 / (10**6/10**18): 1 WETH = 4057 USDT\nUSDT to WETH: 4.0571e-9 / (10**18/10**6): 1 USDT = 4.0571e-21 WETH\n```\n\n----------------------------------------\n\nTITLE: Implementing Emergency Withdraw Function in Rust for Aptos\nDESCRIPTION: Emergency function that allows users to withdraw all their staked tokens from a pool without considering rewards, useful in emergency situations.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun emergency_withdraw<CoinType>(sender: &signer)\n```\n\n----------------------------------------\n\nTITLE: Minting Fungible Position Tokens for Liquidity Providers\nDESCRIPTION: Implementation of the _mint function in BinFungibleToken.sol that creates ERC1155 tokens for liquidity providers. Shows how the protocol tracks LP ownership shares in each bin.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/liquidity-book.mdx#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n/// Ref BinFungibleToken.sol (similar to ERC1155)\nfunction _mint(address to, uint256 id, uint256 amount) internal {\n  totalSupply[id] += amount;\n  unchecked {\n    balanceOf[to][id] += amount;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Bulk Ticket Pricing in Solidity\nDESCRIPTION: Function that calculates the total price for multiple tickets with a bulk discount applied using the discount divisor formula.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n    function calculateTotalPriceForBulkTickets(\n        uint256 _discountDivisor,\n        uint256 _priceTicket,\n        uint256 _numberTickets\n    ) external pure returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Harvest Rewards Function\nDESCRIPTION: Harvests CAKE rewards from a pool for a specific NFT position.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction harvest(uint256 _tokenId, address _to) external returns (uint256 reward)\n```\n\n----------------------------------------\n\nTITLE: Querying Token Reserves in Rust\nDESCRIPTION: Public function that returns the current reserves of both tokens in a pair and the timestamp of the last update. This information is essential for price calculations in swaps.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npublic fun token_reserves<X, Y>(): (u64, u64, u64)\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity with Permit for BEP20 Pairs in Solidity\nDESCRIPTION: This function removes liquidity from a BEP20â‡„BEP20 pair without pre-approval, using a permit. It takes addresses of both tokens, liquidity amount, minimum amounts for both tokens, recipient address, deadline, and permit signature components as parameters.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityWithPermit(\n  address tokenA,\n  address tokenB,\n  uint liquidity,\n  uint amountAMin,\n  uint amountBMin,\n  address to,\n  uint deadline,\n  bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external returns (uint amountA, uint amountB);\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeSwap Function for VeCakeSwapDiscountHook\nDESCRIPTION: Implementation of the beforeSwap function in the VeCakeSwapDiscountHook contract, which applies a discount for veCake holders.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/develop-a-hook.mdx#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction beforeSwap(address, PoolKey calldata key, ICLPoolManager.SwapParams calldata, bytes calldata)\n    external view override poolManagerOnly returns (bytes4, BeforeSwapDelta, uint24)\n{\n    uint24 lpFee = poolIdToLpFee[key.toId()];\n\n    if (veCake.balanceOf(tx.origin) >= 1 ether) {\n        lpFee = lpFee / 2; \n    }\n\n    return (this.beforeSwap.selector, BeforeSwapDeltaLibrary.ZERO_DELTA, lpFee | LPFeeLibrary.OVERRIDE_FEE_FLAG);\n}\n```\n\n----------------------------------------\n\nTITLE: Flash Accounting Implementation in SettlementGuard\nDESCRIPTION: Snippet from SettlementGuard.sol showing how the Vault tracks unsettled currencies and their deltas. The accountDelta function updates the transient storage to keep track of balance changes and performs necessary accounting when balances change.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/accounting-layer-vault.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction accountDelta(address settler, Currency currency, int256 newlyAddedDelta) internal {\n    if (newlyAddedDelta == 0) return;\n\n    /// @dev update the count of non-zero deltas if necessary\n    int256 currentDelta = getCurrencyDelta(settler, currency);\n    int256 nextDelta = currentDelta + newlyAddedDelta;\n    unchecked {\n        if (nextDelta == 0) {\n            tstore(UNSETTLED_DELTAS_COUNT, sub(tload(UNSETTLED_DELTAS_COUNT), 1))\n        } else if (currentDelta == 0) {\n            tstore(UNSETTLED_DELTAS_COUNT, add(tload(UNSETTLED_DELTAS_COUNT), 1))\n        }\n    }\n\n    uint256 elementSlot = uint256(keccak256(abi.encode(settler, currency, CURRENCY_DELTA)));\n    tstore(elementSlot, nextDelta)\n}\n```\n\n----------------------------------------\n\nTITLE: Increase Position Liquidity\nDESCRIPTION: Increases liquidity in a position using tokens provided by msg.sender, with slippage protection.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction increaseLiquidity(struct INonfungiblePositionManagerStruct.IncreaseLiquidityParams params) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Setting Operator, Treasury, and Injector Addresses in Solidity\nDESCRIPTION: Owner function to set the addresses for the lottery operator, treasury, and injector. These addresses control various aspects of the lottery operation and fund management.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setOperatorAndTreasuryAddresses(address _operatorAddress, address _treasuryAddress) external onlyOwner;\n```\n\n----------------------------------------\n\nTITLE: Emergency Withdraw Function for Syrup Pools in Rust for Aptos\nDESCRIPTION: Entry function that allows users to withdraw their staked tokens from a Syrup Pool in emergency situations, forfeiting any pending rewards.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/syrup-pools.md#2025-04-19_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun emergency_withdraw<StakeToken, RewardToken, UID>(account: &signer)\n```\n\n----------------------------------------\n\nTITLE: Collect Fees To Address\nDESCRIPTION: Collects fees and performs refund to a specified address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction collectTo(struct INonfungiblePositionManagerStruct.CollectParams params, address to) external returns (uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Fee Amount Tick Spacing Mapping\nDESCRIPTION: Mapping that stores tick spacing values for different fee amounts. Once enabled, fee amounts cannot be removed.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(uint24 => int24) feeAmountTickSpacing\n```\n\n----------------------------------------\n\nTITLE: Swapping for Exact Output Tokens in PancakeSwap (Rust)\nDESCRIPTION: Function to swap token X for an exact amount of output token Y. Used when users know precisely how much of the output token they want to receive.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun swap_exact_output<X, Y>(\n    sender: &signer,\n    y_out: u64,\n    x_max_in: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Universal Router Commands with Permit2 Integration\nDESCRIPTION: Demonstrates how to execute Universal Router commands, including a Permit2 permit and a V2 swap. This snippet shows the encoding of commands and inputs for the router's execute function.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/perform-a-swap.mdx#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nbytes memory commands = abi.encodePacked(\n    bytes1(uint8(Commands.PERMIT2_PERMIT)),  // permit2 command \n    bytes1(uint8(Commands.V2_SWAP_EXACT_IN)));\n\nbytes[] memory inputs = new bytes[](2);\ninputs[0] = abi.encode(IAllowanceTransfer.PermitSingle permitSingle, bytes signature); // permit2 input with user's signature\ninputs[1] = abi.encode(...v2 swap input);\n\nuniversalRouter.execute(commands, inputs);\n```\n\n----------------------------------------\n\nTITLE: Testing LiquidityRemovalFeeHook in Solidity\nDESCRIPTION: Test code for the LiquidityRemovalFeeHook that adds liquidity first, then removes it and verifies that the 10% fee is correctly taken. This ensures the hook is functioning as intended in a controlled environment.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/hook-examples/taking-fee-via-hook.mdx#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// [!include ~/snippets/LiquidityRemovalFeeHook.t.sol]\n```\n\n----------------------------------------\n\nTITLE: Implementing Withdraw Function in Rust for Aptos\nDESCRIPTION: Entry function that enables users to withdraw their staked tokens from a pool, while automatically distributing any pending rewards.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun withdraw<CoinType>(\n    sender: &signer,\n    amount: u64\n)\n```\n\n----------------------------------------\n\nTITLE: CAKE Syrup Pool Contract Address Reference\nDESCRIPTION: The contract address for the CakePool smart contract that handles CAKE staking functionality on PancakeSwap.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/fixed-term-staking-cake-pool.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n0x45c54210128a065de780C4B0Df3d16664f7f859e\n```\n\n----------------------------------------\n\nTITLE: Registering LP Token Function in Rust\nDESCRIPTION: Public function that allows users to register for LP tokens for a specific token pair. Users must call this function before they can receive LP tokens for providing liquidity to a pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npublic fun register_lp<X, Y>(sender: &signer)\n```\n\n----------------------------------------\n\nTITLE: Defining MasterChef Structure in Rust for Aptos\nDESCRIPTION: The main data structure that holds the metadata of the masterchef contract, including pools management, reward rates, and administrative details.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct MasterChef has key {\n    signer_cap: account::SignerCapability,\n    admin: address,\n    upkeep_admin: address,\n    lp_to_pid: TableWithLength<string::String, u64>,\n    lps: vector<string::String>,\n    pool_info: vector<PoolInfo>,\n    total_regular_alloc_point: u64,\n    total_special_alloc_point: u64,\n    cake_per_second: u64,\n    cake_rate_to_regular: u64,\n    cake_rate_to_special: u64,\n    last_upkeep_timestamp: u64,\n    end_timestamp: u64\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapping WETH to ETH in Solidity\nDESCRIPTION: Defines the structure for unwrapping a specified amount of WETH to ETH. The amount can be set to contract balance or delta balance using predefined constants.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/manage-liquidity.mdx#2025-04-19_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n{\n  // set to ActionConstants.CONTRACT_BALANCE to wrap contract balance. \n  // set to ActionConstants.OPEN_DELTA to wrap delta balance\n  uint256 aount; \n}\n```\n\n----------------------------------------\n\nTITLE: Performing ExactOut Swap with PCS StableSwap in Solidity\nDESCRIPTION: Defines the structure for performing an exactOut swap with PancakeSwap StableSwap. It includes parameters for recipient, amount out, maximum amount in, token path, pool flags, and payer specification.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/perform-a-swap.mdx#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n{\n    address recipient; // recipient of output token \n    uint256 amountOut; // amountOut \n    uint256 amountInMax; // revert if amountIn is more than amountInMax\n    address[] path; // eg. (token0->token1): path[0] = token0, path[1] = token1\n    uint256[] flag; // eg. flag[0] = 2 indicate StableSwapTwoPool, 3 = indicate StableSwapThreePool\n    bool payerIsUser; // if true, transfer token from sender, else take token from contract\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Pool Function in Rust for Aptos\nDESCRIPTION: Function to update a specific pool's information based on its ID, recalculating rewards and other metrics.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun update_pool(pid: u64)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Number of Tickets Per Buy in Solidity\nDESCRIPTION: Owner function to set the maximum number of tickets that can be purchased in a single transaction. The maximum must be greater than zero.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setMaxNumberTicketsPerBuy(uint256 _maxNumberTicketsPerBuy) external onlyOwner;\n```\n\n----------------------------------------\n\nTITLE: Price Calculation Example for USDT/USDC Pool\nDESCRIPTION: An example calculation showing how to determine the price for a USDT/USDC pool with bin step = 1 and activeId = 8388608, which results in a 1:1 exchange rate.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/liquidity-book.mdx#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nprice: (1 + 1 / 10_000) ** (8388608 - 8388608) = 1\n// this means 1 USDT = 1 USDC \n```\n\n----------------------------------------\n\nTITLE: Implementing Mass Update Pools Function in Rust for Aptos\nDESCRIPTION: Administrative function that updates all pool information, including reward calculations and distribution metrics.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun mass_update_pools()\n```\n\n----------------------------------------\n\nTITLE: Drawing Final Number and Making Lottery Claimable (TypeScript)\nDESCRIPTION: This complex function is called by the Operator to draw the final winning number and make the lottery claimable. It calculates prizes for each bracket, updates lottery status, and handles treasury withdrawals and auto-injections.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/lottery-contract.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction drawFinalNumberAndMakeLotteryClaimable(uint256 _lotteryId, bool _autoInjection)\n    external\n    override\n    onlyOperator\n    nonReentrant\n{\n    require(_lotteries[_lotteryId].status == Status.Close, \"Lottery not close\");\n    require(_lotteryId == randomGenerator.viewLatestLotteryId(), \"Numbers not drawn\");\n\n    // Calculate the finalNumber based on the randomResult generated by ChainLink's fallback\n    uint32 finalNumber = randomGenerator.viewRandomResult();\n\n    // Initialize a number to count addresses in the previous bracket\n    uint256 numberAddressesInPreviousBracket;\n\n    // Calculate the amount to share post-treasury fee\n    uint256 amountToShareToWinners = (\n        ((_lotteries[_lotteryId].amountCollectedInCake) * (10000 - _lotteries[_lotteryId].treasuryFee))\n    ) / 10000;\n\n    // Initializes the amount to withdraw to treasury\n    uint256 amountToWithdrawToTreasury;\n\n    // Calculate prizes in CAKE for each bracket by starting from the highest one\n    for (uint32 i = 0; i < 6; i++) {\n        uint32 j = 5 - i;\n        uint32 transformedWinningNumber = _bracketCalculator[j] + (finalNumber % (uint32(10)**(j + 1)));\n\n        _lotteries[_lotteryId].countWinnersPerBracket[j] =\n            _numberTicketsPerLotteryId[_lotteryId][transformedWinningNumber] -\n            numberAddressesInPreviousBracket;\n\n        // A. If number of users for this _bracket number is superior to 0\n        if (\n            (_numberTicketsPerLotteryId[_lotteryId][transformedWinningNumber] - numberAddressesInPreviousBracket) !=\n            0\n        ) {\n            // B. If rewards at this bracket are > 0, calculate, else, report the numberAddresses from previous bracket\n            if (_lotteries[_lotteryId].rewardsBreakdown[j] != 0) {\n                _lotteries[_lotteryId].cakePerBracket[j] =\n                    ((_lotteries[_lotteryId].rewardsBreakdown[j] * amountToShareToWinners) /\n                        (_numberTicketsPerLotteryId[_lotteryId][transformedWinningNumber] -\n                            numberAddressesInPreviousBracket)) /\n                    10000;\n\n                // Update numberAddressesInPreviousBracket\n                numberAddressesInPreviousBracket = _numberTicketsPerLotteryId[_lotteryId][transformedWinningNumber];\n            }\n            // A. No CAKE to distribute, they are added to the amount to withdraw to treasury address\n        } else {\n            _lotteries[_lotteryId].cakePerBracket[j] = 0;\n\n            amountToWithdrawToTreasury +=\n                (_lotteries[_lotteryId].rewardsBreakdown[j] * amountToShareToWinners) /\n                10000;\n        }\n    }\n\n    // Update internal statuses for lottery\n    _lotteries[_lotteryId].finalNumber = finalNumber;\n    _lotteries[_lotteryId].status = Status.Claimable;\n\n    if (_autoInjection) {\n        pendingInjectionNextLottery = amountToWithdrawToTreasury;\n        amountToWithdrawToTreasury = 0;\n    }\n\n    amountToWithdrawToTreasury += (_lotteries[_lotteryId].amountCollectedInCake - amountToShareToWinners);\n\n    // Transfer CAKE to treasury address\n    cakeToken.safeTransfer(treasuryAddress, amountToWithdrawToTreasury);\n\n    emit LotteryNumberDrawn(currentLotteryId, finalNumber, numberAddressesInPreviousBracket);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Position Minting with Planner\nDESCRIPTION: Example of using Planner helper class to mint a position with CLPositionManager\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/manage-liquidity.mdx#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nPoolKey memory clPoolKey;\nint24 tickLower;\nint24 tickUpper;\n\n// Assume other field such as liquidity and amount0Max are present\nPlan memory planner = Planner.init();\n\n// For each action to add, call planner.add \nplanner.add(ACTIONS.CL_MINT_POSITION, abi.encode(clPoolKey, tickLower, tickUpper, liquidity, amount0Max, amount1Max, recipient, hookData));\n\n// finalizeModifyLiquidityWithClose is a helper method to add CLOSE_CURRENCY actions for both currencies  \nbytes memory payload = planner.finalizeModifyLiquidityWithClose(config.poolKey)\n\nuint256 deadline = block.timestamp;\nclPositionManager.modifyLiquidities(payload, deadline);\n```\n\n----------------------------------------\n\nTITLE: Defining PoolInfo Structure in Rust for Aptos\nDESCRIPTION: Data structure containing information about a specific staking pool, including total staked amount, accumulated rewards per share, and allocation points.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct PoolInfo has store {\n    total_amount: u128,\n    acc_cake_per_share: u128,\n    last_reward_timestamp: u64,\n    alloc_point: u64,\n    is_regular: bool\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Between sqrtPriceX96 and Token Price Ratio\nDESCRIPTION: Formula to convert between sqrtPriceX96 binary fixed-point representation and actual price ratio. This shows how to work with the Q64.96 fixed-point number format used in concentrated liquidity pools to represent square root prices.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/concentrated-liquidity.mdx#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nsqrtPriceX96 = sqrt(price) * 2**96\n\n// shifting price to the LHS result in the below:\nprice = (sqrtPriceX96 / 2**96) ** 2\n```\n\n----------------------------------------\n\nTITLE: Removing Liquidity with Fee-on-Transfer Tokens in Solidity\nDESCRIPTION: Specialized function for removing liquidity from a pair with a token that implements a fee on transfer. This handles the calculation differences required for such tokens when returning assets after burning LP tokens.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n  address token,\n  uint liquidity,\n  uint amountTokenMin,\n  uint amountETHMin,\n  address to,\n  uint deadline\n) external returns (uint amountETH);\n```\n\n----------------------------------------\n\nTITLE: Position Struct Definition in Solidity\nDESCRIPTION: Defines the Position struct used by the NonfungiblePositionManager to store data about liquidity positions wrapped as NFTs. Contains properties for tracking liquidity amounts, fee growth, tick ranges, and owed tokens.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Position {\n  uint96 nonce;\n  address operator;\n  uint80 poolId;\n  int24 tickLower;\n  int24 tickUpper;\n  uint128 liquidity;\n  uint256 feeGrowthInside0LastX128;\n  uint256 feeGrowthInside1LastX128;\n  uint128 tokensOwed0;\n  uint128 tokensOwed1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exact Output Token Swap in PancakeSwap V2 Router\nDESCRIPTION: Function that executes a token swap targeting an exact output amount, optimizing for minimum input. Returns the actual amount of input tokens required to achieve the exact output amount specified.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/smartrouter/v2swaprouter.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to) external payable returns (uint256 amountIn)\n```\n\n----------------------------------------\n\nTITLE: Periphery Contract Addresses for PancakeSwap v3\nDESCRIPTION: Markdown table showing the addresses for various periphery contracts like SwapRouter, V3Migrator, NonfungiblePositionManager, QuoterV2, TickLens, and PancakeInterfaceMulticall across different blockchain networks.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/addresses.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Contract                   | BSC, ETH, zkEVM, Arbitrum, Linea, Base, opBNB | zkSync                                     | GOR, BSC TESTNET                           |\n| -------------------------- | --------------------------------------------- | ------------------------------------------ | ------------------------------------------ |\n| SwapRouter (v3)            | 0x1b81D678ffb9C0263b24A97847620C99d213eB14    | 0xD70C70AD87aa8D45b8D59600342FB3AEe76E3c68 | 0x1b81D678ffb9C0263b24A97847620C99d213eB14 |\n| V3Migrator                 | 0xbC203d7f83677c7ed3F7acEc959963E7F4ECC5C2    | 0x556A72A7A3bB3bbd293D923e59b6B56898fB405D | 0x46A15B0b27311cedF172AB29E4f4766fbE7F4364 |\n| NonfungiblePositionManager | 0x46A15B0b27311cedF172AB29E4f4766fbE7F4364    | 0xa815e2eD7f7d5B0c49fda367F249232a1B9D2883 | 0x427bF5b37357632377eCbEC9de3626C71A5396c1 |\n| QuoterV2                   | 0xB048Bbc1Ee6b733FFfCFb9e9CeF7375518e25997    | 0x3d146FcE6c1006857750cBe8aF44f76a28041CCc | 0xbC203d7f83677c7ed3F7acEc959963E7F4ECC5C2 |\n| TickLens                   | 0x9a489505a00cE272eAa5e07Dba6491314CaE3796    | 0x7b08978FA77910f77d273c353C62b5BFB9E6D17B | 0xac1cE734566f390A94b00eb9bf561c2625BF44ea |\n| PancakeInterfaceMulticall  | 0xac1cE734566f390A94b00eb9bf561c2625BF44ea    | 0x2a76b93B9Cd441AE8aDA529e0e95826e00556351 | 0x3D00CdB4785F0ef20C903A13596e0b9B2c652227 |\n```\n\n----------------------------------------\n\nTITLE: Calculating Pool Price from Active Bin ID\nDESCRIPTION: Formula for calculating the current price of a pool based on the activeId and binStep parameters. This demonstrates how discrete price bins work within the Liquidity Book AMM system.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/liquidity-book.mdx#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nprice: (1 + binStep / 10_000) ** (activeId - 8388608)\n```\n\n----------------------------------------\n\nTITLE: Deriving PoolId from PoolKey in Solidity\nDESCRIPTION: This code demonstrates how to derive a PoolId from a PoolKey using the PoolIdLibrary. It includes creating a PoolKey and then converting it to a PoolId.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer-poolmanager.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport {PoolIdLibrary} from \"@pancakeswap/infinity-core/src/types/PoolId.sol\";\n\nusing PoolIdLibrary for PoolKey;\n\nPoolKey memory key = PoolKey({\n  currency0: currency0,\n  currency1: currency1\n  hooks: IHooks(address(0)),\n  poolManager: poolManager,\n  fee: uint24(3000),\n  parameters: bytes32(uint256(counterHook.getHooksRegistrationBitmap())).setTickSpacing(10)\n});\n\nPoolid id = key.toId();\n```\n\n----------------------------------------\n\nTITLE: Calculating Bin Liquidity Formula\nDESCRIPTION: Formula for calculating the liquidity within a specific bin based on its price and token reserves. This shows how liquidity is represented as a constant sum of assets in the Liquidity Book model.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/liquidity-book.mdx#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// price is the price of the bin.\n// x is amount of tokenX \n// y is amount of tokenY \nLiquidity = price * x + y\n```\n\n----------------------------------------\n\nTITLE: Defining Token Pair Metadata Structure in Rust\nDESCRIPTION: Defines the TokenPairMetadata struct that stores all metadata related to a token pair pool, including balances, fees, and token capabilities. This structure holds the state of liquidity pools in the swap system.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct TokenPairMetadata<phantom X, phantom Y> has key {\n    creator: address,\n    fee_amount: coin::Coin<LPToken<X, Y>>,\n    k_last: u128,\n    balance_x: coin::Coin<X>,\n    balance_y: coin::Coin<Y>,\n    mint_cap: coin::MintCapability<LPToken<X, Y>>,\n    burn_cap: coin::BurnCapability<LPToken<X, Y>>,\n    freeze_cap: coin::FreezeCapability<LPToken<X, Y>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Bridging CAKE Tokens with sendFrom Function in Solidity\nDESCRIPTION: This function allows bridging CAKE tokens from the source chain to a destination chain. It requires specifying the source address, destination chain ID, destination address, amount, minimum amount, and call parameters.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/cake/cross-chain-cake-bridging.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) external payable;\n```\n\n----------------------------------------\n\nTITLE: Fee Amount Enable Function\nDESCRIPTION: Enables a fee amount with specified tick spacing. Fee amounts cannot be disabled once enabled.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction enableFeeAmount(uint24 fee, int24 tickSpacing) public\n```\n\n----------------------------------------\n\nTITLE: Defining UserInfo Structure in Rust for Aptos\nDESCRIPTION: Individual user staking data structure that tracks the amount of tokens staked and the reward debt for reward distribution calculations.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct UserInfo has store {\n    amount: u128,\n    reward_debt: u128\n}\n```\n\n----------------------------------------\n\nTITLE: Swap Function Definition for Market Maker Pool in Solidity\nDESCRIPTION: This snippet defines the swap function and the Quote struct used in the Market Maker Pool contract. It includes parameters for the market maker signer, quote details, and the signature.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/market-maker-pool.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Quote {\n    uint256 nonce;\n    address user;\n    address baseToken;\n    address quoteToken;\n    uint256 baseTokenAmount;\n    uint256 quoteTokenAmount;\n    uint256 expiryTimestamp;\n}\n\nfunction swap(\n        address _mmSigner,\n        Quote calldata _quote,\n        bytes calldata _signature\n    ) external payable\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticket Numbers and Statuses in Solidity\nDESCRIPTION: Function that returns the numbers and statuses for an array of ticket IDs, allowing users to check their ticket details and winning status.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction viewNumbersAndStatusesForTicketIds(uint256[] calldata _ticketIds)\n    external\n    view\n    returns (uint32[] memory, bool[] memory);\n```\n\n----------------------------------------\n\nTITLE: Defining Liquidity Position Parameters in Concentrated Liquidity Pools\nDESCRIPTION: ModifyLiquidityParams struct and function from ICLPoolManager.sol that defines how to modify liquidity in a concentrated range. It specifies the lower and upper ticks of the position, the liquidity delta, and a salt value for creating unique positions.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/concentrated-liquidity.mdx#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// From ICLPoolManager.sol\nstruct ModifyLiquidityParams {\n    // the lower and upper tick of the position\n    int24 tickLower;\n    int24 tickUpper;\n    // how to modify the liquidity\n    int256 liquidityDelta;\n    // a value to set if you want unique liquidity positions at the same range\n    bytes32 salt;\n}\n\n/// @dev see more at CLPoolManager\nfunction modifyLiquidity(PoolKey memory key, ICLPoolManager.ModifyLiquidityParams memory params, bytes calldata hookData);\n```\n\n----------------------------------------\n\nTITLE: Pool Deployer Address Storage\nDESCRIPTION: Storage variable that holds the address of the current pool deployer contract.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\naddress poolDeployer\n```\n\n----------------------------------------\n\nTITLE: Base URI Retrieval\nDESCRIPTION: Returns the base URI that serves as a prefix for all token URIs. This is automatically added to each token's URI or to the token ID if no specific URI is set for that token.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction baseURI() public pure returns (string)\n```\n\n----------------------------------------\n\nTITLE: Quadruple-Hop Exact Output Swap in PancakeSwap (Rust)\nDESCRIPTION: Function to swap token X for an exact amount of token B through intermediate tokens Y, Z, and A (using four pools). Allows precise output amount control through complex routes.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/router-v2.md#2025-04-19_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun swap_exact_output_quadruplehop<X, Y, Z, A, B>(\n    sender: &signer,\n    b_out: u64,\n    x_max_in: u64,\n)\n```\n\n----------------------------------------\n\nTITLE: Internal Update Liquidity Operation\nDESCRIPTION: Internal function that handles updating liquidity operation for a user's position.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction updateLiquidityOperation(struct MasterChefV3.UserPositionInfo positionInfo, uint256 _tokenId, uint256 _newMultiplier) internal\n```\n\n----------------------------------------\n\nTITLE: Lottery Open Event in Solidity\nDESCRIPTION: Event emitted when a new lottery round is opened. Includes details such as lottery ID, start time, end time, ticket price in CAKE, and the first ticket ID.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nLotteryOpen(\n        uint256 indexed lotteryId,\n        uint256 startTime,\n        uint256 endTime,\n        uint256 priceTicketInCake,\n        uint256 firstTicketId\n    );\n```\n\n----------------------------------------\n\nTITLE: BeforeSwap Hook Interface Definition\nDESCRIPTION: The interface for the beforeSwap hook function, showing the expected return values. The hook can return a selector, delta values for specified and unspecified currencies, and an LP fee override value.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/custom-layer-hook.mdx#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// 1. bytes4: function selector to indicate the hook execution is successful\n// 2. BeforeSwapDelta: hook delta for both specified and unspecified currency\n// 3. uint24: lpFeeOverride (for dynamic fee override, we'll talk about this in another section)\nfunction beforeSwap(...) external returns (bytes4, BeforeSwapDelta, uint24);\n```\n\n----------------------------------------\n\nTITLE: Whitelist Management Function\nDESCRIPTION: Adds or removes an address from the whitelist. Can be updated by owner.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setWhiteListAddress(address user, bool verified) public\n```\n\n----------------------------------------\n\nTITLE: Getting Approved Address for Non-Fungible Position Token in PancakeSwap (Solidity)\nDESCRIPTION: This public view function returns the account approved for a specific tokenId. It requires that the tokenId must exist. It takes the tokenId as input and returns the approved address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getApproved(uint256 tokenId) public view returns (address)\n```\n\n----------------------------------------\n\nTITLE: Decrease Position Liquidity\nDESCRIPTION: Decreases liquidity in a position and accounts for the burned liquidity tokens.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decreaseLiquidity(struct INonfungiblePositionManagerStruct.DecreaseLiquidityParams params) external returns (uint256 amount0, uint256 amount1)\n```\n\n----------------------------------------\n\nTITLE: Collecting Protocol Fees in PancakeSwap V3 Pool\nDESCRIPTION: Function to collect accumulated protocol fees, allowing for collection of specific amounts of either token.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction collectProtocol(address recipient, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1)\n```\n\n----------------------------------------\n\nTITLE: AfterSwap Hook Interface Definition\nDESCRIPTION: The interface for the afterSwap hook function, showing that it returns a function selector and a delta value for the unspecified currency. This allows hooks to modify the final amounts received in swaps.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/custom-layer-hook.mdx#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// 1. bytes4: function selector to indicate the hook execution is successful\n// 2. int128: hook delta in unspecified currency\nfunction afterSwap(...) external returns (bytes4, int128)\n```\n\n----------------------------------------\n\nTITLE: Mass Updating Liquidity Mining Pools in Solidity\nDESCRIPTION: Internal function to update CAKE rewards for all liquidity mining pools at once.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction massUpdatePools() internal\n```\n\n----------------------------------------\n\nTITLE: Ticket Claim Event in Solidity\nDESCRIPTION: Event emitted when lottery tickets are claimed after a draw. The event includes the claimer's address, claimed amount, lottery ID, and number of claimed tickets.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nTicketsClaim(address indexed claimer, uint256 amount, uint256 indexed lotteryId, uint256 numberTickets);\n```\n\n----------------------------------------\n\nTITLE: Bin Liquidity Calculation Example\nDESCRIPTION: An example showing how to calculate the total liquidity in a USDT/USDC pool with specific token amounts, demonstrating the constant-sum liquidity model of the Liquidity Book.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/liquidity-book.mdx#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// price from above example\nLiquidity = price * x + y\n          = 1 * 100e6 + 50e6\n          = 150e6\n```\n\n----------------------------------------\n\nTITLE: Update Boost Multiplier\nDESCRIPTION: Updates the farm boost multiplier for a specific NFT position.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction updateBoostMultiplier(uint256 _tokenId, uint256 _newMultiplier) external\n```\n\n----------------------------------------\n\nTITLE: Defining LP Token Structure in Rust\nDESCRIPTION: Defines the LPToken struct which represents the liquidity token corresponding to each token pair pool. The generic parameters X and Y represent the coin type addresses of the tokens in the pair.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct LPToken<phantom X, phantom Y> has key {}\n```\n\n----------------------------------------\n\nTITLE: Collecting Position Fees in PancakeSwap V3 Pool\nDESCRIPTION: Function to collect accumulated fees for a position. Allows collecting specific amounts of either token, with returns showing actual collected amounts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1)\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Liquidity Mining Pools in Solidity\nDESCRIPTION: Updates CAKE rewards for specified liquidity mining pools. Includes a warning about transaction execution limits with too many pools.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction updatePools(uint256[] pids) external\n```\n\n----------------------------------------\n\nTITLE: Ticket Purchase Event in Solidity\nDESCRIPTION: Event emitted when lottery tickets are purchased. The event includes the buyer's address, lottery ID, and number of tickets purchased.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nTicketsPurchase(address indexed buyer, uint256 indexed lotteryId, uint256 numberTickets);\n```\n\n----------------------------------------\n\nTITLE: Internal Harvest Operation\nDESCRIPTION: Internal function that handles the harvest operation logic for a user's position.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction harvestOperation(struct MasterChefV3.UserPositionInfo positionInfo, uint256 _tokenId, address _to) internal returns (uint256 reward)\n```\n\n----------------------------------------\n\nTITLE: Changing Random Number Generator in PancakeSwap Lottery (TypeScript)\nDESCRIPTION: This function allows the owner to update the random number generator contract. It can only be called when there's no active lottery or the current lottery is in a claimable state. It requests a new random number and updates the contract reference.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/lottery-contract.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction changeRandomGenerator(address _randomGeneratorAddress) external onlyOwner {\n        require(\n            (currentLotteryId == 0) || (_lotteries[currentLotteryId].status == Status.Claimable),\n            \"Lottery not in claimable\"\n        );\n\n        // Request a random number from the generator based on a seed\n        IRandomNumberGenerator(_randomGeneratorAddress).getRandomNumber(\n            uint256(keccak256(abi.encodePacked(currentLotteryId, currentTicketId)))\n        );\n\n        // Calculate the finalNumber based on the randomResult generated by ChainLink's fallback\n        IRandomNumberGenerator(_randomGeneratorAddress).viewRandomResult();\n\n        randomGenerator = IRandomNumberGenerator(_randomGeneratorAddress);\n\n        emit NewRandomGenerator(_randomGeneratorAddress);\n    }\n```\n\n----------------------------------------\n\nTITLE: Universal Router Execute Functions\nDESCRIPTION: Defines the two main execute functions of the Universal Router. One includes a deadline parameter to ensure the transaction reverts if executed after the specified time.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/perform-a-swap.mdx#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// Executes encoded commands along with provided inputs. Reverts if deadline has expired.\nfunction execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline);\n\n// Executes encoded commands along with provided inputs. \nfunction execute(bytes calldata commands, bytes[] calldata inputs);\n```\n\n----------------------------------------\n\nTITLE: Updating Farm Boost Contract in Solidity\nDESCRIPTION: Updates the farm boost contract address that may provide additional rewards or modifiers to farms.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction updateFarmBoostContract(address _newFarmBoostContract) external\n```\n\n----------------------------------------\n\nTITLE: Lottery Close Event in Solidity\nDESCRIPTION: Event emitted when a lottery round is closed. Includes the lottery ID and the first ticket ID for the next lottery round.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nLotteryClose(uint256 indexed lotteryId, uint256 firstTicketIdNextLottery);\n```\n\n----------------------------------------\n\nTITLE: Token URI Generation\nDESCRIPTION: Generates the URI for a specific token ID, which can be used to retrieve metadata about the position NFT, including visual representation information.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenURI(uint256 tokenId) public view returns (string)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pending Cake Function in Rust for Aptos\nDESCRIPTION: Public function that calculates the pending CAKE rewards for a specific user in a specific pool, based on their staking amount and duration.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npublic fun pending_cake(\n    pid: u64,\n    user: address\n): u64\n```\n\n----------------------------------------\n\nTITLE: Starting a New Lottery Round (TypeScript)\nDESCRIPTION: This function is used by the Operator to initiate a new lottery round. It sets various parameters such as end time, ticket price, discount divisor, rewards breakdown, and treasury fee. It also creates a new Lottery struct for the current round.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/lottery-contract.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction startLottery(\n    uint256 _endTime,\n    uint256 _priceTicketInCake,\n    uint256 _discountDivisor,\n    uint256[6] calldata _rewardsBreakdown,\n    uint256 _treasuryFee\n) external override onlyOperator {\n    require(\n        (currentLotteryId == 0) || (_lotteries[currentLotteryId].status == Status.Claimable),\n        \"Not time to start lottery\"\n    );\n\n    require(\n        ((_endTime - block.timestamp) > MIN_LENGTH_LOTTERY) && ((_endTime - block.timestamp) < MAX_LENGTH_LOTTERY),\n        \"Lottery length outside of range\"\n    );\n\n    require(\n        (_priceTicketInCake >= minPriceTicketInCake) && (_priceTicketInCake <= maxPriceTicketInCake),\n        \"Outside of limits\"\n    );\n\n    require(_discountDivisor >= MIN_DISCOUNT_DIVISOR, \"Discount divisor too low\");\n    require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\n\n    require(\n        (_rewardsBreakdown[0] +\n            _rewardsBreakdown[1] +\n            _rewardsBreakdown[2] +\n            _rewardsBreakdown[3] +\n            _rewardsBreakdown[4] +\n            _rewardsBreakdown[5]) == 10000,\n        \"Rewards must equal 10000\"\n    );\n\n    currentLotteryId++;\n\n    _lotteries[currentLotteryId] = Lottery({\n        status: Status.Open,\n        startTime: block.timestamp,\n        endTime: _endTime,\n        priceTicketInCake: _priceTicketInCake,\n        discountDivisor: _discountDivisor,\n        rewardsBreakdown: _rewardsBreakdown,\n        treasuryFee: _treasuryFee,\n        cakePerBracket: [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)],\n        countWinnersPerBracket: [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)],\n        firstTicketId: currentTicketId,\n        firstTicketIdNextLottery: currentTicketId,\n        amountCollectedInCake: pendingInjectionNextLottery,\n        finalNumber: 0\n    });\n\n    emit LotteryOpen(\n        currentLotteryId,\n        block.timestamp,\n        _endTime,\n        _priceTicketInCake,\n        currentTicketId,\n        pendingInjectionNextLottery\n    );\n\n    pendingInjectionNextLottery = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Period Duration in Solidity\nDESCRIPTION: Owner-only function to set a new period duration for the liquidity mining contract.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setPeriodDuration(uint256 _periodDuration) external\n```\n\n----------------------------------------\n\nTITLE: Lottery Fund Injection Event in Solidity\nDESCRIPTION: Event emitted when funds are injected into a lottery round. Includes the lottery ID and the amount of CAKE tokens injected.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nLotteryInjection(uint256 indexed lotteryId, uint256 amount);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Pool with Dynamic Fee in Solidity\nDESCRIPTION: Code example showing how to initialize a PancakeSwap pool with dynamic fees. The dynamic fee flag must be set in the pool key's fee field to enable this functionality.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/custom-layer-hook.mdx#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nkey = PoolKey({\n  currency0: currency0,\n  currency1: currency1,\n  hooks: hook, \n  poolManager: poolManager,\n  fee: LPFeeLibrary.DYNAMIC_FEE_FLAG, // [!code focus]\n  parameters: bytes32(uint256(hook.getHooksRegistrationBitmap())).setTickSpacing(10)\n});\n```\n\n----------------------------------------\n\nTITLE: Computing Price from Tick for CAKE/WETH Pool\nDESCRIPTION: Example calculation showing how to derive the price ratio from a tick value for the CAKE/WETH pool. This demonstrates the fundamental formula where price equals 1.0001 raised to the power of the tick value.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/concentrated-liquidity.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// token0: CAKE (18 decimals)\n// token1: WETH (18 decimals)\n// tick: -68554 (as of 12 March 2024)\n\nprice: 1.0001 ** -68554 = 0.00105411128\n// this also imply 1 CAKE = 0.00105411128 WETH\n```\n\n----------------------------------------\n\nTITLE: AfterAddLiquidity Hook Interface Definition\nDESCRIPTION: The interface for the afterAddLiquidity hook function, showing that it returns a function selector and balance deltas for both tokens. This allows hooks to take or provide tokens after liquidity is added.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/custom-layer-hook.mdx#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// 1. bytes4: function selector to indicate the hook execution is successful\n// 2. BalanceDelta: hook delta in both specified/unspecified currency\nfunction afterAddLiquidity(...) external returns (bytes4, BalanceDelta)\n```\n\n----------------------------------------\n\nTITLE: Setting Operator Address in Solidity\nDESCRIPTION: Owner-only function to set a new operator address for the contract.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setOperator(address _operatorAddress) external\n```\n\n----------------------------------------\n\nTITLE: New Operator and Treasury Addresses Event in Solidity\nDESCRIPTION: Event emitted when new operator, treasury, and injector addresses are set. Includes the addresses of the new operator and treasury.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nNewOperatorAndTreasuryAndInjectorAddresses(address operator, address treasury);\n```\n\n----------------------------------------\n\nTITLE: Get Pending Reward Function for Syrup Pools in Rust for Aptos\nDESCRIPTION: Public function that calculates and returns the pending reward tokens that a user has accumulated but not yet claimed in a Syrup Pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/syrup-pools.md#2025-04-19_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npublic fun get_pending_reward<StakeToken, RewardToken, UID>(account: address): u64\n```\n\n----------------------------------------\n\nTITLE: Defining Token Pair Reserve Structure in Rust\nDESCRIPTION: Defines the TokenPairReserve struct which tracks the current token reserves and last updated timestamp for a token pair. This information is crucial for price calculations and swap execution.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct TokenPairReserve<phantom X, phantom Y> has key {\n    reserve_x: u64,\n    reserve_y: u64,\n    block_timestamp_last: u64\n}\n```\n\n----------------------------------------\n\nTITLE: AfterRemoveLiquidity Hook Interface Definition\nDESCRIPTION: The interface for the afterRemoveLiquidity hook function, showing that it returns a function selector and balance deltas for both tokens. This allows hooks to take or provide tokens after liquidity is removed.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/custom-layer-hook.mdx#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n// 1. bytes4: function selector to indicate the hook execution is successful\n// 2. BalanceDelta: hook delta in both specified/unspecified currency\nfunction afterRemoveLiquidity(...) external returns (bytes4, BalanceDelta)\n```\n\n----------------------------------------\n\nTITLE: Defining PoolInfo Structure in Rust for Aptos Syrup Pools\nDESCRIPTION: Defines the PoolInfo structure which tracks all data for an individual staking pool including total staked tokens, rewards, timestamps, limits, and various event handles for pool operations.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/syrup-pools.md#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct PoolInfo<phantom StakeToken, phantom RewardToken, phantom UID> has key {\n    total_staked_token: coin::Coin<StakeToken>,\n    total_reward_token: coin::Coin<RewardToken>,\n    reward_per_second: u64,\n    start_timestamp: u64,\n    end_timestamp: u64,\n    last_reward_timestamp: u64,\n    seconds_for_user_limit: u64,\n    pool_limit_per_user: u64,\n    acc_token_per_share: u128,\n    precision_factor: u128,\n    emergency_withdraw_reward_event: EventHandle<EmergencyWithdrawRewardEvent<StakeToken, RewardToken, UID>>,\n    stop_reward_event: EventHandle<StopRewardEvent<StakeToken, RewardToken, UID>>,\n    new_pool_limit_event: EventHandle<NewPoolLimitEvent<StakeToken, RewardToken, UID>>,\n    new_reward_per_second_event: EventHandle<NewRewardPerSecondEvent<StakeToken, RewardToken, UID>>,\n    new_start_and_end_timestamp_event: EventHandle<NewStartAndEndTimestampEvent<StakeToken, RewardToken, UID>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Burning NFT Tokens in Solidity\nDESCRIPTION: Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first before burning.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(uint256 _tokenId) external\n```\n\n----------------------------------------\n\nTITLE: Fee Amount Extra Info Setting Function\nDESCRIPTION: Updates additional information for fee amounts including whitelist requirements and enabled status.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setFeeAmountExtraInfo(uint24 fee, bool whitelistRequested, bool enabled) public\n```\n\n----------------------------------------\n\nTITLE: Defining Return Delta Permissions in Hooks\nDESCRIPTION: Implementation of getHooksRegistrationBitmap focusing on return delta permissions. These permissions allow hooks to modify balance deltas to take fees or provide tokens during operations.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/custom-layer-hook.mdx#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// Hooks need to implement getHooksRegistrationBitmap() to define their permission:\nfunction getHooksRegistrationBitmap() external pure override returns (uint16) {\n  return _hooksRegistrationBitmapFrom(\n    Permissions({\n\n      // The 4 permissions around modifying return delta\n      beforeSwapReturnsDelta: false, // during beforeSwap \n      afterSwapReturnsDelta: false, // during afterSwap \n      afterAddLiquidityReturnsDelta: false, // during afterAddLiquidity \n      afterRemoveLiquidityReturnsDelta: false // during afterRemoveLiquidity\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Stake Amount Function for Syrup Pools in Rust for Aptos\nDESCRIPTION: Public function that returns the amount of tokens staked by a specific user in a Syrup Pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/syrup-pools.md#2025-04-19_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npublic fun get_user_stake_amount<StakeToken, RewardToken, UID>(account: address)\n```\n\n----------------------------------------\n\nTITLE: Defining PoolUserInfo Structure in Rust for Aptos\nDESCRIPTION: Data structure that tracks user information across different pools, maintaining a mapping from pool IDs to user information and a list of all pool IDs a user is involved with.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct PoolUserInfo has key {\n    pid_to_user_info: TableWithLength<u64, UserInfo>,\n    pids: vector<u64>,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Ticket Price in CAKE (TypeScript)\nDESCRIPTION: This function allows the Owner to set the minimum and maximum ticket prices in CAKE. It ensures that the minimum price is less than or equal to the maximum price.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/lottery-contract.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setMinAndMaxTicketPriceInCake(uint256 _minPriceTicketInCake, uint256 _maxPriceTicketInCake)\n    external\n    onlyOwner\n{\n    require(_minPriceTicketInCake <= _maxPriceTicketInCake, \"minPrice must be < maxPrice\");\n\n    minPriceTicketInCake = _minPriceTicketInCake;\n    maxPriceTicketInCake = _maxPriceTicketInCake;\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Price from Tick for WETH/USDT Pool with Different Decimals\nDESCRIPTION: Example calculation showing how to derive the price ratio from a tick value, accounting for different token decimals in the WETH/USDT pool. This demonstrates how to adjust the final price calculation when tokens have different decimal places.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/concentrated-liquidity.mdx#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// token0: WETH (18 decimals)\n// token1: USDT (6 decimals)\n// tick:  -193256 (as of 12 March 2024)\n\nprice: 1.0001 ** -193256 = 4.04965646e-9\n// this also imply 1 WETH = 4.04965646e-9 USDT \n// However WETH is 18 decimals and USDT is 6 decimal, we have to multiply by 12 decimals\nratio of WETH/USDT with decimals: = 4.04965646e-9 * (10**18/10**6): 1 WETH = 4049.65646 USDT\n```\n\n----------------------------------------\n\nTITLE: Drawing Final Lottery Number and Making Lottery Claimable in Solidity\nDESCRIPTION: Operator function to draw the final lottery number and make the lottery claimable. It calculates rewards for each bracket after accounting for treasury fees and transfers the treasury fee to the treasury address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n    function drawFinalNumberAndMakeLotteryClaimable(uint256 _lotteryId, bool _autoInjection) external override onlyOperator nonReentrant;\n```\n\n----------------------------------------\n\nTITLE: Importing PancakeFactory Interface\nDESCRIPTION: Import statement for including the PancakeFactory interface from Uniswap v2 core contracts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/factory-v2.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport '@uniswap/v2-core/contracts/interfaces/IPancakeFactory.sol';\n```\n\n----------------------------------------\n\nTITLE: Update Liquidity Position\nDESCRIPTION: Updates the liquidity information for a specific NFT position.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction updateLiquidity(uint256 _tokenId) external\n```\n\n----------------------------------------\n\nTITLE: Testing Custom AMM Curve Hook in Solidity for PancakeSwap Infinity\nDESCRIPTION: This test suite verifies the functionality of the custom AMM curve hook. It includes four test cases covering exact input and output swaps in both directions (zeroForOne and oneForZero) to ensure the hook correctly implements the 1:1 exchange rate.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/hook-examples/overwriting-amm-curve.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// [!include ~/snippets/CustomAMMCurveHook.t.sol]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Bin ID from BinPoolManager\nDESCRIPTION: This code shows how to retrieve the activeId (current bin id), protocol fee, and swap fee from the BinPoolManager. The activeId is essential for determining the current price point of the pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer/liquidity-book.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// ref: BinPoolManager.sol\nbinPoolManager.getSlot0(PoolId) external \n  returns (uint24 activeId, uint16 protocolFee, uint24 swapFee);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Lottery Information in Solidity\nDESCRIPTION: Function that returns a user's ticket IDs, numbers, and statuses for a specific lottery round, with pagination support.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n    function viewUserInfoForLottery(\n        address _user,\n        uint256 _lotteryId,\n        uint256 _cursor,\n        uint256 _size\n    )\n        external\n        view\n        returns (\n            uint256[] memory,\n            uint32[] memory,\n            bool[] memory,\n            uint256\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Swap Info Structure in Rust\nDESCRIPTION: Defines the SwapInfo struct that contains module-level metadata including administrative information and event handling capabilities. This structure stores global configuration for the swap protocol.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct SwapInfo has key {\n    signer_cap: account::SignerCapability,\n    fee_to: address,\n    admin: address,\n    pair_created: event::EventHandle<PairCreatedEvent>\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stableswap Factory Contract Address on Binance Smart Chain\nDESCRIPTION: The contract address for the Stableswap Factory on Binance Smart Chain. This is a core component of PancakeSwap's stable swap implementation.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/stableswap/overview.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0x25a55f9f2279a54951133d503490342b50e5cd15\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol Fee in PancakeSwap V3 Pool\nDESCRIPTION: Administrative function to set the protocol fee percentage for both tokens in the pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setFeeProtocol(uint32 feeProtocol0, uint32 feeProtocol1) external\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Tickets Per Transaction in PancakeSwap Lottery (TypeScript)\nDESCRIPTION: This function allows the owner to set the maximum number of tickets that can be bought or claimed in a single transaction. It's useful for adjusting to changes in BSC block size.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/lottery-contract.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setMaxNumberTicketsPerBuy(uint256 _maxNumberTicketsPerBuy) external onlyOwner {\n        require(_maxNumberTicketsPerBuy != 0, \"Must be > 0\");\n        maxNumberTicketsPerBuyOrClaim = _maxNumberTicketsPerBuy;\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Lottery ID in Solidity\nDESCRIPTION: Function that returns the ID number of the current Lottery round. Round IDs are incremental and correlate to the round number.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction viewCurrentLotteryId() external view override returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Sweeping Tokens from Contract in Solidity\nDESCRIPTION: Transfers the full amount of a token held by the contract to a recipient. Includes an amountMinimum parameter as a security measure to prevent malicious contracts from stealing tokens from users.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sweepToken(address token, uint256 amountMinimum, address recipient) external\n```\n\n----------------------------------------\n\nTITLE: Closing Currency Position in Solidity\nDESCRIPTION: Defines the structure for closing a currency position by either taking or settling, which nets off the debt. If taking, the token is sent to the caller; if settling, the token is transferred from the caller.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/manage-liquidity.mdx#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n{\n  Currency currency; // currency to close \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permit2 Solidity Contract Integration\nDESCRIPTION: Example of approving PositionManager in Solidity contract using Permit2\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/manage-liquidity.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// call permit2.approve(address token, address spender, uint160 amount, uint48 expiration);\n// example infinite approval to clPositionManager\npermit2.approve(tokenAddress, address(clPositionManager), type(uint160).max, type(uint48).max));\n```\n\n----------------------------------------\n\nTITLE: Lottery Number Drawn Event in Solidity\nDESCRIPTION: Event emitted when the final lottery number is drawn. Includes the lottery ID, the final winning number, and the count of winning tickets.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nLotteryNumberDrawn(uint256 indexed lotteryId, uint256 finalNumber, uint256 countWinningTickets);\n```\n\n----------------------------------------\n\nTITLE: Stop Rewards Function\nDESCRIPTION: Allows the owner to stop reward distribution by setting the end block to the current block.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/syrup-pools/smartchefinitializable.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stopReward() external onlyOwner {\n        bonusEndBlock = block.number;\n    }\n```\n\n----------------------------------------\n\nTITLE: Sweeping Token Balance in Solidity\nDESCRIPTION: Defines the structure for transferring any outstanding token balance in the position manager to a specified recipient address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/manage-liquidity.mdx#2025-04-19_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n{\n  Currency currency; // currency to sweep\n  address to; // recipient \n}\n```\n\n----------------------------------------\n\nTITLE: New Random Number Generator Event in Solidity\nDESCRIPTION: Event emitted when a new random number generator contract address is set. Includes the address of the new random generator.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nNewRandomGenerator(address indexed randomGenerator);\n```\n\n----------------------------------------\n\nTITLE: Unwrap WETH9\nDESCRIPTION: Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with minimum amount protection.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unwrapWETH9(uint256 amountMinimum, address recipient) external\n```\n\n----------------------------------------\n\nTITLE: Defining SwapCallbackData Struct in Solidity\nDESCRIPTION: Defines a struct called SwapCallbackData containing path and payer information for swap callbacks.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/smartrouter/v3swaprouter.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct SwapCallbackData {\n  bytes path;\n  address payer;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Pair Creation Status in Rust\nDESCRIPTION: Public function that checks whether a token pair pool has been created. Returns a boolean indicating if the pool exists for the specified token types X and Y.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npublic fun is_pair_created<X, Y>(): bool\n```\n\n----------------------------------------\n\nTITLE: Clearing or Taking Currency Amount in Solidity\nDESCRIPTION: Specifies the structure for either taking the owed amount from a currency or forfeiting it. Users might choose to forfeit if the gas cost of an ERC20 transfer exceeds the amount to be taken.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/manage-liquidity.mdx#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n{\n  Currency currency; // currency to clear or take \n  uint256 amountMax; // forfeit if the amount to take is lesser than this \n}\n```\n\n----------------------------------------\n\nTITLE: Recovering Wrong Tokens (TypeScript)\nDESCRIPTION: This function allows the Owner to recover tokens other than CAKE that were mistakenly sent to the lottery contract. It transfers the specified amount of tokens to the caller's address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/lottery-contract.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n    require(_tokenAddress != address(cakeToken), \"Cannot be CAKE token\");\n\n    IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\n\n    emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Token Transfer\nDESCRIPTION: Internal function to transfer tokens from MasterChef V3 to a specified address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferToken(address _token, address _to) internal\n```\n\n----------------------------------------\n\nTITLE: Internal Reward Calculation in Solidity\nDESCRIPTION: Internal function that calculates rewards for a ticket after a draw based on lottery ID, ticket ID, and matching bracket.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n    function _calculateRewardsForTicketId(\n        uint256 _lotteryId,\n        uint256 _ticketId,\n        uint32 _bracket\n    ) internal view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Position Authorization Modifier\nDESCRIPTION: Modifier that checks if the caller is authorized to interact with a specific position token ID. Used to restrict access to position management functions to the token owner or approved addresses.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier isAuthorizedForToken(uint256 tokenId)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Ticket Prices in Solidity\nDESCRIPTION: Owner function to set the upper and lower limits for ticket prices in CAKE tokens. The minimum price must be lower than the maximum price for this function to execute successfully.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner;\n```\n\n----------------------------------------\n\nTITLE: Defining SmartChefMetadata Structure in Rust for Aptos\nDESCRIPTION: Defines the SmartChefMetadata structure which stores the metadata for the Syrup Pool module including the resource account's signer capability, admin address, pool counter, and event handle for pool creation.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/syrup-pools.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct SmartChefMetadata has key {\n    signer_cap: account::SignerCapability,\n    admin: address,\n    uid: u64,\n    create_pool_event: EventHandle<CreatePoolEvent>\n}\n```\n\n----------------------------------------\n\nTITLE: NonfungiblePositionManager Constructor Implementation\nDESCRIPTION: Initializes the NonfungiblePositionManager contract with dependencies including deployer, factory, WETH9, and token descriptor addresses needed for its operation.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(address _deployer, address _factory, address _WETH9, address _tokenDescriptor_) public\n```\n\n----------------------------------------\n\nTITLE: Initializing Pools in CLPoolManager and BinPoolManager\nDESCRIPTION: This snippet shows the function signatures for initializing pools in CLPoolManager and BinPoolManager. These functions are called to set up a new pool before any swap or liquidity operations can be performed.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/overview/amm-layer-poolmanager.mdx#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// CLPoolManager\nfunction initialize(PoolKey memory key, uint160 sqrtPriceX96);\n\n// BinPoolManager\nfunction initialize(PoolKey memory key, uint24 activeId);\n```\n\n----------------------------------------\n\nTITLE: Recovering Wrong Tokens in Solidity\nDESCRIPTION: Owner function to recover tokens sent to the contract address by mistake. This function cannot be used to withdraw CAKE tokens to prevent abuse.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner;\n```\n\n----------------------------------------\n\nTITLE: Owner Update Function\nDESCRIPTION: Updates the factory owner address. Can only be called by current owner.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setOwner(address _owner) external\n```\n\n----------------------------------------\n\nTITLE: Approving Address for Non-Fungible Position Token in PancakeSwap (Solidity)\nDESCRIPTION: This internal function overrides the _approve function to use the operator in the position, which is packed with the position permit nonce. It takes the address to approve and the tokenId as inputs.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/nonfungiblepositionmanager.md#2025-04-19_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _approve(address to, uint256 tokenId) internal\n```\n\n----------------------------------------\n\nTITLE: Updating Operator, Treasury, and Injector Addresses in PancakeSwap Lottery (TypeScript)\nDESCRIPTION: This function allows the owner to set new addresses for the operator, treasury, and injector roles. It ensures that none of the addresses can be set to zero and emits an event with the new addresses.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/lottery-contract.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setOperatorAndTreasuryAndInjectorAddresses(\n        address _operatorAddress,\n        address _treasuryAddress,\n        address _injectorAddress\n    ) external onlyOwner {\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\n        require(_treasuryAddress != address(0), \"Cannot be zero address\");\n        require(_injectorAddress != address(0), \"Cannot be zero address\");\n\n        operatorAddress = _operatorAddress;\n        treasuryAddress = _treasuryAddress;\n        injectorAddress = _injectorAddress;\n\n        emit NewOperatorAndTreasuryAndInjectorAddresses(_operatorAddress, _treasuryAddress, _injectorAddress);\n    }\n```\n\n----------------------------------------\n\nTITLE: Subgraph Endpoint Links\nDESCRIPTION: Collection of URLs for accessing various PancakeSwap subgraph endpoints across different blockchain networks including BSC, ETH, ARB, Polygon zkEVM, zkSync, Linea, Base, and opBNB.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/apis/subgraph.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nBSC https://nodereal.io/meganode/api-marketplace/pancakeswap-graphql\nETH https://thegraph.com/explorer/subgraphs/9opY17WnEPD4REcC43yHycQthSeUMQE26wyoeMjZTLEx\nARB https://thegraph.com/explorer/subgraphs/EsL7geTRcA3LaLLM9EcMFzYbUgnvf8RixoEEGErrodB3\n```\n\n----------------------------------------\n\nTITLE: Configuring StableSwap Pools for PancakeSwap in JSON\nDESCRIPTION: This JSON snippet defines three StableSwap pools with their respective details including PID, LP symbol, LP address, token pairs, stable swap address, and info stable swap address. It's used to configure the pools for USDT-USDC, USDC-BUSD, and USDT-BUSD pairs on the BSC network.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/stableswap/stableswap-pools.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n {\n    pid: 135,\n    lpSymbol: 'USDT-USDC LP',\n    lpAddress: '0xee1bcc9F1692E81A281b3a302a4b67890BA4be76',\n    token: bscTokens.usdt,\n    quoteToken: bscTokens.usdc,\n    stableSwapAddress: '0x3EFebC418efB585248A0D2140cfb87aFcc2C63DD',\n    infoStableSwapAddress: '0xa680d27f63Fa5E213C502d1B3Ca1EB6a3C1b31D6',\n  },\n  {\n    pid: 134,\n    lpSymbol: 'USDC-BUSD LP',\n    lpAddress: '0x1A77C359D0019cD8F4d36b7CDf5a88043D801072',\n    token: bscTokens.usdc,\n    quoteToken: bscTokens.busd,\n    stableSwapAddress: '0xc2F5B9a3d9138ab2B74d581fC11346219eBf43Fe',\n    infoStableSwapAddress: '0xa680d27f63Fa5E213C502d1B3Ca1EB6a3C1b31D6',\n  },\n  {\n    pid: 133,\n    lpSymbol: 'USDT-BUSD LP',\n    lpAddress: '0x36842F8fb99D55477C0Da638aF5ceb6bBf86aA98',\n    token: bscTokens.usdt,\n    quoteToken: bscTokens.busd,\n    stableSwapAddress: '0x169F653A54ACD441aB34B73dA9946e2C451787EF',\n    infoStableSwapAddress: '0xa680d27f63Fa5E213C502d1B3Ca1EB6a3C1b31D6',\n  }\n```\n\n----------------------------------------\n\nTITLE: Update Start and End Blocks Function\nDESCRIPTION: Enables the owner to update pool start and end blocks before the pool begins. Cannot be modified after pool start.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/syrup-pools/smartchefinitializable.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction updateStartAndEndBlocks(uint256 _startBlock, uint256 _bonusEndBlock) external onlyOwner {\n        require(block.number < startBlock, \"Pool has started\");\n        require(_startBlock < _bonusEndBlock, \"New startBlock must be lower than new endBlock\");\n        require(block.number < _startBlock, \"New startBlock must be higher than current block\");\n\n        startBlock = _startBlock;\n        bonusEndBlock = _bonusEndBlock;\n\n        // Set the lastRewardBlock as the startBlock\n        lastRewardBlock = startBlock;\n\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\n    }\n```\n\n----------------------------------------\n\nTITLE: Closing Lottery Round in Solidity\nDESCRIPTION: Operator function to close an 'Open' Lottery round, changing its state to 'Close'. This function emits the LotteryClose event when executed successfully.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction closeLottery(uint256 _lotteryId) external override onlyOperator;\n```\n\n----------------------------------------\n\nTITLE: Affiliate Program Contract Address Reference\nDESCRIPTION: The deployed Affiliate Program smart contract address on Binance Smart Chain that handles reward claims and distribution. Contract requires CAKE token deposits to function.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/affiliate-program/overview.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0x92C73D90F709DFf7e5E7307e8F2EE20e39396b12\n```\n\n----------------------------------------\n\nTITLE: Setting LM Pool in PancakeSwap V3 Pool\nDESCRIPTION: Function to set the Liquidity Mining pool reference.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setLmPool(contract IPancakeV3LmPool _lmPool) external\n```\n\n----------------------------------------\n\nTITLE: Transfer Ownership Function\nDESCRIPTION: Allows the current owner to transfer contract ownership to a new address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/syrup-pools/smartchefinitializable.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntransferOwnership(_admin);\n```\n\n----------------------------------------\n\nTITLE: Calculating Ticket Rewards in Solidity\nDESCRIPTION: Function that calculates rewards for a ticket after a draw based on lottery ID, ticket ID, and matching bracket.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction viewRewardsForTicketId(\n    uint256 _lotteryId,\n    uint256 _ticketId,\n    uint32 _bracket;\n```\n\n----------------------------------------\n\nTITLE: Implementing VeCakeSwapDiscountHook Permissions\nDESCRIPTION: Implementation of the getHooksRegistrationBitmap function for the VeCakeSwapDiscountHook, setting up the necessary permissions.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/develop-a-hook.mdx#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract VeCakeSwapDiscountHook is CLBaseHook { \n    function getHooksRegistrationBitmap() external pure override returns (uint16) {\n        return _hooksRegistrationBitmapFrom(\n            Permissions({\n                beforeInitialize: false,\n                afterInitialize: false, \n                beforeAddLiquidity: false,\n                afterAddLiquidity: false,\n                beforeRemoveLiquidity: false,\n                afterRemoveLiquidity: false,\n                beforeSwap: true, \n                afterSwap: false,\n                beforeDonate: false,\n                afterDonate: false,\n                beforeSwapReturnsDelta: false,\n                afterSwapReturnsDelta: false,\n                afterAddLiquidityReturnsDelta: false,\n                afterRemoveLiquidityReturnsDelta: false\n            })\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Token Payment\nDESCRIPTION: Internal function to handle token payments.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction pay(address _token, uint256 _amount) internal\n```\n\n----------------------------------------\n\nTITLE: Pool Address Lookup Mapping\nDESCRIPTION: Complex mapping that stores pool addresses based on token pairs and fee amounts. Returns address(0) if pool doesn't exist.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => mapping(address => mapping(uint24 => address))) getPool\n```\n\n----------------------------------------\n\nTITLE: ModifyPositionParams Struct Definition\nDESCRIPTION: Struct containing parameters for modifying liquidity positions in the pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ModifyPositionParams {\n  address owner;\n  int24 tickLower;\n  int24 tickUpper;\n  int128 liquidityDelta;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setLpFee Function for VeCakeSwapDiscountHook\nDESCRIPTION: Implementation of the setLpFee function to update the LP fee for a specific pool in the VeCakeSwapDiscountHook contract.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/develop-a-hook.mdx#2025-04-19_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// mapping to store poolId \nmapping(PoolId => uint24) public poolIdToLpFee;\n\n/// @notice Update the lp fee for a pool\n/// @dev warning: in production, ensure this function is only callable by authorized user\nfunction setLpFee(PoolKey calldata key, uint24 lpFee) external {\n  poolIdToLpFee[key.toId()] = lpFee;\n}\n```\n\n----------------------------------------\n\nTITLE: Safe CAKE Token Transfer in Solidity\nDESCRIPTION: Internal function for safely transferring CAKE tokens to a specified address with a given amount.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _safeTransfer(address _to, uint256 _amount) internal\n```\n\n----------------------------------------\n\nTITLE: Owner Address Storage in PancakeV3Factory\nDESCRIPTION: Storage variable that returns the current owner address of the factory contract. This address can be modified by the current owner using setOwner function.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\naddress owner\n```\n\n----------------------------------------\n\nTITLE: Fee Amount Tick Spacing Extra Info Mapping\nDESCRIPTION: Mapping that stores additional tick spacing information for fee amounts.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(uint24 => struct IPancakeV3Factory.TickSpacingExtraInfo) feeAmountTickSpacingExtraInfo\n```\n\n----------------------------------------\n\nTITLE: Swap Cache Structure Definition\nDESCRIPTION: Struct definition for caching swap-related data including protocol fee, liquidity, and timing information.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nstruct SwapCache {\n  uint32 feeProtocol;\n  uint128 liquidityStart;\n  uint32 blockTimestamp;\n  int56 tickCumulative;\n  uint160 secondsPerLiquidityCumulativeX128;\n  bool computedLatestObservation;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests with Forge\nDESCRIPTION: Commands to install dependencies and run tests for the Infinity Hooks template using Forge.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/develop-a-hook.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> forge install // install dependencies\n> forge test // run the existing tests in the repository\n```\n\n----------------------------------------\n\nTITLE: Safe ETH Transfer in Solidity\nDESCRIPTION: Internal function to transfer ETH in a safe way to a specified address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction safeTransferETH(address to, uint256 value) internal\n```\n\n----------------------------------------\n\nTITLE: Core Contract Addresses for PancakeSwap v3\nDESCRIPTION: Markdown table displaying the addresses for PancakeV3Factory and PancakeV3PoolDeployer contracts across various blockchain networks.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/addresses.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Contract              | BSC, ETH, zkEVM, ARB, Linea, GOR, Base, opBNB, BSC TESTNET / MAINNET | zkSync                                     |\n| --------------------- | -------------------------------------------------------------------- | ------------------------------------------ |\n| PancakeV3Factory      | 0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865                           | 0x1BB72E0CbbEA93c08f535fc7856E0338D7F7a8aB |\n| PancakeV3PoolDeployer | 0x41ff9AA7e16B8B1a8a8dc4f0eFacd93D02d071c9                           | 0x7f71382044A6a62595D5D357fE75CA8199123aD6 |\n```\n\n----------------------------------------\n\nTITLE: ProtocolFees Struct Definition\nDESCRIPTION: Struct defining protocol fee accounting for both tokens in the pool.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3pool.md#2025-04-19_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ProtocolFees {\n  uint128 token0;\n  uint128 token1;\n}\n```\n\n----------------------------------------\n\nTITLE: Emergency Reward Withdrawal Function\nDESCRIPTION: Allows the contract owner to withdraw reward tokens from the pool in emergency situations.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/syrup-pools/smartchefinitializable.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\n        rewardToken.safeTransfer(address(msg.sender), _amount);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Phantom Types for Unsigned Integers in Rust for PancakeSwap\nDESCRIPTION: This code snippet defines phantom types for unsigned integers from U0 to U255. These are used as type markers in the PancakeSwap ecosystem to provide type safety and prevent mixing of different uint types.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/utils.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct U0 {}\n\nstruct U1 {}\n\nstruct U2 {}\n...\n```\n\n----------------------------------------\n\nTITLE: Wrong Token Recovery Function\nDESCRIPTION: Enables the owner to recover tokens mistakenly sent to the contract, excluding staked and reward tokens.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/syrup-pools/smartchefinitializable.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n        require(_tokenAddress != address(stakedToken), \"Cannot be staked token\");\n        require(_tokenAddress != address(rewardToken), \"Cannot be reward token\");\n\n        IBEP20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\n\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount)\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in Markdown\nDESCRIPTION: Import statement for the Callout component from vocs/components library used in the documentation.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/pcsx/addresses.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from 'vocs/components'\n```\n\n----------------------------------------\n\nTITLE: Update Reward Per Block Function\nDESCRIPTION: Allows the owner to update the reward per block before the pool starts. Cannot be modified after pool start.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/syrup-pools/smartchefinitializable.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\n        require(block.number < startBlock, \"Pool has started\");\n        rewardPerBlock = _rewardPerBlock;\n        emit NewRewardPerBlock(_rewardPerBlock);\n    }\n```\n\n----------------------------------------\n\nTITLE: ETH Receive Function in Solidity\nDESCRIPTION: Fallback function to receive ETH payments directly to the contract.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nreceive() external payable\n```\n\n----------------------------------------\n\nTITLE: Update Pool User Limit Function\nDESCRIPTION: Enables the owner to modify pool staking limits per user. The limit can only be increased, not decreased.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/syrup-pools/smartchefinitializable.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction updatePoolLimitPerUser(bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {\n        require(hasUserLimit, \"Must be set\");\n        if (_hasUserLimit) {\n            require(_poolLimitPerUser > poolLimitPerUser, \"New limit must be higher\");\n            poolLimitPerUser = _poolLimitPerUser;\n        } else {\n            hasUserLimit = _hasUserLimit;\n            poolLimitPerUser = 0;\n        }\n        emit NewPoolLimit(poolLimitPerUser);\n    }\n```\n\n----------------------------------------\n\nTITLE: Internal Token Refund\nDESCRIPTION: Internal function to handle token refunds.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/masterchef/masterchef-v3.md#2025-04-19_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction refund(address _token, uint256 _amount) internal\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required project dependencies using Bun package manager.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Mainnet Universal Router Addresses Table\nDESCRIPTION: Smart contract addresses for PancakeSwap Universal Router deployed on various mainnet blockchain networks including BSC, ETH, Arbitrum, Base, Linea, opBNB, zkEVM, and zkSync.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/universal-router/addresses.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Chain    | Address                                    |\n| -------- | ------------------------------------------ |\n| BSC      | 0x1A0A18AC4BECDDbd6389559687d1A73d8927E416 |\n| ETH      | 0x65b382653f7C31bC0Af67f188122035461ec9C76 |\n| Arbitrum | 0xFE6508f0015C778Bdcc1fB5465bA5ebE224C9912 |\n| Base     | 0xFE6508f0015C778Bdcc1fB5465bA5ebE224C9912 |\n| Linea    | 0xFE6508f0015C778Bdcc1fB5465bA5ebE224C9912 |\n| opBNB    | 0xB89a6778D1efE7a5b7096757A21b810CC2886fa1 |\n| zkEVM    | 0xB89a6778D1efE7a5b7096757A21b810CC2886fa1 |\n| zkSync   | 0xdAee41E335322C85ff2c5a6745c98e1351806e98 |\n```\n\n----------------------------------------\n\nTITLE: MasterchefV3 Addresses for PancakeSwap v3\nDESCRIPTION: Markdown tables displaying the MasterchefV3 contract addresses for both mainnet and testnet environments across various blockchain networks.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/addresses.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n**Mainnet**\n\n| Chain | Address\n| ------------------------------------------ | ------------------------------------------ |\n| BSC, ETH | 0x556B9306565093C855AEA9AE92A594704c2Cd59e | \n| zkEVM | 0xe9c7f3196ab8c09f6616365e8873daeb207c0391 | \n| Arbitrum | 0x5e09ACf80C0296740eC5d6F643005a4ef8DaA694 | \n| zkSync | 0x4c615E78c5fCA1Ad31e4d66eb0D8688d84307463 | \n| Linea | 0x22E2f236065B780FA33EC8C4E58b99ebc8B55c57 | \n| Base | 0xC6A2Db661D5a5690172d8eB0a7DEA2d3008665A3 |\n\n**Testnet**\n\n| Chain | Address\n| ------------------------------------------ | ------------------------------------------ |\n| GOR, BSC testnet | 0x4c650FB471fe4e0f476fD3437C3411B1122c4e3B | \n| zkEVM | 0xb66b07590B30d4E6E22e45Ddc83B06Bb018A7B44 | \n| Arbitrum | 0x66A9870FF7707936B0B0278cF999C5f2Ac2e42F5 | \n| zkSync | 0x3c6Aa61f72932aD5D7C917737367be32D5509e6f | \n| Linea | 0xb66b07590B30d4E6E22e45Ddc83B06Bb018A7B44 | \n| Base | 0xAd3fe5Aeabf79B8291F877B367139466c221216e |\n```\n\n----------------------------------------\n\nTITLE: Testnet Universal Router Addresses Table\nDESCRIPTION: Smart contract addresses for PancakeSwap Universal Router deployed on various testnet blockchain networks including BSC testnet, Sepolia, Goerli, Arbitrum testnets, Base testnets, Linea, opBNB, zkEVM, Scroll Sepolia, and zkSync.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/universal-router/addresses.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Chain            | Address                                    |\n| ---------------- | ------------------------------------------ |\n| BSC testnet      | 0x9A082015c919AD0E47861e5Db9A1c7070E81A2C7 |\n| Sepolia          | 0x55D32fa7Da7290838347bc97cb7fAD4992672255 |\n| Goerli           | 0xC46abF8B66Df4B9Eb0cC0cf6eba24226AC6E6285 |\n| Arbitrum Sepolia | 0xFE6508f0015C778Bdcc1fB5465bA5ebE224C9912 |\n| Arbitrum Goerli  | 0xa8EEA7aa6620712524d18D742821848e55E773B5 |\n| Base Sepolia     | 0xFE6508f0015C778Bdcc1fB5465bA5ebE224C9912 |\n| Base testnet     | 0xa8EEA7aa6620712524d18D742821848e55E773B5 |\n| Linea            | 0x9f3Cb8251492a069dBF0634C24e9De305d6946B8 |\n| opBNB            | 0xa8EEA7aa6620712524d18D742821848e55E773B5 |\n| zkEVM            | 0xa8EEA7aa6620712524d18D742821848e55E773B5 |\n| Scroll Sepolia   | 0xB89a6778D1efE7a5b7096757A21b810CC2886fa1 |\n| zkSync           | 0xCa97D1FAFCEa54EFc68d66eA914AB2F8Fbfe93c5 |\n```\n\n----------------------------------------\n\nTITLE: Admin Token Recovery Event in Solidity\nDESCRIPTION: Event emitted when the admin recovers incorrect tokens from the lottery contract address. Includes the token address and amount recovered.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/lottery-v2/index.md#2025-04-19_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nAdminTokenRecovery(address token, uint256 amount);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Smart Router Contract Address on Binance Smart Chain\nDESCRIPTION: The contract address for PancakeSwap's Smart Router on Binance Smart Chain, which handles routing trades through the most efficient paths.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/stableswap/overview.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0x13f4EA83D0bd40E75C8222255bc855a974568Dd4\n```\n\n----------------------------------------\n\nTITLE: MixedRouteQuoterV1 and TokenValidator Addresses for PancakeSwap v3\nDESCRIPTION: Markdown table displaying the addresses for MixedRouteQuoterV1 and TokenValidator contracts across various blockchain networks.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/addresses.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Contract           | BSC, ETH, Linea                            | zkEVM, Linea, Base, opBNB                  | Arbitrum                                   | zkSync                                     | GOR, BSC TESTNET                           |\n| ------------------ | ------------------------------------------ | ------------------------------------------ | ------------------------------------------ | ------------------------------------------ | ------------------------------------------ |\n| MixedRouteQuoterV1 | 0x678Aa4bF4E210cf2166753e054d5b7c31cc7fa86 | 0x4c650FB471fe4e0f476fD3437C3411B1122c4e3B | 0x3652Fc6EDcbD76161b8554388867d3dAb65eCA93 | 0x9B1edFB3848660402E4f1DC25733764e80aA627A | 0xB048Bbc1Ee6b733FFfCFb9e9CeF7375518e25997 |\n| TokenValidator     | 0x864ED564875BdDD6F421e226494a0E7c071C06f8 | 0x556B9306565093C855AEA9AE92A594704c2Cd59e | 0x8be9EA9C6015985AB2F5A216093305A9AaEb8164 | 0x08529A4be615746ef31CdbeD46Ce556406787E2F | 0x678Aa4bF4E210cf2166753e054d5b7c31cc7fa86 |\n```\n\n----------------------------------------\n\nTITLE: Smart Router Addresses for PancakeSwap v3\nDESCRIPTION: Markdown tables showing the Smart Router addresses for both mainnet and testnet environments across various blockchain networks. The Smart Router can route to v3, v2, and stable pools.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/addresses.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Chain | Address\n| ------------------------------------------ | ------------------------------------------ |\n| BSC, ETH | 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4 | \n| zkEVM, Linea, Base, opBNB | 0x678Aa4bF4E210cf2166753e054d5b7c31cc7fa86 | \n| Arbitrum | 0x32226588378236Fd0c7c4053999F88aC0e5cAc77 | \n| zkSync | 0xf8b59f3c3Ab33200ec80a8A58b2aA5F5D2a8944C | \n\n**Testnet**\n\n| Chain | Address\n| ------------------------------------------ | ------------------------------------------ |\n| GOR, BSC testnet | 0x9a489505a00cE272eAa5e07Dba6491314CaE3796 | \n```\n\n----------------------------------------\n\nTITLE: Implementing PancakeSwap Developer Documentation Landing Page with JSX\nDESCRIPTION: This code implements the landing page for PancakeSwap Developer Documentation. It includes a welcome section with introduction and call-to-action button, followed by a latest updates section highlighting PancakeSwap Infinity and the new Router address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<main className=\"w-full\">\n  <section className=\"w-full py-12 md:py-24 lg:py-32 border-b\">\n    <div className=\"container px-4 md:px-6 text-center\">\n      <div className=\"space-y-3\">\n        <h1 className=\"text-3xl font-bold tracking-tighter sm:text-5xl\">\n          Welcome to PancakeSwap Developer Docs\n        </h1>\n        <p>\n          Your DEX Your Innovation\n        </p>\n      </div>\n\n        <Button href=\"/contracts/infinity/overview\" className=\"m-auto mt-4\" variant=\"accent\">Get started</Button>\n    </div>\n  </section>\n  <section className=\"w-full py-12 md:py-24 lg:py-32\">\n    <div className=\"container grid gap-6 px-4 md:px-6 lg:grid-cols-[1fr_400px] lg:gap-12\">\n      <div className=\"space-y-2\">\n        <h2 className=\"text-xl font-bold tracking-tighter sm:text-3xl\">Latest Updates</h2>\n        <div className=\"max-w-[600px] text-gray-500 md:text-l/relaxed lg:text-base/relaxed l:text-l/relaxed dark:text-gray-400\">\n          Stay informed about the latest features, improvements, and changes to our platform.\n        </div>\n      </div>\n      <div className=\"grid gap-4 sm:gap-6\">\n      <a href=\"/contracts/infinity/overview\">\n        <Card>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h3 className=\"text-xl font-bold\">Introducing PancakeSwap Infinity</h3>\n              <div className=\"text-gray-500 dark:text-gray-400\">\n                We've announced the next version of our exchange with improved gas efficiency and new features.\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        </a>\n        <a href=\"/contracts/universal-router/addresses\">\n          <Card>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <h3 className=\"text-xl font-bold\">New Router address</h3>\n                <div className=\"text-gray-500 dark:text-gray-400\">\n                  PancakeSwap latest deployed Universal Router and Permit2\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </a>\n      </div>\n    </div>\n  </section>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation\nDESCRIPTION: Constructor function that initializes the contract with a pool deployer address.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v3/pancakev3factory.md#2025-04-19_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(address _poolDeployer) public\n```\n\n----------------------------------------\n\nTITLE: Querying Token Balances in Rust\nDESCRIPTION: Public function that returns the actual token balances in the pool. This may differ from reserves due to protocol fee collection mechanics or other operations.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/v2/swap-core-v2.md#2025-04-19_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npublic fun token_balances<X, Y>(): (u64, u64)\n```\n\n----------------------------------------\n\nTITLE: NFT Market Contract Address Reference\nDESCRIPTION: Contract address for PancakeSwap NFT Market v1 deployed on Binance Smart Chain\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/nft-market.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NFT Market\n\n- [PancakeSwap: NFT Market v1](https://bscscan.com/address/0x17539cca21c7933df5c980172d22659b8c345c5a)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pool Length Function in Rust for Aptos\nDESCRIPTION: Utility function that returns the total number of pools available in the MasterChef contract.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/masterchef.mdx#2025-04-19_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npublic fun pool_length():u64\n```\n\n----------------------------------------\n\nTITLE: Importing PancakeSwap Router Interface in Solidity\nDESCRIPTION: Import statement for including the PancakeSwap router interface in a Solidity contract.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/v2/router-v2.md#2025-04-19_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nimport '@uniswap/v2-core/contracts/interfaces/IPancakeRouter.sol';\n```\n\n----------------------------------------\n\nTITLE: Implementing afterRemoveLiquidity Hook Function in Solidity\nDESCRIPTION: This code snippet shows the implementation of the afterRemoveLiquidity function that calculates a 10% fee on withdrawn liquidity amounts. It uses the BalanceDelta parameter to determine how much tokens the user is receiving from the removal operation.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/hook-examples/taking-fee-via-hook.mdx#2025-04-19_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n/// @param delta The caller's balance delta after removing liquidity; the sum of principal delta, fees accrued, and hook delta\nfunction afterRemoveLiquidity\n    (address sender,\n    PoolKey calldata key,\n    ICLPoolManager.ModifyLiquidityParams calldata params,\n    BalanceDelta delta,\n    BalanceDelta feesAccrued,\n    bytes calldata hookData\n) external override poolManagerOnly returns (bytes4, BalanceDelta) {\n\n    // calculate how much fee\n    uint128 amt0Fee = uint128(delta.amount0()) / 10;\n    uint128 amt1Fee = uint128(delta.amount1()) / 10;\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in Markdown\nDESCRIPTION: Imports the Callout component from the vocs components library for use in documentation.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/resources/github.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from 'vocs/components'\n```\n\n----------------------------------------\n\nTITLE: Complete LiquidityRemovalFeeHook Implementation in Solidity\nDESCRIPTION: The full implementation of the LiquidityRemovalFeeHook contract that takes a 10% fee when users remove liquidity. The hook uses the afterRemoveLiquidityReturnsDelta permission to modify the balance delta returned to the user.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts/infinity/guides/hook-examples/taking-fee-via-hook.mdx#2025-04-19_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// [!include ~/snippets/LiquidityRemovalFeeHook.sol]\n```\n\n----------------------------------------\n\nTITLE: Rendering Audit Link in HTML/JSX\nDESCRIPTION: HTML/JSX code for displaying a link to the PancakeSwap Aptos IFO security audit document with custom styling classes.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/docs/pages/contracts-aptos/ifo.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a className=\"vocs_Anchor vocs_Link vocs_Link_accent_underlined\" href=\"/Pancakeswap_aptos_ifo_audit.pdf\" target=\"_blank\">\nOtterSec's PancakeSwap Aptos IFO security audit\n</a>\n```\n\n----------------------------------------\n\nTITLE: Installing Bun.js Runtime\nDESCRIPTION: Command to install Bun.js runtime environment using curl. This is a prerequisite before setting up the project.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://bun.sh/install | bash\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Command to start the local development server using Bun.\nSOURCE: https://github.com/pancakeswap/pancake-developer/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n```"
  }
]