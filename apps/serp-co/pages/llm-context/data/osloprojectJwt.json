[
  {
    "owner": "oslo-project",
    "repo": "jwt",
    "content": "TITLE: Verifying JWT Tokens with @oslojs/jwt in TypeScript\nDESCRIPTION: This code snippet demonstrates how to verify a JWT token by parsing its components, checking the algorithm, validating the signature, and verifying expiration and activation time claims. It uses the @oslojs/jwt library and the Web Crypto API.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/guides/verify-tokens.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseJWT, JWSRegisteredHeaders, JWTRegisteredClaims } from \"@oslojs/jwt\";\n\nconst [header, payload, signature, signatureMessage] = parseJWT(jwt);\nconst headerParameters = new JWSRegisteredHeaders(header);\nif (headerParameters.algorithm() !== joseAlgorithmHS256) {\n\tthrow new Error(\"Unsupported algorithm\");\n}\nconst validSignature = await crypto.subtle.verify(\"HMAC\", key, signature, signatureMessage);\nif (!validSignature) {\n\tthrow new Error(\"Invalid signature\");\n}\nconst claims = new JWTRegisteredClaims(payload);\nif (claims.hasExpiration() && !claims.verifyExpiration()) {\n\tthrow new Error(\"Expired token\");\n}\nif (claims.hasNotBefore() && !claims.verifyNotBefore()) {\n\tthrow new Error(\"Invalid token\");\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding JWT Tokens with @oslojs/jwt in TypeScript\nDESCRIPTION: This code demonstrates how to encode a JWT token by creating header and payload objects, generating a signature using the Web Crypto API, and combining them into a complete JWT token. The example includes setting the algorithm to HS256, adding an expiration time, and including user information in the payload.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/guides/create-tokens.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { joseAlgorithmHS256, createJWTSignatureMessage, encodeJWT } from \"@oslojs/jwt\";\n\nconst headerJSON = JSON.stringify({\n\talg: joseAlgorithmHS256,\n\ttyp: \"JWT\"\n});\nconst payloadJSON = JSON.stringify({\n\texp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 30,\n\tname: \"John Doe\"\n});\nconst signatureBuffer = await crypto.subtle.sign(\"HMAC\", key, createJWTSignatureMessage(headerJSON, payloadJSON));\nconst jwt = encodeJWT(headerJSON, payloadJSON, new Uint8Array(signatureBuffer));\n```\n\n----------------------------------------\n\nTITLE: Defining verifyExpiration Method for JWT Expiration Check in TypeScript\nDESCRIPTION: This code snippet defines the verifyExpiration() method for the JWTRegisteredClaims class. It returns a boolean indicating whether the current time is before the expiration time. The method throws an Error if the 'exp' claim is missing or invalid.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/verifyExpiration.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction verifyExpiration(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Parsing and Validating JWT Tokens with @oslojs/jwt in TypeScript\nDESCRIPTION: Demonstrates how to parse a JWT token, verify its algorithm type, and validate its expiration and not-before claims. The example shows the complete validation flow including error handling for unsupported algorithms and expired tokens.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseJWT, JWSRegisteredHeaders, JWTRegisteredClaims, joseAlgorithmHS256 } from \"@oslojs/jwt\";\n\nconst [header, payload, signature] = parseJWT(jwt);\nconst headerParameters = new JWSRegisteredHeaders(header);\nif (headerParameters.algorithm() !== joseAlgorithmHS256) {\n\tthrow new Error(\"Unsupported algorithm\");\n}\nconst claims = new JWTRegisteredClaims(payload);\nif (!claims.verifyExpiration()) {\n\tthrow new Error(\"Expired token\");\n}\nif (claims.hasNotBefore() && !claims.verifyNotBefore()) {\n\tthrow new Error(\"Invalid token\");\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Validating JWT Tokens with Oslo JWT Library in TypeScript\nDESCRIPTION: Demonstrates how to parse a JWT token, validate its algorithm, and verify expiration and notBefore claims. This example shows the core functionality of the Oslo JWT library including header extraction, algorithm verification, and claims validation.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseJWT, JWSRegisteredHeaders, JWTRegisteredClaims, joseAlgorithmHS256 } from \"@oslojs/jwt\";\n\nconst [header, payload, signature] = parseJWT(jwt);\nconst headerParameters = new JWSRegisteredHeaders(header);\nif (headerParameters.algorithm() !== joseAlgorithmHS256) {\n\tthrow new Error(\"Unsupported algorithm\");\n}\nconst claims = new JWTRegisteredClaims(payload);\nif (!claims.verifyExpiration()) {\n\tthrow new Error(\"Expired token\");\n}\nif (claims.hasNotBefore() && !claims.verifyNotBefore()) {\n\tthrow new Error(\"Invalid token\");\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Web Tokens in TypeScript\nDESCRIPTION: Function signature for parseJWT() which takes a JWT string and returns a tuple containing the decoded header object, payload object, and signature as a Uint8Array. This function throws an Error for malformed tokens but does not verify signatures or validate claims.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/parseJWT.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parseJWT(jwt: string): [header: object, payload: header, signature: Uint8Array];\n```\n\n----------------------------------------\n\nTITLE: Encoding JWT with Header, Payload, and Signature in TypeScript\nDESCRIPTION: This function encodes a JSON Web Token (JWT) by combining a header object, payload object, and signature. It takes these three components as input and returns the encoded JWT as a string. The header and payload should be JavaScript objects, while the signature should be a Uint8Array.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/encodeJWT.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeJWT(header: object, payload: object, signature: Uint8Array): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Expiration Claim as Date Object in TypeScript\nDESCRIPTION: A TypeScript method definition for JWTRegisteredClaims.expiration() that returns the 'exp' claim from a JWT token as a JavaScript Date object. The method throws an Error if the parameter doesn't exist or isn't a positive integer.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/expiration.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction expiration(): Date;\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT Payload in TypeScript\nDESCRIPTION: Function declaration for decoding a JWT token string into its payload object. This function only parses the token payload without validating the signature or verifying claims like expiration.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/decodeJWT.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeJWT(jwt: string): object;\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT Not Before Claim in TypeScript\nDESCRIPTION: Function that checks if the current time is at or after the JWT's not-before (nbf) claim. Returns true if valid, throws an Error if the nbf claim is missing or invalid.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/verifyNotBefore.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction verifyNotBefore(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Algorithm Parameter from JWSRegisteredHeaders in TypeScript\nDESCRIPTION: A TypeScript function definition for the algorithm() method of the JWSRegisteredHeaders class. This method returns the 'alg' parameter value as a string and throws an Error if the parameter doesn't exist or isn't a string.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/algorithm.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction algorithm(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining audiences() Method for JWT Registered Claims in TypeScript\nDESCRIPTION: This snippet defines the audiences() method for the JWTRegisteredClaims class. It returns an array of strings representing the 'aud' (audience) claim from a JWT. The method throws an Error if the 'aud' parameter doesn't exist or is not an array of strings. It can return an empty array if the claim is present but has no values.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/audiences.md#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction audiences(): string[];\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Issuer Claim in TypeScript\nDESCRIPTION: Method that returns the 'iss' (issuer) claim from a JWT token. It throws an Error if the parameter doesn't exist or if the value isn't a string.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/issuer.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction issuer(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining JWTRegisteredClaims.notBefore() Method in TypeScript\nDESCRIPTION: This snippet defines the notBefore() method in the JWTRegisteredClaims class. It returns the 'nbf' (not before) claim as a Date object. The method throws an Error if the 'nbf' claim doesn't exist or is not a positive integer.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/notBefore.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction notBefore(): Date;\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Issued At Time as Date Object in TypeScript\nDESCRIPTION: A TypeScript function declaration for extracting the 'iat' (issued at) claim from a JWT token and converting it to a JavaScript Date object. The function throws an Error if the 'iat' claim is missing or not a positive integer.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/issuedAt.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction issuedAt(): Date;\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Subject Claim in TypeScript\nDESCRIPTION: This function retrieves the 'sub' (subject) claim from a JWT. It returns the value as a string and throws an Error if the claim doesn't exist or is not a string.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/subject.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction subject(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining keyId() Method for JWSRegisteredHeaders in TypeScript\nDESCRIPTION: This code snippet defines the keyId() method for the JWSRegisteredHeaders class. The method returns a string representing the 'kid' (Key ID) parameter value from the JWS header. It throws an Error if the parameter doesn't exist or if the value is not a string.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/keyId.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction keyId(): string;\n```\n\n----------------------------------------\n\nTITLE: Checking Subject Claim Existence in TypeScript JWT\nDESCRIPTION: Method that checks if the 'sub' (subject) claim exists in the JWT token. Returns a boolean indicating presence of the subject claim, without validating the actual value of the claim.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/hasSubject.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasSubject(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Type Parameter Definition in TypeScript\nDESCRIPTION: Function signature for the type() method in the JWSRegisteredHeaders class. This method returns the 'typ' parameter value as a string and throws an Error if the parameter doesn't exist or isn't a string type.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/type.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction type(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining jwtId() Method for JWT Registered Claims in TypeScript\nDESCRIPTION: This code snippet defines the jwtId() method for the JWTRegisteredClaims class. The method returns the 'jti' (JWT ID) claim as a string. It throws an Error if the claim doesn't exist or is not a string.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/jwtId.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction jwtId(): string;\n```\n\n----------------------------------------\n\nTITLE: Accessing JWK Parameter - TypeScript Definition\nDESCRIPTION: Type definition for the jwk() method that returns the JSON Web Key parameter value from JWS headers. The method returns a string and throws an Error if the parameter is missing or invalid.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/jwk.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction jwk(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining JWSRegisteredHeaders.critical() Method in TypeScript\nDESCRIPTION: This snippet defines the critical() method for JWSRegisteredHeaders. It returns the 'crit' parameter value as an array of strings. The method throws an Error if the parameter doesn't exist, isn't an array of strings, or is an empty array.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/critical.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction critical(): string[];\n```\n\n----------------------------------------\n\nTITLE: Retrieving x5t Certificate Thumbprint in TypeScript\nDESCRIPTION: Method signature for retrieving the x509 Certificate SHA1 Thumbprint (x5t parameter) from JWS headers as a byte array. Throws an Error if the parameter doesn't exist or the value isn't properly base64url encoded.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/x509CertificateSHA1Thumbprint.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction x509CertificateSHA1Thumbprint(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Retrieving x509 Certificate SHA256 Thumbprint in TypeScript JWT Library\nDESCRIPTION: This method returns the x5t#S256 parameter value as a Uint8Array. It throws an Error if the parameter doesn't exist or if the value isn't a base64url encoded string. The method is part of the JWSRegisteredHeaders class.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/x509CertificateSHA256Thumbprint.md#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction x509CertificateSHA256Thumbprint(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Initializing JWTRegisteredClaims with JWT Payload in TypeScript\nDESCRIPTION: Constructor function for the JWTRegisteredClaims class that initializes the object with a JSON-decoded JWT payload. This provides the foundation for accessing and verifying registered JWT claims.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(payload: object): this;\n```\n\n----------------------------------------\n\nTITLE: Retrieving x509 Certificate Chain in TypeScript\nDESCRIPTION: This method returns the x5c parameter value as an array of Uint8Array. It throws an Error if the parameter doesn't exist, the value isn't an array of base64 encoded strings, or the value is an empty array.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/x509CertificateChain.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction x509CertificateChain(): Uint8Array[];\n```\n\n----------------------------------------\n\nTITLE: Initializing JWSRegisteredHeaders in TypeScript\nDESCRIPTION: Constructor for the JWSRegisteredHeaders class. It takes a JSON-decoded JWS header object as a parameter and initializes the instance.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(header: object): this;\n```\n\n----------------------------------------\n\nTITLE: Defining JOSE Algorithm ID Constant for HS256 in TypeScript\nDESCRIPTION: This snippet defines a constant 'joseAlgorithmHS256' with the value 'HS256'. This represents the JOSE algorithm ID for HMAC using SHA-256, which is registered with IANA for use in JSON Web Signatures and Encryption.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/joseAlgorithmHS256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst joseAlgorithmHS256 = \"HS256\";\n```\n\n----------------------------------------\n\nTITLE: Defining RS256 Algorithm Identifier Constant in TypeScript\nDESCRIPTION: Defines a constant for the JOSE algorithm identifier 'RS256', which represents the RSA Signature with SHA-256 algorithm used in JWT implementations. This identifier is officially registered with IANA.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/joseAlgorithmRS256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst joseAlgorithmRS256 = \"RS256\";\n```\n\n----------------------------------------\n\nTITLE: Defining ES256 JOSE Algorithm Constant in TypeScript\nDESCRIPTION: Declares a constant holding the standardized JOSE algorithm identifier 'ES256' which represents the ECDSA with SHA-256 digital signature algorithm registered with IANA.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/joseAlgorithmES256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst joseAlgorithmES256 = \"ES256\";\n```\n\n----------------------------------------\n\nTITLE: Defining the hasExpiration() Method in TypeScript\nDESCRIPTION: Function signature for the hasExpiration() method which checks if the JWT token has an expiration (exp) claim. Returns a boolean value without validating the content of the claim.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/hasExpiration.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasExpiration(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Retrieving x509 URL from JWS Headers in TypeScript\nDESCRIPTION: The x509URL() method of the JWSRegisteredHeaders class returns the 'x5u' parameter value. It throws an Error if the parameter doesn't exist or if the value isn't a string. Note that this method does not validate whether the returned value is a well-formed URI.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/x509URL.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction x509URL(): string;\n```\n\n----------------------------------------\n\nTITLE: Checking JWT Not Before Claim Existence in TypeScript\nDESCRIPTION: This method checks whether the JWT contains an 'nbf' (not before) claim. It returns a boolean value indicating the claim's presence without validating the actual value of the claim.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/hasNotBefore.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasNotBefore(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking JWT Issuer Claim Existence in TypeScript\nDESCRIPTION: A method that checks whether the 'iss' (issuer) claim exists in the JWT token. The method returns a boolean value and only verifies the presence of the claim without validating its content.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/hasIssuer.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasIssuer(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking JWT Issued At Claim Existence in TypeScript\nDESCRIPTION: Defines a method to check if the 'iat' (issued at) claim exists in a JWT. This method returns true if the claim is present, regardless of its value's validity.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/hasIssuedAt.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasIssuedAt(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking JWT ID Existence in TypeScript\nDESCRIPTION: Method that checks whether a JWT contains a JWT ID (jti) claim. The method returns true if the jti parameter exists in the JWT without validating the actual value of the claim.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/hasJWTId.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasJWTId(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking for Audiences in JWT Claims with TypeScript\nDESCRIPTION: A TypeScript function that checks whether the 'aud' (audience) claim exists in a JWT. Returns a boolean value indicating presence of the claim, without validating the actual value.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWTRegisteredClaims/hasAudiences.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasAudiences(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking for Algorithm Parameter in JWS Headers in TypeScript\nDESCRIPTION: A method that returns a boolean indicating whether the 'alg' parameter exists in the JWS headers. This method only checks for existence and does not validate the parameter value.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasAlgorithm.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasAlgorithm(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking for Key ID in JWT Headers with TypeScript\nDESCRIPTION: This method checks if the 'kid' (Key ID) parameter exists in the JWS headers. It returns a boolean value and does not validate the parameter value itself, only its presence.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasKeyId.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasKeyId(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking JWS Type Parameter Existence in TypeScript\nDESCRIPTION: A method that checks if the 'typ' parameter exists in the JWS registered headers. This method returns a boolean indicating the presence of the parameter but does not validate the parameter value.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasType.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasType(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking for Critical Header Parameter in JWS Implementation\nDESCRIPTION: A TypeScript method that checks if the 'crit' (critical) parameter exists in JWS (JSON Web Signature) headers. This method only verifies the parameter's existence without validating its value.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasCritical.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasCritical(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking for JWK Parameter Existence in TypeScript\nDESCRIPTION: Method definition for hasJWK() that returns a boolean indicating whether the jwk parameter exists in the JWS registered headers. The method does not validate the parameter's content.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasJWK.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasJWK(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking JWK Set URL Existence in JWS Headers in TypeScript\nDESCRIPTION: A method that checks whether the 'jku' (JWK Set URL) parameter exists in the JWS registered headers. It returns a boolean value and does not validate the actual content of the parameter.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasJWKSetURL.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasJWKSetURL(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking X509 URL Header Presence in TypeScript\nDESCRIPTION: TypeScript method definition that checks for the existence of an x5u parameter in JWS registered headers. Returns a boolean indicating whether the X509 URL parameter is present, without validating the parameter value.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasX509URL.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasType(): hasX509URL;\n```\n\n----------------------------------------\n\nTITLE: Checking for X509 Certificate Chain in JWS Headers using TypeScript\nDESCRIPTION: The hasX509CertificateChain() function checks if the x5c parameter exists in the JWS registered headers. It only verifies the presence of the parameter without validating its content.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasX509CertificateChain.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasType(): hasX509CertificateChain;\n```\n\n----------------------------------------\n\nTITLE: Checking for x5t Parameter in JWS Headers with TypeScript\nDESCRIPTION: A method definition for hasX509CertificateSHA1Thumbprint() that returns a boolean indicating whether the x5t parameter exists in the JWS registered headers. This method only checks for existence and does not validate the parameter value.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasX509CertificateSHA1Thumbprint.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasType(): hasX509CertificateSHA1Thumbprint;\n```\n\n----------------------------------------\n\nTITLE: Checking X509 Certificate SHA256 Thumbprint Existence in TypeScript\nDESCRIPTION: This method checks if the 'x5t#S256' parameter exists in the JWS headers. It returns true if the parameter is present, without validating the parameter's value. The method is part of the JWSRegisteredHeaders class.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/hasX509CertificateSHA256Thumbprint.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasType(): hasX509CertificateSHA256Thumbprint;\n```\n\n----------------------------------------\n\nTITLE: Module Import Reference - JavaScript JWT\nDESCRIPTION: Reference for importing the @oslojs/jwt module package\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/index.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@oslojs/jwt`\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/jwt Package via npm\nDESCRIPTION: Shows how to install the @oslojs/jwt package using npm. This command adds the library to your project dependencies.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/index.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/jwt\n```\n\n----------------------------------------\n\nTITLE: Installing Oslo JWT Library via NPM\nDESCRIPTION: Shows the simple npm installation command for adding the @oslojs/jwt package to your project. This single-line command installs the library as a dependency.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @oslojs/jwt\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWK Set URL from JWS Header in TypeScript\nDESCRIPTION: Function definition for jwkSetURL() method which returns the 'jku' parameter value from JWS headers. The method throws an Error if the parameter is missing or not a string, but does not validate if the value is a well-formed URI.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/docs/pages/reference/main/JWSRegisteredHeaders/jwtSetURL.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction jwkSetURL(): string;\n```\n\n----------------------------------------\n\nTITLE: Creating Changesets for Pull Requests\nDESCRIPTION: Commands for creating changesets to document changes in pull requests, using minor for new features and patch for bug fixes.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm auri add minor\npnpm auri add patch\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Building the Package\nDESCRIPTION: Commands for running the test suite and building the project package for distribution.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Example Changeset for New Feature\nDESCRIPTION: Example of a changeset markdown content for documenting a new feature in a pull request.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/CONTRIBUTING.md#2025-04-12_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nFeat: Add `greet()`\n```\n\n----------------------------------------\n\nTITLE: Example Changeset for Bug Fix\nDESCRIPTION: Example of a changeset markdown content for documenting a bug fix in a pull request.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nFix: Handle negative numbers in `sqrt()`\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Command to install all project dependencies using the PNPM package manager.\nSOURCE: https://github.com/oslo-project/jwt/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```"
  }
]