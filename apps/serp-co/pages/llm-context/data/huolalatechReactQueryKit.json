[
  {
    "owner": "huolalatech",
    "repo": "react-query-kit",
    "content": "TITLE: Creating a Query with TypeScript in React\nDESCRIPTION: Example of using createQuery to define a typed query hook for fetching post data. Demonstrates usage within a React component and with Next.js getStaticProps.\nSOURCE: https://github.com/HuolalaTech/react-query-kit/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, dehydrate } from '@tanstack/react-query'\nimport { createQuery } from 'react-query-kit'\n\ntype Data = { title: string; content: string }\ntype Variables = { id: number }\n\nconst usePost = createQuery({\n  queryKey: ['posts'],\n  fetcher: (variables: Variables): Promise<Data> => {\n    return fetch(`/posts/${variables.id}`).then(res => res.json())\n  },\n  // u can also pass middleware to cutomize this hook's behavior\n  use: [myMiddleware]\n})\n\n\nconst variables = { id: 1 }\n\n// example\nexport default function Page() {\n  // queryKey will be `['posts', { id: 1 }]` if u passed variables\n  const { data } = usePost({ variables })\n\n  return (\n    <div>\n      <div>{data?.title}</div>\n      <div>{data?.content}</div>\n    </div>\n  )\n}\n\nconsole.log(usePost.getKey()) //  ['posts']\nconsole.log(usePost.getKey(variables)) //  ['posts', { id: 1 }]\n\n// nextjs example\nexport async function getStaticProps() {\n  const queryClient = new QueryClient()\n\n  await queryClient.prefetchQuery(usePost.getFetchOptions(variables))\n\n  return {\n    props: {\n      dehydratedState: dehydrate(queryClient),\n    },\n  }\n}\n\n// usage outside of react component\nconst data = await queryClient.fetchQuery(usePost.getFetchOptions(variables))\n\n// useQueries example\nconst queries = useQueries({\n  queries: [\n   usePost.getOptions(variables),\n   useUser.getOptions(),\n  ],\n})\n\n// getQueryData\nqueryClient.getQueryData(usePost.getKey(variables)) // Data\n\n// setQueryData\nqueryClient.setQueryData(usePost.getKey(variables), {...})\n```\n\n----------------------------------------\n\nTITLE: Creating an Infinite Query with TypeScript in React\nDESCRIPTION: Example of using createInfiniteQuery to define a typed infinite query hook for fetching project data. Shows usage in a React component with pagination and Next.js integration.\nSOURCE: https://github.com/HuolalaTech/react-query-kit/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, dehydrate } from '@tanstack/react-query'\nimport { createInfiniteQuery } from 'react-query-kit'\n\ntype Data = { projects: { id: string; name: string }[]; nextCursor: number }\ntype Variables = { active: boolean }\n\nconst useProjects = createInfiniteQuery({\n  queryKey: ['projects'],\n  fetcher: (variables: Variables, { pageParam }): Promise<Data> => {\n    return fetch(\n      `/projects?cursor=${pageParam}?active=${variables.active}`\n    ).then(res => res.json())\n  },\n  getNextPageParam: (lastPage, pages) => lastPage.nextCursor,\n  initialPageParam: 0,\n})\n\nconst variables = { active: true }\n\n// example\nexport default function Page() {\n  // queryKey equals to ['projects', { active: true }]\n  const { data, fetchNextPage, hasNextPage, isFetching, isFetchingNextPage } =\n    useProjects({ variables })\n\n  return (\n    <div>\n      {data.pages.map((group, i) => (\n        <React.Fragment key={i}>\n          {group.projects.map(project => (\n            <p key={project.id}>{project.name}</p>\n          ))}\n        </React.Fragment>\n      ))}\n      <div>\n        <button\n          onClick={() => fetchNextPage()}\n          disabled={!hasNextPage || isFetchingNextPage}\n        >\n          {isFetchingNextPage\n            ? 'Loading more...'\n            : hasNextPage\n            ? 'Load More'\n            : 'Nothing more to load'}\n        </button>\n      </div>\n      <div>{isFetching && !isFetchingNextPage ? 'Fetching...' : null}</div>\n    </div>\n  )\n}\n\n// nextjs example\nexport async function getStaticProps() {\n  const queryClient = new QueryClient()\n\n  await queryClient.prefetchInfiniteQuery(\n    useProjects.getFetchOptions(variables)\n  )\n\n  return {\n    props: {\n      dehydratedState: dehydrate(queryClient),\n    },\n  }\n}\n\n// usage outside of react component\nconst data = await queryClient.fetchInfiniteQuery(\n  useProjects.getFetchOptions(variables)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Mutations with ReactQueryKit in TypeScript\nDESCRIPTION: Demonstrates how to create and use a mutation for adding a todo item using ReactQueryKit. It includes error handling and success states.\nSOURCE: https://github.com/HuolalaTech/react-query-kit/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMutation } from 'react-query-kit'\n\nconst useAddTodo = createMutation({\n  mutationFn: async (variables: { title: string; content: string }) =>\n    fetch('/post', {\n      method: 'POST',\n      body: JSON.stringify(variables),\n    }).then(res => res.json()),\n  onSuccess(data, variables, context) {\n    // do somethings\n  },\n})\n\nfunction App() {\n  const mutation = useAddTodo({\n    onSettled: (data, error, variables, context) => {\n      // Error or success... doesn't matter!\n    },\n  })\n\n  return (\n    <div>\n      {mutation.isPending ? (\n        'Adding todo...'\n      ) : (\n        <>\n          {mutation.isError ? (\n            <div>An error occurred: {mutation.error.message}</div>\n          ) : null}\n\n          {mutation.isSuccess ? <div>Todo added!</div> : null}\n\n          <button\n            onClick={() => {\n              mutation.mutate({ title: 'Do Laundry', content: 'content...' })\n            }}\n          >\n            create Todo\n          </button>\n        </>\n      )}\n    </div>\n  )\n}\n\n// usage outside of react component\nuseAddTodo.mutationFn({ title: 'Do Laundry', content: 'content...' })\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Routers with ReactQueryKit in TypeScript\nDESCRIPTION: Shows how to create a router for managing API endpoints, including queries, infinite queries, and mutations. It also demonstrates nested routers and type inference.\nSOURCE: https://github.com/HuolalaTech/react-query-kit/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { router } from 'react-query-kit'\n\nconst post = router(`post`, {\n  byId: router.query({\n    fetcher: (variables: { id: number }) =>\n      fetch(`/posts/${variables.id}`).then(res => res.json()),\n    use: [myMiddleware],\n  }),\n\n  list: router.infiniteQuery({\n    fetcher: (_variables, { pageParam }) =>\n      fetch(`/posts/?cursor=${pageParam}`).then(res => res.json()),\n    getNextPageParam: lastPage => lastPage.nextCursor,\n    initialPageParam: 0,\n  }),\n\n  add: router.mutation({\n    mutationFn: async (variables: { title: string; content: string }) =>\n      fetch('/posts', {\n        method: 'POST',\n        body: JSON.stringify(variables),\n      }).then(res => res.json()),\n  }),\n\n  // nest router\n  command: {\n    report: router.mutation({ mutationFn }),\n\n    promote: router.mutation({ mutationFn }),\n  },\n})\n\n// get root key\npost.getKey() // ['post']\n\n// hooks\npost.byId.useQuery({ variables: { id: 1 } })\npost.byId.useSuspenseQuery({ variables: { id: 1 } })\npost.list.useInfiniteQuery()\npost.list.useSuspenseInfiniteQuery()\npost.add.useMutation()\npost.command.report.useMutation()\n\n// expose methods\npost.byId.getKey({ id: 1 }) // ['post', 'byId', { id: 1 }]\npost.byId.getFetchOptions({ id: 1 })\npost.byId.getOptions({ id: 1 })\npost.byId.fetcher({ id: 1 })\npost.add.getKey() // ['post', 'add']\npost.add.getOptions()\npost.add.mutationFn({ title: 'title', content: 'content' })\n\n// infer types\ntype Data = inferData<typeof post.list>\ntype FnData = inferFnData<typeof post.list>\ntype Variables = inferVariables<typeof post.list>\ntype Error = inferError<typeof post.list>\n```\n\n----------------------------------------\n\nTITLE: Creating Suspense Queries in TypeScript\nDESCRIPTION: Examples of using createSuspenseQuery and createSuspenseInfiniteQuery to create suspense-enabled query hooks with TypeScript.\nSOURCE: https://github.com/HuolalaTech/react-query-kit/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSuspenseQuery } from 'react-query-kit'\n\ncreateSuspenseQuery({\n  ...options,\n})\n\n// equals to\ncreateQuery({\n  ...options,\n  enabled: true,\n  suspense: true,\n  throwOnError: true,\n})\n\nimport { createSuspenseInfiniteQuery } from 'react-query-kit'\n\ncreateSuspenseInfiniteQuery({\n  ...options,\n})\n\n// equals to\ncreateInfiniteQuery({\n  ...options,\n  enabled: true,\n  suspense: true,\n  throwOnError: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware in ReactQueryKit with TypeScript\nDESCRIPTION: Demonstrates how to create and use middleware functions for queries and mutations in ReactQueryKit. It includes examples of logger middleware and global middleware setup.\nSOURCE: https://github.com/HuolalaTech/react-query-kit/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryClient } from '@tanstack/react-query'\nimport { Middleware, MutationHook, QueryHook, getKey } from 'react-query-kit'\n\nconst logger: Middleware<QueryHook<Data, Variables>> = useQueryNext => {\n  return options => {\n    const log = useLogger()\n    const fetcher = (variables, context) => {\n      log(context.queryKey, variables)\n      return options.fetcher(variables, context)\n    }\n\n    return useQueryNext({\n      ...options,\n      fetcher,\n    })\n  }\n}\n\nconst useUser = createQuery<Data, Variables>({\n  use: [logger],\n})\n\n// global middlewares\nconst queryMiddleware: Middleware<QueryHook> = useQueryNext => {\n  return options => {\n    // u can also get queryKey via function getKey\n    const fullKey = getKey(options.queryKey, options.variables)\n    // ...\n    return useQueryNext(options)\n  }\n}\nconst mutationMiddleware: Middleware<MutationHook> = useMutationNext => {\n  return options => {\n    // ...\n    return useMutationNext(options)\n  }\n}\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      use: [queryMiddleware],\n    },\n    mutations: {\n      use: [mutationMiddleware],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Middleware Execution Order in ReactQueryKit\nDESCRIPTION: Explains the execution order of multiple middleware functions in ReactQueryKit, showing how they wrap each other and the final useQuery call.\nSOURCE: https://github.com/HuolalaTech/react-query-kit/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nenter a\n  enter b\n    enter c\n      useQuery()\n    exit  c\n  exit  b\nexit  a\n```\n\n----------------------------------------\n\nTITLE: Installing react-query-kit via npm\nDESCRIPTION: Commands to install react-query-kit as a project dependency using npm or yarn.\nSOURCE: https://github.com/HuolalaTech/react-query-kit/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i react-query-kit\n# or\n$ yarn add react-query-kit\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Links Section in Markdown\nDESCRIPTION: A section of HTML comments containing reference links used in the markdown document, including links to npm, node.js, bug reports, feature requests, and good first issues.\nSOURCE: https://github.com/HuolalaTech/react-query-kit/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore-start -->\n[npm]: https://www.npmjs.com\n[node]: https://nodejs.org\n[bugs]: https://github.com/liaoliao666/react-query-kit/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Acreated-desc+label%3Abug\n[requests]: https://github.com/liaoliao666/react-query-kit/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3Aenhancement\n[good-first-issue]: https://github.com/liaoliao666/react-query-kit/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3Aenhancement+label%3A%22good+first+issue%22\n<!-- prettier-ignore-end -->\n```"
  }
]