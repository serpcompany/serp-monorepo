[
  {
    "owner": "streamlit",
    "repo": "docs",
    "content": "TITLE: Creating Modal Dialogs in Streamlit\nDESCRIPTION: Demonstrates how to create a modal dialog in Streamlit that can rerun independently from the rest of the script. The dialog contains a form with input fields for name and email.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_131\n\nLANGUAGE: python\nCODE:\n```\n@st.dialog(\"Sign up\")\ndef email_form():\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n```\n\n----------------------------------------\n\nTITLE: Basic Streamlit Widget Implementation with Slider\nDESCRIPTION: Demonstrates how to create a basic Streamlit widget using st.slider() and display computed results. Shows the fundamental widget interaction pattern where the script reruns on user input.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nx = st.slider('x')  # 👈 this is a widget\nst.write(x, 'squared is', x * x)\n```\n\n----------------------------------------\n\nTITLE: Creating a Streamlit App with LangChain and OpenAI in Python\nDESCRIPTION: This Python code creates a Streamlit app that collects an OpenAI API key and user prompts, sends them to OpenAI's API via LangChain, and displays generated responses. Dependencies include Streamlit, LangChain, and OpenAI. The app uses forms for input and requires an API key that begins with 'sk-'.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/llm-quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom langchain_openai.chat_models import ChatOpenAI\n\nst.title(\"\\U0001F989\\U0001F517 Quickstart App\")\n\nopenai_api_key = st.sidebar.text_input(\"OpenAI API Key\", type=\"password\")\n\ndef generate_response(input_text):\n    model = ChatOpenAI(temperature=0.7, api_key=openai_api_key)\n    st.info(model.invoke(input_text))\n\nwith st.form(\"my_form\"):\n    text = st.text_area(\n        \"Enter text:\",\n        \"What are the three key pieces of advice for learning how to code?\",\n    )\n    submitted = st.form_submit_button(\"Submit\")\n    if not openai_api_key.startswith(\"sk-\"):\n        st.warning(\"Please enter your OpenAI API key!\", icon=\"\\u26A0\")\n    if submitted and openai_api_key.startswith(\"sk-\"):\n        generate_response(text)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiselect Widgets in Streamlit\nDESCRIPTION: Displays a dropdown widget that allows selecting multiple options from a list. Returns a list containing the selected options.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nchoices = st.multiselect(\"Buy\", [\"milk\", \"apples\", \"potatoes\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Input Widgets in Streamlit\nDESCRIPTION: Displays a widget that allows users to record audio with their microphone. Returns the recorded audio data when recording is complete.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nspeech = st.audio_input(\"Record a voice message\")\n```\n\n----------------------------------------\n\nTITLE: Caching UI Elements with st.cache_resource in Python\nDESCRIPTION: Example demonstrating how to cache entire parts of the UI using st.cache_resource. This function loads a ResNet50 model and includes multiple Streamlit commands to display information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/cache-resource.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_resource\ndef load_model():\n    st.header(\"Data analysis\")\n    model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT)\n    st.success(\"Loaded model!\")\n    st.write(\"Turning on evaluation mode...\")\n    model.eval()\n    st.write(\"Here's the model:\")\n    return model\n```\n\n----------------------------------------\n\nTITLE: Add Assistant Response to Chat History in Streamlit\nDESCRIPTION: This code snippet adds the chatbot's response to the chat history and displays it in the chat message container. The bot's response is simply an echo of the user's prompt.  The assistant's response is added to `st.session_state.messages` and displayed using `st.chat_message`.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = f\"Echo: {prompt}\"\n# Display assistant response in chat message container\nwith st.chat_message(\"assistant\"):\n    st.markdown(response)\n# Add assistant response to chat history\nst.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Widget Generation with Streamlit Buttons\nDESCRIPTION: This snippet demonstrates how to dynamically add widgets to a Streamlit page using a button and session state.  It avoids `DuplicateWidgetID` errors by using a unique index within widget keys. The example dynamically renders rows of text input fields when the 'Add person' button is clicked.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef display_input_row(index):\n    left, middle, right = st.columns(3)\n    left.text_input('First', key=f'first_{index}')\n    middle.text_input('Middle', key=f'middle_{index}')\n    right.text_input('Last', key=f'last_{index}')\n\nif 'rows' not in st.session_state:\n    st.session_state['rows'] = 0\n\ndef increase_rows():\n    st.session_state['rows'] += 1\n\nst.button('Add person', on_click=increase_rows)\n\nfor i in range(st.session_state['rows']):\n    display_input_row(i)\n\n# Show the results\nst.subheader('People')\nfor i in range(st.session_state['rows']):\n    st.write(\n        f'Person {i+1}:',\n        st.session_state[f'first_{i}'],\n        st.session_state[f'middle_{i}'],\n        st.session_state[f'last_{i}']\n    )\n```\n\n----------------------------------------\n\nTITLE: Counter with Callbacks and Arguments\nDESCRIPTION: Demonstrates how to use callbacks with arguments in a Streamlit counter application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title('Counter Example using Callbacks with args')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\nincrement_value = st.number_input('Enter a value', value=0, step=1)\n\ndef increment_counter(increment_value):\n    st.session_state.count += increment_value\n\nincrement = st.button('Increment', on_click=increment_counter,\n    args=(increment_value, ))\n\nst.write('Count = ', st.session_state.count)\n```\n\n----------------------------------------\n\nTITLE: Complete Chat Application with Validation\nDESCRIPTION: This code snippet demonstrates a complete Streamlit chat app where users can input prompts, and receive simulated chat responses. The responses are validated for certain conditions. Users can accept, correct, or rewrite the responses. This snippet uses Streamlit, lorem, random, and time modules.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\nimport lorem\nfrom random import randint\nimport time\n\nif \"stage\" not in st.session_state:\n    st.session_state.stage = \"user\"\n    st.session_state.history = []\n    st.session_state.pending = None\n    st.session_state.validation = {}\n\n\ndef chat_stream():\n    for i in range(randint(3, 9)):\n        yield lorem.sentence() + \" \"\n        time.sleep(0.2)\n\n\ndef validate(response):\n    response_sentences = response.split(\". \")\n    response_sentences = [\n        sentence.strip(\". \") + \".\"\n        for sentence in response_sentences\n        if sentence.strip(\". \") != \"\"\n    ]\n    validation_list = [\n        True if sentence.count(\" \") > 4 else False for sentence in response_sentences\n    ]\n    return response_sentences, validation_list\n\n\ndef add_highlights(response_sentences, validation_list, bg=\"red\", text=\"red\"):\n    return [\n        f\":{text}[:{bg}-background[\" + sentence + \"]]\" if not is_valid else sentence\n        for sentence, is_valid in zip(response_sentences, validation_list)\n    ]\n\nfor message in st.session_state.history:\n    with st.chat_message(message[\"role\"]):\n        st.write(message[\"content\"])\n\nif st.session_state.stage == \"user\":\n    if user_input := st.chat_input(\"Enter a prompt\"):\n        st.session_state.history.append({\"role\": \"user\", \"content\": user_input})\n        with st.chat_message(\"user\"):\n            st.write(user_input)\n        with st.chat_message(\"assistant\"):\n            response = st.write_stream(chat_stream())\n            st.session_state.pending = response\n            st.session_state.stage = \"validate\"\n            st.rerun()\n\nelif st.session_state.stage == \"validate\":\n    st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n    response_sentences, validation_list = validate(st.session_state.pending)\n    highlighted_sentences = add_highlights(response_sentences, validation_list)\n    with st.chat_message(\"assistant\"):\n        st.markdown(\" \".join(highlighted_sentences))\n        st.divider()\n        cols = st.columns(3)\n        if cols[0].button(\n            \"Correct errors\", type=\"primary\", disabled=all(validation_list)\n        ):\n            st.session_state.validation = {\n                \"sentences\": response_sentences,\n                \"valid\": validation_list,\n            }\n            st.session_state.stage = \"correct\"\n            st.rerun()\n        if cols[1].button(\"Accept\"):\n            st.session_state.history.append(\n                {\"role\": \"assistant\", \"content\": st.session_state.pending}\n            )\n            st.session_state.pending = None\n            st.session_state.validation = {}\n            st.session_state.stage = \"user\"\n            st.rerun()\n        if cols[2].button(\"Rewrite answer\", type=\"tertiary\"):\n            st.session_state.stage = \"rewrite\"\n            st.rerun()\n\nelif st.session_state.stage == \"correct\":\n    st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n    response_sentences = st.session_state.validation[\"sentences\"]\n    validation_list = st.session_state.validation[\"valid\"]\n    highlighted_sentences = add_highlights(\n        response_sentences, validation_list, \"gray\", \"gray\"\n    )\n    if not all(validation_list):\n        focus = validation_list.index(False)\n        highlighted_sentences[focus] = \":red[:red\" + highlighted_sentences[focus][11:]\n    else:\n        focus = None\n    with st.chat_message(\"assistant\"):\n        st.markdown(\" \".join(highlighted_sentences))\n        st.divider()\n        if focus is not None:\n            new_sentence = st.text_input(\n                \"Replacement text:\", value=response_sentences[focus]\n            )\n            cols = st.columns(2)\n            if cols[0].button(\n                \"Update\", type=\"primary\", disabled=len(new_sentence.strip()) < 1\n            ):\n                st.session_state.validation[\"sentences\"][focus] = (\n                    new_sentence.strip(\". \") + \".\"\n                )\n                st.session_state.validation[\"valid\"][focus] = True\n                st.session_state.pending = \" \".join(\n                    st.session_state.validation[\"sentences\"]\n                )\n                st.rerun()\n            if cols[1].button(\"Remove\"):\n                st.session_state.validation[\"sentences\"].pop(focus)\n                st.session_state.validation[\"valid\"].pop(focus)\n                st.session_state.pending = \" \".join(\n                    st.session_state.validation[\"sentences\"]\n                )\n                st.rerun()\n        else:\n            cols = st.columns(2)\n            if cols[0].button(\"Accept\", type=\"primary\"):\n                st.session_state.history.append(\n                    {\"role\": \"assistant\", \"content\": st.session_state.pending}\n                )\n                st.session_state.pending = None\n                st.session_state.validation = {}\n                st.session_state.stage = \"user\"\n                st.rerun()\n            if cols[1].button(\"Re-validate\"):\n                st.session_state.validation = {}\n                st.session_state.stage = \"validate\"\n                st.rerun()\n\nelif st.session_state.stage == \"rewrite\":\n    st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n    with st.chat_message(\"assistant\"):\n        new = st.text_area(\"Rewrite the answer\", value=st.session_state.pending)\n        if st.button(\n            \"Update\", type=\"primary\", disabled=new is None or new.strip(\". \") == \"\"\n        ):\n            st.session_state.history.append({\"role\": \"assistant\", \"content\": new})\n            st.session_state.pending = None\n            st.session_state.validation = {}\n            st.session_state.stage = \"user\"\n            st.rerun()\n```\n\n----------------------------------------\n\nTITLE: Displaying Maps with Data Points in Streamlit\nDESCRIPTION: Creates and displays a map with data points using Streamlit's built-in st.map function. Takes a data frame with location information as input and renders it as a map visualization.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.map(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Complete Uber Pickup Analysis App\nDESCRIPTION: Full implementation of the Streamlit app including data loading, caching, visualization, and interactive filtering of Uber pickup data in NYC.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nst.title('Uber pickups in NYC')\n\nDATE_COLUMN = 'date/time'\nDATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\n\n@st.cache_data\ndef load_data(nrows):\n    data = pd.read_csv(DATA_URL, nrows=nrows)\n    lowercase = lambda x: str(x).lower()\n    data.rename(lowercase, axis='columns', inplace=True)\n    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\n    return data\n\ndata_load_state = st.text('Loading data...')\ndata = load_data(10000)\ndata_load_state.text(\"Done! (using st.cache_data)\")\n\nif st.checkbox('Show raw data'):\n    st.subheader('Raw data')\n    st.write(data)\n\nst.subheader('Number of pickups by hour')\nhist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\nst.bar_chart(hist_values)\n\n# Some number in the range 0-23\nhour_to_filter = st.slider('hour', 0, 23, 17)\nfiltered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\n\nst.subheader('Map of all pickups at %s:00' % hour_to_filter)\nst.map(filtered_data)\n```\n\n----------------------------------------\n\nTITLE: Handling User Input Stage in Streamlit Chat\nDESCRIPTION: Implementation of the 'user' stage in the chat workflow where the app accepts user input, displays it, streams a response, and transitions to the validation stage. Uses Streamlit's chat components and session state management.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif st.session_state.stage == \"user\":\n    if user_input := st.chat_input(\"Enter a prompt\"):\n        st.session_state.history.append({\"role\": \"user\", \"content\": user_input})\n        with st.chat_message(\"user\"):\n            st.write(user_input)\n        with st.chat_message(\"assistant\"):\n            response = st.write_stream(chat_stream())\n            st.session_state.pending = response\n            st.session_state.stage = \"validate\"\n            st.rerun()\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Column in Streamlit\nDESCRIPTION: This snippet demonstrates configuring a number column with a minimum value and custom formatting for currency display.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nNumberColumn(\"Price (in USD)\", min_value=0, format=\"$%d\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AppTest and Running\nDESCRIPTION: This Python code snippet demonstrates how to initialize a Streamlit app for testing using `AppTest.from_file()` and then run it. `AppTest.from_file()` creates an instance of the AppTest object, initialized with the app's code, while the `.run()` method executes the app for the first time.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"at = AppTest.from_file(\"app.py\").run()\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Streamlit Container Layouts in Python\nDESCRIPTION: Shows the use of `st.container` for grouping multiple elements, altering their display order in a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_97\n\nLANGUAGE: Python\nCODE:\n```\nc = st.container()\nst.write(\"This will show last\")\nc.write(\"This will show first\")\nc.write(\"This will show second\")\n```\n\n----------------------------------------\n\nTITLE: Streaming AI Responses with OpenAI and Streamlit Python\nDESCRIPTION: Streams responses from OpenAI's chat completions API by sending the chat history to the specified model and displaying the streamed output in the chat interface. This snippet captures the integration with OpenAI and displays the assistant's response.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Display assistant response in chat message container\\nwith st.chat_message(\\\"assistant\\\"):\\n    stream = client.chat.completions.create(\\n        model=st.session_state[\\\"openai_model\\\"],\\n        messages=[\\n            {\\\"role\\\": m[\\\"role\\\"], \\\"content\\\": m[\\\"content\\\"]}\\n            for m in st.session_state.messages\\n        ],\\n        stream=True,\\n    )\\n    response = st.write_stream(stream)\\nst.session_state.messages.append({\\\"role\\\": \\\"assistant\\\", \\\"content\\\": response})\n```\n\n----------------------------------------\n\nTITLE: Caching Sentiment Analysis Model in Streamlit App\nDESCRIPTION: Shows how to use st.cache_resource decorator to load and cache a sentiment analysis model, preventing repeated model loading and improving app performance\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom transformers import pipeline\n\n@st.cache_resource  # 👈 Add the caching decorator\ndef load_model():\n    return pipeline(\"sentiment-analysis\")\n\nmodel = load_model()\n\nquery = st.text_input(\"Your query\", value=\"I love Streamlit! 🎈\")\nif query:\n    result = model(query)[0]  # 👈 Classify the query text\n    st.write(result)\n```\n\n----------------------------------------\n\nTITLE: React to User Input and Display Message in Streamlit\nDESCRIPTION: This code snippet captures user input using `st.chat_input`, displays it in a chat message container, and adds the input to the chat history. The `:=` operator assigns the user's input to the `prompt` variable and checks if it's not `None`. The user's message is displayed in the chat message container and appended to the `st.session_state.messages` list.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# React to user input\nif prompt := st.chat_input(\"What is up?\"):\n    # Display user message in chat message container\n    with st.chat_message(\"user\"):\n        st.markdown(prompt)\n    # Add user message to chat history\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n```\n\n----------------------------------------\n\nTITLE: Streamlit App for MySQL Database Query\nDESCRIPTION: Python code for a Streamlit app that connects to a MySQL database using st.connection, executes a query, and displays the results. It demonstrates how to use Streamlit's database connection feature and handle query caching.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mysql.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\n\n# Initialize connection.\nconn = st.connection('mysql', type='sql')\n\n# Perform query.\ndf = conn.query('SELECT * from mytable;', ttl=600)\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Area Charts in Streamlit\nDESCRIPTION: Creates and displays an area chart using Streamlit's built-in st.area_chart function. Takes a data frame as input and renders it as an area chart without requiring any additional configuration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.area_chart(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Complete ChatGPT-like Application with Streamlit Python\nDESCRIPTION: Combines the initialization of Streamlit and OpenAI API with a complete flow for capturing user messages and streaming responses from the AI model. The code sets up dependencies, initializes session states, and manages the chat interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\\nimport streamlit as st\\n\\nst.title(\\\"ChatGPT-like clone\\\")\\n\\nclient = OpenAI(api_key=st.secrets[\\\"OPENAI_API_KEY\\\"])\\n\\nif \\\"openai_model\\\" not in st.session_state:\\n    st.session_state[\\\"openai_model\\\"] = \\\"gpt-3.5-turbo\\\"\\n\\nif \\\"messages\\\" not in st.session_state:\\n    st.session_state.messages = []\\n\\nfor message in st.session_state.messages:\\n    with st.chat_message(message[\\\"role\\\"]):\\n        st.markdown(message[\\\"content\\\"])\\n\\nif prompt := st.chat_input(\\\"What is up?\\\"):\\n    st.session_state.messages.append({\\\"role\\\": \\\"user\\\", \\\"content\\\": prompt})\\n    with st.chat_message(\\\"user\\\"):\\n        st.markdown(prompt)\\n\\n    with st.chat_message(\\\"assistant\\\"):\\n        stream = client.chat.completions.create(\\n            model=st.session_state[\\\"openai_model\\\"],\\n            messages=[\\n                {\\\"role\\\": m[\\\"role\\\"], \\\"content\\\": m[\\\"content\\\"]}\\n                for m in st.session_state.messages\\n            ],\\n            stream=True,\\n        )\\n        response = st.write_stream(stream)\\n    st.session_state.messages.append({\\\"role\\\": \\\"assistant\\\", \\\"content\\\": response})\n```\n\n----------------------------------------\n\nTITLE: Initializing Streamlit Chat App with Feedback\nDESCRIPTION: Set up the basic Streamlit app structure with imports and initial setup for chat history and streaming responses\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Message Containers in Streamlit\nDESCRIPTION: Inserts a chat message container that can hold various Streamlit elements. The example creates a user message containing text and a random line chart.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nwith st.chat_message(\"user\"):\n    st.write(\"Hello 👋\")\n    st.line_chart(np.random.randn(30, 3))\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentiment Analysis Model with Hugging Face\nDESCRIPTION: Demonstrates loading a Hugging Face sentiment analysis model using st.cache_resource to optimize performance and memory usage in a Streamlit app\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom transformers import pipeline\nmodel = pipeline(\"sentiment-analysis\")  # 👈 Load the model\n```\n\n----------------------------------------\n\nTITLE: Developing a Streamlit App with S3 Integration\nDESCRIPTION: This Python script demonstrates how to create a Streamlit app that connects to AWS S3 using the FilesConnection package. It details how to read a CSV file from S3, configure the caching behavior, and display the data in the app. Note the need for proper setup of AWS credentials for seamless integration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/aws-s3.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\nfrom st_files_connection import FilesConnection\n\n# Create connection object and retrieve file contents.\n# Specify input format is a csv and to cache the result for 600 seconds.\nconn = st.connection('s3', type=FilesConnection)\ndf = conn.read(\"testbucket-jrieke/myfile.csv\", input_format=\"csv\", ttl=600)\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.Owner} has a :{row.Pet}:\")\n```\n\n----------------------------------------\n\nTITLE: Using st.write to Display Text and Data in Streamlit\nDESCRIPTION: Demonstrates how to use st.write to display formatted text, DataFrames, and matplotlib figures in a Streamlit app. This versatile function automatically determines the appropriate display method based on the data type.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/write-magic/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.write(\"Hello **world**!\")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\n```\n\n----------------------------------------\n\nTITLE: Creating Stateful Button in Streamlit\nDESCRIPTION: Demonstrates how to implement a stateful button using session state that maintains its clicked state across reruns.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif 'clicked' not in st.session_state:\n    st.session_state.clicked = False\n\ndef click_button():\n    st.session_state.clicked = True\n\nst.button('Click me', on_click=click_button)\n\nif st.session_state.clicked:\n    st.write('Button clicked!')\n    st.slider('Select a value')\n```\n\n----------------------------------------\n\nTITLE: Basic Streamlit Dataframe Usage\nDESCRIPTION: The st.dataframe function displays a dataframe as an interactive table that supports sorting, resizing, searching and copying data. It can be configured with column-specific display and editing behaviors.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/dataframe.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.dataframe(data=None, width=None, height=None, use_container_width=False)\n```\n\n----------------------------------------\n\nTITLE: Basic Fragment Implementation in Python with Streamlit\nDESCRIPTION: Demonstrates how to define and call a basic fragment function using the st.fragment decorator. Shows implementation of a simple button interaction within a fragment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/fragments.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n@st.fragment\ndef fragment_function():\n    if st.button(\"Hi!\"):\n        st.write(\"Hi back!\")\n\nfragment_function()\n```\n\n----------------------------------------\n\nTITLE: Specifying Python package dependencies\nDESCRIPTION: This snippet shows how to create a `requirements.txt` file listing the libraries needed for the Streamlit app. This file is crucial when deploying the app to Streamlit Community Cloud, as it ensures all required libraries are installed in the cloud environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/llm-quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstreamlit\nopenai\nlangchain\n```\n\n----------------------------------------\n\nTITLE: Getting Stock Data with Caching\nDESCRIPTION: Defines a function decorated with @st.cache_data to fetch and return stock data from Vega Datasets since 2004-01-01, caching the result to optimize performance.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\n\ndef get_data():\n    source = data.stocks()\n    source = source[source.date.gt(\"2004-01-01\")]\n    return source\n\nstock_data = get_data()\n```\n\n----------------------------------------\n\nTITLE: Creating a Selectbox in Streamlit\nDESCRIPTION: Displays a dropdown select widget that allows users to select a single option from a list. Returns the selected option.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nchoice = st.selectbox(\"Pick one\", [\"cats\", \"dogs\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Streamlit Navigation Structure\nDESCRIPTION: Demonstrates how to configure navigation structure for a multipage Streamlit application by organizing pages into logical groups with assigned functions\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/navigation/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.navigation({\n    \"Your account\" : [log_out, settings],\n    \"Reports\" : [overview, usage],\n    \"Tools\" : [search]\n})\n```\n\n----------------------------------------\n\nTITLE: Processing and Displaying Assistant Response in Streamlit Chat\nDESCRIPTION: This code handles the assistant's response in a Streamlit chat interface. It processes the user prompt, streams the response, adds a feedback widget, and appends the response to the chat history.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith st.chat_message(\"assistant\"):\n    response = st.write_stream(chat_stream(prompt))\n    st.feedback(\n        \"thumbs\",\n        key=f\"feedback_{len(st.session_state.history)}\",\n        on_change=save_feedback,\n        args=[len(st.session_state.history)],\n    )\nst.session_state.history.append({\"role\": \"assistant\", \"content\": response})\n```\n\n----------------------------------------\n\nTITLE: PyTorch Image Processing with Streamlit Camera\nDESCRIPTION: Shows how to process camera input using PyTorch, converting the image to a PyTorch tensor using torch.ops.image.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/camera_input.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport torch\nimport numpy as np\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as a 3D uint8 tensor with PyTorch:\n    bytes_data = img_file_buffer.getvalue()\n    torch_img = torch.ops.image.decode_image(\n        torch.from_numpy(np.frombuffer(bytes_data, np.uint8)), 3\n    )\n\n    # Check the type of torch_img:\n    # Should output: <class 'torch.Tensor'>\n    st.write(type(torch_img))\n\n    # Check the shape of torch_img:\n    # Should output shape: torch.Size([channels, height, width])\n    st.write(torch_img.shape)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Container-Based Element Ordering in Streamlit (Python)\nDESCRIPTION: This snippet shows how to use containers in Streamlit to change the order of elements on the page, which affects how they are indexed in tests.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nfirst = st.container()\nsecond = st.container()\n\nsecond.button(\"A\")\nfirst.button(\"B\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Spinner Animation in Streamlit\nDESCRIPTION: Displays a temporary spinner animation with a custom message while executing a code block, useful for indicating that processing is occurring during longer operations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith st.spinner(\"Please wait...\"):\n  do_something_slow()\n```\n\n----------------------------------------\n\nTITLE: Implementing 'Correct' Stage in Streamlit Chat App\nDESCRIPTION: This snippet defines the 'correct' stage where users can address errors in the AI-generated response. It includes logic for highlighting errors, updating or removing sentences, and handling the case when all errors are resolved.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nelif st.session_state.stage == \"correct\":\n    st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n    response_sentences = st.session_state.validation[\"sentences\"]\n    validation_list = st.session_state.validation[\"valid\"]\n    highlighted_sentences = add_highlights(\n        response_sentences, validation_list, \"gray\", \"gray\"\n    )\n    if not all(validation_list):\n        focus = validation_list.index(False)\n        highlighted_sentences[focus] = \":red[:red\" + highlighted_sentences[focus][11:]\n    else:\n        focus = None\n    with st.chat_message(\"assistant\"):\n        st.markdown(\" \".join(highlighted_sentences))\n        st.divider()\n        if focus is not None:\n            new_sentence = st.text_input(\n                \"Replacement text:\", value=response_sentences[focus]\n            )\n            cols = st.columns(2)\n            if cols[0].button(\n                \"Update\", type=\"primary\", disabled=len(new_sentence.strip()) < 1\n            ):\n                st.session_state.validation[\"sentences\"][focus] = (\n                    new_sentence.strip(\". \") + \".\"\n                )\n                st.session_state.validation[\"valid\"][focus] = True\n                st.session_state.pending = \" \".join(\n                    st.session_state.validation[\"sentences\"]\n                )\n                st.rerun()\n            if cols[1].button(\"Remove\"):\n                st.session_state.validation[\"sentences\"].pop(focus)\n                st.session_state.validation[\"valid\"].pop(focus)\n                st.session_state.pending = \" \".join(\n                    st.session_state.validation[\"sentences\"]\n                )\n                st.rerun()\n        else:\n            cols = st.columns(2)\n            if cols[0].button(\"Accept\", type=\"primary\"):\n                st.session_state.history.append(\n                    {\"role\": \"assistant\", \"content\": st.session_state.pending}\n                )\n                st.session_state.pending = None\n                st.session_state.validation = {}\n                st.session_state.stage = \"user\"\n                st.rerun()\n            if cols[1].button(\"Re-validate\"):\n                st.session_state.validation = {}\n                st.session_state.stage = \"validate\"\n                st.rerun()\n```\n\n----------------------------------------\n\nTITLE: Using Input Widgets in Cached Functions with Experimental Flag\nDESCRIPTION: Example showing how to use input widgets like st.checkbox within a cached function. This requires setting the experimental_allow_widgets parameter and treats the widget value as an additional input parameter.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/cache-resource.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_resource(experimental_allow_widgets=True)  # 👈 Set the parameter\ndef load_model():\n    pretrained = st.checkbox(\"Use pre-trained model:\")  # 👈 Add a checkbox\n    model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT, pretrained=pretrained)\n    return model\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload in Streamlit\nDESCRIPTION: Create a file uploader widget using Streamlit's file_uploader function, allowing users to upload CSV files.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndata = st.file_uploader(\"Upload a CSV\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Postgres Database Connection\nDESCRIPTION: Demonstrates using st.cache_resource to create and cache a database connection, ensuring efficient reuse of the connection object across Streamlit app sessions\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_resource\ndef init_connection():\n    host = \"hh-pgsql-public.ebi.ac.uk\"\n    database = \"pfmegrnargs\"\n    user = \"reader\"\n    password = \"NWDMCE5xdipIjRrp\"\n    return psycopg2.connect(host=host, database=database, user=user, password=password)\n\nconn = init_connection()\n```\n\n----------------------------------------\n\nTITLE: Displaying Media Elements with Streamlit in Python\nDESCRIPTION: This snippet provides examples of displaying images, audio, and video using Streamlit's st.image, st.audio, and st.video functions. It supports displaying media from various formats like URLs, numpy arrays, and files.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_89\n\nLANGUAGE: Python\nCODE:\n```\nst.image(numpy_array)\nst.image(image_bytes)\nst.image(file)\nst.image(\"https://example.com/myimage.jpg\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nst.audio(numpy_array)\nst.audio(audio_bytes)\nst.audio(file)\nst.audio(\"https://example.com/myaudio.mp3\", format=\"audio/mp3\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nst.video(numpy_array)\nst.video(video_bytes)\nst.video(file)\nst.video(\"https://example.com/myvideo.mp4\", format=\"video/mp4\")\n```\n\n----------------------------------------\n\nTITLE: Session State Counter in Streamlit\nDESCRIPTION: This code snippet demonstrates how to use Session State to maintain a counter across multiple reruns of a Streamlit app. The code checks if the 'counter' key exists in `st.session_state`; if not, it initializes it to 0. Then, it increments the counter and displays the current count. This shows how session state preserves information between user interactions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/advanced-concepts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif \"counter\" not in st.session_state:\n    st.session_state.counter = 0\n\nst.session_state.counter += 1\n\nst.header(f\"This page has run {st.session_state.counter} times.\")\nst.button(\"Run it again\")\n```\n\n----------------------------------------\n\nTITLE: Complete Streamlit Chat App with Feedback Mechanism\nDESCRIPTION: Full implementation of a chat app that allows users to interact, receive simulated responses, and provide feedback using Streamlit's chat and feedback components\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\n\ndef chat_stream(prompt):\n    response = f'You said, \"{prompt}\" ...interesting.'\n    for char in response:\n        yield char\n        time.sleep(0.02)\n\ndef save_feedback(index):\n    st.session_state.history[index][\"feedback\"] = st.session_state[f\"feedback_{index}\"]\n\nif \"history\" not in st.session_state:\n    st.session_state.history = []\n\nfor i, message in enumerate(st.session_state.history):\n    with st.chat_message(message[\"role\"]):\n        st.write(message[\"content\"])\n        if message[\"role\"] == \"assistant\":\n            feedback = message.get(\"feedback\", None)\n            st.session_state[f\"feedback_{i}\"] = feedback\n            st.feedback(\n                \"thumbs\",\n                key=f\"feedback_{i}\",\n                disabled=feedback is not None,\n                on_change=save_feedback,\n                args=[i],\n            )\n\nif prompt := st.chat_input(\"Say something\"):\n    with st.chat_message(\"user\"):\n        st.write(prompt)\n    st.session_state.history.append({\"role\": \"user\", \"content\": prompt})\n    with st.chat_message(\"assistant\"):\n        response = st.write_stream(chat_stream(prompt))\n        st.feedback(\n            \"thumbs\",\n            key=f\"feedback_{len(st.session_state.history)}\",\n            on_change=save_feedback,\n            args=[len(st.session_state.history)],\n        )\n    st.session_state.history.append({\"role\": \"assistant\", \"content\": response})\n```\n\n----------------------------------------\n\nTITLE: Initializing AppTest with File Testing Example\nDESCRIPTION: Demonstrates how to use AppTest for testing a Streamlit app with file input, setting secrets, and checking assertions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_160\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"streamlit_app.py\")\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n\nat.text_input(\"word\").input(\"Bazbat\").run()\nassert at.warning[0].value == \"Try again.\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ChatGPT-like App with Streamlit and OpenAI\nDESCRIPTION: Sets up the Streamlit app, initializes the OpenAI client with an API key from secrets, and prepares the chat interface. It also handles displaying existing chat messages from the session state.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom openai import OpenAI\n\nst.title(\"ChatGPT-like clone\")\n\n# Set OpenAI API key from Streamlit secrets\nclient = OpenAI(api_key=st.secrets[\"OPENAI_API_KEY\"])\n\n# Set a default model\nif \"openai_model\" not in st.session_state:\n    st.session_state[\"openai_model\"] = \"gpt-3.5-turbo\"\n\n# Initialize chat history\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# Display chat messages from history on app rerun\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a DataFrame Demo Page in Streamlit\nDESCRIPTION: This code creates a page demonstrating how to visualize Pandas DataFrames in Streamlit. It fetches UN agricultural data, allows users to select countries for comparison, and displays the data both as a table and an area chart using Altair.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-a-multi-page-app.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nfrom urllib.error import URLError\n\nst.set_page_config(page_title=\"DataFrame Demo\", page_icon=\"📊\")\n\nst.markdown(\"# DataFrame Demo\")\nst.sidebar.header(\"DataFrame Demo\")\nst.write(\n    \"\"\"This demo shows how to use `st.write` to visualize Pandas DataFrames.\n(Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).)\"\"\")\n\n\n@st.cache_data\ndef get_UN_data():\n    AWS_BUCKET_URL = \"http://streamlit-demo-data.s3-us-west-2.amazonaws.com\"\n    df = pd.read_csv(AWS_BUCKET_URL + \"/agri.csv.gz\")\n    return df.set_index(\"Region\")\n\n\ntry:\n    df = get_UN_data()\n    countries = st.multiselect(\n        \"Choose countries\", list(df.index), [\"China\", \"United States of America\"]\n    )\n    if not countries:\n        st.error(\"Please select at least one country.\")\n    else:\n        data = df.loc[countries]\n        data /= 1000000.0\n        st.write(\"### Gross Agricultural Production ($B)\", data.sort_index())\n\n        data = data.T.reset_index()\n        data = pd.melt(data, id_vars=[\"index\"]).rename(\n            columns={\"index\": \"year\", \"value\": \"Gross Agricultural Product ($B)\"}\n        )\n        chart = (\n            alt.Chart(data)\n            .mark_area(opacity=0.3)\n            .encode(\n                x=\"year:T\",\n                y=alt.Y(\"Gross Agricultural Product ($B):Q\", stack=None),\n                color=\"Region:N\",\n            )\n        )\n        st.altair_chart(chart, use_container_width=True)\nexcept URLError as e:\n    st.error(\n        \"\"\"\n        **This demo requires internet access.**\n        Connection error: %s\n    \"\"\"\n        % e.reason\n    )\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase with Supabase Python Client Library\nDESCRIPTION: This Python code demonstrates connecting to a Supabase database using the Supabase Python Client Library within a Streamlit application.  It initializes the Supabase client using secrets stored in `st.secrets` and uses `st.cache_resource` for efficient connection management.  It also implements a cached query function using `st.cache_data` to minimize database load.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/supabase.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"# streamlit_app.py\\n\\nimport streamlit as st\\nfrom supabase import create_client, Client\\n\\n# Initialize connection.\\n# Uses st.cache_resource to only run once.\\n@st.cache_resource\\ndef init_connection():\\n    url = st.secrets[\\\"SUPABASE_URL\\\"]\\n    key = st.secrets[\\\"SUPABASE_KEY\\\"]\\n    return create_client(url, key)\\n\\nsupabase = init_connection()\\n\\n# Perform query.\\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\\n@st.cache_data(ttl=600)\\ndef run_query():\\n    return supabase.table(\\\"mytable\\\").select(\\\"*\\\").execute()\\n\\nrows = run_query()\\n\\n# Print results.\\nfor row in rows.data:\\n    st.write(f\\\"{row['name']} has a :{row['pet']}:\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle Switch in Streamlit\nDESCRIPTION: Displays a toggle switch widget that returns True when activated and False when deactivated. Useful for enabling/disabling features.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nactivated = st.toggle(\"Activate\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Line Charts in Streamlit\nDESCRIPTION: Creates and displays a line chart using Streamlit's built-in st.line_chart function. Takes a data frame as input and renders it as a line chart without requiring any additional configuration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.line_chart(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Initializing Multipage Streamlit App with Stateful Sidebar Widgets\nDESCRIPTION: Demonstrates creating a multipage Streamlit app with sidebar widgets that remain stateful across different pages using st.navigation and st.Page\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/widgets.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\npg = st.navigation([st.Page(\"page_1.py\"), st.Page(\"page_2.py\")])\n\nst.sidebar.selectbox(\"Group\", [\"A\",\"B\",\"C\"], key=\"group\")\nst.sidebar.slider(\"Size\", 1, 5, key=\"size\")\n\npg.run()\n```\n\n----------------------------------------\n\nTITLE: Displaying Content with st.write in Python\nDESCRIPTION: Use st.write to display text, data frames, and matplotlib figures in Streamlit apps. This versatile function automatically formats various data types appropriately for display.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.write(\"Hello **world**!\")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\n```\n\n----------------------------------------\n\nTITLE: Cached Resource Pattern\nDESCRIPTION: Implementation of a cached singleton pattern using st.cache_resource for resource management classes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/custom-classes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nclass MyResource:\n    def __init__(self, api_url: str):\n        self._url = api_url\n\n    @st.cache_resource(ttl=300)\n    @staticmethod\n    def get_resource_manager(api_url: str):\n        return MyResource(api_url)\n\n# This is cached until Session State is cleared or 5 minutes has elapsed.\nresource_manager = MyResource.get_resource_manager(\"http://example.com/api/\")\n```\n\n----------------------------------------\n\nTITLE: Display User Input with st.chat_input in Streamlit\nDESCRIPTION: This snippet shows how to use `st.chat_input` to display a chat input widget and then display the user's input. If the user has entered a message, it's shown in the app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"User has sent the following prompt: {prompt}\")\n```\n\n----------------------------------------\n\nTITLE: Using Snowpark Session in Streamlit\nDESCRIPTION: This snippet demonstrates how to use a Snowpark session to retrieve a table from a Snowflake database and convert it to a pandas DataFrame for display in a Streamlit app. It includes caching to improve performance.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/snowflake.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\n\nconn = st.connection(\"snowflake\")\n\n@st.cache_data\ndef load_table():\n    session = conn.session()\n    return session.table(\"mytable\").to_pandas()\n\ndf = load_table()\n\nfor row in df.itertuples():\n    st.write(f\"{row.NAME} has a :{row.PET}:\")\n```\n\n----------------------------------------\n\nTITLE: Testing Chat Elements in Streamlit Using AppTest - Python\nDESCRIPTION: This snippet provides methods for testing chat elements in a Streamlit application, verifying input processing and the display of chat messages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/cheat-sheet.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# chat_input\nat.chat_input[0].set_value(\"Do you know any jokes?\").run()\n# Note: chat_input value clears after every re-run (like in a real app)\n\n# chat_message\nassert at.chat_message[0].markdown[0].value == \"Do you know any jokes?\"\nassert at.chat_message[0].avatar == \"user\"\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Page Streamlit Apps\nDESCRIPTION: Shows how to set up multi-page navigation using the st_pages package.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"🏠\"),\n  Page(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n```\n\n----------------------------------------\n\nTITLE: Updating Line Chart with Real-time Data in Streamlit\nDESCRIPTION: Demonstrates how to create and incrementally update a line chart using st.line_chart and the add_rows() method. The example creates an initial dataframe with random data, then adds new rows in a loop with a delay to create an animation effect.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/animate-elements.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport time\n\ndf = pd.DataFrame(np.random.randn(15, 3), columns=([\"A\", \"B\", \"C\"]))\nmy_data_element = st.line_chart(df)\n\nfor tick in range(10):\n    time.sleep(.5)\n    add_df = pd.DataFrame(np.random.randn(1, 3), columns=([\"A\", \"B\", \"C\"]))\n    my_data_element.add_rows(add_df)\n\nst.button(\"Regenerate\")\n```\n\n----------------------------------------\n\nTITLE: Editing Dataframes with Streamlit Data Editor\nDESCRIPTION: This code snippet demonstrates the use of st.data_editor in Streamlit for creating an editable dataframe interface. Users can interactively edit cell values, and the edited data is returned to the Python side. It needs Streamlit and Pandas libraries. The dataframe is provided as input, and the edited version is captured. The code identifies the favorite command based on the highest rating.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(\n    [\n        {\"command\": \"st.selectbox\", \"rating\": 4, \"is_widget\": True},\n        {\"command\": \"st.balloons\", \"rating\": 5, \"is_widget\": False},\n        {\"command\": \"st.time_input\", \"rating\": 3, \"is_widget\": True},\n    ]\n)\n\nedited_df = st.data_editor(df) # 👈 An editable dataframe\n\nfavorite_command = edited_df.loc[edited_df[\"rating\"].idxmax()][\"command\"]\nst.markdown(f\"Your favorite command is **{favorite_command}** 🎈\")\n```\n\n----------------------------------------\n\nTITLE: Creating Text Area Widgets in Streamlit\nDESCRIPTION: Displays a multi-line text input widget for larger text entry. Returns the text entered by the user.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_74\n\nLANGUAGE: python\nCODE:\n```\ntext = st.text_area(\"Text to translate\")\n```\n\n----------------------------------------\n\nTITLE: Using Column Configuration API in Streamlit Data Editor\nDESCRIPTION: Example reference to the st.data_editor and st.dataframe APIs with column configuration capabilities. The configuration allows adding images, charts, URLs, and setting column properties like editability and categorical values.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/data_editor.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.data_editor\n```\n\nLANGUAGE: python\nCODE:\n```\nst.dataframe\n```\n\nLANGUAGE: python\nCODE:\n```\nst.column_config\n```\n\n----------------------------------------\n\nTITLE: Displaying Altair Charts in Streamlit\nDESCRIPTION: Renders an Altair chart in a Streamlit app using st.altair_chart. This allows you to create declarative visualizations with Altair and display them in your Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nst.altair_chart(my_altair_chart)\n```\n\n----------------------------------------\n\nTITLE: Form Implementation with Callbacks\nDESCRIPTION: Complex example showing how to use forms with callbacks and session state to track counter updates with timestamps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport datetime\n\nst.title('Counter Example')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n    st.session_state.last_updated = datetime.time(0,0)\n\ndef update_counter():\n    st.session_state.count += st.session_state.increment_value\n    st.session_state.last_updated = st.session_state.update_time\n\nwith st.form(key='my_form'):\n    st.time_input(label='Enter the time', value=datetime.datetime.now().time(), key='update_time')\n    st.number_input('Enter a value', value=0, step=1, key='increment_value')\n    submit = st.form_submit_button(label='Update', on_click=update_counter)\n\nst.write('Current Count = ', st.session_state.count)\nst.write('Last Updated = ', st.session_state.last_updated)\n```\n\n----------------------------------------\n\nTITLE: Creating Forms in Streamlit\nDESCRIPTION: Shows how to create a form in Streamlit that batches elements together with a 'Submit' button. This allows collecting multiple inputs before processing them all at once.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_132\n\nLANGUAGE: python\nCODE:\n```\nwith st.form(key='my_form'):\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n    st.form_submit_button(\"Sign up\")\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL Connection in Streamlit\nDESCRIPTION: Demonstrates how to create a SQL connection, query data, and display it in a Streamlit app. This snippet uses the st.connection method to establish a connection to a SQL database named 'pets_db'.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconn = st.connection('pets_db', type='sql')\npet_owners = conn.query('select * from pet_owners')\nst.dataframe(pet_owners)\n```\n\n----------------------------------------\n\nTITLE: Read Google Sheet Data with Streamlit (Python)\nDESCRIPTION: This Python code shows how to connect to a Google Sheet using `st.connection` and the `streamlit-gsheets-connection` library.  It reads data from the sheet and displays it in a Streamlit app using `st.write`. The `conn.read()` function fetches the data from the sheet, and the code iterates through the rows of the resulting DataFrame to display the data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/public-gsheet.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\nfrom streamlit_gsheets import GSheetsConnection\n\n# Create a connection object.\nconn = st.connection(\"gsheets\", type=GSheetsConnection)\n\ndf = conn.read()\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\n----------------------------------------\n\nTITLE: Creating Editable Data Editor in Streamlit\nDESCRIPTION: Implements an editable data widget with dynamic row capability using st.data_editor(). Returns edited dataframe for further processing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nedited = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Bootstrap HTML Component in Streamlit\nDESCRIPTION: Example showing how to embed a Bootstrap 4 collapsible accordion using components.html(). Demonstrates static HTML rendering with external CSS and JavaScript dependencies.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/components-api.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport streamlit.components.v1 as components\n\n# bootstrap 4 collapse example\ncomponents.html(\n    \"\"\"\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"></script>\n    <div id=\"accordion\">\n      <div class=\"card\">\n        <div class=\"card-header\" id=\"headingOne\">\n          <h5 class=\"mb-0\">\n            <button class=\"btn btn-link\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n            Collapsible Group Item #1\n            </button>\n          </h5>\n        </div>\n        <div id=\"collapseOne\" class=\"collapse show\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\n          <div class=\"card-body\">\n            Collapsible Group Item #1 content\n          </div>\n        </div>\n      </div>\n      <div class=\"card\">\n        <div class=\"card-header\" id=\"headingTwo\">\n          <h5 class=\"mb-0\">\n            <button class=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n            Collapsible Group Item #2\n            </button>\n          </h5>\n        </div>\n        <div id=\"collapseTwo\" class=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordion\">\n          <div class=\"card-body\">\n            Collapsible Group Item #2 content\n          </div>\n        </div>\n      </div>\n    </div>\n    \"\"\",\n    height=600,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic SQLite Database Operations in Streamlit\nDESCRIPTION: Example showing how to create a connection, create tables, insert data, and query a SQLite database in Streamlit\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/connecting-to-data.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Create the SQL connection to pets_db as specified in your secrets file.\nconn = st.connection('pets_db', type='sql')\n\n# Insert some data with conn.session.\nwith conn.session as s:\n    s.execute('CREATE TABLE IF NOT EXISTS pet_owners (person TEXT, pet TEXT);')\n    s.execute('DELETE FROM pet_owners;')\n    pet_owners = {'jerry': 'fish', 'barbara': 'cat', 'alex': 'puppy'}\n    for k in pet_owners:\n        s.execute(\n            'INSERT INTO pet_owners (person, pet) VALUES (:owner, :pet);',\n            params=dict(owner=k, pet=pet_owners[k])\n        )\n    s.commit()\n\n# Query and display the data you inserted\npet_owners = conn.query('select * from pet_owners')\nst.dataframe(pet_owners)\n```\n\n----------------------------------------\n\nTITLE: Testing Text Elements in Streamlit Using AppTest - Python\nDESCRIPTION: This snippet demonstrates how to test the text elements of a Streamlit application, ensuring that headers, subheaders, and other textual components contain the expected values and formats.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/cheat-sheet.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# Headers\nassert \"My app\" in at.title[0].value\nassert \"New topic\" in at.header[0].value\nassert \"Interesting sub-topic\" in at.subheader[0].value\nassert len(at.divider) == 2\n\n# Body / code\nassert \"Hello, world!\" in at.markdown[0].value\nassert \"import streamlit as st\" in at.code[0].value\nassert \"A cool diagram\" in at.caption[0].value\nassert \"Hello again, world!\" in at.text[0].value\nassert \"\\int a x^2 \\,dx\" in at.latex[0].value\n```\n\n----------------------------------------\n\nTITLE: Displaying Static Tables in Streamlit\nDESCRIPTION: Creates a static table display of data using st.table(). Unlike dataframe, this view is not interactive.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.table(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Scatter Charts in Streamlit\nDESCRIPTION: Creates and displays a scatter chart using Streamlit's built-in st.scatter_chart function. Takes a data frame as input and renders it as a scatter chart without requiring any additional configuration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.scatter_chart(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Caching Resources in Streamlit\nDESCRIPTION: Shows how to use the cache_resource decorator to cache functions that return global resources such as database connections or ML models. This example demonstrates caching a sentiment analysis model.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_140\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_resource\ndef init_model():\n  # Return a global resource here\n  return pipeline(\n    \"sentiment-analysis\",\n    model=\"distilbert-base-uncased-finetuned-sst-2-english\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Caching Data in Streamlit\nDESCRIPTION: Demonstrates how to use the cache_data decorator to cache functions that return data. This is useful for expensive computations or fetching data from the web to avoid redundant operations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_139\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef long_function(param1, param2):\n  # Perform expensive computation here or\n  # fetch data from the web here\n  return data\n```\n\n----------------------------------------\n\nTITLE: Creating a Chatbot UI in Streamlit\nDESCRIPTION: Implement a chatbot interface in Streamlit using the streamlit-chat component. This example shows how to display messages from both the user and the bot with different alignments.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_chat import message\n\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n```\n\n----------------------------------------\n\nTITLE: Implementing Streamlit App with GSheets Connection\nDESCRIPTION: This snippet demonstrates how to implement a Streamlit app to read data from a private Google Sheet. It uses `streamlit_gsheets` library to establish a connection and fetch data, which is then processed and displayed within the Streamlit interface. Users must ensure dependencies like `streamlit_gsheets` are installed and the app is configured with internet access.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/private-gsheet.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\nfrom streamlit_gsheets import GSheetsConnection\n\n# Create a connection object.\nconn = st.connection(\"gsheets\", type=GSheetsConnection)\n\ndf = conn.read()\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n\n```\n\nLANGUAGE: Python\nCODE:\n```\ndf = conn.read(\n    worksheet=\"Sheet1\",\n    ttl=\"10m\",\n    usecols=[0, 1],\n    nrows=3,\n)\n\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App Tests with GitHub Actions\nDESCRIPTION: This snippet configures the Streamlit App Action to test the application. It includes setting the 'app-path', installing 'pytest', and dependencies, running built-in smoke tests, and executing Python tests in the repository.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/automate-tests.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: streamlit/streamlit-app-action@v0.0.3\n  with:\n    app-path: streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Counter with Named Arguments in Callbacks\nDESCRIPTION: Shows how to implement a counter using callbacks with keyword arguments in Streamlit.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title('Counter Example using Callbacks with kwargs')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\ndef increment_counter(increment_value=0):\n    st.session_state.count += increment_value\n\ndef decrement_counter(decrement_value=0):\n    st.session_state.count -= decrement_value\n\nst.button('Increment', on_click=increment_counter,\n\tkwargs=dict(increment_value=5))\n\nst.button('Decrement', on_click=decrement_counter,\n\tkwargs=dict(decrement_value=1))\n\nst.write('Count = ', st.session_state.count)\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Logic with Streamlit - Python\nDESCRIPTION: This snippet defines the app logic for a login page utilizing Streamlit, including password verification and session state management. It uses the hmac library for secure password comparison.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"app.py\"\"\"\nimport streamlit as st\nimport hmac\n\nst.session_state.status = st.session_state.get(\"status\", \"unverified\")\nst.title(\"My login page\")\n\ndef check_password():\n    if hmac.compare_digest(st.session_state.password, st.secrets.password):\n        st.session_state.status = \"verified\"\n    else:\n        st.session_state.status = \"incorrect\"\n    st.session_state.password = \"\"\n\ndef login_prompt():\n    st.text_input(\"Enter password:\", key=\"password\", on_change=check_password)\n    if st.session_state.status == \"incorrect\":\n        st.warning(\"Incorrect password. Please try again.\")\n\ndef logout():\n    st.session_state.status = \"unverified\"\n\ndef welcome():\n    st.success(\"Login successful.\")\n    st.button(\"Log out\", on_click=logout)\n\n\nif st.session_state.status != \"verified\":\n    login_prompt()\n    st.stop()\nwelcome()\n```\n\n----------------------------------------\n\nTITLE: Using Callback Functions with Forms in Streamlit\nDESCRIPTION: This snippet illustrates how to use callback functions within a form in Streamlit. It updates a session state variable to track attendance and displays information about user interactions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/widget-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif \"attendance\" not in st.session_state:\n    st.session_state.attendance = set()\n\n\ndef take_attendance():\n    if st.session_state.name in st.session_state.attendance:\n        st.info(f\"{st.session_state.name} has already been counted.\")\n    else:\n        st.session_state.attendance.add(st.session_state.name)\n\n\nwith st.form(key=\"my_form\"):\n    st.text_input(\"Name\", key=\"name\")\n    st.form_submit_button(\"I\\'m here!\", on_click=take_attendance)\n```\n\n----------------------------------------\n\nTITLE: Displaying Static Table in Streamlit\nDESCRIPTION: Creates a non-interactive static table display for data presentation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nst.table(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Querying BigQuery Data in Streamlit App\nDESCRIPTION: This Python script creates a Streamlit app that connects to BigQuery, performs a query, and displays the results. It uses service account credentials from Streamlit secrets and implements caching for efficiency.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/bigquery.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\nfrom google.oauth2 import service_account\nfrom google.cloud import bigquery\n\n# Create API client.\ncredentials = service_account.Credentials.from_service_account_info(\n    st.secrets[\"gcp_service_account\"]\n)\nclient = bigquery.Client(credentials=credentials)\n\n# Perform query.\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\n@st.cache_data(ttl=600)\ndef run_query(query):\n    query_job = client.query(query)\n    rows_raw = query_job.result()\n    # Convert to list of dicts. Required for st.cache_data to hash the return value.\n    rows = [dict(row) for row in rows_raw]\n    return rows\n\nrows = run_query(\"SELECT word FROM `bigquery-public-data.samples.shakespeare` LIMIT 10\")\n\n# Print results.\nst.write(\"Some wise words from Shakespeare:\")\nfor row in rows:\n    st.write(\"✍️ \" + row['word'])\n```\n\n----------------------------------------\n\nTITLE: Displaying Badges with st.badge in Streamlit\nDESCRIPTION: Use st.badge to display small, colored badges in Streamlit apps, useful for highlighting new features, status indicators, or important flags to users.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nst.badge(\"New\")\n```\n\n----------------------------------------\n\nTITLE: Counter with Callbacks\nDESCRIPTION: Shows how to implement a counter using callbacks with Streamlit's session state.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title('Counter Example using Callbacks')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\ndef increment_counter():\n    st.session_state.count += 1\n\nst.button('Increment', on_click=increment_counter)\n\nst.write('Count = ', st.session_state.count)\n```\n\n----------------------------------------\n\nTITLE: Basic AppTest Usage Example\nDESCRIPTION: Demonstrates initializing and running a basic AppTest instance with secrets and input validation\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/testing/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"streamlit_app.py\")\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n\nat.text_input(\"word\").input(\"Bazbat\").run()\nassert at.warning[0].value == \"Try again.\"\n```\n\n----------------------------------------\n\nTITLE: Adding Expandable Containers in Streamlit with Python\nDESCRIPTION: Shows how to use the `st.expander` function to create collapsible sections within a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_100\n\nLANGUAGE: Python\nCODE:\n```\nwith st.expander(\"Open to see more\"):\n  st.write(\"This is more content\")\n```\n\n----------------------------------------\n\nTITLE: Caching a Function with st.cache_data in Streamlit\nDESCRIPTION: This code snippet demonstrates how to cache a function in Streamlit using the `@st.cache_data` decorator. This decorator tells Streamlit to store the results of the function call and return the cached result when the same inputs occur again, avoiding repeated execution. This is the recommended way to cache computations that return data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/advanced-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"@st.cache_data\ndef long_running_function(param1, param2):\n    return …\"\n```\n\n----------------------------------------\n\nTITLE: Caching Data with Streamlit (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `@st.cache_data` decorator to cache the results of a function in Streamlit. This can significantly improve performance by avoiding re-computation when the function is called with the same inputs.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef load_data(nrows):\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive Dataframes in Streamlit\nDESCRIPTION: Creates an interactive table display of a dataframe using st.dataframe(). Allows users to sort and scroll through data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.dataframe(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Adding Video Players to Streamlit Apps\nDESCRIPTION: Demonstrates embedding a video player in Streamlit using the st.video() function. Supports various input formats including numpy arrays, video bytes, files, and URLs.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.video(numpy_array)\nst.video(video_bytes)\nst.video(file)\nst.video(\"https://example.com/myvideo.mp4\", format=\"video/mp4\")\n```\n\n----------------------------------------\n\nTITLE: Display Message and Chart with st.chat_message in Streamlit\nDESCRIPTION: This snippet shows how to display a message and a bar chart within a chat message container using `st.chat_message`. It demonstrates how to include different types of Streamlit elements in a chat message. Passing in \"assistant\" as the author name uses a different default avatar and styling.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport numpy as np\n\nwith st.chat_message(\"assistant\"): # Corrected to \"assistant\" to match the description\n    st.write(\"Hello human\")\n    st.bar_chart(np.random.randn(30, 3))\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Widget IDs in Streamlit\nDESCRIPTION: This code snippet demonstrates how to prevent DuplicateWidgetID errors by using unique keys for identical widgets in Streamlit. Each widget should have a distinct key to ensure proper widget management within the app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/widget-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This will cause a DuplicateWidgetID error.\nst.button(\"OK\")\nst.button(\"OK\")\n```\n\nLANGUAGE: python\nCODE:\n```\nst.button(\"OK\", key=\"privacy\")\nst.button(\"OK\", key=\"terms\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Containers in Streamlit\nDESCRIPTION: Illustrates inserting popover containers that can open and close, providing additional configuration options for users.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_101\n\nLANGUAGE: Python\nCODE:\n```\nwith st.popover(\"Settings\"):\n  st.checkbox(\"Show completed\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Input in Streamlit\nDESCRIPTION: Demonstrates how to create a chat input widget that captures user messages and displays them. The widget returns the user's input which can then be processed and displayed.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/chat/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"The user has sent: {prompt}\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Plotly Charts in Streamlit\nDESCRIPTION: Renders an interactive Plotly chart in a Streamlit app using st.plotly_chart. This allows you to create interactive visualizations with Plotly and display them in your Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nst.plotly_chart(my_plotly_chart)\n```\n\n----------------------------------------\n\nTITLE: Defining Streamlit Page Properties\nDESCRIPTION: Shows how to define a new page in a Streamlit multipage app by specifying the page file, title, and icon\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/navigation/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhome = st.Page(\n    \"home.py\",\n    title=\"Home\",\n    icon=\":material/home:\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Session State Values in Streamlit\nDESCRIPTION: Shows different methods to update values in Session State using both attribute and dictionary APIs\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.session_state.key = 'value2'     # Attribute API\nst.session_state['key'] = 'value2'  # Dictionary like API\n```\n\n----------------------------------------\n\nTITLE: Display Welcome Message with st.chat_message in Streamlit\nDESCRIPTION: This code snippet demonstrates how to use `st.chat_message` to display a welcome message in a chat container. It uses the `with` notation to add content to the chat message container. The message is displayed with a default avatar and styling when 'user' is passed as the author name.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nwith st.chat_message(\"user\"): # Corrected to \"user\" to match the description\n    st.write(\"Hello 👋\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Connection in Streamlit\nDESCRIPTION: Demonstrates how to create a custom connection by subclassing BaseConnection. This example shows the implementation of a MyConnection class with custom _connect and query methods.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyConnection(BaseConnection[myconn.MyConnection]):\n    def _connect(self, **kwargs) -> MyConnection:\n        return myconn.connect(**self._secrets, **kwargs)\n    def query(self, query):\n        return self._instance.query(query)\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Camera Input in Streamlit\nDESCRIPTION: Use the camera-input-live component to capture and display live webcam images in Streamlit apps. This provides an alternative to the built-in camera_input function with real-time functionality.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom camera_input_live import camera_input_live\n\nimage = camera_input_live()\nst.image(value)\n```\n\n----------------------------------------\n\nTITLE: Querying Snowflake Database with Streamlit\nDESCRIPTION: This snippet shows how to create a connection to a Snowflake database using Streamlit and execute a SQL query. The results are displayed in the app. The connection handles secrets retrieval and caching behavior can be configured.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/snowflake.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\n\nconn = st.connection(\"snowflake\")\ndf = conn.query(\"SELECT * FROM mytable;\", ttl=\"10m\")\n\nfor row in df.itertuples():\n    st.write(f\"{row.NAME} has a :{row.PET}:\")\n```\n\n----------------------------------------\n\nTITLE: Caching DataFrame Loading in Streamlit\nDESCRIPTION: Example of loading and caching a large CSV dataset using st.cache_data. Shows both uncached and cached implementations for comparison.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef load_data(url):\n    df = pd.read_csv(url)  # 👈 Download the data\n    return df\n\ndf = load_data(\"https://github.com/plotly/datasets/raw/master/uber-rides-data1.csv\")\nst.dataframe(df)\n\nst.button(\"Rerun\")\n```\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data  # 👈 Add the caching decorator\ndef load_data(url):\n    df = pd.read_csv(url)\n    return df\n\ndf = load_data(\"https://github.com/plotly/datasets/raw/master/uber-rides-data1.csv\")\nst.dataframe(df)\n\nst.button(\"Rerun\")\n```\n\n----------------------------------------\n\nTITLE: Using st.download_button in Streamlit for Text and Binary File Downloads\nDESCRIPTION: This snippet demonstrates various ways to use Streamlit's download_button widget to enable file downloads in a Streamlit app. It shows how to download text files with different MIME types, binary files, and how to handle files from disk. The example also includes capturing the button's return value for additional interactivity.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/how-download-file-streamlit.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Text files\n\ntext_contents = '''\nFoo, Bar\n123, 456\n789, 000\n'''\n\n# Different ways to use the API\n\nst.download_button('Download CSV', text_contents, 'text/csv')\nst.download_button('Download CSV', text_contents)  # Defaults to 'text/plain'\n\nwith open('myfile.csv') as f:\n   st.download_button('Download CSV', f)  # Defaults to 'text/plain'\n\n# ---\n# Binary files\n\nbinary_contents = b'whatever'\n\n# Different ways to use the API\n\nst.download_button('Download file', binary_contents)  # Defaults to 'application/octet-stream'\n\nwith open('myfile.zip', 'rb') as f:\n   st.download_button('Download Zip', f, file_name='archive.zip')  # Defaults to 'application/octet-stream'\n\n# You can also grab the return value of the button,\n# just like with any other button.\n\nif st.download_button(...):\n   st.write('Thanks for downloading!')\n```\n\n----------------------------------------\n\nTITLE: Querying Neon Database in Streamlit Application\nDESCRIPTION: Python code for a Streamlit app that connects to a Neon database, performs a query, and displays the results. It demonstrates the use of st.connection for database operations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/neon.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\n\n# Initialize connection.\nconn = st.connection(\"neon\", type=\"sql\")\n\n# Perform query.\ndf = conn.query('SELECT * FROM home;', ttl=\"10m\")\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Magic Commands in Streamlit with Python\nDESCRIPTION: Shows various examples of using Magic commands in Streamlit to automatically display markdown text, dataframes, variables, and matplotlib charts without explicit st.write() calls.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/write-magic/magic.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Draw a title and some text to the app:\n'''\n# This is the document title\n\nThis is some _markdown_.\n'''\n\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1,2,3]})\ndf  # 👈 Draw the dataframe\n\nx = 10\n'x', x  # 👈 Draw the string 'x' and then the value of x\n\n# Also works with most supported chart types\nimport matplotlib.pyplot as plt\nimport numpy as np\n\narr = np.random.normal(1, 1, size=100)\nfig, ax = plt.subplots()\nax.hist(arr, bins=20)\n\nfig  # 👈 Draw a Matplotlib chart\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of st.table in Streamlit Python\nDESCRIPTION: Example showing how to use st.table to display static tables with Streamlit. This is the most basic way to display dataframes, though st.dataframe is recommended for interactive tables and st.data_editor for editable tables.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/table.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.table(data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectbox Column in Streamlit\nDESCRIPTION: This snippet demonstrates setting up a selectbox column with predefined options for app categories.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSelectboxColumn(\"App Category\", options=[\"🤖 LLM\", \"📈 Data Viz\"])\n```\n\n----------------------------------------\n\nTITLE: Caching UI Elements in Streamlit\nDESCRIPTION: Example demonstrating how to cache entire parts of the UI, including headers, charts, and dataframes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/cache-data.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef show_data():\n    st.header(\"Data analysis\")\n    data = api.get(...)\n    st.success(\"Fetched data from API!\")\n    st.write(\"Here is a plot of the data:\")\n    st.line_chart(data)\n    st.write(\"And here is the raw data:\")\n    st.dataframe(data)\n```\n\n----------------------------------------\n\nTITLE: Caching functions with input widgets\nDESCRIPTION: This snippet demonstrates the use of input widgets like `st.slider` within cached functions. It showcases the `experimental_allow_widgets` parameter, which enables widget replay. Streamlit treats the widget's value as an input parameter to the cached function, re-running the function only when the widget's value changes.  It is important to be cautious when using widgets in cached functions as it can lead to excessive memory usage.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data(experimental_allow_widgets=True)  # 👈 Set the parameter\ndef get_data():\n    num_rows = st.slider(\"Number of rows to get\")  # 👈 Add a slider\n    data = api.get(..., num_rows)\n    return data\n```\n\n----------------------------------------\n\nTITLE: Building Chat-Based Apps in Streamlit\nDESCRIPTION: Shows how to build chat-based applications using Streamlit's `st.chat_message` and `st.chat_input`. Demonstrates how to insert chat message containers and display a chat input widget.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Insert a chat message container.\nwith st.chat_message(\"user\"):\n    st.write(\"Hello 👋\")\n    st.line_chart(np.random.randn(30, 3))\n\n# Display a chat input widget at the bottom of the app.\nst.chat_input(\"Say something\")\n\n# Display a chat input widget inline.\nwith st.container():\n    st.chat_input(\"Say something\")\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Scatter Plot with Streamlit and Plotly Themes\nDESCRIPTION: Demonstrates how to create a scatter plot using Plotly Express with both Streamlit and native Plotly themes. Uses the gapminder dataset to visualize GDP per capita vs life expectancy across continents.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/plotly_chart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport streamlit as st\n\ndf = px.data.gapminder()\n\nfig = px.scatter(\n    df.query(\"year==2007\"),\n    x=\"gdpPercap\",\n    y=\"lifeExp\",\n    size=\"pop\",\n    color=\"continent\",\n    hover_name=\"country\",\n    log_x=True,\n    size_max=60,\n)\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Plotly native theme\"])\nwith tab1:\n    # Use the Streamlit theme.\n    # This is the default. So you can also omit the theme argument.\n    st.plotly_chart(fig, theme=\"streamlit\", use_container_width=True)\nwith tab2:\n    # Use the native Plotly theme.\n    st.plotly_chart(fig, theme=None, use_container_width=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Link Buttons in Streamlit\nDESCRIPTION: Displays a button that navigates to a specified URL when clicked. Provides a more button-like appearance compared to standard hyperlinks.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nst.link_button(\"Go to gallery\", url)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Streamlit Fragment for Daily Sales Data Visualization\nDESCRIPTION: A complete function decorated with @st.fragment that displays daily sales data with date selection. The fragment tracks month changes and triggers app reruns only when necessary, displaying best and worst sellers with dataframes and charts.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment\ndef show_daily_sales(data):\n    time.sleep(1)\n    selected_date = st.date_input(\n        \"Pick a day \",\n        value=date(2023, 1, 1),\n        min_value=date(2023, 1, 1),\n        max_value=date(2023, 12, 31),\n        key=\"selected_date\",\n    )\n\n    if \"previous_date\" not in st.session_state:\n        st.session_state.previous_date = selected_date\n    previous_date = st.session_state.previous_date\n    st.session_state.previous_date = selected_date\n    is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)\n    if is_new_month:\n        st.rerun()\n\n    st.header(f\"Best sellers, {selected_date:%m/%d/%y}\")\n    top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]\n    cols = st.columns([1, 4])\n    cols[0].dataframe(top_ten)\n    cols[1].bar_chart(top_ten)\n\n    st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\")\n    bottom_ten = data.loc[selected_date].sort_values()[0:10]\n    cols = st.columns([1, 4])\n    cols[0].dataframe(bottom_ten)\n    cols[1].bar_chart(bottom_ten)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Connections in Streamlit\nDESCRIPTION: Shows how to connect to a data source or API using st.connection. This example creates a SQL connection and queries pet owner data to display as a dataframe.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_144\n\nLANGUAGE: python\nCODE:\n```\nconn = st.connection('pets_db', type='sql')\npet_owners = conn.query('select * from pet_owners')\nst.dataframe(pet_owners)\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Streamlit Application Deployment\nDESCRIPTION: This Dockerfile sets up a Python environment, clones a Streamlit example repository, installs dependencies, and configures the container to run a Streamlit application on port 8501.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\n# app/Dockerfile\n\nFROM python:3.9-slim\n\nWORKDIR /app\n\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    curl \\\n    software-properties-common \\\n    git \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN git clone https://github.com/streamlit/streamlit-example.git .\n\nRUN pip3 install -r requirements.txt\n\nEXPOSE 8501\n\nHEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health\n\nENTRYPOINT [\"streamlit\", \"run\", \"streamlit_app.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]\n```\n\n----------------------------------------\n\nTITLE: Streaming Content with Typewriter Effect in Streamlit\nDESCRIPTION: Writes generators or streams to the app with a typewriter effect. This is useful for displaying streaming text from LLMs or other generator functions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_110\n\nLANGUAGE: python\nCODE:\n```\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Database in Streamlit App\nDESCRIPTION: Python code for a Streamlit app that connects to a PostgreSQL database, executes a query, and displays the results. It uses st.connection for secure database access and caching.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/postgresql.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\n\n# Initialize connection.\nconn = st.connection(\"postgresql\", type=\"sql\")\n\n# Perform query.\ndf = conn.query('SELECT * FROM mytable;', ttl=\"10m\")\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Feedback Widget in Streamlit\nDESCRIPTION: Displays a rating or sentiment button group that allows users to provide feedback. The 'stars' type displays a star rating system.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nst.feedback(\"stars\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Altair Charts with Streamlit and Native Themes\nDESCRIPTION: This snippet demonstrates how to create an Altair chart and display it in Streamlit using both the default Streamlit theme and the native Altair theme. It creates a scatter plot of car data and uses tabs to show the difference between themes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/altair_chart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nchart = alt.Chart(source).mark_circle().encode(\n    x='Horsepower',\n    y='Miles_per_Gallon',\n    color='Origin',\n).interactive()\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Altair native theme\"])\n\nwith tab1:\n    # Use the Streamlit theme.\n    # This is the default. So you can also omit the theme argument.\n    st.altair_chart(chart, theme=\"streamlit\", use_container_width=True)\nwith tab2:\n    # Use the native Altair theme.\n    st.altair_chart(chart, theme=None, use_container_width=True)\n```\n\n----------------------------------------\n\nTITLE: Simulate Chat Response Stream\nDESCRIPTION: Function to simulate a chat response stream using random lorem sentences. This function yields sentences with a delay to mimic real-time streaming of responses. No parameters are required, and the output is a generator object.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef chat_stream():\n    for i in range(randint(3, 9)):\n        yield lorem.sentence() + \" \"\n        time.sleep(0.2)\n```\n\n----------------------------------------\n\nTITLE: Sidebar Slider and Buttons for Stream Control in Streamlit\nDESCRIPTION: Adds a title, a slider for update frequency, and start/stop buttons to the sidebar. The buttons use the 'stream' state to enable/disable them and trigger the `toggle_streaming` function. These elements control the data stream within the Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"st.title(\\\"Data feed\\\")\nst.sidebar.slider(\n    \\\"Check for updates every: (seconds)\\\", 0.5, 5.0, value=1.0, key=\\\"run_every\\\"\n)\nst.sidebar.button(\n    \\\"Start streaming\\\", disabled=st.session_state.stream, on_click=toggle_streaming\n)\nst.sidebar.button(\n    \\\"Stop streaming\\\", disabled=not st.session_state.stream, on_click=toggle_streaming\n)\"\n```\n\n----------------------------------------\n\nTITLE: Recording Audio Input with Streamlit\nDESCRIPTION: Display a widget that allows users to record audio with their microphone using Streamlit's audio_input function.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nspeech = st.audio_input(\"Record a voice message\")\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Streamlit Multipage Apps\nDESCRIPTION: Shows the basic directory structure for a Streamlit multipage application with an entrypoint file and additional pages in the pages/ directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page_directory.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nyour_working_directory/\n├── pages/\n│   ├── a_page.py\n│   └── another_page.py\n└── your_homepage.py\n```\n\n----------------------------------------\n\nTITLE: Testing Element Access Methods in Streamlit AppTest\nDESCRIPTION: Collection of methods and properties for accessing different Streamlit elements and widgets during testing. These methods allow inspection and interaction with various UI components like buttons, inputs, and containers.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/testing/st.testing.v1.AppTest.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntest = AppTest()\n# Example element access methods\ntest.button\ntest.caption()\ntest.chat_input()\ntest.checkbox()\ntest.dataframe()\ntest.text_input()\ntest.slider()\n```\n\n----------------------------------------\n\nTITLE: Implementing Ag-Grid in Streamlit\nDESCRIPTION: Integrates Ag-Grid component for enhanced dataframe interaction. Supports editable grids and returns modified data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ngrid_return = AgGrid(df, editable=True)\n\nnew_df = grid_return['data']\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Process Control with Buttons in Streamlit\nDESCRIPTION: Implements a multi-stage process using buttons and session state to control flow between different stages of user input.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif 'stage' not in st.session_state:\n    st.session_state.stage = 0\n\ndef set_state(i):\n    st.session_state.stage = i\n\nif st.session_state.stage == 0:\n    st.button('Begin', on_click=set_state, args=[1])\n\nif st.session_state.stage >= 1:\n    name = st.text_input('Name', on_change=set_state, args=[2])\n\nif st.session_state.stage >= 2:\n    st.write(f'Hello {name}!')\n    color = st.selectbox(\n        'Pick a Color',\n        [None, 'red', 'orange', 'green', 'blue', 'violet'],\n        on_change=set_state, args=[3]\n    )\n    if color is None:\n        set_state(2)\n\nif st.session_state.stage >= 3:\n    st.write(f':{color}[Thank you!]')\n    st.button('Start Over', on_click=set_state, args=[0])\n```\n\n----------------------------------------\n\nTITLE: Displaying Toast Notifications in Streamlit\nDESCRIPTION: Shows a brief toast notification message in the bottom-right corner with an optional icon, useful for non-intrusive notifications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.toast('Butter!', icon='🧈')\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Page Apps in Streamlit\nDESCRIPTION: Shows how to use the st_pages component to create a multi-page Streamlit application. The example defines pages with their paths, titles, and icons.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_138\n\nLANGUAGE: python\nCODE:\n```\nfrom st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"🏠\"),\n  Page(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n```\n\n----------------------------------------\n\nTITLE: Caching PyTorch ResNet50 Machine Learning Model\nDESCRIPTION: Illustrates using st.cache_resource to load and cache a PyTorch ResNet50 model, preventing redundant model loading and improving application efficiency\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_resource\ndef load_model():\n    model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT)\n    model.eval()\n    return model\n\nmodel = load_model()\n```\n\n----------------------------------------\n\nTITLE: Using Control Flow in Streamlit\nDESCRIPTION: Illustrates how to control the flow of execution in a Streamlit app using `st.stop`, `st.rerun`, `st.switch_page`, `st.navigation`, `st.form`, `@st.dialog`, and `@st.fragment`. Shows how to stop execution, rerun the script, navigate to another page, group widgets in a form, define a dialog function, and define a fragment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Stop execution immediately:\nst.stop()\n# Rerun script immediately:\nst.rerun()\n# Navigate to another page:\nst.switch_page(\"pages/my_page.py\")\n\n# Define a navigation widget in your entrypoint file\npg = st.navigation(\n    st.Page(\"page1.py\", title=\"Home\", url_path=\"home\", default=True)\n    st.Page(\"page2.py\", title=\"Preferences\", url_path=\"settings\")\n)\npg.run()\n\n# Group multiple widgets:\nwith st.form(key=\"my_form\"):\n    username = st.text_input(\"Username\")\n    password = st.text_input(\"Password\")\n    st.form_submit_button(\"Login\")\n\n# Define a dialog function\n@st.dialog(\"Welcome!\")\ndef modal_dialog():\n    st.write(\"Hello\")\n\nmodal_dialog()\n\n# Define a fragment\n@st.fragment\ndef fragment_function():\n    df = get_data()\n    st.line_chart(df)\n    st.button(\"Update\")\n\nfragment_function()\n```\n\n----------------------------------------\n\nTITLE: Implementing _connect Method for DuckDB Connection in Python\nDESCRIPTION: This code implements the _connect method for the DuckDB connection. It handles connection initialization using provided kwargs or secrets, demonstrating how to set up the underlying connection.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/connecting-to-data.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef _connect(self, **kwargs) -> duckdb.DuckDBPyConnection:\n    if 'database' in kwargs:\n        db = kwargs.pop('database')\n    else:\n        db = self._secrets['database']\n    return duckdb.connect(database=db, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram of Pickups by Hour (Python)\nDESCRIPTION: This code generates a histogram of Uber pickups by hour using NumPy and displays it as a bar chart in Streamlit. It calculates the number of pickups for each hour of the day and then uses Streamlit's `st.bar_chart` to visualize the histogram.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nst.subheader('Number of pickups by hour')\n\nhist_values = np.histogram(\n    data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\n\nst.bar_chart(hist_values)\n```\n\n----------------------------------------\n\nTITLE: Creating Form Submit Buttons in Streamlit\nDESCRIPTION: Displays a form submit button for use within st.form context. Allows batch submission of multiple widget values at once.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nst.form_submit_button(\"Sign up\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Flow - Streamlit Python\nDESCRIPTION: This Python snippet demonstrates how to create a simple login flow in a Streamlit app using Google as the identity provider. It checks the login status and provides buttons to log in or out, showing a welcome message post-login. Includes placeholder login button functionality with Google.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\\n\\nif not st.experimental_user.is_logged_in:\\n    if st.button(\"Log in with Google\"):\\n        st.login()\\n    st.stop()\\n\\nif st.button(\"Log out\"):\\n    st.logout()\\nst.markdown(f\"Welcome! {st.experimental_user.name}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Writing in Streamlit\nDESCRIPTION: Shows how to write generators or streams to the app with a typewriter effect. This can be used with generators or LLM streams for dynamic content display.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/chat/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n```\n\n----------------------------------------\n\nTITLE: Session State Initialization\nDESCRIPTION: Example showing how to initialize variables in Streamlit's session state using both dictionary and attribute syntax.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Check if 'key' already exists in session_state\n# If not, then initialize it\nif 'key' not in st.session_state:\n    st.session_state['key'] = 'value'\n\n# Session State also supports the attribute based syntax\nif 'key' not in st.session_state:\n    st.session_state.key = 'value'\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Input in Streamlit\nDESCRIPTION: Displays a chat input widget designed for conversational interfaces. Returns the user-entered message when submitted.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"The user has sent: {prompt}\")\n```\n\n----------------------------------------\n\nTITLE: Testing Data Elements in Streamlit Using AppTest - Python\nDESCRIPTION: This snippet illustrates how to test various data elements in a Streamlit application, including dataframes, metrics, and JSON structures, ensuring they match expected values.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/cheat-sheet.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# dataframe\nexpected_df = pd.DataFrame([1, 2, 3])\nassert at.dataframe[0].value.equals(expected_df)\n\n# metric\nassert at.metric[0].value == \"9500\"\nassert at.metric[0].delta == \"1000\"\n\n# json\nassert at.json[0].value == '[\"hi\", {\"foo\": \"bar\"}]'\n\n# table\ntable_df = pd.DataFrame([1, 2, 3])\nassert at.table[0].value.equals(table_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Maps with Points using Streamlit\nDESCRIPTION: This snippet demonstrates how to display a map with plotted points using Streamlit's built-in map functionality, utilizing data from a pandas DataFrame.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nst.map(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Creating a Snowflake Connection in Streamlit\nDESCRIPTION: Shows how to create a connection to Snowflake using Streamlit's built-in SnowflakeConnection. This snippet demonstrates the simple syntax for establishing a Snowflake connection.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconn = st.connection('snowflake')\n```\n\n----------------------------------------\n\nTITLE: Custom Threads with ScriptRunContext - Python\nDESCRIPTION: This snippet illustrates how to create custom threads in a Streamlit app while being able to call Streamlit commands from within these threads by attaching the `ScriptRunContext`. This method allows for a seamless interaction with Streamlit APIs after ensuring that the context is correctly managed.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/multithreading.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom streamlit.runtime.scriptrunner import add_script_run_ctx, get_script_run_ctx\nimport time\nfrom threading import Thread\n\n\nclass WorkerThread(Thread):\n    def __init__(self, delay, target):\n        super().__init__()\n        self.delay = delay\n        self.target = target\n\n    def run(self):\n        # runs in custom thread, but can call Streamlit APIs\n        start_time = time.time()\n        time.sleep(self.delay)\n        end_time = time.time()\n        self.target.write(f\"start: {start_time}, end: {end_time}\")\n\ndelays = [5, 4, 3, 2, 1]\nresult_containers = []\nfor i, delay in enumerate(delays):\n    st.header(f\"Thread {i}\")\n    result_containers.append(st.container())\n\nthreads = [\n    WorkerThread(delay, container)\n    for delay, container in zip(delays, result_containers)\n]\nfor thread in threads:\n    add_script_run_ctx(thread, get_script_run_ctx())\n    thread.start()\n\nfor thread in threads:\n    thread.join()\n\nst.button(\"Rerun\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Chat Input with Streamlit Python\nDESCRIPTION: Captures user input using a Streamlit chat input field and appends the user's message to the chat history stored in the session state. This snippet also displays the user's message in the chat interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Accept user input\\nif prompt := st.chat_input(\\\"What is up?\\\"):\\n    # Add user message to chat history\\n    st.session_state.messages.append({\\\"role\\\": \\\"user\\\", \\\"content\\\": prompt})\\n    # Display user message in chat message container\\n    with st.chat_message(\\\"user\\\"):\\n        st.markdown(prompt)\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Map Form in Streamlit\nDESCRIPTION: Creates an interactive map with form controls for color, opacity and size parameters. Uses st.form to batch updates and prevent unnecessary reruns.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/forms.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndef get_data():\n    df = pd.DataFrame({\n        \"lat\": np.random.randn(200) / 50 + 37.76,\n        \"lon\": np.random.randn(200) / 50 + -122.4,\n        \"team\": ['A','B']*100\n    })\n    return df\n\nif st.button('Generate new points'):\n    st.session_state.df = get_data()\nif 'df' not in st.session_state:\n    st.session_state.df = get_data()\ndf = st.session_state.df\n\nwith st.form(\"my_form\"):\n    header = st.columns([1,2,2])\n    header[0].subheader('Color')\n    header[1].subheader('Opacity')\n    header[2].subheader('Size')\n\n    row1 = st.columns([1,2,2])\n    colorA = row1[0].color_picker('Team A', '#0000FF')\n    opacityA = row1[1].slider('A opacity', 20, 100, 50, label_visibility='hidden')\n    sizeA = row1[2].slider('A size', 50, 200, 100, step=10, label_visibility='hidden')\n\n    row2 = st.columns([1,2,2])\n    colorB = row2[0].color_picker('Team B', '#FF0000')\n    opacityB = row2[1].slider('B opacity', 20, 100, 50, label_visibility='hidden')\n    sizeB = row2[2].slider('B size', 50, 200, 100, step=10, label_visibility='hidden')\n\n    st.form_submit_button('Update map')\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Experimental User API in Python\nDESCRIPTION: Demonstrates how to use st.experimental_user to access authenticated user information in Streamlit apps. Returns user email for authenticated users on Community Cloud and supports additional authentication configuration through secrets.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/user/user.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.experimental_user\n```\n\nLANGUAGE: python\nCODE:\n```\nst.experimental_user.to_dict()\n```\n\n----------------------------------------\n\nTITLE: Importing BaseConnection Class in Python\nDESCRIPTION: This snippet shows how to import the BaseConnection class from Streamlit's connections module. It's the base class for creating custom data connections in Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/connections-baseconnection.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.connections import BaseConnection\n```\n\n----------------------------------------\n\nTITLE: Widget State Association Example\nDESCRIPTION: Demonstrates automatic Session State association with widgets using keys\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nst.text_input(\"Your name\", key=\"name\")\n\n# This exists now:\nst.session_state.name\n```\n\n----------------------------------------\n\nTITLE: Using Status Containers in Streamlit\nDESCRIPTION: Displays a status container to show the progress of long-running tasks. The status container remains visible while the enclosed function is executing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nwith st.status('Running'):\n  do_something_slow()\n```\n\n----------------------------------------\n\nTITLE: Displaying Full Session State Contents\nDESCRIPTION: Shows how to display the entire contents of Session State using write or magic commands\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.write(st.session_state)\n\n# With magic:\nst.session_state\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Input Widgets in Streamlit\nDESCRIPTION: Displays a chat input widget for text entry. Similar to text_input but designed specifically for chat interfaces with a send button.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"The user has sent: {prompt}\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive Widgets in Streamlit\nDESCRIPTION: Demonstrates how to use various interactive widgets in Streamlit, including buttons, download buttons, link buttons, page links, data editors, checkboxes, feedback, pills, radio buttons, segmented controls, toggles, select boxes, multiselect boxes, sliders, select sliders, text inputs, number inputs, text areas, date inputs, time inputs, file uploaders, audio inputs, camera inputs, and color pickers. It also shows how to use widgets' returned values and disable widgets.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nst.button(\"Click me\")\nst.download_button(\"Download file\", data)\nst.link_button(\"Go to gallery\", url)\nst.page_link(\"app.py\", label=\"Home\")\nst.data_editor(\"Edit data\", data)\nst.checkbox(\"I agree\")\nst.feedback(\"thumbs\")\nst.pills(\"Tags\", [\"Sports\", \"Politics\"])\nst.radio(\"Pick one\", [\"cats\", \"dogs\"])\nst.segmented_control(\"Filter\", [\"Open\", \"Closed\"])\nst.toggle(\"Enable\")\nst.selectbox(\"Pick one\", [\"cats\", \"dogs\"])\nst.multiselect(\"Buy\", [\"milk\", \"apples\", \"potatoes\"])\nst.slider(\"Pick a number\", 0, 100)\nst.select_slider(\"Pick a size\", [\"S\", \"M\", \"L\"])\nst.text_input(\"First name\")\nst.number_input(\"Pick a number\", 0, 10)\nst.text_area(\"Text to translate\")\nst.date_input(\"Your birthday\")\nst.time_input(\"Meeting time\")\nst.file_uploader(\"Upload a CSV\")\nst.audio_input(\"Record a voice message\")\nst.camera_input(\"Take a picture\")\nst.color_picker(\"Pick a color\")\n\n# Use widgets' returned values in variables:\nfor i in range(int(st.number_input(\"Num:\"))):\n    foo()\nif st.sidebar.selectbox(\"I:\",[\"f\"]) == \"f\":\n    b()\nmy_slider_val = st.slider(\"Quinn Mallory\", 1, 88)\nst.write(slider_val)\n\n# Disable widgets to remove interactivity:\nst.slider(\"Pick a number\", 0, 100, disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Data in Streamlit\nDESCRIPTION: Example demonstrating how to clear memoized values from all functions decorated with @st.cache_data using a button click.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/cache-data.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n@st.cache_data\ndef square(x):\n    return x**2\n\n@st.cache_data\ndef cube(x):\n    return x**3\n\nif st.button(\"Clear All\"):\n    # Clear values from *all* all in-memory and on-disk data caches:\n    # i.e. clear values from both square and cube\n    st.cache_data.clear()\n```\n\n----------------------------------------\n\nTITLE: Loading Remote URL in Streamlit iframe\nDESCRIPTION: Embeds an external webpage in your Streamlit app using the iframe component. This allows loading remote URLs within an iframe container.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/custom-components/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom st.components.v1 import iframe\niframe(\n    \"docs.streamlit.io\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 in Streamlit\nDESCRIPTION: Shows how to provide comprehensive login functionality inside Streamlit using the Auth0 component. The example initializes the login button with client ID and domain.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_152\n\nLANGUAGE: python\nCODE:\n```\nfrom auth0_component import login_button\n\nuser_info = login_button(clientId, domain = domain)\nst.write(user_info)\n```\n\n----------------------------------------\n\nTITLE: Editing List Data in Streamlit Data Editor\nDESCRIPTION: This code snippet shows how to use Streamlit's data editor to allow users to edit a list of colors. It uses the 'dynamic' option for num_rows to allow adding new items.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nedited_list = st.data_editor([\"red\", \"green\", \"blue\"], num_rows= \"dynamic\")\nst.write(\"Here are all the colors you entered:\")\nst.write(edited_list)\n```\n\n----------------------------------------\n\nTITLE: Customizing a Text Input Widget in Streamlit with Dynamic Properties\nDESCRIPTION: This example shows how to create and customize a text input widget with configurable label visibility, disabled state, and placeholder text. It uses session state to store widget values and demonstrates how to use columns for layout organization. The example also shows how to read input from the text widget and display it with conditional logic.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/text_input.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Store the initial value of widgets in session state\nif \"visibility\" not in st.session_state:\n    st.session_state.visibility = \"visible\"\n    st.session_state.disabled = False\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.checkbox(\"Disable text input widget\", key=\"disabled\")\n    st.radio(\n        \"Set text input label visibility 👉\",\n        key=\"visibility\",\n        options=[\"visible\", \"hidden\", \"collapsed\"],\n    )\n    st.text_input(\n        \"Placeholder for the other text input widget\",\n        \"This is a placeholder\",\n        key=\"placeholder\",\n    )\n\nwith col2:\n    text_input = st.text_input(\n        \"Enter some text 👇\",\n        label_visibility=st.session_state.visibility,\n        disabled=st.session_state.disabled,\n        placeholder=st.session_state.placeholder,\n    )\n\n    if text_input:\n        st.write(\"You entered: \", text_input)\n```\n\n----------------------------------------\n\nTITLE: Querying Data with SnowparkConnection in Streamlit (Python)\nDESCRIPTION: This method executes a SQL query on the Snowflake database and returns the result as a Pandas DataFrame. It supports parameterized queries and caching of results.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/connections-snowpark.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef query(self, sql: str, ttl: Optional[int] = None, **kwargs) -> pd.DataFrame:\n```\n\n----------------------------------------\n\nTITLE: Session State Update Operations\nDESCRIPTION: Shows different ways to update values in Streamlit's session state using both dictionary and attribute syntax.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif 'key' not in st.session_state:\n    st.session_state['key'] = 'value'\n\n# Updates\nst.session_state.key = 'value2'     # Attribute API\nst.session_state['key'] = 'value2'  # Dictionary like API\n```\n\n----------------------------------------\n\nTITLE: Displaying Bokeh Charts in Streamlit\nDESCRIPTION: Renders an interactive Bokeh chart in a Streamlit app using st.bokeh_chart. This allows you to create interactive visualizations with Bokeh and display them in your Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nst.bokeh_chart(my_bokeh_chart)\n```\n\n----------------------------------------\n\nTITLE: Displaying Timelines in Streamlit\nDESCRIPTION: Integrate interactive timelines into Streamlit apps using the streamlit-timeline component. This example loads timeline data from a JSON file and displays it with a specified height.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_timeline import timeline\n\nwith open('example.json', \"r\") as f:\n  timeline(f.read(), height=800)\n```\n\n----------------------------------------\n\nTITLE: Embedding Audio Players in Streamlit\nDESCRIPTION: Shows how to create an audio player in a Streamlit app using the st.audio() function. Supports various input formats including numpy arrays, audio bytes, files, and URLs.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.audio(numpy_array)\nst.audio(audio_bytes)\nst.audio(file)\nst.audio(\"https://example.com/myaudio.mp3\", format=\"audio/mp3\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Progress Bar in Streamlit\nDESCRIPTION: Creates an animated progress bar that updates as the loop iterates from 0 to 100, typically used to visualize the completion status of a long-running operation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(101):\n  st.progress(i)\n  do_something_slow()\n```\n\n----------------------------------------\n\nTITLE: Displaying Folium Maps in Streamlit\nDESCRIPTION: This snippet describes how to utilize Folium for rendering maps in Streamlit. It requires an instantiated Folium map object.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nm = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in Streamlit\nDESCRIPTION: Shows how to access secrets stored in a local TOML file using Streamlit's secrets singleton. This snippet demonstrates retrieving an OpenAI API key from the secrets.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nkey = st.secrets[\"OpenAI_key\"]\n```\n\n----------------------------------------\n\nTITLE: Caching UI elements using Streamlit\nDESCRIPTION: This code demonstrates caching entire parts of the UI. Streamlit commands within the cached function are replayed on subsequent runs, effectively caching the UI elements they generate. This technique can be used to optimize the performance of Streamlit applications by caching computationally expensive UI components.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef show_data():\n    st.header(\"Data analysis\")\n    data = api.get(...)\n    st.success(\"Fetched data from API!\")\n    st.write(\"Here is a plot of the data:\")\n    st.line_chart(data)\n    st.write(\"And here is the raw data:\")\n    st.dataframe(data)\n```\n\n----------------------------------------\n\nTITLE: Downloading Pandas DataFrame as CSV using Streamlit's download_button\nDESCRIPTION: This snippet demonstrates how to convert a Pandas DataFrame to CSV format and offer a download button for users. It uses st.cache_data to efficiently handle the conversion while preventing unnecessary recalculations when the app reruns.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/how-download-pandas-dataframe-csv.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.read_csv(\"dir/file.csv\")\n\n@st.cache_data\ndef convert_df(df):\n   return df.to_csv(index=False).encode('utf-8')\n\n\ncsv = convert_df(df)\n\nst.download_button(\n   \"Press to Download\",\n   csv,\n   \"file.csv\",\n   \"text/csv\",\n   key='download-csv'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Code Block in Streamlit\nDESCRIPTION: Uses st.code() to display a code block with optional syntax highlighting, making it easy to show code examples.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nst.code(\"a = 1234\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Display in Streamlit\nDESCRIPTION: Configures the display format and constraints for dataframe columns using st.column_config. Enables setting minimum values and custom formatting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.column_config.NumberColumn(\"Price (in USD)\", min_value=0, format=\"$%d\")\n```\n\n----------------------------------------\n\nTITLE: Using st.checkbox Widget in Streamlit\nDESCRIPTION: The st.checkbox function displays an interactive checkbox widget in Streamlit applications that can be used to toggle boolean states.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/checkbox.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.checkbox\n```\n\n----------------------------------------\n\nTITLE: Creating Mentions with Streamlit Extras\nDESCRIPTION: Uses the mention function from Streamlit Extras to create clickable mentions with icons and URLs, enhancing navigation and references in Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n```\n\n----------------------------------------\n\nTITLE: Adding Option Menus to Streamlit Apps\nDESCRIPTION: Create interactive option menus in Streamlit using the streamlit-option-menu component. This example demonstrates a menu with icons and a default selected item.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_option_menu import option_menu\n\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\n  icons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Editor Widget in Streamlit\nDESCRIPTION: Display an editable data table using Streamlit's data_editor function. The num_rows parameter is set to 'dynamic' to allow flexible row addition.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nedited = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n----------------------------------------\n\nTITLE: Streamlit App\nDESCRIPTION: This Streamlit app initializes a session state variable 'beans', displays a title, takes a number input for adding beans, and updates the bean count upon button click. It demonstrates basic Streamlit components like session state management, number input, buttons, and markdown display.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"app.py\"\"\"\nimport streamlit as st\n\n# Initialize st.session_state.beans\nst.session_state.beans = st.session_state.get(\"beans\", 0)\n\nst.title(\"Bean counter :paw_prints:\")\n\naddend = st.number_input(\"Beans to add\", 0, 10)\nif st.button(\"Add\"):\n    st.session_state.beans += addend\nst.markdown(f\"Beans counted: {st.session_state.beans}\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Provider in Streamlit - TOML\nDESCRIPTION: The following TOML configuration file sets up a basic OIDC provider using Google Identity for local development in Streamlit. It includes the necessary keys and values such as 'redirect_uri', 'cookie_secret', 'client_id', 'client_secret', and 'server_metadata_url'. Ensure the redirect URI and cookie secret are also configured with your identity provider.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[auth]\\nredirect_uri = \"http://localhost:8501/oauth2callback\"\\ncookie_secret = \"xxx\"\\nclient_id = \"xxx\"\\nclient_secret = \"xxx\"\\nserver_metadata_url = (\\n    \"https://accounts.google.com/.well-known/openid-configuration\"\\n)\n```\n\n----------------------------------------\n\nTITLE: Form Processing with Callbacks in Streamlit\nDESCRIPTION: Demonstrates processing form data using callbacks and session state to handle newly submitted values.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/forms.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif 'sum' not in st.session_state:\n    st.session_state.sum = ''\n\ndef sum():\n    result = st.session_state.a + st.session_state.b\n    st.session_state.sum = result\n\ncol1,col2 = st.columns(2)\ncol1.title('Sum:')\nif isinstance(st.session_state.sum, float):\n    col2.title(f'{st.session_state.sum:.2f}')\n\nwith st.form('addition'):\n    st.number_input('a', key = 'a')\n    st.number_input('b', key = 'b')\n    st.form_submit_button('add', on_click=sum)\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Slider in Streamlit\nDESCRIPTION: Displays a slider widget that allows users to select from predefined options. Returns the selected value.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsize = st.select_slider(\"Pick a size\", [\"S\", \"M\", \"L\"])\n```\n\n----------------------------------------\n\nTITLE: Displaying Data in Streamlit\nDESCRIPTION: Shows how to display data using Streamlit's `st.dataframe`, `st.table`, `st.json`, and `st.metric` functions. These allow for presenting data in tabular and JSON formats, as well as displaying key metrics.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nst.dataframe(my_dataframe)\nst.table(data.iloc[0:10])\nst.json({\"foo\":\"bar\",\"fu\":\"ba\"})\nst.metric(\"My metric\", 42, 2)\n```\n\n----------------------------------------\n\nTITLE: Editing Dictionaries in Streamlit Data Editor\nDESCRIPTION: This example demonstrates how to use Streamlit's data editor to edit a dictionary containing information about Streamlit elements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nst.data_editor({\n\t\"st.text_area\": \"widget\",\n\t\"st.markdown\": \"element\"\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Streamlit Function Caching\nDESCRIPTION: Basic example of caching a long-running function using the st.cache_data decorator. This decorator checks input parameters and function code to determine if cached results can be used.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef long_running_function(param1, param2):\n    return …\n```\n\n----------------------------------------\n\nTITLE: Writing the Streamlit App - Python\nDESCRIPTION: This code snippet defines a Streamlit application that connects to a TigerGraph database using the pyTigerGraph library. It initializes the connection, retrieves data using a particular query, and displays the results. The use of caching is demonstrated to enhance performance.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tigergraph.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"# streamlit_app.py\\n\\nimport streamlit as st\\nimport pyTigerGraph as tg\\n\\n# Initialize connection.\\nconn = tg.TigerGraphConnection(**st.secrets[\\\"tigergraph\\\"])\\nconn.apiToken = conn.getToken(conn.createSecret())\\n\\n# Pull data from the graph by running the \\\"mostDirectInfections\\\" query.\\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\\n@st.cache_data(ttl=600)\\ndef get_data():\\n    most_infections = conn.runInstalledQuery(\\\"mostDirectInfections\\\")[0][\\\"Answer\\\"][0]\\n    return most_infections[\\\"v_id\\\"], most_infections[\\\"attributes\\\"]\\n\\nitems = get_data()\\n\\n# Print results.\\nst.title(f\\\"Patient {items[0]} has the most direct infections\\\")\\nfor key, val in items[1].items():\\n    st.write(f\\\"Patient {items[0]}'s {key} is {val}.\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Connection in Streamlit\nDESCRIPTION: Demonstrates how to create a connection to Snowflake using the built-in SnowflakeConnection class.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_145\n\nLANGUAGE: python\nCODE:\n```\nconn = st.connection('snowflake')\n```\n\n----------------------------------------\n\nTITLE: Displaying GraphViz Charts in Streamlit\nDESCRIPTION: Renders a GraphViz chart in a Streamlit app using st.graphviz_chart. This allows you to create graph visualizations with the dagre-d3 library and display them in your Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nst.graphviz_chart(my_graphviz_spec)\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Comparison in Streamlit\nDESCRIPTION: Shows how to create an image comparison slider in Streamlit using the streamlit-image-comparison component, which is based on JuxtaposeJS and created by @fcakyon.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=\"image1.jpg\", img2=\"image2.jpg\",)\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Pandas (Python)\nDESCRIPTION: This code defines a function `load_data` that loads data from a CSV file using Pandas, converts column names to lowercase, and converts a specific column to datetime format. It takes the number of rows to load as input and returns a Pandas DataFrame.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDATE_COLUMN = 'date/time'\nDATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\n\ndef load_data(nrows):\n    data = pd.read_csv(DATA_URL, nrows=nrows)\n    lowercase = lambda x: str(x).lower()\n    data.rename(lowercase, axis='columns', inplace=True)\n    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\n    return data\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Message Container in Streamlit\nDESCRIPTION: Shows how to create a chat message container that can display various Streamlit elements including text and charts. This example creates a user message containing both text and a line chart.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/chat/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nwith st.chat_message(\"user\"):\n    st.write(\"Hello 👋\")\n    st.line_chart(np.random.randn(30, 3))\n```\n\n----------------------------------------\n\nTITLE: Basic Streamlit App Execution\nDESCRIPTION: The standard method to run a Streamlit application using the streamlit run command. This launches a local Streamlit server and opens the app in the default web browser.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/run-your-app.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_script.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider for Numeric Input in Streamlit\nDESCRIPTION: Displays a slider widget that allows users to select a value within a specified range. Returns the selected numeric value.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nnumber = st.slider(\"Pick a number\", 0, 100)\n```\n\n----------------------------------------\n\nTITLE: Using Lottie Animations in Streamlit\nDESCRIPTION: Incorporates Lottie animations into a Streamlit app using the streamlit-lottie component. The example loads a Lottie animation from a URL and displays it with a specific key identifier.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nlottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Streamlit Selectbox with Label Visibility Control\nDESCRIPTION: Demonstrates how to create a selectbox widget with dynamic label visibility and disabled state control. Uses session state to maintain widget values and includes controls to toggle visibility modes and disabled state.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/selectbox.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Store the initial value of widgets in session state\nif \"visibility\" not in st.session_state:\n    st.session_state.visibility = \"visible\"\n    st.session_state.disabled = False\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.checkbox(\"Disable selectbox widget\", key=\"disabled\")\n    st.radio(\n        \"Set selectbox label visibility 👉\",\n        key=\"visibility\",\n        options=[\"visible\", \"hidden\", \"collapsed\"],\n    )\n\nwith col2:\n    option = st.selectbox(\n        \"How would you like to be contacted?\",\n        (\"Email\", \"Home phone\", \"Mobile phone\"),\n        label_visibility=st.session_state.visibility,\n        disabled=st.session_state.disabled,\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Column in Streamlit\nDESCRIPTION: This example shows how to create a checkbox column with a custom label and help text using markdown formatting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCheckboxColumn(\"Your favorite?\", help=\"Select your **favorite** widgets\")\n```\n\n----------------------------------------\n\nTITLE: Managing Query Parameters in Streamlit with Python\nDESCRIPTION: Using st.query_params to get, set, or clear the query parameters shown in the browser's URL bar. This allows for URL-based state management and sharing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.query_params[key] = value\nst.query_params.clear()\n```\n\n----------------------------------------\n\nTITLE: Using st.spinner in Streamlit Applications\nDESCRIPTION: st.spinner is a context manager that displays a temporary message while executing a block of code. It's commonly used to indicate loading or processing states to users.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/spinner.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith st.spinner('Loading...'):\n    time.sleep(5)\n    st.success('Done!')\n```\n\n----------------------------------------\n\nTITLE: Requirements.txt with Version Constraints\nDESCRIPTION: A requirements.txt file with specific version constraints. This example pins Streamlit to exactly version 1.24.1, requires Pandas greater than version 2.0, and NumPy less than or equal to version 1.25.1.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/deploy-your-app/app-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nstreamlit==1.24.1\npandas>2.0\nnumpy<=1.25.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message in Streamlit\nDESCRIPTION: Shows a formatted error message box with a red background, useful for alerting users to critical issues that prevent proper operation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nst.error(\"We encountered an error\")\n```\n\n----------------------------------------\n\nTITLE: Form Processing with Rerun in Streamlit\nDESCRIPTION: Shows how to process form data using st.rerun() to update content above the form after submission.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/forms.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif 'sum' not in st.session_state:\n    st.session_state.sum = ''\n\ncol1,col2 = st.columns(2)\ncol1.title('Sum:')\nif isinstance(st.session_state.sum, float):\n    col2.title(f'{st.session_state.sum:.2f}')\n\nwith st.form('addition'):\n    a = st.number_input('a')\n    b = st.number_input('b')\n    submit = st.form_submit_button('add')\n\nst.session_state.sum = a + b\nif submit:\n    st.rerun()\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Input in Streamlit\nDESCRIPTION: Displays a single-line text input widget that returns the entered text as a string.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nname = st.text_input(\"First name\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Matplotlib Figures in Streamlit\nDESCRIPTION: Renders a Matplotlib pyplot figure in a Streamlit app using st.pyplot. This allows you to create custom visualizations with Matplotlib and display them in your Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nst.pyplot(my_mpl_figure)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Menu Function in Python with Streamlit\nDESCRIPTION: The following functions `menu_with_redirect`, `menu`, `authenticated_menu`, and `unauthenticated_menu` establish a role-based dynamic navigation menu in Streamlit, utilizing session state to determine user roles and conditionally display menu options. Dependencies include the `streamlit` library, and key components involve role checking and conditional page linking.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/custom-navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\n\n\ndef authenticated_menu():\n    # Show a navigation menu for authenticated users\n    st.sidebar.page_link(\"app.py\", label=\"Switch accounts\")\n    st.sidebar.page_link(\"pages/user.py\", label=\"Your profile\")\n    if st.session_state.role in [\"admin\", \"super-admin\"]:\n        st.sidebar.page_link(\"pages/admin.py\", label=\"Manage users\")\n        st.sidebar.page_link(\n            \"pages/super-admin.py\",\n            label=\"Manage admin access\",\n            disabled=st.session_state.role != \"super-admin\",\n        )\n\n\ndef unauthenticated_menu():\n    # Show a navigation menu for unauthenticated users\n    st.sidebar.page_link(\"app.py\", label=\"Log in\")\n\n\ndef menu():\n    # Determine if a user is logged in or not, then show the correct\n    # navigation menu\n    if \"role\" not in st.session_state or st.session_state.role is None:\n        unauthenticated_menu()\n        return\n    authenticated_menu()\n\n\ndef menu_with_redirect():\n    # Redirect users to the main page if not logged in, otherwise continue to\n    # render the navigation menu\n    if \"role\" not in st.session_state or st.session_state.role is None:\n        st.switch_page(\"app.py\")\n    menu()\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggleable Content in Streamlit\nDESCRIPTION: Add toggleable content sections to Streamlit apps using the streamlit-extras library. This example shows how to create a clickable toggle that reveals additional content.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_extras.stoggle import stoggle\n\nstoggle(\n    \"Click me!\", \"\"\"🥷 Surprise! Here's some additional content\"\"\",)\n```\n\n----------------------------------------\n\nTITLE: Creating Checkboxes in Streamlit\nDESCRIPTION: Displays a checkbox widget that returns a boolean value indicating whether it's checked. Used for binary options or toggles.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nselected = st.checkbox(\"I agree\")\n```\n\n----------------------------------------\n\nTITLE: Using Live Camera Input Component in Streamlit\nDESCRIPTION: Integrates the camera-input-live component to create a webcam stream that returns images in real-time. An alternative to the built-in st.camera_input.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nfrom camera_input_live import camera_input_live\n\nimage = camera_input_live()\nst.image(value)\n```\n\n----------------------------------------\n\nTITLE: Database Connection with st.connection in Streamlit\nDESCRIPTION: This code snippet shows how to connect to a database using `st.connection` in Streamlit. It retrieves data from a table in the database and displays it as a DataFrame.  The connection details are managed through Streamlit's secrets management, allowing for secure storage of sensitive information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/advanced-concepts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nconn = st.connection(\"my_database\")\ndf = conn.query(\"select * from my_table\")\nst.dataframe(df)\n```\n\n----------------------------------------\n\nTITLE: Creating a Download Button in Streamlit\nDESCRIPTION: Displays a download button that allows users to download a file when clicked. The file parameter should contain the data to be downloaded.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.download_button(\"Download file\", file)\n```\n\n----------------------------------------\n\nTITLE: Basic Camera Input Usage in Streamlit\nDESCRIPTION: Demonstrates the basic usage of st.camera_input widget to capture images and read the buffer as bytes data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/camera_input.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as bytes:\n    bytes_data = img_file_buffer.getvalue()\n    # Check the type of bytes_data:\n    # Should output: <class 'bytes'>\n    st.write(type(bytes_data))\n```\n\n----------------------------------------\n\nTITLE: Creating Button Widgets in Streamlit\nDESCRIPTION: Displays a clickable button widget that returns a boolean value when clicked. The button state is reset on each rerun of the Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nclicked = st.button(\"Click me\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Columns for Empty Dataframe in Streamlit\nDESCRIPTION: This code snippet shows how to configure columns for an empty dataframe in Streamlit's data editor. It sets up custom column types, including a required text column, a number column with range limits, and a selectbox column with predefined options.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.DataFrame(columns=['name','age','color'])\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\nconfig = {\n    'name' : st.column_config.TextColumn('Full Name (required)', width='large', required=True),\n    'age' : st.column_config.NumberColumn('Age (years)', min_value=0, max_value=122),\n    'color' : st.column_config.SelectboxColumn('Favorite Color', options=colors)\n}\n\nresult = st.data_editor(df, column_config = config, num_rows='dynamic')\n\nif st.button('Get results'):\n    st.write(result)\n```\n\n----------------------------------------\n\nTITLE: Initialize Chat History and Display Messages in Streamlit\nDESCRIPTION: This code initializes the chat history using Streamlit's session state and displays existing chat messages.  If the `messages` key doesn't exist in `st.session_state`, it's initialized as an empty list. It iterates through the chat history and displays each message in a chat message container with its role and content.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title(\"Echo Bot\")\n\n# Initialize chat history\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# Display chat messages from history on app rerun\nfor message in st.session_state.messages:\n    with st.chat_message(message[\"role\"]):\n        st.markdown(message[\"content\"])\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with Button Keys in Streamlit\nDESCRIPTION: This snippet demonstrates how to use button keys and session state to conditionally execute code based on button clicks.  The `.get()` method handles cases where keys don't exist initially. The example uses `st.text_input` and `st.button` to create a simple interactive component.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Use the get method since the keys won't be in session_state\n# on the first script run\nif st.session_state.get('clear'):\n    st.session_state['name'] = ''\nif st.session_state.get('streamlit'):\n    st.session_state['name'] = 'Streamlit'\n\nst.text_input('Name', key='name')\n\nst.button('Clear name', key='clear')\nst.button('Streamlit!', key='streamlit')\n```\n\n----------------------------------------\n\nTITLE: Form Container Usage in Streamlit\nDESCRIPTION: Shows how to use forms as containers with direct method calls and variable assignment. Demonstrates form flexibility in layout and positioning.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/forms.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nanimal = st.form('my_animal')\n\nsound = st.selectbox('Sounds like', ['meow','woof','squeak','tweet'])\n\nsubmit = animal.form_submit_button(f'Say it with {sound}!')\nsentence = animal.text_input('Your sentence:', 'Where\\'s the tuna?')\nsay_it = sentence.rstrip('.,!?') + f', {sound}!'\nif submit:\n    animal.subheader(say_it)\nelse:\n    animal.subheader('&nbsp;')\n```\n\n----------------------------------------\n\nTITLE: Using st.write_stream for Typewriter Effects in Streamlit\nDESCRIPTION: Shows how to use st.write_stream to display generators or streams with a typewriter effect. This is useful for displaying output from language models or other streaming data sources.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/write-magic/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Elements Component for Dashboards\nDESCRIPTION: Integrates the Streamlit Elements third-party component to create draggable and resizable dashboards. Enables Material UI components within Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_elements import elements, mui, html\n\nwith elements(\"new_element\"):\n  mui.Typography(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Chart Column in Streamlit\nDESCRIPTION: This example shows how to configure a line chart column for displaying sales data with defined y-axis range.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nLineChartColumn(\"Sales (last 6 months)\" y_min=0, y_max=100)\n```\n\n----------------------------------------\n\nTITLE: Creating a Segmented Control in Streamlit\nDESCRIPTION: Displays a segmented-button selection widget that allows users to select an option from a horizontal group of options.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nst.segmented_control(\"Filter\", [\"Open\", \"Closed\", \"All\"])\n```\n\n----------------------------------------\n\nTITLE: Using st.page_link in Streamlit\nDESCRIPTION: st.page_link is a Streamlit widget that displays a link to another page in a multipage app or to an external page. It provides navigation functionality for building multi-page Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/page_link.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.page_link\n```\n\n----------------------------------------\n\nTITLE: Testing Layouts and Containers in Streamlit Using AppTest - Python\nDESCRIPTION: This snippet exemplifies how to test various layout components like sidebars, columns, and tabs in Streamlit applications, ensuring proper configuration and content display.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/cheat-sheet.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# sidebar\nat.sidebar.text_input[0].set_value(\"Jane Doe\")\n\n# columns\nat.columns[1].markdown[0].value == \"Hello, world!\"\n\n# tabs\nat.tabs[2].markdown[0].value == \"Hello, yourself!\"\n```\n\n----------------------------------------\n\nTITLE: Styling Metric Cards in Streamlit\nDESCRIPTION: Applies custom styling to metric cards using Streamlit Extras library.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\n\nstyle_metric_cards()\n```\n\n----------------------------------------\n\nTITLE: Displaying Chat History in Streamlit\nDESCRIPTION: Code that iterates through the chat history stored in session state and displays each message in the appropriate chat message container using Streamlit's chat UI components.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor message in st.session_state.history:\n    with st.chat_message(message[\"role\"]):\n        st.write(message[\"content\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiselect Widget in Streamlit\nDESCRIPTION: Displays a multiselect dropdown that allows users to select multiple options from a list. Returns a list of selected options.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nchoices = st.multiselect(\"Buy\", [\"milk\", \"apples\", \"potatoes\"])\n```\n\n----------------------------------------\n\nTITLE: Generating Random Member Data with Caching in Streamlit Python\nDESCRIPTION: This snippet defines a function to generate random member data using `Faker` and `numpy`, and caches the result for performance optimization. The function parameters allow adjusting the number of members and the randomization seed, and it returns the data as a `pandas.DataFrame`. This requires Streamlit version 1.35.0 or higher.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport streamlit as st\n\nfrom faker import Faker\n\n@st.cache_data\ndef get_profile_dataset(number_of_items: int = 20, seed: int = 0) -> pd.DataFrame:\n    new_data = []\n\n    fake = Faker()\n    np.random.seed(seed)\n    Faker.seed(seed)\n\n    for i in range(number_of_items):\n        profile = fake.profile()\n        new_data.append(\n            {\n                \"name\": profile[\"name\"],\n                \"daily_activity\": np.random.rand(25),\n                \"activity\": np.random.randint(2, 90, size=12),\n            }\n        )\n\n    profile_df = pd.DataFrame(new_data)\n    return profile_df\n```\n\n----------------------------------------\n\nTITLE: Form Callbacks in Streamlit\nDESCRIPTION: Example of implementing callbacks with forms and accessing form widget values\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef form_callback():\n    st.write(st.session_state.my_slider)\n    st.write(st.session_state.my_checkbox)\n\nwith st.form(key='my_form'):\n    slider_input = st.slider('My slider', 0, 10, 5, key='my_slider')\n    checkbox_input = st.checkbox('Yes or No', key='my_checkbox')\n    submit_button = st.form_submit_button(label='Submit', on_click=form_callback)\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App from GitHub\nDESCRIPTION: Example of running a Streamlit app directly from a public GitHub repository or gist.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/run.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Extras Rain Animation Component\nDESCRIPTION: Implements a custom rain animation effect using the Streamlit Extras library, allowing emoji elements to fall down the screen with configurable properties.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_extras.let_it_rain import rain\n\nrain(emoji=\"🎈\", font_size=54,\n  falling_speed=5, animation_length=\"infinite\",)\n```\n\n----------------------------------------\n\nTITLE: Executing the Selected Page\nDESCRIPTION: Executes the page object returned by the navigation function, rendering the appropriate content based on user selection and role-based access control.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npg.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Expandable Section with Streamlit\nDESCRIPTION: Shows how to create an expandable/collapsible section using st.expander.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith st.expander(\"Open to see more\"):\n  st.write(\"This is more content\")\n```\n\n----------------------------------------\n\nTITLE: TensorFlow Image Processing with Streamlit Camera\nDESCRIPTION: Shows integration with TensorFlow for processing camera input, converting the image to a TensorFlow tensor.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/camera_input.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport tensorflow as tf\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as a 3D uint8 tensor with TensorFlow:\n    bytes_data = img_file_buffer.getvalue()\n    img_tensor = tf.io.decode_image(bytes_data, channels=3)\n\n    # Check the type of img_tensor:\n    # Should output: <class 'tensorflow.python.framework.ops.EagerTensor'>\n    st.write(type(img_tensor))\n\n    # Check the shape of img_tensor:\n    # Should output shape: (height, width, channels)\n    st.write(img_tensor.shape)\n```\n\n----------------------------------------\n\nTITLE: Random Data Generation with Session State in Streamlit\nDESCRIPTION: This code snippet demonstrates how to use Session State to generate random data once per session and persist it across reruns. A DataFrame is created with random numbers if it doesn't already exist in `st.session_state`. This ensures that each user sees different random data, but it doesn't change on them as they interact with the app. A color picker is also implemented, and it uses session state to keep the data the same between reruns when the color is being chosen.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/advanced-concepts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nif \"df\" not in st.session_state:\n    st.session_state.df = pd.DataFrame(np.random.randn(20, 2), columns=[\"x\", \"y\"])\n\nst.header(\"Choose a datapoint color\")\ncolor = st.color_picker(\"Color\", \"#FF0000\")\nst.divider()\nst.scatter_chart(st.session_state.df, x=\"x\", y=\"y\", color=color)\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Area Charts using Streamlit\nDESCRIPTION: This code snippet creates a simple area chart using Streamlit's built-in functionality. It requires a pandas DataFrame containing the data to visualize.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nst.area_chart(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Using Ag-Grid Component in Streamlit\nDESCRIPTION: Implements an editable Ag-Grid table component with data return functionality.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ngrid_return = AgGrid(df, editable=True)\n\nnew_df = grid_return['data']\n```\n\n----------------------------------------\n\nTITLE: Basic Streamlit App with Common Imports\nDESCRIPTION: Example Streamlit application showing common package imports including pandas, numpy, and built-in Python modules. Demonstrates which dependencies need to be explicitly installed versus those that come with Python or Streamlit.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/concepts/dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport math\nimport random\n\nst.write('Hi!')\n```\n\n----------------------------------------\n\nTITLE: Caching NumPy arrays with custom string hashing\nDESCRIPTION: This code demonstrates how to override Streamlit's default hashing for NumPy arrays.  The `hash_funcs` argument in `st.cache_data` is used to specify that NumPy arrays should be hashed by converting them to their string representation. While effective, the documentation cautions about the potential performance implications of this approach, especially for large arrays.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport numpy as np\nimport pandas as pd\nimport streamlit as st\n\n@st.cache_data\ndef get_data():\n    df = pd.DataFrame({\"num\": [112, 112, 2, 3], \"str\": [\"be\", \"a\", \"be\", \"c\"]})\n    return df\n\n@st.cache_data(hash_funcs={np.ndarray: str})\ndef show_data(data):\n    time.sleep(2)  # This makes the function take 2s to run\n    return data\n\ndf = get_data()\ndata = df[\"str\"].unique()\n\nst.dataframe(show_data(data))\nst.button(\"Re-run\")\n```\n\n----------------------------------------\n\nTITLE: Disabling or customizing the spinner with st.cache_data\nDESCRIPTION: These snippets demonstrate how to customize or disable the loading spinner that Streamlit displays when a cached function is running. The `show_spinner` parameter can be set to `False` to disable the spinner or to a string to display custom text during the function execution.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data(show_spinner=False)  # 👈 Disable the spinner\ndef get_api_data():\n    data = api.get(...)\n    return data\n\n@st.cache_data(show_spinner=\"Fetching data from API...\")  # 👈 Use custom text for spinner\ndef get_api_data():\n    data = api.get(...)\n    return data\n```\n\n----------------------------------------\n\nTITLE: Using st.tabs in Streamlit Applications\nDESCRIPTION: Function signature and usage example for creating tabbed containers in Streamlit. Used for organizing content into separate tabs that users can switch between.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/tabs.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.tabs\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages with st.error in Streamlit\nDESCRIPTION: Shows the syntax for displaying an error message using Streamlit's error() function. The error message appears in red with an error icon to alert users of problems or error conditions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/error.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.error(\"Error message\")\n```\n\n----------------------------------------\n\nTITLE: Storing and Loading Widget Values with Session State in Streamlit\nDESCRIPTION: This snippet showcases a functional approach to storing and loading widget values in Streamlit's session state. The `store_value` function updates the original key with the value from a temporary key, while the `load_value` function initializes the temporary key with the current value of the original key. This pattern is used to retain widget state when the widget is re-rendered.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/widget-behavior.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef store_value(key):\n    st.session_state[key] = st.session_state[\"_\"+key]\ndef load_value(key):\n    st.session_state[\"_\"+key] = st.session_state[key]\n\nload_value(\"my_key\")\nst.number_input(\"Number of filters\", key=\"_my_key\", on_change=store_value, args=[\"my_key\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Rules with st.divider in Streamlit\nDESCRIPTION: This example demonstrates how to use st.divider() to create horizontal rules that separate different UI elements in a Streamlit app. The code creates text elements and a slider with dividers in between, showing how dividers can improve visual organization of app components.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/divider.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.write(\"This is some text.\")\n\nst.slider(\"This is a slider\", 0, 100, (25, 75))\n\nst.divider()  # 👈 Draws a horizontal rule\n\nst.write(\"This text is between the horizontal rules.\")\n\nst.divider()  # 👈 Another horizontal rule\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Connection in Streamlit\nDESCRIPTION: Shows how to create a connection to a SQL database using the SQLConnection class, which uses SQLAlchemy under the hood.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_146\n\nLANGUAGE: python\nCODE:\n```\nconn = st.connection('sql')\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Chart Column in Streamlit\nDESCRIPTION: Configuration class for displaying line charts within dataframe columns in Streamlit. The LineChartColumn component allows customization of how line chart data is displayed within table cells.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/linechartcolumn.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.column_config.LineChartColumn\n```\n\n----------------------------------------\n\nTITLE: Using Plost for Line Charts in Streamlit\nDESCRIPTION: This example demonstrates the use of the Plost library to create line charts within a Streamlit application. The data and plotting parameters must be specified.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport plost\nplost.line_chart(my_dataframe, x='time', y='stock_value', color='stock_name',)\n```\n\n----------------------------------------\n\nTITLE: Using Chat UI Component in Streamlit\nDESCRIPTION: Integrates the streamlit-chat component to create a chatbot interface. Allows displaying messages with user/bot differentiation through alignment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_chat import message\n\nmessage(\"My message\")\nmessage(\"Hello bot!\", is_user=True)  # align's the message to the right\n```\n\n----------------------------------------\n\nTITLE: Creating Date Input Widgets in Streamlit\nDESCRIPTION: Displays a date picker widget that returns a datetime.date object. Allows users to select dates from a calendar interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_71\n\nLANGUAGE: python\nCODE:\n```\ndate = st.date_input(\"Your birthday\")\n```\n\n----------------------------------------\n\nTITLE: Creating Streamlit Page Links\nDESCRIPTION: Illustrates how to create clickable links to other pages in a Streamlit app, with optional labels and icons\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/navigation/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.page_link(\"app.py\", label=\"Home\", icon=\"🏠\")\nst.page_link(\"pages/profile.py\", label=\"Profile\")\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Connection in Streamlit (Python)\nDESCRIPTION: Python code for a Streamlit app that connects to MongoDB, retrieves data, and displays it. Uses caching for efficient data retrieval.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mongodb.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\nimport pymongo\n\n# Initialize connection.\n# Uses st.cache_resource to only run once.\n@st.cache_resource\ndef init_connection():\n    return pymongo.MongoClient(**st.secrets[\"mongo\"])\n\nclient = init_connection()\n\n# Pull data from the collection.\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\n@st.cache_data(ttl=600)\ndef get_data():\n    db = client.mydb\n    items = db.mycollection.find()\n    items = list(items)  # make hashable for st.cache_data\n    return items\n\nitems = get_data()\n\n# Print results.\nfor item in items:\n    st.write(f\"{item['name']} has a :{item['pet']}:\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Picker in Streamlit\nDESCRIPTION: Displays a color picker widget that allows users to select a color. Returns the selected color as a hexadecimal string.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncolor = st.color_picker(\"Pick a color\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Temporary Message Button in Streamlit\nDESCRIPTION: Shows how to create a button that displays a temporary message to check if an animal exists in a shelter list. The message disappears on next script rerun.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nanimal_shelter = ['cat', 'dog', 'rabbit', 'bird']\n\nanimal = st.text_input('Type an animal')\n\nif st.button('Check availability'):\n    have_it = animal.lower() in animal_shelter\n    'We have that animal!' if have_it else 'We don\\'t have that animal.'\n```\n\n----------------------------------------\n\nTITLE: Interactive Markdown Demo with Streamlit\nDESCRIPTION: This code creates an interactive Streamlit app that allows users to input markdown text in a text area, displays the corresponding code needed to implement it, and renders the markdown. It demonstrates both the input and output aspects of st.markdown.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/markdown.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nmd = st.text_area('Type in your markdown string (without outer quotes)',\n                  \"Happy Streamlit-ing! :balloon:\")\n\nst.code(f\"\"\"\nimport streamlit as st\n\nst.markdown('''{md}''')\n\"\"\")\n\nst.markdown(md)\n```\n\n----------------------------------------\n\nTITLE: Performing NLP Analysis with NLU Component\nDESCRIPTION: Use the NLU library to apply text mining and sentiment analysis on text data within Streamlit apps, providing natural language understanding capabilities.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nnlu.load('sentiment').predict('I love NLU! <3')\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive Dataframe in Streamlit\nDESCRIPTION: Creates an interactive dataframe display that allows sorting and filtering of data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nst.dataframe(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Complete Streamlit Data Streaming App\nDESCRIPTION: This is the complete code for a Streamlit app that streams two data series in a line chart. It initializes data on first load, provides buttons to start and stop streaming, and uses a fragment to manage the frequency of live updates.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"import streamlit as st\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n\ndef get_recent_data(last_timestamp):\n    \\\"\\\"\\\"Generate and return data from last timestamp to now, at most 60 seconds.\\\"\\\"\\\"    now = datetime.now()\n    if now - last_timestamp > timedelta(seconds=60):\n        last_timestamp = now - timedelta(seconds=60)\n    sample_time = timedelta(seconds=0.5)  # time between data points\n    next_timestamp = last_timestamp + sample_time\n    timestamps = np.arange(next_timestamp, now, sample_time)\n    sample_values = np.random.randn(len(timestamps), 2)\n\n    data = pd.DataFrame(sample_values, index=timestamps, columns=[\\\"A\\\", \\\"B\\\"])\n    return data\n\n\nif \\\"data\\\" not in st.session_state:\n    st.session_state.data = get_recent_data(datetime.now() - timedelta(seconds=60))\n\nif \\\"stream\\\" not in st.session_state:\n    st.session_state.stream = False\n\n\ndef toggle_streaming():\n    st.session_state.stream = not st.session_state.stream\n\n\nst.title(\\\"Data feed\\\")\nst.sidebar.slider(\n    \\\"Check for updates every: (seconds)\\\", 0.5, 5.0, value=1.0, key=\\\"run_every\\\"\n)\nst.sidebar.button(\n    \\\"Start streaming\\\", disabled=st.session_state.stream, on_click=toggle_streaming\n)\nst.sidebar.button(\n    \\\"Stop streaming\\\", disabled=not st.session_state.stream, on_click=toggle_streaming\n)\n\nif st.session_state.stream is True:\n    run_every = st.session_state.run_every\nelse:\n    run_every = None\n\n\n@st.fragment(run_every=run_every)\ndef show_latest_data():\n    last_timestamp = st.session_state.data.index[-1]\n    st.session_state.data = pd.concat(\n        [st.session_state.data, get_recent_data(last_timestamp)]\n    )\n    st.session_state.data = st.session_state.data[-100:]\n    st.line_chart(st.session_state.data)\n\n\nshow_latest_data()\"\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL Connection using SQLConnection in Streamlit\nDESCRIPTION: Illustrates how to create a connection to a SQL database using Streamlit's SQLConnection, which utilizes SQLAlchemy. This snippet shows the basic syntax for establishing a SQL connection.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconn = st.connection('sql')\n```\n\n----------------------------------------\n\nTITLE: Accessing user information in Streamlit\nDESCRIPTION: The st.experimental_user object provides access to information about the currently logged-in user, including checking login status and accessing user properties like name.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/user/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif st.experimental_user.is_logged_in:\n  st.write(f\"Welcome back, {st.experimental_user.name}!\")\n```\n\n----------------------------------------\n\nTITLE: Updating Header Using st.rerun in Streamlit\nDESCRIPTION: Demonstrates using st.rerun to update a header element when a button is clicked. Initializes a session state variable and reruns the script to update the display.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/rerun.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif \"value\" not in st.session_state:\n    st.session_state.value = \"Title\"\n\n##### Option using st.rerun #####\nst.header(st.session_state.value)\n\nif st.button(\"Foo\"):\n    st.session_state.value = \"Foo\"\n    st.rerun()\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Area in Streamlit\nDESCRIPTION: Displays a multi-line text input widget for larger text entries. Returns the entered text as a string.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ntext = st.text_area(\"Text to translate\")\n```\n\n----------------------------------------\n\nTITLE: Using ECharts in Streamlit\nDESCRIPTION: Implements an ECharts visualization in Streamlit using the streamlit-echarts component. The st_echarts function takes an options parameter that defines the chart configuration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_echarts import st_echarts\nst_echarts(options=options)\n```\n\n----------------------------------------\n\nTITLE: ML Model Inference Caching\nDESCRIPTION: Example of caching machine learning model predictions to avoid recomputation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef run_model(inputs):\n    return model(inputs)\n```\n\n----------------------------------------\n\nTITLE: Creating Page Links in Streamlit\nDESCRIPTION: Displays a link to another page in a multipage Streamlit app using st.page_link(). This allows users to navigate between pages with clickable links.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_129\n\nLANGUAGE: python\nCODE:\n```\nst.page_link(\"app.py\", label=\"Home\", icon=\"🏠\")\nst.page_link(\"pages/profile.py\", label=\"My profile\")\n```\n\n----------------------------------------\n\nTITLE: Basic Form with Default Values in Streamlit\nDESCRIPTION: Demonstrates basic form implementation with slider and selectbox widgets, showing how default values work before form submission.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/forms.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nwith st.form(\"my_form\"):\n   st.write(\"Inside the form\")\n   my_number = st.slider('Pick a number', 1, 10)\n   my_color = st.selectbox('Pick a color', ['red','orange','green','blue','violet'])\n   st.form_submit_button('Submit my picks')\n\n# This is outside the form\nst.write(my_number)\nst.write(my_color)\n```\n\n----------------------------------------\n\nTITLE: DataFrame Transformation Caching\nDESCRIPTION: Example of caching DataFrame transformation operations like filtering and applying functions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef transform(df):\n    df = df.filter(items=['one', 'three'])\n    df = df.apply(np.sum, axis=0)\n\treturn df\n```\n\n----------------------------------------\n\nTITLE: Initializing Chat History in Session State\nDESCRIPTION: Set up session state to manage chat history, allowing persistent storage of messages and their associated feedback across app reruns\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif \"history\" not in st.session_state:\n    st.session_state.history = []\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Threads Without Streamlit Commands - Python\nDESCRIPTION: This snippet demonstrates how to create custom threads without invoking Streamlit commands within those threads. It initializes five threads that simulate delays and captures their results, which are then displayed in the Streamlit app after all threads have completed execution.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/multithreading.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\nfrom threading import Thread\n\n\nclass WorkerThread(Thread):\n    def __init__(self, delay):\n        super().__init__()\n        self.delay = delay\n        self.return_value = None\n\n    def run(self):\n        start_time = time.time()\n        time.sleep(self.delay)\n        end_time = time.time()\n        self.return_value = f\"start: {start_time}, end: {end_time}\"\n\ndelays = [5, 4, 3, 2, 1]\nthreads = [WorkerThread(delay) for delay in delays]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nfor i, thread in enumerate(threads):\n    st.header(f\"Thread {i}\")\n    st.write(thread.return_value)\n\nst.button(\"Rerun\")\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Element Syntax Using With Notation\nDESCRIPTION: Shows how to add elements to the sidebar using the 'with' statement context manager.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/sidebar.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith st.sidebar:\n    st.[element_name]\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON Data in Streamlit\nDESCRIPTION: Shows dictionary or JSON data in a formatted, pretty-printed display.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nst.json(my_dict)\n```\n\n----------------------------------------\n\nTITLE: Accepting User Input in Streamlit Chat Interface\nDESCRIPTION: This snippet shows how to accept user input with st.chat_input, display it in a chat message container, and save it to chat history. It includes both the walrus operator (:=) syntax and the traditional assignment approach.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif prompt := st.chat_input(\"Say something\"):\n    with st.chat_message(\"user\"):\n        st.write(prompt)\n    st.session_state.history.append({\"role\": \"user\", \"content\": prompt})\n```\n\n----------------------------------------\n\nTITLE: Persisting Widget Values Between Pages in Streamlit\nDESCRIPTION: This snippet illustrates how to store widget values in Session State to ensure persistence when navigating between different pages. It uses a temporary key to store data that is then copied to a permanent key.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/widget-behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef store_value():\n    # Copy the value to the permanent key\n    st.session_state[\"my_key\"] = st.session_state[\"_my_key\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Button Widgets in Streamlit\nDESCRIPTION: Displays a radio button group for selecting one option from a list. Returns the value of the selected option.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nchoice = st.radio(\"Pick one\", [\"cats\", \"dogs\"])\n```\n\n----------------------------------------\n\nTITLE: Button Callback Function in Streamlit\nDESCRIPTION: This snippet showcases using a callback function with Streamlit buttons to update session state. The `st.button` widget's `on_click` parameter is used to trigger a function that modifies `st.session_state.name` based on the button clicked.  A simple text input is included for context.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.text_input('Name', key='name')\n\ndef set_name(name):\n    st.session_state.name = name\n\nst.button('Clear name', on_click=set_name, args=[''])\nst.button('Streamlit!', on_click=set_name, args=['Streamlit'])\n```\n\n----------------------------------------\n\nTITLE: Generating UI from Pydantic Models\nDESCRIPTION: Demonstrates auto-generating Streamlit UI components from Pydantic models.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit_pydantic as sp\n\nsp.pydantic_form(key=\"my_form\",\n  model=ExampleModel)\n```\n\n----------------------------------------\n\nTITLE: Creating Side-by-Side Columns in Streamlit\nDESCRIPTION: Creates two equal-width columns and adds content to each using the st.columns API.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncol1, col2 = st.columns(2)\ncol1.write(\"this is column 1\")\ncol2.write(\"this is column 2\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar Chart Column in Streamlit\nDESCRIPTION: This snippet demonstrates creating a bar chart column for visualizing marketing spend data with specified y-axis limits.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nBarChartColumn(\"Marketing spend\" y_min=0, y_max=100)\n```\n\n----------------------------------------\n\nTITLE: Capturing Images with Camera Input in Streamlit\nDESCRIPTION: Display a widget that enables users to capture and upload images directly from their camera using Streamlit's camera_input function.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimage = st.camera_input(\"Take a picture\")\n```\n\n----------------------------------------\n\nTITLE: Streamlit Buttons for Expensive Processes\nDESCRIPTION: This snippet demonstrates how to use Streamlit buttons to trigger expensive processes and store the results in session state. This prevents unnecessary re-execution of the process. The example includes a simulated expensive process that depends on an option and an add value and displays a Pandas DataFrame.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport time\n\ndef expensive_process(option, add):\n    with st.spinner('Processing...'):\n        time.sleep(5)\n    df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C':[7, 8, 9]}) + add\n    return (df, add)\n\ncols = st.columns(2)\noption = cols[0].selectbox('Select a number', options=['1', '2', '3'])\nadd = cols[1].number_input('Add a number', min_value=0, max_value=10)\n\nif 'processed' not in st.session_state:\n    st.session_state.processed = {}\n\n# Process and save results\nif st.button('Process'):\n    result = expensive_process(option, add)\n    st.session_state.processed[option] = result\n    st.write(f'Option {option} processed with add {add}')\n    result[0]\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML in Streamlit\nDESCRIPTION: Uses st.html() to render HTML strings directly in the Streamlit app, allowing for custom HTML content.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nst.html(\"<p>Foo bar.</p>\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Edited Data with Session State in Streamlit\nDESCRIPTION: This snippet demonstrates how to use Session State to access changes made to a dataframe in Streamlit's data editor. It sets a key for the editor and displays the value stored in Session State.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.data_editor(df, key=\"my_key\", num_rows=\"dynamic\") # 👈 Set a key\nst.write(\"Here's the value in Session State:\")\nst.write(st.session_state[\"my_key\"]) # 👈 Show the value in Session State\n```\n\n----------------------------------------\n\nTITLE: Displaying Progress and Status in Streamlit\nDESCRIPTION: Demonstrates how to display progress and status updates in Streamlit using `st.spinner`, `st.progress`, `st.status`, `st.balloons`, `st.snow`, `st.toast`, `st.error`, `st.warning`, `st.info`, `st.success`, and `st.exception`. Includes examples of showing a spinner, updating a progress bar, displaying a status message, and showing various types of messages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Show a spinner during a process\nwith st.spinner(text=\"In progress\"):\n    time.sleep(3)\n    st.success(\"Done\")\n\n# Show and update progress bar\nbar = st.progress(50)\ntime.sleep(3)\nbar.progress(100)\n\nwith st.status(\"Authenticating...\") as s:\n    time.sleep(2)\n    st.write(\"Some long response.\")\n    s.update(label=\"Response\")\n\nst.balloons()\nst.snow()\nst.toast(\"Warming up...\")\nst.error(\"Error message\")\nst.warning(\"Warning message\")\nst.info(\"Info message\")\nst.success(\"Success message\")\nst.exception(e)\n```\n\n----------------------------------------\n\nTITLE: Using AgGrid Component\nDESCRIPTION: Example demonstrating how to use the AgGrid component with a dataframe in a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAgGrid(my_dataframe)\n```\n\n----------------------------------------\n\nTITLE: Configuring TOML Secrets File\nDESCRIPTION: Example of setting up a secrets.toml file with database credentials and custom sections. Shows how to structure environment variables and nested configuration sections.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/secrets-management.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Everything in this section will be available as an environment variable\ndb_username = \"Jane\"\ndb_password = \"mypassword\"\n\n# You can also add other sections if you like.\n# The contents of sections as shown below will not become environment variables,\n# but they'll be easily accessible from within Streamlit anyway as we show\n# later in this doc.\n[my_other_secrets]\nthings_i_like = [\"Streamlit\", \"Python\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Plotting Demo Page in Streamlit\nDESCRIPTION: This code creates a plotting demo page that combines real-time plotting and animation. It generates random numbers in a loop for about 5 seconds, updates a progress bar, and displays the data in a line chart.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-a-multi-page-app.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\nimport numpy as np\n\nst.set_page_config(page_title=\"Plotting Demo\", page_icon=\"📈\")\n\nst.markdown(\"# Plotting Demo\")\nst.sidebar.header(\"Plotting Demo\")\nst.write(\n    \"\"\"This demo illustrates a combination of plotting and animation with\nStreamlit. We're generating a bunch of random numbers in a loop for around\n5 seconds. Enjoy!\"\"\"\n)\n\nprogress_bar = st.sidebar.progress(0)\nstatus_text = st.sidebar.empty()\nlast_rows = np.random.randn(1, 1)\nchart = st.line_chart(last_rows)\n\nfor i in range(1, 101):\n    new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)\n    status_text.text(\"%i%% Complete\" % i)\n    chart.add_rows(new_rows)\n    progress_bar.progress(i)\n    last_rows = new_rows\n    time.sleep(0.05)\n\nprogress_bar.empty()\n\n# Streamlit widgets automatically run the script from top to bottom. Since\n# this button is not connected to any other logic, it just causes a plain\n# rerun.\nst.button(\"Re-run\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Yearly Activity Comparison with Line Chart in Streamlit\nDESCRIPTION: Creates a header and line chart to visualize yearly activity data for selected members.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n    st.header(\"Yearly activity comparison\")\n    st.line_chart(activity_df)\n```\n\n----------------------------------------\n\nTITLE: Creating Main Entrypoint for Streamlit Multipage App\nDESCRIPTION: This code creates the main page (Hello.py) of a Streamlit multipage application. It sets the page configuration with a custom title and icon, and provides an introductory welcome message with links to Streamlit resources.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-a-multi-page-app.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.set_page_config(\n    page_title=\"Hello\",\n    page_icon=\"👋\",\n)\n\nst.write(\"# Welcome to Streamlit! 👋\")\n\nst.sidebar.success(\"Select a demo above.\")\n\nst.markdown(\n    \"\"\"\n    Streamlit is an open-source app framework built specifically for\n    Machine Learning and Data Science projects.\n    **👈 Select a demo from the sidebar** to see some examples\n    of what Streamlit can do!\n    ### Want to learn more?\n    - Check out [streamlit.io](https://streamlit.io)\n    - Jump into our [documentation](https://docs.streamlit.io)\n    - Ask a question in our [community\n        forums](https://discuss.streamlit.io)\n    ### See more complex demos\n    - Use a neural net to [analyze the Udacity Self-driving Car Image\n        Dataset](https://github.com/streamlit/demo-self-driving)\n    - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Loading Status (Python)\nDESCRIPTION: This code snippet demonstrates how to display a loading message while data is being loaded into a Pandas DataFrame using Streamlit. It uses `st.text` to update the loading status and notify the user when the data loading is complete.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create a text element and let the reader know the data is loading.\ndata_load_state = st.text('Loading data...')\n# Load 10,000 rows of data into the dataframe.\ndata = load_data(10000)\n# Notify the reader that the data was successfully loaded.\ndata_load_state.text('Loading data...done!')\n```\n\n----------------------------------------\n\nTITLE: Creating Select-Slider Widgets in Streamlit\nDESCRIPTION: Displays a slider widget to select items from a list. Combines the functionality of a slider with discrete values.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nsize = st.select_slider(\"Pick a size\", [\"S\", \"M\", \"L\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing Chat Session State in Streamlit\nDESCRIPTION: Code snippet that initializes the session state variables needed for the chat application. It sets up tracking for the current stage, message history, pending responses, and validation results.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif \"stage\" not in st.session_state:\n    st.session_state.stage = \"user\"\n    st.session_state.history = []\n    st.session_state.pending = None\n    st.session_state.validation = {}\n```\n\n----------------------------------------\n\nTITLE: Advanced Streamlit App with Login and Sections\nDESCRIPTION: Comprehensive implementation of a Streamlit app with login functionality, section headers, and dynamic page navigation based on login state.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page-and-navigation.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif \"logged_in\" not in st.session_state:\n    st.session_state.logged_in = False\n\ndef login():\n    if st.button(\"Log in\"):\n        st.session_state.logged_in = True\n        st.rerun()\n\ndef logout():\n    if st.button(\"Log out\"):\n        st.session_state.logged_in = False\n        st.rerun()\n\nlogin_page = st.Page(login, title=\"Log in\", icon=\":material/login:\")\nlogout_page = st.Page(logout, title=\"Log out\", icon=\":material/logout:\")\n\ndashboard = st.Page(\n    \"reports/dashboard.py\", title=\"Dashboard\", icon=\":material/dashboard:\", default=True\n)\nbugs = st.Page(\"reports/bugs.py\", title=\"Bug reports\", icon=\":material/bug_report:\")\nalerts = st.Page(\n    \"reports/alerts.py\", title=\"System alerts\", icon=\":material/notification_important:\"\n)\n\nsearch = st.Page(\"tools/search.py\", title=\"Search\", icon=\":material/search:\")\nhistory = st.Page(\"tools/history.py\", title=\"History\", icon=\":material/history:\")\n\nif st.session_state.logged_in:\n    pg = st.navigation(\n        {\n            \"Account\": [logout_page],\n            \"Reports\": [dashboard, bugs, alerts],\n            \"Tools\": [search, history],\n        }\n    )\nelse:\n    pg = st.navigation([login_page])\n\npg.run()\n```\n\n----------------------------------------\n\nTITLE: Caching TensorFlow model with custom hash function\nDESCRIPTION: This code snippet shows how to use a custom hash function with `st.cache_resource` to cache a TensorFlow model. The `hash_funcs` argument is used to specify a lambda function that extracts the `name` attribute of the `Functional` Keras model, allowing Streamlit to correctly identify and cache different model instances based on their names. This avoids the `UnhashableParamError` and ensures that the `load_layers` function is re-run when the base model changes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport tensorflow as tf\nfrom keras.engine.functional import Functional\n\n@st.cache_resource\ndef load_base_model(option):\n    if option == 1:\n        return tf.keras.applications.ResNet50(include_top=False, weights=\"imagenet\")\n    else:\n        return tf.keras.applications.MobileNetV2(include_top=False, weights=\"imagenet\")\n\n@st.cache_resource(hash_funcs={Functional: lambda x: x.name})\ndef load_layers(base_model):\n    return [layer.name for layer in base_model.layers]\n\noption = st.radio(\"Model 1 or 2\", [1, 2])\n\nbase_model = load_base_model(option)\n\nlayers = load_layers(base_model)\n\nst.write(layers)\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Column in Streamlit\nDESCRIPTION: This example shows how to set up a text column with a maximum character limit and a validation pattern using a regular expression.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTextColumn(\"Widgets\", max_chars=50, validate=\"^st\\.[a-z_]+$\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in Streamlit\nDESCRIPTION: Demonstrates how to use st.context to access cookies and headers, providing a read-only interface to this information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_143\n\nLANGUAGE: python\nCODE:\n```\nst.context.cookies\nst.context.headers\n```\n\n----------------------------------------\n\nTITLE: Creating Login Authentication Function in Streamlit\nDESCRIPTION: Implement a login function that allows users to select their role and update session state for role-based navigation\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef login():\n    st.header(\"Log in\")\n    role = st.selectbox(\"Choose your role\", ROLES)\n\n    if st.button(\"Log in\"):\n        st.session_state.role = role\n        st.rerun()\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets in TOML Format\nDESCRIPTION: Example of secrets.toml file structure showing how to define API keys, whitelists, and database credentials using TOML format. Demonstrates both top-level and nested configuration values.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/secrets-toml.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nOpenAI_key = \"your OpenAI key\"\nwhitelist = [\"sally\", \"bob\", \"joe\"]\n\n[database]\nuser = \"your username\"\npassword = \"your password\"\n```\n\n----------------------------------------\n\nTITLE: Showing Metrics with Delta in Streamlit\nDESCRIPTION: Displays a metric value with optional delta indicator using st.metric(). Useful for highlighting key performance indicators.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.metric(\"My metric\", 42, 2)\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Page Apps with Streamlit Pages\nDESCRIPTION: Illustrates the experimental use of `st_pages` to manage multiple pages in a single Streamlit application, including setting page titles and icons.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_106\n\nLANGUAGE: Python\nCODE:\n```\nfrom st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"🏠\"),\n  Page(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets in TOML File for Streamlit\nDESCRIPTION: Example of a secrets.toml file structure for storing various types of secrets including API keys, whitelists, and database credentials.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nOpenAI_key = \"your OpenAI key\"\nwhitelist = [\"sally\", \"bob\", \"joe\"]\n\n[database]\nuser = \"your username\"\npassword = \"your password\"\n```\n\n----------------------------------------\n\nTITLE: Stateful Counter with Session State\nDESCRIPTION: Implementation of a counter using Streamlit's session state to maintain values between reruns.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title('Counter Example')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\nincrement = st.button('Increment')\nif increment:\n    st.session_state.count += 1\n\nst.write('Count = ', st.session_state.count)\n```\n\n----------------------------------------\n\nTITLE: Creating Color Pickers in Streamlit\nDESCRIPTION: Displays a color picker widget that allows users to select colors. Returns the selected color as a hex string.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\ncolor = st.color_picker(\"Pick a color\")\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Streamlit Apps\nDESCRIPTION: Implement a tagging system in Streamlit apps using the streamlit-tags component. This allows users to input and display tags with suggestions and limitations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_tags import st_tags\n\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'],\nsuggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Submit Button in Streamlit\nDESCRIPTION: Displays a form submit button for use within a Streamlit form container. This button will trigger the form submission when clicked.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.form_submit_button(\"Sign up\")\n```\n\n----------------------------------------\n\nTITLE: Column Layout with Multiple Widgets\nDESCRIPTION: Shows how to create multi-column layouts using st.columns() and place different widgets in each column.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nleft_column, right_column = st.columns(2)\n# You can use a column just like st.sidebar:\nleft_column.button('Press me!')\n\n# Or even better, call Streamlit functions inside a \"with\" block:\nwith right_column:\n    chosen = st.radio(\n        'Sorting hat',\n        (\"Gryffindor\", \"Ravenclaw\", \"Hufflepuff\", \"Slytherin\"))\n    st.write(f\"You are in {chosen} house!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation for Logged-In Users\nDESCRIPTION: Checks if the user has access to any pages, and if so, builds the navigation with account pages and role-specific sections. The dictionary merge combines account pages with role-specific pages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nif len(page_dict) > 0:\n    pg = st.navigation({\"Account\": account_pages} | page_dict)\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs in Streamlit\nDESCRIPTION: Shows how to create tabs in Streamlit using `st.tabs`. Includes examples using both direct assignment and the `with` notation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Insert containers separated into tabs:\ntab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\ntab1.write(\"this is tab 1\")\ntab2.write(\"this is tab 2\")\n\n# You can also use \"with\" notation:\nwith tab1:\n    st.radio(\"Select one:\", [1, 2])\n```\n\n----------------------------------------\n\nTITLE: Creating Time Input Widgets in Streamlit\nDESCRIPTION: Displays a time input widget that returns a datetime.time object. Allows users to select a time value.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_72\n\nLANGUAGE: python\nCODE:\n```\ntime = st.time_input(\"Meeting time\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Images in Streamlit\nDESCRIPTION: Shows how to embed images in a Streamlit app using the st.image() function. Supports various input types including numpy arrays, image bytes, files, and URLs.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.image(numpy_array)\nst.image(image_bytes)\nst.image(file)\nst.image(\"https://example.com/myimage.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Monthly Sales Data in Streamlit\nDESCRIPTION: Defines a function to display monthly sales data based on the user's selected date, including a calculation of total sales for the month. This function organizes the monthly sales data and presents it in a container, leveraging Streamlit's features for data visualization.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef show_monthly_sales(data):\n    time.sleep(1)\n    selected_date = st.session_state.selected_date\n    this_month = selected_date.replace(day=1)\n    next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)\n\n    st.container(height=100, border=False)\n    with st.container(height=510):\n        st.header(f\"Daily sales for all products, {this_month:%B %Y}\")\n        monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]\n        st.write(monthly_sales)\n    with st.container(height=510):\n        st.header(f\"Total sales for all products, {this_month:%B %Y}\")\n        st.bar_chart(monthly_sales.sum())\n\n```\n\n----------------------------------------\n\nTITLE: Customize Google Sheet Read with Streamlit (Python)\nDESCRIPTION: This Python code shows how to customize the data read from a Google Sheet using the `conn.read()` function with optional parameters. It specifies the worksheet name, cache expiration time (`ttl`), columns to use (`usecols`), and number of rows to read (`nrows`).  The example demonstrates how to cache the query result for 10 minutes and read specific columns and rows from the sheet.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/public-gsheet.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf = conn.read(\n    worksheet=\"Sheet1\",\n    ttl=\"10m\",\n    usecols=[0, 1],\n    nrows=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Date Input in Streamlit\nDESCRIPTION: Displays a date picker widget that returns the selected date as a datetime.date object.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndate = st.date_input(\"Your birthday\")\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Container for Element Ordering\nDESCRIPTION: Demonstrates how to use containers to control the order of element display, regardless of code execution order.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nc = st.container()\nst.write(\"This will show last\")\nc.write(\"This will show first\")\nc.write(\"This will show second\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Scatter Charts using Streamlit\nDESCRIPTION: This code snippet shows how to render a scatter chart in Streamlit based on input from a pandas DataFrame.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nst.scatter_chart(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation in Multipage Streamlit Apps\nDESCRIPTION: Configures the available pages in a multipage Streamlit app using st.navigation(). This allows organizing pages into a structured navigation menu.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_127\n\nLANGUAGE: python\nCODE:\n```\nst.navigation({\n    \"Your account\" : [log_out, settings],\n    \"Reports\" : [overview, usage],\n    \"Tools\" : [search]\n})\n```\n\n----------------------------------------\n\nTITLE: Compact Secrets Usage in Functions\nDESCRIPTION: Demonstrates different approaches to passing secrets to functions, including a compact method using TOML sections with dictionary unpacking.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/secrets-management.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Verbose version\nmy_db.connect(username=st.secrets.db_credentials.username, password=st.secrets.db_credentials.password)\n\n# Far more compact version!\nmy_db.connect(**st.secrets.db_credentials)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Plotly Events in Streamlit\nDESCRIPTION: This code snippet illustrates how to make Plotly charts interactive by capturing events within Streamlit. It requires predefined figures.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n```\n\n----------------------------------------\n\nTITLE: Integrating Ace Editor in Streamlit\nDESCRIPTION: Add an Ace code editor to Streamlit apps using the streamlit-ace component. This allows for advanced code editing capabilities within the app interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_ace import st_ace\n\ncontent = st_ace()\ncontent\n```\n\n----------------------------------------\n\nTITLE: Creating Editable Data Table in Streamlit\nDESCRIPTION: Displays an editable data widget with dynamic row capabilities for user interaction.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nedited = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries in Python\nDESCRIPTION: This code imports the necessary libraries for building a Streamlit application. It imports Streamlit itself, along with Pandas for data manipulation and NumPy for numerical operations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML in Streamlit using st.components.v1.html\nDESCRIPTION: The st.components.v1.html function is part of Streamlit's custom components API. It enables developers to render raw HTML directly within their Streamlit applications, providing flexibility for custom UI elements or embedding external content.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/custom-components/html.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.components.v1.html\n```\n\n----------------------------------------\n\nTITLE: Formatting Text with st.markdown in Streamlit\nDESCRIPTION: Use st.markdown to display strings formatted with Markdown syntax in Streamlit apps, allowing rich text formatting including bold, italics, and more.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.markdown(\"Hello **world**!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Vega-Lite Charts with Different Themes in Streamlit\nDESCRIPTION: This code demonstrates how to create a scatter plot using Vega-Lite in Streamlit, comparing the default Streamlit theme with Vega-Lite's native theme. The example uses cars dataset to plot Horsepower against Miles per Gallon, with points colored and shaped by Origin.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/vega_lite_chart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom vega_datasets import data\n\nsource = data.cars()\n\nchart = {\n    \"mark\": \"point\",\n    \"encoding\": {\n        \"x\": {\n            \"field\": \"Horsepower\",\n            \"type\": \"quantitative\",\n        },\n        \"y\": {\n            \"field\": \"Miles_per_Gallon\",\n            \"type\": \"quantitative\",\n        },\n        \"color\": {\"field\": \"Origin\", \"type\": \"nominal\"},\n        \"shape\": {\"field\": \"Origin\", \"type\": \"nominal\"},\n    },\n}\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Vega-Lite native theme\"])\n\nwith tab1:\n    # Use the Streamlit theme.\n    # This is the default. So you can also omit the theme argument.\n    st.vega_lite_chart(\n        source, chart, theme=\"streamlit\", use_container_width=True\n    )\nwith tab2:\n    st.vega_lite_chart(\n        source, chart, theme=None, use_container_width=True\n    )\n```\n\n----------------------------------------\n\nTITLE: AppTest Initialization from Function\nDESCRIPTION: Shows how to create an AppTest instance from a function containing the app logic\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/testing/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\ndef app_script ():\n    import streamlit as st\n\n    word_of_the_day = st.text_input(\"What's the word of the day?\", key=\"word\")\n    if word_of_the_day == st.secrets[\"WORD\"]:\n        st.success(\"That's right!\")\n    elif word_of_the_day and word_of_the_day != st.secrets[\"WORD\"]:\n        st.warn(\"Try again.\")\n\nat = AppTest.from_function(app_script)\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n```\n\n----------------------------------------\n\nTITLE: Displaying Altair Charts using Streamlit\nDESCRIPTION: This code shows how to render a chart using the Altair library in a Streamlit application. It requires a predefined Altair chart object.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nst.altair_chart(my_altair_chart)\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive Plotly Charts using Streamlit\nDESCRIPTION: This code snippet allows the rendering of interactive Plotly charts within a Streamlit app. The input must be a predefined Plotly chart object.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nst.plotly_chart(my_plotly_chart)\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Messages in Streamlit\nDESCRIPTION: Displays a warning message box with yellow/orange styling. This is used to alert users about potential issues that don't prevent the app from functioning.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_118\n\nLANGUAGE: python\nCODE:\n```\nst.warning(\"Unable to fetch image. Skipping...\")\n```\n\n----------------------------------------\n\nTITLE: Shared Session State Between Streamlit Pages Example 2\nDESCRIPTION: Shows how session state is shared between different pages in a Streamlit multipage application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page_directory.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# page1.py\nimport streamlit as st\nif \"shared\" not in st.session_state:\n   st.session_state[\"shared\"] = True\n\n# page2.py\nimport streamlit as st\nst.write(st.session_state[\"shared\"]) # If page1 already executed, this writes True\n```\n\n----------------------------------------\n\nTITLE: Configuring Progress Column in Streamlit\nDESCRIPTION: This example shows how to set up a progress column for displaying sales volume with minimum and maximum values and custom formatting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nProgressColumn(\"Sales volume\", min_value=0, max_value=1000, format=\"$%f\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Bar Charts using Streamlit\nDESCRIPTION: This code generates a simple bar chart using Streamlit's built-in capabilities. The input needs to be a pandas DataFrame with the necessary data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nst.bar_chart(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Creating a Pills Selection Widget in Streamlit\nDESCRIPTION: Displays a pill-button selection widget that allows users to select options in a visually compact format.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nst.pills(\"Tags\", [\"Sports\", \"AI\", \"Politics\"])\n```\n\n----------------------------------------\n\nTITLE: Adding a Logo to Streamlit Apps\nDESCRIPTION: Demonstrates how to display a logo in the upper-left corner of a Streamlit app and its sidebar using the st.logo() function.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.logo(\"logo.jpg\")\n```\n\n----------------------------------------\n\nTITLE: PIL and NumPy Image Processing with Streamlit Camera\nDESCRIPTION: Shows how to process camera input using PIL (Python Imaging Library) and NumPy, converting the image to both PIL Image and numpy array formats.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/camera_input.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom PIL import Image\nimport numpy as np\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as a PIL Image:\n    img = Image.open(img_file_buffer)\n\n    # To convert PIL Image to numpy array:\n    img_array = np.array(img)\n\n    # Check the type of img_array:\n    # Should output: <class 'numpy.ndarray'>\n    st.write(type(img_array))\n\n    # Check the shape of img_array:\n    # Should output shape: (height, width, channels)\n    st.write(img_array.shape)\n```\n\n----------------------------------------\n\nTITLE: Displaying the Combined Chart in Streamlit\nDESCRIPTION: Uses Streamlit to render the combined chart on the web application, allowing viewers to interact with it via the user interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nst.altair_chart(combined_chart, use_container_width=True)\n```\n\n----------------------------------------\n\nTITLE: Using Magic Commands in Streamlit\nDESCRIPTION: Streamlit's Magic command automatically writes variables or literal values to your app using st.write when they appear alone on a line, eliminating the need for explicit write statements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"Hello **world**!\"\nmy_data_frame\nmy_mpl_figure\n```\n\n----------------------------------------\n\nTITLE: Creating Layouts with Streamlit Columns in Python\nDESCRIPTION: Explains how to use `st.columns` to insert side-by-side columns in a Streamlit app, demonstrating simple text output in each column.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_96\n\nLANGUAGE: Python\nCODE:\n```\ncol1, col2 = st.columns(2)\ncol1.write(\"this is column 1\")\ncol2.write(\"this is column 2\")\n```\n\n----------------------------------------\n\nTITLE: Creating Page Links in Streamlit Multipage Apps\nDESCRIPTION: Displays links to other pages within a Streamlit multipage application. Supports customization with labels and icons.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.page_link(\"app.py\", label=\"Home\", icon=\"🏠\")\nst.page_link(\"pages/profile.py\", label=\"My profile\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Raw Data with Streamlit (Python)\nDESCRIPTION: This code snippet demonstrates how to display raw data, specifically a Pandas DataFrame, in a Streamlit application using `st.subheader` and `st.write`. The `st.write` function automatically renders the DataFrame as an interactive table.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nst.subheader('Raw data')\nst.write(data)\n```\n\n----------------------------------------\n\nTITLE: Using Enum Classes with Streamlit Multiselect in Python\nDESCRIPTION: This snippet demonstrates how to use Enum classes as options in a Streamlit multiselect widget. It defines a Color enum and uses it to create a multiselect for choosing colors, with a conditional statement based on the selection.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/custom-classes.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\nimport streamlit as st\n\n# class syntax\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nselected_colors = set(st.multiselect(\"Pick colors\", options=Color))\n\nif selected_colors == {Color.RED, Color.GREEN}:\n    st.write(\"Hooray, you found the color YELLOW!\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Input in Streamlit\nDESCRIPTION: Displays a time input widget that returns the selected time as a datetime.time object.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ntime = st.time_input(\"Meeting time\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Elements in Streamlit\nDESCRIPTION: Demonstrates various Streamlit functions for displaying text, including `st.write`, `st.text`, `st.markdown`, `st.latex`, `st.title`, `st.header`, `st.subheader`, `st.code`, `st.badge` and `st.html` for rendering different text formats and structures.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.write(\"Most objects\") # df, err, func, keras!\nst.write([\"st\", \"is <\", 3])\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n\nst.text(\"Fixed width text\")\nst.markdown(\"_Markdown_\")\nst.latex(r\"\"\" e^{i\\pi} + 1 = 0 \"\"\")\nst.title(\"My title\")\nst.header(\"My header\")\nst.subheader(\"My sub\")\nst.code(\"for i in range(8): foo()\")\nst.badge(\"New\")\nst.html(\"<p>Hi!</p>\")\n```\n\n----------------------------------------\n\nTITLE: Capturing Click Coordinates on Images with Streamlit\nDESCRIPTION: Uses the `streamlit_image_coordinates` module to detect and capture user click coordinates on an image. Suitable for interactive applications where user input is required.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_94\n\nLANGUAGE: Python\nCODE:\n```\nfrom streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n```\n\n----------------------------------------\n\nTITLE: Terminating Streamlit App Execution Using st.stop\nDESCRIPTION: The st.stop function immediately halts the execution of a Streamlit app. This is useful for conditional execution flows where you want to prevent code below a certain point from running.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/stop.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.stop()\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Server with Streamlit (Python)\nDESCRIPTION: Python script using Streamlit and pyodbc to connect to SQL Server, execute a query, and display results. Includes caching for efficient data retrieval.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mssql.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pyodbc\n\n# Initialize connection.\n# Uses st.cache_resource to only run once.\n@st.cache_resource\ndef init_connection():\n    return pyodbc.connect(\n        \"DRIVER={ODBC Driver 17 for SQL Server};SERVER=\"\n        + st.secrets[\"server\"]\n        + \";DATABASE=\"\n        + st.secrets[\"database\"]\n        + \";UID=\"\n        + st.secrets[\"username\"]\n        + \";PWD=\"\n        + st.secrets[\"password\"]\n    )\n\nconn = init_connection()\n\n# Perform query.\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\n@st.cache_data(ttl=600)\ndef run_query(query):\n    with conn.cursor() as cur:\n        cur.execute(query)\n        return cur.fetchall()\n\nrows = run_query(\"SELECT * from mytable;\")\n\n# Print results.\nfor row in rows:\n    st.write(f\"{row[0]} has a :{row[1]}:\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Monthly Sales Data Visualization in Streamlit\nDESCRIPTION: A complete function that displays monthly sales data including daily sales for all products and total sales charts. This function uses the date selected in the daily sales fragment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef show_monthly_sales(data):\n    time.sleep(1)\n    selected_date = st.session_state.selected_date\n    this_month = selected_date.replace(day=1)\n    next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)\n\n    st.header(f\"Daily sales for all products, {this_month:%B %Y}\")\n    monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]\n    st.write(monthly_sales)\n\n    st.header(f\"Total sales for all products, {this_month:%B %Y}\")\n    st.bar_chart(monthly_sales.sum())\n```\n\n----------------------------------------\n\nTITLE: Displaying Plain Text with st.text in Streamlit\nDESCRIPTION: Use st.text to display fixed-width, preformatted text in Streamlit apps, preserving spaces and line breaks exactly as provided.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nst.text(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Editing NumPy Arrays in Streamlit Data Editor\nDESCRIPTION: This example demonstrates how to use Streamlit's data editor to edit a NumPy array containing information about Streamlit elements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nst.data_editor(np.array([\n\t[\"st.text_area\", \"widget\", 4.92],\n\t[\"st.markdown\", \"element\", 47.22]\n]))\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Component in Streamlit (Python)\nDESCRIPTION: The st.components.v1.declare_component function is used to declare a custom component in Streamlit. It allows developers to create and integrate custom UI elements or functionality into their Streamlit applications. This function is part of Streamlit's component API and is used to define the interface between Streamlit and the custom component.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/custom-components/declare_component.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.components.v1.declare_component\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation with st.help in Streamlit\nDESCRIPTION: Use st.help to display an object's docstring in a nicely formatted way, providing in-app documentation for functions, classes, or modules.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nst.help(st.write)\nst.help(pd.DataFrame)\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Element Syntax Using Object Notation\nDESCRIPTION: Demonstrates the basic syntax for adding elements to the sidebar using object notation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/sidebar.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.sidebar.[element_name]\n```\n\n----------------------------------------\n\nTITLE: Using Stqdm Progress Bar Component in Streamlit\nDESCRIPTION: Implements a tqdm-style progress bar in Streamlit using the stqdm component, providing a simple way to visualize iteration progress in loops.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n```\n\n----------------------------------------\n\nTITLE: Displaying PyDeck Charts in Streamlit\nDESCRIPTION: Renders a PyDeck chart in a Streamlit app using st.pydeck_chart. This allows you to create maps and 3D visualizations with PyDeck and display them in your Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nst.pydeck_chart(my_pydeck_chart)\n```\n\n----------------------------------------\n\nTITLE: Caching Global Resources in Streamlit\nDESCRIPTION: Shows how to cache global resources using `@st.cache_resource` to improve performance. Includes examples of clearing the cache for specific function calls or all cached resources.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# E.g. TensorFlow session, database connection, etc.\n@st.cache_resource\ndef foo(bar):\n    # Create and return a non-data object\n    return session\n# Executes foo\ns1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by reference, s1 == s2\ns2 = foo(ref1)\n# Different arg, so function foo executes\ns3 = foo(ref2)\n# Clear the cached value for foo(ref1)\nfoo.clear(ref1)\n# Clear all cached entries for this function\nfoo.clear()\n# Clear all global resources from cache\nst.cache_resource.clear()\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON Data in Streamlit\nDESCRIPTION: Renders dictionary or JSON data in a formatted, pretty-printed display using st.json().\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nst.json(my_dict)\n```\n\n----------------------------------------\n\nTITLE: Displaying Vega-Lite Charts using Streamlit\nDESCRIPTION: This snippet demonstrates how to use Vega-Lite library for rendering charts in Streamlit. It requires a defined Vega-Lite chart object.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nst.vega_lite_chart(my_vega_lite_chart)\n```\n\n----------------------------------------\n\nTITLE: Shared State Between Streamlit Pages Example 1\nDESCRIPTION: Demonstrates how Python modules are shared globally between pages in a Streamlit multipage app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page_directory.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# page1.py\nimport foo\nfoo.hello = 123\n\n# page2.py\nimport foo\nst.write(foo.hello)  # If page1 already executed, this writes 123\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Input in Streamlit\nDESCRIPTION: Displays a chat input widget that allows users to type messages. The example captures the user's input and displays it back to the user when submitted.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_107\n\nLANGUAGE: python\nCODE:\n```\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    st.write(f\"The user has sent: {prompt}\")\n```\n\n----------------------------------------\n\nTITLE: Using Echo for Tutorial Code in Streamlit\nDESCRIPTION: Uses st.echo() to display code and then execute it, which is useful for tutorials or demonstrations where users need to see both code and its output.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith st.echo():\n  st.write('This code will be printed')\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Dialog in Streamlit\nDESCRIPTION: Demonstrates how to insert a modal dialog using the @st.dialog decorator. The dialog can rerun independently from the rest of the script.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@st.dialog(\"Sign up\")\ndef email_form():\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Snowflake Connection Configuration\nDESCRIPTION: TOML and Python examples showing advanced SQLAlchemy configuration for Snowflake connection\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/connecting-to-data.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[connections.snowflake]\nurl = \"snowflake://<user_login_name>@<account_identifier>/\"\n\n[connections.snowflake.create_engine_kwargs.connect_args]\nauthenticator = \"externalbrowser\"\nwarehouse = \"xxx\"\nrole = \"xxx\"\n```\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nconn = st.connection(\n    \"snowflake\",\n    \"sql\",\n    url = \"snowflake://<user_login_name>@<account_identifier>/\",\n    connect_args = dict(\n        authenticator = \"externalbrowser\",\n        warehouse = \"xxx\",\n        role = \"xxx\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Row Management in Streamlit Data Editor\nDESCRIPTION: The snippet demonstrates how to enable adding or deleting rows in a Streamlit editable dataframe interface using st.data_editor with num_rows set to dynamic. You can add new rows or delete existing ones programmatically. This requires Streamlit and a dataframe as input. Adjustments are done directly in the UI.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nedited_df = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n----------------------------------------\n\nTITLE: Handling Real-Time Streams with Streamlit Webrtc in Python\nDESCRIPTION: A simple Streamlit integration for handling real-time audio and video streams using the `webrtc_streamer` function from the `streamlit_webrtc` module.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_90\n\nLANGUAGE: Python\nCODE:\n```\nfrom streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=\"sample\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Display with Checkbox Widget\nDESCRIPTION: Demonstrates using st.checkbox() to conditionally show/hide a dataframe. Includes numpy and pandas for data manipulation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\nif st.checkbox('Show dataframe'):\n    chart_data = pd.DataFrame(\n       np.random.randn(20, 3),\n       columns=['a', 'b', 'c'])\n\n    chart_data\n```\n\n----------------------------------------\n\nTITLE: Using Folium Maps in Streamlit\nDESCRIPTION: Creates an interactive Folium map in Streamlit. The example creates a Folium map centered at specific coordinates with a zoom level of 16, then displays it using the st_folium component with a specified width.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nm = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\n```\n\n----------------------------------------\n\nTITLE: Unserializable Data Example\nDESCRIPTION: Example showing exception when trying to store unserializable data in Session State\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef unserializable_data():\n\t\treturn lambda x: x\n\n#👇 results in an exception when enforceSerializableSessionState is on\nst.session_state.unserializable = unserializable_data()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Streamlit and Altair\nDESCRIPTION: Imports essential libraries needed for the tutorial, including Streamlit for the web app, Altair for charting, Pandas for data manipulation, and Vega Datasets for stock data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport altair as alt\nimport pandas as pd\nfrom vega_datasets import data\n```\n\n----------------------------------------\n\nTITLE: Streamlit App with Custom Page Configuration\nDESCRIPTION: Implementation showing how to customize page titles, icons, and global configuration in a multipage Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page-and-navigation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ncreate_page = st.Page(\"create.py\", title=\"Create entry\", icon=\":material/add_circle:\")\ndelete_page = st.Page(\"delete.py\", title=\"Delete entry\", icon=\":material/delete:\")\n\npg = st.navigation([create_page, delete_page])\nst.set_page_config(page_title=\"Data manager\", page_icon=\":material/edit:\")\npg.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Buttons in Streamlit\nDESCRIPTION: Displays radio buttons that allow users to select a single option from a list. Returns the selected option.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nchoice = st.radio(\"Pick one\", [\"cats\", \"dogs\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Widget in Streamlit\nDESCRIPTION: Displays a button widget that returns True when clicked and False when not clicked. The button's state resets on each app rerun.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclicked = st.button(\"Click me\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Threads with Live Updates - Python\nDESCRIPTION: This snippet illustrates how to create custom threads while allowing for real-time updates in the Streamlit app using containers. The app initializes a container for each thread and employs a loop to display results as they come in, all while ensuring that Streamlit commands are not executed within the custom threads.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/multithreading.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\nfrom threading import Thread\n\n\nclass WorkerThread(Thread):\n    def __init__(self, delay):\n        super().__init__()\n        self.delay = delay\n        self.return_value = None\n\n    def run(self):\n        start_time = time.time()\n        time.sleep(self.delay)\n        end_time = time.time()\n        self.return_value = f\"start: {start_time}, end: {end_time}\"\n\ndelays = [5, 4, 3, 2, 1]\nresult_containers = []\nfor i, delay in enumerate(delays):\n    st.header(f\"Thread {i}\")\n    result_containers.append(st.container())\n\nthreads = [WorkerThread(delay) for delay in delays]\nfor thread in threads:\n    thread.start()\nthread_lives = [True] * len(threads)\n\nwhile any(thread_lives):\n    for i, thread in enumerate(threads):\n        if thread_lives[i] and not thread.is_alive():\n            result_containers[i].write(thread.return_value)\n            thread_lives[i] = False\n    time.sleep(0.5)\n\nfor thread in threads:\n    thread.join()\n\nst.button(\"Rerun\")\n```\n\n----------------------------------------\n\nTITLE: Stopping Streamlit Script Execution\nDESCRIPTION: Shows how to stop the execution of a Streamlit script immediately using st.stop().\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.stop()\n```\n\n----------------------------------------\n\nTITLE: Caching List with st.cache_data (Mutation Example)\nDESCRIPTION: This example demonstrates how st.cache_data can be used to cache a list. The list is mutated after it's retrieved from the cache. Because st.cache_data creates a copy of the cached object, the mutation does not affect the underlying cached data. This illustrates the copying behavior which avoids mutation issues. This example will not run without streamlit installed and imported as st.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n  @st.cache_data\n  def create_list():\n      l = [1, 2, 3]\n\n  l = create_list()  # 👈 Call the function\n  l[0] = 2  # 👈 Mutate its return value\n```\n\n----------------------------------------\n\nTITLE: Making Plotly Charts Interactive in Streamlit\nDESCRIPTION: Creates interactive Plotly charts in Streamlit using the plotly-events component. The example creates a simple line chart and then captures the selected points from user interactions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\n```\n\n----------------------------------------\n\nTITLE: Alternative Login Button Implementation with If Statement\nDESCRIPTION: Shows an alternative implementation of the login button using an if statement instead of a callback function.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/google.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-  st.button(\"Log in with Google\", on_click=st.login)\n+  if st.button(\"Log in with Google\"):\n+     st.login()\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Elements for Custom Dashboard\nDESCRIPTION: Shows how to create a draggable and resizable dashboard using the streamlit-elements package.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_elements import elements, mui, html\n\nwith elements(\"new_element\"):\n  mui.Typography(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Structure in Markdown\nDESCRIPTION: Structured markdown content defining a navigation menu with tiles/cards for different Streamlit app design topics. Uses custom components TileContainer and RefCard for layout.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: App design concepts and considerations\nslug: /develop/concepts/design\n---\n\n# App design concepts and considerations\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/concepts/design/animate\">\n\n<h5>Animate and update elements</h5>\n\nUnderstand how to create dynamic, animated content or update elements without rerunning your app.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/buttons\">\n\n<h5>Button behavior and examples</h5>\n\nUnderstand how buttons work with explanations and examples to avoid common mistakes.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/dataframes\">\n\n<h5>Dataframes</h5>\n\nDataframes are a great way to display and edit data in a tabular format. Understand the UI and options available in Streamlit.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/custom-classes\">\n\n<h5>Using custom Python classes in your Streamlit app</h5>\n\nUnderstand the impact of defining your own Python classes within Streamlit's rerun model.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/multithreading\">\n\n<h5>Multithreading</h5>\n\nUnderstand how to use multithreading within Streamlit apps.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/design/timezone-handling\">\n\n<h5>Working with timezones</h5>\n\nUnderstand how to localize time to your users.\n\n</RefCard>\n\n</TileContainer>\n```\n\n----------------------------------------\n\nTITLE: Managing Query Parameters in Streamlit\nDESCRIPTION: Shows how to get, set, or clear the query parameters that are shown in the browser's URL bar. This allows for shareable links with specific app states.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_142\n\nLANGUAGE: python\nCODE:\n```\nst.query_params[key] = value\nst.query_params.clear()\n```\n\n----------------------------------------\n\nTITLE: Using Stqdm Progress Bar Component in Streamlit\nDESCRIPTION: Integrates the stqdm component to display progress bars for long-running operations. Provides visual feedback for iterative processes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nfrom stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n```\n\n----------------------------------------\n\nTITLE: Building Python Wheel Distribution\nDESCRIPTION: Command to create a wheel distribution from the component source code for PyPI publishing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/publish-component.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py sdist bdist_wheel\n```\n\n----------------------------------------\n\nTITLE: Displaying Activity DataFrames for Testing in Streamlit\nDESCRIPTION: Renders both activity and daily activity DataFrames in the Streamlit app for testing purposes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nst.dataframe(activity_df)\nst.dataframe(daily_activity_df)\n```\n\n----------------------------------------\n\nTITLE: Initialize Session State for Data in Streamlit\nDESCRIPTION: Initializes the data in Streamlit's session state. It checks if the 'data' key exists, and if not, generates initial data for the line chart. This ensures data persists across reruns.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"if \\\"data\\\" not in st.session_state:\n    st.session_state.data = get_recent_data(datetime.now() - timedelta(seconds=60))\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive HiPlot Charts in Streamlit\nDESCRIPTION: This snippet illustrates how to create interactive plots using the HiPlot library in a Streamlit application. It requires formatted input data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ndata = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'}, {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'}, {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]\nhip.Experiment.from_iterable(data).display()\n```\n\n----------------------------------------\n\nTITLE: Showing Metric Value in Streamlit\nDESCRIPTION: Displays a metric value with optional delta indicator for showing changes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nst.metric(\"My metric\", 42, 2)\n```\n\n----------------------------------------\n\nTITLE: Creating File Uploader Widgets in Streamlit\nDESCRIPTION: Displays a file uploader widget that allows users to upload files. Returns the uploaded file data for processing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_78\n\nLANGUAGE: python\nCODE:\n```\ndata = st.file_uploader(\"Upload a CSV\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Widget Values Using Session State\nDESCRIPTION: Shows how to access widget values using Streamlit's session state functionality by specifying a key for the widget.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nst.text_input(\"Your name\", key=\"name\")\n\n# You can access the value at any point with:\nst.session_state.name\n```\n\n----------------------------------------\n\nTITLE: Interactive Plotly Events in Streamlit\nDESCRIPTION: Enables interactive events on Plotly charts with point selection capability.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\n\nselected_points = plotly_events(fig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Display in Streamlit\nDESCRIPTION: Sets up column configuration for dataframes and editors, including formatting and value constraints.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nst.column_config.NumberColumn(\"Price (in USD)\", min_value=0, format=\"$%d\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Column in Streamlit\nDESCRIPTION: This example shows how to create an image column for displaying preview screenshots with a custom help text.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nImageColumn(\"Preview Image\", help=\"The preview screenshots\")\n```\n\n----------------------------------------\n\nTITLE: Caching functions with Streamlit commands\nDESCRIPTION: This example shows how cached functions can contain Streamlit commands like `st.success`. Streamlit replays these commands on subsequent runs after the function's initial execution. This behavior applies to both `st.cache_data` and `st.cache_resource`.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef get_api_data():\n    data = api.get(...)\n    st.success(\"Fetched data from API!\")  # 👈 Show a success message\n    return data\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Interactive Streamlit Application\nDESCRIPTION: Demonstrates a simple Streamlit application that creates an interactive slider and displays the selected number. Shows the basic syntax for importing Streamlit, creating UI elements, and displaying text output.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/get-started/security-model.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nnumber = st.slider(\"Pick a number: \", min_value=1, max_value=10)\nst.text(\"Your number is \" + str(number))\n```\n\n----------------------------------------\n\nTITLE: Generalized Widget Value Preservation Function\nDESCRIPTION: A more flexible approach to storing and loading widget values across multiple widgets using dynamic key management\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/widgets.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef store_value(key):\n    st.session_state[key] = st.session_state[\"_\"+key]\ndef load_value(key):\n    st.session_state[\"_\"+key] = st.session_state[key]\n\nload_value(\"my_key\")\nst.number_input(\"Number of filters\", key=\"_my_key\", on_change=store_value, args=[\"my_key\"])\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Widgets to Sidebar\nDESCRIPTION: Example showing how to add a selectbox and radio button to the sidebar using both object notation and 'with' notation. Demonstrates practical implementation of sidebar elements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/sidebar.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Using object notation\nadd_selectbox = st.sidebar.selectbox(\n    \"How would you like to be contacted?\",\n    (\"Email\", \"Home phone\", \"Mobile phone\")\n)\n\n# Using \"with\" notation\nwith st.sidebar:\n    add_radio = st.radio(\n        \"Choose a shipping method\",\n        (\"Standard (5-15 days)\", \"Express (2-5 days)\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Updating Header Using Callbacks in Streamlit\nDESCRIPTION: Shows how to update a header using a callback function triggered by a button click. Uses session state without requiring script rerun.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/rerun.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n##### Option using a callback #####\nst.header(st.session_state.value)\n\ndef update_value():\n    st.session_state.value = \"Bar\"\n\nst.button(\"Bar\", on_click=update_value)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Dashboards with Streamlit Elements\nDESCRIPTION: Highlights the use of `streamlit_elements` to develop interactive and resizable dashboards within Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_104\n\nLANGUAGE: Python\nCODE:\n```\nfrom streamlit_elements import elements, mui, html\n\nwith elements(\"new_element\"):\n  mui.Typography(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Updating Slider Values with Button Callback in Streamlit\nDESCRIPTION: This code demonstrates how to properly update a slider widget when a button is clicked using Streamlit's session state. It creates a callback function that increments the slider value (up to a maximum of 10) and assigns this function to the button's on_click parameter to ensure the slider updates immediately after the first button click.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/widget-updating-session-state.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# the callback function for the button will add 1 to the\n# slider value up to 10\ndef plus_one():\n    if st.session_state[\"slider\"] < 10:\n        st.session_state.slider += 1\n    else:\n        pass\n    return\n\n# when creating the button, assign the name of your callback\n# function to the on_click parameter\nadd_one = st.button(\"Add one to the slider\", on_click=plus_one, key=\"add_one\")\n\n# create the slider\nslide_val = st.slider(\"Pick a number\", 0, 10, key=\"slider\")\n```\n\n----------------------------------------\n\nTITLE: Using Modal Dialogs with Streamlit in Python\nDESCRIPTION: Illustrates how to create a modal dialog using the `st.dialog` decorator, allowing independent reruns within a Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_98\n\nLANGUAGE: Python\nCODE:\n```\n@st.dialog(\"Sign up\")\ndef email_form():\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n```\n\n----------------------------------------\n\nTITLE: Display Message and Chart using st.chat_message object in Streamlit\nDESCRIPTION: This code snippet demonstrates an alternative way to add content to `st.chat_message` by calling methods directly on the returned object, instead of using `with` notation. It's functionally equivalent to the previous example.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/conversational-apps.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport numpy as np\n\nmessage = st.chat_message(\"assistant\")\nmessage.write(\"Hello human\")\nmessage.bar_chart(np.random.randn(30, 3))\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Message in Streamlit\nDESCRIPTION: Shows a formatted warning message box with a yellow background, useful for alerting users to potential issues without blocking operation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nst.warning(\"Unable to fetch image. Skipping...\")\n```\n\n----------------------------------------\n\nTITLE: Basic Text Area Widget Implementation in Streamlit\nDESCRIPTION: Streamlit's text_area() widget allows users to input multi-line text in a Streamlit application. The widget creates an expandable text input field that can accommodate multiple lines of text and returns the entered text as a string.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/text_area.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.text_area\n```\n\n----------------------------------------\n\nTITLE: Updating User Display to Show Personalized Greeting\nDESCRIPTION: Replaces the raw user data display with a personalized greeting that includes the user's name.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/google.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nelse:\n-   st.experimental_user\n+   st.header(f\"Welcome, {st.experimental_user.name}!\")\n```\n\n----------------------------------------\n\nTITLE: Docker Container Entrypoint\nDESCRIPTION: Configures the command to run the Streamlit application when the container starts.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_12\n\nLANGUAGE: docker\nCODE:\n```\nENTRYPOINT [\"streamlit\", \"run\", \"streamlit_app.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]\n```\n\n----------------------------------------\n\nTITLE: Snowflake Global Connection Configuration in .snowflake/connection.toml\nDESCRIPTION: Alternative method for configuring Snowflake connection using global configuration file with similar authentication and connection parameters\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/snowflake.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[default]\naccount = \"xxxxxxx-xxxxxxx\"\nuser = \"xxx\"\nprivate_key_file = \"../xxx/xxx.p8\"\nrole = \"xxx\"\nwarehouse = \"xxx\"\ndatabase = \"xxx\"\nschema = \"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Matplotlib Figure with Threading Lock in Streamlit (Python)\nDESCRIPTION: This code snippet demonstrates how to use st.pyplot to display a Matplotlib scatter plot in Streamlit while using a threading lock to prevent concurrent access issues. It imports necessary libraries, creates random data, and uses an RLock to safely create and display the plot.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/pyplot.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom threading import RLock\n\n_lock = RLock()\n\nx = np.random.normal(1, 1, 100)\ny = np.random.normal(1, 1, 100)\n\nwith _lock:\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    st.pyplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Personalizing Apps for Users in Streamlit\nDESCRIPTION: Shows how to personalize apps for users using `st.experimental_user`, `st.context.cookies`, and `st.context.headers`. Includes examples of authenticating users, logging them in and out, and accessing cookies and headers.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Authenticate users\nif not st.experimental_user.is_logged_in:\n    st.login(\"my_provider\")\nf\"Hi, {st.experimental_user.name}\"\nst.logout()\n\n# Get dictionaries of cookies and headers\nst.context.cookies\nst.context.headers\nst.context.locale\nst.context.timezone\nst.context.timezone_offset\n```\n\n----------------------------------------\n\nTITLE: Using st.title for Header Text in Streamlit App\nDESCRIPTION: Modified version of the Hello World app that uses st.title() instead of st.write() to display text as a header. This demonstrates how to format text as a title in Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/sis.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Displaying and Selecting Rows in Streamlit Dataframe Python\nDESCRIPTION: This snippet demonstrates the display of a dataframe in a Streamlit app with multi-row selection enabled. It uses the `st.dataframe` function to render the data interactively, and selections are set to trigger a rerun for real-time updates.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nevent = st.dataframe(\n    df,\n    column_config=column_configuration,\n    use_container_width=True,\n    hide_index=True,\n    on_select=\"rerun\",\n    selection_mode=\"multi-row\",\n)\n\nst.header(\"Selected members\")\npeople = event.selection.rows\nfiltered_df = df.iloc[people]\nst.dataframe(\n    filtered_df,\n    column_config=column_configuration,\n    use_container_width=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in Streamlit App\nDESCRIPTION: Demonstrates how to access secrets within a Streamlit application using st.secrets dict and environment variables. Shows verification of environment variable setup.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/secrets-management.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Everything is accessible via the st.secrets dict:\n\nst.write(\"DB username:\", st.secrets[\"db_username\"])\nst.write(\"DB password:\", st.secrets[\"db_password\"])\n\n# And the root-level secrets are also accessible as environment variables:\n\nimport os\n\nst.write(\n    \"Has environment variables been set:\",\n    os.environ[\"db_username\"] == st.secrets[\"db_username\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running AppTest separately\nDESCRIPTION: This Python code shows how `AppTest.from_file()` and `run()` are separate operations.  First, the app is initialized, and then the app is run.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"# Initialize the app.\\nat = AppTest.from_file(\"app.py\")\n# Run the app.\\nat.run()\"\n```\n\n----------------------------------------\n\nTITLE: Reading Session State Values in Streamlit\nDESCRIPTION: Demonstrates how to read and display values stored in Session State\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Read\nst.write(st.session_state.key)\n\n# Outputs: value\n```\n\n----------------------------------------\n\nTITLE: Displaying Graphs using GraphViz in Streamlit\nDESCRIPTION: This code snippet allows users to render a graph using the GraphViz library within Streamlit, based on a provided graph specification.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nst.graphviz_chart(my_graphviz_spec)\n```\n\n----------------------------------------\n\nTITLE: Displaying Charts in Streamlit\nDESCRIPTION: Demonstrates how to display various types of charts using Streamlit, including area, bar, line, map, and scatter charts, as well as charts from Altair, Bokeh, Graphviz, Plotly, PyDeck, Matplotlib, and Vega-Lite.  Includes how to work with user selections for Plotly, Altair and Vega-Lite charts.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nst.area_chart(df)\nst.bar_chart(df)\nst.bar_chart(df, horizontal=True)\nst.line_chart(df)\nst.map(df)\nst.scatter_chart(df)\n\nst.altair_chart(chart)\nst.bokeh_chart(fig)\nst.graphviz_chart(fig)\nst.plotly_chart(fig)\nst.pydeck_chart(chart)\nst.pyplot(fig)\nst.vega_lite_chart(df, spec)\n\n# Work with user selections\nevent = st.plotly_chart(\n    df,\n    on_select=\"rerun\"\n)\nevent = st.altair_chart(\n    chart,\n    on_select=\"rerun\"\n)\nevent = st.vega_lite_chart(\n    df,\n    spec,\n    on_select=\"rerun\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Sidebar Elements in Streamlit with Python\nDESCRIPTION: Explains how to use `st.sidebar` to present components such as buttons and text in a sidebar within a Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_102\n\nLANGUAGE: Python\nCODE:\n```\nst.sidebar.write(\"This lives in the sidebar\")\nst.sidebar.button(\"Click me!\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Drawable Canvas Using Streamlit in Python\nDESCRIPTION: Demonstrates the use of `st_canvas` function from the `streamlit_drawable_canvas` module for sketching within a Streamlit app, utilizing Fabric.js.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_91\n\nLANGUAGE: Python\nCODE:\n```\nfrom streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n```\n\n----------------------------------------\n\nTITLE: Using iframe Component in Streamlit\nDESCRIPTION: Demonstrates how to load a remote URL in an iframe within a Streamlit app. This allows embedding external web content.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_155\n\nLANGUAGE: python\nCODE:\n```\nfrom st.components.v1 import iframe\niframe(\n    \"docs.streamlit.io\"\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Streamlit Component in Python\nDESCRIPTION: Creates and registers a custom component in Streamlit using declare_component(). This allows you to register a frontend component with a specific name and path.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/custom-components/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom st.components.v1 import declare_component\ndeclare_component(\n    \"custom_slider\",\n    \"/frontend\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Dialog with Streamlit\nDESCRIPTION: Shows how to create an independent modal dialog with form inputs using the @st.dialog decorator.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@st.dialog(\"Sign up\")\ndef email_form():\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Rendering Based on Selection in Streamlit\nDESCRIPTION: Creates a conditional block that only renders comparison charts when at least one member is selected.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nif len(people) > 0:\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Settings in Streamlit\nDESCRIPTION: Shows how to use st.set_page_config() to configure page-level settings such as the page title and favicon icon.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.set_page_config(\n  page_title=\"My app\",\n  page_icon=\":shark:\",\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Filtered DataFrame with Column Configuration in Streamlit\nDESCRIPTION: Renders the filtered DataFrame in the Streamlit app, maintaining the original column configuration and container width for consistency.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    st.dataframe(\n        filtered_df,\n        column_config=column_configuration,\n        use_container_width=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Download Buttons in Streamlit\nDESCRIPTION: Creates a button that allows users to download a file. The file parameter can be various data types including strings, bytes, or file-like objects.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nst.download_button(\"Download file\", file)\n```\n\n----------------------------------------\n\nTITLE: Interactive DataFrame with Random Data and Styling\nDESCRIPTION: Demonstrates creating an interactive DataFrame with random data and applying style highlighting using Pandas Styler\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\\nimport numpy as np\\nimport pandas as pd\\n\\ndataframe = pd.DataFrame(\\n    np.random.randn(10, 20),\\n    columns=('col %d' % i for i in range(20)))\\n\\nst.dataframe(dataframe.style.highlight_max(axis=0))\n```\n\n----------------------------------------\n\nTITLE: Utilizing the Empty Component in Streamlit Layout\nDESCRIPTION: Demonstrates inserting a single-element container using `st.empty`, showcasing how elements can change dynamically.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_99\n\nLANGUAGE: Python\nCODE:\n```\nc = st.empty()\nst.write(\"This will show last\")\nc.write(\"This will be replaced\")\nc.write(\"This will show first\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Folium Maps in Streamlit\nDESCRIPTION: Integrates Folium maps into Streamlit applications with interactive markers and tooltips.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nm = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nfolium.Marker([39.949610, -75.150282], popup=\"Liberty Bell\", tooltip=\"Liberty Bell\").add_to(m)\n\nst_data = st_folium(m, width=725)\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Line Charts using Streamlit\nDESCRIPTION: This snippet demonstrates how to create a simple line chart with Streamlit, using data from a pandas DataFrame.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nst.line_chart(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Creating a Number Input in Streamlit\nDESCRIPTION: Displays a numeric input widget with optional min and max values. Returns the selected number, which can be an integer or float.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nchoice = st.number_input(\"Pick a number\", 0, 10)\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in Streamlit Python Application\nDESCRIPTION: Demonstrates how to access secrets stored in the secrets.toml file using the st.secrets interface in a Streamlit Python application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.secrets[\"OpenAI_key\"] == \"your OpenAI key\"\n\"sally\" in st.secrets.whitelist\nst.secrets[\"database\"][\"user\"] == \"your username\"\nst.secrets.database.password == \"your password\"\n```\n\n----------------------------------------\n\nTITLE: Writing Fixed-width Text with Streamlit\nDESCRIPTION: The st.text function is used to display fixed-width and preformatted text in Streamlit apps. The text is displayed in a monospace font and preserves whitespace.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/text.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.text(\"Fixed width text\")\n```\n\n----------------------------------------\n\nTITLE: Torchvision Integration with Streamlit Camera\nDESCRIPTION: Demonstrates processing camera input using Torchvision, converting the image to a PyTorch tensor using torchvision.io.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/camera_input.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport torch\nimport torchvision\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer as a 3D uint8 tensor with `torchvision.io`:\n    bytes_data = img_file_buffer.getvalue()\n    torch_img = torchvision.io.decode_image(\n        torch.frombuffer(bytes_data, dtype=torch.uint8)\n    )\n\n    # Check the type of torch_img:\n    # Should output: <class 'torch.Tensor'>\n    st.write(type(torch_img))\n\n    # Check the shape of torch_img:\n    # Should output shape: torch.Size([channels, height, width])\n    st.write(torch_img.shape)\n```\n\n----------------------------------------\n\nTITLE: Extracting Daily Activity Data for Selected Members in Python\nDESCRIPTION: Creates a dictionary of daily activity data for selected members and converts it to a pandas DataFrame.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndaily_activity_df = {}\nfor person in people:\n    daily_activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"daily_activity\"]\ndaily_activity_df = pd.DataFrame(daily_activity_df)\n```\n\n----------------------------------------\n\nTITLE: Hashing Pydantic Model in Streamlit - Error Example\nDESCRIPTION: Example showing a Pydantic model used with a cached function, which results in UnhashableParamError because Streamlit cannot hash Pydantic models by default.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n\n@st.cache_data\ndef identity(person: Person):\n    return person\n\nperson = identity(Person(name=\"Lee\"))\nst.write(f\"The person is {person.name}\")\n```\n\n----------------------------------------\n\nTITLE: Custom Color Scale in Plotly Chart with Streamlit\nDESCRIPTION: Shows how to implement a custom color scale in a Plotly scatter plot while maintaining compatibility with Streamlit theming. Uses the iris dataset to demonstrate custom color configurations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/plotly_chart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport streamlit as st\n\nst.subheader(\"Define a custom colorscale\")\ndf = px.data.iris()\nfig = px.scatter(\n    df,\n    x=\"sepal_width\",\n    y=\"sepal_length\",\n    color=\"sepal_length\",\n    color_continuous_scale=\"reds\",\n)\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Plotly native theme\"])\nwith tab1:\n    st.plotly_chart(fig, theme=\"streamlit\", use_container_width=True)\nwith tab2:\n    st.plotly_chart(fig, theme=None, use_container_width=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Code Tutorials with st.echo in Streamlit\nDESCRIPTION: Use st.echo to display code in the app and then execute it, useful for creating interactive tutorials or educational content in Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith st.echo():\n  st.write('This code will be printed')\n```\n\n----------------------------------------\n\nTITLE: Post-Form Processing in Streamlit\nDESCRIPTION: Shows how to process form data after submission by conditioning on the form_submit_button.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/forms.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ncol1,col2 = st.columns([1,2])\ncol1.title('Sum:')\n\nwith st.form('addition'):\n    a = st.number_input('a')\n    b = st.number_input('b')\n    submit = st.form_submit_button('add')\n\nif submit:\n    col2.title(f'{a+b:.2f}')\n```\n\n----------------------------------------\n\nTITLE: Sidebar Layout Implementation\nDESCRIPTION: Demonstrates how to add widgets to Streamlit's sidebar using st.sidebar, including a selectbox and slider.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Add a selectbox to the sidebar:\nadd_selectbox = st.sidebar.selectbox(\n    'How would you like to be contacted?',\n    ('Email', 'Home phone', 'Mobile phone')\n)\n\n# Add a slider to the sidebar:\nadd_slider = st.sidebar.slider(\n    'Select a range of values',\n    0.0, 100.0, (25.0, 75.0)\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying a Static Image in Streamlit with Python\nDESCRIPTION: This Python code snippet demonstrates how to display a static image served by Streamlit's static file serving feature using `st.markdown`.  It assumes that `enableStaticServing` is enabled and that `cat.png` exists in the `./static/` directory. The markdown creates a clickable image linking to the Streamlit website.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/static-file-serving.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# app.py\nimport streamlit as st\n\nwith st.echo():\n    st.title(\"CAT\")\n\n    st.markdown(\"[![Click me](app/static/cat.png)](https://streamlit.io)\")\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing with spaCy in Streamlit\nDESCRIPTION: This example showcases how to integrate spaCy visualizations into Streamlit applications. It requires preloaded models and text input.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nmodels = [\"en_core_web_sm\", \"en_core_web_md\"]\nspacy_streamlit.visualize(models, \"Sundar Pichai is the CEO of Google.\")\n```\n\n----------------------------------------\n\nTITLE: Using Ace Editor Component in Streamlit\nDESCRIPTION: Integrates the streamlit-ace component to add a code editor with syntax highlighting. Useful for applications that require code input from users.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_ace import st_ace\n\ncontent = st_ace()\ncontent\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase with st-supabase-connection\nDESCRIPTION: This Python code snippet demonstrates how to connect to a Supabase database from a Streamlit application using the `st-supabase-connection` library. It initializes a connection using `st.connection`, performs a query on the 'mytable' table, and prints the results in a user-friendly format.  The `ttl` parameter is used for caching the query results.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/supabase.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"# streamlit_app.py\\n\\nimport streamlit as st\\nfrom st_supabase_connection import SupabaseConnection\\n\\n# Initialize connection.\\nconn = st.connection(\\\"supabase\\\",type=SupabaseConnection)\\n\\n# Perform query.\\nrows = conn.query(\\\"*\\\", table=\\\"mytable\\\", ttl=\\\"10m\\\").execute()\\n\\n# Print results.\\nfor row in rows.data:\\n    st.write(f\\\"{row['name']} has a :{row['pet']}:\\\")\\n\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Toast Notifications in Streamlit\nDESCRIPTION: Briefly displays a toast message in the bottom-right corner of the app. The example shows a toast with custom text and an emoji icon.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_113\n\nLANGUAGE: python\nCODE:\n```\nst.toast('Butter!', icon='🧈')\n```\n\n----------------------------------------\n\nTITLE: Caching data with max_entries using st.cache_data\nDESCRIPTION: This snippet demonstrates how to use the `st.cache_data` decorator with the `max_entries` parameter to limit the number of entries in the cache. When the cache reaches its maximum size, the oldest entry is removed to make space for new entries, preventing excessive memory usage.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data(max_entries=1000)  # 👈 Maximum 1000 entries in the cache\ndef get_large_array(seed):\n    np.random.seed(seed)\n    arr = np.random.rand(100000)\n    return arr\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Ace Editor\nDESCRIPTION: Implementation of the Ace editor component in Streamlit for code editing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_168\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_ace import st_ace\n\ncontent = st_ace()\ncontent\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Streamlit Sidebar\nDESCRIPTION: Shows how to add interactive elements to the sidebar using st.sidebar.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nst.sidebar.write(\"This lives in the sidebar\")\nst.sidebar.button(\"Click me!\")\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Option Menu in Python\nDESCRIPTION: This snippet demonstrates how to use the `option_menu` function from the `streamlit_option_menu` package to create a menu with items like 'Home' and 'Settings'. It includes icons for each menu item.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_87\n\nLANGUAGE: Python\nCODE:\n```\nfrom streamlit_option_menu import option_menu\n\noption_menu(\"Main Menu\", [\"Home\", 'Settings'],\n  icons=['house', 'gear'], menu_icon=\"cast\", default_index=1)\n```\n\n----------------------------------------\n\nTITLE: Environment-based Connection Selection\nDESCRIPTION: Python code demonstrating how to select different database connections based on environment variables\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/connecting-to-data.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nconn = st.connection(\"env:DB_CONN\", \"sql\")\ndf = conn.query(\"select * from mytable\")\n```\n\n----------------------------------------\n\nTITLE: Creating Subheaders with st.subheader in Streamlit\nDESCRIPTION: Use st.subheader to display text in subheader formatting, allowing for nested content organization within larger sections of Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nst.subheader(\"This is a subheader\")\n```\n\n----------------------------------------\n\nTITLE: Defining Mouseover Selection in Altair\nDESCRIPTION: Creates a mouseover selection for the data points in the chart to highlight nearby points and enable tooltip display using Altair's selection feature.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhover = alt.selection_single(\n    fields=[\"date\"],\n    nearest=True,\n    on=\"mouseover\",\n    empty=\"none\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Segmented Control Widgets in Streamlit\nDESCRIPTION: Displays a segmented-button selection widget for choosing between multiple options. Provides a compact UI for selection controls.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nst.segmented_control(\"Filter\", [\"Open\", \"Closed\", \"All\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Streamlit with PyMySQL in TOML\nDESCRIPTION: This TOML configuration modifies the secrets setup to use 'PyMySQL' as the MySQL driver for connecting to TiDB, including additional SSL configuration settings.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tidb.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/secrets.toml\n\n[connections.tidb]\ndialect = \"mysql\"\ndriver = \"pymysql\"\nhost = \"<TiDB_cluster_host>\"\nport = 4000\ndatabase = \"pets\"\nusername = \"<TiDB_cluster_user>\"\npassword = \"<TiDB_cluster_password>\"\ncreate_engine_kwargs = { connect_args = { ssl = { ca = \"<path_to_CA_store>\" }}}\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Dashboards with Streamlit Elements\nDESCRIPTION: Use the Streamlit Elements component to create draggable and resizable dashboards. This third-party component allows for more dynamic layouts in Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_elements import elements, mui, html\n\nwith elements(\"new_element\"):\n  mui.Typography(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Media in Streamlit\nDESCRIPTION: Illustrates how to display images, audio, and video using Streamlit's `st.image`, `st.audio`, `st.video`, and `st.logo` functions. It also includes how to add subtitles to a video.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nst.image(\"./header.png\")\nst.audio(data)\nst.video(data)\nst.video(data, subtitles=\"./subs.vtt\")\nst.logo(\"logo.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Rerunning Streamlit Script\nDESCRIPTION: Demonstrates how to rerun the entire Streamlit script immediately using st.rerun().\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.rerun()\n```\n\n----------------------------------------\n\nTITLE: Updating Toast Messages in Streamlit\nDESCRIPTION: Shows how to create and update a toast message by assigning it to a variable. Implements a breakfast cooking progress sequence with multiple status updates.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/toast.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\n\ndef cook_breakfast():\n    msg = st.toast('Gathering ingredients...')\n    time.sleep(1)\n    msg.toast('Cooking...')\n    time.sleep(1)\n    msg.toast('Ready!', icon = \"🥞\")\n\nif st.button('Cook breakfast'):\n    cook_breakfast()\n```\n\n----------------------------------------\n\nTITLE: Programmatic Page Navigation in Streamlit\nDESCRIPTION: Demonstrates how to programmatically navigate to a different page in a Streamlit application\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/navigation/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.switch_page(\"pages/my_page.py\")\n```\n\n----------------------------------------\n\nTITLE: Testing Selectbox Widget Properties in Streamlit (Python)\nDESCRIPTION: This snippet demonstrates how to write assertions to test various properties of a selectbox widget in a Streamlit app, including value, label, options, and more.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nassert at.selectbox[0].value == None\nassert at.selectbox[0].label == \"A\"\nassert at.selectbox[0].options == [\"1\",\"2\",\"3\"]\nassert at.selectbox[0].index == None\nassert at.selectbox[0].help == \"Pick a number\"\nassert at.selectbox[0].placeholder == \"Pick me\"\nassert at.selectbox[0].disabled == False\n```\n\n----------------------------------------\n\nTITLE: Listing Prerequisite Python Libraries\nDESCRIPTION: This text snippet lists the necessary Python libraries for the tutorial, including specified versions to ensure compatibility and functionality within the Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/microsoft.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nstreamlit>=1.42.0\nAuthlib>=1.3.2\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Save Callback Function\nDESCRIPTION: Create a callback function to save user feedback for specific chat messages, updating the chat history with user sentiment\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef save_feedback(index):\n    st.session_state.history[index][\"feedback\"] = st.session_state[f\"feedback_{index}\"]\n```\n\n----------------------------------------\n\nTITLE: Testing Streamlit Installation with Hello Example\nDESCRIPTION: Commands to test the Streamlit installation by running the built-in Hello example app, with alternative long-form version.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit hello\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Altair Charts with Custom Colors in Streamlit\nDESCRIPTION: This snippet shows how to create a more complex Altair chart with custom colors and multiple interactive selections. It demonstrates that custom color configurations are preserved even when using the Streamlit theme.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/altair_chart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport altair as alt\nimport streamlit as st\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\nscale = alt.Scale(\n    domain=[\"sun\", \"fog\", \"drizzle\", \"rain\", \"snow\"],\n    range=[\"#e7ba52\", \"#a7a7a7\", \"#aec7e8\", \"#1f77b4\", \"#9467bd\"],\n)\ncolor = alt.Color(\"weather:N\", scale=scale)\n\n# We create two selections:\n# - a brush that is active on the top panel\n# - a multi-click that is active on the bottom panel\nbrush = alt.selection_interval(encodings=[\"x\"])\nclick = alt.selection_multi(encodings=[\"color\"])\n\n# Top panel is scatter plot of temperature vs time\npoints = (\n    alt.Chart()\n    .mark_point()\n    .encode(\n        alt.X(\"monthdate(date):T\", title=\"Date\"),\n        alt.Y(\n            \"temp_max:Q\",\n            title=\"Maximum Daily Temperature (C)\",\n            scale=alt.Scale(domain=[-5, 40]),\n        ),\n        color=alt.condition(brush, color, alt.value(\"lightgray\")),\n        size=alt.Size(\"precipitation:Q\", scale=alt.Scale(range=[5, 200])),\n    )\n    .properties(width=550, height=300)\n    .add_selection(brush)\n    .transform_filter(click)\n)\n\n# Bottom panel is a bar chart of weather type\nbars = (\n    alt.Chart()\n    .mark_bar()\n    .encode(\n        x=\"count()\",\n        y=\"weather:N\",\n        color=alt.condition(click, color, alt.value(\"lightgray\")),\n    )\n    .transform_filter(brush)\n    .properties(\n        width=550,\n    )\n    .add_selection(click)\n)\n\nchart = alt.vconcat(points, bars, data=source, title=\"Seattle Weather: 2012-2015\")\n\ntab1, tab2 = st.tabs([\"Streamlit theme (default)\", \"Altair native theme\"])\n\nwith tab1:\n    st.altair_chart(chart, theme=\"streamlit\", use_container_width=True)\nwith tab2:\n    st.altair_chart(chart, theme=None, use_container_width=True)\n```\n\n----------------------------------------\n\nTITLE: Displaying Vega-Lite Charts in Streamlit\nDESCRIPTION: Renders a Vega-Lite chart in a Streamlit app using st.vega_lite_chart. This allows you to create declarative visualizations with Vega-Lite and display them in your Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nst.vega_lite_chart(my_vega_lite_chart)\n```\n\n----------------------------------------\n\nTITLE: Using Image Cropper in Streamlit\nDESCRIPTION: Demonstrates how to implement an image cropper in Streamlit using the streamlit-cropper component created by @turner-anderson.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n```\n\n----------------------------------------\n\nTITLE: Displaying Matplotlib Figures using Streamlit\nDESCRIPTION: This code snippet allows the display of a matplotlib figure within a Streamlit application. The figure needs to be created beforehand.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nst.pyplot(my_mpl_figure)\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data Table in Neon Database\nDESCRIPTION: SQL commands to create a 'home' table and insert sample data into the Neon database.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/neon.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE home (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    pet VARCHAR(100)\n);\n\nINSERT INTO home (name, pet)\nVALUES\n    ('Mary', 'dog'),\n    ('John', 'cat'),\n    ('Robert', 'bird');\n```\n\n----------------------------------------\n\nTITLE: Creating a Generator Wrapper for Unsupported Stream Objects in Streamlit\nDESCRIPTION: This code snippet demonstrates how to create a wrapper around an unsupported stream object to make it compatible with st.write_stream. It processes each chunk from the stream before yielding it to the Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/write-magic/write_stream.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor chunk in unsupported_stream:\n    yield preprocess(chunk)\n```\n\n----------------------------------------\n\nTITLE: Advanced Sidebar Features with Echo and Spinner\nDESCRIPTION: Demonstrates how to use st.echo and st.spinner in the sidebar, which are only supported using 'with' notation. Includes a timer simulation with success message.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/sidebar.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\n\nwith st.sidebar:\n    with st.echo():\n        st.write(\"This code will be printed to the sidebar.\")\n\n    with st.spinner(\"Loading...\"):\n        time.sleep(5)\n    st.success(\"Done!\")\n```\n\n----------------------------------------\n\nTITLE: Using Spinner Animation in Streamlit\nDESCRIPTION: Temporarily displays a spinner animation with a message while executing a block of code. This provides visual feedback during long-running operations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_112\n\nLANGUAGE: python\nCODE:\n```\nwith st.spinner(\"Please wait...\"):\n  do_something_slow()\n```\n\n----------------------------------------\n\nTITLE: Displaying Daily Sales for Current Month in Streamlit\nDESCRIPTION: Creating a header with formatted month/year and displaying all sales data for the current month filtered by date range.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n    st.header(f\"Daily sales for all products, {this_month:%B %Y}\")\n    monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]\n    st.write(monthly_sales)\n```\n\n----------------------------------------\n\nTITLE: Using LocalStorage in Streamlit\nDESCRIPTION: Demonstrates how to access browser localStorage from a Streamlit app using the WS localStorage component. This allows for client-side data persistence.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_151\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_ws_localstorage import injectWebsocketCode\n\nret = conn.setLocalStorageVal(key='k1', val='v1')\nst.write('ret: ' + ret)\n```\n\n----------------------------------------\n\nTITLE: Complex Fragment Implementation with Multiple Functions\nDESCRIPTION: Demonstrates a more complex implementation with multiple fragment functions and different widget types, showing how fragments interact with the main app flow.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/fragments.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title(\"My Awesome App\")\n\n@st.fragment()\ndef toggle_and_text():\n    cols = st.columns(2)\n    cols[0].toggle(\"Toggle\")\n    cols[1].text_area(\"Enter text\")\n\n@st.fragment()\ndef filter_and_file():\n    cols = st.columns(2)\n    cols[0].checkbox(\"Filter\")\n    cols[1].file_uploader(\"Upload image\")\n\ntoggle_and_text()\ncols = st.columns(2)\ncols[0].selectbox(\"Select\", [1,2,3], None)\ncols[1].button(\"Update\")\nfilter_and_file()\n```\n\n----------------------------------------\n\nTITLE: Integrating Lottie Animations with Streamlit in Python\nDESCRIPTION: Demonstrates how to include Lottie animations within a Streamlit app using `st_lottie` and a preloaded animation from a URL.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_95\n\nLANGUAGE: Python\nCODE:\n```\nlottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\n\nst_lottie(lottie_hello, key=\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Creating Mentions with Streamlit Extras\nDESCRIPTION: Use the mention function from streamlit-extras to create formatted links with icons in Streamlit apps, useful for references, citations, or external resources.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmention(label=\"An awesome Streamlit App\", icon=\"streamlit\",  url=\"https://extras.streamlit.app\",)\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Buttons with Customizable Options in Streamlit\nDESCRIPTION: This example demonstrates how to create a radio button widget in Streamlit with customizable visibility, orientation, and disabled state. The code uses session state to store widget states and displays a radio button alongside checkboxes that control its properties.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/radio.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Store the initial value of widgets in session state\nif \"visibility\" not in st.session_state:\n    st.session_state.visibility = \"visible\"\n    st.session_state.disabled = False\n    st.session_state.horizontal = False\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.checkbox(\"Disable radio widget\", key=\"disabled\")\n    st.checkbox(\"Orient radio options horizontally\", key=\"horizontal\")\n\nwith col2:\n    st.radio(\n        \"Set label visibility 👇\",\n        [\"visible\", \"hidden\", \"collapsed\"],\n        key=\"visibility\",\n        label_visibility=st.session_state.visibility,\n        disabled=st.session_state.disabled,\n        horizontal=st.session_state.horizontal,\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Dataframe with User Row Selections in Streamlit\nDESCRIPTION: Function to add a selection checkbox column to a dataframe and allow users to select rows in a Streamlit application using st.data_editor. Handles copying the dataframe, inserting a selection column, and filtering selected rows.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row-selections (old).md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef dataframe_with_selections(df):\n    df_with_selections = df.copy()\n    df_with_selections.insert(0, \"Select\", False)\n\n    # Get dataframe row-selections from user with st.data_editor\n    edited_df = st.data_editor(\n        df_with_selections,\n        hide_index=True,\n        column_config={\"Select\": st.column_config.CheckboxColumn(required=True)},\n        disabled=df.columns,\n    )\n\n    # Filter the dataframe using the temporary column, then drop the column\n    selected_rows = edited_df[edited_df.Select]\n    return selected_rows.drop('Select', axis=1)\n```\n\n----------------------------------------\n\nTITLE: Displaying Metrics with Streamlit Python Component\nDESCRIPTION: Using st.metric() to show a numeric value with an optional delta indicator that shows how the metric has changed. Commonly used for displaying KPIs and important statistics in Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/metric.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.metric(label=\"Temperature\", value=\"24 °C\", delta=\"1.2 °C\")\n```\n\n----------------------------------------\n\nTITLE: Integrating Streamlit Extras Library in Python\nDESCRIPTION: The code uses the `stoggle` function from the `streamlit_extras.stoggle` module to create a toggle button that reveals content upon clicking.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_88\n\nLANGUAGE: Python\nCODE:\n```\nfrom streamlit_extras.stoggle import stoggle\n\nstoggle(\n    \"Click me!\", \"\"\"🥷 Surprise! Here's some additional content\"\"\",)\n```\n\n----------------------------------------\n\nTITLE: Serialized Class Storage Pattern\nDESCRIPTION: Pattern for storing class instances as serialized data to avoid redefinition issues.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/custom-classes.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom dataclasses import dataclass\n\n@dataclass\nclass MyDataclass:\n    var1: int\n    var2: float\n\n    def to_str(self):\n        return f\"{self.var1},{self.var2}\"\n\n    @classmethod\n    def from_str(cls, serial_str):\n        values = serial_str.split(\",\")\n        var1 = int(values[0])\n        var2 = float(values[1])\n        return cls(var1, var2)\n\nif \"my_dataclass\" not in st.session_state:\n    st.session_state.my_dataclass = MyDataclass(1, 5.5).to_str()\n\n# Displays True on every rerun\nMyDataclass.from_str(st.session_state.my_dataclass) == MyDataclass(1, 5.5)\n\nst.button(\"Rerun\")\n```\n\n----------------------------------------\n\nTITLE: Database Query Caching\nDESCRIPTION: Example of caching database queries to reduce database load and improve app performance.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconnection = database.connect()\n\n@st.cache_data\ndef query():\n    return pd.read_sql_query(\"SELECT * from table\", connection)\n```\n\n----------------------------------------\n\nTITLE: Creating Camera Input Widgets in Streamlit\nDESCRIPTION: Displays a widget that enables users to capture images from their camera. Returns the captured image data for processing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nimage = st.camera_input(\"Take a picture\")\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Interface in Streamlit\nDESCRIPTION: Demonstrates creating a tabbed interface with multiple content sections.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\ntab1.write(\"this is tab 1\")\ntab2.write(\"this is tab 2\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Badge in Streamlit\nDESCRIPTION: Uses st.badge() to display a small, colored badge, useful for highlighting new features or important information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.badge(\"New\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Screen Function in Streamlit\nDESCRIPTION: Defines a function that displays a login interface with a header, subheader, and a Google login button using Streamlit's login command as a callback.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/google.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef login_screen():\n    st.header(\"This app is private.\")\n    st.subheader(\"Please log in.\")\n    st.button(\"Log in with Google\", on_click=st.login)\n```\n\n----------------------------------------\n\nTITLE: Unsupported Private GitHub Repository Installation Format\nDESCRIPTION: This snippet shows the format for installing from private GitHub repositories using authentication tokens, which is currently not supported in Streamlit Community Cloud. This is included as an example of what is not possible.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/install-package-pypi-github.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit+https://{token}@github.com/user/project.git@{version}\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages in Streamlit\nDESCRIPTION: Displays an error message box with red styling. This is used to inform users about critical issues or failures in the application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_119\n\nLANGUAGE: python\nCODE:\n```\nst.error(\"We encountered an error\")\n```\n\n----------------------------------------\n\nTITLE: Avoid Nesting Buttons in Streamlit\nDESCRIPTION: This snippet demonstrates the anti-pattern of nesting buttons within other buttons in Streamlit. Nested buttons will not function as expected since only the outer button is processed on the frontend.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif st.button('Button 1'):\n    st.write('Button 1 was clicked')\n    if st.button('Button 2'):\n        # This will never be executed.\n        st.write('Button 2 was clicked')\n```\n\n----------------------------------------\n\nTITLE: Initializing Streamlit Application with Login Functionality\nDESCRIPTION: This Python snippet initializes a Streamlit application with login and logout features using Microsoft Entra ID. It prompts non-authenticated users to log in with Microsoft and displays a personalized message for authenticated users. Requires the Streamlit library and Microsoft Entra configuration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/microsoft.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef login_screen():\n    st.header(\"This app is private.\")\n    st.subheader(\"Please log in.\")\n    st.button(\"Log in with Microsoft\", on_click=st.login)\n\nif not st.experimental_user.is_logged_in:\n    login_screen()\nelse:\n    st.header(f\"Welcome, {st.experimental_user.name}!\")\n    st.button(\"Log out\", on_click=st.logout)\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs for UI Organization in Streamlit\nDESCRIPTION: Creates two tabs to organize the UI into 'Select members' and 'Compare selected' sections.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nselect, compare = st.tabs([\"Select members\", \"Compare selected\"])\n```\n\n----------------------------------------\n\nTITLE: Filtering DataFrame Based on Row Selection in Streamlit\nDESCRIPTION: Retrieves the indices of selected rows from a Streamlit event and filters the DataFrame accordingly using pandas iloc indexer.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npeople = event.selection.rows\nfiltered_df = df.iloc[people]\n```\n\n----------------------------------------\n\nTITLE: Initializing AppTest Class in Streamlit Testing Framework\nDESCRIPTION: The AppTest class provides a testing framework for Streamlit applications, allowing simulation and programmatic interaction with Streamlit app elements and widgets. It serves as the main entry point for writing tests for Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/testing/st.testing.v1.AppTest.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n```\n\n----------------------------------------\n\nTITLE: Setting Application Title in Streamlit\nDESCRIPTION: Uses st.title() to display text in title formatting, typically used at the beginning of an app to set its main title.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.title(\"The app title\")\n```\n\n----------------------------------------\n\nTITLE: Adding Rows to Streamlit Dataframe\nDESCRIPTION: The add_rows method allows adding new rows to an existing dataframe display. This enables incremental updates to displayed data without recreating the entire dataframe.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/dataframe.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDeltaGenerator.add_rows(data=None, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Notification Box Component in Streamlit\nDESCRIPTION: Uses the custom notification box component to display a closable notification with styling options. The component allows for custom styling and external links.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_122\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_custom_notification_box import custom_notification_box\n\nstyles = {'material-icons':{'color': 'red'}, 'text-icon-link-close-container': {'box-shadow': '#3896de 0px 4px'}, 'notification-text': {'':''}, 'close-button':{'':''}, 'link':{'':''}}\ncustom_notification_box(icon='info', textDisplay='We are almost done with your registration...', externalLink='more info', url='#', styles=styles, key=\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Mutating Data in Streamlit\nDESCRIPTION: Illustrates how to mutate data in Streamlit after it has been displayed using `add_rows` on `st.dataframe` and `st.line_chart` elements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Add rows to a dataframe after\n# showing it.\nelement = st.dataframe(df1)\nelement.add_rows(df2)\n\n# Add rows to a chart after\n# showing it.\nelement = st.line_chart(df1)\nelement.add_rows(df2)\n```\n\n----------------------------------------\n\nTITLE: Customizing Streamlit Theme\nDESCRIPTION: Theme configuration options including color schemes, fonts, and visual styling parameters for the main application interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[theme]\n\nbase =\nprimaryColor =\nbackgroundColor =\nsecondaryBackgroundColor =\ntextColor =\nlinkColor =\ncodeBackgroundColor =\nfont =\ncodeFont =\nheadingFont =\nfontFaces =\nbaseRadius =\nborderColor =\nshowWidgetBorder =\nbaseFontSize =\nshowSidebarBorder =\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkbox in Streamlit\nDESCRIPTION: Displays a checkbox widget that returns True when checked and False when unchecked. Useful for boolean options in forms.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nselected = st.checkbox(\"I agree\")\n```\n\n----------------------------------------\n\nTITLE: Streamlit Echo Implementation Example\nDESCRIPTION: Demonstrates how to use st.echo() to display and execute code simultaneously in a Streamlit app. The code within the echo block will be both shown in the UI and executed.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/echo.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef get_user_name():\n    return 'John'\n\nwith st.echo():\n    # Everything inside this block will be both printed to the screen\n    # and executed.\n\n    def get_punctuation():\n        return '!!!'\n\n    greeting = \"Hi there, \"\n    value = get_user_name()\n    punctuation = get_punctuation()\n\n    st.write(greeting, value, punctuation)\n\n# And now we're back to _not_ printing to the screen\nfoo = 'bar'\nst.write('Done!')\n```\n\n----------------------------------------\n\nTITLE: Structuring Content with Tabs in Streamlit Apps\nDESCRIPTION: Describes the implementation of `st.tabs` for dividing content into separate tab views within a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_103\n\nLANGUAGE: Python\nCODE:\n```\ntab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\ntab1.write(\"this is tab 1\")\ntab2.write(\"this is tab 2\")\n```\n\n----------------------------------------\n\nTITLE: Using Status Container in Streamlit\nDESCRIPTION: Creates a status container that displays the output of long-running tasks, providing visual feedback about operation progress.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith st.status('Running'):\n  do_something_slow()\n```\n\n----------------------------------------\n\nTITLE: Displaying Streams with st.write_stream in Python\nDESCRIPTION: Use st.write_stream to display generators or streams with a typewriter effect in Streamlit apps. This is useful for showing LLM responses or other streaming data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.write_stream(my_generator)\nst.write_stream(my_llm_stream)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pseudo-Login in Streamlit with Python\nDESCRIPTION: This code snippet sets up the main page `app.py` to act as a pseudo-login using a selectbox to choose roles. The role selection is stored in Streamlit's Session State, ensuring persistence across page navigation. Dependencies include the `streamlit` library and the `menu` function.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/custom-navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\nfrom menu import menu\n\n# Initialize st.session_state.role to None\nif \"role\" not in st.session_state:\n    st.session_state.role = None\n\n# Retrieve the role from Session State to initialize the widget\nst.session_state._role = st.session_state.role\n\ndef set_role():\n    # Callback function to save the role selection to Session State\n    st.session_state.role = st.session_state._role\n\n\n# Selectbox to choose role\nst.selectbox(\n    \"Select your role:\",\n    [None, \"user\", \"admin\", \"super-admin\"],\n    key=\"_role\",\n    on_change=set_role,\n)\nmenu() # Render the dynamic menu!\n```\n\n----------------------------------------\n\nTITLE: Selectbox Widget with DataFrame Integration\nDESCRIPTION: Shows how to create a selectbox widget populated with values from a pandas DataFrame column.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'first column': [1, 2, 3, 4],\n    'second column': [10, 20, 30, 40]\n    })\n\noption = st.selectbox(\n    'Which number do you like best?',\n     df['first column'])\n\n'You selected: ', option\n```\n\n----------------------------------------\n\nTITLE: Detecting Month Changes and Triggering Rerun in Streamlit\nDESCRIPTION: Checking if the month has changed by comparing the first day of each month, and triggering a full app rerun if it has. This ensures all app components update when the month changes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n    is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)\n    if is_new_month:\n        st.rerun()\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in Streamlit\nDESCRIPTION: Shows how to access secrets from a local TOML file, which is useful for managing API keys and other sensitive information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_148\n\nLANGUAGE: python\nCODE:\n```\nkey = st.secrets[\"OpenAI_key\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring a Component in Python\nDESCRIPTION: Declares a Streamlit component using `components.declare_component()`, specifying the component's name and the URL of the development server.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/components-api.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit.components.v1 as components\nmy_component = components.declare_component(\n    \"my_component\",\n    url=\"http://localhost:3001\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing Streamlit Container Layout\nDESCRIPTION: Basic usage of st.container() to create a container that can hold multiple Streamlit elements. Containers help organize the layout of Streamlit apps by grouping related elements together.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/container.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.container()\n```\n\n----------------------------------------\n\nTITLE: Creating Selectbox Widgets in Streamlit\nDESCRIPTION: Displays a dropdown menu for selecting a single option from a list. Returns the value of the selected option.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nchoice = st.selectbox(\"Pick one\", [\"cats\", \"dogs\"])\n```\n\n----------------------------------------\n\nTITLE: Using st.empty as placeholders for inserting elements out of order in Streamlit\nDESCRIPTION: This example demonstrates how to use st.empty() to create placeholder slots that can be filled later in execution, allowing for non-sequential element insertion. The code creates empty slots, displays text before and after them, then fills the slots with text and a chart.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/insert-elements-out-of-order.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.text('This will appear first')\n# Appends some text to the app.\n\nmy_slot1 = st.empty()\n# Appends an empty slot to the app. We'll use this later.\n\nmy_slot2 = st.empty()\n# Appends another empty slot.\n\nst.text('This will appear last')\n# Appends some more text to the app.\n\nmy_slot1.text('This will appear second')\n# Replaces the first empty slot with a text string.\n\nmy_slot2.line_chart(np.random.randn(20, 2))\n# Replaces the second empty slot with a chart.\n```\n\n----------------------------------------\n\nTITLE: Installing Git Dependencies in Docker\nDESCRIPTION: Installs necessary system packages including git for cloning repository code.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    curl \\\n    software-properties-common \\\n    git \\\n    && rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Defining Request Pages with Conditional Default\nDESCRIPTION: Creates page objects for request-related functionality with conditional default page selection based on user role. The default parameter is set to True when the user's role is 'Requester'.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrequest_1 = st.Page(\n    \"request/request_1.py\",\n    title=\"Request 1\",\n    icon=\":material/help:\",\n    default=(role == \"Requester\"),\n)\nrequest_2 = st.Page(\n    \"request/request_2.py\", title=\"Request 2\", icon=\":material/bug_report:\"\n)\n```\n\n----------------------------------------\n\nTITLE: Session State Read Operations\nDESCRIPTION: Demonstrates how to read values from Streamlit's session state.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif 'key' not in st.session_state:\n    st.session_state['key'] = 'value'\n\n# Reads\nst.write(st.session_state.key)\n\n# Outputs: value\n```\n\n----------------------------------------\n\nTITLE: Setting Python Base Image in Docker\nDESCRIPTION: Specifies the base Python image for the Docker container using a lightweight Python 3.9 image.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nFROM python:3.9-slim\n```\n\n----------------------------------------\n\nTITLE: Organizing Complete Streamlit App with Tabs\nDESCRIPTION: Full implementation of the app organized into selection and comparison tabs, including all functionality from the previous steps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nwith select: # Add select tab #############################################\n    st.header(\"All members\")\n\n    df = get_profile_dataset()\n\n    event = st.dataframe(\n        df,\n        column_config=column_configuration,\n        use_container_width=True,\n        hide_index=True,\n        on_select=\"rerun\",\n        selection_mode=\"multi-row\",\n    )\n\n    st.header(\"Selected members\")\n    people = event.selection.rows\n    filtered_df = df.iloc[people]\n    st.dataframe(\n        filtered_df,\n        column_config=column_configuration,\n        use_container_width=True,\n    )\n\nwith compare: # Add compare tab ###########################################\n    activity_df = {}\n    for person in people:\n        activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"activity\"]\n    activity_df = pd.DataFrame(activity_df)\n\n    daily_activity_df = {}\n    for person in people:\n        daily_activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"daily_activity\"]\n    daily_activity_df = pd.DataFrame(daily_activity_df)\n\n    if len(people) > 0:\n        st.header(\"Daily activity comparison\")\n        st.bar_chart(daily_activity_df)\n        st.header(\"Yearly activity comparison\")\n        st.line_chart(activity_df)\n    else:\n        st.markdown(\"No members selected.\")\n```\n\n----------------------------------------\n\nTITLE: Managing Slider Widgets in Streamlit\nDESCRIPTION: This code segment demonstrates how sliders in Streamlit behave with respect to statefulness when their parameters are changed. The sliders reset their values if their defining parameters (like min and max) are modified.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/widget-behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ncols = st.columns([2, 1, 2])\nminimum = cols[0].number_input(\"Minimum\", 1, 5)\nmaximum = cols[2].number_input(\"Maximum\", 6, 10, 10)\n\nst.slider(\"No default, no key\", minimum, maximum)\nst.slider(\"No default, with key\", minimum, maximum, key=\"a\")\nst.slider(\"With default, no key\", minimum, maximum, value=5)\nst.slider(\"With default, with key\", minimum, maximum, value=5, key=\"b\")\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Text Area Input in Streamlit\nDESCRIPTION: This code snippet demonstrates how to add an extra check for an empty text area within the `rewrite` stage of a Streamlit application. It addresses an edge case where a user can bypass input validation by deleting all text in a text area and immediately clicking an \"Update\" button. This prevents the app from processing empty submissions and ensures the button is correctly disabled.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n```diff\n-       if st.button(\n-           \"Update\", type=\"primary\", disabled=new is None or new.strip(\". \") == \"\"\n-       ):\n+       is_empty = new is None or new.strip(\". \") == \"\"\n+       if st.button(\"Update\", type=\"primary\", disabled=is_empty) and not is_empty:\n            st.session_state.history.append({\"role\": \"assistant\", \"content\": new})\n            st.session_state.pending = None\n            st.session_state.validation = {}\n            st.session_state.stage = \"user\"\n            st.rerun()\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Drawable Canvas in Streamlit\nDESCRIPTION: Demonstrates how to implement a sketching canvas in Streamlit using the streamlit-drawable-canvas component, which is built on Fabric.js and created by @andfanilo.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeColumn in Streamlit DataFrames\nDESCRIPTION: Example showing how to configure time display in Streamlit using st.column_config.TimeColumn. This class allows customization of how time values are displayed in dataframes and tables.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/timecolumn.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.column_config.TimeColumn\n```\n\n----------------------------------------\n\nTITLE: Editing List of Records in Streamlit Data Editor\nDESCRIPTION: This snippet shows how to use Streamlit's data editor to edit a list of records, where each record is a dictionary containing information about Streamlit elements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nst.data_editor([\n    {\"name\": \"st.text_area\", \"type\": \"widget\"},\n    {\"name\": \"st.markdown\", \"type\": \"element\"},\n])\n```\n\n----------------------------------------\n\nTITLE: Using HTML Component in Streamlit\nDESCRIPTION: Shows how to display an HTML string in an iframe using the html component. This allows embedding custom HTML content in Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_154\n\nLANGUAGE: python\nCODE:\n```\nfrom st.components.v1 import html\nhtml(\n    \"<p>Foo bar.</p>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Streamlit Sidebar\nDESCRIPTION: Shows how to add widgets and other elements to the Streamlit sidebar using `st.sidebar`. Includes examples using both direct assignment and the `with` notation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Just add it after st.sidebar:\na = st.sidebar.radio(\"Select one:\", [1, 2])\n\n# Or use \"with\" notation:\nwith st.sidebar:\n    st.radio(\"Select one:\", [1, 2])\n```\n\n----------------------------------------\n\nTITLE: Creating Headers with st.header in Streamlit\nDESCRIPTION: Use st.header to display text in header formatting, providing a clear hierarchical structure for content sections in Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nst.header(\"This is a header\")\n```\n\n----------------------------------------\n\nTITLE: Testing Interactive Elements\nDESCRIPTION: Collection of examples showing how to test various interactive Streamlit elements\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/testing/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nat.button[0].click().run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.chat_input[0].set_value(\"What is Streamlit?\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.checkbox[0].check().run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.color_picker[0].pick(\"#FF4B4B\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nrelease_date = datetime.date(2023, 10, 26)\nat.date_input[0].set_value(release_date).run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.multiselect[0].select(\"New York\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.number_input[0].increment().run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.radio[0].set_value(\"New York\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.select_slider[0].set_range(\"A\",\"C\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.selectbox[0].select(\"New York\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.slider[0].set_range(2,5).run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.text_area[0].input(\"Streamlit is awesome!\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.text_input[0].input(\"Streamlit\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.time_input[0].increment().run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.toggle[0].set_value(\"True\").run()\n```\n\n----------------------------------------\n\nTITLE: Interactive Time Slider Implementation\nDESCRIPTION: Creates an interactive slider widget to filter data by hour, allowing values from 0 to 23 with a default of 17.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nhour_to_filter = st.slider('hour', 0, 23, 17)  # min: 0h, max: 23h, default: 17h\n```\n\n----------------------------------------\n\nTITLE: Using Session State in Streamlit\nDESCRIPTION: Demonstrates how to use session state to share variables between reruns for each user session. This allows maintaining state across app interactions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_141\n\nLANGUAGE: python\nCODE:\n```\nst.session_state['key'] = value\n```\n\n----------------------------------------\n\nTITLE: Initializing Session State Variables in Python\nDESCRIPTION: Shows two methods to initialize values in Streamlit's Session State using dictionary-style and attribute-based syntax\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Initialization\nif 'key' not in st.session_state:\n    st.session_state['key'] = 'value'\n\n# Session State also supports attribute based syntax\nif 'key' not in st.session_state:\n    st.session_state.key = 'value'\n```\n\n----------------------------------------\n\nTITLE: Displaying Dataframes using Streamlit\nDESCRIPTION: The snippet demonstrates how to use the st.dataframe function in Streamlit to render a Pandas DataFrame in a table-like UI with interactive features such as column sorting, resizing, hiding, and more. It requires the Streamlit and Pandas libraries. The function takes the dataframe as an input and displays it with optional parameters such as use_container_width to extend the dataframe to the container's width.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.DataFrame(\n    [\n        {\"command\": \"st.selectbox\", \"rating\": 4, \"is_widget\": True},\n        {\"command\": \"st.balloons\", \"rating\": 5, \"is_widget\": False},\n        {\"command\": \"st.time_input\", \"rating\": 3, \"is_widget\": True},\n    ]\n)\n\nst.dataframe(df, use_container_width=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Streamlit and Time for App Components\nDESCRIPTION: This snippet imports the necessary libraries, Streamlit and time, which are essential for creating the application and controlling execution speed respectively.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/create-a-multiple-container-fragment.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\n```\n\n----------------------------------------\n\nTITLE: Creating Pills Selection Widget in Streamlit\nDESCRIPTION: Displays a pill-button selection widget for choosing options. Provides a modern UI for selection from a small set of options.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nst.pills(\"Tags\", [\"Sports\", \"AI\", \"Politics\"])\n```\n\n----------------------------------------\n\nTITLE: Accessing Uninitialized Session State Variables\nDESCRIPTION: Example of accessing an uninitialized variable which throws an exception\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.write(st.session_state['value'])\n\n# Throws an exception!\n```\n\n----------------------------------------\n\nTITLE: Building Custom Connections in Streamlit\nDESCRIPTION: Demonstrates how to create a custom connection by extending the BaseConnection class. This includes implementing the _connect method and any other methods needed for the connection.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_147\n\nLANGUAGE: python\nCODE:\n```\nclass MyConnection(BaseConnection[myconn.MyConnection]):\n    def _connect(self, **kwargs) -> MyConnection:\n        return myconn.connect(**self._secrets, **kwargs)\n    def query(self, query):\n        return self._instance.query(query)\n```\n\n----------------------------------------\n\nTITLE: Defining Fragments in Streamlit\nDESCRIPTION: Shows how to define a fragment using the @st.fragment decorator. The fragment can rerun independently on a specified interval.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment(run_every=\"10s\")\ndef fragment():\n    df = get_data()\n    st.line_chart(df)\n```\n\n----------------------------------------\n\nTITLE: Rendering Folium Maps in Streamlit\nDESCRIPTION: Creates an interactive Folium map with markers and tooltips.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nm = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nfolium.Marker([39.949610, -75.150282], popup=\"Liberty Bell\", tooltip=\"Liberty Bell\").add_to(m)\n\nst_data = st_folium(m, width=725)\n```\n\n----------------------------------------\n\nTITLE: Configuring Streamlit Secrets for SQL Server (TOML)\nDESCRIPTION: TOML configuration for storing SQL Server connection details in Streamlit secrets file. Includes server name, database name, username, and password.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mssql.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/secrets.toml\n\nserver = \"localhost\"\ndatabase = \"mydb\"\nusername = \"SA\"\npassword = \"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Column in Streamlit\nDESCRIPTION: This snippet demonstrates setting up a date column with a maximum allowed date and custom date formatting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nDateColumn(\"Birthday\", max_value=date(2005, 1, 1), format=\"DD.MM.YYYY\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Streamlit Application Secrets - TOML\nDESCRIPTION: This snippet illustrates how to configure the Streamlit application by adding database credentials to the '.streamlit/secrets.toml' file. It includes host, username, password, and graph name parameters, which are required to securely connect to the TigerGraph database.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tigergraph.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n\"# .streamlit/secrets.toml\\n\\n[tigergraph]\\nhost = \\\"https://xxx.i.tgcloud.io/\\\"\\nusername = \\\"xxx\\\"\\npassword = \\\"xxx\\\"\\ngraphname = \\\"xxx\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Requirements.txt Example\nDESCRIPTION: A simple requirements.txt file listing common dependencies for a Streamlit app. This file is used by pip to install the required Python packages in the deployment environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/deploy-your-app/app-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nstreamlit\npandas\nnumpy\n```\n\n----------------------------------------\n\nTITLE: Validating Chat Responses in Python\nDESCRIPTION: Function that splits a response into sentences and validates each sentence based on word count. It returns two lists: the cleaned sentences and a boolean list indicating whether each sentence passed validation (has more than 5 words).\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef validate(response):\n    response_sentences = response.split(\". \")\n    response_sentences = [\n        sentence.strip(\". \") + \".\"\n        for sentence in response_sentences\n        if sentence.strip(\". \") != \"\"\n    ]\n    validation_list = [\n        True if sentence.count(\" \") > 4 else False for sentence in response_sentences\n    ]\n    return response_sentences, validation_list\n```\n\n----------------------------------------\n\nTITLE: Last Timestamp Retrieval\nDESCRIPTION: Gets the timestamp of the most recent datapoint from the session state\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nlast_timestamp = st.session_state.data.index[-1]\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Requirements in Bash\nDESCRIPTION: This snippet adds the required Python dependencies 'mysqlclient' and 'SQLAlchemy' to the requirements.txt file, ensuring compatibility with the Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tidb.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# requirements.txt\nmysqlclient==x.x.x\nSQLAlchemy==x.x.x\n```\n\n----------------------------------------\n\nTITLE: Combining Data and Annotation Layers\nDESCRIPTION: Merges the data layer and the annotation layer to create a final combined chart that visually represents both data and textual annotations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncombined_chart = data_layer + annotation_layer\n```\n\n----------------------------------------\n\nTITLE: Displaying Daily Activity Comparison with Bar Chart in Streamlit\nDESCRIPTION: Renders a bar chart visualization of the daily activity data for the selected members.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n    st.bar_chart(daily_activity_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Image Coordinates in Streamlit\nDESCRIPTION: Captures and displays coordinates of user clicks on an image.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\n\nst.write(value)\n```\n\n----------------------------------------\n\nTITLE: Iframe Embedding with Multiple Options Combined\nDESCRIPTION: This snippet demonstrates how to combine multiple embed options when embedding a Streamlit app, including showing the toolbar, padding, footer, colored line, and disabling scrolling.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/?embed=true&embed_options=show_toolbar&embed_options=show_padding&embed_options=show_footer&embed_options=show_colored_line&embed_options=disable_scrolling\n```\n\n----------------------------------------\n\nTITLE: OpenCV Integration with Streamlit Camera\nDESCRIPTION: Demonstrates how to process camera input using OpenCV, converting the image buffer to an OpenCV-compatible numpy array.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/camera_input.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport cv2\nimport numpy as np\n\nimg_file_buffer = st.camera_input(\"Take a picture\")\n\nif img_file_buffer is not None:\n    # To read image file buffer with OpenCV:\n    bytes_data = img_file_buffer.getvalue()\n    cv2_img = cv2.imdecode(np.frombuffer(bytes_data, np.uint8), cv2.IMREAD_COLOR)\n\n    # Check the type of cv2_img:\n    # Should output: <class 'numpy.ndarray'>\n    st.write(type(cv2_img))\n\n    # Check the shape of cv2_img:\n    # Should output shape: (height, width, channels)\n    st.write(cv2_img.shape)\n```\n\n----------------------------------------\n\nTITLE: Creating Annotations for the Chart\nDESCRIPTION: Defines a list of annotations including dates, prices, markers (emojis), and descriptions to add contextual information to specific points on the chart.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nANNOTATIONS = [\n    (\"Sep 01, 2007\", 450, \"🙂\", \"Something's going well for GOOG & AAPL.\"),\n    (\"Nov 01, 2008\", 220, \"🙂\", \"The market is recovering.\"),\n    (\"Dec 01, 2007\", 750, \"😱\", \"Something's going wrong for GOOG & AAPL.\"),\n    (\"Dec 01, 2009\", 680, \"😱\", \"A hiccup for GOOG.\"),\n]\nannotations_df = pd.DataFrame(\n    ANNOTATIONS, columns=[\"date\", \"price\", \"marker\", \"description\"]\n)\nannotations_df.date = pd.to_datetime(annotations_df.date)\n```\n\n----------------------------------------\n\nTITLE: Displaying Exception Output in Streamlit\nDESCRIPTION: Shows a formatted box containing exception details including traceback information, useful for debugging and error reporting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ne = RuntimeError(\"This is an exception of type RuntimeError\")\nst.exception(e)\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Component in Streamlit\nDESCRIPTION: Shows how to use the streamlit-pydantic component to auto-generate Streamlit UI from Pydantic Models and Dataclasses.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit_pydantic as sp\n\nsp.pydantic_form(key=\"my_form\",\n  model=ExampleModel)\n```\n\n----------------------------------------\n\nTITLE: Displaying Simple Bar Charts in Streamlit\nDESCRIPTION: Creates and displays a bar chart using Streamlit's built-in st.bar_chart function. Takes a data frame as input and renders it as a bar chart without requiring any additional configuration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.bar_chart(my_data_frame)\n```\n\n----------------------------------------\n\nTITLE: Installing Streamlit\nDESCRIPTION: Demonstrates how to install Streamlit using pip and how to import it into a Python script. Includes the command to run a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install streamlit\n\nstreamlit run first_app.py\n\n# Import convention\n>>> import streamlit as st\n```\n\n----------------------------------------\n\nTITLE: Testing Status Elements in Streamlit Using AppTest - Python\nDESCRIPTION: This snippet showcases how to validate the various status notifications and alerts in a Streamlit application, ensuring they convey the expected messages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/cheat-sheet.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# exception\nassert len(at.exception) == 1\nassert \"TypeError\" in at.exception[0].value\n\n# Other in-line alerts: success, info, warning, error\nassert at.success[0].value == \"Great job!\"\nassert at.info[0].value == \"Please enter an API key to continue\"\nassert at.warning[0].value == \"Sorry, the passwords didn't match\"\nassert at.error[0].value == \"Something went wrong :((\"\n\n# toast\nassert at.toast[0].value == \"That was lit!\" and at.toast[0].icon == \"🔥\"\n```\n\n----------------------------------------\n\nTITLE: Creating Slider Widgets in Streamlit\nDESCRIPTION: Displays a slider widget for selecting a value within a range. Provides a visual way to select numeric values.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nnumber = st.slider(\"Pick a number\", 0, 100)\n```\n\n----------------------------------------\n\nTITLE: Using Static Streamlit Elements in Cached Functions\nDESCRIPTION: Example showing how to use static Streamlit elements like st.success within a cached function. This function loads an NLP model and displays a success message.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/cache-resource.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom transformers import pipeline\n\n@st.cache_resource\ndef load_model():\n    model = pipeline(\"sentiment-analysis\")\n    st.success(\"Loaded NLP model from Hugging Face!\")  # 👈 Show a success message\n    return model\n```\n\n----------------------------------------\n\nTITLE: Displaying Best Sellers Data Visualization in Streamlit\nDESCRIPTION: Creating a header with formatted date and displaying the top ten sellers for the selected date using both a dataframe and bar chart in a two-column layout.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n    st.header(f\"Best sellers, {selected_date:%m/%d/%y}\")\n    top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]\n    cols = st.columns([1, 4])\n    cols[0].dataframe(top_ten)\n    cols[1].bar_chart(top_ten)\n```\n\n----------------------------------------\n\nTITLE: Using Magic Commands for Simplified Display in Streamlit\nDESCRIPTION: Demonstrates Streamlit's 'magic' functionality, which automatically writes variables or literal values to the app when they appear on their own line. This provides a shorthand alternative to using st.write.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/write-magic/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"Hello **world**!\"\nmy_data_frame\nmy_mpl_figure\n```\n\n----------------------------------------\n\nTITLE: Testing Sales Visualization Functions in Streamlit\nDESCRIPTION: Example code to test both the show_daily_sales and show_monthly_sales functions by getting data and calling both functions. This is temporary code that should be deleted after testing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndata = get_data()\nshow_daily_sales(data)\nshow_monthly_sales(data)\n```\n\n----------------------------------------\n\nTITLE: Using Empty Container for Single Element\nDESCRIPTION: Demonstrates using an empty container to control placement and updating of a single element.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nc = st.empty()\nst.write(\"This will show last\")\nc.write(\"This will be replaced\")\nc.write(\"This will show first\")\n```\n\n----------------------------------------\n\nTITLE: Styling Metric Cards in Streamlit\nDESCRIPTION: Applies custom styling to metric cards using streamlit-extras library.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_extras.metric_cards import style_metric_cards\ncol3.metric(label=\"No Change\", value=5000, delta=0)\n\nstyle_metric_cards()\n```\n\n----------------------------------------\n\nTITLE: Resetting SnowparkConnection in Streamlit (Python)\nDESCRIPTION: This method resets the connection to the Snowflake database, clearing any cached data and creating a new session.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/connections-snowpark.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef reset(self) -> None:\n```\n\n----------------------------------------\n\nTITLE: Creating Feedback Widgets in Streamlit\nDESCRIPTION: Displays a rating or sentiment button group to collect user feedback. Helps gather user opinions within the app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nst.feedback(\"stars\")\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Content in Streamlit iframe\nDESCRIPTION: Renders an HTML string within an iframe using Streamlit's html component. This allows embedding custom HTML content directly in your Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/custom-components/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom st.components.v1 import html\nhtml(\n    \"<p>Foo bar.</p>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Side-by-Side Columns for Data Visualization in Streamlit\nDESCRIPTION: Creating two columns to display daily and monthly sales data side by side, then calling the respective visualization functions within each column.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndaily, monthly = st.columns(2)\nwith daily:\n    show_daily_sales(data)\nwith monthly:\n    show_monthly_sales(data)\n```\n\n----------------------------------------\n\nTITLE: Using Input Widgets in Cached Functions\nDESCRIPTION: Example showing how to use interactive input widgets like sliders within cached functions by enabling the experimental_allow_widgets parameter.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/cache-data.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data(experimental_allow_widgets=True)  # 👈 Set the parameter\ndef get_data():\n    num_rows = st.slider(\"Number of rows to get\")  # 👈 Add a slider\n    data = api.get(..., num_rows)\n    return data\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Settings in Streamlit\nDESCRIPTION: Demonstrates how to configure the default settings of the page, including the page title and favicon icon. This affects how the app appears in the browser.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_159\n\nLANGUAGE: python\nCODE:\n```\nst.set_page_config(\n  page_title=\"My app\",\n  page_icon=\":shark:\",\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying FilesConnection and gcsfs Dependencies\nDESCRIPTION: This requirements.txt file specifies the necessary packages for connecting Streamlit to Google Cloud Storage, including FilesConnection and gcsfs.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/gcs.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# requirements.txt\ngcsfs==x.x.x\nst-files-connection\n```\n\n----------------------------------------\n\nTITLE: Creating Toggle Widgets in Streamlit\nDESCRIPTION: Displays a toggle widget that returns a boolean value. Similar to a checkbox but with a different visual appearance.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nactivated = st.toggle(\"Activate\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Tableau Data in Streamlit - Python\nDESCRIPTION: This Python code snippet demonstrates connecting to Tableau from a Streamlit app using personal access tokens. It retrieves, caches, and displays workbook-related data using the tableauserverclient library. Ensure the streamlit_app.py script includes necessary imports and utilizes the secrets configuration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tableau.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\nimport tableauserverclient as TSC\n\n\n# Set up connection.\ntableau_auth = TSC.PersonalAccessTokenAuth(\n    st.secrets[\"tableau\"][\"token_name\"],\n    st.secrets[\"tableau\"][\"personal_access_token\"],\n    st.secrets[\"tableau\"][\"site_id\"],\n)\nserver = TSC.Server(st.secrets[\"tableau\"][\"server_url\"], use_server_version=True)\n\n\n# Get various data.\n# Explore the tableauserverclient library for more options.\n# Uses st.cache_data to only rerun when the query changes or after 10 min.\n@st.cache_data(ttl=600)\ndef run_query():\n    with server.auth.sign_in(tableau_auth):\n\n        # Get all workbooks.\n        workbooks, pagination_item = server.workbooks.get()\n        workbooks_names = [w.name for w in workbooks]\n\n        # Get views for first workbook.\n        server.workbooks.populate_views(workbooks[0])\n        views_names = [v.name for v in workbooks[0].views]\n\n        # Get image & CSV for first view of first workbook.\n        view_item = workbooks[0].views[0]\n        server.views.populate_image(view_item)\n        server.views.populate_csv(view_item)\n        view_name = view_item.name\n        view_image = view_item.image\n        # `view_item.csv` is a list of binary objects, convert to str.\n        view_csv = b\"\".join(view_item.csv).decode(\"utf-8\")\n\n        return workbooks_names, views_names, view_name, view_image, view_csv\n\nworkbooks_names, views_names, view_name, view_image, view_csv = run_query()\n\n\n# Print results.\nst.subheader(\"📓 Workbooks\")\nst.write(\"Found the following workbooks:\", \", \".join(workbooks_names))\n\nst.subheader(\"👁️ Views\")\nst.write(\n    f\"Workbook *{workbooks_names[0]}* has the following views:\",\n    \", \".join(views_names),\n)\n\nst.subheader(\"🖼️ Image\")\nst.write(f\"Here's what view *{view_name}* looks like:\")\nst.image(view_image, width=300)\n\nst.subheader(\"📊 Data\")\nst.write(f\"And here's the data for view *{view_name}*:\")\nst.write(pd.read_csv(StringIO(view_csv)))\n\n```\n\n----------------------------------------\n\nTITLE: Interrupting Widget Clean-up Process\nDESCRIPTION: Technique to retain widget values across pages by re-saving the key-value pair at the start of each page or in the entrypoint file\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/widgets.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif \"my_key\" in st.session_state:\n    st.session_state.my_key = st.session_state.my_key\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for Streamlit Docs\nDESCRIPTION: Specifies the required Python packages and their versions needed to run the Streamlit documentation project. Includes core Streamlit library, database connectors (SQLAlchemy, DuckDB), file system packages (s3fs, gcsfs), and Snowflake integration.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/st-experimental-connection/1.22/st-experimental-connection/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit>=1.44.0\ntoml\nsqlalchemy==1.4\nduckdb\ngit+https://github.com/streamlit/files-connection\ns3fs\ngcsfs\nsnowflake-snowpark-python[pandas]\n```\n\n----------------------------------------\n\nTITLE: Combining the Chart Components into a Data Layer\nDESCRIPTION: Combines the defined lines, points, and tooltips into a single chart layer that can be displayed in the Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata_layer = lines + points + tooltips\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Line Chart for Stock Prices\nDESCRIPTION: Constructs a basic line chart using Altair that visualizes the evolution of stock prices with date on the x-axis and price on the y-axis, categorized by stock symbols.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlines = (\n    alt.Chart(stock_data, title=\"Evolution of stock prices\")\n    .mark_line()\n    .encode(\n        x=\"date\",\n        y=\"price\",\n        color=\"symbol\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Page Titles with st.title in Streamlit\nDESCRIPTION: Use st.title to display text in the largest heading format, suitable for main app titles or major section headers in Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.title(\"The app title\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawable Canvas in Streamlit\nDESCRIPTION: Uses st_canvas component to provide a sketching canvas with customizable parameters like colors, stroke width, and background, enabling drawing functionality in Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n```\n\n----------------------------------------\n\nTITLE: AppTest Initialization from String\nDESCRIPTION: Demonstrates creating an AppTest instance from a string containing the app script\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/testing/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\napp_script = \"\"\"\nimport streamlit as st\n\nword_of_the_day = st.text_input(\"What's the word of the day?\", key=\"word\")\nif word_of_the_day == st.secrets[\"WORD\"]:\n    st.success(\"That's right!\")\nelif word_of_the_day and word_of_the_day != st.secrets[\"WORD\"]:\n    st.warn(\"Try again.\")\n\"\"\"\n\nat = AppTest.from_string(app_script)\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n```\n\n----------------------------------------\n\nTITLE: Testing Keyed Widgets in Streamlit (Python)\nDESCRIPTION: This snippet demonstrates how to write assertions to test keyed widgets in a Streamlit app, using both key and positional arguments.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nassert at.button(key=\"submit\").label == \"Next\"\nassert at.button(\"cancel\").label == \"Back\"\n```\n\n----------------------------------------\n\nTITLE: Adding Caption Text in Streamlit\nDESCRIPTION: Uses st.caption() to display text in small font, typically used for captions or supplementary information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nst.caption(\"This is written small caption text\")\n```\n\n----------------------------------------\n\nTITLE: Creating Forms in Streamlit\nDESCRIPTION: Illustrates how to create a form that batches elements together with a submit button using st.form and st.form_submit_button.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith st.form(key='my_form'):\n    name = st.text_input(\"Name\")\n    email = st.text_input(\"Email\")\n    st.form_submit_button(\"Sign up\")\n```\n\n----------------------------------------\n\nTITLE: Using Plost Library for Plotting in Streamlit\nDESCRIPTION: Creates a line chart with the Plost library, a simple plotting extension for Streamlit. The example specifies the data frame, x-axis, y-axis, and color-coding by stock name.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport plost\nplost.line_chart(my_dataframe, x='time', y='stock_value', color='stock_name',)\n```\n\n----------------------------------------\n\nTITLE: Session State Modification with Buttons in Streamlit\nDESCRIPTION: Demonstrates different approaches to modify session state using buttons, including direct modification and callback functions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\n\nif 'name' not in st.session_state:\n    st.session_state['name'] = 'John Doe'\n\nst.header(st.session_state['name'])\n\nif st.button('Jane'):\n    st.session_state['name'] = 'Jane Doe'\n\nif st.button('John'):\n    st.session_state['name'] = 'John Doe'\n\nst.header(st.session_state['name'])\n```\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\n\nif 'name' not in st.session_state:\n    st.session_state['name'] = 'John Doe'\n\ndef change_name(name):\n    st.session_state['name'] = name\n\nst.header(st.session_state['name'])\n\nst.button('Jane', on_click=change_name, args=['Jane Doe'])\nst.button('John', on_click=change_name, args=['John Doe'])\n\nst.header(st.session_state['name'])\n```\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\n\nif 'name' not in st.session_state:\n    st.session_state['name'] = 'John Doe'\n\nst.header(st.session_state['name'])\n\nif st.button('Jane'):\n    st.session_state['name'] = 'Jane Doe'\n    st.rerun()\n\nif st.button('John'):\n    st.session_state['name'] = 'John Doe'\n    st.rerun()\n\nst.header(st.session_state['name'])\n```\n\n----------------------------------------\n\nTITLE: Testing Input Widgets in Streamlit Using AppTest - Python\nDESCRIPTION: This snippet showcases how to validate various input widgets in a Streamlit app, such as buttons, checkboxes, and sliders, to ensure they function as expected.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/cheat-sheet.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"cheatsheet_app.py\")\n\n# button\nassert at.button[0].value == False\nat.button[0].click().run()\nassert at.button[0].value == True\n\n# checkbox\nassert at.checkbox[0].value == False\nat.checkbox[0].check().run() # uncheck() is also supported\nassert at.checkbox[0].value == True\n\n# color_picker\nassert at.color_picker[0].value == \"#FFFFFF\"\nat.color_picker[0].pick(\"#000000\").run()\n\n# date_input\nassert at.date_input[0].value == datetime.date(2019, 7, 6)\nat.date_input[0].set_value(datetime.date(2022, 12, 21)).run()\n\n# form_submit_button - shows up just like a button\nassert at.button[0].value == False\nat.button[0].click().run()\nassert at.button[0].value == True\n\n# multiselect\nassert at.multiselect[0].value == [\"foo\", \"bar\"]\nat.multiselect[0].select(\"baz\").unselect(\"foo\").run()\n\n# number_input\nassert at.number_input[0].value == 5\nat.number_input[0].increment().run()\n\n# radio\nassert at.radio[0].value == \"Bar\"\nassert at.radio[0].index == 3\nat.radio[0].set_value(\"Foo\").run()\n\n# selectbox\nassert at.selectbox[0].value == \"Bar\"\nassert at.selectbox[0].index == 3\nat.selectbox[0].set_value(\"Foo\").run()\n\n# select_slider\nassert at.select_slider[0].value == \"Feb\"\nat.select_slider[0].set_value(\"Mar\").run()\nat.select_slider[0].set_range(\"Apr\", \"Jun\").run()\n\n# slider\nassert at.slider[0].value == 2\nat.slider[0].set_value(3).run()\nat.slider[0].set_range(4, 6).run()\n\n# text_area\nassert at.text_area[0].value == \"Hello, world!\"\nat.text_area[0].set_value(\"Hello, yourself!\").run()\n\n# text_input\nassert at.text_input[0].value == \"Hello, world!\")\nat.text_input[0].set_value(\"Hello, yourself!\").run()\n\n# time_input\nassert at.time_input[0].value == datetime.time(8, 45)\nat.time_input[0].set_value(datetime.time(12, 30))\n\n# toggle\nassert at.toggle[0].value == False\nassert at.toggle[0].label == \"Debug mode\"\nat.toggle[0].set_value(True).run()\nassert at.toggle[0].value == True\n```\n\n----------------------------------------\n\nTITLE: Connecting to Data Sources in Streamlit\nDESCRIPTION: Shows how to connect to data sources in Streamlit using `st.connection`. Includes examples for connecting to SQL and Snowflake databases, as well as defining a custom connection class.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nst.connection(\"pets_db\", type=\"sql\")\nconn = st.connection(\"sql\")\nconn = st.connection(\"snowflake\")\n\nclass MyConnection(BaseConnection[myconn.MyConnection]):\n    def _connect(self, **kwargs) -> MyConnection:\n        return myconn.connect(**self._secrets, **kwargs)\n    def query(self, query):\n        return self._instance.query(query)\n```\n\n----------------------------------------\n\nTITLE: Creating a Streamlit Fragment Function Declaration\nDESCRIPTION: Declaration of a function using the @st.fragment decorator that takes a data parameter. This decorator allows the function to rerun independently from the rest of the application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment\ndef show_daily_sales(data):\n```\n\n----------------------------------------\n\nTITLE: Defining Secrets in TOML File for Streamlit\nDESCRIPTION: Illustrates how to define secrets in a TOML file for use in Streamlit applications. This example shows the format for storing an OpenAI API key.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nOpenAI_key = \"<YOUR_SECRET_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Code Blocks with st.code in Streamlit\nDESCRIPTION: Use st.code to display code snippets with optional syntax highlighting in Streamlit apps, making technical documentation or examples more readable.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nst.code(\"a = 1234\")\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Component in Streamlit\nDESCRIPTION: Demonstrates how to auto-generate Streamlit UI from Pydantic Models and Dataclasses using the streamlit-pydantic component. This simplifies form creation based on data models.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_137\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit_pydantic as sp\n\nsp.pydantic_form(key=\"my_form\",\n  model=ExampleModel)\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltips for Mouseover Events\nDESCRIPTION: Defines a vertical rule on the line chart that activates upon mouseover, displaying tooltips containing the date and price information of the data points.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntooltips = (\n    alt.Chart(stock_data)\n    .mark_rule()\n    .encode(\n        x=\"yearmonthdate(date)\",\n        y=\"price\",\n        opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),\n        tooltip=[\n            alt.Tooltip(\"date\", title=\"Date\"),\n            alt.Tooltip(\"price\", title=\"Price (USD)\"),\n        ],\n    )\n    .add_selection(hover)\n)\n```\n\n----------------------------------------\n\nTITLE: Logging in a user in Streamlit\nDESCRIPTION: The st.login() function initiates an authentication flow with an identity provider, allowing users to log into the Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/user/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.login()\n```\n\n----------------------------------------\n\nTITLE: Using Authentication Component in Streamlit\nDESCRIPTION: Shows how to implement the Streamlit Authenticator component for secure user authentication. The component validates user credentials based on configuration settings.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_150\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit_authenticator as stauth\n\nauthenticator = stauth.Authenticate( config['credentials'], config['cookie']['name'],\nconfig['cookie']['key'], config['cookie']['expiry_days'], config['preauthorized'])\n```\n\n----------------------------------------\n\nTITLE: Custom Hashing Function for Pydantic Model in Streamlit\nDESCRIPTION: Demonstrates implementing a custom hash function using lambda with hash_funcs to allow Streamlit to cache functions that use Pydantic models as parameters.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n\n@st.cache_data(hash_funcs={Person: lambda p: p.name})\ndef identity(person: Person):\n    return person\n\nperson = identity(Person(name=\"Lee\"))\nst.write(f\"The person is {person.name}\")\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Content with st.html in Streamlit\nDESCRIPTION: Use st.html to render HTML strings directly in Streamlit apps, allowing for custom formatting and embedded content beyond standard Streamlit widgets.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nst.html(\"<p>Foo bar.</p>\")\n```\n\n----------------------------------------\n\nTITLE: Basic Video Display in Streamlit\nDESCRIPTION: Implementation of Streamlit's video component for displaying video content in Streamlit applications. The st.video function enables embedding video players that can handle various video sources including URLs and local files.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/video.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.video\n```\n\n----------------------------------------\n\nTITLE: Copying Session State Value\nDESCRIPTION: This snippet demonstrates how to copy a value from one session state key to another, which is used to preserve the widget's value during reruns. The value stored in `st.session_state[\"my_key\"]` is copied to `st.session_state[\"_my_key\"]` before rendering the number input.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/widget-behavior.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.session_state[\"_my_key\"] = st.session_state[\"my_key\"]\nst.number_input(\"Number of filters\", key=\"_my_key\", on_change=store_value)\n```\n\n----------------------------------------\n\nTITLE: Creating Expandable Containers in Streamlit\nDESCRIPTION: Demonstrates how to create expandable containers (expanders) and popovers using Streamlit's `st.expander` and `st.popover`. Includes examples using both direct assignment and the `with` notation for placing elements inside expanders.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nexpand = st.expander(\"My label\", icon=\":material/info:\")\nexpand.write(\"Inside the expander.\")\npop = st.popover(\"Button label\")\npop.checkbox(\"Show all\")\n\n# You can also use \"with\" notation:\nwith expand:\n    st.radio(\"Select one:\", [1, 2])\n```\n\n----------------------------------------\n\nTITLE: Specific Package Error Example - Standard Library\nDESCRIPTION: Error message shown when attempting to install base64, which is part of the Python Standard Library and shouldn't be included in requirements.txt.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/no-matching-distribution.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nERROR: No matching distribution found for base64\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Extras for Chart Annotations\nDESCRIPTION: This example shows how to enhance charts with annotations in Streamlit using a library that provides additional functionality.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nchart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\")])\nst.altair_chart(chart, use_container_width=True)\n```\n\n----------------------------------------\n\nTITLE: Starting the Streamlit App from Terminal Bash\nDESCRIPTION: This command launches a Streamlit app by running the `app.py` script. Users must navigate to their application directory in the terminal before executing the command, and it requires a previously installed Streamlit package.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Serializable Session State Configuration\nDESCRIPTION: TOML configuration for enabling serializable Session State enforcement\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/config.toml\n[runner]\nenforceSerializableSessionState = true\n```\n\n----------------------------------------\n\nTITLE: Adding Celebratory Balloons Animation in Streamlit\nDESCRIPTION: Displays a celebratory balloons animation that floats up from the bottom of the screen. Typically used to celebrate completed tasks or achievements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_114\n\nLANGUAGE: python\nCODE:\n```\ndo_something()\n\n# Celebrate when all done!\nst.balloons()\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Input in Streamlit\nDESCRIPTION: Uses st_tags component to add tag input functionality, allowing users to enter multiple keywords with suggestions and limits on the maximum number of tags.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n```\n\n----------------------------------------\n\nTITLE: Importing Streamlit Form in Python\nDESCRIPTION: This snippet demonstrates how to import and use the form function from Streamlit. It creates a form that batches elements together with a 'Submit' button.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/form.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.form\n```\n\n----------------------------------------\n\nTITLE: Fragment Function Call\nDESCRIPTION: Executes the data streaming fragment function\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nshow_latest_data()\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information in Streamlit\nDESCRIPTION: Retrieves information about a logged-in user using st.experimental_user. This example checks if a user is logged in and displays a personalized greeting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_126\n\nLANGUAGE: python\nCODE:\n```\nif st.experimental_user.is_logged_in:\n  st.write(f\"Welcome back, {st.experimental_user.name}!\")\n```\n\n----------------------------------------\n\nTITLE: Progress Bar Implementation\nDESCRIPTION: Demonstrates how to create and update a progress bar using st.progress() with a simulated long-running computation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\n\n'Starting a long computation...'\n\n# Add a placeholder\nlatest_iteration = st.empty()\nbar = st.progress(0)\n\nfor i in range(100):\n  # Update the progress bar with each iteration.\n  latest_iteration.text(f'Iteration {i+1}')\n  bar.progress(i + 1)\n  time.sleep(0.1)\n\n'...and now we\\'re done!'\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Agraph for Network Visualization\nDESCRIPTION: Creates a network graph visualization in Streamlit using the streamlit-agraph component. The example imports the necessary classes and renders a graph with the provided nodes, edges, and configuration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\n```\n\n----------------------------------------\n\nTITLE: Using Pandas Profiling Component\nDESCRIPTION: Example of using the Pandas Profiling component in Streamlit to generate profile reports.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_167\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\n\nst_profile_report(pr)\n```\n\n----------------------------------------\n\nTITLE: Adding Celebratory Snowflakes Animation in Streamlit\nDESCRIPTION: Displays a celebratory snowflakes animation that falls from the top of the screen. Similar to balloons, it's used to celebrate completed tasks or achievements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_115\n\nLANGUAGE: python\nCODE:\n```\ndo_something()\n\n# Celebrate when all done!\nst.snow()\n```\n\n----------------------------------------\n\nTITLE: Referencing Streamlit Page Components\nDESCRIPTION: Code references demonstrating the core Streamlit components used in multipage apps: st.Page and st.navigation for flexible page organization, and the pages/ directory structure for automatic page navigation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.Page\n```\n\nLANGUAGE: python\nCODE:\n```\nst.navigation\n```\n\nLANGUAGE: python\nCODE:\n```\npages/\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Page Title with Streamlit Configuration\nDESCRIPTION: Uses st.set_page_config to customize the app's page title, icon, layout, and sidebar state. This method prevents Streamlit from appending '· Streamlit' to the page title.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/remove-streamlit-app-title.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.set_page_config(\n   page_title=\"Ex-stream-ly Cool App\",\n   page_icon=\"🧊\",\n   layout=\"wide\",\n   initial_sidebar_state=\"expanded\",\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering LaTeX Expressions with st.latex in Streamlit\nDESCRIPTION: Use st.latex to display mathematical expressions formatted using LaTeX syntax in Streamlit apps, perfect for scientific or mathematical content.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nst.latex(\"\\int a x^2 \\,dx\")\n```\n\n----------------------------------------\n\nTITLE: Managing Session State in Streamlit with Python\nDESCRIPTION: Using st.session_state to save data between reruns and across pages in a Streamlit application. This allows for persistent state management.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.session_state[\"foo\"] = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Lottie Animations in Streamlit\nDESCRIPTION: This code shows how to embed Lottie animations into a Streamlit app. It requires a URL to the Lottie animation JSON file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nlottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\nst_lottie(lottie_hello, key=\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Button in Streamlit\nDESCRIPTION: Shows two approaches to create a toggle button: one with conditional rendering and another using the disabled parameter.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif 'button' not in st.session_state:\n    st.session_state.button = False\n\ndef click_button():\n    st.session_state.button = not st.session_state.button\n\nst.button('Click me', on_click=click_button)\n\nif st.session_state.button:\n    st.write('Button is on!')\n    st.slider('Select a value')\nelse:\n    st.write('Button is off!')\n```\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif 'button' not in st.session_state:\n    st.session_state.button = False\n\ndef click_button():\n    st.session_state.button = not st.session_state.button\n\nst.button('Click me', on_click=click_button)\n\nst.slider('Select a value', disabled=st.session_state.button)\n```\n\n----------------------------------------\n\nTITLE: Calculating Month Range from Selected Date in Streamlit\nDESCRIPTION: Retrieving the selected date from session state and computing the first days of the current and next month to define the date range for monthly data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n    selected_date = st.session_state.selected_date\n    this_month = selected_date.replace(day=1)\n    next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)\n```\n\n----------------------------------------\n\nTITLE: Building Role-Based Navigation Structure\nDESCRIPTION: Populates the navigation dictionary with page sections based on the user's role. Different roles get access to different sections, implementing role-based access control for the application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nif st.session_state.role in [\"Requester\", \"Admin\"]:\n    page_dict[\"Request\"] = request_pages\nif st.session_state.role in [\"Responder\", \"Admin\"]:\n    page_dict[\"Respond\"] = respond_pages\nif st.session_state.role == \"Admin\":\n    page_dict[\"Admin\"] = admin_pages\n```\n\n----------------------------------------\n\nTITLE: Plotting Data on Streamlit Map\nDESCRIPTION: Uses Streamlit's st.map() function to visualize data points on an interactive map.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nst.map(data)\n```\n\n----------------------------------------\n\nTITLE: Using Tags Component in Streamlit\nDESCRIPTION: Integrates the streamlit-tags component to add tag input functionality. Allows users to enter multiple keywords with suggestions and limits.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_tags import st_tags\n\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'],\nsuggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n```\n\n----------------------------------------\n\nTITLE: Logging out a user in Streamlit\nDESCRIPTION: The st.logout() function removes a user's identity information from the current session, effectively logging them out of the Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/user/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.logout()\n```\n\n----------------------------------------\n\nTITLE: Configuring Area Chart Column in Streamlit\nDESCRIPTION: This snippet demonstrates setting up an area chart column for visualizing sales data with specified y-axis limits.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nAreaChartColumn(\"Sales (last 6 months)\" y_min=0, y_max=100)\n```\n\n----------------------------------------\n\nTITLE: Setting Streamlit Configuration Options via st.set_option\nDESCRIPTION: The st.set_option function allows modifying individual Streamlit configuration parameters at runtime. This function takes a configuration key and value to update a specific setting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/set_option.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.set_option\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mapbox Integration\nDESCRIPTION: Configuration for Mapbox integration in Streamlit, allowing custom tokens for map-related components like st.pydeck_chart and st.map.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[mapbox]\ntoken = \"\"\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Magic Commands\nDESCRIPTION: Illustrates the use of Streamlit's magic commands, which implicitly call `st.write()`. These allow for a more concise syntax when displaying variables, strings, and data structures.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Magic commands implicitly\n# call st.write().\n\"_This_ is some **Markdown**\"\nmy_variable\n\"dataframe:\", my_data_frame\n```\n\n----------------------------------------\n\nTITLE: Advanced Directory Structure with Sections\nDESCRIPTION: Shows a more complex directory structure for a Streamlit app with multiple sections and pages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page-and-navigation.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nyour-repository/\n├── reports\n│   ├── alerts.py\n│   ├── bugs.py\n│   └── dashboard.py\n├── tools\n│   ├── history.py\n│   └── search.py\n└── streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Applying NLU Text Mining in Streamlit\nDESCRIPTION: Uses the NLU component to apply text mining on text data, such as sentiment analysis in this example.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nnlu.load('sentiment').predict('I love NLU! <3')\n```\n\n----------------------------------------\n\nTITLE: Callback-based Login Flow - Streamlit Python\nDESCRIPTION: This Python code uses Streamlit to implement a cleaner login flow using callbacks. It checks user login status and provides callback-based buttons for logging in and out, demonstrating a post-login message. It ensures the login page does not require nested conditionals.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/authentication.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\\n\\nif not st.experimental_user.is_logged_in:\\n    st.button(\"Log in with Google\", on_click=st.login)\\n    st.stop()\\n\\nst.button(\"Log out\", on_click=st.logout)\\nst.markdown(f\"Welcome! {st.experimental_user.name}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Pages with Role-Based Access in Streamlit\nDESCRIPTION: These page templates `user.py`, `admin.py`, and `super-admin.py` provide protected content, showing content based on the user's role, using checks to restrict access in Streamlit apps. Role checks are performed at the top of each script to ensure session state reflects appropriate access rights.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/custom-navigation.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\nfrom menu import menu_with_redirect\n\n# Redirect to app.py if not logged in, otherwise show the navigation menu\nmenu_with_redirect()\n\nst.title(\"This page is available to all users\")\nst.markdown(f\"You are currently logged with the role of {st.session_state.role}.\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\nfrom menu import menu_with_redirect\n\n# Redirect to app.py if not logged in, otherwise show the navigation menu\nmenu_with_redirect()\n\n# Verify the user's role\nif st.session_state.role not in [\"admin\", \"super-admin\"]:\n    st.warning(\"You do not have permission to view this page.\")\n    st.stop()\n\nst.title(\"This page is available to all admins\")\nst.markdown(f\"You are currently logged with the role of {st.session_state.role}.\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\nfrom menu import menu_with_redirect\n\n# Redirect to app.py if not logged in, otherwise show the navigation menu\nmenu_with_redirect()\n\n# Verify the user's role\nif st.session_state.role not in [\"super-admin\"]:\n    st.warning(\"You do not have permission to view this page.\")\n    st.stop()\n\nst.title(\"This page is available to super-admins\")\nst.markdown(f\"You are currently logged with the role of {st.session_state.role}.\")\n```\n\n----------------------------------------\n\nTITLE: Testing Base Elements\nDESCRIPTION: Shows how to test basic elements like titles and headers using the Element base class.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_165\n\nLANGUAGE: python\nCODE:\n```\n# at.title returns a sequence of Title\n# Title inherits from Element\nassert at.title[0].value == \"My awesome app\"\n```\n\n----------------------------------------\n\nTITLE: Custom Hashing Function for Unhashable Class in Streamlit\nDESCRIPTION: Shows how to use the hash_funcs parameter to provide a custom hashing function for a class that Streamlit cannot hash by default, allowing the cached function to work properly.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\ndef hash_func(obj: MyCustomClass) -> int:\n    return obj.my_score  # or any other value that uniquely identifies the object\n\n@st.cache_data(hash_funcs={MyCustomClass: hash_func})\ndef multiply_score(obj: MyCustomClass, multiplier: int) -> int:\n    return obj.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(multiply_score(score, multiplier))\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Extras for Chart Annotations\nDESCRIPTION: Enhances Altair charts with annotations using the Streamlit Extras library. The example adds annotations at specific dates with descriptive text for events, then displays the annotated chart using Streamlit's Altair integration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nchart += get_annotations_chart(annotations=[(\"Mar 01, 2008\", \"Pretty good day for GOOG\"), (\"Dec 01, 2007\", \"Something's going wrong for GOOG & AAPL\"), (\"Nov 01, 2008\", \"Market starts again thanks to...\"), (\"Dec 01, 2009\", \"Small crash for GOOG after...\"),],)\nst.altair_chart(chart, use_container_width=True)\n```\n\n----------------------------------------\n\nTITLE: Writing DataFrame with Streamlit Write Method\nDESCRIPTION: Shows how to use st.write() to display a pandas DataFrame in a Streamlit application\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\\nimport pandas as pd\\n\\nst.write(\"Here's our first attempt at using data to create a table:\")\\nst.write(pd.DataFrame({\\n    'first column': [1, 2, 3, 4],\\n    'second column': [10, 20, 30, 40]\\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Column in Streamlit\nDESCRIPTION: This snippet demonstrates how to configure a generic column using the Column method. It sets the column name, width, and help text with markdown formatting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nColumn(\"Streamlit Widgets\", width=\"medium\", help=\"Streamlit **widget** commands 🎈\")\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Option in Python\nDESCRIPTION: Demonstrates using st.set_option() to set a single configuration option. This example disables the deprecation warning for global pyplot use.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.set_option(\"deprecation.showPyplotGlobalUse\", False)\n```\n\n----------------------------------------\n\nTITLE: Complete Streamlit Fragment Function for Data Streaming\nDESCRIPTION: A comprehensive function that uses @st.fragment decorator to stream and display data. The function maintains a rolling window of 100 timestamps, concatenates new data, and visualizes it using a line chart.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment(run_every=run_every)\ndef show_latest_data():\n    last_timestamp = st.session_state.data.index[-1]\n    st.session_state.data = pd.concat(\n        [st.session_state.data, get_recent_data(last_timestamp)]\n    )\n    st.session_state.data = st.session_state.data[-100:]\n    st.line_chart(st.session_state.data)\n```\n\n----------------------------------------\n\nTITLE: Example URL with Query Parameters in Javascript\nDESCRIPTION: Shows the format of URL query parameters that can be accessed via st.query_params.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/query_params.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhttps://your_app.streamlit.app/?first_key=1&second_key=two&third_key=true\n```\n\n----------------------------------------\n\nTITLE: Caching data with TTL using st.cache_data\nDESCRIPTION: This snippet demonstrates how to use the `st.cache_data` decorator with the `ttl` (time-to-live) parameter to cache data for a specified duration. The `ttl` parameter prevents the use of stale data by discarding cached values after a set time, forcing the function to rerun and retrieve fresh data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data(ttl=3600)  # 👈 Cache data for 1 hour (=3600 seconds)\ndef get_api_data():\n    data = api.get(...)\n    return data\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Settings in Streamlit\nDESCRIPTION: Configuration options for browser-related settings including server address, usage statistics, and port configuration. Defines core connectivity and access parameters for Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[browser]\n\nserverAddress = \"localhost\"\ngatherUsageStats = true\nserverPort = 8501\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database and Table\nDESCRIPTION: SQL commands to create a new database named 'pets', a table named 'mytable', and insert sample data. This setup is used for demonstrating database connectivity in the Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mysql.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE pets;\n\nUSE pets;\n\nCREATE TABLE mytable (\n    name varchar(80),\n    pet varchar(80)\n);\n\nINSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Requirements.txt Configuration\nDESCRIPTION: Requirements.txt file demonstrating how to specify exact, minimum, and maximum version constraints for Python packages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/concepts/dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nstreamlit==1.24.1\npandas>2.0\nnumpy<=1.25.1\n```\n\n----------------------------------------\n\nTITLE: Initializing Navigation Dictionary\nDESCRIPTION: Creates an empty dictionary that will be populated with page lists based on the user's role. This dictionary will be used to build the navigation menu structure.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npage_dict = {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Link Button in Streamlit\nDESCRIPTION: Displays a button that links to an external URL when clicked. The button will open the specified URL in a new tab or window.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.link_button(\"Go to gallery\", url)\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Response Stream Generator Function\nDESCRIPTION: Implement a generator function that simulates a chat response by streaming characters with a time delay, providing an interactive chat experience\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef chat_stream(prompt):\n    response = f'You said, \"{prompt}\" ...interesting.'\n    for char in response:\n        yield char\n        time.sleep(0.02)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filenames from Multiple File Uploads in Streamlit\nDESCRIPTION: This snippet shows how to retrieve filenames from multiple files uploaded with st.file_uploader. It iterates through the list of UploadedFile objects and accesses the .name attribute for each file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/retrieve-filename-uploaded.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nuploaded_files = st.file_uploader(\"Upload multiple files\", accept_multiple_files=True)\n\nif uploaded_files:\n   for uploaded_file in uploaded_files:\n       st.write(\"Filename: \", uploaded_file.name)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multipage App in Streamlit Python\nDESCRIPTION: This snippet demonstrates creating a multipage app using Streamlit. It involves defining pages with the st.Page API and setting navigation using st.navigation. Each page has its own content and is run as a part of the app. The entry point connects these pages and lets the app run with a navigation menu.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/additional-features.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Define the pages\nmain_page = st.Page(\"main_page.py\", title=\"Main Page\", icon=\"🎈\")\npage_2 = st.Page(\"page_2.py\", title=\"Page 2\", icon=\"❄️\")\npage_3 = st.Page(\"page_3.py\", title=\"Page 3\", icon=\"🎉\")\n\n# Set up navigation\npg = st.navigation([main_page, page_2, page_3])\n\n# Run the selected page\npg.run()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Main page content\nst.markdown(\"# Main page 🎈\")\nst.sidebar.markdown(\"# Main page 🎈\")\n```\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.markdown(\"# Page 2 ❄️\")\nst.sidebar.markdown(\"# Page 2 ❄️\")\n```\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.markdown(\"# Page 3 🎉\")\nst.sidebar.markdown(\"# Page 3 🎉\")\n```\n\n----------------------------------------\n\nTITLE: Getting Help Documentation in Streamlit\nDESCRIPTION: Uses st.help() to display an object's docstring in a nicely formatted way, providing in-app documentation for Streamlit functions or other Python objects.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nst.help(st.write)\nst.help(pd.DataFrame)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Theme\nDESCRIPTION: Specific theme configuration options for the sidebar component, including colors, fonts, and visual styling parameters.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[theme.sidebar]\n\nprimaryColor =\nbackgroundColor =\nsecondaryBackgroundColor =\ntextColor =\nlinkColor =\ncodeBackgroundColor =\nfont =\ncodeFont =\nheadingFont =\nbaseRadius =\nborderColor =\nshowWidgetBorder =\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Help Command in CLI\nDESCRIPTION: Command to display all available Streamlit CLI commands and their usage. This is equivalent to running 'streamlit --help' and provides a list of all supported CLI operations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/help.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit help\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Input Widget in Streamlit\nDESCRIPTION: Creating a date input widget with specified date range constraints for 2023. The widget has a key to enable access through session state from outside the fragment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    selected_date = st.date_input(\n        \"Pick a day \",\n        value=date(2023, 1, 1),\n        min_value=date(2023, 1, 1),\n        max_value=date(2023, 12, 31),\n        key=\"selected_date\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Capturing Image Coordinates in Streamlit\nDESCRIPTION: Implements click coordinate detection on images using streamlit-image-coordinates component.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_image_coordinates import streamlit_image_coordinates\nvalue = streamlit_image_coordinates(\"https://placekitten.com/200/300\")\n\nst.write(value)\n```\n\n----------------------------------------\n\nTITLE: Creating Page Links in Streamlit Multipage Apps\nDESCRIPTION: Creates navigation links to other pages within a multipage Streamlit application. Supports customization with labels and icons.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nst.page_link(\"app.py\", label=\"Home\", icon=\"🏠\")\nst.page_link(\"pages/profile.py\", label=\"My profile\")\n```\n\n----------------------------------------\n\nTITLE: Specifying pyodbc Dependency (Text)\nDESCRIPTION: Content for requirements.txt file to specify the pyodbc package dependency for connecting to SQL Server from Python.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mssql.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# requirements.txt\npyodbc==x.x.x\n```\n\n----------------------------------------\n\nTITLE: Drawing Points on the Line Chart\nDESCRIPTION: Adds points on the line using Altair, drawing circles on the graph based on the mouseover selection to visually represent the data points.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npoints = lines.transform_filter(hover).mark_circle(size=65)\n```\n\n----------------------------------------\n\nTITLE: Creating Columns in Streamlit\nDESCRIPTION: Demonstrates how to create columns in Streamlit using `st.columns`. Includes examples for creating equal columns, columns with different widths, and bottom-aligned columns. Also shows the use of the `with` notation for placing elements within columns.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Two equal columns:\ncol1, col2 = st.columns(2)\ncol1.write(\"This is column 1\")\ncol2.write(\"This is column 2\")\n\n# Three different columns:\ncol1, col2, col3 = st.columns([3, 1, 1])\n# col1 is larger.\n\n# Bottom-aligned columns\ncol1, col2 = st.columns(2, vertical_alignment=\"bottom\")\n\n# You can also use \"with\" notation:\nwith col1:\n    st.radio(\"Select one:\", [1, 2])\n```\n\n----------------------------------------\n\nTITLE: Component Python Setup Commands\nDESCRIPTION: Commands for setting up the Python environment and running the Streamlit example app for component testing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/components-api.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# React template\ncd template\n. venv/bin/activate # or similar to activate the venv/conda environment where Streamlit is installed\npip install -e . # install template as editable package\nstreamlit run my_component/example.py # run the example\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Text in Streamlit\nDESCRIPTION: Uses st.markdown() to display string formatted as Markdown, allowing for rich text formatting including bold text.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.markdown(\"Hello **world**!\")\n```\n\n----------------------------------------\n\nTITLE: Using Autorefresh Component in Streamlit\nDESCRIPTION: Demonstrates how to use the streamlit-autorefresh component to force a refresh without tying up a script.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_autorefresh import st_autorefresh\n\nst_autorefresh(interval=2000, limit=100,\n  key=\"fizzbuzzcounter\")\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit as Python Module\nDESCRIPTION: Alternative method to run Streamlit applications using Python's module execution syntax. Useful for IDE integration and alternative execution environments.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/run-your-app.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m streamlit run your_script.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_script.py\n```\n\n----------------------------------------\n\nTITLE: Displaying Information Messages in Streamlit\nDESCRIPTION: Displays an informational message box with blue styling. This is used to provide neutral information or context to the user.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_117\n\nLANGUAGE: python\nCODE:\n```\nst.info(\"Dataset is updated every day at midnight.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring List Column in Streamlit\nDESCRIPTION: This example shows how to configure a list column to display multiple values, such as sales data for the last 6 months.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nListColumn(\"Sales (last 6 months)\", width=\"medium\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Streamlit App for Dataframe Display Python\nDESCRIPTION: This snippet initializes a basic Streamlit app and sets up libraries necessary for building a dataframe with member data. It imports `numpy`, `pandas`, `streamlit`, and `Faker` to handle data generation and manipulation, and outputs an empty app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport streamlit as st\n\nfrom faker import Faker\n```\n\n----------------------------------------\n\nTITLE: Running a Streamlit App with Command-Line Interface\nDESCRIPTION: This command demonstrates how to run a Streamlit application from the command line. After running this command, you can stop the server at any time using Ctrl+C in your terminal.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_script.py\n```\n\n----------------------------------------\n\nTITLE: Rendering LaTeX Expressions in Streamlit\nDESCRIPTION: Uses st.latex() to display mathematical expressions formatted as LaTeX, ideal for scientific or mathematical applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nst.latex(\"\\int a x^2 \\,dx\")\n```\n\n----------------------------------------\n\nTITLE: AppTest Initialization from Function\nDESCRIPTION: Shows how to initialize a simulated Streamlit app from a callable function.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_163\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_function(app_script_as_callable)\nat.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Common Page Title Element\nDESCRIPTION: Creates a title that will appear on all pages of the application. When created in the entrypoint file, this element forms part of the common frame around all pages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nst.title(\"Request manager\")\n```\n\n----------------------------------------\n\nTITLE: Creating Annotated Text in Streamlit\nDESCRIPTION: Uses the annotated_text component to display text with annotations, useful for NLP applications or highlighting parts of text with their functions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nannotated_text(\"This \", (\"is\", \"verb\"), \" some \", (\"annotated\", \"adj\"), (\"text\", \"noun\"), \" for those of \", (\"you\", \"pronoun\"), \" who \", (\"like\", \"verb\"), \" this sort of \", (\"thing\", \"noun\"), \".\")\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages into Functional Lists\nDESCRIPTION: Organizes previously defined page objects into logical groups by functionality. These lists will be used to create sections in the navigation menu.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\naccount_pages = [logout_page, settings]\nrequest_pages = [request_1, request_2]\nrespond_pages = [respond_1, respond_2]\nadmin_pages = [admin_1, admin_2]\n```\n\n----------------------------------------\n\nTITLE: Displaying PyDeck Charts using Streamlit\nDESCRIPTION: This snippet shows how to use the PyDeck library to visualize data in a Streamlit application, requiring a predefined chart object.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nst.pydeck_chart(my_pydeck_chart)\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive Bokeh Charts using Streamlit\nDESCRIPTION: This example demonstrates how to display an interactive Bokeh chart in Streamlit. The Bokeh chart must be defined beforehand.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nst.bokeh_chart(my_bokeh_chart)\n```\n\n----------------------------------------\n\nTITLE: Updating Streamlit Hello World App with st.title()\nDESCRIPTION: Demonstrates using st.title() for creating a more prominent page title in a Streamlit application\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/anaconda-distribution.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\\n\\nst.title(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App with Configuration Options\nDESCRIPTION: Example of running a Streamlit app with specific configuration options set, such as disabling error details and setting a primary color.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/run.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_app.py --client.showErrorDetails=False --theme.primaryColor=blue\n```\n\n----------------------------------------\n\nTITLE: Using spaCy Visualizers in Streamlit\nDESCRIPTION: Implements spaCy visualizations in Streamlit using the spacy-streamlit component. The example loads two different spaCy models and visualizes the analysis of a sample text.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nmodels = [\"en_core_web_sm\", \"en_core_web_md\"]\nspacy_streamlit.visualize(models, \"Sundar Pichai is the CEO of Google.\")\n```\n\n----------------------------------------\n\nTITLE: Generate Random Data Function in Pandas\nDESCRIPTION: Defines a function that generates random data for two time series. It takes the last timestamp as input and returns a pandas DataFrame with new data points up to the current time, limited to a maximum of 60 seconds of data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"def get_recent_data(last_timestamp):\n    \\\"\\\"\\\"Generate and return data from last timestamp to now, at most 60 seconds.\\\"\\\"\\\"    now = datetime.now()\n    if now - last_timestamp > timedelta(seconds=60):\n        last_timestamp = now - timedelta(seconds=60)\n    sample_time = timedelta(seconds=0.5)  # time between data points\n    next_timestamp = last_timestamp + sample_time\n    timestamps = np.arange(next_timestamp, now, sample_time)\n    sample_values = np.random.randn(len(timestamps), 2)\n\n    data = pd.DataFrame(sample_values, index=timestamps, columns=[\\\"A\\\", \\\"B\\\"])\n    return data\"\n```\n\n----------------------------------------\n\nTITLE: Using Pandas Profiling in Streamlit\nDESCRIPTION: Generates and displays detailed pandas profiling reports for dataframe analysis.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/_index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\n\nst_profile_report(pr)\n```\n\n----------------------------------------\n\nTITLE: Creating Popover Container in Streamlit\nDESCRIPTION: Demonstrates creating a popover container that can be opened and closed.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith st.popover(\"Settings\"):\n  st.checkbox(\"Show completed\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Monthly Sales Visualization Function in Streamlit\nDESCRIPTION: Function declaration for showing monthly sales data that takes a data parameter. Unlike the daily sales function, this does not use the fragment decorator.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef show_monthly_sales(data):\n```\n\n----------------------------------------\n\nTITLE: Pytest for Streamlit App\nDESCRIPTION: This pytest script tests a Streamlit app by simulating user interaction with a number input and a button, and then asserts the final markdown value. It utilizes the `streamlit.testing.v1.AppTest` module to create a simulated app environment for testing the Streamlit application's behavior.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"test_app.py\"\"\"\nfrom streamlit.testing.v1 import AppTest\n\ndef test_increment_and_add():\n    \"\"\"A user increments the number input, then clicks Add\"\"\"\n    at = AppTest.from_file(\"app.py\").run()\n    at.number_input[0].increment().run()\n    at.button[0].click().run()\n    assert at.markdown[0].value == \"Beans counted: 1\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Secrets\nDESCRIPTION: TOML configuration for setting up a SQLite database connection in Streamlit secrets file\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/connecting-to-data.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[connections.pets_db]\nurl = \"sqlite:///pets.db\"\n```\n\n----------------------------------------\n\nTITLE: Creating IPython HTML Representation Example\nDESCRIPTION: Example of implementing the IPython __repr_html__ method for rich HTML display in Streamlit components\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/create-component.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef __repr_html__(self):\n    return \"<html output>\"\n```\n\n----------------------------------------\n\nTITLE: Line Chart Visualization\nDESCRIPTION: Demonstrates creating a line chart with random data using st.line_chart()\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\\nimport numpy as np\\nimport pandas as pd\\n\\nchart_data = pd.DataFrame(\\n     np.random.randn(20, 3),\\n     columns=['a', 'b', 'c'])\\n\\nst.line_chart(chart_data)\n```\n\n----------------------------------------\n\nTITLE: Accessing Safe Session in SnowparkConnection (Python)\nDESCRIPTION: This property provides a thread-safe session object for interacting with the Snowflake database. It ensures that only one thread can access the session at a time.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/connections-snowpark.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef safe_session(self) -> SnowparkSafeSession:\n```\n\n----------------------------------------\n\nTITLE: Displaying Total Sales by Product for Current Month in Streamlit\nDESCRIPTION: Creating a header with formatted month/year and displaying a bar chart of total sales by product for the current month.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n    st.header(f\"Total sales for all products, {this_month:%B %Y}\")\n    st.bar_chart(monthly_sales.sum())\n```\n\n----------------------------------------\n\nTITLE: Saving Widget Values Using Session State with Temporary Key\nDESCRIPTION: Illustrates how to preserve widget values between pages by using a temporary key with an underscore prefix and copying its value to a permanent key in Session State\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/widgets.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef store_value():\n    # Copy the value to the permanent key\n    st.session_state[\"my_key\"] = st.session_state[\"_my_key\"]\n\n# Copy the saved value to the temporary key\nst.session_state[\"_my_key\"] = st.session_state[\"my_key\"]\nst.number_input(\"Number of filters\", key=\"_my_key\", on_change=store_value)\n```\n\n----------------------------------------\n\nTITLE: Creating Keyed Widgets in Streamlit (Python)\nDESCRIPTION: This example shows how to create buttons with specific keys in a Streamlit app, which can be used for targeted testing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.button(\"Next\", key=\"submit\")\nst.button(\"Back\", key=\"cancel\")\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Streamlit App\nDESCRIPTION: Demonstrates how to set a custom page title for a Streamlit app using st.set_page_config(). This title will appear in share previews and browser tabs. The page_title parameter should be kept under 60 characters for best practices.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/share-previews.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.set_page_config(page_title=\"My App\")\n\n# ... rest of your app\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App with Script Arguments\nDESCRIPTION: Example of running a Streamlit app while passing arguments to the script. These arguments can be accessed within the script using sys.argv.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/run.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_app.py \"my list\" of arguments\n```\n\n----------------------------------------\n\nTITLE: Using HiPlot for High Dimensional Plotting in Streamlit\nDESCRIPTION: Creates a HiPlot visualization for interactive exploration of high-dimensional data. The example takes a list of dictionaries containing different parameters and their values and displays them using HiPlot's experiment interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/charts/_index.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndata = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'}, {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'}, {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]\nhip.Experiment.from_iterable(data).display()\n```\n\n----------------------------------------\n\nTITLE: Converting Activity Dictionary to DataFrame in pandas\nDESCRIPTION: Transforms the dictionary of activity data into a pandas DataFrame for easier manipulation and visualization.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nactivity_df = pd.DataFrame(activity_df)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Sales Data with Streamlit\nDESCRIPTION: Defines a function to generate random sales data for Widgets A through Z, utilizing Streamlit's caching mechanism to improve performance by avoiding data recomputation on each rerun. This function uses numpy for random number generation and pandas for data organization.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\n\ndef get_data():\n    \"\"\"Generate random sales data for Widget A through Widget Z\"\"\"\n\n    product_names = [\"Widget \" + letter for letter in string.ascii_uppercase]\n    average_daily_sales = np.random.normal(1_000, 300, len(product_names))\n    products = dict(zip(product_names, average_daily_sales))\n\n    data = pd.DataFrame({})\n    sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1))\n    for product, sales in products.items():\n        data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2)\n    data.index = sales_dates\n    data.index = data.index.date\n    return data\n\n```\n\n----------------------------------------\n\nTITLE: Creating Annotated Text with streamlit-annotated-text Component\nDESCRIPTION: Use the annotated_text component to display text with inline annotations, useful for NLP applications, educational content, or detailed text analysis.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nannotated_text(\"This \", (\"is\", \"verb\"), \" some \", (\"annotated\", \"adj\"), (\"text\", \"noun\"), \" for those of \", (\"you\", \"pronoun\"), \" who \", (\"like\", \"verb\"), \" this sort of \", (\"thing\", \"noun\"), \".\")\n```\n\n----------------------------------------\n\nTITLE: Column Configuration for Data Display in Streamlit Python\nDESCRIPTION: This Python snippet details how to configure columns in a Streamlit dataframe using `st.column_config`. It specifies attributes like column name, help tooltip text, and visual representation type for displaying user activity data in a dataframe.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncolumn_configuration = {\n    \"name\": st.column_config.TextColumn(\n        \"Name\", help=\"The name of the user\", max_chars=100, width=\"medium\"\n    ),\n    \"activity\": st.column_config.LineChartColumn(\n        \"Activity (1 year)\",\n        help=\"The user's activity over the last 1 year\",\n        width=\"large\",\n        y_min=0,\n        y_max=100,\n    ),\n    \"daily_activity\": st.column_config.BarChartColumn(\n        \"Activity (daily)\",\n        help=\"The user's activity in the last 25 days\",\n        width=\"medium\",\n        y_min=0,\n        y_max=1,\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pandas Profiling Report in Streamlit\nDESCRIPTION: Creates and displays a pandas profiling report for data analysis.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.read_csv(\"https://storage.googleapis.com/tf-datasets/titanic/train.csv\")\npr = df.profile_report()\n\nst_profile_report(pr)\n```\n\n----------------------------------------\n\nTITLE: Adding a Title to Streamlit App (Python)\nDESCRIPTION: This code snippet adds a title to the Streamlit application using the `st.title()` function. This title serves as the main heading of the application, providing context to the user.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.title('Uber pickups in NYC')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Option in Streamlit (Python)\nDESCRIPTION: The st.get_option function is used to retrieve a single configuration option in Streamlit. It allows developers to access specific settings that control the behavior of their Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/get_option.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.get_option()\n```\n\n----------------------------------------\n\nTITLE: Accessing Script Arguments in Streamlit App\nDESCRIPTION: Python code demonstrating how to access script arguments passed to a Streamlit app using sys.argv. The first argument (index 0) is always the script name.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/run.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsys.argv[0] == \"your_app.py\"\nsys.argv[1] == \"my list\"\nsys.argv[2] == \"of\"\nsys.argv[3] == \"arguments\"\n```\n\n----------------------------------------\n\nTITLE: Integrating ECharts in Streamlit\nDESCRIPTION: This code enables the use of ECharts for data visualization in a Streamlit application, requiring configuration options for the chart.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_echarts import st_echarts\nst_echarts(options=options)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Notification Box Component in Streamlit\nDESCRIPTION: Creates a customizable notification box with styling options and a close button, useful for more sophisticated notification displays than standard Streamlit offers.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_custom_notification_box import custom_notification_box\n\nstyles = {'material-icons':{'color': 'red'}, 'text-icon-link-close-container': {'box-shadow': '#3896de 0px 4px'}, 'notification-text': {'':''}, 'close-button':{'':''}, 'link':{'':''}}\ncustom_notification_box(icon='info', textDisplay='We are almost done with your registration...', externalLink='more info', url='#', styles=styles, key=\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Clearing st.cache_resource Caches in Python\nDESCRIPTION: Example demonstrating how to clear all st.cache_resource caches using a button. It includes cached functions for creating a database session and loading a BERT model.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/cache-resource.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom transformers import BertModel\n\n@st.cache_resource\n def get_database_session(url):\n     # Create a database session object that points to the URL.\n     return session\n\n@st.cache_resource\ndef get_model(model_type):\n    # Create a model of the specified type.\n    return BertModel.from_pretrained(model_type)\n\nif st.button(\"Clear All\"):\n    # Clears all st.cache_resource caches:\n    st.cache_resource.clear()\n```\n\n----------------------------------------\n\nTITLE: Programmatically Navigating Between Pages in Streamlit\nDESCRIPTION: Programmatically navigates to a specified page using st.switch_page(). This allows for code-driven navigation between pages in a multipage app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_130\n\nLANGUAGE: python\nCODE:\n```\nst.switch_page(\"pages/my_page.py\")\n```\n\n----------------------------------------\n\nTITLE: Using st.file_uploader in Streamlit (Python)\nDESCRIPTION: st.file_uploader is a Streamlit widget that allows file uploads. Uploaded files are stored in RAM as BytesIO buffers and persist until the app re-runs. To save data between runs, it can be cached.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/where-file-uploader-store-when-deleted.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.file_uploader(...)\n```\n\n----------------------------------------\n\nTITLE: Array Computation Caching\nDESCRIPTION: Example of caching NumPy array computations to improve performance.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef add(arr1, arr2):\n\treturn arr1 + arr2\n```\n\n----------------------------------------\n\nTITLE: Caching Data with Streamlit Decorator in Python\nDESCRIPTION: Function decorator to cache functions that return data, such as dataframe transforms, database queries, or ML inference. This improves performance for expensive computations or data fetching operations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef long_function(param1, param2):\n  # Perform expensive computation here or\n  # fetch data from the web here\n  return data\n```\n\n----------------------------------------\n\nTITLE: Installing Package from Test PyPI\nDESCRIPTION: Command to install the uploaded package from Test PyPI to verify successful publishing.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/publish-component.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --index-url https://test.pypi.org/simple/ --no-deps example-pkg-YOUR-USERNAME-HERE\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Streamlit App\nDESCRIPTION: This snippet includes the necessary Python packages required for a Streamlit application to interact with AWS S3. It provides instructions on how to add the FilesConnection and s3fs packages to a requirements.txt file with version pinning for stability.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/aws-s3.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# requirements.txt\ns3fs==x.x.x\nst-files-connection\n```\n\n----------------------------------------\n\nTITLE: Automated Fragment Rerun Implementation\nDESCRIPTION: Shows how to implement automatic fragment reruns using the run_every parameter for periodic data updates.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/fragments.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment(run_every=\"10s\")\ndef auto_function():\n\t\t# This will update every 10 seconds!\n\t\tdf = get_latest_updates()\n\t\tst.line_chart(df)\n\nauto_function()\n```\n\n----------------------------------------\n\nTITLE: Getting Image Coordinates in Streamlit\nDESCRIPTION: Shows how to capture coordinates of clicks on an image in Streamlit using the streamlit-image-coordinates component created by @blackary.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(\"https://placekitten.com/200/300\")\n```\n\n----------------------------------------\n\nTITLE: Streamlit App with Google Authentication (Python)\nDESCRIPTION: This Python snippet defines a Streamlit application that utilizes Google authentication. It presents a login screen if the user is not logged in and displays a welcome message with the user's name and a logout button if the user is authenticated. It relies on Streamlit's experimental user management features (`st.experimental_user`).\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/google.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef login_screen():\n    st.header(\"This app is private.\")\n    st.subheader(\"Please log in.\")\n    st.button(\"Log in with Google\", on_click=st.login)\n\nif not st.experimental_user.is_logged_in:\n    login_screen()\nelse:\n    st.header(f\"Welcome, {st.experimental_user.name}!\")\n    st.button(\"Log out\", on_click=st.logout)\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Messages in Streamlit\nDESCRIPTION: Displays a success message box with green styling. This is used to communicate successful operations or positive outcomes to the user.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_116\n\nLANGUAGE: python\nCODE:\n```\nst.success(\"Match found!\")\n```\n\n----------------------------------------\n\nTITLE: Global Secrets Configuration for Multiple Environments\nDESCRIPTION: TOML configuration example for managing multiple database connections across different environments\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/connecting-to-data.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[connections.local]\nurl = \"mysql://me:****@localhost:3306/local_db\"\n\n[connections.staging]\nurl = \"mysql://jdoe:******@staging.acmecorp.com:3306/staging_db\"\n```\n\n----------------------------------------\n\nTITLE: AppTest Initialization from File\nDESCRIPTION: Shows how to initialize an AppTest instance from a file with basic validation\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/testing/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"streamlit_app.py\")\nat.secrets[\"WORD\"] = \"Foobar\"\nat.run()\nassert not at.exception\n```\n\n----------------------------------------\n\nTITLE: Fragment Definition for Herding Black Cats\nDESCRIPTION: This fragment handles the operation of herding black cats, utilizing a button to trigger the process and containers to display results without accumulation of elements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/create-a-multiple-container-fragment.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment\ndef herd_black_cats(card_a, card_b, card_c):\n    st.button(\"Herd the black cats\")\n    container_a = card_a.container()\n    container_b = card_b.container()\n    container_c = card_c.container()\n    with container_a:\n        black_cats()\n    with container_b:\n        black_cats()\n    with container_c:\n        black_cats()\n```\n\n----------------------------------------\n\nTITLE: Highlighting Validation Errors with Markdown in Python\nDESCRIPTION: Function that applies text and background color highlights to sentences that failed validation. It uses Streamlit's markdown syntax to style the text, with customizable text and background colors.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_highlights(response_sentences, validation_list, bg=\"red\", text=\"red\"):\n    return [\n        f\":{text}[:{bg}-background[\" + sentence + \"]]\" if not is_valid else sentence\n        for sentence, is_valid in zip(response_sentences, validation_list)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using Timeline Component in Streamlit\nDESCRIPTION: Integrates the streamlit-timeline component to display interactive timelines. Uses TimelineJS under the hood and loads timeline data from JSON.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_timeline import timeline\n\nwith open('example.json', \"r\") as f:\n  timeline(f.read(), height=800)\n```\n\n----------------------------------------\n\nTITLE: Line Chart Visualization\nDESCRIPTION: Displays the streaming data using Streamlit's line chart component\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nst.line_chart(st.session_state.data)\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Commands in Cached Functions\nDESCRIPTION: Example showing how to use Streamlit commands within a cached function to display a success message when fetching data from an API.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/cache-data.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef get_api_data():\n    data = api.get(...)\n    st.success(\"Fetched data from API!\")  # 👈 Show a success message\n    return data\n```\n\n----------------------------------------\n\nTITLE: Updating Header Using Containers in Streamlit\nDESCRIPTION: Illustrates using a container to update a header element. Creates a container first, then updates its content based on button interaction.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/rerun.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n##### Option using a container #####\ncontainer = st.container()\n\nif st.button(\"Baz\"):\n    st.session_state.value = \"Baz\"\n\ncontainer.header(st.session_state.value)\n```\n\n----------------------------------------\n\nTITLE: Using Autorefresh Component in Streamlit\nDESCRIPTION: Shows how to implement the Autorefresh component to force refreshing without tying up a script. The component takes parameters for interval (in milliseconds) and a limit for the number of refreshes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_136\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_autorefresh import st_autorefresh\n\nst_autorefresh(interval=2000, limit=100,\n  key=\"fizzbuzzcounter\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Activity Data for Selected Members in Python\nDESCRIPTION: Iterates through selected row indices, extracting each member's activity data and storing it in a dictionary keyed by member name.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfor person in people:\n    activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"activity\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Supabase Table with SQL\nDESCRIPTION: This SQL snippet creates a table named 'mytable' within a Supabase database, defining columns for 'name' and 'pet' as varchar(80). It then inserts three rows of sample data into the newly created table. This snippet is intended to be run within the Supabase SQL editor to initialize the database with example data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/supabase.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE mytable (\\n    name            varchar(80),\\n    pet             varchar(80)\\n);\\n\\nINSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\"\n```\n\n----------------------------------------\n\nTITLE: Creating Header Text in Streamlit\nDESCRIPTION: Uses st.header() to display text in header formatting, creating a section heading within the application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.header(\"This is a header\")\n```\n\n----------------------------------------\n\nTITLE: Streamlit Callback-based Login with Multiple Providers - Python\nDESCRIPTION: This snippet extends the Streamlit login flow to support multiple OIDC providers with a callback approach for better code clarity. The login and logout actions for Google and Microsoft providers are encapsulated in button callbacks, providing a cleaner interaction flow.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/authentication.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\\n\\nif not st.experimental_user.is_logged_in:\\n    st.button(\"Log in with Google\", on_click=st.login, args=[\"google\"])\\n    st.button(\"Log in with Microsoft\", on_click=st.login, args=[\"microsoft\"])\\n    st.stop()\\n\\nst.button(\"Log out\", on_click=st.logout)\\nst.markdown(f\"Welcome! {st.experimental_user.name}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filename from Single File Upload in Streamlit\nDESCRIPTION: This snippet demonstrates how to retrieve the filename from a single file uploaded using st.file_uploader. It uses the .name attribute on the returned UploadedFile object to access the filename.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/retrieve-filename-uploaded.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nuploaded_file = st.file_uploader(\"Upload a file\")\n\nif uploaded_file:\n   st.write(\"Filename: \", uploaded_file.name)\n```\n\n----------------------------------------\n\nTITLE: Button State Limitation Example\nDESCRIPTION: Demonstrates the limitation of setting button state through session state API, which raises an exception.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif 'my_button' not in st.session_state:\n    st.session_state.my_button = True\n    # Streamlit will raise an Exception on trying to set the state of button\n\nst.button('Submit', key='my_button')\n```\n\n----------------------------------------\n\nTITLE: Basic Counter Implementation in Python\nDESCRIPTION: Simple counter implementation without session state that demonstrates the stateless nature of Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title('Counter Example')\ncount = 0\n\nincrement = st.button('Increment')\nif increment:\n    count += 1\n\nst.write('Count = ', count)\n```\n\n----------------------------------------\n\nTITLE: Adding st-supabase-connection to requirements.txt\nDESCRIPTION: This Bash snippet shows how to add the `st-supabase-connection` library to the `requirements.txt` file for a Streamlit application. It specifies the library name and a pinned version number. This ensures that the Streamlit Community Cloud environment will install the necessary dependency for connecting to Supabase.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/supabase.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"# requirements.txt\\nst-supabase-connection==x.x.x\"\n```\n\n----------------------------------------\n\nTITLE: Executing a Python Script Using sys.executable\nDESCRIPTION: This snippet demonstrates how to run a Python script using the executable of the virtual environment in which the Streamlit app is running. This ensures that all dependencies are correctly resolved. No additional dependencies are required other than Streamlit and the standard library modules subprocess and sys.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/invoking-python-subprocess-deployed-streamlit-app.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# streamlit_app.py\nimport streamlit as st\nimport subprocess\nimport sys\n\nsubprocess.run([f\"{sys.executable}\", \"script.py\"])\n```\n\n----------------------------------------\n\nTITLE: Using st.cache_data and st.cache_resource Decorators in Streamlit 1.18.0\nDESCRIPTION: Two new caching commands introduced in Streamlit 1.18.0 to replace st.cache. These provide more specialized caching mechanisms for different types of data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2023.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\n@st.cache_resource\n```\n\n----------------------------------------\n\nTITLE: Testing Base Elements\nDESCRIPTION: Shows how to test basic elements like titles and headers\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/testing/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# at.title returns a sequence of Title\n# Title inherits from Element\nassert at.title[0].value == \"My awesome app\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Daily Sales in a Streamlit Fragment\nDESCRIPTION: Implements a Streamlit fragment to display daily sales data based on user-selected dates. The function updates the displayed sales data and potentially triggers a full-script rerun if the user selects a date in a different month. This leverages Streamlit's session state to keep track of the previously selected date.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment\n\ndef show_daily_sales(data):\n    time.sleep(1)\n    with st.container(height=100):\n        selected_date = st.date_input(\n            \"Pick a day \",\n            value=date(2023, 1, 1),\n            min_value=date(2023, 1, 1),\n            max_value=date(2023, 12, 31),\n            key=\"selected_date\",\n        )\n\n    if \"previous_date\" not in st.session_state:\n        st.session_state.previous_date = selected_date\n    previous_date = st.session_state.previous_date\n    st.session_state.previous_date = selected_date\n    is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)\n    if is_new_month:\n        st.rerun()\n\n    with st.container(height=510):\n        st.header(f\"Best sellers, {selected_date:%m/%d/%y}\")\n        top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]\n        cols = st.columns([1, 4])\n        cols[0].dataframe(top_ten)\n        cols[1].bar_chart(top_ten)\n\n    with st.container(height=510):\n        st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\")\n        bottom_ten = data.loc[selected_date].sort_values()[0:10]\n        cols = st.columns([1, 4])\n        cols[0].dataframe(bottom_ten)\n        cols[1].bar_chart(bottom_ten)\n\n```\n\n----------------------------------------\n\nTITLE: Example Dataframe Creation and Row Selection\nDESCRIPTION: Demonstrates creating a sample pandas DataFrame with animal data and using the dataframe_with_selections function to enable user row selection in a Streamlit application\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row-selections (old).md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(\n    {\n        \"Animal\": [\"Lion\", \"Elephant\", \"Giraffe\", \"Monkey\", \"Zebra\"],\n        \"Habitat\": [\"Savanna\", \"Forest\", \"Savanna\", \"Forest\", \"Savanna\"],\n        \"Lifespan (years)\": [15, 60, 25, 20, 25],\n        \"Average weight (kg)\": [190, 5000, 800, 10, 350],\n    }\n)\n\nselection = dataframe_with_selections(df)\nst.write(\"Your selection:\")\nst.write(selection)\n```\n\n----------------------------------------\n\nTITLE: Using a Component in Python\nDESCRIPTION: Demonstrates how to use the declared Streamlit component to send data to the frontend and receive data back.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/components-api.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Send data to the frontend using named arguments.\nreturn_value = my_component(name=\"Blackbeard\", ship=\"Queen Anne's Revenge\")\n\n# `my_component`'s return value is the data returned from the frontend.\nst.write(\"Value = \", return_value)\n```\n\n----------------------------------------\n\nTITLE: Custom Page Configuration Directory Structure\nDESCRIPTION: Shows the directory structure for a Streamlit app with create and delete functionality pages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page-and-navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nyour-repository/\n├── create.py\n├── delete.py\n└── streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Generating Streamlit UI from Pydantic Models\nDESCRIPTION: Demonstrates using `streamlit_pydantic` to auto-generate a UI from Pydantic models, enhancing productivity by reducing manual form creation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_105\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit_pydantic as sp\n\nsp.pydantic_form(key=\"my_form\",\n  model=ExampleModel)\n```\n\n----------------------------------------\n\nTITLE: Displaying timezone-aware datetime object in Streamlit\nDESCRIPTION: This snippet shows how Streamlit displays a datetime object with timezone information.  The frontend shows the datetime instance in the specified timezone, and no automatic timezone conversion is applied.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/timezone-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom datetime import datetime\nimport pytz\n\nst.write(datetime(2020, 1, 10, 10, 30, tzinfo=pytz.timezone(\"EST\")))\n# Outputs: 2020-01-10 10:30:00-05:00\n```\n\n----------------------------------------\n\nTITLE: Streamlit Magic Commands with Pandas DataFrame\nDESCRIPTION: Demonstrates using Streamlit's magic commands to display a pandas DataFrame without explicitly calling st.write()\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\\n# My first app\\nHere's our first attempt at using data to create a table:\\n\"\"\"\\n\\nimport streamlit as st\\nimport pandas as pd\\ndf = pd.DataFrame({\\n  'first column': [1, 2, 3, 4],\\n  'second column': [10, 20, 30, 40]\\n})\\n\\ndf\n```\n\n----------------------------------------\n\nTITLE: Configuring Datetime Column in Streamlit\nDESCRIPTION: This example shows how to configure a datetime column with a minimum value and custom date-time formatting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nDatetimeColumn(\"Appointment\", min_value=datetime(2023, 6, 1), format=\"D MMM YYYY, h:mm a\")\n```\n\n----------------------------------------\n\nTITLE: Running a Streamlit Multipage App via Command Line\nDESCRIPTION: This command runs the Streamlit multipage application. It uses the Hello.py script as the entry point, which will automatically discover and load pages from the 'pages' directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-a-multi-page-app.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run Hello.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bar in Streamlit\nDESCRIPTION: Displays a progress bar that updates as a loop progresses. This example increments the progress for each iteration while executing a time-consuming function.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_111\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(101):\n  st.progress(i)\n  do_something_slow()\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Column in Streamlit\nDESCRIPTION: This snippet demonstrates setting up a link column with a maximum character limit and URL validation using a regular expression.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nLinkColumn(\"Trending apps\", max_chars=100, validate=\"^https://.*$\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Selectbox Widget in Streamlit (Python)\nDESCRIPTION: This example shows how to create a selectbox widget with various parameters in a Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.selectbox(\"A\", [1,2,3], None, help=\"Pick a number\", placeholder=\"Pick me\")\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Service Account in Streamlit Secrets\nDESCRIPTION: This snippet shows how to add the Google Cloud Platform service account key file contents to the Streamlit secrets file. It includes all necessary fields for authenticating with BigQuery.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/bigquery.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/secrets.toml\n\n[gcp_service_account]\ntype = \"service_account\"\nproject_id = \"xxx\"\nprivate_key_id = \"xxx\"\nprivate_key = \"xxx\"\nclient_email = \"xxx\"\nclient_id = \"xxx\"\nauth_uri = \"https://accounts.google.com/o/oauth2/auth\"\ntoken_uri = \"https://oauth2.googleapis.com/token\"\nauth_provider_x509_cert_url = \"https://www.googleapis.com/oauth2/v1/certs\"\nclient_x509_cert_url = \"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Creating Subheader Text in Streamlit\nDESCRIPTION: Uses st.subheader() to display text in subheader formatting, creating a subsection heading within the application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.subheader(\"This is a subheader\")\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Containers with Buttons\nDESCRIPTION: This snippet demonstrates using Streamlit containers (`st.container`) to manage widget order in the script versus the frontend. The text input, even if defined later in the code, can appear at the top of the webpage.  The example shows two buttons clearing or setting the session state.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nbegin = st.container()\n\nif st.button('Clear name'):\n    st.session_state.name = ''\nif st.button('Streamlit!'):\n    st.session_state.name = ('Streamlit')\n\n# The widget is second in logic, but first in display\nbegin.text_input('Name', key='name')\n```\n\n----------------------------------------\n\nTITLE: Adding Captions with st.caption in Streamlit\nDESCRIPTION: Use st.caption to display text in a small font, ideal for supplementary information, attributions, or explanatory notes in Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nst.caption(\"This is written small caption text\")\n```\n\n----------------------------------------\n\nTITLE: Caching Global Resources with Streamlit Decorator in Python\nDESCRIPTION: Function decorator to cache functions that return global resources, such as database connections or ML models. This is useful for initializing and reusing expensive resources across multiple runs.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_resource\ndef init_model():\n  # Return a global resource here\n  return pipeline(\n    \"sentiment-analysis\",\n    model=\"distilbert-base-uncased-finetuned-sst-2-english\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Streamlit Hello World App\nDESCRIPTION: Python code for a basic Streamlit app that displays 'Hello world' text. This is saved in a file named app.py.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.write(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Hashing a Custom Class in Streamlit Caching\nDESCRIPTION: Example of a custom class that causes UnhashableParamError when used with cached functions, along with the error message shown when Streamlit can't hash the class.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\n@st.cache_data\ndef multiply_score(obj: MyCustomClass, multiplier: int) -> int:\n    return obj.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(multiply_score(score, multiplier))\n```\n\n----------------------------------------\n\nTITLE: Upgrading Streamlit with Pipenv Run\nDESCRIPTION: Alternative approach using pipenv commands for reproducible environments to update Streamlit and verify the version.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/upgrade-version-streamlit.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npipenv update streamlit\npipenv run streamlit version\n```\n\n----------------------------------------\n\nTITLE: Define run_every Variable\nDESCRIPTION: Sets the `run_every` variable based on the `stream` session state. If streaming is active, it uses the value from the slider. If streaming is inactive, `run_every` is set to None.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"if st.session_state.stream is True:\n    run_every = st.session_state.run_every\nelse:\n    run_every = None\"\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflakes Animation in Streamlit\nDESCRIPTION: Displays a celebratory animation of snowflakes falling from the top of the screen, useful for seasonal celebrations or achievements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nst.snow()\n```\n\n----------------------------------------\n\nTITLE: Implementing Correct Errors Button\nDESCRIPTION: Creates a primary button for error correction that is disabled when no errors are detected.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nif cols[0].button(\n    \"Correct errors\", type=\"primary\", disabled=all(validation_list)\n):\n```\n\n----------------------------------------\n\nTITLE: Adding Title and Description to Streamlit Application\nDESCRIPTION: Setting up the title and description for the sales data visualization application, explaining what data is being shown.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nst.title(\"Daily vs monthly sales, by product\")\nst.markdown(\"This app shows the 2023 daily sales for Widget A through Widget Z.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Column in Streamlit\nDESCRIPTION: Import path for the LinkColumn configuration class from streamlit.column_config module, used to customize link display in data tables.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/linkcolumn.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.column_config.LinkColumn\n```\n\n----------------------------------------\n\nTITLE: Creating a Mapping Demo Page in Streamlit\nDESCRIPTION: This code creates a mapping demo page using PyDeck to visualize geospatial data. It demonstrates how to create different map layers for bike rentals, BART stops, and transit flows, allowing users to toggle layers via checkboxes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-a-multi-page-app.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport pydeck as pdk\nfrom urllib.error import URLError\n\nst.set_page_config(page_title=\"Mapping Demo\", page_icon=\"🌍\")\n\nst.markdown(\"# Mapping Demo\")\nst.sidebar.header(\"Mapping Demo\")\nst.write(\n    \"\"\"This demo shows how to use\n[`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart)\nto display geospatial data.\"\"\"\n)\n\n\n@st.cache_data\ndef from_data_file(filename):\n    url = (\n        \"http://raw.githubusercontent.com/streamlit/\"\n        \"example-data/master/hello/v1/%s\" % filename\n    )\n    return pd.read_json(url)\n\n\ntry:\n    ALL_LAYERS = {\n        \"Bike Rentals\": pdk.Layer(\n            \"HexagonLayer\",\n            data=from_data_file(\"bike_rental_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            radius=200,\n            elevation_scale=4,\n            elevation_range=[0, 1000],\n            extruded=True,\n        ),\n        \"Bart Stop Exits\": pdk.Layer(\n            \"ScatterplotLayer\",\n            data=from_data_file(\"bart_stop_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            get_color=[200, 30, 0, 160],\n            get_radius=\"[exits]\",\n            radius_scale=0.05,\n        ),\n        \"Bart Stop Names\": pdk.Layer(\n            \"TextLayer\",\n            data=from_data_file(\"bart_stop_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            get_text=\"name\",\n            get_color=[0, 0, 0, 200],\n            get_size=15,\n            get_alignment_baseline=\"'bottom'\",\n        ),\n        \"Outbound Flow\": pdk.Layer(\n            \"ArcLayer\",\n            data=from_data_file(\"bart_path_stats.json\"),\n            get_source_position=[\"lon\", \"lat\"],\n            get_target_position=[\"lon2\", \"lat2\"],\n            get_source_color=[200, 30, 0, 160],\n            get_target_color=[200, 30, 0, 160],\n            auto_highlight=True,\n            width_scale=0.0001,\n            get_width=\"outbound\",\n            width_min_pixels=3,\n            width_max_pixels=30,\n        ),\n    }\n    st.sidebar.markdown(\"### Map Layers\")\n    selected_layers = [\n        layer\n        for layer_name, layer in ALL_LAYERS.items()\n        if st.sidebar.checkbox(layer_name, True)\n    ]\n    if selected_layers:\n        st.pydeck_chart(\n            pdk.Deck(\n                map_style=\"mapbox://styles/mapbox/light-v9\",\n                initial_view_state={\n                    \"latitude\": 37.76,\n                    \"longitude\": -122.4,\n                    \"zoom\": 11,\n                    \"pitch\": 50,\n                },\n                layers=selected_layers,\n            )\n        )\n    else:\n        st.error(\"Please choose at least one layer above.\")\nexcept URLError as e:\n    st.error(\n        \"\"\"\n        **This demo requires internet access.**\n        Connection error: %s\n    \"\"\"\n        % e.reason\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from GitHub using the Main URL\nDESCRIPTION: This snippet shows how to install a package directly from GitHub by specifying the repository URL in your requirements.txt file. It uses the git+ prefix with the #egg parameter to identify the package name.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/install-package-pypi-github.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit+https://github.com/SomePackage#egg=SomePackage\n```\n\n----------------------------------------\n\nTITLE: Embedding Streamlit Apps with Clipboard Access\nDESCRIPTION: This snippet provides an example of how to allow clipboard access in iframes when embedding Streamlit apps, critical for using copy-paste functionality within st.data_editor. JavaScript is used to set the iframe permissions. The app should be served with a trusted TLS certificate.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/dataframes.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<iframe allow=\"clipboard-write;clipboard-read;\" ... src=\"https://your-app-url\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Comparing Custom Class Instances in Streamlit Selectbox in Python\nDESCRIPTION: This example illustrates a potential issue when comparing instances of custom classes in Streamlit. It uses a dataclass to define a Student class and shows how comparisons between selected values and original options might not work as expected.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/custom-classes.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom dataclasses import dataclass\n\n@dataclass\nclass Student:\n    student_id: int\n    name: str\n\nMarshall_A = Student(1, \"Marshall\")\nif \"B\" not in st.session_state:\n    st.session_state.B = Student(1, \"Marshall\")\nMarshall_B = st.session_state.B\n\noptions = [Marshall_A,Marshall_B]\nselected = st.selectbox(\"Pick\", options)\n\n# This comparison does not return expected results:\nselected == Marshall_A\n# This comparison evaluates as expected:\nselected == Marshall_B\n```\n\n----------------------------------------\n\nTITLE: Executing Daily and Monthly Sales Functions\nDESCRIPTION: Calls the daily and monthly sales display functions with the generated sales data, laying out the components side by side for comparative display of daily and monthly sales figures.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = get_data()\ndaily, monthly = st.columns(2)\nwith daily:\n    show_daily_sales(data)\nwith monthly:\n    show_monthly_sales(data)\n\n```\n\n----------------------------------------\n\nTITLE: Container Entrypoint Script for Streamlit\nDESCRIPTION: Bash script that serves as the container entrypoint, handling process management and Streamlit app execution with proper signal handling.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/kubernetes.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nAPP_PID=\nstopRunningProcess() {\n    if test ! \"${APP_PID}\" = '' && ps -p ${APP_PID} > /dev/null ; then\n       > /proc/1/fd/1 echo \"Stopping ${COMMAND_PATH} which is running with process ID ${APP_PID}\"\n\n       kill -TERM ${APP_PID}\n       > /proc/1/fd/1 echo \"Waiting for ${COMMAND_PATH} to process SIGTERM signal\"\n\n        wait ${APP_PID}\n        > /proc/1/fd/1 echo \"All processes have stopped running\"\n    else\n        > /proc/1/fd/1 echo \"${COMMAND_PATH} was not started when the signal was sent or it has already been stopped\"\n    fi\n}\n\ntrap stopRunningProcess EXIT TERM\n\nsource ${VIRTUAL_ENV}/bin/activate\n\nstreamlit run ${HOME}/app/streamlit_app.py &\nAPP_ID=${!}\n\nwait ${APP_ID}\n```\n\n----------------------------------------\n\nTITLE: API Call Caching\nDESCRIPTION: Example of caching API calls to avoid rate limits and improve response times.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef api_call():\n    response = requests.get('https://jsonplaceholder.typicode.com/posts/1')\n    return response.json()\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App from URL (Bash)\nDESCRIPTION: This code snippet illustrates how to run a Streamlit application directly from a URL, such as a GitHub Gist. This is useful for quickly deploying and sharing Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Message When No Selection in Streamlit\nDESCRIPTION: Completes the conditional block by showing a message when no members are selected.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nelse:\n    st.markdown(\"No members selected.\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Streamlit Secrets in TOML\nDESCRIPTION: This TOML configuration sets up the necessary secrets for connecting a Streamlit application to a TiDB database, including host, port, and authentication details. Ensure this file is added to .gitignore.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tidb.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/secrets.toml\n\n[connections.tidb]\ndialect = \"mysql\"\nhost = \"<TiDB_cluster_host>\"\nport = 4000\ndatabase = \"pets\"\nusername = \"<TiDB_cluster_user>\"\npassword = \"<TiDB_cluster_password>\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Navigation with st.navigation\nDESCRIPTION: Configure dynamic navigation menu with role-based page access using st.Page and st.navigation\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogout_page = st.Page(logout, title=\"Log out\", icon=\":material/logout:\")\nsettings = st.Page(\"settings.py\", title=\"Settings\", icon=\":material/settings:\")\n\nrequest_1 = st.Page(\n    \"request/request_1.py\",\n    title=\"Request 1\",\n    icon=\":material/help:\",\n    default=(role == \"Requester\")\n)\n\npage_dict = {}\nif st.session_state.role in [\"Requester\", \"Admin\"]:\n    page_dict[\"Request\"] = request_pages\n\npg = st.navigation({\"Account\": account_pages} | page_dict)\npg.run()\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQL Server using sqlcmd (Bash)\nDESCRIPTION: Command to connect to a local SQL Server instance using sqlcmd utility. It specifies the server, username, and password.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mssql.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsqlcmd -S localhost -U SA -P '<YourPassword>'\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Configuration for Streamlit and OAuth2 Proxy Deployment\nDESCRIPTION: This YAML configuration defines a ConfigMap for OAuth2 Proxy, a Deployment for Streamlit and OAuth2 Proxy containers, and a LoadBalancer Service. It includes container specifications, health checks, resource limits, and volume mounts.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/kubernetes.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: streamlit-configmap\ndata:\n  oauth2-proxy.cfg: |-\n    http_address = \"0.0.0.0:4180\"\n    upstreams = [\"http://127.0.0.1:8501/\"]\n    email_domains = [\"*\"]\n    client_id = \"<GOOGLE_CLIENT_ID>\"\n    client_secret = \"<GOOGLE_CLIENT_SECRET>\"\n    cookie_secret = \"<16, 24, or 32 bytes>\"\n    redirect_url = <REDIRECT_URL>\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: streamlit-deployment\n  labels:\n    app: streamlit\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: streamlit\n  template:\n    metadata:\n      labels:\n        app: streamlit\n    spec:\n      containers:\n        - name: oauth2-proxy\n          image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.0\n          args: [\"--config\", \"/etc/oauth2-proxy/oauth2-proxy.cfg\"]\n          ports:\n            - containerPort: 4180\n          livenessProbe:\n            httpGet:\n              path: /ping\n              port: 4180\n              scheme: HTTP\n          readinessProbe:\n            httpGet:\n              path: /ping\n              port: 4180\n              scheme: HTTP\n          volumeMounts:\n            - mountPath: \"/etc/oauth2-proxy\"\n              name: oauth2-config\n        - name: streamlit\n          image: gcr.io/GCP_PROJECT_ID/k8s-streamlit:test\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8501\n          livenessProbe:\n            httpGet:\n              path: /_stcore/health\n              port: 8501\n              scheme: HTTP\n            timeoutSeconds: 1\n          readinessProbe:\n            httpGet:\n              path: /_stcore/health\n              port: 8501\n              scheme: HTTP\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: 1\n              memory: 2Gi\n            requests:\n              cpu: 100m\n              memory: 745Mi\n      volumes:\n        - name: oauth2-config\n          configMap:\n            name: streamlit-configmap\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: streamlit-service\nspec:\n  type: LoadBalancer\n  selector:\n    app: streamlit\n  ports:\n    - name: streamlit-port\n      protocol: TCP\n      port: 80\n      targetPort: 4180\n```\n\n----------------------------------------\n\nTITLE: Interrupting Streamlit Widget Clean-up Process\nDESCRIPTION: This snippet demonstrates how to interrupt the widget clean-up process in Streamlit to preserve widget state across page navigations or changes. By reassigning the value of a key in `st.session_state` to itself, you detach it from the widget's lifecycle, preventing Streamlit from deleting it during cleanup.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/widget-behavior.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nst.session_state.my_key = st.session_state.my_key\n```\n\n----------------------------------------\n\nTITLE: Referencing Streamlit Toggle Widget in Documentation\nDESCRIPTION: This snippet shows how to auto-generate function documentation for the streamlit.toggle function in the Streamlit documentation system. It uses a custom Autofunction component that pulls the API details from the streamlit module.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/toggle.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Autofunction function=\"streamlit.toggle\" />\n```\n\n----------------------------------------\n\nTITLE: Caching Method of a Custom Class in Streamlit\nDESCRIPTION: Example showing a cached method within a custom class, which causes a hashing error due to the unhashable 'self' parameter when the method is called.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\n    @st.cache_data\n    def multiply_score(self, multiplier: int) -> int:\n        return self.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(score.multiply_score(multiplier))\n```\n\n----------------------------------------\n\nTITLE: Running Local Streamlit App\nDESCRIPTION: Example of running a Streamlit app located in the current working directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/run.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_app.py\n```\n\n----------------------------------------\n\nTITLE: Fragment Decorator Definition\nDESCRIPTION: Initializes the fragment decorator with run_every parameter to control streaming frequency\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment(run_every=run_every)\ndef show_latest_data():\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Divider in Streamlit\nDESCRIPTION: Uses st.divider() to display a horizontal rule, useful for visually separating sections in your application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nst.divider()\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters in Streamlit Python Code\nDESCRIPTION: Shows practical examples of reading and writing query parameters using both key and attribute notation in Streamlit.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/query_params.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# You can read query params using key notation\nif st.query_params[\"first_key\"] == \"1\":\n    do_something()\n\n# ...or using attribute notation\nif st.query_params.second_key == \"two\":\n    do_something_else()\n\n# And you can change a param by just writing to it\nst.query_params.first_key = 2  # This gets converted to str automatically\n```\n\n----------------------------------------\n\nTITLE: Installing Streamlit and LangChain for Python\nDESCRIPTION: This snippet installs the necessary Streamlit and LangChain libraries for Python. These libraries are essential for creating and running the app. Run this command in the terminal of your IDE to set up your development environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/llm-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install streamlit langchain-openai\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Database and Sample Table with SQL\nDESCRIPTION: SQL commands to create a new database named PETS, create a sample table MYTABLE, and insert initial data for demonstration purposes\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/snowflake.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE PETS;\n\nCREATE TABLE MYTABLE (NAME varchar(80), PET varchar(80));\n\nINSERT INTO MYTABLE\nVALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\n\nSELECT * FROM MYTABLE;\n```\n\n----------------------------------------\n\nTITLE: Iframe Embedding with Show Footer Option\nDESCRIPTION: This snippet demonstrates how to embed a Streamlit app while showing the footer that reads \"Made with Streamlit\" using the embed_options parameter.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/?embed=true&embed_options=show_footer\n```\n\n----------------------------------------\n\nTITLE: Defining Pages in Multipage Streamlit Apps\nDESCRIPTION: Defines a page in a multipage Streamlit app using st.Page(). This specifies the page file, title, and icon to be used in navigation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_128\n\nLANGUAGE: python\nCODE:\n```\nhome = st.Page(\n    \"home.py\",\n    title=\"Home\",\n    icon=\":material/home:\"\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Streamlit App Title in Python\nDESCRIPTION: This code snippet shows a diff of how to change the title of a Streamlit app by adding the word 'Streamlit' to the existing title. The change is made in the streamlit_app.py file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/get-started/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-st.title(\"🎈 My new app\")\n+st.title(\"🎈 My new Streamlit app\")\n```\n\n----------------------------------------\n\nTITLE: Streamlit Login Flow with Multiple Providers - Python\nDESCRIPTION: In this Python example, a Streamlit app allows users to log in using multiple OIDC providers, such as Google and Microsoft. The code provides callback functionality for each provider specific login button, monitoring user login state and handling logouts accordingly.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/authentication.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\\n\\nif not st.experimental_user.is_logged_in:\\n    if st.button(\"Log in with Google\"):\\n        st.login(\"google\")\\n    if st.button(\"Log in with Microsoft\"):\\n        st.login(\"microsoft\")\\n    st.stop()\\n\\nif st.button(\"Log out\"):\\n    st.logout()\\nst.markdown(f\"Welcome! {st.experimental_user.name}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Lottie Animations to Streamlit\nDESCRIPTION: Demonstrates how to integrate Lottie animations in Streamlit apps using the streamlit-lottie component created by @andfanilo.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlottie_hello = load_lottieurl(\"https://assets5.lottiefiles.com/packages/lf20_V9t630.json\")\n\nst_lottie(lottie_hello, key=\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running AppTest in Python\nDESCRIPTION: This Python snippet illustrates how to initialize an AppTest instance and manually declare secrets within a test environment, which is critical for running tests without exposing sensitive data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/beyond-the-basics.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Initialize an AppTest instance.\nat = AppTest.from_file(\"app.py\")\n# Declare the secrets.\nat.secrets[\"db_username\"] = \"Jane\"\nat.secrets[\"db_password\"] = \"mypassword\"\nat.secrets[\"my_other_secrets.things_i_like\"] = [\"Streamlit\", \"Python\"]\n# Run the app.\nat.run()\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies and Headers with Streamlit Context in Python\nDESCRIPTION: Using st.context to provide a read-only interface for accessing cookies and headers in a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.context.cookies\nst.context.headers\n```\n\n----------------------------------------\n\nTITLE: Fragment Function in Sidebar Container\nDESCRIPTION: Shows how to place a fragment function within a specific container using a context manager.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/fragments.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith st.sidebar:\n    fragment_function()\n```\n\n----------------------------------------\n\nTITLE: Fallback to Login for Unauthenticated Users\nDESCRIPTION: Provides a fallback navigation that only contains the login page when the user is not logged in or has no role-specific pages. This ensures unauthenticated users can only access the login page.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nelse:\n    pg = st.navigation([st.Page(login)])\n```\n\n----------------------------------------\n\nTITLE: Testing Second Page with Session State in Python\nDESCRIPTION: This test file uses the Streamlit AppTest class to simulate the behavior of the second page in a multipage app, verifying the expected output when session state is manually set.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/beyond-the-basics.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"test_second.py\"\"\"\nfrom streamlit.testing.v1 import AppTest\n\ndef test_balloons():\n    at = AppTest.from_file(\"pages/second.py\")\n    at.session_state[\"magic_word\"] = \"Balloons\"\n    at.run()\n    assert at.markdown[0].value == \":balloon:\"\n```\n\n----------------------------------------\n\nTITLE: Setting Application Logo\nDESCRIPTION: Configures the application logo using both a full horizontal logo and a smaller icon version. The logo will appear on all pages of the application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nst.logo(\"images/horizontal_blue.png\", icon_image=\"images/icon_blue.png\")\n```\n\n----------------------------------------\n\nTITLE: Multiple OIDC Provider Configuration - TOML\nDESCRIPTION: This TOML snippet demonstrates a configuration for integrating multiple OIDC providers such as Google and Microsoft for Streamlit apps. Each provider maintains unique attributes within separately named dictionaries, necessary for supporting diverse identity providers.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/authentication.md#2025-04-21_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[auth]\\nredirect_uri = \"http://localhost:8501/oauth2callback\"\\ncookie_secret = \"xxx\"\\n\\n[auth.google]\\nclient_id = \"xxx\"\\nclient_secret = \"xxx\"\\nserver_metadata_url = (\\n    \"https://accounts.google.com/.well-known/openid-configuration\"\\n)\\n\\n[auth.microsoft]\\nclient_id = \"xxx\"\\nclient_secret = \"xxx\"\\nserver_metadata_url = (\\n    \"https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration\"\\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Option in Python\nDESCRIPTION: Shows how to use st.get_option() to retrieve a single configuration option, in this case the primary color from the theme settings.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.get_option(\"theme.primaryColor\")\n```\n\n----------------------------------------\n\nTITLE: Enhanced Monthly Sales Function with Fixed Height Containers in Streamlit\nDESCRIPTION: Updated version of the show_monthly_sales function that uses containers with fixed heights to improve layout alignment with the daily sales display.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef show_monthly_sales(data):\n    time.sleep(1)\n    selected_date = st.session_state.selected_date\n    this_month = selected_date.replace(day=1)\n    next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)\n\n    st.container(height=100, border=False) ### ADD CONTAINER ###\n\n    with st.container(height=510): ### ADD CONTAINER ###\n        st.header(f\"Daily sales for all products, {this_month:%B %Y}\")\n        monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]\n        st.write(monthly_sales)\n\n    with st.container(height=510): ### ADD CONTAINER ###\n        st.header(f\"Total sales for all products, {this_month:%B %Y}\")\n        st.bar_chart(monthly_sales.sum())\n```\n\n----------------------------------------\n\nTITLE: Adding Packages with npm\nDESCRIPTION: Shows how to add external packages to your Streamlit component using npm from within the component's frontend directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/components-api.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm add baseui\n```\n\n----------------------------------------\n\nTITLE: Using id() for Hashing in Streamlit (Not Recommended)\nDESCRIPTION: Shows an example of using Python's id() function for hashing, which is not recommended as it doesn't provide deterministic hashing across multiple instances with the same attributes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\n    @st.cache_data(hash_funcs={\"__main__.MyCustomClass\": id})\n    def multiply_score(self, multiplier: int) -> int:\n        return self.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(score.multiply_score(multiplier))\n```\n\n----------------------------------------\n\nTITLE: Upgrading Streamlit and Checking Version\nDESCRIPTION: Commands to upgrade Streamlit to the latest version and verify the installed version.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/sanity-checks.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade streamlit\nstreamlit version\n```\n\n----------------------------------------\n\nTITLE: Handling Unserializable Data in Streamlit Session State with Python\nDESCRIPTION: This Python snippet demonstrates an example of adding unserializable data to Streamlit's session state, which raises an exception if enforceSerializableSessionState is enabled. The lambda function created by unserializable_data() cannot be serialized with pickle, highlighting the importance of ensuring data compatibility.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nimport streamlit as st\n\ndef unserializable_data():\n\t\treturn lambda x: x\n\n#👇 results in an exception when enforceSerializableSessionState is on\nst.session_state.unserializable = unserializable_data()\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Streamlit Multipage Apps\nDESCRIPTION: Example directory structure showing the organization of a Streamlit multipage app using the pages/ directory approach. Shows the relationship between the homepage and additional pages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nyour_working_directory/\n├── pages/\n│   ├── a_page.py\n│   └── another_page.py\n└── your_homepage.py\n```\n\n----------------------------------------\n\nTITLE: Defining Account Pages with Icons\nDESCRIPTION: Creates page objects for account-related functionality, including logout and settings pages. Each page is assigned a descriptive title and icon for the navigation menu.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlogout_page = st.Page(logout, title=\"Log out\", icon=\":material/logout:\")\nsettings = st.Page(\"settings.py\", title=\"Settings\", icon=\":material/settings:\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Preformatted Text in Streamlit\nDESCRIPTION: Uses st.text() to write fixed-width and preformatted text, preserving spaces and formatting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/_index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nst.text(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Using Status Container in Streamlit\nDESCRIPTION: Demonstrates the usage of status container for displaying the progress of long-running tasks. The status container shows a 'Running' message while executing the task.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/chat/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith st.status('Running'):\n  do_something_slow()\n```\n\n----------------------------------------\n\nTITLE: Iframe Embedding with Light Theme Option\nDESCRIPTION: This snippet demonstrates how to embed a Streamlit app with the light theme applied by default.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/?embed=true&embed_options=light_theme\n```\n\n----------------------------------------\n\nTITLE: Stretching Buttons with use_container_width in Streamlit 1.18.0\nDESCRIPTION: The st.button function has an optional use_container_width parameter to stretch buttons across the full container width.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2023.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.button(\"Click me\", use_container_width=True)\n```\n\n----------------------------------------\n\nTITLE: Avoid Button-Triggered Processes Without Session State\nDESCRIPTION: This snippet demonstrates the anti-pattern of performing a process inside a button's conditional block without saving the result to session state. Any changes will be lost on the next interaction.  Specifically this can cause issues in file operations since the dataframe will not be available upon second click.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\n\nfile = st.file_uploader(\"Upload a file\", type=\"csv\")\n\nif st.button('Get data'):\n    df = pd.read_csv(file)\n    # This display will go away with the user's next action.\n    st.write(df)\n\nif st.button('Save'):\n    # This will always error.\n    df.to_csv('data.csv')\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication with st.login in Streamlit\nDESCRIPTION: Starts an authentication flow with an identity provider using st.login(). This is used to implement user authentication in Streamlit apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_124\n\nLANGUAGE: python\nCODE:\n```\nst.login()\n```\n\n----------------------------------------\n\nTITLE: Using st.help Function in Streamlit\nDESCRIPTION: The st.help function allows you to display the documentation string (docstring) of any Python object in a nicely formatted way within a Streamlit app. This function provides an easy way to show help text and API documentation directly in the UI.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/help.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.help\n```\n\n----------------------------------------\n\nTITLE: Managing Date State in Streamlit\nDESCRIPTION: Retrieving the previous date from session state and updating it with the current selection. This allows tracking date changes between user interactions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n    previous_date = st.session_state.previous_date\n    st.session_state.previous_date = selected_date\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Pages Component\nDESCRIPTION: Illustrates how to use the st_pages component for an experimental version of Streamlit Multi-Page Apps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(\"streamlit_app.py\", \"Home\", \"🏠\"),\n  Page(\"other_pages/page2.py\", \"Page 2\", \":books:\"), ])\n```\n\n----------------------------------------\n\nTITLE: Handling Correct Errors Action\nDESCRIPTION: Saves validation information and updates stage when correction is requested.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nst.session_state.validation = {\n    \"sentences\": response_sentences,\n    \"valid\": validation_list,\n}\nst.session_state.stage = \"correct\"\nst.rerun()\n```\n\n----------------------------------------\n\nTITLE: Defining Response and Admin Pages with Role-Based Defaults\nDESCRIPTION: Creates page objects for responder and administrator functionality with role-specific default page selection. The default parameter dynamically sets the landing page based on the user's role.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrespond_1 = st.Page(\n    \"respond/respond_1.py\",\n    title=\"Respond 1\",\n    icon=\":material/healing:\",\n    default=(role == \"Responder\"),\n)\nrespond_2 = st.Page(\n    \"respond/respond_2.py\", title=\"Respond 2\", icon=\":material/handyman:\"\n)\nadmin_1 = st.Page(\n    \"admin/admin_1.py\",\n    title=\"Admin 1\",\n    icon=\":material/person_add:\",\n    default=(role == \"Admin\"),\n)\nadmin_2 = st.Page(\"admin/admin_2.py\", title=\"Admin 2\", icon=\":material/security:\")\n```\n\n----------------------------------------\n\nTITLE: Second App Page in Python with Streamlit\nDESCRIPTION: This Python snippet is for the second page of a multipage Streamlit app, where a specific session state value triggers a visual change, such as displaying an emoji.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/beyond-the-basics.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"second.py\"\"\"\nimport streamlit as st\n\nst.session_state.magic_word = st.session_state.get(\"magic_word\", \"Streamlit\")\n\nif st.session_state.magic_word == \"Balloons\":\n    st.markdown(\":balloon:\")\n```\n\n----------------------------------------\n\nTITLE: Creating Text Input Widgets in Streamlit\nDESCRIPTION: Displays a single-line text input widget. Returns the text entered by the user as a string.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nname = st.text_input(\"First name\")\n```\n\n----------------------------------------\n\nTITLE: Streamlit Single-Page App Demo\nDESCRIPTION: This code represents the initial single-page Streamlit application, which includes demos for plotting, mapping, and displaying dataframes. The app uses a `st.selectbox` to navigate between these demos within a single page. The single file contains all the demo logic and a selectbox based navigation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-a-multi-page-app.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef intro():\n    import streamlit as st\n\n    st.write(\"# Welcome to Streamlit! 👋\")\n    st.sidebar.success(\"Select a demo above.\")\n\n    st.markdown(\n        \"\"\"\n        Streamlit is an open-source app framework built specifically for\n        Machine Learning and Data Science projects.\n\n        **👈 Select a demo from the dropdown on the left** to see some examples\n        of what Streamlit can do!\n\n        ### Want to learn more?\n\n        - Check out [streamlit.io](https://streamlit.io)\n        - Jump into our [documentation](https://docs.streamlit.io)\n        - Ask a question in our [community\n          forums](https://discuss.streamlit.io)\n\n        ### See more complex demos\n\n        - Use a neural net to [analyze the Udacity Self-driving Car Image\n          Dataset](https://github.com/streamlit/demo-self-driving)\n        - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)\n    \"\"\"\n    )\n\ndef mapping_demo():\n    import streamlit as st\n    import pandas as pd\n    import pydeck as pdk\n\n    from urllib.error import URLError\n\n    st.markdown(f\"# {list(page_names_to_funcs.keys())[2]}\")\n    st.write(\n        \"\"\"\n        This demo shows how to use\n[`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart)\nto display geospatial data.\n\"\"\"\n    )\n\n    @st.cache_data\n    def from_data_file(filename):\n        url = (\n            \"http://raw.githubusercontent.com/streamlit/\"\n            \"example-data/master/hello/v1/%s\" % filename\n        )\n        return pd.read_json(url)\n\n    try:\n        ALL_LAYERS = {\n            \"Bike Rentals\": pdk.Layer(\n                \"HexagonLayer\",\n                data=from_data_file(\"bike_rental_stats.json\"),\n                get_position=[\"lon\", \"lat\"],\n                radius=200,\n                elevation_scale=4,\n                elevation_range=[0, 1000],\n                extruded=True,\n            ),\n            \"Bart Stop Exits\": pdk.Layer(\n                \"ScatterplotLayer\",\n                data=from_data_file(\"bart_stop_stats.json\"),\n                get_position=[\"lon\", \"lat\"],\n                get_color=[200, 30, 0, 160],\n                get_radius=\"[exits]\",\n                radius_scale=0.05,\n            ),\n            \"Bart Stop Names\": pdk.Layer(\n                \"TextLayer\",\n                data=from_data_file(\"bart_stop_stats.json\"),\n                get_position=[\"lon\", \"lat\"],\n                get_text=\"name\",\n                get_color=[0, 0, 0, 200],\n                get_size=15,\n                get_alignment_baseline=\"'bottom'\",\n            ),\n            \"Outbound Flow\": pdk.Layer(\n                \"ArcLayer\",\n                data=from_data_file(\"bart_path_stats.json\"),\n                get_source_position=[\"lon\", \"lat\"],\n                get_target_position=[\"lon2\", \"lat2\"],\n                get_source_color=[200, 30, 0, 160],\n                get_target_color=[200, 30, 0, 160],\n                auto_highlight=True,\n                width_scale=0.0001,\n                get_width=\"outbound\",\n                width_min_pixels=3,\n                width_max_pixels=30,\n            )\n        }\n        st.sidebar.markdown(\"### Map Layers\")\n        selected_layers = [\n            layer\n            for layer_name, layer in ALL_LAYERS.items()\n            if st.sidebar.checkbox(layer_name, True)\n        ]\n        if selected_layers:\n            st.pydeck_chart(\n                pdk.Deck(\n                    map_style=\"mapbox://styles/mapbox/light-v9\",\n                    initial_view_state={\n                        \"latitude\": 37.76,\n                        \"longitude\": -122.4,\n                        \"zoom\": 11,\n                        \"pitch\": 50,\n                    },\n                    layers=selected_layers,\n                )\n            )\n        else:\n            st.error(\"Please choose at least one layer above.\")\n    except URLError as e:\n        st.error(\n            \"\"\"\n            **This demo requires internet access.**\n\n            Connection error: %s\n        \"\"\"\n            % e.reason\n        )\n\ndef plotting_demo():\n    import streamlit as st\n    import time\n    import numpy as np\n\n    st.markdown(f'# {list(page_names_to_funcs.keys())[1]}')\n    st.write(\n        \"\"\"\n        This demo illustrates a combination of plotting and animation with\nStreamlit. We're generating a bunch of random numbers in a loop for around\n5 seconds. Enjoy!\n\"\"\"\n    )\n\n    progress_bar = st.sidebar.progress(0)\n    status_text = st.sidebar.empty()\n    last_rows = np.random.randn(1, 1)\n    chart = st.line_chart(last_rows)\n\n    for i in range(1, 101):\n        new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)\n        status_text.text(\"%i%% Complete\" % i)\n        chart.add_rows(new_rows)\n        progress_bar.progress(i)\n        last_rows = new_rows\n        time.sleep(0.05)\n\n    progress_bar.empty()\n\n    # Streamlit widgets automatically run the script from top to bottom. Since\n    # this button is not connected to any other logic, it just causes a plain\n    # rerun.\n    st.button(\"Re-run\")\n\n\ndef data_frame_demo():\n    import streamlit as st\n    import pandas as pd\n    import altair as alt\n\n    from urllib.error import URLError\n\n    st.markdown(f\"# {list(page_names_to_funcs.keys())[3]}\")\n    st.write(\n        \"\"\"\n        This demo shows how to use `st.write` to visualize Pandas DataFrames.\n\n(Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).)\n\"\"\"\n    )\n\n    @st.cache_data\n    def get_UN_data():\n        AWS_BUCKET_URL = \"http://streamlit-demo-data.s3-us-west-2.amazonaws.com\"\n        df = pd.read_csv(AWS_BUCKET_URL + \"/agri.csv.gz\")\n        return df.set_index(\"Region\")\n\n    try:\n        df = get_UN_data()\n        countries = st.multiselect(\n            \"Choose countries\", list(df.index), [\"China\", \"United States of America\"]\n        )\n        if not countries:\n            st.error(\"Please select at least one country.\")\n        else:\n            data = df.loc[countries]\n            data /= 1000000.0\n            st.write(\"### Gross Agricultural Production ($B)\", data.sort_index())\n\n            data = data.T.reset_index()\n            data = pd.melt(data, id_vars=[\"index\"]).rename(\n                columns={\"index\": \"year\", \"value\": \"Gross Agricultural Product ($B)\"}\n            )\n            chart = (\n                alt.Chart(data)\n                .mark_area(opacity=0.3)\n                .encode(\n                    x=\"year:T\",\n                    y=alt.Y(\"Gross Agricultural Product ($B):Q\", stack=None),\n                    color=\"Region:N\",\n                )\n            )\n            st.altair_chart(chart, use_container_width=True)\n    except URLError as e:\n        st.error(\n            \"\"\"\n            **This demo requires internet access.**\n\n            Connection error: %s\n        \"\"\"\n            % e.reason\n        )\n\npage_names_to_funcs = {\n    \"—\": intro,\n    \"Plotting Demo\": plotting_demo,\n    \"Mapping Demo\": mapping_demo,\n    \"DataFrame Demo\": data_frame_demo\n}\n\ndemo_name = st.sidebar.selectbox(\"Choose a demo\", page_names_to_funcs.keys())\npage_names_to_funcs[demo_name]()\n```\n\n----------------------------------------\n\nTITLE: Referencing Streamlit Number Input Function\nDESCRIPTION: An Autofunction tag that automatically generates documentation for the streamlit.number_input function. This widget allows users to input numeric values in Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/number_input.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Autofunction function=\"streamlit.number_input\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Sleep Delay in Streamlit Function\nDESCRIPTION: Adding a time delay to slow down the function execution, useful for demonstrating the fragment's selective rerunning behavior.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Resetting BaseConnection in Python\nDESCRIPTION: This snippet demonstrates how to call the reset method on a BaseConnection instance. The reset method is used to clear any cached data and re-establish the connection.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/connections-baseconnection.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconnection.reset()\n```\n\n----------------------------------------\n\nTITLE: Caching a TensorFlow model with Streamlit\nDESCRIPTION: This snippet demonstrates an attempt to cache a TensorFlow model using `st.cache_resource`. It highlights the `UnhashableParamError` that arises when Streamlit cannot hash the model object. The code defines two cached functions: `load_base_model` to load different models based on user selection, and `load_layers` to extract layer names from the loaded model.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport tensorflow as tf\n\n@st.cache_resource\ndef load_base_model(option):\n    if option == 1:\n        return tf.keras.applications.ResNet50(include_top=False, weights=\"imagenet\")\n    else:\n        return tf.keras.applications.MobileNetV2(include_top=False, weights=\"imagenet\")\n\n@st.cache_resource\ndef load_layers(base_model):\n    return [layer.name for layer in base_model.layers]\n\noption = st.radio(\"Model 1 or 2\", [1, 2])\n\nbase_model = load_base_model(option)\n\nlayers = load_layers(base_model)\n\nst.write(layers)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Streamlit Light Theme in TOML\nDESCRIPTION: Configuration for recreating the default Streamlit Light theme with specific color and font settings using TOML configuration\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/theming.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[theme]\nprimaryColor=\"#FF4B4B\"\nbackgroundColor=\"#FFFFFF\"\nsecondaryBackgroundColor=\"#F0F2F6\"\ntextColor=\"#31333F\"\nfont=\"sans serif\"\n```\n\n----------------------------------------\n\nTITLE: Enhanced Daily Sales Function with Fixed Height Containers in Streamlit\nDESCRIPTION: Updated version of the show_daily_sales function that uses containers with fixed heights to improve layout alignment with the monthly sales display.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment\ndef show_daily_sales(data):\n    time.sleep(1)\n    with st.container(height=100): ### ADD CONTAINER ###\n        selected_date = st.date_input(\n            \"Pick a day \",\n            value=date(2023, 1, 1),\n            min_value=date(2023, 1, 1),\n            max_value=date(2023, 12, 31),\n            key=\"selected_date\",\n        )\n\n    if \"previous_date\" not in st.session_state:\n        st.session_state.previous_date = selected_date\n    previous_date = st.session_state.previous_date\n    previous_date = st.session_state.previous_date\n    st.session_state.previous_date = selected_date\n    is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)\n    if is_new_month:\n        st.rerun()\n\n    with st.container(height=510): ### ADD CONTAINER ###\n        st.header(f\"Best sellers, {selected_date:%m/%d/%y}\")\n        top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]\n        cols = st.columns([1, 4])\n        cols[0].dataframe(top_ten)\n        cols[1].bar_chart(top_ten)\n\n    with st.container(height=510): ### ADD CONTAINER ###\n        st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\")\n        bottom_ten = data.loc[selected_date].sort_values()[0:10]\n        cols = st.columns([1, 4])\n        cols[0].dataframe(bottom_ten)\n        cols[1].bar_chart(bottom_ten)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Streamlit-Neon Integration\nDESCRIPTION: List of required Python packages to be installed in the environment for connecting Streamlit to Neon database.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/neon.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nstreamlit>=1.28\npsycopg2-binary>=2.9.6\nsqlalchemy>=2.0.0\n```\n\n----------------------------------------\n\nTITLE: Add Rows to Streamlit Table\nDESCRIPTION: Functionality to add additional rows to an existing table using the DeltaGenerator.add_rows method. This allows for dynamic table updates after initial creation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/table.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDeltaGenerator.add_rows(data=None, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Excluding Unhashable Parameters from Caching in Streamlit\nDESCRIPTION: Demonstrates how to exclude an unhashable parameter (like a database connection) from Streamlit's caching mechanism by prepending an underscore to the parameter name.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_data\ndef fetch_data(_db_connection, num_rows):  # 👈 Don't hash _db_connection\n    data = _db_connection.fetch(num_rows)\n    return data\n\nconnection = init_connection()\nfetch_data(connection, 10)\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Different OS\nDESCRIPTION: Commands to activate the virtual environment on Windows command prompt, Windows PowerShell, and macOS/Linux.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Windows command prompt\n.venv\\Scripts\\activate.bat\n\n# Windows PowerShell\n.venv\\Scripts\\Activate.ps1\n\n# macOS and Linux\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Rebooting Streamlit App Documentation in Markdown\nDESCRIPTION: Markdown content describing the process of rebooting Streamlit apps, including the reasons for rebooting, impact on users, and step-by-step instructions for both workspace and Cloud logs methods.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/manage-your-app/reboot-your-app.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Reboot your app\nslug: /deploy/streamlit-community-cloud/manage-your-app/reboot-your-app\n---\n\n# Reboot your app\n\nIf you need to clear your app's memory or force a fresh build after modifying a file that Streamlit Community Cloud doesn't monitor, you may need to reboot your app. This will interrupt any user who may currently be using your app and may take a few minutes for your app to redeploy. Anyone visiting your app will see \"Your app is in the oven\" during a reboot.\n```\n\n----------------------------------------\n\nTITLE: Adding a Logout Button to Streamlit App\nDESCRIPTION: Adds a logout button that uses Streamlit's logout function as a callback to log the user out of the application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/google.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    st.button(\"Log out\", on_click=st.logout)\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Options in TOML\nDESCRIPTION: Client-side settings for Streamlit, including error display, toolbar mode, and sidebar navigation options.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[client]\n\n# Controls whether uncaught app exceptions and deprecation warnings\n# are displayed in the browser. This can be one of the following:\n# - \"full\"       : In the browser, Streamlit displays app deprecation\n#                  warnings and exceptions, including exception types,\n#                  exception messages, and associated tracebacks.\n# - \"stacktrace\" : In the browser, Streamlit displays exceptions,\n#                  including exception types, generic exception messages,\n#                  and associated tracebacks. Deprecation warnings and\n#                  full exception messages will only print to the\n#                  console.\n# - \"type\"       : In the browser, Streamlit displays exception types and\n#                  generic exception messages. Deprecation warnings, full\n#                  exception messages, and associated tracebacks only\n#                  print to the console.\n# - \"none\"       : In the browser, Streamlit displays generic exception\n#                  messages. Deprecation warnings, full exception\n#                  messages, associated tracebacks, and exception types\n#                  will only print to the console.\n# - True         : This is deprecated. Streamlit displays \"full\"\n#                  error details.\n# - False        : This is deprecated. Streamlit displays \"stacktrace\"\n#                  error details.\n# Default: \"full\"\nshowErrorDetails = \"full\"\n\n# Change the visibility of items in the toolbar, options menu,\n# and settings dialog (top right of the app).\n# Allowed values:\n# - \"auto\"      : Show the developer options if the app is accessed through\n#                 localhost or through Streamlit Community Cloud as a developer.\n#                 Hide them otherwise.\n# - \"developer\" : Show the developer options.\n# - \"viewer\"    : Hide the developer options.\n# - \"minimal\"   : Show only options set externally (e.g. through\n#                 Streamlit Community Cloud) or through st.set_page_config.\n#                 If there are no options left, hide the menu.\n# Default: \"auto\"\ntoolbarMode = \"auto\"\n\n# Controls whether to display the default sidebar page navigation in a\n# multi-page app. This only applies when app's pages are defined by the\n# `pages/` directory.\n# Default: true\nshowSidebarNavigation = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Magic Commands in Streamlit Configuration\nDESCRIPTION: Shows how to disable Streamlit's Magic feature by modifying the configuration file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/write-magic/magic.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[runner]\nmagicEnabled = false\n```\n\n----------------------------------------\n\nTITLE: Loading and Modifying Data with st.cache_resource\nDESCRIPTION: This example demonstrates the use of `st.cache_resource` to load data from a CSV file and subsequently modify it by dropping a column.  Because `st.cache_resource` does not create a copy of the DataFrame, modifying the returned DataFrame directly affects the cached object, leading to potential errors on subsequent runs if the modified column is referenced. This example will not run without streamlit and pandas installed and imported as st and pd respectively.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_resource   # 👈 Turn off copying behavior\ndef load_data(url):\n    df = pd.read_csv(url)\n    return df\n\ndf = load_data(\"https://raw.githubusercontent.com/plotly/datasets/master/uber-rides-data1.csv\")\nst.dataframe(df)\n\ndf.drop(columns=['Lat'], inplace=True)  # 👈 Mutate the dataframe inplace\n\nst.button(\"Rerun\")\n```\n\n----------------------------------------\n\nTITLE: Iframe Embedding with Show Colored Line Option\nDESCRIPTION: This snippet shows how to embed a Streamlit app with the colored line displayed at the top using the embed_options parameter.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/?embed=true&embed_options=show_colored_line\n```\n\n----------------------------------------\n\nTITLE: Caching NumPy arrays with Streamlit\nDESCRIPTION: This snippet illustrates how Streamlit's default hashing mechanism for NumPy arrays might lead to unexpected cache behavior. Even when the input data (a NumPy array) is the same, the cached function `show_data` is re-run each time the app is rerun.  It uses `st.cache_data` to cache a function that receives a NumPy array.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport numpy as np\nimport pandas as pd\nimport streamlit as st\n\n@st.cache_data\ndef get_data():\n    df = pd.DataFrame({\"num\": [112, 112, 2, 3], \"str\": [\"be\", \"a\", \"be\", \"c\"]})\n    return df\n\n@st.cache_data\ndef show_data(data):\n    time.sleep(2)  # This makes the function take 2s to run\n    return data\n\ndf = get_data()\ndata = df[\"str\"].unique()\n\nst.dataframe(show_data(data))\nst.button(\"Re-run\")\n```\n\n----------------------------------------\n\nTITLE: Basic Streamlit Multipage App Implementation\nDESCRIPTION: Demonstrates the minimal code required to set up a multipage Streamlit app with two pages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page-and-navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\npg = st.navigation([st.Page(\"page_1.py\"), st.Page(\"page_2.py\")])\npg.run()\n```\n\n----------------------------------------\n\nTITLE: Executing Streamlit Run Command from Repository Root\nDESCRIPTION: This command demonstrates how to run a Streamlit app located in a subdirectory from the root of the repository. This ensures consistent path interpretation between local development and Community Cloud environments.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/deploy-your-app/file-organization.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd your_repository\nstreamlit run subdirectory/your_app.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Function in Streamlit\nDESCRIPTION: Define a logout function that resets the user's role and triggers app rerun to return to login state\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef logout():\n    st.session_state.role = None\n    st.rerun()\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App from Command Line\nDESCRIPTION: This bash command is used to run the Streamlit application that was created in the previous snippets. It is run from the terminal in the working directory where the app script is located.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/snowflake.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Port in TOML\nDESCRIPTION: This snippet demonstrates how to set the server port for a Streamlit application using a global configuration file in TOML format. The configuration file must be located at `~/.streamlit/config.toml` for macOS/Linux or `%userprofile%/.streamlit/config.toml` for Windows.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/options.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[server]\\nport = 80\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Message in Streamlit\nDESCRIPTION: Shows a formatted success message box with a green background, useful for providing positive confirmation to users.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nst.success(\"Match found!\")\n```\n\n----------------------------------------\n\nTITLE: Running pytest in specific directory\nDESCRIPTION: This command executes pytest within the `tests/` directory, which will discover and run all Python files with the test prefix (`test_<name>.py`).  It narrows the scope of the tests run to only the files within the specified directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"pytest tests/\"\n```\n\n----------------------------------------\n\nTITLE: Creating Button Columns\nDESCRIPTION: Sets up three columns for organizing action buttons.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncols = st.columns(3)\n```\n\n----------------------------------------\n\nTITLE: Creating Header Text with st.header() in Streamlit\nDESCRIPTION: This snippet demonstrates how to create a header that will automatically have an anchor point generated for it. The anchor ID will be the header text in lowercase with spaces replaced by hyphens.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/create-anchor-link.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.header(\"Section 1\")\n```\n\n----------------------------------------\n\nTITLE: Caching datetime objects with Streamlit\nDESCRIPTION: This snippet demonstrates how Streamlit handles `datetime` objects, specifically those localized with `pytz`. It illustrates that Streamlit may not be able to hash localized `datetime` objects by default, leading to an `UnhashableParamError`. The code shows a basic usage of `st.cache_data` with a function that simply returns the input datetime object.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nimport pytz\nimport streamlit as st\n\ntz = pytz.timezone(\"Europe/Berlin\")\n\n@st.cache_data\ndef load_data(dt):\n    return dt\n\nnow = datetime.now()\nst.text(load_data(dt=now))\n\nnow_tz = tz.localize(datetime.now())\nst.text(load_data(dt=now_tz))\n```\n\n----------------------------------------\n\nTITLE: Example Requirements File\nDESCRIPTION: Sample requirements.txt file showing required Python dependencies for a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\naltair\npandas\nstreamlit\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Streamlit Documentation\nDESCRIPTION: This requirements file lists all the Python packages needed to run the Streamlit documentation examples. It includes data manipulation libraries (pandas, numpy), visualization packages (plotly, bokeh, matplotlib, altair, pydeck), utility libraries (requests, Faker), and integration with external services (openai).\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npandas\nplotly\nbokeh==2.4.3\ngraphviz\nrequests\nmatplotlib\nnumpy<2\nscipy\naltair>=5.0.0\npydeck\nFaker\nopenai\nvega_datasets\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Filtering Map Data by Hour\nDESCRIPTION: Filters pickup data for a specific hour and displays it on the map with a custom subheader.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nhour_to_filter = 17\nfiltered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\nst.subheader(f'Map of all pickups at {hour_to_filter}:00')\nst.map(filtered_data)\n```\n\n----------------------------------------\n\nTITLE: Display Initial Data\nDESCRIPTION: Calls the `show_latest_data` function. This displays the initial data. When the user starts streaming, the `show_latest_data` fragment will automatically update the line chart.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n\"show_latest_data()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Python Dependencies in requirements.txt\nDESCRIPTION: This snippet demonstrates how to create a requirements.txt file that specifies the necessary Python dependencies for deploying a Streamlit app. The file should include specific version numbers to ensure compatibility.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/microsoft.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit>=1.42.0\nAuthlib>=1.3.2\n```\n\n----------------------------------------\n\nTITLE: Packages.txt for External Dependencies\nDESCRIPTION: A packages.txt file listing Linux apt-get dependencies needed for the mysqlclient Python package. These packages are installed in the Linux environment before Python dependencies are installed.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/deploy-your-app/app-dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n    build-essential\n    pkg-config\n    default-libmysqlclient-dev\n```\n\n----------------------------------------\n\nTITLE: Setting File Upload Limit via Environment Variable (Bash)\nDESCRIPTION: This command sets the STREAMLIT_SERVER_MAX_UPLOAD_SIZE environment variable to configure the maximum file upload size in Streamlit.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/increase-upload-limit-cloud.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport STREAMLIT_SERVER_MAX_UPLOAD_SIZE=200\n```\n\n----------------------------------------\n\nTITLE: Invalid Widget State Modification Example in Streamlit\nDESCRIPTION: Shows an incorrect implementation of modifying widget state after widget creation, which will result in an error.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.text_input('Name', key='name')\n\nif st.button('Clear name'):\n    st.session_state.name = ''\nif st.button('Streamlit!'):\n    st.session_state.name = ('Streamlit')\n```\n\n----------------------------------------\n\nTITLE: Adding Streamlit Badge to GitHub README\nDESCRIPTION: Markdown code to add a Streamlit badge to a GitHub repository README file. The badge links to the deployed Streamlit app and helps with app discoverability.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Streamlit App](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://<your-custom-subdomain>.streamlit.app)\n```\n\n----------------------------------------\n\nTITLE: Displaying Subheader Text in Streamlit\nDESCRIPTION: Shows how to use st.subheader to display formatted subheader text in a Streamlit application. The method accepts a text string parameter and renders it as a subheader.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/subheader.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.subheader('This is a subheader')\n```\n\n----------------------------------------\n\nTITLE: Using Lambda for Custom Hashing in Streamlit Class Methods\nDESCRIPTION: Demonstrates using a lambda function with hash_funcs to provide a custom hashing function for a class method, using the my_score attribute to uniquely identify instances.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nclass MyCustomClass:\n    def __init__(self, initial_score: int):\n        self.my_score = initial_score\n\n    @st.cache_data(hash_funcs={\"__main__.MyCustomClass\": lambda x: hash(x.my_score)})\n    def multiply_score(self, multiplier: int) -> int:\n        return self.my_score * multiplier\n\ninitial_score = st.number_input(\"Enter initial score\", value=15)\n\nscore = MyCustomClass(initial_score)\nmultiplier = 2\n\nst.write(score.multiply_score(multiplier))\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Components in Streamlit\nDESCRIPTION: Demonstrates how to create and register a custom component in Streamlit. This is useful for extending Streamlit with custom functionality or UI elements.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_153\n\nLANGUAGE: python\nCODE:\n```\nfrom st.components.v1 import declare_component\ndeclare_component(\n    \"custom_slider\",\n    \"/frontend\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Streamlit Project in Current Directory\nDESCRIPTION: This example demonstrates how to create a new Streamlit project in the current working directory. It creates 'requirements.txt' and 'streamlit_app.py' files.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/init.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit init\n```\n\n----------------------------------------\n\nTITLE: Storing Session State Role in Variable\nDESCRIPTION: Extracts the user's role from session state and stores it in a local variable for convenience throughout the navigation setup.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrole = st.session_state.role\n```\n\n----------------------------------------\n\nTITLE: Implementing 'Rewrite' Stage in Streamlit Chat App\nDESCRIPTION: This snippet defines the 'rewrite' stage where users can freely edit the AI-generated response. It provides a text area for editing and an update button to save changes and return to the user stage.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nelif st.session_state.stage == \"rewrite\":\n    st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n    with st.chat_message(\"assistant\"):\n        new = st.text_area(\"Rewrite the answer\", value=st.session_state.pending)\n        if st.button(\n            \"Update\", type=\"primary\", disabled=new is None or new.strip(\". \") == \"\"\n        ):\n            st.session_state.history.append({\"role\": \"assistant\", \"content\": new})\n            st.session_state.pending = None\n            st.session_state.validation = {}\n            st.session_state.stage = \"user\"\n            st.rerun()\n```\n\n----------------------------------------\n\nTITLE: Displaying Info Message in Streamlit\nDESCRIPTION: Shows a formatted informational message box with a blue background, useful for providing contextual information to users.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nst.info(\"Dataset is updated every day at midnight.\")\n```\n\n----------------------------------------\n\nTITLE: Adding Celebratory Balloons Animation in Streamlit\nDESCRIPTION: Displays a celebratory animation of balloons floating up from the bottom of the screen, typically used to mark achievements or completion.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nst.balloons()\n```\n\n----------------------------------------\n\nTITLE: Basic Streamlit Code Example Without Echo\nDESCRIPTION: Shows a basic Streamlit application that writes a greeting message using functions and string concatenation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/echo.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef get_user_name():\n    return 'John'\n\n# ------------------------------------------------\n# Want people to see this part of the code...\n\ndef get_punctuation():\n    return '!!!'\n\ngreeting = \"Hi there, \"\nuser_name = get_user_name()\npunctuation = get_punctuation()\n\nst.write(greeting, user_name, punctuation)\n\n# ...up to here\n# ------------------------------------------------\n\nfoo = 'bar'\nst.write('Done!')\n```\n\n----------------------------------------\n\nTITLE: Returning to User Stage\nDESCRIPTION: Updates stage to user mode and reruns the application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nst.session_state.stage = \"user\"\nst.rerun()\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Link to an Anchor in Streamlit\nDESCRIPTION: This example shows how to create a markdown link that navigates to a specific anchor on the page. The link references the automatically generated anchor from the header.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/create-anchor-link.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.markdown(\"[Section 1](#section-1)\")\n```\n\n----------------------------------------\n\nTITLE: Launching Streamlit Server with Python Script\nDESCRIPTION: Command to initialize a Streamlit application, which starts the Python backend server and prepares the app for client interaction\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_app.py\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies in Docker\nDESCRIPTION: Installs Python package dependencies from requirements.txt file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_9\n\nLANGUAGE: docker\nCODE:\n```\nRUN pip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying Exceptions with st.exception\nDESCRIPTION: API reference for st.exception which displays exceptions in a Streamlit application. This is primarily used for showing error messages and stack traces in a user-friendly format.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/exception.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.exception\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bars with Stqdm\nDESCRIPTION: Use the Stqdm component to easily add progress bars to Streamlit apps. This example demonstrates a simple loop with a progress bar updating every 0.5 seconds.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/_index.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Dependencies to Requirements File\nDESCRIPTION: Bash commands to add psycopg2-binary and SQLAlchemy packages to the requirements.txt file for PostgreSQL connectivity.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/postgresql.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# requirements.txt\npsycopg2-binary==x.x.x\nsqlalchemy==x.x.x\n```\n\n----------------------------------------\n\nTITLE: Docker Container Health Check\nDESCRIPTION: Adds health check to ensure Streamlit application is running properly.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_11\n\nLANGUAGE: docker\nCODE:\n```\nHEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets Management in Streamlit TOML\nDESCRIPTION: Sets up the connection to a private Google Sheet by defining connection parameters in the `.streamlit/secrets.toml` file. This step involves specifying the Google Sheet URL and the contents of the GCP service account JSON key. This configuration is essential for the Streamlit app to authenticate and access the Google Sheet data securely.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/private-gsheet.md#2025-04-21_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n# .streamlit/secrets.toml\n\n[connections.gsheets]\nspreadsheet = \"https://docs.google.com/spreadsheets/d/xxxxxxx/edit#gid=0\"\n\n# From your JSON key file\ntype = \"service_account\"\nproject_id = \"xxx\"\nprivate_key_id = \"xxx\"\nprivate_key = \"xxx\"\nclient_email = \"xxx\"\nclient_id = \"xxx\"\nauth_uri = \"https://accounts.google.com/o/oauth2/auth\"\ntoken_uri = \"https://oauth2.googleapis.com/token\"\nauth_provider_x509_cert_url = \"https://www.googleapis.com/oauth2/v1/certs\"\nclient_x509_cert_url = \"xxx\"\n\n```\n\n----------------------------------------\n\nTITLE: Using Fragments in Streamlit\nDESCRIPTION: Demonstrates how to define a fragment that reruns independently from the rest of the script. This example creates a fragment that refreshes every 10 seconds to update a line chart with new data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_133\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment(run_every=\"10s\")\ndef fragment():\n    df = get_data()\n    st.line_chart(df)\n```\n\n----------------------------------------\n\nTITLE: Adding Map Section Header in Streamlit\nDESCRIPTION: Adds a subheader to the map section using Streamlit's st.subheader() function.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nst.subheader('Map of all pickups')\n```\n\n----------------------------------------\n\nTITLE: Deactivating the Virtual Environment\nDESCRIPTION: Command to exit the virtual environment and return to the normal shell environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Streamlit Command Line Interface (CLI)\nDESCRIPTION: Lists common Streamlit CLI commands for cache management, configuration, documentation access, examples, initialization, app execution, and version checking.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstreamlit cache clear\nstreamlit config show\nstreamlit docs\nstreamlit hello\nstreamlit help\nstreamlit init\nstreamlit run streamlit_app.py\nstreamlit version\n```\n\n----------------------------------------\n\nTITLE: Embedding External Website in Streamlit\nDESCRIPTION: Example demonstrating how to embed an external website using components.iframe(). Shows usage of the iframe component with height parameter.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/components-api.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport streamlit.components.v1 as components\n\n# embed streamlit docs in a streamlit app\ncomponents.iframe(\"https://example.com\", height=500)\n```\n\n----------------------------------------\n\nTITLE: Rerunning Scripts in Streamlit\nDESCRIPTION: Shows how to rerun a Streamlit script immediately. This can be useful for refreshing the entire app state based on some condition.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_134\n\nLANGUAGE: python\nCODE:\n```\nst.rerun()\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Init Command\nDESCRIPTION: The basic syntax for using the 'streamlit init' command. It creates files for a new Streamlit app in the specified directory or the current working directory if no directory is provided.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/init.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit init <directory>\n```\n\n----------------------------------------\n\nTITLE: Configuring Streamlit Community Cloud Default Settings\nDESCRIPTION: Default configuration settings that are enforced by Streamlit Community Cloud and will override any contrary settings in the user's config.toml file. These settings control error display, reruns, server behavior, and usage statistics collection.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/status-and-limitations.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[client]\nshowErrorDetails = false\n\n[runner]\nfastReruns = true\n\n[server]\nrunOnSave = true\nenableXsrfProtection = true\n\n[browser]\ngatherUsageStats = true\n```\n\n----------------------------------------\n\nTITLE: Embedding Streamlit Apps Using iframes in JavaScript\nDESCRIPTION: This snippet demonstrates how to embed a Streamlit app using an iframe HTML element with the '?embed=true' parameter. The example shows embedding the 30DaysOfStreamlit app with specific height and width settings.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<iframe\n  src=\"https://30days.streamlit.app?embed=true\"\n  style=\"height: 450px; width: 100%;\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Component Development Environment Setup\nDESCRIPTION: Terminal commands for setting up the development environment for both React and TypeScript-only templates. Includes npm initialization and server startup commands.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/components-api.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# React template\ntemplate/my_component/frontend\nnpm install    # Initialize the project and install npm dependencies\nnpm run start  # Start the Webpack dev server\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Google Cloud Storage in Streamlit\nDESCRIPTION: This Python script demonstrates how to use Streamlit's FilesConnection to read a CSV file from Google Cloud Storage and display its contents. It includes caching configuration and iterates through the data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/gcs.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\nfrom st_files_connection import FilesConnection\n\n# Create connection object and retrieve file contents.\n# Specify input format is a csv and to cache the result for 600 seconds.\nconn = st.connection('gcs', type=FilesConnection)\ndf = conn.read(\"streamlit-bucket/myfile.csv\", input_format=\"csv\", ttl=600)\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.Owner} has a :{row.Pet}:\")\n```\n\n----------------------------------------\n\nTITLE: Creating Streamlit Project in Specific Directory\nDESCRIPTION: This example shows how to create a new Streamlit project in a specific directory named 'project'. It creates the 'project' directory with 'requirements.txt' and 'streamlit_app.py' files inside.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/init.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit init project\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar Mode in Streamlit\nDESCRIPTION: Code snippet showing the different configuration options for customizing the app menu toolbar visibility and functionality using client.toolbarMode. Options include developer, viewer, minimal and auto modes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/app-chrome.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"client.toolbarMode\": {\n  \"developer\": \"Show developer options to all viewers\",\n  \"viewer\": \"Hide developer options from all viewers\", \n  \"minimal\": \"Show only externally set options\",\n  \"auto\": \"Show developer options on localhost/admin access\"\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Streamlit Configuration Files\nDESCRIPTION: Shows the structure for organizing configuration files in a Streamlit project. The config.toml file is placed in the .streamlit directory at the project root.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_156\n\nLANGUAGE: python\nCODE:\n```\nyour-project/\n├── .streamlit/\n│   └── config.toml\n└── your_app.py\n```\n\n----------------------------------------\n\nTITLE: Global Configuration Options in TOML\nDESCRIPTION: Global settings for Streamlit, including options to disable widget state duplication warnings and control script execution warnings.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[global]\n\n# By default, Streamlit displays a warning when a user sets both a widget\n# default value in the function defining the widget and a widget value via\n# the widget's key in `st.session_state`.\n# If you'd like to turn off this warning, set this to True.\n# Default: false\ndisableWidgetStateDuplicationWarning = false\n\n# If True, will show a warning when you run a Streamlit-enabled script\n# via \"python my_script.py\".\n# Default: true\nshowWarningOnDirectExecution = true\n```\n\n----------------------------------------\n\nTITLE: Creating Number Input Widgets in Streamlit\nDESCRIPTION: Displays a numeric input widget with increment/decrement buttons. Allows setting minimum and maximum values for the input.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nchoice = st.number_input(\"Pick a number\", 0, 10)\n```\n\n----------------------------------------\n\nTITLE: Adding supabase to requirements.txt\nDESCRIPTION: This Bash snippet shows how to add the `supabase` Python Client Library to the `requirements.txt` file for a Streamlit application. It specifies the library name and a pinned version number. This ensures that the Streamlit Community Cloud environment will install the necessary dependency for directly interacting with Supabase.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/supabase.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"# requirements.txt\\nsupabase==x.x.x\"\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Hello with Custom Configuration\nDESCRIPTION: An example of running the Streamlit Hello app with a custom configuration option. This command sets the primary color of the app to blue using the theme.primaryColor option.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/hello.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit hello --theme.primaryColor=blue\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Streamlit Quick Reference Page\nDESCRIPTION: Markdown content defining the structure of the Streamlit quick reference documentation page with navigation tiles using custom components like TileContainer and RefCard.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Quick reference\nslug: /develop/quick-reference\n---\n\n# Quick reference\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/quick-reference/cheat-sheet\">\n\n<h5>Cheatsheet</h5>\n\nA dense list of Streamlit commands with example syntax.\n\n</RefCard>\n\n<RefCard href=\"/develop/quick-reference/release-notes\">\n\n<h5>Release notes</h5>\n\nSee how Streamlit has changed with each new version.\n\n</RefCard>\n\n<RefCard href=\"/develop/quick-reference/prerelease\">\n\n<h5>Pre-release features</h5>\n\nUnderstand how we introduce new features and how you can get your hands on them sooner!\n\n</RefCard>\n\n<RefCard href=\"https://roadmap.streamlit.app/\">\n\n<h5>Roadmap</h5>\n\nGet a sneak peek at what we have scheduled for the next year.\n\n</RefCard>\n\n</TileContainer>\n```\n\n----------------------------------------\n\nTITLE: Embedding Streamlit Apps Using oEmbed URL Format\nDESCRIPTION: This code snippet shows the URL format for oEmbed integration, which allows embedding Streamlit apps directly in platforms that support oEmbed by simply pasting the app URL without additional parameters.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://30days.streamlit.app/\n```\n\n----------------------------------------\n\nTITLE: Removing Feedback Widgets from Chat History in Streamlit\nDESCRIPTION: This diff snippet shows how to modify the code to allow users to rate only the most recent response by removing feedback widgets from the chat history display. This is presented as a patch/diff format.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nfor i, message in enumerate(st.session_state.history):\n    with st.chat_message(message[\"role\"]):\n        st.write(message[\"content\"])\n-         if message[\"role\"] == \"assistant\":\n-             feedback = message.get(\"feedback\", None)\n-             st.session_state[f\"feedback_{i}\"] = feedback\n-             st.feedback(\n-                 \"thumbs\",\n-                 key=f\"feedback_{i}\",\n-                 disabled=feedback is not None,\n-                 on_change=save_feedback,\n-                 args=[i],\n-             )\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Rules with st.divider in Streamlit\nDESCRIPTION: Use st.divider to display a horizontal rule or divider line in Streamlit apps, helping to visually separate different sections of content.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nst.divider()\n```\n\n----------------------------------------\n\nTITLE: Selecting Options with Streamlit Selectbox in Python\nDESCRIPTION: This snippet demonstrates how to use st.selectbox to create a dropdown menu with numeric options. It shows how the selected value is returned by the widget function.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/custom-classes.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnumber = st.selectbox(\"Pick a number, any number\", options=[1, 2, 3])\n# number == whatever value the user has selected from the UI.\n```\n\n----------------------------------------\n\nTITLE: Streamlit Application Code for Querying TiDB\nDESCRIPTION: This Python snippet outlines the essential code for a Streamlit application to query the 'mytable' from the TiDB database and display results. It also sets a cache TTL for the query results.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tidb.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# streamlit_app.py\n\nimport streamlit as st\n\n# Initialize connection.\nconn = st.connection('tidb', type='sql')\n\n# Perform query.\ndf = conn.query('SELECT * from mytable;', ttl=600)\n\n# Print results.\nfor row in df.itertuples():\n    st.write(f\"{row.name} has a :{row.pet}:\")\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image to GCR\nDESCRIPTION: Commands for building a Docker image for the Streamlit app and pushing it to Google Container Registry.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/kubernetes.md#2025-04-21_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\ndocker build --platform linux/amd64 -t gcr.io/$GCP_PROJECT_ID/k8s-streamlit:test .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth configure-docker\ndocker push gcr.io/$GCP_PROJECT_ID/k8s-streamlit:test\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Application\nDESCRIPTION: Demonstrates how to run a Streamlit application using bash command with script arguments and script URL\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_script.py [-- script args]\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m streamlit run your_script.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: JSON Theme Object\nDESCRIPTION: Defines the structure of the theme object passed to the component, including base theme, primary color, background color, secondary background color, text color, and font.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/components-api.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"base\": \"lightORdark\",\n  \"primaryColor\": \"someColor1\",\n  \"backgroundColor\": \"someColor2\",\n  \"secondaryBackgroundColor\": \"someColor3\",\n  \"textColor\": \"someColor4\",\n  \"font\": \"someFont\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating and Highlighting Response\nDESCRIPTION: Processes the pending response through validation and highlighting helper functions to identify errors.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse_sentences, validation_list = validate(st.session_state.pending)\nhighlighted_sentences = add_highlights(response_sentences, validation_list)\n```\n\n----------------------------------------\n\nTITLE: Displaying Worst Sellers Data Visualization in Streamlit\nDESCRIPTION: Creating a header with formatted date and displaying the bottom ten sellers for the selected date using both a dataframe and bar chart in a two-column layout.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n    st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\")\n    bottom_ten = data.loc[selected_date].sort_values()[0:10]\n    cols = st.columns([1, 4])\n    cols[0].dataframe(bottom_ten)\n    cols[1].bar_chart(bottom_ten)\n```\n\n----------------------------------------\n\nTITLE: AppTest Initialization from File\nDESCRIPTION: Shows how to initialize a simulated Streamlit app from a file using AppTest.from_file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_161\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(\"streamlit_app.py\")\nat.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase secrets to secrets.toml\nDESCRIPTION: This TOML snippet demonstrates how to store Supabase Project URL and API key within the `.streamlit/secrets.toml` file for local Streamlit app development.  It defines a section called `connections.supabase` and assigns the Supabase URL and key to the respective variables. This ensures secure access to Supabase resources without hardcoding credentials into the application code.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/supabase.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n\"# .streamlit/secrets.toml\\n\\n[connections.supabase]\\nSUPABASE_URL = \\\"xxxx\\\"\\nSUPABASE_KEY = \\\"xxxx\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Streamlit Dialog Component Reference\nDESCRIPTION: API documentation frontmatter defining the st.dialog component, which allows creating modal overlay dialogs. Previously known as streamlit.experimental_dialog.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/dialog.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: st.dialog\nslug: /develop/api-reference/execution-flow/st.dialog\ndescription: st.dialog opens a multi-element modal overlay\nkeywords: popup, modal, overlay\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Defines the structure of the Streamlit execution model documentation using markdown and custom components like TileContainer and RefCard.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Working with Streamlit's execution model\nslug: /develop/concepts/architecture\n---\n\n# Working with Streamlit's execution model\n\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/concepts/architecture/run-your-app\">\n\n<h5>Run your app</h5>\n\nUnderstand how to start your Streamlit app.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/architecture\">\n\n<h5>Streamlit's architecture</h5>\n\nUnderstand Streamlit's client-server architecture and related considerations.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/app-chrome\">\n\n<h5>The app chrome</h5>\n\nEvery Streamlit app has a few widgets in the top right to help you as you develop your app and help your users as they view your app. This is called the app chrome.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/caching\">\n\n<h5>Caching</h5>\n\nMake your app performant by caching results to avoid unecessary recomputation with each rerun.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/session-state\">\n\n<h5>Session State</h5>\n\nManage your app's statefulness with Session State.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/forms\">\n\n<h5>Forms</h5>\n\nUse forms to isolate user input and prevent unnecessary app reruns.\n\n</RefCard>\n\n<RefCard href=\"/develop/concepts/architecture/widget-behavior\">\n\n<h5>Widget behavior</h5>\n\nUnderstand how widgets work in detail.\n\n</RefCard>\n\n</TileContainer>\n```\n\n----------------------------------------\n\nTITLE: Changing Font in Light Theme\nDESCRIPTION: Configuring a custom light theme with a different font while keeping other default settings\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/theming.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[theme]\nfont=\"serif\"\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Configuration for Streamlit App\nDESCRIPTION: Dockerfile that sets up a Python environment, installs dependencies, and configures the container for running a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/kubernetes.md#2025-04-21_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nFROM python:3.9-slim\n\nRUN groupadd --gid 1000 appuser \\\n    && useradd --uid 1000 --gid 1000 -ms /bin/bash appuser\n\nRUN pip3 install --no-cache-dir --upgrade \\\n    pip \\\n    virtualenv\n\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    software-properties-common \\\n    git\n\nUSER appuser\nWORKDIR /home/appuser\n\nRUN git clone https://github.com/streamlit/streamlit-example.git app\n\nENV VIRTUAL_ENV=/home/appuser/venv\nRUN virtualenv ${VIRTUAL_ENV}\nRUN . ${VIRTUAL_ENV}/bin/activate && pip install -r app/requirements.txt\n\nEXPOSE 8501\n\nCOPY run.sh /home/appuser\nENTRYPOINT [\"./run.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Header Usage in Streamlit Python\nDESCRIPTION: st.header() is a Streamlit function that displays text in header formatting. Headers are used to create section titles and other prominent text in Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/header.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.header()\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection in Streamlit Secrets\nDESCRIPTION: TOML configuration for setting up PostgreSQL connection details in Streamlit's secrets file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/postgresql.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/secrets.toml\n\n[connections.postgresql]\ndialect = \"postgresql\"\nhost = \"localhost\"\nport = \"5432\"\ndatabase = \"xxx\"\nusername = \"xxx\"\npassword = \"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Streamlit Experimental Data Editor Usage\nDESCRIPTION: Example of using the deprecated experimental_data_editor widget. This component allows editing of dataframes in a table-like interface but has been replaced by st.data_editor.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/experimental_data_editor.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nst.experimental_data_editor\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 with Custom Prompt in Streamlit (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to set up Auth0 authentication in Streamlit with a custom prompt parameter. It includes the redirect URI, cookie secret, client credentials, server metadata URL, and client kwargs for forcing login.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/authentication.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[auth]\nredirect_uri = \"http://localhost:8501/oauth2callback\"\ncookie_secret = \"xxx\"\n\n[auth.auth0]\nclient_id = \"xxx\"\nclient_secret = \"xxx\"\nserver_metadata_url = (\n    \"https://{account}.{region}.auth0.com/.well-known/openid-configuration\"\n)\nclient_kwargs = { \"prompt\" = \"login\" }\n```\n\n----------------------------------------\n\nTITLE: Iframe Embedding with Hide Loading Screen Option\nDESCRIPTION: This snippet demonstrates how to embed a Streamlit app without showing the loading skeleton that appears while the app is loading.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/?embed=true&embed_options=hide_loading_screen\n```\n\n----------------------------------------\n\nTITLE: Building Frontend Release for Streamlit Component\nDESCRIPTION: Commands to create a release build of the frontend code, generating the build directory with compiled frontend assets.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/publish-component.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Enabling Static File Serving in Streamlit with TOML\nDESCRIPTION: This code snippet demonstrates how to enable static file serving in a Streamlit application by setting the `enableStaticServing` option to `true` within the `[server]` section of the `.streamlit/config.toml` file. This configuration allows Streamlit to serve files from the `./static/` directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/static-file-serving.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n\n# .streamlit/config.toml\n\n[server]\nenableStaticServing = true\n\n```\n\n----------------------------------------\n\nTITLE: Importing DateColumn Configuration in Streamlit\nDESCRIPTION: Example of importing and using the DateColumn configuration class from Streamlit's column_config module. This class allows customization of how date values are displayed in data tables and other data displays.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/datecolumn.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstreamlit.column_config.DateColumn\n```\n\n----------------------------------------\n\nTITLE: Displaying naive datetime object in Streamlit\nDESCRIPTION: This snippet demonstrates how Streamlit displays a datetime object without timezone information. The output shown to the user will be exactly as defined in the backend, without any timezone conversion.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/timezone-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom datetime import datetime\n\nst.write(datetime(2020, 1, 10, 10, 30))\n# Outputs: 2020-01-10 10:30:00\n```\n\n----------------------------------------\n\nTITLE: Example of Automatically Generated Streamlit App URL\nDESCRIPTION: This code snippet provides an example of an automatically generated URL for a Streamlit app deployed from the 'streamlit' organization, with the repository name 'demo-self-driving' and the app file 'streamlit_app.py' in the root directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/deploy-your-app/deploy.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://streamlit-demo-self-driving-streamlit-app-8jya0g.streamlit.app\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Analytics\nDESCRIPTION: Example of implementing analytics tracking in a Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_169\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit_analytics\n\nwith streamlit_analytics.track():\n    st.text_input(\"Write something\")\n```\n\n----------------------------------------\n\nTITLE: Building the App's Sidebar Functionality\nDESCRIPTION: Defines how to call both fragments within the sidebar of the app layout, ensuring proper functionality by using st.empty() containers to manage fragment outputs.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/create-a-multiple-container-fragment.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith st.sidebar:\n    herd_black_cats(grid[0].empty(), grid[2].empty(), grid[4].empty())\n    herd_orange_cats(grid[1].empty(), grid[3].empty(), grid[5].empty())\n    st.button(\"Herd all the cats\")\n```\n\n----------------------------------------\n\nTITLE: Reading Secrets Configuration - TOML\nDESCRIPTION: Sample reference to a secrets.toml file used for storing sensitive credentials and configuration values. This file should be stored locally in .streamlit/secrets.toml and never committed to version control.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/deploy-your-app/secrets-management.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsecrets.toml\n```\n\n----------------------------------------\n\nTITLE: First App Page in Python with Streamlit\nDESCRIPTION: This code represents the first page of a multipage Streamlit app, enabling interaction through a text input and a button, which modifies the session state.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/beyond-the-basics.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"first.py\"\"\"\nimport streamlit as st\n\nst.session_state.magic_word = st.session_state.get(\"magic_word\", \"Streamlit\")\n\nnew_word = st.text_input(\"Magic word:\")\n\nif st.button(\"Set the magic word\"):\n    st.session_state.magic_word = new_word\n```\n\n----------------------------------------\n\nTITLE: Initializing Session State for Date Tracking in Streamlit\nDESCRIPTION: Checking if a previous_date value exists in session state and initializing it if not. This is used to track date changes between interactions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    if \"previous_date\" not in st.session_state:\n        st.session_state.previous_date = selected_date\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements for Snowflake Integration\nDESCRIPTION: List of required Python packages for connecting Streamlit with Snowflake, specifying minimum versions for compatibility\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/snowflake.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nstreamlit>=1.28\nsnowflake-snowpark-python>=0.9.0\nsnowflake-connector-python>=2.8.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unserializable Data in Streamlit Session State\nDESCRIPTION: This Python code snippet demonstrates an attempt to add unserializable data (a lambda function) to Streamlit's session state. When 'enforceSerializableSessionState' is enabled, this code will raise an exception.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/serializable-session-state.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef unserializable_data():\n\t\treturn lambda x: x\n\n#👇 results in an exception when enforceSerializableSessionState is on\nst.session_state.unserializable = unserializable_data()\n```\n\n----------------------------------------\n\nTITLE: Basic Two-Page Streamlit App Structure\nDESCRIPTION: Shows the directory structure and basic implementation of a two-page Streamlit app using st.Page and st.navigation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page-and-navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nyour-repository/\n├── page_1.py\n├── page_2.py\n└── streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation with Hello World Image\nDESCRIPTION: This command runs the 'hello-world' Docker image to verify that Docker Engine is installed correctly on the system.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Triggering GitHub Actions Workflow\nDESCRIPTION: This code snippet configures the workflow to be triggered by push and pull request events on the 'main' branch. It helps automate testing in response to these events.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/automate-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches: [\"main\"]\n  pull_request:\n    branches: [\"main\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Class in Separate Module\nDESCRIPTION: Example of proper class definition in a separate module to prevent redefinition issues.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/custom-classes.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# my_class.py\nclass MyClass:\n    def __init__(self, var1, var2):\n        self.var1 = var1\n        self.var2 = var2\n```\n\nLANGUAGE: python\nCODE:\n```\n# app.py\nimport streamlit as st\nfrom my_class import MyClass # MyClass doesn't get redefined with each rerun\n\nif \"my_instance\" not in st.session_state:\n  st.session_state.my_instance = MyClass(\"foo\", \"bar\")\n\n# Displays True on every rerun\nst.write(isinstance(st.session_state.my_instance, MyClass))\n\nst.button(\"Rerun\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Dark Theme with Custom Primary Color\nDESCRIPTION: Example of creating a custom dark theme by inheriting from the base dark theme and modifying the primary color\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/theming.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[theme]\nbase=\"dark\"\nprimaryColor=\"purple\"\n```\n\n----------------------------------------\n\nTITLE: Testing Streamlit Data Visualization Functions\nDESCRIPTION: Example code to test the show_daily_sales function by getting data and calling the function. This is meant to be temporary testing code that can be deleted later.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndata = get_data()\nshow_daily_sales(data)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Canvas with streamlit-drawable-canvas Component\nDESCRIPTION: Use the st_canvas component to provide a drawing canvas in Streamlit apps using Fabric.js, supporting various drawing modes and customization options.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nst_canvas(fill_color=\"rgba(255, 165, 0, 0.3)\", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key=\"canvas\",)\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Column in Streamlit\nDESCRIPTION: This example shows how to create a time column with a minimum allowed time and custom time formatting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nTimeColumn(\"Appointment\", min_value=time(8, 0, 0), format=\"hh:mm a\")\n```\n\n----------------------------------------\n\nTITLE: Data Update and Trimming\nDESCRIPTION: Updates session state data by concatenating new data and maintaining a rolling window of 100 timestamps\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nst.session_state.data = pd.concat(\n    [st.session_state.data, get_recent_data(last_timestamp)]\n)\nst.session_state.data = st.session_state.data[-100:]\n```\n\n----------------------------------------\n\nTITLE: Implementing WebRTC in Streamlit\nDESCRIPTION: Shows how to handle and transmit real-time video/audio streams in Streamlit using the streamlit-webrtc component created by @whitphx.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/media/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=\"sample\")\n```\n\n----------------------------------------\n\nTITLE: Managing Secrets Configuration\nDESCRIPTION: Configuration for handling secrets in Streamlit applications, specifying file locations for TOML and Kubernetes-style secrets storage.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[secrets]\nfiles = [ \"~/.streamlit/secrets.toml\", \"~/project directory/.streamlit/secrets.toml\",]\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for Black and Orange Cats\nDESCRIPTION: These functions display two types of cats while simulating processing delay using time.sleep(), which allows visualization of the fragment's effect.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/create-a-multiple-container-fragment.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef black_cats():\n    time.sleep(1)\n    st.title(\"🐈‍⬛ 🐈‍⬛\")\n    st.markdown(\"🐾 🐾 🐾 🐾\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndef orange_cats():\n    time.sleep(1)\n    st.title(\"🐈 🐈\")\n    st.markdown(\"🐾 🐾 🐾 🐾\")\n```\n\n----------------------------------------\n\nTITLE: Adding Text to Progress Bars with st.progress in Streamlit 1.18.0\nDESCRIPTION: The st.progress function supports adding a message to display above the progress bar using the text parameter.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2023.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.progress(value, text=\"Loading data...\")\n```\n\n----------------------------------------\n\nTITLE: Checking Streamlit Process on Mac/Linux\nDESCRIPTION: Command to check if the Streamlit server process is running on Mac or Linux systems using the ps command.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/sanity-checks.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nps -Al | grep streamlit\n```\n\n----------------------------------------\n\nTITLE: Initializing Session State for User Role\nDESCRIPTION: Initialize the session state to track user authentication status and manage role-based access to app pages\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/dynamic-navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif \"role\" not in st.session_state:\n    st.session_state.role = None\n\nROLES = [None, \"Requester\", \"Responder\", \"Admin\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment with GitHub Actions\nDESCRIPTION: This snippet describes the setup steps for a job in the workflow, which consists of running on the latest Ubuntu, checking out the code, and installing a specific Python version. The dependencies include GitHub Actions for checkout (v4) and setup-python (v5).\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/automate-tests.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  streamlit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n```\n\n----------------------------------------\n\nTITLE: Running the Streamlit App Locally\nDESCRIPTION: Use this Bash command in the terminal to start the Streamlit application locally. This command launches the app and allows you to interact with it from a web browser.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/llm-quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Caching List with st.cache_resource (Concurrency Example)\nDESCRIPTION: This example demonstrates how `st.cache_resource` can lead to unexpected behavior when caching a list and mutating it due to concurrency issues. Because `st.cache_resource` does not create a copy, multiple users accessing the app concurrently can modify the same list object in the cache, resulting in different values for each user. This highlights the importance of avoiding mutations when using `st.cache_resource`, especially in multi-user scenarios. This example will not run without streamlit installed and imported as st.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n@st.cache_resource\ndef create_list():\n    l = [1, 2, 3]\n    return l\n\nl = create_list()\nfirst_list_value = l[0]\nl[0] = first_list_value + 1\n\nst.write(\"l[0] is:\", l[0])\n```\n\n----------------------------------------\n\nTITLE: Basic Streamlit App with Standard Imports\nDESCRIPTION: A simple Streamlit application that imports commonly used libraries including Streamlit, Pandas, NumPy, and built-in Python libraries math and random. This example demonstrates which imports are already available through Streamlit's dependencies.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/deploy-your-app/app-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport math\nimport random\n\nst.write(\"Hi!\")\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository in Docker\nDESCRIPTION: Clones the Streamlit application code from a public GitHub repository.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\nRUN git clone https://github.com/streamlit/streamlit-example.git .\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection Secrets (TOML)\nDESCRIPTION: TOML configuration for storing MongoDB connection details in a local secrets file. Includes host, port, username, and password.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mongodb.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/secrets.toml\n\n[mongo]\nhost = \"localhost\"\nport = 27017\nusername = \"xxx\"\npassword = \"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Map Visualization with Random Coordinates\nDESCRIPTION: Shows how to plot random data points on a map using st.map() around San Francisco coordinates\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\\nimport numpy as np\\nimport pandas as pd\\n\\nmap_data = pd.DataFrame(\\n    np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4],\\n    columns=['lat', 'lon'])\\n\\nst.map(map_data)\n```\n\n----------------------------------------\n\nTITLE: Initializing Client Configuration in Streamlit with TOML\nDESCRIPTION: This code snippet modifies the Streamlit client configuration to hide the default sidebar navigation by setting `showSidebarNavigation` to false. This setup is necessary to implement custom navigation within the app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/multipage-apps/custom-navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[client]\nshowSidebarNavigation = false\n```\n\n----------------------------------------\n\nTITLE: Opening Streamlit Documentation via CLI\nDESCRIPTION: This command opens the Streamlit documentation in the user's default web browser. It provides quick access to the official Streamlit documentation for reference and learning purposes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/docs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit docs\n```\n\n----------------------------------------\n\nTITLE: Logging Out Users in Streamlit\nDESCRIPTION: Removes a user's identity information using st.logout(). This is used to log out authenticated users from a Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_125\n\nLANGUAGE: python\nCODE:\n```\nst.logout()\n```\n\n----------------------------------------\n\nTITLE: Handling Plotly Events in Streamlit\nDESCRIPTION: Creates interactive Plotly charts with event handling capabilities.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_plotly_events import plotly_events\nfig = px.line(x=[1], y=[1])\n\nselected_points = plotly_events(fig)\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit with Command Line Flags\nDESCRIPTION: This snippet provides an example of how to run a Streamlit application with command line flags to specify the server port at runtime. This method allows for immediate configuration without modifying any configuration files.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/options.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_script.py --server.port 80\n```\n\n----------------------------------------\n\nTITLE: Custom Equality Comparison for Dataclass\nDESCRIPTION: Implementation of custom equality comparison for dataclasses to compare internal values instead of class identity.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/custom-classes.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom dataclasses import dataclass\n\n@dataclass\nclass MyDataclass:\n    var1: int\n    var2: float\n\n    def __eq__(self, other):\n        # An instance of MyDataclass is equal to another object if the object\n        # contains the same fields with the same values\n        return (self.var1, self.var2) == (other.var1, other.var2)\n\nif \"my_dataclass\" not in st.session_state:\n    st.session_state.my_dataclass = MyDataclass(1, 5.5)\n\n# Displays True on every rerun\nst.session_state.my_dataclass == MyDataclass(1, 5.5)\n\nst.button(\"Rerun\")\n```\n\n----------------------------------------\n\nTITLE: Initialize Session State for Streaming Toggle in Streamlit\nDESCRIPTION: Initializes the 'stream' key in Streamlit's session state to control whether streaming is active. It defaults to False. A callback function `toggle_streaming` toggles the value of `st.session_state.stream` between True and False.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"if \\\"stream\\\" not in st.session_state:\n    st.session_state.stream = False\n\n\ndef toggle_streaming():\n    st.session_state.stream = not st.session_state.stream\"\n```\n\n----------------------------------------\n\nTITLE: Server Configuration Options in TOML\nDESCRIPTION: Server-side settings for Streamlit, including file watching, security options, and network configurations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[server]\n\n# List of folders that should not be watched for changes.\n# Relative paths will be taken as relative to the current working directory.\n# Example: ['/home/user1/env', 'relative/path/to/folder']\n# Default: []\nfolderWatchBlacklist = []\n\n# Change the type of file watcher used by Streamlit, or turn it off\n# completely.\n# Allowed values:\n# - \"auto\"     : Streamlit will attempt to use the watchdog module, and\n#                falls back to polling if watchdog is not available.\n# - \"watchdog\" : Force Streamlit to use the watchdog module.\n# - \"poll\"     : Force Streamlit to always use polling.\n# - \"none\"     : Streamlit will not watch files.\n# Default: \"auto\"\nfileWatcherType = \"auto\"\n\n# Symmetric key used to produce signed cookies. If deploying on multiple\n# replicas, this should be set to the same value across all replicas to ensure\n# they all share the same secret.\n# Default: randomly generated secret key.\ncookieSecret = \"a-random-key-appears-here\"\n\n# If false, will attempt to open a browser window on start.\n# Default: false unless (1) we are on a Linux box where DISPLAY is unset, or\n# (2) we are running in the Streamlit Atom plugin.\nheadless = false\n\n# Automatically rerun script when the file is modified on disk.\n# Default: false\nrunOnSave = false\n\n# The address where the server will listen for client and browser\n# connections. Use this if you want to bind the server to a specific address.\n# If set, the server will only be accessible from this address, and not from\n# any aliases (like localhost).\n# Default: (unset)\naddress =\n\n# The port where the server will listen for browser connections.\n# Don't use port 3000 which is reserved for internal development.\n# Default: 8501\nport = 8501\n\n# The base path for the URL where Streamlit should be served from.\n# Default: \"\"\nbaseUrlPath = \"\"\n\n# Enables support for Cross-Origin Resource Sharing (CORS) protection,\n# for added security.\n# If XSRF protection is enabled and CORS protection is disabled at the\n# same time, Streamlit will enable them both instead.\n# Default: true\nenableCORS = true\n\n# Enables support for Cross-Site Request Forgery (XSRF) protection, for\n# added security.\n# If XSRF protection is enabled and CORS protection is disabled at the\n# same time, Streamlit will enable them both instead.\n# Default: true\nenableXsrfProtection = true\n\n# Max size, in megabytes, for files uploaded with the file_uploader.\n# Default: 200\nmaxUploadSize = 200\n\n# Max size, in megabytes, of messages that can be sent via the WebSocket\n# connection.\n# Default: 200\nmaxMessageSize = 200\n\n# Enables support for websocket compression.\n# Default: false\nenableWebsocketCompression = false\n\n# Enable serving files from a `static` directory in the running app's\n# directory.\n# Default: false\nenableStaticServing = false\n\n# TTL in seconds for sessions whose websockets have been disconnected. The server\n# may choose to clean up session state, uploaded files, etc for a given session\n# with no active websocket connection at any point after this time has passed.\n# Default: 120\ndisconnectedSessionTTL = 120\n\n# Server certificate file for connecting via HTTPS.\n# Must be set at the same time as \"server.sslKeyFile\".\n# ['DO NOT USE THIS OPTION IN A PRODUCTION ENVIRONMENT. It has not gone through\n# security audits or performance tests. For the production environment, we\n# recommend performing SSL termination by the load balancer or the reverse\n# proxy.']\nsslCertFile =\n\n# Cryptographic key file for connecting via HTTPS.\n# Must be set at the same time as \"server.sslCertFile\".\n```\n\n----------------------------------------\n\nTITLE: Disabling Websocket Compression in Streamlit\nDESCRIPTION: Command to start Streamlit with websocket compression disabled to resolve loading issues related to header stripping.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/remote-start.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run my_app.py --server.enableWebsocketCompression=false\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App\nDESCRIPTION: This bash command is used to start the Streamlit application. It assumes that the `app.py` file is in the current directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"streamlit run app.py\"\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Themeing\nDESCRIPTION: Demonstrates how to use CSS variables to apply theme colors in your component. These variables correspond to the theme object properties passed from Streamlit.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/components-api.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.mySelector {\n  color: var(--text-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Streamlit Version in Python\nDESCRIPTION: Python script to verify the Streamlit version within your app code, useful for troubleshooting environment issues.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/sanity-checks.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nst.write(st.__version__)\n```\n\n----------------------------------------\n\nTITLE: Structuring Streamlit Tutorial References in Markdown\nDESCRIPTION: This markdown snippet defines a structure for presenting Streamlit tutorials using a tile container layout and reference cards. Each card links to a specific tutorial topic with a brief description.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<TileContainer layout=\"list\">\n\n<RefCard href=\"/develop/tutorials/execution-flow\">\n\n<h5>Use core features to work with Streamlit's execution model</h5>\n\nBuild simple apps and walk through examples to learn about Streamlit's core features and execution model.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/databases\">\n\n<h5>Connect to data sources</h5>\n\nConnect to popular datasources.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/multipage\">\n\n<h5>Create multipage apps</h5>\n\nCreate multipage apps, navigation, and flows.\n\n</RefCard>\n\n<RefCard href=\"/develop/tutorials/llms\">\n\n<h5>Chat apps and LLMs</h5>\n\nWork with LLMs and create chat apps.\n\n</RefCard>\n\n</TileContainer>\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Hello Command\nDESCRIPTION: The basic syntax for running the Streamlit Hello app. This command verifies that Streamlit is installed correctly by running an example app included in the Streamlit library.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/hello.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit hello\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Application\nDESCRIPTION: This Bash command runs the Streamlit application on a local server, allowing for live updates and debugging.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/microsoft.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Page Title in Streamlit\nDESCRIPTION: Example of how to set a custom page title for a Streamlit app using st.set_page_config to improve SEO and search visibility.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/indexability.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.set_page_config(page_title=\"Traingenerator\")\n```\n\n----------------------------------------\n\nTITLE: Toggle Raw Data Display\nDESCRIPTION: Implements a checkbox to show/hide the raw data table using Streamlit's checkbox widget.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nif st.checkbox('Show raw data'):\n    st.subheader('Raw data')\n    st.write(data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Streamlit Secrets for MySQL Connection\nDESCRIPTION: TOML configuration for storing MySQL connection details in Streamlit secrets. This includes database name, user, password, and other connection parameters. The file should be placed in .streamlit/secrets.toml.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mysql.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/secrets.toml\n\n[connections.mysql]\ndialect = \"mysql\"\nhost = \"localhost\"\nport = 3306\ndatabase = \"xxx\"\nusername = \"xxx\"\npassword = \"xxx\"\nquery = { charset = \"xxx\" }\n```\n\n----------------------------------------\n\nTITLE: Enabling Mutable Feedback in Streamlit Chat Interface\nDESCRIPTION: This diff snippet shows how to allow users to change their feedback responses by removing the 'disabled' parameter from the feedback widget configuration. This modification enables more flexible user interaction.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nfor i, message in enumerate(st.session_state.history):\n    with st.chat_message(message[\"role\"]):\n        st.write(message[\"content\"])\n        if message[\"role\"] == \"assistant\":\n            feedback = message.get(\"feedback\", None)\n            st.session_state[f\"feedback_{i}\"] = feedback\n            st.feedback(\n                \"thumbs\",\n                key=f\"feedback_{i}\",\n-                 disabled=feedback is not None,\n                on_change=save_feedback,\n                args=[i],\n            )\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Settings in TOML\nDESCRIPTION: This TOML snippet demonstrates configuring authentication details such as redirect URI, client ID, and secrets for Microsoft Entra OAuth. It is crucial to ensure these settings are correct for successful authentication. Replace placeholders with actual values obtained from your Azure account.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/microsoft.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[auth]\nredirect_uri = \"http://localhost:8501/oauth2callback\"\ncookie_secret = \"xxx\"\nclient_id = \"xxx\"\nclient_secret = \"xxx\"\nserver_metadata_url = \"https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration\"\n```\n\n----------------------------------------\n\nTITLE: Iframe Embedding with Show Toolbar Option\nDESCRIPTION: This snippet demonstrates how to embed a Streamlit app while showing the toolbar that includes the app menu, running man, and GitHub link using the embed_options parameter.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/?embed=true&embed_options=show_toolbar\n```\n\n----------------------------------------\n\nTITLE: Creating Secrets File for Streamlit\nDESCRIPTION: Demonstrates the format for a secrets.toml file, which is used to store secrets in a per-project or per-profile configuration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_149\n\nLANGUAGE: python\nCODE:\n```\nOpenAI_key = \"<YOUR_SECRET_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graphs with Streamlit Agraph\nDESCRIPTION: This snippet demonstrates how to render graphs using the Streamlit Agraph library. It requires nodes and edges data as input.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 'Hello World' Streamlit App in Snowflake\nDESCRIPTION: A minimal Streamlit application that displays 'Hello World' using st.write(). This represents the simplest possible Streamlit application that can be deployed in Snowflake.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/sis.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.write(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Importing AgGrid Component\nDESCRIPTION: Example showing how to import the AgGrid component into a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom st_aggrid import AgGrid\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Options in Streamlit\nDESCRIPTION: Shows how to set a single configuration option programmatically. This functionality is limited to certain options like deprecation warnings.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_158\n\nLANGUAGE: python\nCODE:\n```\nst.set_option(\"deprecation.showPyplotGlobalUse\", False)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials for Streamlit\nDESCRIPTION: This snippet shows how to define AWS credentials and configuration in a TOML file for use by Streamlit applications. It specifies where to store AWS access keys and region information. Ensure to replace placeholders with actual credentials and secure the file by adding it to .gitignore.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/aws-s3.md#2025-04-21_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n# .streamlit/secrets.toml\nAWS_ACCESS_KEY_ID = \"xxx\"\nAWS_SECRET_ACCESS_KEY = \"xxx\"\nAWS_DEFAULT_REGION = \"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Folder with Pipenv\nDESCRIPTION: Command to change directory to your project folder before activating the Pipenv environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/upgrade-version-streamlit.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd myproject\n```\n\n----------------------------------------\n\nTITLE: Implementing Rewrite Button\nDESCRIPTION: Creates a tertiary button for requesting a response rewrite.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nif cols[2].button(\"Rewrite answer\", type=\"tertiary\"):\n```\n\n----------------------------------------\n\nTITLE: Running pytest\nDESCRIPTION: This command executes pytest in the current directory, which will discover and run all files matching the `test_<name>.py` or `<name>_test.py` naming convention.  The tests will execute and provide feedback in the terminal.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"pytest\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Streamlit with Pipenv Shell\nDESCRIPTION: Commands to activate a Pipenv environment, upgrade Streamlit to the latest version, and verify the installation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/upgrade-version-streamlit.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npipenv shell\npip install --upgrade streamlit\nstreamlit version\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from GitHub with Commit Hash\nDESCRIPTION: This snippet shows how to install a specific commit of a GitHub repository by specifying the commit hash after the @ symbol in the repository URL in your requirements.txt file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/install-package-pypi-github.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit+https://github.com/SomePackage.git@eb40b4ff6f7c5c1e4366cgfg0671291bge918#egg=SomePackage\n```\n\n----------------------------------------\n\nTITLE: Clearing Streamlit Cache via CLI Command\nDESCRIPTION: This command clears persisted files from the on-disk Streamlit cache. It is used to remove cached data, which can be helpful for troubleshooting or ensuring fresh data is loaded.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/cache.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit cache clear\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Streamlit\nDESCRIPTION: This bash snippet illustrates how to set environment variables for the Streamlit server, particularly the server port and cookie secret. These variables can be used to override settings defined in the configuration file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/options.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport STREAMLIT_SERVER_PORT=80\\nexport STREAMLIT_SERVER_COOKIE_SECRET=dontforgottochangeme\n```\n\n----------------------------------------\n\nTITLE: Iframe Embedding with Dark Theme Option\nDESCRIPTION: This snippet shows how to embed a Streamlit app with the dark theme applied by default.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/?embed=true&embed_options=dark_theme\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries in Streamlit\nDESCRIPTION: Imports necessary Python libraries for creating the Streamlit app. Includes streamlit for UI, pandas for data manipulation, numpy for numerical operations, and datetime for handling timestamps.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"import streamlit as st\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\"\n```\n\n----------------------------------------\n\nTITLE: Installing SQLAlchemy Dependency\nDESCRIPTION: Command to install the required SQLAlchemy library version 1.4.0 for SQL connections in Streamlit\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/connecting-to-data.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install SQLAlchemy==1.4.0\n```\n\n----------------------------------------\n\nTITLE: Sample Streamlit Application\nDESCRIPTION: Example Streamlit application that creates an interactive spiral visualization.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import namedtuple\nimport altair as alt\nimport math\nimport pandas as pd\nimport streamlit as st\n\n\"\"\"\n# Welcome to Streamlit!\n\nEdit `/streamlit_app.py` to customize this app to your heart's desire :heart:\n\nIf you have any questions, checkout our [documentation](https://docs.streamlit.io) and [community\nforums](https://discuss.streamlit.io).\n\nIn the meantime, below is an example of what you can do with just a few lines of code:\n\"\"\"\n\nwith st.echo(code_location='below'):\n   total_points = st.slider(\"Number of points in spiral\", 1, 5000, 2000)\n   num_turns = st.slider(\"Number of turns in spiral\", 1, 100, 9)\n\n   Point = namedtuple('Point', 'x y')\n   data = []\n\n   points_per_turn = total_points / num_turns\n\n   for curr_point_num in range(total_points):\n      curr_turn, i = divmod(curr_point_num, points_per_turn)\n      angle = (curr_turn + 1) * 2 * math.pi * i / points_per_turn\n      radius = curr_point_num / total_points\n      x = radius * math.cos(angle)\n      y = radius * math.sin(angle)\n      data.append(Point(x, y))\n\n   st.altair_chart(alt.Chart(pd.DataFrame(data), height=500, width=500)\n      .mark_circle(color='#0068c9', opacity=0.5)\n      .encode(x='x:Q', y='y:Q'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets for Tableau Connection in Streamlit - TOML\nDESCRIPTION: This TOML configuration snippet sets up necessary secrets for connecting a Streamlit app to a Tableau server. It configures the access token and server details required for authentication. Ensure the file is properly secured and not committed to version control.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tableau.md#2025-04-21_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n# .streamlit/secrets.toml\n\n[tableau]\ntoken_name = \"xxx\"\ntoken_secret = \"xxx\"\nserver_url = \"https://abc01.online.tableau.com/\"\nsite_id = \"streamlitexample\"  # in your site's URL behind the server_url\n\n```\n\n----------------------------------------\n\nTITLE: Testing Block Elements\nDESCRIPTION: Example of testing container elements like sidebar using Block class\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/testing/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# at.sidebar returns a Block\nat.sidebar.button[0].click().run()\nassert not at.exception\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Input with streamlit-tags Component\nDESCRIPTION: Use the st_tags component to add interactive tag input to Streamlit apps, supporting suggestions, maximum tag limits, and default values.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nst_tags(label='# Enter Keywords:', text='Press enter to add more', value=['Zero', 'One', 'Two'], suggestions=['five', 'six', 'seven', 'eight', 'nine', 'three', 'eleven', 'ten', 'four'], maxtags = 4, key='1')\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Streamlit Hello World App in Python\nDESCRIPTION: Simple Streamlit application demonstrating basic text display using st.write() method\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/anaconda-distribution.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\\n\\nst.write(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Iframe Embedding with Show Padding Option\nDESCRIPTION: This snippet shows how to embed a Streamlit app with padding displayed at the top and bottom using the embed_options parameter.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/?embed=true&embed_options=show_padding\n```\n\n----------------------------------------\n\nTITLE: Secrets.toml File Example for Database Connection\nDESCRIPTION: This code snippet illustrates the structure of a `secrets.toml` file used with Streamlit for managing database connection details. The file stores the database type, dialect, username, password, host, port, and database name. This file is typically stored in the `.streamlit` directory and should be gitignored to prevent exposing sensitive information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/advanced-concepts.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[connections.my_database]\n    type=\"sql\"\n    dialect=\"mysql\"\n    username=\"xxx\"\n    password=\"xxx\"\n    host=\"example.com\" # IP or URL\n    port=3306 # Port number\n    database=\"mydb\" # Database name\n```\n\n----------------------------------------\n\nTITLE: Implementing Accept Button\nDESCRIPTION: Creates a button for accepting the current response.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nif cols[1].button(\"Accept\"):\n```\n\n----------------------------------------\n\nTITLE: Add Google Sheet URL to Streamlit Secrets (TOML)\nDESCRIPTION: This snippet shows how to store the Google Sheet URL in the `.streamlit/secrets.toml` file.  This file is used by Streamlit to securely manage secrets and configuration settings. The `spreadsheet` key is used to specify the URL of the public Google Sheet.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/public-gsheet.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n\n# .streamlit/secrets.toml\n[connections.gsheets]\nspreadsheet = \"https://docs.google.com/spreadsheets/d/xxxxxxx/edit#gid=0\"\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Streamlit Documentation\nDESCRIPTION: This code snippet defines the required Python packages and their versions for the Streamlit documentation project. It includes Streamlit version 1.44.0 or higher, vega_datasets (no specific version), Altair version 4.2.0, and Plotly version 5.13.0.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/theming/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit>=1.44.0\nvega_datasets\naltair==4.2.0\nplotly==5.13.0\n```\n\n----------------------------------------\n\nTITLE: Defining a GitHub Actions Workflow for Streamlit\nDESCRIPTION: This snippet defines a GitHub Actions workflow in YAML format to automate the testing of Streamlit apps. The workflow is triggered on pushes and pull requests targeting the 'main' branch and includes steps for checking out code, setting up Python, and using the Streamlit App Action. It specifies Python version 3.11 as a prerequisite.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/automate-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/streamlit-app.yml\nname: Streamlit app\n\non:\n  push:\n    branches: [\"main\"]\n  pull_request:\n    branches: [\"main\"]\n\npermissions:\n  contents: read\n\njobs:\n  streamlit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n      - uses: streamlit/streamlit-app-action@v0.0.3\n        with:\n          app-path: streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory in Docker\nDESCRIPTION: Sets the working directory for subsequent Docker commands to /app to avoid root directory restrictions in Streamlit 1.10.0+.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nWORKDIR /app\n```\n\n----------------------------------------\n\nTITLE: Activating Conda Environment for Streamlit\nDESCRIPTION: Command to activate the Conda environment where Streamlit is installed, requiring replacement of the environment name variable.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/upgrade-version-streamlit.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda activate $ENVIRONMENT_NAME\n```\n\n----------------------------------------\n\nTITLE: Displaying Unique Subdomain Structure for Streamlit Apps\nDESCRIPTION: This code snippet shows the structure of the automatically generated subdomain for Streamlit apps deployed on Community Cloud. It includes components such as GitHub username/organization, repository name, app path, branch name, and a random hash.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/deploy-your-app/deploy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://[GitHub username or organization]-[repo name]-[app path]-[branch name]-[short hash].streamlit.app\n```\n\n----------------------------------------\n\nTITLE: Using st.experimental_set_query_params in Streamlit (Deprecated)\nDESCRIPTION: This function sets query parameters shown in the browser's URL bar. It has been deprecated in Streamlit version 1.30.0, and developers should use st.query_params instead.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/experimental_set_query_params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.experimental_set_query_params\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Column in Streamlit\nDESCRIPTION: This snippet demonstrates how to set up a JSON column with a specified width for better display of structured data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/_index.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nJSONColumn(\"Properties\", width=\"medium\")\n```\n\n----------------------------------------\n\nTITLE: Handling Accept Action\nDESCRIPTION: Updates chat history and clears temporary state when response is accepted.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nst.session_state.history.append(\n    {\"role\": \"assistant\", \"content\": st.session_state.pending}\n)\nst.session_state.pending = None\nst.session_state.validation = {}\n```\n\n----------------------------------------\n\nTITLE: Installing Streamlit via pip\nDESCRIPTION: Install Streamlit using pip package manager. This is the standard method for installing Streamlit in a Python environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install streamlit\n```\n\n----------------------------------------\n\nTITLE: Creating the Annotation Layer\nDESCRIPTION: Constructs an Altair chart layer that represents annotations with markers and tooltips, positioning them based on the defined annotation data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/charts/annotate-altair-chart.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nannotation_layer = (\n    alt.Chart(annotations_df)\n    .mark_text(size=20, dx=-10, dy=0, align=\"left\")\n    .encode(x=\"date:T\", y=alt.Y(\"price:Q\"), text=\"marker\", tooltip=\"description\")\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Streamlit Version Requirement\nDESCRIPTION: Defines the minimum required version of Streamlit (1.44.0 or higher) needed to run the project. Uses standard pip requirements.txt format.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/widget.page_link/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table in TiDB SQL\nDESCRIPTION: This SQL snippet creates a new database named 'pets' and initializes a table 'mytable' with two columns for storing pet names and their types. It also adds some initial records into the table.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tidb.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE pets;\n\nUSE pets;\n\nCREATE TABLE mytable (\n    name            varchar(80),\n    pet             varchar(80)\n);\n\nINSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\n```\n\n----------------------------------------\n\nTITLE: Displaying Chat Message with Highlights\nDESCRIPTION: Renders the highlighted response in a chat message container with a divider.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith st.chat_message(\"assistant\"):\n    st.markdown(\" \".join(highlighted_sentences))\n    st.divider()\n```\n\n----------------------------------------\n\nTITLE: Configuring Neon Connection in Streamlit Secrets\nDESCRIPTION: TOML configuration for adding the Neon database connection string to the Streamlit app's secrets file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/neon.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/secrets.toml\n\n[connections.neon]\nurl=\"postgresql://neondb_owner:xxxxxxxxxxxx@ep-adjective-noun-xxxxxxxx.us-east-2.aws.neon.tech/neondb?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Retaining State When Changing Widget Parameters in Streamlit\nDESCRIPTION: This code illustrates how to retain widget state when changing widget parameters (min/max values of a slider) in Streamlit. The `update_value` function enforces consistency between widget parameters and its value, and importantly, interrupts the widget clean-up process by reassigning the session state value, thus retaining the widget's value.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/widget-behavior.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\n# Set default value\nif \"a\" not in st.session_state:\n    st.session_state.a = 5\n\ncols = st.columns(2)\nminimum = cols[0].number_input(\"Min\", 1, 5, key=\"min\")\nmaximum = cols[1].number_input(\"Max\", 6, 10, 10, key=\"max\")\n\n\ndef update_value():\n    # Helper function to ensure consistency between widget parameters and value\n    st.session_state.a = min(st.session_state.a, maximum)\n    st.session_state.a = max(st.session_state.a, minimum)\n\n\n# Validate the slider value before rendering\nupdate_value()\nst.slider(\"A\", minimum, maximum, key=\"a\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Disabled Chat Input\nDESCRIPTION: Shows a disabled chat input with instruction text for user clarity during validation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nst.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Streamlit App Configuration\nDESCRIPTION: Sets up the Streamlit app's page layout and title. This function defines the visual layout of the app and provides a title for the dashboard, ensuring a proper configuration for user interaction.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nst.set_page_config(layout=\"wide\")\n\nst.title(\"Daily vs monthly sales, by product\")\nst.markdown(\"This app shows the 2023 daily sales for Widget A through Widget Z.\")\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for App Deletion Process\nDESCRIPTION: Comprehensive markdown documentation that outlines the process and scenarios for deleting Streamlit applications from both the workspace and Cloud logs interfaces. Includes information about subdomain reuse and data deletion policies.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/manage-your-app/delete-your-app.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Delete your app\n\nIf you need to delete your app, it's simple and easy. There are several cases where you may need to delete your app:\n\n- You have finished playing around with an example app.\n- You want to deploy from a private repository but already have a private app.\n- You want to [change the Python version](/deploy/streamlit-community-cloud/manage-your-app/upgrade-python) for your app.\n- You want to [rename your repository](/deploy/streamlit-community-cloud/manage-your-app/rename-your-app) or move your entrypoint file.\n```\n\n----------------------------------------\n\nTITLE: Adding Header for Daily Activity Comparison in Streamlit\nDESCRIPTION: Creates a header element in the Streamlit app to label the daily activity comparison chart section.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n    st.header(\"Daily activity comparison\")\n```\n\n----------------------------------------\n\nTITLE: Installing Streamlit via pip in Conda Environment\nDESCRIPTION: Command to install Streamlit package using pip within a Conda environment\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/anaconda-distribution.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install streamlit\n```\n\n----------------------------------------\n\nTITLE: Validating Streamlit Installation with Hello App\nDESCRIPTION: Run Streamlit's built-in Hello application to verify the installation was successful. This command launches a demo app in your browser.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit hello\n```\n\n----------------------------------------\n\nTITLE: Including OpenCV Headless in Requirements for Streamlit\nDESCRIPTION: This snippet provides a solution for using `opencv-python-headless` in place of `opencv_contrib_python` and `opencv-python` to avoid the ImportError in your Streamlit app. Ensure this is added to your requirements file if you do not need GUI features.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/libgl.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"opencv-python-headless\"\n```\n\n----------------------------------------\n\nTITLE: Static File Serving Setup Bash\nDESCRIPTION: This code snippet describes the structure required for static file serving in a Streamlit app, indicating the placement of the 'static' directory for hosting images or files. The configuration enables direct URL access to hosted images/files.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/additional-features.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyour-project/\n├── static/\n│   └── my_hosted-image.png\n└── streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Displaying a Header for Selected Data in Streamlit\nDESCRIPTION: Creates a header element in a Streamlit app to label the section containing selected member data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nst.header(\"Selected members\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Session State Items\nDESCRIPTION: Methods to delete individual or all items from Session State\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/session_state.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Delete a single key-value pair\ndel st.session_state[key]\n\n# Delete all the items in Session state\nfor key in st.session_state.keys():\n    del st.session_state[key]\n```\n\n----------------------------------------\n\nTITLE: Iframe Embedding with Disable Scrolling Option\nDESCRIPTION: This snippet shows how to embed a Streamlit app with scrolling disabled for the main body of the app, while the sidebar remains scrollable.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/embed-your-app.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/?embed=true&embed_options=disable_scrolling\n```\n\n----------------------------------------\n\nTITLE: Installing Streamlit Nightly\nDESCRIPTION: Shows how to install the nightly build of Streamlit to access pre-release and experimental features. Includes commands to uninstall the current version and install the nightly version.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip uninstall streamlit\npip install streamlit-nightly --upgrade\n```\n\n----------------------------------------\n\nTITLE: Referencing Streamlit Function Documentation in Markdown\nDESCRIPTION: This snippet uses a custom Markdown syntax to include auto-generated documentation for the streamlit.set_page_config function. It's likely part of a documentation system that processes this syntax to render detailed function information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/set_page_config.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Autofunction function=\"streamlit.set_page_config\" />\n```\n\n----------------------------------------\n\nTITLE: Query Parameters Dictionary Structure in Python\nDESCRIPTION: Demonstrates the dictionary structure of how URL parameters are represented in st.query_params.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/query_params.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"first_key\" : \"1\",\n    \"second_key\" : \"two\",\n    \"third_key\" : \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing tableauserverclient Library - Bash\nDESCRIPTION: This Bash snippet adds the tableauserverclient Python package to the application's requirements. Pinning the package version is recommended to avoid unexpected updates. Ensure the correct version is specified.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tableau.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# requirements.txt\ntableauserverclient==x.x.x\n\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Multipage App\nDESCRIPTION: Command to run a Streamlit multipage application using the entrypoint file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/multipage-apps/page_directory.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_homepage.py\n```\n\n----------------------------------------\n\nTITLE: Setting Wide Layout Configuration in Streamlit\nDESCRIPTION: Setting the page configuration to use a wide layout, which provides more horizontal space for displaying data visualizations side by side.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nst.set_page_config(layout=\"wide\")\n```\n\n----------------------------------------\n\nTITLE: Using TOML Sections for Database Credentials\nDESCRIPTION: Example of organizing database credentials in a TOML section format for more structured configuration management.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/secrets-management.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[db_credentials]\nusername = \"my_username\"\npassword = \"my_password\"\n```\n\n----------------------------------------\n\nTITLE: Using Validation with Experimental Singleton Cache in Streamlit 1.17.0\nDESCRIPTION: The @st.experimental_singleton decorator supports an optional validate parameter that accepts a validation function for cached data, which is called each time the cached value is accessed.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2023.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@st.experimental_singleton(validate=validation_function)\n```\n\n----------------------------------------\n\nTITLE: Fragment Definition for Herding Orange Cats\nDESCRIPTION: Similar to the black cats fragment, this defines the operation for herding orange cats with a button and appropriate containers to prevent element accumulation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/create-a-multiple-container-fragment.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@st.fragment\ndef herd_orange_cats(card_a, card_b, card_c):\n    st.button(\"Herd the orange cats\")\n    container_a = card_a.container()\n    container_b = card_b.container()\n    container_c = card_c.container()\n    with container_a:\n        orange_cats()\n    with container_b:\n        orange_cats()\n    with container_c:\n        orange_cats()\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Values with Experimental Memo's persist Parameter in Streamlit 1.17.0\nDESCRIPTION: The @st.experimental_memo decorator's persist parameter can now accept boolean values in addition to the previously supported options.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2023.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@st.experimental_memo(persist=True)\n```\n\n----------------------------------------\n\nTITLE: Alternative Command for Running Streamlit Hello\nDESCRIPTION: Long-form command to launch the Streamlit Hello example if the shorter version doesn't work.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython -m streamlit hello\n```\n\n----------------------------------------\n\nTITLE: Structuring Streamlit Project with Configuration File\nDESCRIPTION: Demonstrates the recommended file structure for a Streamlit project, including the location of the config.toml file for configuring default app settings.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nyour-project/\n├── .streamlit/\n│   └── config.toml\n└── your_app.py\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Navigation Structure for Streamlit Documentation\nDESCRIPTION: A YAML-formatted navigation structure for Streamlit documentation that defines categories, URLs, and visibility settings for various knowledge base articles related to dependencies and deployment issues.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/menu.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nurl: /knowledge-base/dependencies/module-not-found-error\nvisible: false\n  - category: Knowledge base / Installing dependencies / ERROR No matching distribution found for\n    url: /knowledge-base/dependencies/no-matching-distribution\n    visible: false\n  - category: Knowledge base / Deployment issues\n    url: /knowledge-base/deploy\n  - category: Knowledge base / Deployment issues / How can I deploy multiple Streamlit apps on different subdomains?\n    url: /knowledge-base/deploy/deploy-multiple-streamlit-apps-different-subdomains\n    visible: false\n  - category: Knowledge base / Deployment issues / How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)?\n    url: /knowledge-base/deploy/deploy-streamlit-domain-port-80\n    visible: false\n  - category: Knowledge base / Deployment issues / Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?)\n    url: /knowledge-base/deploy/does-streamlit-support-wsgi-protocol\n    visible: false\n  - category: Knowledge base / Deployment issues / How do I increase the upload limit of st.file_uploader on Streamlit Community Cloud?\n    url: /knowledge-base/deploy/increase-file-uploader-limit-streamlit-cloud\n    visible: false\n  - category: Knowledge base / Deployment issues / Invoking a Python subprocess in a deployed Streamlit app\n    url: /knowledge-base/deploy/invoking-python-subprocess-deployed-streamlit-app\n    visible: false\n  - category: Knowledge base / Deployment issues / App is not loading when running remotely\n    url: /knowledge-base/deploy/remote-start\n    visible: false\n  - category: Knowledge base / Deployment issues / Argh. This app has gone over its resource limits\n    url: /knowledge-base/deploy/resource-limits\n    visible: false\n  - category: Knowledge base / Deployment issues / How do I share apps with viewers outside my organization?\n    url: /knowledge-base/deploy/share-apps-with-viewers-outside-organization\n    visible: false\n  - category: Knowledge base / Deployment issues / Upgrade the Streamlit version of your app on Streamlit Community Cloud\n    url: /knowledge-base/deploy/upgrade-streamlit-version-on-streamlit-cloud\n    visible: false\n  - category: Knowledge base / Deployment issues / Huh. This is isn't supposed to happen message after trying to log in\n    url: /knowledge-base/deploy/huh-this-isnt-supposed-to-happen-message-after-trying-to-log-in\n    visible: false\n  - category: Knowledge base / Deployment issues / Login attempt to Streamlit Community Cloud fails with error 403\n    url: /knowledge-base/deploy/login-attempt-to-streamlit-community-cloud-fails-with-error-403\n    visible: false\n  - category: Knowledge base / Deployment issues / How to submit a support case for Streamlit Community Cloud\n    url: /knowledge-base/deploy/how-to-submit-a-support-case-for-streamlit-community-cloud\n    visible: false\n```\n\n----------------------------------------\n\nTITLE: Copying Local Files to Docker Container\nDESCRIPTION: Alternative approach to copy local application files into the Docker container instead of cloning from repository.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_8\n\nLANGUAGE: docker\nCODE:\n```\nCOPY . .\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializable Session State with TOML in Streamlit\nDESCRIPTION: This TOML snippet configures Streamlit to enforce session state objects to be pickle-serializable by setting the enforceSerializableSessionState option to true. This is useful for detecting data incompatibility issues during development or when the environment requires serializable data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_11\n\nLANGUAGE: TOML\nCODE:\n```\n# .streamlit/config.toml\n[runner]\nenforceSerializableSessionState = true\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Configuration from YAML File\nDESCRIPTION: This bash command creates the Kubernetes configuration from the YAML file using kubectl. It applies the configuration defined in 'k8s-streamlit.yaml' to the Kubernetes cluster.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/kubernetes.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubctl create -f k8s-streamlit.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Streamlit Version via CLI\nDESCRIPTION: Command to print Streamlit's current version number. This can be executed from any terminal where Streamlit is installed. Equivalent to using the --version flag.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/version.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit version\n```\n\n----------------------------------------\n\nTITLE: Inline Callouts Navigation Component\nDESCRIPTION: Custom React/JSX component for inline callouts displaying various getting started steps\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/get-started/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"person\"\n        bold=\"Create your account.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/create-your-account\"\n    >See all the options and get complete explanations as you create your Streamlit Community Cloud account.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"code\"\n        bold=\"Connect your GitHub account.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/connect-your-github-account\"\n    >After your create your Community Cloud account, connect GitHub for source control.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"computer\"\n        bold=\"Explore your workspace.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/explore-your-workspace\"\n    >Take a quick tour of your Community Cloud workspace. See where all the magic happens.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"auto_fix_high\"\n        bold=\"Deploy an app from a template.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/deploy-from-a-template\"\n    >Use a template to get your own app up and running in minutes.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"fork_right\"\n        bold=\"Fork and edit a public app.\"\n        href=\"/deploy/streamlit-community-cloud/get-started/fork-and-edit-a-public-app\"\n    >Start with a bang! Fork a public app and jump right into the code.</InlineCallout>\n</InlineCalloutContainer>\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment with venv\nDESCRIPTION: Command to create a new Python virtual environment named .venv in your current directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Uploading Package to Test PyPI\nDESCRIPTION: Command to upload the built distribution to Test PyPI using twine.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/publish-component.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m twine upload --repository testpypi dist/*\n```\n\n----------------------------------------\n\nTITLE: AppTest Initialization from String\nDESCRIPTION: Demonstrates initializing a simulated Streamlit app from a string containing the app code.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_162\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\nat = AppTest.from_string(app_script_as_string)\nat.run()\n```\n\n----------------------------------------\n\nTITLE: Stopping Execution in Streamlit\nDESCRIPTION: Demonstrates how to stop script execution immediately. This can be used to prevent further code from running based on certain conditions.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_135\n\nLANGUAGE: python\nCODE:\n```\nst.stop()\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializable Session State in Streamlit\nDESCRIPTION: This TOML configuration enables the enforcement of serializable session state in Streamlit. It can be added to a global or project config file to ensure only pickle-serializable objects are allowed in Session State.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/serializable-session-state.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/config.toml\n[runner]\nenforceSerializableSessionState = true\n```\n\n----------------------------------------\n\nTITLE: Running Remote Streamlit Scripts\nDESCRIPTION: Execute a Streamlit application from a remote URL source, such as a GitHub repository. This allows running scripts hosted on external platforms.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/run-your-app.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\n```\n\n----------------------------------------\n\nTITLE: Streamlit Download Button Widget Definition\nDESCRIPTION: Markdown documentation header for st.download_button component API reference\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/download_button.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: st.download_button\nslug: /develop/api-reference/widgets/st.download_button\ndescription: st.download_button displays a download button widget.\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Streamlit Documentation Site Menu Structure in YAML\nDESCRIPTION: A YAML configuration that defines the complete navigation structure for Streamlit documentation. The menu is organized hierarchically with main categories like 'Get started' and 'Develop', each containing multiple nested subcategories and links to specific documentation pages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/menu.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsite_menu:\n  - category: Get started\n    url: /get-started\n    color: orange-70\n    icon: rocket_launch\n  - category: Get started / Installation\n    url: /get-started/installation\n  - category: Get started / Installation / Use command line\n    url: /get-started/installation/command-line\n  - category: Get started / Installation / Use Anaconda Distribution\n    url: /get-started/installation/anaconda-distribution\n  - category: Get started / Installation / Use GitHub Codespaces\n    url: /get-started/installation/community-cloud\n  - category: Get started / Installation / Use Snowflake\n    url: /get-started/installation/streamlit-in-snowflake\n  - category: Get started / Fundamentals\n    url: /get-started/fundamentals\n  - category: Get started / Fundamentals / Basic concepts\n    url: /get-started/fundamentals/main-concepts\n  - category: Get started / Fundamentals / Advanced concepts\n    url: /get-started/fundamentals/advanced-concepts\n  - category: Get started / Fundamentals / Additional features\n    url: /get-started/fundamentals/additional-features\n  - category: Get started / Fundamentals / Summary\n    url: /get-started/fundamentals/summary\n  - category: Get started / First steps\n    url: /get-started/tutorials\n  - category: Get started / First steps / Create an app\n    url: /get-started/tutorials/create-an-app\n  - category: Get started / First steps / Create a multipage app\n    url: /get-started/tutorials/create-a-multipage-app\n\n  - category: Develop\n    url: /develop\n    color: indigo-70\n    icon: code\n\n  - category: Develop / Concepts\n    url: /develop/concepts\n  - category: Develop / Concepts / CORE\n  - category: Develop / Concepts / Architecture & execution\n    url: /develop/concepts/architecture\n  - category: Develop / Concepts / Architecture & execution / Running your app\n    url: /develop/concepts/architecture/run-your-app\n  - category: Develop / Concepts / Architecture & execution / Streamlit's architecture\n    url: /develop/concepts/architecture/architecture\n  - category: Develop / Concepts / Architecture & execution / The app chrome\n    url: /develop/concepts/architecture/app-chrome\n  - category: Develop / Concepts / Architecture & execution / Caching\n    url: /develop/concepts/architecture/caching\n  - category: Develop / Concepts / Architecture & execution / Session State\n    url: /develop/concepts/architecture/session-state\n  - category: Develop / Concepts / Architecture & execution / Forms\n    url: /develop/concepts/architecture/forms\n  - category: Develop / Concepts / Architecture & execution / Fragments\n    url: /develop/concepts/architecture/fragments\n  - category: Develop / Concepts / Architecture & execution/ Widget behavior\n    url: /develop/concepts/architecture/widget-behavior\n  - category: Develop / Concepts / Multipage apps\n    url: /develop/concepts/multipage-apps\n  - category: Develop / Concepts / Multipage apps / Overview\n    url: /develop/concepts/multipage-apps/overview\n  - category: Develop / Concepts / Multipage apps / Page and navigation\n    url: /develop/concepts/multipage-apps/page-and-navigation\n  - category: Develop / Concepts / Multipage apps / Pages directory\n    url: /develop/concepts/multipage-apps/pages-directory\n  - category: Develop / Concepts / Multipage apps / Working with widgets\n    url: /develop/concepts/multipage-apps/widgets\n  - category: Develop / Concepts / App design\n    url: /develop/concepts/design\n  - category: Develop / Concepts / App design / Animate & update elements\n    url: /develop/concepts/design/animate\n  - category: Develop / Concepts / App design / Button behavior and examples\n    url: /develop/concepts/design/buttons\n  - category: Develop / Concepts / App design / Dataframes\n    url: /develop/concepts/design/dataframes\n  - category: Develop / Concepts / App design / Multithreading\n    url: /develop/concepts/design/multithreading\n  - category: Develop / Concepts / App design / Using custom classes\n    url: /develop/concepts/design/custom-classes\n  - category: Develop / Concepts / App design / Working with timezones\n    url: /develop/concepts/design/timezone-handling\n  - category: Develop / Concepts / ADDITIONAL\n  - category: Develop / Concepts / Connections, secrets, & authentication\n    url: /develop/concepts/connections\n  - category: Develop / Concepts / Connections, secrets, & authentication / Connecting to data\n    url: /develop/concepts/connections/connecting-to-data\n  - category: Develop / Concepts / Connections, secrets, & authentication / Secrets management\n    url: /develop/concepts/connections/secrets-management\n  - category: Develop / Concepts / Connections, secrets, & authentication / User authentication\n    url: /develop/concepts/connections/authentication\n  - category: Develop / Concepts / Connections, secrets, & authentication / Security reminders\n    url: /develop/concepts/connections/security-reminders\n  - category: Develop / Concepts / Custom components\n    url: /develop/concepts/custom-components\n  - category: Develop / Concepts / Custom components / Intro to custom components\n    url: /develop/concepts/custom-components/intro\n  - category: Develop / Concepts / Custom components / Create a Component\n    url: /develop/concepts/custom-components/create\n  - category: Develop / Concepts / Custom components / Publish a Component\n    url: /develop/concepts/custom-components/publish\n  - category: Develop / Concepts / Custom components / Limitations\n    url: /develop/concepts/custom-components/limitations\n  - category: Develop / Concepts / Custom components / Component gallery\n    url: https://streamlit.io/components\n  - category: Develop / Concepts / Configuration & theming\n    url: /develop/concepts/configuration\n  - category: Develop / Concepts / Configuration & theming / Configuration options\n    url: /develop/concepts/configuration/options\n  - category: Develop / Concepts / Configuration & theming / HTTPS support\n    url: /develop/concepts/configuration/https-support\n  - category: Develop / Concepts / Configuration & theming / Serving static files\n    url: /develop/concepts/configuration/serving-static-files\n  - category: Develop / Concepts / Configuration & theming / Customize your theme\n    url: /develop/concepts/configuration/theming\n  - category: Develop / Concepts / App testing\n    url: /develop/concepts/app-testing\n  - category: Develop / Concepts / App testing / Get started\n    url: /develop/concepts/app-testing/get-started\n  - category: Develop / Concepts / App testing / Beyond the basics\n    url: /develop/concepts/app-testing/beyond-the-basics\n  - category: Develop / Concepts / App testing / Automate your tests\n    url: /develop/concepts/app-testing/automate-tests\n  - category: Develop / Concepts / App testing / Example\n    url: /develop/concepts/app-testing/examples\n  - category: Develop / Concepts / App testing / Cheat sheet\n    url: /develop/concepts/app-testing/cheat-sheet\n\n  - category: Develop / API reference\n    url: /develop/api-reference\n  - category: Develop / API reference / PAGE ELEMENTS\n  - category: Develop / API reference / Write & magic\n    url: /develop/api-reference/write-magic\n  - category: Develop / API reference / Write & magic / st.write\n    url: /develop/api-reference/write-magic/st.write\n    isVersioned: true\n  - category: Develop / API reference / Write & magic / st.write_stream\n    url: /develop/api-reference/write-magic/st.write_stream\n    isVersioned: true\n  - category: Develop / API reference / Write & magic / magic\n    url: /develop/api-reference/write-magic/magic\n  - category: Develop / API reference / Text elements\n    url: /develop/api-reference/text\n  - category: Develop / API reference / Text elements / HEADINGS & BODY\n  - category: Develop / API reference / Text elements / st.title\n    url: /develop/api-reference/text/st.title\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.header\n    url: /develop/api-reference/text/st.header\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.subheader\n    url: /develop/api-reference/text/st.subheader\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.markdown\n    url: /develop/api-reference/text/st.markdown\n    isVersioned: true\n  - category: Develop / API reference / Text elements / FORMATTED TEXT\n  - category: Develop / API reference / Text elements / st.badge\n    url: /develop/api-reference/text/st.badge\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.caption\n    url: /develop/api-reference/text/st.caption\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.code\n    url: /develop/api-reference/text/st.code\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.divider\n    url: /develop/api-reference/text/st.divider\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.echo\n    url: /develop/api-reference/text/st.echo\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.latex\n    url: /develop/api-reference/text/st.latex\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.text\n    url: /develop/api-reference/text/st.text\n    isVersioned: true\n  - category: Develop / API reference / Text elements / UTILITIES\n  - category: Develop / API reference / Text elements / st.help\n    url: /develop/api-reference/text/st.help\n    isVersioned: true\n  - category: Develop / API reference / Text elements / st.html\n    url: /develop/api-reference/text/st.html\n    isVersioned: true\n  - category: Develop / API reference / Data elements\n    url: /develop/api-reference/data\n  - category: Develop / API reference / Data elements / st.dataframe\n    url: /develop/api-reference/data/st.dataframe\n    isVersioned: true\n  - category: Develop / API reference / Data elements / st.data_editor\n    url: /develop/api-reference/data/st.data_editor\n    isVersioned: true\n```\n\n----------------------------------------\n\nTITLE: Specifying Streamlit Version Requirement\nDESCRIPTION: This line specifies that the project requires Streamlit version 1.44.0 or higher. It uses the standard pip package specification format.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/tutorials/custom-navigation/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Streamlit App Settings\nDESCRIPTION: Documentation page structure defining app settings management in Streamlit Community Cloud, including navigation paths, configuration options, and administrative features.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/manage-your-app/app-settings.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: App settings\nslug: /deploy/streamlit-community-cloud/manage-your-app/app-settings\n---\n\n# App settings\n```\n\n----------------------------------------\n\nTITLE: Starting Python HTTP Server\nDESCRIPTION: Command to start a simple Python HTTP server for testing server connectivity independent of Streamlit.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/remote-start.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server [port]\n```\n\n----------------------------------------\n\nTITLE: Alternative Command for Running Streamlit App\nDESCRIPTION: Long-form command to run the Streamlit application if the shorter version doesn't work.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython -m streamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Example Streamlit Configuration in TOML\nDESCRIPTION: A basic example of a config.toml file for Streamlit, showing how to set client error display and theme colors.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[client]\nshowErrorDetails = \"none\"\n\n[theme]\nprimaryColor = \"#F63366\"\nbackgroundColor = \"black\"\n```\n\n----------------------------------------\n\nTITLE: Navigation Tiles Component\nDESCRIPTION: Custom React/JSX component for navigation tiles displaying quickstart and security options\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/get-started/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<TileContainer>\n    <Tile\n        icon=\"rocket_launch\"\n        title=\"Quickstart\"\n        text=\"Create your account and deploy an example app as fast as possible. Jump right into coding with GitHub Codespaces.\"\n        link=\"/deploy/streamlit-community-cloud/get-started/quickstart\"\n        background=\"lightBlue-70\"\n    />\n    <Tile\n        icon=\"security\"\n        title=\"Trust and Security\"\n        text=\"Security first! If you want to read up on how we handle your data before you get started, we've got you covered.\"\n        link=\"/deploy/streamlit-community-cloud/get-started/trust-and-security\"\n        background=\"lightBlue-70\"\n    />\n</TileContainer>\n```\n\n----------------------------------------\n\nTITLE: Declaring Secrets in TOML\nDESCRIPTION: This TOML file defines secrets such as database credentials and other sensitive information. These are used in tests to simulate real-world scenarios without exposing actual secrets.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/beyond-the-basics.md#2025-04-21_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\ndb_username = \"Jane\"\ndb_password = \"mypassword\"\n\n[my_other_secrets]\nthings_i_like = [\"Streamlit\", \"Python\"]\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Streamlit App - YAML\nDESCRIPTION: This snippet configures a GitHub Actions workflow for automating tests associated with the Streamlit application, ensuring tests run on specific events such as pushes to the main branch.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/examples.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/streamlit-app.yml\nname: Streamlit app\n\non:\n  push:\n    branches: [\"main\"]\n  pull_request:\n    branches: [\"main\"]\n\npermissions:\n  contents: read\n\njobs:\n  streamlit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n      - uses: streamlit/streamlit-app-action@v0.0.3\n        with:\n          app-path: app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Query Parameters in Streamlit with Python (Deprecated)\nDESCRIPTION: Using the deprecated st.experimental_set_query_params() function to set query parameters shown in the browser's URL bar.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nst.experimental_set_query_params(\n  {\"show_all\"=True, \"selected\"=[\"asia\", \"america\"]}\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Exception Details in Streamlit\nDESCRIPTION: Displays formatted exception details in the app. This is useful for debugging or showing technical error information to developers.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_120\n\nLANGUAGE: python\nCODE:\n```\ne = RuntimeError(\"This is an exception of type RuntimeError\")\nst.exception(e)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Streamlit with Conda\nDESCRIPTION: Commands to update Streamlit to the latest version within an activated Conda environment and verify the installation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/upgrade-version-streamlit.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconda update -c conda-forge streamlit -y\nstreamlit version\n```\n\n----------------------------------------\n\nTITLE: Testing Block Elements\nDESCRIPTION: Example of testing container elements like sidebar using Block representation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_164\n\nLANGUAGE: python\nCODE:\n```\n# at.sidebar returns a Block\nat.sidebar.button[0].click().run()\nassert not at.exception\n```\n\n----------------------------------------\n\nTITLE: Runner Configuration Options in TOML\nDESCRIPTION: Runner settings for Streamlit, including magic command behavior, fast reruns, and enum coercion options.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[runner]\n\n# Allows you to type a variable or string by itself in a single line of\n# Python code to write it to the app.\n# Default: true\nmagicEnabled = true\n\n# Handle script rerun requests immediately, rather than waiting for script\n# execution to reach a yield point. This makes Streamlit much more\n# responsive to user interaction, but it can lead to race conditions in\n# apps that mutate session_state data outside of explicit session_state\n# assignment statements.\n# Default: true\nfastReruns = true\n\n# Raise an exception after adding unserializable data to Session State.\n# Some execution environments may require serializing all data in Session\n# State, so it may be useful to detect incompatibility during development,\n# or when the execution environment will stop supporting it in the future.\n# Default: false\nenforceSerializableSessionState = false\n\n# Adjust how certain 'options' widgets like radio, selectbox, and\n# multiselect coerce Enum members when the Enum class gets re-defined\n# during a script re-run. For more information, check out the docs:\n# https://docs.streamlit.io/develop/concepts/design/custom-classes#enums\n# Allowed values:\n# - \"off\"          : Disables Enum coercion.\n# - \"nameOnly\"     : Enum classes can be coerced if their member names match.\n# - \"nameAndValue\" : Enum classes can be coerced if their member names AND\n#                    member values match.\n# Default: \"nameOnly\"\nenumCoercion = \"nameOnly\"\n```\n\n----------------------------------------\n\nTITLE: Handling Rewrite Action\nDESCRIPTION: Updates stage to rewrite mode and reruns the application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nst.session_state.stage = \"rewrite\"\nst.rerun()\n```\n\n----------------------------------------\n\nTITLE: Testing Container-Based Element Ordering in Streamlit (Python)\nDESCRIPTION: This snippet demonstrates how to write assertions for testing the order of elements created using containers in a Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nassert at.button[0].label == \"B\"\nassert at.button[1].label == \"A\"\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from GitHub with Version Tag\nDESCRIPTION: This snippet demonstrates how to install a specific tagged version of a GitHub repository by adding the tag name after the @ symbol in the repository URL in your requirements.txt file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/install-package-pypi-github.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit+https://github.com/SomePackage.git@v1.1.0#egg=SomePackage\n```\n\n----------------------------------------\n\nTITLE: Conditional User Authentication Logic in Streamlit\nDESCRIPTION: Implements conditional logic to either show the login screen or display user information based on whether the user is logged in.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/google.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif not st.experimental_user.is_logged_in:\n    login_screen()\nelse:\n    st.experimental_user\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Streamlit Docs\nDESCRIPTION: YAML frontmatter configuration defining the title and URL slug for the Streamlit Community Cloud documentation page.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Streamlit Community Cloud\nslug: /deploy/streamlit-community-cloud\n---\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit with Custom Arguments\nDESCRIPTION: Execute a Streamlit application while passing custom arguments to the script. Arguments must be passed after two dashes to differentiate them from Streamlit arguments.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/run-your-app.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_script.py [-- script args]\n```\n\n----------------------------------------\n\nTITLE: Accessing Session in SnowparkConnection (Python)\nDESCRIPTION: This property returns the underlying Snowpark session object. It's not thread-safe and should be used with caution in multi-threaded environments.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/connections-snowpark.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef session(self) -> snowpark.Session:\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Configuration File\nDESCRIPTION: This TOML snippet shows how to opt out of usage statistics collection in Streamlit applications. By setting the `gatherUsageStats` option to false in the configuration file, users can disable the telemetry feature.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/options.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[browser]\\ngatherUsageStats = false\n```\n\n----------------------------------------\n\nTITLE: Setting Base Streamlit Light Theme\nDESCRIPTION: Simple configuration to explicitly set the base Streamlit Light theme using the 'base' option in TOML\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/theming.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[theme]\nbase=\"light\"\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Stage Condition\nDESCRIPTION: Initializes the conditional block for the validate stage using session state.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-revision.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nelif st.session_state.stage == \"validate\":\n```\n\n----------------------------------------\n\nTITLE: Performing Image Comparison in Streamlit Using Python\nDESCRIPTION: Leverages the `image_comparison` function from the `streamlit_image_comparison` module to compare images using a slider, based on JuxtaposeJS.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_92\n\nLANGUAGE: Python\nCODE:\n```\nfrom streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=\"image1.jpg\", img2=\"image2.jpg\",)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Lists required Python packages for the project - vega_datasets and streamlit (version 1.44.0 or higher)\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/tutorials/elements/charts/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvega_datasets\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Executing a Python Script Using the System Path\nDESCRIPTION: This snippet shows an attempt to run a Python script from a Streamlit app using the default system path. However, this can lead to dependency issues if the system Python does not match the virtual environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/invoking-python-subprocess-deployed-streamlit-app.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# streamlit_app.py\nimport streamlit as st\nimport subprocess\n\nsubprocess.run([\"python\", \"script.py\"])\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom DuckDB Connection Class in Python\nDESCRIPTION: This snippet shows how to declare a custom DuckDB connection class by extending ExperimentalBaseConnection. It sets up the basic structure for a custom connection implementation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/connections/connecting-to-data.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.connections import ExperimentalBaseConnection\nimport duckdb\n\nclass DuckDBConnection(ExperimentalBaseConnection[duckdb.DuckDBPyConnection])\n```\n\n----------------------------------------\n\nTITLE: Installing a Package from GitHub with Branch Specification\nDESCRIPTION: This snippet demonstrates how to install a specific branch of a GitHub repository by adding the branch name after the @ symbol in the repository URL in your requirements.txt file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/install-package-pypi-github.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit+https://github.com/SomePackage.git@main#egg=SomePackage\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation with Hello World\nDESCRIPTION: Command to verify Docker Engine installation by running the hello-world image.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/kubernetes.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Creating a Deprecated Snowpark Connection in Streamlit\nDESCRIPTION: Demonstrates the creation of a deprecated SnowparkConnection for connecting to Snowflake. This snippet shows the syntax for establishing a Snowpark connection, which is now deprecated.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/_index.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconn = st.connection(\"snowpark\")\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App (Bash)\nDESCRIPTION: This code shows how to run a Streamlit application from the command line.  The command `streamlit run` executes the specified Python script, launching the Streamlit app in a web browser.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run uber_pickups.py\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements for Streamlit Documentation\nDESCRIPTION: Specifies the required Python packages with version constraints. Includes pandas and numpy for data manipulation, altair and pydeck for visualization, and streamlit for the web interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/hello/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\npandas==1.5.3\nnumpy==1.23.5\naltair==4.2.0\npydeck==0.8.0\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Adding PyMongo to Requirements File\nDESCRIPTION: Instructions for adding the PyMongo package to the requirements.txt file, with version pinning.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mongodb.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# requirements.txt\npymongo==x.x.x\n```\n\n----------------------------------------\n\nTITLE: Testing Login Functionality - Python\nDESCRIPTION: This snippet includes unit tests for the login functionality of the Streamlit application, validating states and responses during user interaction with the login page.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/examples.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.testing.v1 import AppTest\n\ndef test_no_interaction():\n    at = AppTest.from_file(\"app.py\")\n    at.secrets[\"password\"] = \"streamlit\"\n    at.run()\n    assert at.session_state[\"status\"] == \"unverified\"\n    assert len(at.text_input) == 1\n    assert len(at.warning) == 0\n    assert len(at.success) == 0\n    assert len(at.button) == 0\n    assert at.text_input[0].value == \"\"\n\ndef test_incorrect_password():\n    at = AppTest.from_file(\"app.py\")\n    at.secrets[\"password\"] = \"streamlit\"\n    at.run()\n    at.text_input[0].input(\"balloon\").run()\n    assert at.session_state[\"status\"] == \"incorrect\"\n    assert len(at.text_input) == 1\n    assert len(at.warning) == 1\n    assert len(at.success) == 0\n    assert len(at.button) == 0\n    assert at.text_input[0].value == \"\"\n    assert \"Incorrect password\" in at.warning[0].value\n\ndef test_correct_password():\n    at = AppTest.from_file(\"app.py\")\n    at.secrets[\"password\"] = \"streamlit\"\n    at.run()\n    at.text_input[0].input(\"streamlit\").run()\n    assert at.session_state[\"status\"] == \"verified\"\n    assert len(at.text_input) == 0\n    assert len(at.warning) == 0\n    assert len(at.success) == 1\n    assert len(at.button) == 1\n    assert \"Login successful\" in at.success[0].value\n    assert at.button[0].label == \"Log out\"\n\ndef test_log_out():\n    at = AppTest.from_file(\"app.py\")\n    at.secrets[\"password\"] = \"streamlit\"\n    at.session_state[\"status\"] = \"verified\"\n    at.run()\n    at.button[0].click().run()\n    assert at.session_state[\"status\"] == \"unverified\"\n    assert len(at.text_input) == 1\n    assert len(at.warning) == 0\n    assert len(at.success) == 0\n    assert len(at.button) == 0\n    assert at.text_input[0].value == \"\"\n```\n\n----------------------------------------\n\nTITLE: Adding RefCard to API Reference in Markdown for Streamlit Docs\nDESCRIPTION: Shows how to add a RefCard for a new Streamlit function to the API Reference landing page using markdown and MDX functions.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n<RefCard href=\"/develop/api-reference/charts/st.my_chart\">\n<Image pure alt=\"Tux, the Linux mascot\" src=\"/img/data-table.png\" />\n\n#### My charts\n\nDisplay a chart using the MyChart library.\n\n```python\nst.my_chart(my_data_frame)\n```\n\n</RefCard>\n```\n\n----------------------------------------\n\nTITLE: Installing Streamlit Nightly Release via Pip\nDESCRIPTION: This code snippet demonstrates how to install the `streamlit-nightly` package using pip. It first uninstalls the standard `streamlit` package to avoid conflicts, and then installs the latest version of `streamlit-nightly`. It is recommended not to have both installed in the same environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/prerelease-features.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip uninstall streamlit\npip install streamlit-nightly --upgrade\"\n```\n\n----------------------------------------\n\nTITLE: Resetting ExperimentalBaseConnection in Python\nDESCRIPTION: Method to reset the connection instance, clearing any cached connection objects and forcing a new connection to be established on the next access.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/connections-experimentalbaseconnection.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.connections.ExperimentalBaseConnection.reset\n```\n\n----------------------------------------\n\nTITLE: Using Pydeck with st.pydeck_chart\nDESCRIPTION: This snippet demonstrates how to use the Pydeck library in conjunction with Streamlit's `st.pydeck_chart` function. By passing a PyDeck object to `st.pydeck_chart`, you can render advanced visualizations in your Streamlit app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2020.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"st.deck_gl_chart\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"st.pydeck_chart\"\n```\n\nLANGUAGE: Python\nCODE:\n```\n\"st.write\"\n```\n\n----------------------------------------\n\nTITLE: Using st.columns with Nesting Support in Streamlit 1.18.0\nDESCRIPTION: The st.columns function supports up to one level of nesting, allowing columns inside columns in the main app area.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2023.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nst.columns\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Entries in YAML for Streamlit Docs\nDESCRIPTION: Shows how to add a new page to the menu structure using YAML format in the menu.md file for Streamlit documentation.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- category: Get Started / Installation / Quickstart\n  url: /get-started/installation/quickstart\n  visible: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Cropping in Streamlit Apps\nDESCRIPTION: Demonstrates using `st_cropper` from `streamlit_cropper` to allow users to crop images in Streamlit applications, with customization options for real-time updates and aspect ratio.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_93\n\nLANGUAGE: Python\nCODE:\n```\nfrom streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\n```\n\n----------------------------------------\n\nTITLE: Disabling XSRF Protection in Streamlit\nDESCRIPTION: Command to start Streamlit with XSRF protection disabled for troubleshooting file upload issues in multi-replica setups.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/remote-start.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run my_app.py --server.enableXsrfProtection=false\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL Server Database (SQL)\nDESCRIPTION: SQL commands to create a new database named 'mydb' in SQL Server. The 'GO' command is used to execute the previous statement.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mssql.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE mydb\nGO\n```\n\n----------------------------------------\n\nTITLE: Importing AreaChartColumn Configuration - Python\nDESCRIPTION: Example of importing and using Streamlit's AreaChartColumn configuration class in Python code\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/areachartcolumn.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.column_config import AreaChartColumn\n```\n\n----------------------------------------\n\nTITLE: Color Picker Widget Definition in Markdown\nDESCRIPTION: Markdown documentation header defining the st.color_picker widget API reference, including title, URL slug, and basic description.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/color_picker.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: st.color_picker\nslug: /develop/api-reference/widgets/st.color_picker\ndescription: st.color_picker displays a color picker widget.\n---\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit on Port 80\nDESCRIPTION: Command to start Streamlit on port 80, which is commonly exposed by default on many hosts.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/remote-start.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run my_app.py --server.port=80\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Collection and Inserting Data (MongoDB Shell)\nDESCRIPTION: Commands to create a new database 'mydb', switch to it, and insert example data into a collection 'mycollection'.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mongodb.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nuse mydb\ndb.mycollection.insertMany([{\"name\" : \"Mary\", \"pet\": \"dog\"}, {\"name\" : \"John\", \"pet\": \"cat\"}, {\"name\" : \"Robert\", \"pet\": \"bird\"}])\n```\n\n----------------------------------------\n\nTITLE: Using st.experimental_data_editor for Editable DataFrames in Streamlit 1.19.0\nDESCRIPTION: The st.experimental_data_editor widget allows editing DataFrames and other data structures in a table-like UI, introduced in Streamlit 1.19.0.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2023.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.experimental_data_editor\n```\n\n----------------------------------------\n\nTITLE: Specifying Streamlit Version Requirement\nDESCRIPTION: Defines the minimum required version of Streamlit package as 1.44.0 or higher. This is typically used in a requirements.txt file for Python dependency management.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/concept-source/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Adding google-cloud-bigquery to Requirements File\nDESCRIPTION: This snippet demonstrates how to add the google-cloud-bigquery package to the requirements.txt file, specifying a pinned version for consistency.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/bigquery.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# requirements.txt\ngoogle-cloud-bigquery==x.x.x\n```\n\n----------------------------------------\n\nTITLE: GitHub Codespaces Path Definition\nDESCRIPTION: File path specification for the devcontainer configuration that Community Cloud adds to the repository for Codespaces integration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/manage-your-app/edit-your-app.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.devcontainer/devcontainer.json\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for st.segmented_control\nDESCRIPTION: Markdown frontmatter and structure defining the API documentation page for Streamlit's segmented_control widget. Includes title, slug, and description metadata.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/widgets/segmented_control.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: st.segmented_control\nslug: /develop/api-reference/widgets/st.segmented_control\ndescription: st.segmented_control displays a select widget where options display in a segmented button.\n---\n\n<Autofunction function=\"streamlit.segmented_control\" />\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies List\nDESCRIPTION: Lists required Python packages with version constraints. Specifies Faker (any version) and streamlit version 1.44.0 or higher as dependencies.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/tutorials/elements/dataframes/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFaker\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Streamlit Version Requirement\nDESCRIPTION: Defines the minimum required version of Streamlit (1.44.0 or higher) needed to run the documentation system. Uses standard pip requirements.txt format.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/guides/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack for Package Management\nDESCRIPTION: Command to enable Corepack, Node's built-in package manager handler that supports yarn.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Message Size in Streamlit\nDESCRIPTION: New configuration option to set the maximum size of messages in Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2022.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- 📨 Developers can now configure the maximum size of a message to accommodate larger messages within the Streamlit application. See `server.maxMessageSize`.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Parameters with Streamlit (Deprecated)\nDESCRIPTION: Function that returns the query parameters currently present in the browser's URL bar. This function has been deprecated since version 1.30.0 and users should use st.query_params instead.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/experimental_get_query_params.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.experimental_get_query_params()\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Table in SQL Server (SQL)\nDESCRIPTION: SQL commands to switch to the 'mydb' database, create a new table 'mytable', and insert sample data into it.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/mssql.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUSE mydb\nCREATE TABLE mytable (name varchar(80), pet varchar(80))\nINSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird')\nGO\n```\n\n----------------------------------------\n\nTITLE: Embedding Code Blocks in Markdown for Streamlit Docs\nDESCRIPTION: Illustrates how to embed code blocks with syntax highlighting in markdown for Streamlit documentation.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```python\nimport streamlit as st\n\nst.text(\"Hello world\")\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Streamlit Popover Component API Reference\nDESCRIPTION: Markdown frontmatter that defines the API reference page metadata for the st.popover component, including the title, URL slug, and description.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/layout/popover.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: st.popover\nslug: /develop/api-reference/layout/st.popover\ndescription: st.popover inserts a multi-element popover container\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Widgets in Streamlit\nDESCRIPTION: New 'disabled' parameter added to widgets to remove interactivity.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2022.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- 🚦 Widgets now have the `disabled` parameter that removes interactivity.\n```\n\n----------------------------------------\n\nTITLE: Static Table Generation\nDESCRIPTION: Shows how to create a static table with random data using st.table()\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\\nimport numpy as np\\nimport pandas as pd\\n\\ndataframe = pd.DataFrame(\\n    np.random.randn(10, 20),\\n    columns=('col %d' % i for i in range(20)))\\nst.table(dataframe)\n```\n\n----------------------------------------\n\nTITLE: Avoid Nesting Widgets Inside Buttons in Streamlit\nDESCRIPTION: This snippet demonstrates the anti-pattern of nesting other widgets, like text inputs, directly inside a button's conditional block. The nested widget will not be displayed or functional.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/button-behavior-and-examples.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif st.button('Sign up'):\n    name = st.text_input('Name')\n\n    if name:\n        # This will never be executed.\n        st.success(f'Welcome {name}')\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit on an Alternative Port\nDESCRIPTION: Command to run a Streamlit app on a different port to bypass browser caching issues.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/sanity-checks.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run my_app.py --server.port=9876\n```\n\n----------------------------------------\n\nTITLE: Adding PyTigerGraph Dependency to Requirements - Bash\nDESCRIPTION: This snippet shows how to add the pyTigerGraph library to the Streamlit app's requirements.txt file. Pinning the version is recommended for dependency management.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/tigergraph.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"# requirements.txt\\npyTigerGraph==x.x.x\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public IP Address of Streamlit Service\nDESCRIPTION: This bash command retrieves the public IP address assigned to the Streamlit service by querying the Kubernetes service object. It uses kubectl with jsonpath to extract the IP address from the service details.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/kubernetes.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get service streamlit-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Inline Callouts in Markdown\nDESCRIPTION: This snippet demonstrates how to create inline callouts in Markdown format, providing quick links to different sections of the deployment guide. It uses custom components like InlineCalloutContainer and InlineCallout to structure the information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/deploy-your-app/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"description\"\n        bold=\"File organization.\"\n        href=\"/deploy/streamlit-community-cloud/deploy-your-app/file-organization\"\n    >Learn how Community Cloud initializes your app and interprets paths. Learn where to put your configuration files.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"build_circle\"\n        bold=\"App dependencies.\"\n        href=\"/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies\"\n    >Learn how to install dependencies and other Python libraries into your deployment environment.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"password\"\n        bold=\"Secrets management.\"\n        href=\"/deploy/streamlit-community-cloud/deploy-your-app/secrets-management\"\n    >Learn about the interface Community Cloud provides to securely upload your <code>secrets.toml</code> data.</InlineCallout>\n    <InlineCallout\n        color=\"lightBlue-70\"\n        icon=\"flight_takeoff\"\n        bold=\"Deploy your app\"\n        href=\"/deploy/streamlit-community-cloud/deploy-your-app/deploy\"\n    >Put it all together to deploy your app for the whole world to see.</InlineCallout>\n</InlineCalloutContainer>\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Dictionary for Activity Data in Python\nDESCRIPTION: Initializes an empty dictionary that will store yearly activity data for selected members.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/elements/dataframes/row_selections.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nactivity_df = {}\n```\n\n----------------------------------------\n\nTITLE: Streamlit Version Constraint\nDESCRIPTION: Specifies the minimum required version of Streamlit. The project requires Streamlit version 1.44.0 or higher to function correctly. This constraint is essential for ensuring feature compatibility and preventing unexpected errors.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/utilities.switch_page/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"streamlit>=1.44.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Connection Secrets in TOML\nDESCRIPTION: This TOML configuration sets up the secrets for connecting to Google Cloud Storage. It includes service account details such as project ID, private key, and client information.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/gcs.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# .streamlit/secrets.toml\n\n[connections.gcs]\ntype = \"service_account\"\nproject_id = \"xxx\"\nprivate_key_id = \"xxx\"\nprivate_key = \"xxx\"\nclient_email = \"xxx\"\nclient_id = \"xxx\"\nauth_uri = \"https://accounts.google.com/o/oauth2/auth\"\ntoken_uri = \"https://oauth2.googleapis.com/token\"\nauth_provider_x509_cert_url = \"https://www.googleapis.com/oauth2/v1/certs\"\nclient_x509_cert_url = \"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with NVM\nDESCRIPTION: Command to install the latest supported Node.js version using NVM (Node Version Manager).\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install node\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Loading Data for Streamlit Application\nDESCRIPTION: Retrieving data for the application using the get_data function, which would contain the sales data for visualization.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/trigger-a-full-script-rerun-from-a-fragment.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndata = get_data()\n```\n\n----------------------------------------\n\nTITLE: Introducing Camera Input in Streamlit\nDESCRIPTION: New feature for uploading images directly from the camera using st.camera_input.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2022.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- 📸 Introducing `st.camera_input` for uploading images straight from your camera.\n```\n\n----------------------------------------\n\nTITLE: Markdown Title and Metadata\nDESCRIPTION: YAML frontmatter and markdown header defining the page title and slug\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/get-started/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Get started with Streamlit Community Cloud\nslug: /deploy/streamlit-community-cloud/get-started\n---\n\n# Get started with Streamlit Community Cloud\n```\n\n----------------------------------------\n\nTITLE: Installing MacOS Development Dependencies\nDESCRIPTION: Commands to install required development tools and dependencies on MacOS including Xcode tools, Homebrew, and various system packages.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Some Apple dev tools (developer.apple.com/downloads)\n$ xcode-select --install\n\n# Install Homebrew\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install the Protobuf compiler, graphviz, database, and virtual environment\n$ brew install protobuf graphviz gawk mysql mysql-client pkg-config unixodbc postgresql pre-commit\n```\n\n----------------------------------------\n\nTITLE: Increasing File Upload Limit for Streamlit Community Cloud (TOML)\nDESCRIPTION: This configuration snippet shows how to increase the file upload limit to 400MB for an app deployed on Streamlit Community Cloud. It should be placed in a .streamlit/config.toml file in the app's GitHub repo.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/increase-upload-limit-cloud.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[server]\nmaxUploadSize = 400\n```\n\n----------------------------------------\n\nTITLE: Documenting Streamlit Release Demos Repository\nDESCRIPTION: This Markdown snippet provides a brief description of the repository's purpose. It indicates that the repository contains a demo app for showcasing Streamlit release highlights, using an emoji for visual emphasis.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/st-experimental-connection/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# release-demos\nA demo app for Streamlit release highlights :star2:\n```\n\n----------------------------------------\n\nTITLE: Exposing Streamlit Port in Docker\nDESCRIPTION: Exposes port 8501 for Streamlit application access.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/tutorials/docker.md#2025-04-21_snippet_10\n\nLANGUAGE: docker\nCODE:\n```\nEXPOSE 8501\n```\n\n----------------------------------------\n\nTITLE: Using Streamlit Extras Animation Component\nDESCRIPTION: Implements the 'let_it_rain' animation from the Streamlit Extras library. This creates a raining animation of the specified emoji with customizable parameters.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_123\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_extras.let_it_rain import rain\n\nrain(emoji=\"🎈\", font_size=54,\n  falling_speed=5, animation_length=\"infinite\",)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Streamlit Connection Function Reference\nDESCRIPTION: Reference to the experimental_connection function in Streamlit, which was used for creating and managing data connections. This feature has been deprecated in version 1.28.0 and users should use st.connection instead.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/experimental-connection.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.experimental_connection\n```\n\n----------------------------------------\n\nTITLE: Streamlit App Prerequisites\nDESCRIPTION: Specifies the minimum Streamlit version required to run the example code. This ensures that the fragment functionality used in the code is available.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"streamlit>=1.37.0\"\n```\n\n----------------------------------------\n\nTITLE: Time Module Import for Progress Bar\nDESCRIPTION: Simple import statement for the time module, used in progress bar demonstration.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/main-concepts.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport time\n```\n\n----------------------------------------\n\nTITLE: Creating packages.txt for APT-GET Dependency in Streamlit\nDESCRIPTION: This snippet demonstrates how to create a 'packages.txt' file containing necessary APT-GET dependencies for your Streamlit app. This includes the installation of `libgl1`, required to resolve the ImportError.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/libgl.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"libgl1\"\n```\n\n----------------------------------------\n\nTITLE: Basic Requirements.txt Configuration\nDESCRIPTION: Simple requirements.txt file showing basic package dependencies without version constraints.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/concepts/dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nstreamlit\npandas\nnumpy\n```\n\n----------------------------------------\n\nTITLE: Requirements.txt File for Streamlit Authentication App\nDESCRIPTION: Specifies the Python package dependencies required for the Streamlit application with Google authentication functionality.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/google.md#2025-04-21_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nstreamlit>=1.42.0\nAuthlib>=1.3.2\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Loading Status with Cache Indication (Python)\nDESCRIPTION: This code snippet updates the text element to indicate that the data loading process has completed and is utilizing the Streamlit cache. It uses `st.text` to display a message confirming that `st.cache_data` is being used.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/fundamentals/tutorials/create-an-app.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndata_load_state.text(\"Done! (using st.cache_data)\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading Streamlit using pip\nDESCRIPTION: Command to upgrade Streamlit to the latest version using pip package manager.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade streamlit\n```\n\n----------------------------------------\n\nTITLE: Installing pytest\nDESCRIPTION: This command installs the pytest framework, a popular tool for writing and running tests in Python, into your Streamlit development environment.  This is a prerequisite for running the examples and writing tests for your Streamlit applications.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install pytest\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Section Headers with YAML Frontmatter\nDESCRIPTION: Markdown document frontmatter and main header defining the page title and slug\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Develop\nslug: /develop\n---\n\n# Develop\n```\n\n----------------------------------------\n\nTITLE: Referencing st.columns API in Markdown\nDESCRIPTION: A Markdown link that references the st.columns API documentation using Streamlit's internal link format.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/why-streamlit-restrict-nested-columns.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`st.columns`](/develop/api-reference/layout/st.columns)\n```\n\n----------------------------------------\n\nTITLE: Using enableStaticServing Config Option in Streamlit 1.18.0\nDESCRIPTION: The enableStaticServing config option allows apps to serve small, static media files, providing better performance for static assets.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2023.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nenableStaticServing\n```\n\n----------------------------------------\n\nTITLE: Specifying Streamlit Package Version Requirement\nDESCRIPTION: Defines the minimum required version of Streamlit package using the greater than or equal to operator. Requires Streamlit version 1.44.0 or higher.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/navigation.example_2/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Streamlit Version Requirement\nDESCRIPTION: This line defines the minimum required version of Streamlit for the project. It uses the greater than or equal to operator (>=) to indicate that Streamlit version 1.44.0 or any later version is acceptable.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/tutorials/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Viewing Configuration Options via Command Line\nDESCRIPTION: This bash command allows users to view all available configuration options for their Streamlit application. It's a useful tool for understanding what configurations can be set without needing to refer to the documentation.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/options.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit config show\n```\n\n----------------------------------------\n\nTITLE: Using ExperimentalBaseConnection Class in Python\nDESCRIPTION: Experimental base class for implementing data connections in Streamlit. This class was deprecated in version 1.28.0 in favor of st.connections.BaseConnection. Used for creating custom connection implementations with connection management and caching capabilities.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/connections-experimentalbaseconnection.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.connections.ExperimentalBaseConnection\n```\n\n----------------------------------------\n\nTITLE: Running a Streamlit App\nDESCRIPTION: Command to run the Streamlit application specified in app.py file.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Images in Markdown for Streamlit Docs\nDESCRIPTION: Demonstrates how to display multiple images on the same line using the Image and Flex tags in markdown for Streamlit documentation.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<Flex>\n<Image alt=\"Bigquery screenshot 7\" src=\"/images/databases/big-query-7.png\" />\n<Image alt=\"Bigquery screenshot 8\" src=\"/images/databases/big-query-8.png\" />\n<Image alt=\"Bigquery screenshot 9\" src=\"/images/databases/big-query-9.png\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Parameters in Streamlit with Python (Deprecated)\nDESCRIPTION: Using the deprecated st.experimental_get_query_params() function to get query parameters shown in the browser's URL bar.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/caching-and-state/_index.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nparam_dict = st.experimental_get_query_params()\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Streamlit Badge\nDESCRIPTION: Markdown frontmatter defining the API documentation page for Streamlit's badge component, including title, slug and description\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/badge.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: st.badge\nslug: /develop/api-reference/text/st.badge\ndescription: st.badge displays a colored badge or tag.\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Streamlit (Python)\nDESCRIPTION: This Python code snippet imports the Streamlit library, which is essential for building interactive web applications with Python. This import statement makes all the Streamlit functions and classes available for use in the application's code. It is the first step in creating a Streamlit application.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/google.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n```\n\n----------------------------------------\n\nTITLE: Downgrading Streamlit to a Specific Version\nDESCRIPTION: Command to downgrade Streamlit to a specific version for testing regression issues.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/sanity-checks.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade streamlit==1.0.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Streamlit Documentation\nDESCRIPTION: This snippet defines the required Python packages for the Streamlit documentation project. It specifies a minimum version for Streamlit and includes the LangChain OpenAI integration package.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/tutorial-source/llm-18-lines-of-code/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nstreamlit>=1.44.0\nlangchain-openai\n```\n\n----------------------------------------\n\nTITLE: Logger Configuration Options in TOML\nDESCRIPTION: Settings for Streamlit's internal logger, including log level and message format.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[logger]\n\n# Level of logging for Streamlit's internal logger: \"error\", \"warning\",\n# \"info\", or \"debug\".\n# Default: \"info\"\nlevel = \"info\"\n\n# String format for logging messages. If logger.datetimeFormat is set,\n# logger messages will default to `%(asctime)s.%(msecs)03d %(message)s`.\n# See Python's documentation for available attributes:\n# https://docs.python.org/3/library/logging.html#formatter-objects\n# Default: \"%(asctime)s %(message)s\"\nmessageFormat = \"%(asctime)s %(message)s\"\n```\n\n----------------------------------------\n\nTITLE: Installing AgGrid Component with pip\nDESCRIPTION: Command to install the AgGrid component package using pip package manager.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install streamlit-aggrid\n```\n\n----------------------------------------\n\nTITLE: Creating Table and Inserting Data in PostgreSQL\nDESCRIPTION: SQL commands to create a table named 'mytable' with 'name' and 'pet' columns, and insert sample data into it.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/postgresql.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE mytable (\n    name            varchar(80),\n    pet             varchar(80)\n);\n\nINSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js on Ubuntu\nDESCRIPTION: Optional command to update Node.js installation on Ubuntu systems.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n```\n\n----------------------------------------\n\nTITLE: Streamlit Experimental Rerun Function Reference\nDESCRIPTION: Demonstration of the deprecated st.experimental_rerun function. This function was used to immediately rerun the Streamlit script. As of version 1.27.0, developers should use st.rerun instead.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/control-flow/experimental_rerun.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nst.experimental_rerun()\n```\n\n----------------------------------------\n\nTITLE: Downgrading Streamlit with conda\nDESCRIPTION: This code snippet demonstrates how to downgrade Streamlit to version 0.37 using conda. It uses the conda install command to specify the desired Streamlit version.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2019.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"conda install streamlit=0.37\"\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Limit via Command Line Flag (Bash)\nDESCRIPTION: This command demonstrates how to set the maxUploadSize option when running a Streamlit app from the command line.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/increase-upload-limit-cloud.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_script.py --server.maxUploadSize 200\n```\n\n----------------------------------------\n\nTITLE: Password field with st.text_input\nDESCRIPTION: This snippet shows how to create a password input field using `st.text_input()` in Streamlit. Setting the `type` parameter to `password` masks the input, making it suitable for password entry.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2020.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"st.text_input()\"\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Application via Command Line\nDESCRIPTION: Command to run a Streamlit application directly from the terminal\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/anaconda-distribution.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run app.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m streamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Creating API Reference Page in Markdown for Streamlit Docs\nDESCRIPTION: Illustrates how to create a new API reference page for a Streamlit function using markdown and the Autofunction tag.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: st.my_chart\nslug: /develop/api-reference/charts/st.my_chart\n---\n\n<Autofunction function=\"streamlit.my_chart\" />\n```\n\n----------------------------------------\n\nTITLE: Using the new color-picker widget\nDESCRIPTION: This snippet highlights the usage of the new color-picker widget introduced in Streamlit version 0.59.0. It utilizes the `st.beta_color_picker()` function to allow users to select a color.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2020.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"st.beta_color_picker()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Path in Python\nDESCRIPTION: Code to properly configure the component path to use the built frontend assets instead of development server.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/custom-components/publish-component.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nparent_dir = os.path.dirname(os.path.abspath(__file__))\nbuild_dir = os.path.join(parent_dir, \"frontend/build\")\ncomponent = components.declare_component(\"new_component_name\", path=build_dir)\n```\n\n----------------------------------------\n\nTITLE: Testing Interactive Components\nDESCRIPTION: Collection of examples showing how to test various interactive Streamlit components.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_166\n\nLANGUAGE: python\nCODE:\n```\nat.button[0].click().run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.chat_input[0].set_value(\"What is Streamlit?\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.checkbox[0].check().run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.color_picker[0].pick(\"#FF4B4B\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nrelease_date = datetime.date(2023, 10, 26)\nat.date_input[0].set_value(release_date).run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.multiselect[0].select(\"New York\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.number_input[0].increment().run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.radio[0].set_value(\"New York\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.select_slider[0].set_range(\"A\",\"C\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.selectbox[0].select(\"New York\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.slider[0].set_range(2,5).run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.text_area[0].input(\"Streamlit is awesome!\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.text_input[0].input(\"Streamlit\").run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.time_input[0].increment().run()\n```\n\nLANGUAGE: python\nCODE:\n```\nat.toggle[0].set_value(\"True\").run()\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration Options in Streamlit\nDESCRIPTION: Demonstrates how to retrieve a single configuration option, such as the primary color from the theme settings.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_157\n\nLANGUAGE: python\nCODE:\n```\nst.get_option(\"theme.primaryColor\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Streamlit Configuration in Bash\nDESCRIPTION: Command to show all available Streamlit configurations using the CLI.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/configuration/config-toml.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit config show\n```\n\n----------------------------------------\n\nTITLE: HTML InlineCallout Components for Navigation\nDESCRIPTION: HTML component structure defining a container with multiple inline callouts for different documentation sections, including concepts, API reference, tutorials and quick references.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<InlineCalloutContainer>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"book\"\n        bold=\"Concepts.\"\n        href=\"/develop/concepts\"\n    >Learn how Streamlit works with in-depth guides to our execution model and features.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"list\"\n        bold=\"API reference.\"\n        href=\"/develop/api-reference\"\n    >Learn about our API with function definitions and examples.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"auto_awesome\"\n        bold=\"Tutorials.\"\n        href=\"/develop/tutorials\"\n    >Follow step-by-step instructions to build example apps and useful snippets.</InlineCallout>\n    <InlineCallout\n        color=\"indigo-70\"\n        icon=\"bolt\"\n        bold=\"Quick references.\"\n        href=\"/develop/quick-reference\"\n    >Check out our quick references for easy access to convenient information like our changelog, cheat sheet, pre-release features, and roadmap.</InlineCallout>\n</InlineCalloutContainer>\n```\n\n----------------------------------------\n\nTITLE: Caching function using st.cache\nDESCRIPTION: This snippet references the use of `@st.cache` for caching function results in Streamlit. It now supports expiration options with `max_entries` and `ttl` arguments.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2020.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"@st.cache\"\n```\n\n----------------------------------------\n\nTITLE: Executing Pytest in Shell\nDESCRIPTION: This snippet demonstrates how to run tests using Pytest in the shell from a project's root directory. It's assumed that tests are located in a 'tests' directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/beyond-the-basics.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd myproject\npytest tests/\n```\n\n----------------------------------------\n\nTITLE: Disabling CORS Protection in Streamlit\nDESCRIPTION: Command to start Streamlit with CORS protection disabled for troubleshooting loading issues.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/remote-start.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run my_app.py --server.enableCORS=false\n```\n\n----------------------------------------\n\nTITLE: Updating Streamlit App Title in diff Format\nDESCRIPTION: A diff showing how to modify the title of a Streamlit app by adding the word 'Streamlit' to the title text. The diff shows the removal of the original title and addition of the updated title with proper emoji formatting.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/cloud-quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-st.title(\"🎈 My new app\")\n+st.title(\"🎈 My new Streamlit app\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ubuntu Development Environment\nDESCRIPTION: Commands for installing required development dependencies on Ubuntu including Yarn, Python tools, and system packages.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Set up the Yarn repo\n$ curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\n$ echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n\n$ sudo apt-get update\n\n# Install Pyenv for testing multiple Python versions\n$ sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\\nxz-utils tk-dev libffi-dev liblzma-dev python-openssl mysql-client libmysqlclient-dev unixodbc-dev\n$ curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\n\n# Install some other deps\n$ sudo apt install graphviz python3-distutils pre-commit\n\n# Install Yarn, pip, Protobuf, npm\n$ sudo apt install yarn npm python-pip protobuf-compiler libgconf-2-4\n```\n\n----------------------------------------\n\nTITLE: Specifying Streamlit Dependency Version Requirement\nDESCRIPTION: This snippet defines the minimum required Streamlit version (1.44.0 or higher) needed for the project. This is typically used in a requirements.txt file for dependency management.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/navigation.example_1/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Setting PYTHONPATH for Streamlit Module Watching\nDESCRIPTION: Bash command to add external module paths to PYTHONPATH environment variable before running a Streamlit app. This enables Streamlit to watch for changes in modules outside the main app directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/streamlit-watch-changes-other-modules-importing-app.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTHONPATH=$PYTHONPATH:/path/to/module\nstreamlit run your_script.py\n```\n\n----------------------------------------\n\nTITLE: Pinning Streamlit Version in Dependency File\nDESCRIPTION: This snippet shows how to specify a pinned version of Streamlit in a dependency file. It demonstrates the syntax for exact version pinning in Python dependency management.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/manage-your-app/upgrade-streamlit.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstreamlit==1.37.0\n```\n\n----------------------------------------\n\nTITLE: Caching datetime objects with custom hashing\nDESCRIPTION: This example shows how to override Streamlit's default hashing for `datetime` objects using the `hash_funcs` argument in `st.cache_data`. A custom lambda function is provided to format the `datetime` object as a string, allowing Streamlit to cache the function based on the formatted date and time. This approach enables caching for `datetime` objects that Streamlit cannot hash by default.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/caching.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nimport pytz\nimport streamlit as st\n\ntz = pytz.timezone(\"Europe/Berlin\")\n\n@st.cache_data(hash_funcs={datetime: lambda x: x.strftime(\"%a %d %b %Y, %I:%M%p\")})\ndef load_data(dt):\n    return dt\n\nnow = datetime.now()\nst.text(load_data(dt=now))\n\nnow_tz = tz.localize(datetime.now())\nst.text(load_data(dt=now_tz))\n```\n\n----------------------------------------\n\nTITLE: Importing ImageColumn from Streamlit's column_config module\nDESCRIPTION: This snippet demonstrates how to import the ImageColumn class from Streamlit's column_config module. It's used to configure image columns in Streamlit data tables.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/imagecolumn.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.column_config import ImageColumn\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Folder in Terminal\nDESCRIPTION: Command to change directory to your project folder before setting up the virtual environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd myproject\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Streamlit Application\nDESCRIPTION: This requirements.txt file specifies the exact versions of Python packages needed for a Streamlit application. It includes pandas and numpy for data manipulation, altair and pydeck for visualization, OpenCV for computer vision processing, and Streamlit itself as the web application framework.\nSOURCE: https://github.com/streamlit/docs/blob/main/python/api-examples-source/mpa-hello/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npandas==1.5.3\nnumpy==1.23.5\naltair==4.2.0\npydeck==0.8.0\nopencv-python-headless==4.8.1.78\nstreamlit>=1.44.0\n```\n\n----------------------------------------\n\nTITLE: Upgrading Streamlit with Poetry\nDESCRIPTION: Commands to update Streamlit to the latest version using Poetry package manager and verify the installed version.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/FAQ/upgrade-version-streamlit.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry update streamlit\nstreamlit version\n```\n\n----------------------------------------\n\nTITLE: Configuring Streamlit Secrets for Google Auth (TOML)\nDESCRIPTION: This snippet configures the `.streamlit/secrets.toml` file with the necessary credentials and settings for Google authentication in a Streamlit application. It includes the redirect URI, cookie secret, client ID, client secret, and the server metadata URL. The `cookie_secret` is used for signing the user's identity cookie, which Streamlit stores upon login.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/authentication/google.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n\n[auth]\nredirect_uri = \"http://localhost:8501/oauth2callback\"\ncookie_secret = \"xxx\"\nclient_id = \"xxx\"\nclient_secret = \"xxx\"\nserver_metadata_url = \"https://accounts.google.com/.well-known/openid-configuration\"\n\n```\n\n----------------------------------------\n\nTITLE: Importing SnowparkConnection in Streamlit (Python)\nDESCRIPTION: This snippet shows how to import the SnowparkConnection class from Streamlit's connections module. Note that this class is deprecated and users should use SnowflakeConnection instead.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/connections-snowpark.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.connections import SnowparkConnection\n```\n\n----------------------------------------\n\nTITLE: Configuring Linting and Test Reporting in GitHub Actions\nDESCRIPTION: This snippet shows how to extend the workflow with Ruff for linting and pytest-results-action for detailed test reports. It demonstrates using 'ruff: true' for enabling linting and setting pytest arguments for test output in JUnit XML format.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-testing/automate-tests.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: streamlit/streamlit-app-action@v0.0.3\n  with:\n    app-path: streamlit_app.py\n    ruff: true\n\n# ... setup as above ...\n- uses: streamlit/streamlit-app-action@v0.0.3\n  with:\n    app-path: streamlit_app.py\n    # Add pytest-args to output junit xml\n    pytest-args: -v --junit-xml=test-results.xml\n- if: always()\n  uses: pmeier/pytest-results-action@v0.6.0\n  with:\n    path: test-results.xml\n    summary: true\n    display-options: fEX\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders, Help, and Options in Streamlit\nDESCRIPTION: Demonstrates how to use placeholders (`st.empty`, `st.container`) to replace or insert elements out of order, access help documentation (`st.help`), get and set Streamlit options (`st.get_option`, `st.set_option`), set page configuration (`st.set_page_config`), and access query parameters (`st.query_params`).\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Replace any single element.\nelement = st.empty()\nelement.line_chart(...)\nelement.text_input(...)  # Replaces previous.\n\n# Insert out of order.\nelements = st.container()\nelements.line_chart(...)\nst.write(\"Hello\")\nelements.text_input(...)  # Appears above \"Hello\".\n\nst.help(pandas.DataFrame)\nst.get_option(key)\nst.set_option(key, value)\nst.set_page_config(layout=\"wide\")\nst.query_params[key]\nst.query_params.from_dict(params_dict)\nst.query_params.get_all(key)\nst.query_params.clear()\nst.html(\"<p>Hi!</p>\")\n```\n\n----------------------------------------\n\nTITLE: Specific Package Error Example - OS Incompatibility\nDESCRIPTION: Error message shown when attempting to install Windows-specific package pywin32 in a Linux environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/no-matching-distribution.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nERROR: No matching distribution found for pywin32\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Streamlit Versions in Markdown\nDESCRIPTION: This code snippet shows a markdown table that lists the supported Streamlit versions for security updates. It indicates that versions 1.11.1 and above are currently supported.\nSOURCE: https://github.com/streamlit/docs/blob/main/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version   | Supported |\n| --------- | --------- |\n| >= 1.11.1 | ✅        |\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Account Deletion Process\nDESCRIPTION: Structured markdown documentation detailing the account deletion process, including frontmatter metadata, warnings, and step-by-step instructions with image references.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/manage-your-account/delete-your-account.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Delete your account\nslug: /deploy/streamlit-community-cloud/manage-your-account/delete-your-account\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Search Engine Crawler Rules in robots.txt\nDESCRIPTION: Basic robots.txt configuration that applies to all user agents (*) and restricts access to the /admin/ directory while implicitly allowing access to all other paths.\nSOURCE: https://github.com/streamlit/docs/blob/main/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /admin/\n```\n\n----------------------------------------\n\nTITLE: Caching Data Objects in Streamlit\nDESCRIPTION: Demonstrates how to cache data objects using `@st.cache_data` to improve performance. Includes examples of clearing the cache for specific function calls or all cached data.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# E.g. Dataframe computation, storing downloaded data, etc.\n@st.cache_data\ndef foo(bar):\n    # Do something expensive and return data\n    return data\n# Executes foo\nd1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by value, d1 == d2\nd2 = foo(ref1)\n# Different arg, so function foo executes\nd3 = foo(ref2)\n# Clear the cached value for foo(ref1)\nfoo.clear(ref1)\n# Clear all cached entries for this function\nfoo.clear()\n# Clear values from *all* in-memory or on-disk cached functions\nst.cache_data.clear()\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the knowledge base documentation page, defining the title and URL slug.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Knowledge Base\nslug: /knowledge-base\n---\n```\n\n----------------------------------------\n\nTITLE: Streamlit Fragment for Live Data Update\nDESCRIPTION: Defines a Streamlit fragment that updates the data and displays it in a line chart. The `run_every` parameter controls how frequently the fragment reruns. The function appends new data to the existing data and updates the line chart.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/execution-flow/fragments/start-and-stop-fragment-auto-reruns.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"@st.fragment(run_every=run_every)\ndef show_latest_data():\n    last_timestamp = st.session_state.data.index[-1]\n    st.session_state.data = pd.concat(\n        [st.session_state.data, get_recent_data(last_timestamp)]\n    )\n    st.session_state.data = st.session_state.data[-100:]\n    st.line_chart(st.session_state.data)\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for User Input in Streamlit Chat\nDESCRIPTION: This snippet demonstrates the traditional assignment approach equivalent to the walrus operator syntax shown in the previous snippet, for accepting and processing user input in a Streamlit chat interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/llms/chat-response-feedback.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprompt = st.chat_input(\"Say something\")\nif prompt:\n    with st.chat_message(\"user\"):\n        st.write(prompt)\n    st.session_state.history.append({\"role\": \"user\", \"content\": prompt})\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Sequential Toast Messages in Streamlit\nDESCRIPTION: Demonstrates how to show multiple stacked toast notifications with delays between them. Uses time.sleep() for spacing and shows how to add custom icons to toast messages.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/status/toast.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nimport time\n\nif st.button('Three cheers'):\n    st.toast('Hip!')\n    time.sleep(.5)\n    st.toast('Hip!')\n    time.sleep(.5)\n    st.toast('Hooray!', icon='🎉')\n```\n\n----------------------------------------\n\nTITLE: Defining Class Within App Script\nDESCRIPTION: Example showing how class redefinition affects isinstance() checks when the class is defined within the main app script.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/app-design/custom-classes.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# app.py\nimport streamlit as st\n\n# MyClass gets redefined every time app.py reruns\nclass MyClass:\n    def __init__(self, var1, var2):\n        self.var1 = var1\n        self.var2 = var2\n\nif \"my_instance\" not in st.session_state:\n  st.session_state.my_instance = MyClass(\"foo\", \"bar\")\n\n# Displays True on the first run then False on every rerun\nst.write(isinstance(st.session_state.my_instance, MyClass))\n\nst.button(\"Rerun\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in Streamlit Python Code\nDESCRIPTION: Example showing how to access secrets defined in secrets.toml from within a Streamlit application using st.secrets. Demonstrates both dictionary-style and dot notation access patterns.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/connections/secrets-toml.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nst.secrets[\"OpenAI_key\"] == \"your OpenAI key\"\n\"sally\" in st.secrets.whitelist\nst.secrets[\"database\"][\"user\"] == \"your username\"\nst.secrets.database.password == \"your password\"\n```\n\n----------------------------------------\n\nTITLE: Using st.title Function Reference Component in Markdown\nDESCRIPTION: This snippet shows how the Autofunction component is used to automatically generate documentation for the streamlit.title function. The Autofunction component pulls in the function signature and documentation from the Streamlit codebase.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/text/title.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Autofunction function=\"streamlit.title\" />\n```\n\n----------------------------------------\n\nTITLE: Using Stqdm Progress Bar Component in Streamlit\nDESCRIPTION: Implements the Stqdm component, which provides a simple way to handle progress bars in Streamlit apps. This third-party component works with iterables like range.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_121\n\nLANGUAGE: python\nCODE:\n```\nfrom stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Limit in Global Config File (TOML)\nDESCRIPTION: This snippet shows how to set the maxUploadSize option in a global config file for Streamlit. It's used to increase the default file upload limit of 200MB.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/increase-upload-limit-cloud.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[server]\nmaxUploadSize = 200\n```\n\n----------------------------------------\n\nTITLE: Executing Streamlit Config Show Command in Bash\nDESCRIPTION: This command prints all available configuration options for Streamlit, including their descriptions, default values, and current values. It's useful for reviewing and debugging Streamlit configurations.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/config.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit config show\n```\n\n----------------------------------------\n\nTITLE: Python Package Error Message Example\nDESCRIPTION: Example error message shown when trying to install packages that are either part of Python Standard Library, misspelled, or incompatible with the deployment environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/dependencies/no-matching-distribution.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nERROR: No matching distribution found for\n```\n\n----------------------------------------\n\nTITLE: Downgrading Streamlit with pip\nDESCRIPTION: This code snippet demonstrates how to downgrade Streamlit to version 0.37 using pip.  It specifies the exact version number to install, ensuring a consistent downgrade.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2019.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install --upgrade streamlit==0.37\"\n```\n\n----------------------------------------\n\nTITLE: Importing NumberColumn from Streamlit's column_config module in Python\nDESCRIPTION: This snippet shows how to import the NumberColumn class from Streamlit's column_config module. It is typically used to configure number columns in Streamlit data displays.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/data/column_config/numbercolumn.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit.column_config import NumberColumn\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App with Command Syntax\nDESCRIPTION: The basic syntax for running a Streamlit app using the command line interface. It includes the command, entrypoint file, optional configuration options, and script arguments.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/run.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run <entrypoint file> [-- config options] [script args]\n```\n\n----------------------------------------\n\nTITLE: Temperature Slider with Session State\nDESCRIPTION: Example demonstrating widget state association with session state using a temperature slider.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/architecture/session-state.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nif \"celsius\" not in st.session_state:\n    # set the initial default value of the slider widget\n    st.session_state.celsius = 50.0\n\nst.slider(\n    \"Temperature in Celsius\",\n    min_value=-100.0,\n    max_value=100.0,\n    key=\"celsius\"\n)\n\n# This will get the value of the slider widget\nst.write(st.session_state.celsius)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Certificate Files in Streamlit\nDESCRIPTION: Demonstrates how to configure SSL certificate and key files in a Streamlit configuration file for local HTTPS support. Requires both certificate and key file paths to be specified.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/concepts/configuration/https.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[server]\\nsslCertFile = '/path/to/certchain.pem'\\nsslKeyFile = '/path/to/private.key'\n```\n\n----------------------------------------\n\nTITLE: Snowflake Connection Configuration in .streamlit/secrets.toml\nDESCRIPTION: Configuration for Snowflake connection parameters using key-pair authentication, specifying account, user, authentication, and database details\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/tutorials/databases/snowflake.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[connections.snowflake]\naccount = \"xxxxxxx-xxxxxxx\"\nuser = \"xxx\"\nprivate_key_file = \"../xxx/xxx.p8\"\nrole = \"xxx\"\nwarehouse = \"xxx\"\ndatabase = \"xxx\"\nschema = \"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Creating Front Matter in Markdown for Streamlit Docs\nDESCRIPTION: Demonstrates how to add front matter to a markdown file, defining the page title and URL slug for Streamlit documentation.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Create a Component\nslug: /develop/concepts/custom-components/create\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Code in Streamlit\nDESCRIPTION: Shows how to display code in Streamlit using `st.echo()`. The code within the `with` block will be executed and printed to the app.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/api-cheat-sheet.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwith st.echo():\n    st.write(\"Code will be executed and printed\")\n```\n\n----------------------------------------\n\nTITLE: Windows WSL Python Environment Setup\nDESCRIPTION: Commands for setting up Python environment in Windows Subsystem for Linux (WSL).\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install a Python version using pyenv with the `CONFIGURE_OPTS=--enable-shared` flag set:\n$ CONFIGURE_OPTS=--enable-shared pyenv install 3.7.5 && pyenv global 3.7.5\n\n$ python -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Adding a Callout in Markdown for Streamlit Docs\nDESCRIPTION: Shows how to create a callout (Note, Tip, Warning, Important) in markdown format for Streamlit documentation.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<Note>\n\nThis is a **note** that links to our [website](https://docs.streamlit.io/).\n\n</Note>\n```\n\n----------------------------------------\n\nTITLE: Creating Data Editor Widgets in Streamlit\nDESCRIPTION: Displays an interactive data editor for editing dataframes. Allows users to modify data directly in the app interface.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/_index.md#2025-04-21_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nedited = st.data_editor(df, num_rows=\"dynamic\")\n```\n\n----------------------------------------\n\nTITLE: Search Engine Query Format\nDESCRIPTION: Example search query format to find indexed Streamlit apps in search engines using the site: operator.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/deploy/community-cloud/share-your-app/indexability.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsite:<your-custom-subdomain>.streamlit.app\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Functions in Streamlit\nDESCRIPTION: New method to programmatically clear st.experimental_memo and st.experimental_singleton caches.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/quick-references/release-notes/2022.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- 🚮 Clear `st.experimental_memo` and `st.experimental_singleton` programmatically by using the `clear()` method on a cached function.\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Documentation Repository\nDESCRIPTION: Commands for cloning the Streamlit docs repository and starting the development environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/streamlit/docs.git\ncd docs/\n\n# Install NPM dependencies\nmake\n\n# Start development server\nmake up\n```\n\n----------------------------------------\n\nTITLE: Checking Streamlit Process Status on Linux\nDESCRIPTION: Command to verify if Streamlit is running on a remote Linux server by checking active processes.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/kb/deployments/remote-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nps -Al | grep streamlit\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit App from Subdirectory\nDESCRIPTION: Example of running a Streamlit app located in a subdirectory of the current working directory.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/develop/api-reference/command-line/run.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run your_subdirectory/your_app.py\n```\n\n----------------------------------------\n\nTITLE: Installing Streamlit with pip\nDESCRIPTION: Command to install Streamlit package using pip within the activated virtual environment.\nSOURCE: https://github.com/streamlit/docs/blob/main/content/get-started/installation/command-line.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install streamlit\n```"
  }
]