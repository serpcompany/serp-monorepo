[
  {
    "owner": "neoforged",
    "repo": "neoforge",
    "content": "TITLE: Creating a TestFramework with FrameworkConfiguration Builder in Java\nDESCRIPTION: This code demonstrates how to create a TestFramework instance using the FrameworkConfiguration builder. It configures client-side settings, allows client modifications, enables synchronization to clients, and registers test commands.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n  final TestFrameworkInternal framework = FrameworkConfiguration.builder(new ResourceLocation(\"examplemod:tests\")) // The ID of the framework. Used by logging, primarily\n    .clientConfiguration(() -> ClientConfiguration.builder() // Client-side compatibility configuration. This is COMPLETLY optional, but it is recommended for ease of use.\n      .toggleOverlayKey(GLFW.GLFW_KEY_J) // The key used to toggle the tests overlay\n      .openManagerKey(GLFW.GLFW_KEY_N) // The key used to open the Test Manager screen\n      .build())\n     \n    .allowClientModifications() // Allow OP'd clients to modify the status of tests, and to enable them\n    .syncToClients() // Sync the status of tests to clients\n  \n    .build().create(); // Build and store the InternalTestFramework. We use the \"internal\" version because we want to access methods not usually exposed, like the init method\n      \n  // Initialise this framework, using the mod event bus of the currently loading mod, and the container of the currently loading mod.\n  // The container is used for collecting annotations.\n  // This method will collect and register tests, structure templates, group data, and will fire init listeners.\n  framework.init(modBus, modContainer);\n\n  // Register the commands of the framework under the `tests` top-level command.\n  NeoForge.EVENT_BUS.addListener((final RegisterCommandsEvent event) -> {\n    final LiteralArgumentBuilder<CommandSourceStack> node = Commands.literal(\"tests\");\n    framework.registerCommands(node);\n    event.getDispatcher().register(node);\n  });\n```\n\n----------------------------------------\n\nTITLE: Automating NeoForge Tests with GameTest in Java\nDESCRIPTION: Shows how to automate a NeoForge test using GameTest. This example includes event listener registration, template creation, and GameTest sequence definition.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/NEOGAMETESTS.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport net.minecraft.core.BlockPos;\nimport net.minecraft.gametest.framework.GameTest;\nimport net.minecraft.references.Items;\nimport net.minecraft.world.entity.EntityType;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.level.GameType;\nimport net.neoforged.neoforge.event.entity.player.PlayerEvent;\nimport net.neoforged.testframework.annotation.TestHolder;\nimport net.neoforged.testframework.DynamicTest;\nimport net.neoforged.testframework.gametest.EmptyTemplate;\nimport net.neoforged.testframework.gametest.GameTestPlayer;\nimport net.neoforged.testframework.gametest.StructureTemplateBuilder;\n\nclass SomeTestClass {\n    @GameTest\n    @EmptyTemplate(value = \"3x3x3\", floor = true)\n    @TestHolder(description = \"Tests some interesting thing\")\n    static void someNiceTest(final DynamicTest test) {\n        test.eventListeners().neoforge().addListener((final PlayerEvent.ItemPickupEvent event) -> {\n            if (event.getStack().is(Items.MELON_SEEDS)) {\n                // If the event is fired and detects pickup of melon seeds, the test will be considered pass\n                // and the player will get pumpkin seeds too\n                event.getEntity().addItem(new ItemStack(Items.PUMPKIN_SEEDS));\n                test.pass();\n            }\n        });\n\n        // Another way of registering templates in-code:\n        // test.registerGameTestTemplate(StructureTemplateBuilder.withSize(3, 4, 3)\n        //        .fill(0, 0, 0, 2, 0, 2, Blocks.IRON_BLOCK));\n\n        test.onGameTest(helper -> {\n            // Spawn a player at the centre of the test\n            final GameTestPlayer player = helper.makeTickingMockServerPlayerInLevel(GameType.SURVIVAL)\n                    .moveToCentre();\n            // Spawn melon seeds at the player's feet.\n            // The player is at the centre (x -> 1, z -> 1; x are the south coords and z the north ones, 0 0 being the right-front corner, next to the structure block)\n            // (y -> 2, y being the vertical position, which is 1-indexed; since 1, the first layer, is the floor, the player is at 2, the second layer)\n            helper.spawnItem(Items.MELON_SEEDS, 1, 2, 1);\n            \n            helper.startSequence()\n                // Wait until the player picked up the seeds \n                .thenWaitUntil(() -> helper.assertTrue(player.getInventory().hasAnyMatching(stack -> stack.is(Items.MELON_SEEDS)), \"player has no melon seeds\"))\n                // Check for pumpkin seeds in the player's inventory\n                    .thenExecute(() -> helper.assertTrue(player.getInventory().hasAnyMatching(stack -> stack.is(Items.PUMPKIN_SEEDS)), \"player had no pumpkin seeds in their inventory\"))\n                // All assertions were true, so the test is a success!\n                .thenSucceed();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic GameTest with Lever Testing\nDESCRIPTION: Example of a basic test class extending AbstractTest with GameTest integration. Shows how to test lever functionality using GameTestHelper and sequence operations.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@TestHolder(\"lever_test\")\npublic class LeverTest extends AbstractTest {\n  @Override\n  @GameTest(template = \"examplemod:lever_test_template\")\n  protected void onGameTest(GameTestHelper helper) {\n    helper.startSequence()\n      .thenExecute(() -> helper.pullLever(0, 2, 0))\n      .thenIdle(1)\n      .thenWaitUntil(0, () -> helper.assertBlockProperty(new BlockPos(0, 2, 0), LeverBlock.POWERED, true))\n      .thenExecute(this::pass)\n      .thenSucceed();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Test with AbstractTest in Java\nDESCRIPTION: This code shows how to create a basic test by extending AbstractTest and using the TestHolder annotation. This test checks if the EntityEvent.EnteringSection is fired when a player moves to another chunk, passing the test when this condition is met.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@TestHolder(\n    value = \"entity_entering_section\",\n    description = \"Tests if the EntityEvent.EnteringSection will be fired when a player moves to another chunk.\"\n)\npublic class EnteringSectionEventTest extends AbstractTest {\n  @Override\n  public void onEnabled(@NotNull EventListenerGroup listeners) {\n    logger().info(\"Basic test 'entity_entering_section' has been enabled!\");\n    listeners.getFor(Bus.NEOFORGE).addListener((final EntityEvent.EnteringSection event) -> {\n      if (event.getEntity() instanceof Player) {\n        pass();\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners for NeoForge Tests in Java\nDESCRIPTION: Illustrates how to register event listeners for a NeoForge test. This example shows listening for an item pickup event and passing the test based on specific conditions.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/NEOGAMETESTS.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport net.minecraft.references.Items;\nimport net.minecraft.world.item.ItemStack;\nimport net.neoforged.neoforge.event.entity.player.PlayerEvent;\nimport net.neoforged.testframework.annotation.TestHolder;\nimport net.neoforged.testframework.DynamicTest;\n\nclass SomeTestClass {\n    @TestHolder(description = \"Tests some interesting thing\")\n    static void someNiceTest(final DynamicTest test) {\n        test.eventListeners().neoforge().addListener((final PlayerEvent.ItemPickupEvent event) -> {\n            if (event.getStack().is(Items.MELON_SEEDS)) {\n                // If the event is fired and detects pickup of melon seeds, the test will be considered pass\n                // and the player will get pumpkin seeds too\n                event.getEntity().addItem(new ItemStack(Items.PUMPKIN_SEEDS));\n                test.pass();\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Method-Based GameTest Implementation\nDESCRIPTION: Demonstrates a method-based test approach using DynamicTest with GameTest integration. Shows the same lever testing functionality in a more concise format.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@TestHolder(\"lever_test\")\n@GameTest(template = \"examplemod:lever_test_template\")\nstatic void leverTest(final DynamicTest test) {\n  test.onGameTest(helper -> helper.startSequence()\n    .thenExecute(() -> helper.pullLever(0, 2, 0))\n    .thenIdle(1)\n    .thenWaitUntil(0, () -> helper.assertBlockProperty(new BlockPos(0, 2, 0), LeverBlock.POWERED, true))\n    .thenExecute(test::pass)\n    .thenSucceed());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Method-Based Test in Java\nDESCRIPTION: This code demonstrates a method-based test approach using the TestHolder annotation on a static method. The test configures a listener to check for EntityEvent.EnteringSection events and passes when a player enters a new section.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@TestHolder(\n    value = \"entity_entering_section\",\n    description = \"Tests if the EntityEvent.EnteringSection will be fired when a player moves to another chunk.\"\n)\nstatic void entityEnteringSection(final DynamicTest test /*, final RegistrationHelper reg */) {\n  test.framework().logger().info(\"Method-based 'entity_entering_section' test has been initialised!\");\n  test.whenEnabled(listeners -> {\n    test.framework().logger().info(\"Method-based 'entity_entering_section' test has been enabled!\");\n\n    listeners.getFor(Bus.NEOFORGE).addListener((final EntityEvent.EnteringSection event) -> {\n      if (event.getEntity() instanceof Player) {\n        test.pass();\n      }\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using RegistrationHelper in NeoForge Tests\nDESCRIPTION: Demonstrates how to use the RegistrationHelper to register a simple block with a block item, including language entry and default model.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/NEOGAMETESTS.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nregistrationHelper.blocks().registerSimpleBlock(\"simple\", BlockBehaviour.Properties.of().destroyTime(10f))\n                .withLang(\"simple block\").withBlockItem().withDefaultWhiteModel();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Test Method in Java for NeoForge\nDESCRIPTION: Demonstrates how to create a basic test method using the NeoForge testing framework. It shows the proper method signature, annotation, and parameter usage.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/NEOGAMETESTS.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport net.neoforged.testframework.annotation.TestHolder;\nimport net.neoforged.testframework.DynamicTest;\n\nclass SomeTestClass {\n    @TestHolder(description = \"Tests some interesting thing\")\n    static void someNiceTest(final DynamicTest test) {\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Structure Templates with RegisterStructureTemplate Annotation in Java\nDESCRIPTION: This example demonstrates how to automatically register a code-defined structure template using the RegisterStructureTemplate annotation. The template is a 5x5x5 empty structure that will be registered with the ID 'examplemod:empty_5x5'.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@RegisterStructureTemplate(\"examplemod:empty_5x5\")\npublic static final StructureTemplate EMPTY_5x5 = StructureTemplateBuilder.empty(5, 5, 5);\n```\n\n----------------------------------------\n\nTITLE: Registering Structure Template for GameTest\nDESCRIPTION: Shows how to register a structure template for use in GameTests using StructureTemplateBuilder. Creates a template with a floor lever placement.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@RegisterStructureTemplate(\"examplemod:lever_test_template\")\nstatic final StructureTemplate LEVER_TEST_TEMPLATE = StructureTemplateBuilder.withSize(1, 2, 1)\n  .placeFloorLever(0, 1, 0, false)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Creating a Method-Based Event Test in Java\nDESCRIPTION: This code shows a method-based event test where the method is directly registered as an event listener. The test passes when a player entity triggers the EntityEvent.EnteringSection event. Configuration for this test type must be done through annotations.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@TestHolder(\n    value = \"entity_entering_section\",\n    description = \"Tests if the EntityEvent.EnteringSection will be fired when a player moves to another chunk.\"\n)\nstatic void entityEnteringSection(final EntityEvent.EnteringSection event, final DynamicTest test) {\n  test.framework().logger().info(\"Method-based 'entity_entering_section' event test listener has been fired!\");\n  if (event.getEntity() instanceof Player) {\n    test.pass();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GameTest-Only Tests in NeoForge\nDESCRIPTION: Shows how to create a GameTest-only test without using DynamicTest, utilizing ExtendedGameTestHelper and the @EmptyTemplate annotation.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/NEOGAMETESTS.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport net.minecraft.gametest.framework.GameTest;\nimport net.neoforged.testframework.annotation.TestHolder;\nimport net.neoforged.testframework.gametest.EmptyTemplate;\n\n@GameTest\n@EmptyTemplate\n@TestHolder(description = \"Does something\")\nstatic void gameTestOnly(final ExtendedGameTestHelper helper) {\n    // ....\n    helper.succeed();\n}\n```\n\n----------------------------------------\n\nTITLE: Using ForEachTest Annotation for Common Test Configuration in Java\nDESCRIPTION: This example demonstrates how to use the ForEachTest annotation to apply common configuration (ID prefix and group assignments) to all method-based tests within a class. The resulting test ID combines the prefix with the individual test ID.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@ForEachTest(\n    idPrefix = \"entity_event_\",\n    groups = \"events.entity\"\n)\npublic class EntityEvents {\n  @TestHolder(id = \"on_join_level\") // The ID of the test will be 'entity_event_on_join_level', and it will be in the 'events.entity' group\n  static void onJoinLevel(final EntityJoinLevelEvent event, final DynamicTest test) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Groups with TestGroup Annotation in Java\nDESCRIPTION: This snippet shows how to configure a test group using the TestGroup annotation on a String field. The annotation specifies the human-readable name, default enabled state, and parent groups for the 'events.level_related' group.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/TESTFRAMEWORK.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@TestGroup(name = \"Level-Related Events\", enabledByDefault = true, parents = \"level_tests\")\npublic static final String LEVEL_RELATED_EVENTS = \"events.level_related\";\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Setup for NeoForge\nDESCRIPTION: This Gradle command decompiles sources and applies current patches. It's a crucial step in setting up the NeoForge development environment.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngradlew setup\n```\n\n----------------------------------------\n\nTITLE: Generating Patch Files for NeoForge\nDESCRIPTION: This Gradle command generates patch files from the modified sources, which is a crucial step before committing changes.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngradlew genPatches\n```\n\n----------------------------------------\n\nTITLE: Running Game Test Server with Gradle\nDESCRIPTION: This Gradle command runs the Game Test Server, which is used for testing NeoForge changes.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngradlew :tests:runGameTestServer\n```\n\n----------------------------------------\n\nTITLE: Running Client Tests with Gradle\nDESCRIPTION: This Gradle command runs the client-side tests for NeoForge.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngradlew :tests:runClient\n```\n\n----------------------------------------\n\nTITLE: Setting Java Memory Parameters for NeoForge Server\nDESCRIPTION: Configuration examples showing how to set maximum (Xmx) and minimum (Xms) memory allocation for a Java server. Includes examples for using both megabyte (M) and gigabyte (G) units, with a recommended default of 4GB for modded servers.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/server_files/user_jvm_args.txt#2025-04-20_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Xmx and Xms set the maximum and minimum RAM usage, respectively.\n# They can take any number, followed by an M or a G.\n# M means Megabyte, G means Gigabyte.\n# For example, to set the maximum to 3GB: -Xmx3G\n# To set the minimum to 2.5GB: -Xms2500M\n\n# A good default for a modded server is 4GB.\n# Uncomment the next line to set it.\n# -Xmx4G\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Arguments for NeoForge Launcher\nDESCRIPTION: This configuration defines JVM arguments used to launch NeoForge. It includes module configurations, security permissions, networking preferences, and bootstrap parameters with placeholders for version information.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/server_files/args.txt#2025-04-20_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n-p @MODULE_PATH@\n--add-modules @MODULES@\n--add-opens java.base/java.util.jar=cpw.mods.securejarhandler\n--add-opens java.base/java.lang.invoke=cpw.mods.securejarhandler\n--add-exports java.base/sun.security.util=cpw.mods.securejarhandler\n--add-exports jdk.naming.dns/com.sun.jndi.dns=java.naming\n-Djava.net.preferIPv6Addresses=system\n-DignoreList=@IGNORE_LIST@\n-Dfml.pluginLayerLibraries=@PLUGIN_LAYER_LIBRARIES@\n-Dfml.gameLayerLibraries=@GAME_LAYER_LIBRARIES@\n-DlibraryDirectory=libraries\n-DlegacyClassPath=@CLASS_PATH@\ncpw.mods.bootstraplauncher.BootstrapLauncher\n--launchTarget @TASK@\n--fml.neoForgeVersion @FORGE_VERSION@\n--fml.fmlVersion @FML_VERSION@\n--fml.mcVersion @MC_VERSION@\n--fml.neoFormVersion @MCP_VERSION@\n```\n\n----------------------------------------\n\nTITLE: NeoForge Project Structure Sample\nDESCRIPTION: Sample of the project's root level Gradle structure showing main subprojects like neoforge, base, tests, etc. Each path maps to specific Gradle plugins and responsibilities.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/buildSrc/README.md#2025-04-20_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\n/build.gradle                                    : (root project)\n/projects/neoforge/build.gradle            : neoforge (NeoDevPlugin)\n/projects/base/build.gradle                : base (NeoDevBasePlugin)\n/tests/build.gradle                        : tests (NeoDevExtraPlugin)\n/testframework/build.gradle                : testframework (MinecraftDependenciesPlugin)\n/coremods/build.gradle                     : neoforge-coremods\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote and Fetching Tags in Git\nDESCRIPTION: These Git commands add the upstream NeoForge repository as a remote and fetch its tags. This is part of the setup process for contributing to NeoForge.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/neoforged/NeoForge.git\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream --tags\n```\n\n----------------------------------------\n\nTITLE: Checking Formatting of NeoForge Sources\nDESCRIPTION: This Gradle command checks if the source code is correctly formatted according to the project's style guidelines.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngradlew checkFormatting\n```\n\n----------------------------------------\n\nTITLE: Applying Automatic Formatting to NeoForge Sources\nDESCRIPTION: This Gradle command automatically formats the source code according to the project's style guidelines.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngradlew applyAllFormatting\n```\n\n----------------------------------------\n\nTITLE: Creating Bug Report Template in Markdown\nDESCRIPTION: A structured markdown template for submitting bug reports, including fields for Minecraft version, Forge version, mod details, log files, and reproduction steps. The template uses markdown formatting with tables for mod listings and standardized sections for required information.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/SUPPORT.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**Minecraft Version:** {mc version}\n\n**Forge Version:** {forge version}\n\n**Mod Version:** {mod version}\n\n[**Full Log**]({link to gist/pastebin with full log})\n\n**Mods in This Instance:**\n| Name                     | Version     |\n| ------------------------ | ----------- |\n| [{mod 1}]({download 1})  | {version 1} |\n| {mod 2}                  | {version 2} |\n| {mod 3}                  | {version 3} |\n| ...                      | ...         |\n\n**Steps to Reproduce:**\n 1. Do this\n 2. Then do that\n 3. ...\n```\n\n----------------------------------------\n\nTITLE: Version Support Table in Markdown\nDESCRIPTION: Markdown table showing currently supported NeoForge versions and their support status.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Support |\n|---------|----------|\n| 1.21.x  | Active  |\n```\n\n----------------------------------------\n\nTITLE: Displaying Stacktrace Format in Markdown\nDESCRIPTION: Shows the typical format of a stacktrace line in a crash log, which is crucial for identifying the source of a crash.\nSOURCE: https://github.com/neoforged/neoforge/blob/1.21.x/docs/SUPPORT.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nat some.words.related.to.a.mod.MoreWords(MoreWords.java:number)\n```\n```"
  }
]