[
  {
    "owner": "restatedev",
    "repo": "restate",
    "content": "TITLE: Running Restate Server via Docker\nDESCRIPTION: Docker command to run the Restate server, configuring network ports and host access.\nSOURCE: https://github.com/restatedev/restate/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -p 8080:8080 -p 9070:9070 -p 9071:9071 \\\n    --add-host=host.docker.internal:host-gateway docker.restate.dev/restatedev/restate:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Restate Server via Homebrew\nDESCRIPTION: Command to install the Restate server using Homebrew package manager.\nSOURCE: https://github.com/restatedev/restate/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install restatedev/tap/restate-server\n```\n\n----------------------------------------\n\nTITLE: Running Restate Server via npx\nDESCRIPTION: Command to run the Restate server using npx without installation.\nSOURCE: https://github.com/restatedev/restate/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @restatedev/restate-server\n```\n\n----------------------------------------\n\nTITLE: Installing Single-Node Restate with Helm\nDESCRIPTION: This command installs Restate as a single-node StatefulSet using Helm. It creates a new namespace called 'restate' if it doesn't exist.\nSOURCE: https://github.com/restatedev/restate/blob/main/charts/restate-helm/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install restate oci://ghcr.io/restatedev/restate-helm --namespace restate --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Installing Replicated Restate Cluster with Helm\nDESCRIPTION: This command installs a replicated Restate cluster using Helm. It uses a custom values file 'replicated-values.yaml' for configuration and creates a new namespace 'restate' if it doesn't exist.\nSOURCE: https://github.com/restatedev/restate/blob/main/charts/restate-helm/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install restate oci://ghcr.io/restatedev/restate-helm --namespace restate --create-namespace -f replicated-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Restate CLI via Homebrew\nDESCRIPTION: Command to install the Restate command-line interface using Homebrew package manager.\nSOURCE: https://github.com/restatedev/restate/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install restatedev/tap/restate\n```\n\n----------------------------------------\n\nTITLE: Installing Restate CLI via npm\nDESCRIPTION: Command to install the Restate command-line interface using npm package manager.\nSOURCE: https://github.com/restatedev/restate/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global @restatedev/restate\n```\n\n----------------------------------------\n\nTITLE: Running Restate CLI via npx\nDESCRIPTION: Command to run the Restate command-line interface using npx without installation.\nSOURCE: https://github.com/restatedev/restate/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @restatedev/restate\n```\n\n----------------------------------------\n\nTITLE: Provisioning Restate Cluster\nDESCRIPTION: This command provisions the Restate cluster after installation. It uses 'restatectl' to set up a replicated log provider with a replication factor of 2.\nSOURCE: https://github.com/restatedev/restate/blob/main/charts/restate-helm/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it restate-0 -- restatectl provision --log-provider replicated --log-replication 2 --yes\n```\n\n----------------------------------------\n\nTITLE: Building Restate Server and CLI (Shell)\nDESCRIPTION: Commands to build the restate-server and restate-cli binaries using the just command runner.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njust build --bin restate-server [--release]\n```\n\nLANGUAGE: shell\nCODE:\n```\njust build --bin restate [--release]\n```\n\n----------------------------------------\n\nTITLE: Launching Restate Server from Source or Docker\nDESCRIPTION: Commands to start a Restate server either by building from source with Cargo or running a prebuilt Docker image. Both approaches require configuration parameters including a config file and base directory.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/docs/benchmarking.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release --bin restate-server ...\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run docker docker.io/restatedev/restate:latest --config-file .../restate.toml --base-dir .../restate-data\n```\n\n----------------------------------------\n\nTITLE: Running the Three Nodes Example in Restate Cluster Runner\nDESCRIPTION: Command for running the three_nodes example that demonstrates how to use the local cluster runner as a library. This example creates a multi-node Restate cluster for local testing.\nSOURCE: https://github.com/restatedev/restate/blob/main/crates/local-cluster-runner/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --example three_nodes -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on MacOS (Shell)\nDESCRIPTION: Commands to install required dependencies for building Restate on MacOS using Homebrew package manager.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install cmake protobuf just\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew install node openjdk\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Fedora (Shell)\nDESCRIPTION: Command to install required dependencies for building Restate on Fedora using dnf package manager.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install clang lld lldb libcxx cmake openssl-devel rocksdb-devel protobuf-compiler protobuf-devel just liburing-devel perl\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Tests with wrk\nDESCRIPTION: Example command showing how to execute one of the provided benchmark test scripts that uses wrk to generate load against the Restate server.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/docs/benchmarking.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrun-test-400c-5m.sh\n```\n\n----------------------------------------\n\nTITLE: Registering Service with Restate\nDESCRIPTION: Command to register the mock service with Restate, pointing to the locally running service endpoint and automatically confirming the registration with the --yes flag.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/docs/benchmarking.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrestate deployments register http://localhost:9080 --yes\n```\n\n----------------------------------------\n\nTITLE: Starting Jaeger for Tracing (Shell)\nDESCRIPTION: Docker command to start Jaeger for tracing in the Restate runtime.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -d -p16686:16686 -p4317:4317 -e COLLECTOR_OTLP_ENABLED=true --name jaeger jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Running All Benchmarks with Cargo\nDESCRIPTION: Command to run all benchmarks in the restate-benchmarks package.\nSOURCE: https://github.com/restatedev/restate/blob/main/benchmarks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo bench --package restate-benchmarks\n```\n\n----------------------------------------\n\nTITLE: Running a Single Benchmark with Cargo\nDESCRIPTION: Command to run a specific benchmark (throughput_parallel) from the restate-benchmarks package.\nSOURCE: https://github.com/restatedev/restate/blob/main/benchmarks/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo bench --package restate-benchmarks --bench throughput_parallel\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests (Shell)\nDESCRIPTION: Commands to run unit tests for the Restate project using cargo-nextest or directly with cargo.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njust test\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo nextest run --workspace\n```\n\n----------------------------------------\n\nTITLE: Starting Mock Counter Service for Benchmarking\nDESCRIPTION: Command to start the mock Counter service from the Restate source tree using Cargo. This service will be used as the test target for benchmarking.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/docs/benchmarking.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -p mock-service-endpoint --bin mock-service-endpoint\n```\n\n----------------------------------------\n\nTITLE: Profiling a Benchmark with Specified Duration\nDESCRIPTION: Command to run the throughput_parallel benchmark with profiling enabled for 30 seconds. The profiler will generate a flamegraph under the target directory.\nSOURCE: https://github.com/restatedev/restate/blob/main/benchmarks/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo bench --package restate-benchmarks --bench throughput_parallel -- --profile-time=30\n```\n\n----------------------------------------\n\nTITLE: Removing Meta Storage Directory in Bash\nDESCRIPTION: Command to wipe the meta storage directory to resolve version file issues by removing the local-metadata-store directory\nSOURCE: https://github.com/restatedev/restate/blob/main/crates/errors/src/error_codes/META0011.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf <BASE_DIR>/<NODE_NAME>/local-metadata-store\n```\n\n----------------------------------------\n\nTITLE: Configuring Restate CLI to Connect to Local Cluster\nDESCRIPTION: Environment variable configuration to connect restatectl to a locally running Restate cluster. These variables point to the unix sockets created by the cluster runner for metadata and controller services.\nSOURCE: https://github.com/restatedev/restate/blob/main/crates/local-cluster-runner/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport RESTATE_CLUSTER_CONTROLLER_ADDRESS=unix:restate-data/metadata-node/node.sock\nexport RESTATE_METADATA_ADDRESS=unix:restate-data/metadata.sock\n```\n\n----------------------------------------\n\nTITLE: Connecting to EC2 Instance via SSH\nDESCRIPTION: SSH command to connect to the EC2 instance using the private key and public IP address.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh -i private-key.pem -l ubuntu ${node-public-ip}\n```\n\n----------------------------------------\n\nTITLE: Deploying Restate Load Test CDK Stack\nDESCRIPTION: Command to deploy the CDK stack, creating the EC2 instance for Restate performance testing.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy\n```\n\n----------------------------------------\n\nTITLE: Running Bifrost Bench Press with Cargo in Rust\nDESCRIPTION: This command runs the Bifrost Bench Press tool using Cargo with specific configuration options. It sets the log level to info, uses the bench profile, specifies a configuration file, and runs the 'write-to-read' test while retaining the test directory.\nSOURCE: https://github.com/restatedev/restate/blob/main/tools/bifrost-benchpress/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nRUST_LOG=info cargo run --profile=bench --bin bifrost-benchpress -- --config-file=restate.toml --retain-test-dir write-to-read\n```\n\n----------------------------------------\n\nTITLE: Generating Flamegraph for Performance Analysis (Shell)\nDESCRIPTION: Command to generate a flamegraph for performance analysis of the Restate server binary.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njust flamegraph --bin restate-server\n```\n\n----------------------------------------\n\nTITLE: Profiling on MacOS with Frame-Pointer Feature\nDESCRIPTION: Command for MacOS systems to run the throughput_parallel benchmark with profiling enabled, using the frame-pointer feature which is necessary for proper profiling on MacOS.\nSOURCE: https://github.com/restatedev/restate/blob/main/benchmarks/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo bench --package restate-benchmarks --features frame-pointer --bench throughput_parallel -- --profile-time=30\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration Documentation (Shell)\nDESCRIPTION: Commands to generate JSON schema and HTML documentation for Restate configuration.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncargo xtask generate-config-schema > restate_config_schema.json\n```\n\nLANGUAGE: shell\nCODE:\n```\ngenerate-schema-doc --minify restate_config_schema.json restate_config_doc.html\n```\n\n----------------------------------------\n\nTITLE: Generating REST API Documentation (Shell)\nDESCRIPTION: Commands to generate OpenAPI file and HTML documentation for Restate REST API.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncargo xtask generate-rest-api-doc > openapi.json\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx @redocly/cli build-docs openapi.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo for MacOS M1 Build (TOML)\nDESCRIPTION: Cargo configuration to fix architecture issues when building on MacOS M1 chips. This prevents librdkafka from building a fat binary that fails to link.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nCMAKE_OSX_ARCHITECTURES = \"arm64\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern for Event Loop Ownership\nDESCRIPTION: Example showing the recommended pattern for event loop service initialization where the service owns its channels and exposes interfaces through handles instead of directly exposing channels.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/rust-guidelines.md#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet service = Service::new(); // new internally creates (tx, rx)\nlet other_service = OtherService::new(service.handle());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Poor Module Pattern (Anti-Pattern)\nDESCRIPTION: Example showing the incorrect pattern of repeating module names in type definitions, which should be avoided in favor of module-qualified names or re-exports.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/rust-guidelines.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet (tx, rx) = ...\n\nlet service = Service::new(rx);\nlet other_service = OtherService::new(tx);\n```\n\n----------------------------------------\n\nTITLE: Connecting to EC2 Instance via AWS Systems Manager\nDESCRIPTION: AWS CLI command to start a session with the EC2 instance using Systems Manager.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws ssm start-session --target <instance-id>\n```\n\n----------------------------------------\n\nTITLE: Force Override Configuration for Restate Deployment\nDESCRIPTION: JSON configuration option to force override an existing deployment registration. This should be used with caution as it can cause in-flight invocations to fail.\nSOURCE: https://github.com/restatedev/restate/blob/main/crates/errors/src/error_codes/META0004.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"force\": true\n```\n\n----------------------------------------\n\nTITLE: Installing Knative on Rancher Desktop (Shell)\nDESCRIPTION: Command to install Knative on a Rancher Desktop Kubernetes environment.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/local-development.md#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nKNATIVE_VERSION=1.8.0 curl -sL https://raw.githubusercontent.com/csantanapr/knative-minikube/master/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Restate Load Test Environment\nDESCRIPTION: Command to install required npm dependencies for the CDK project.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Version in Cargo.toml and Chart.yaml\nDESCRIPTION: This step involves updating the version field in both Cargo.toml and Chart.yaml files to the new release version X.Y.Z. It's a crucial part of the release process to ensure correct versioning.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/release.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/Cargo.toml\n```\n\nLANGUAGE: markdown\nCODE:\n```\n/charts/restate-helm/Chart.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Compatibility Information\nDESCRIPTION: This step involves updating the COMPATIBILITY_INFORMATION in the cluster_marker.rs file if the new version X.Y.Z changes the requirements for backward/forward compatible Restate versions.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/release.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n/crates/node/src/cluster_marker.rs\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Release Tag\nDESCRIPTION: This step involves creating a git tag of the form vX.Y.Z and pushing it to the repository. This action triggers the release workflow defined in release.yml.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/release.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n/.github/workflows/release.yml\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema for Typify from OpenAPI Specification\nDESCRIPTION: This bash command uses yq to transform an OpenAPI YAML specification into a JSON schema file compatible with typify. It extracts schema definitions, removes paths and components, adds the JSON schema version, and cleans up string patterns.\nSOURCE: https://github.com/restatedev/restate/blob/main/cli/src/clients/cloud/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyq '.definitions = .components.schemas | del(.paths, .components) | .[\"$schema\"] = \"http://json-schema.org/draft-07/schema#\" | (.. | select(.type? == \"string\" and .pattern != null)) |= del(.pattern) | .' ../restate-cloud/generated/schema/openapi.yaml > cli/src/clients/cloud/schema.json\n```\n\n----------------------------------------\n\nTITLE: Destroying Restate Load Test CDK Stack\nDESCRIPTION: Command to tear down the CDK stack and remove all associated resources when testing is complete.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk destroy\n```\n\n----------------------------------------\n\nTITLE: Stopping EC2 Instances\nDESCRIPTION: AWS CLI command to stop EC2 instances temporarily, useful for suspending machines.\nSOURCE: https://github.com/restatedev/restate/blob/main/scripts/loadtest-environment/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 stop-instances --instance-ids <instance-id>\n```\n\n----------------------------------------\n\nTITLE: Setting up Wireshark Filter\nDESCRIPTION: Instructions for filtering HTTP/2 messages in Wireshark to analyze gRPC communication in the Restate runtime.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/debug.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttp2\n```\n\n----------------------------------------\n\nTITLE: Updating Service Protocol Git Subtree\nDESCRIPTION: Git command to pull and update the service protocol subtree from the main branch of the service-protocol repository. The command should be executed from the project root directory and uses the --squash option to combine commits.\nSOURCE: https://github.com/restatedev/restate/blob/main/crates/types/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit subtree pull --prefix crates/types/service-protocol git@github.com:restatedev/service-protocol.git main --squash\n```\n\n----------------------------------------\n\nTITLE: Checking Release-Blocker Issues in GitHub\nDESCRIPTION: This URL is used to query open issues across the restatedev organization that are labeled as release blockers. It's an important pre-release check to ensure all critical issues are addressed before a release.\nSOURCE: https://github.com/restatedev/restate/blob/main/docs/dev/release.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/issues?q=is%3Aopen+org%3Arestatedev+label%3Arelease-blocker\n```"
  }
]