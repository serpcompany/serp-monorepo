[
  {
    "owner": "wxt-dev",
    "repo": "wxt",
    "content": "TITLE: Initializing WXT Project using Package Managers\nDESCRIPTION: This code snippet demonstrates how to bootstrap a new WXT project using different package managers like npm, pnpm, and bun.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# npm\nnpx wxt@latest init\n\n# pnpm\npnpm dlx wxt@latest init\n\n# bun\nbunx wxt@latest init\n```\n\n----------------------------------------\n\nTITLE: Project Initialization Commands\nDESCRIPTION: Commands to create a new project directory and initialize package.json using different package managers.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-project\npnpm init\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-project\nbun init\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-project\nnpm init\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-project\nyarn init\n```\n\n----------------------------------------\n\nTITLE: SPA-Aware Content Script Implementation\nDESCRIPTION: Enhanced implementation that handles SPA navigation by listening to location changes and executing the content script when URLs match the desired pattern.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst watchPattern = new MatchPattern('*://*.youtube.com/watch*');\n\nexport default defineContentScript({\n  matches: ['*://*.youtube.com/*'],\n  main(ctx) {\n    ctx.addEventListener(window, 'wxt:locationchange', ({ newUrl }) => {\n      if (watchPattern.includes(newUrl)) mainWatch(ctx);\n    });\n  },\n});\n\nfunction mainWatch(ctx: ContentScriptContext) {\n  mountUi(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Devtools Page Template in HTML\nDESCRIPTION: Base HTML template for creating a devtools extension page. Includes meta tags for browser compatibility and build configuration.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <!-- Set include/exclude if the page should be removed from some builds -->\n    <meta name=\"manifest.include\" content=\"['chrome', ...]\" />\n    <meta name=\"manifest.exclude\" content=\"['chrome', ...]\" />\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing WXT via Package Managers\nDESCRIPTION: Command examples for initializing a new WXT project using different package managers (npm, pnpm, and bun). This is the recommended way to bootstrap a new web extension project with WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/wxt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# npm\nnpx wxt@latest init\n\n# pnpm\npnpm dlx wxt@latest init\n\n# bun\nbunx wxt@latest init\n```\n\n----------------------------------------\n\nTITLE: Creating Integrated UI in Content Scripts with React\nDESCRIPTION: Implementing an integrated UI in a content script using React. Demonstrates creating a React root on the UI container and proper cleanup when the UI is removed.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// entrypoints/example-ui.content/index.tsx\nimport ReactDOM from 'react-dom/client';\nimport App from './App.tsx';\n\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n\n  main(ctx) {\n    const ui = createIntegratedUi(ctx, {\n      position: 'inline',\n      anchor: 'body',\n      onMount: (container) => {\n        // Create a root on the UI container and render a component\n        const root = ReactDOM.createRoot(container);\n        root.render(<App />);\n        return root;\n      },\n      onRemove: (root) => {\n        // Unmount the root when the UI is removed\n        root.unmount();\n      },\n    });\n\n    // Call mount to add the UI to the DOM\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: MV2/MV3 Compatible Manifest Configuration\nDESCRIPTION: Example of manifest configuration that works across MV2 and MV3 with automatic conversion.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    action: {\n      default_title: 'Some Title',\n    },\n    web_accessible_resources: [\n      {\n        matches: ['*://*.google.com/*'],\n        resources: ['icon/*.png'],\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Browser API in TypeScript\nDESCRIPTION: Shows how to import the browser API from WXT and use it to add an event listener to the action button click event. This unified API works across browsers that use either 'chrome' or 'browser' globals.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/extension-apis.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { browser } from 'wxt/browser';\n\nbrowser.action.onClicked.addListener(() => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Content Script in WXT\nDESCRIPTION: Basic structure for defining a content script in WXT using the defineContentScript function, which receives a context object as its first parameter.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// entrypoints/example.content.ts\nexport default defineContentScript({\n  main(ctx) {},\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Default WXT Project Structure\nDESCRIPTION: Shows the default flat folder structure for a WXT project, including all directories and key configuration files.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n📂 {rootDir}/\n   📁 .output/\n   📁 .wxt/\n   📁 assets/\n   📁 components/\n   📁 composables/\n   📁 entrypoints/\n   📁 hooks/\n   📁 modules/\n   📁 public/\n   📁 utils/\n   📄 .env\n   📄 .env.publish\n   📄 app.config.ts\n   📄 package.json\n   📄 tsconfig.json\n   📄 web-ext.config.ts\n   📄 wxt.config.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT with Solid Module\nDESCRIPTION: Demonstrates the configuration for adding Solid.js support to a WXT project using the built-in Solid module.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/frontend-frameworks.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'wxt';\n\nexport default defineConfig({\n  modules: ['@wxt-dev/module-solid'],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Root UI in React\nDESCRIPTION: Illustrates the creation of an isolated UI using Shadow Root in a React content script. It includes setting up a React root, rendering a component, and handling unmounting.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport './style.css';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.tsx';\n\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n  cssInjectionMode: 'ui',\n\n  async main(ctx) {\n    const ui = await createShadowRootUi(ctx, {\n      name: 'example-ui',\n      position: 'inline',\n      anchor: 'body',\n      onMount: (container) => {\n        const app = document.createElement('div');\n        container.append(app);\n\n        const root = ReactDOM.createRoot(app);\n        root.render(<App />);\n        return root;\n      },\n      onRemove: (root) => {\n        root?.unmount();\n      },\n    });\n\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Browser API Types in TypeScript\nDESCRIPTION: Demonstrates how to import and use the Browser namespace for type annotations when working with browser extension APIs. This allows for proper type checking of API-specific objects.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/extension-apis.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Browser } from 'wxt/browser';\n\nfunction handleMessage(message: any, sender: Browser.runtime.MessageSender) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Detection for Browser APIs\nDESCRIPTION: Shows how to check if a specific browser API is available at runtime using null checks. This is necessary because API availability depends on manifest version, browser, and permissions.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/extension-apis.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (browser.runtime.onSuspend != null) {\n  browser.runtime.onSuspend.addListener(() => {\n    // ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Content Script and Handling Return Value in TypeScript\nDESCRIPTION: This snippet demonstrates how to use browser.scripting.executeScript to run a content script and log its return value. It shows the background script part of the interaction.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/scripting.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// entrypoints/background.ts\nconst res = await browser.scripting.executeScript({\n  target: { tabId },\n  files: ['content-scripts/example.js'],\n});\nconsole.log(res); // \"Hello John!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT for React Integration\nDESCRIPTION: Configuration setup in wxt.config.ts to enable React support with optional configuration options for the Vite bundler.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/module-react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// wxt.config.ts\nexport default defineConfig({\n  // Required\n  modules: ['@wxt-dev/module-react'],\n\n  // Optional: Pass options to the module:\n  react: {\n    vite: {\n      // ...\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Root UI in Vue\nDESCRIPTION: Shows how to create an isolated UI using Shadow Root in a Vue content script. It covers importing CSS, creating a Vue app, mounting it within the shadow root, and handling unmounting.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport './style.css';\nimport { createApp } from 'vue';\nimport App from './App.vue';\n\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n  cssInjectionMode: 'ui',\n\n  async main(ctx) {\n    const ui = await createShadowRootUi(ctx, {\n      name: 'example-ui',\n      position: 'inline',\n      anchor: 'body',\n      onMount: (container) => {\n        const app = createApp(App);\n        app.mount(container);\n        return app;\n      },\n      onRemove: (app) => {\n        app?.unmount();\n      },\n    });\n\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Configuration in TypeScript for WXT\nDESCRIPTION: This snippet demonstrates how to define runtime configuration types and default values in app.config.ts. It includes type declarations for WxtAppConfig and uses defineAppConfig to set the initial configuration.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAppConfig } from '#imports';\n\n// Define types for your config\ndeclare module 'wxt/utils/define-app-config' {\n  export interface WxtAppConfig {\n    theme?: 'light' | 'dark';\n  }\n}\n\nexport default defineAppConfig({\n  theme: 'dark',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Integrated UI in Content Scripts with Vue\nDESCRIPTION: Implementing an integrated UI in a content script using Vue. This shows how to create, mount, and clean up a Vue application within the content script's UI container.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// entrypoints/example-ui.content/index.ts\nimport { createApp } from 'vue';\nimport App from './App.vue';\n\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n\n  main(ctx) {\n    const ui = createIntegratedUi(ctx, {\n      position: 'inline',\n      anchor: 'body',\n      onMount: (container) => {\n        // Create the app and mount it to the UI container\n        const app = createApp(App);\n        app.mount(container);\n        return app;\n      },\n      onRemove: (app) => {\n        // Unmount the app when the UI is removed\n        app.unmount();\n      },\n    });\n\n    // Call mount to add the UI to the DOM\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Root UI in Solid\nDESCRIPTION: Shows how to create an isolated UI using Shadow Root in a Solid content script. It includes rendering a Solid component within the shadow root and handling unmounting.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport './style.css';\nimport { render } from 'solid-js/web';\n\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n  cssInjectionMode: 'ui',\n\n  async main(ctx) {\n    const ui = await createShadowRootUi(ctx, {\n      name: 'example-ui',\n      position: 'inline',\n      anchor: 'body',\n      onMount: (container) => {\n        const unmount = render(() => <div>...</div>, container);\n      },\n      onRemove: (unmount) => {\n        unmount?.();\n      },\n    });\n\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Root UI in Svelte\nDESCRIPTION: Demonstrates how to create an isolated UI using Shadow Root in a Svelte content script. It covers mounting a Svelte app within the shadow root and handling unmounting.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport './style.css';\nimport App from './App.svelte';\nimport { mount, unmount } from 'svelte';\n\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n  cssInjectionMode: 'ui',\n\n  async main(ctx) {\n    const ui = await createShadowRootUi(ctx, {\n      name: 'example-ui',\n      position: 'inline',\n      anchor: 'body',\n      onMount: (container) => {\n        mount(App, {\n          target: container,\n        });\n      },\n      onRemove: () => {\n        unmount(app);\n      },\n    });\n\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Manifest Configuration Function\nDESCRIPTION: Shows how to dynamically generate manifest based on browser, version and mode.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: ({ browser, manifestVersion, mode, command }) => {\n    return {\n      // ...\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using WXT Storage with TypeScript Type Parameters\nDESCRIPTION: Examples of using WXT Storage methods with TypeScript type parameters for type safety.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait storage.getItem<number>('local:installDate');\nawait storage.watch<number>(\n  'local:installDate',\n  (newInstallDate, oldInstallDate) => {\n    // ...\n  },\n);\nawait storage.getMeta<{ v: number }>('local:installDate');\n```\n\n----------------------------------------\n\nTITLE: GitHub Action Workflow for Extension Release\nDESCRIPTION: GitHub Action workflow that automates the process of building and submitting browser extensions to multiple stores when triggered manually.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/publishing.md#2025-04-22_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nname: Release\n\non:\n  workflow_dispatch:\n\njobs:\n  submit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: pnpm/action-setup@v4\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'pnpm'\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: Zip extensions\n        run: |\n          pnpm zip\n          pnpm zip:firefox\n\n      - name: Submit to stores\n        run: |\n          pnpm wxt submit \\\n            --chrome-zip .output/*-chrome.zip \\\n            --firefox-zip .output/*-firefox.zip --firefox-sources-zip .output/*-sources.zip\n        env:\n          CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}\n          CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}\n          CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}\n          CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}\n          FIREFOX_EXTENSION_ID: ${{ secrets.FIREFOX_EXTENSION_ID }}\n          FIREFOX_JWT_ISSUER: ${{ secrets.FIREFOX_JWT_ISSUER }}\n          FIREFOX_JWT_SECRET: ${{ secrets.FIREFOX_JWT_SECRET }}\n```\n\n----------------------------------------\n\nTITLE: Creating Integrated UI in Content Scripts with Solid\nDESCRIPTION: Implementing an integrated UI in a content script using Solid.js. Shows how to render a Solid component to the UI container and handle cleanup when the UI is removed.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// entrypoints/example-ui.content/index.ts\nimport { render } from 'solid-js/web';\n\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n\n  main(ctx) {\n    const ui = createIntegratedUi(ctx, {\n      position: 'inline',\n      anchor: 'body',\n      onMount: (container) => {\n        // Render your app to the UI container\n        const unmount = render(() => <div>...</div>, container);\n        return unmount;\n      },\n      onRemove: (unmount) => {\n        // Unmount the app when the UI is removed\n        unmount();\n      },\n    });\n\n    // Call mount to add the UI to the DOM\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing IFrame UI in Content Script\nDESCRIPTION: Demonstrates how to create and mount an IFrame-based UI in a content script using createIframeUi. It includes defining the UI, specifying the HTML page to load, and mounting the IFrame.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n\n  main(ctx) {\n    const ui = createIframeUi(ctx, {\n      page: '/example-iframe.html',\n      position: 'inline',\n      anchor: 'body',\n      onMount: (wrapper, iframe) => {\n        iframe.width = '123';\n      },\n    });\n\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Vite Config in WXT TypeScript Configuration\nDESCRIPTION: This snippet demonstrates how to modify the Vite configuration in a WXT project using the wxt.config.ts file. It shows the basic structure for overriding Vite config options.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/vite.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'wxt';\n\nexport default defineConfig({\n  vite: () => ({\n    // Override config here, same as `defineConfig({ ... })`\n    // inside vite.config.ts files\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic UI Mounting with autoMount in WXT Content Script\nDESCRIPTION: Demonstrates how to use the autoMount API to automatically mount and unmount UI elements when target DOM elements appear or disappear dynamically. Uses createIntegratedUi with anchor option for element targeting.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n\n  main(ctx) {\n    const ui = createIntegratedUi(ctx, {\n      position: 'inline',\n      // It observes the anchor\n      anchor: '#your-target-dynamic-element',\n      onMount: (container) => {\n        // Append children to the container\n        const app = document.createElement('p');\n        app.textContent = '...';\n        container.append(app);\n      },\n    });\n\n    // Call autoMount to observe anchor element for add/remove.\n    ui.autoMount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for WXT Extensions\nDESCRIPTION: Sets up Vitest configuration for testing WXT extensions. The WxtVitest plugin provides browser API polyfills, adds config from wxt.config.ts, configures auto-imports, and sets up internal WXT functionality.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/unit-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// vitest.config.ts\nimport { defineConfig } from 'vitest/config';\nimport { WxtVitest } from 'wxt/testing';\n\nexport default defineConfig({\n  plugins: [WxtVitest()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Manifest for I18n\nDESCRIPTION: Demonstrates how to configure the extension manifest to enable internationalization by setting the default locale.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/i18n.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    default_locale: 'en',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser Extension Update Event Handler in TypeScript\nDESCRIPTION: Demonstrates how to set up an event listener that executes code when a browser extension is updated. The listener checks if the installation reason is 'update' before executing update-specific logic.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/testing-updates.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbrowser.runtime.onInstalled.addListener(({ reason }) => {\n  if (reason === 'update') {\n    // Do something\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Analytics Setup in TypeScript\nDESCRIPTION: Sets up Google Analytics tracking by importing the gtag.js script and initializing basic configuration. Includes custom dataLayer setup for extension environment.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/remote-code.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/google-analytics.ts\nimport 'url:https://www.googletagmanager.com/gtag/js?id=G-XXXXXX';\n\nwindow.dataLayer = window.dataLayer || [];\n// NOTE: This line is different from Google's documentation\nwindow.gtag = function () {\n  dataLayer.push(arguments);\n};\ngtag('js', new Date());\ngtag('config', 'G-XXXXXX');\n```\n\n----------------------------------------\n\nTITLE: Configuring src Directory in WXT\nDESCRIPTION: Demonstrates how to enable a src directory structure in the WXT configuration file. This changes the default flat structure to use a src folder for source code.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  srcDir: 'src',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Storage Watcher in TypeScript\nDESCRIPTION: Demonstrates how to use the storage.watch function to listen for changes to a specific storage key.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst unwatch = storage.watch<number>('local:counter', (newCount, oldCount) => {\n  console.log('Count changed:', { newCount, oldCount });\n});\n\n// Some time later...\nunwatch();\n```\n\n----------------------------------------\n\nTITLE: Basic Manifest Configuration in TypeScript\nDESCRIPTION: Demonstrates basic manifest configuration in wxt.config.ts using defineConfig.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    // Put manual changes here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Storage Item in TypeScript\nDESCRIPTION: Shows how to use storage.defineItem to create a typed storage item with a default value.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/storage.ts\nconst showChangelogOnUpdate = storage.defineItem<boolean>(\n  'local:showChangelogOnUpdate',\n  {\n    fallback: true,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Extension Storage with Vitest\nDESCRIPTION: Demonstrates testing extension storage functionality using Vitest and WXT's testing utilities. Shows how fake-browser provides in-memory implementation of browser.storage for testing without mocking.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/unit-testing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, it, expect } from 'vitest';\nimport { fakeBrowser } from 'wxt/testing';\n\nconst accountStorage = storage.defineItem<Account>('local:account');\n\nasync function isLoggedIn(): Promise<Account> {\n  const value = await accountStorage.getValue();\n  return value != null;\n}\n\ndescribe('isLoggedIn', () => {\n  beforeEach(() => {\n    // See https://webext-core.aklinker1.io/fake-browser/reseting-state\n    fakeBrowser.reset();\n  });\n\n  it('should return true when the account exists in storage', async () => {\n    const account: Account = {\n      username: '...',\n      preferences: {\n        // ...\n      },\n    };\n    await accountStorage.setValue(account);\n\n    expect(await isLoggedIn()).toBe(true);\n  });\n\n  it('should return false when the account does not exist in storage', async () => {\n    await accountStorage.deleteValue();\n\n    expect(await isLoggedIn()).toBe(false);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Vite Plugin Usage in WXT TypeScript Configuration\nDESCRIPTION: This snippet illustrates how to conditionally use a Vite plugin based on the build mode. It shows how to use the vite-plugin-remove-console only in production mode to address WXT's unique build process.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/vite.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'wxt';\nimport removeConsole from 'vite-plugin-remove-console';\n\nexport default defineConfig({\n  vite: (configEnv) => ({\n    plugins:\n      configEnv.mode === 'production'\n        ? [removeConsole({ includes: ['log'] })]\n        : [],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Compiler Options Configuration\nDESCRIPTION: Example of extending the base TSConfig while adding custom compiler options for specific needs like JSX handling.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n// <rootDir>/tsconfig.json\n{\n  \"extends\": \".wxt/tsconfig.json\",\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Context Validity in Content Scripts\nDESCRIPTION: Methods to manually check if the content script's context is still valid or has been invalidated, useful for conditional logic in your extension.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (ctx.isValid) {\n  // do something\n}\n// OR\nif (ctx.isInvalid) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Permissions Configuration\nDESCRIPTION: Shows how to configure extension permissions in the manifest.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    permissions: ['storage', 'tabs'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Content Script Configuration\nDESCRIPTION: Shows how to configure a content script with various manifest options and injection settings\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineContentScript({\n  // Set manifest options\n  matches: string[],\n  excludeMatches: undefined | [],\n  includeGlobs: undefined | [],\n  excludeGlobs: undefined | [],\n  allFrames: undefined | true | false,\n  runAt: undefined | 'document_start' | 'document_end' | 'document_idle',\n  matchAboutBlank: undefined | true | false,\n  matchOriginAsFallback: undefined | true | false,\n  world: undefined | 'ISOLATED' | 'MAIN',\n\n  // Set include/exclude if the background should be removed from some builds\n  include: undefined | string[],\n  exclude: undefined | string[],\n\n  // Configure how CSS is injected onto the page\n  cssInjectionMode: undefined | \"manifest\" | \"manual\" | \"ui\",\n\n  // Configure how/when content script will be registered\n  registration: undefined | \"manifest\" | \"runtime\",\n\n  main(ctx: ContentScriptContext) {\n    // Executed when content script is loaded, can be async\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Incorporating Environment Variables in WXT Runtime Configuration\nDESCRIPTION: This snippet illustrates how to use environment variables in the app.config.ts file. It defines types for the config, including an optional API key and a boolean flag, and sets their values using environment variables with type conversion.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/runtime.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'wxt/utils/define-app-config' {\n  export interface WxtAppConfig {\n    apiKey?: string;\n    skipWelcome: boolean;\n  }\n}\n\nexport default defineAppConfig({\n  apiKey: import.meta.env.WXT_API_KEY,\n  skipWelcome: import.meta.env.WXT_SKIP_WELCOME === 'true',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Assets in JSX for WXT\nDESCRIPTION: Shows how to import and use an image asset from the /assets directory in a JSX component.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport image from '~/assets/image.png';\n\n<img src={image} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-imports in WXT Config\nDESCRIPTION: Example configuration for setting up auto-imports in a WXT project using the imports property in defineConfig. This uses unimport under the hood, the same tool used by Nuxt.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/auto-imports.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  // See https://www.npmjs.com/package/unimport#configurations\n  imports: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Different API Names Between Manifest Versions\nDESCRIPTION: Shows how to support both Manifest V2 and V3 by using the nullish coalescing operator to handle renamed APIs like browser_action (MV2) and action (MV3).\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/extension-apis.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(browser.action ?? browser.browser_action).onClicked.addListener(() => {\n  //\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Content Script with Return Value in TypeScript\nDESCRIPTION: This snippet shows how to define a content script using the defineContentScript function. The script logs a message and returns a string value, which can be retrieved by the background script.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/scripting.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// entrypoints/example.content.ts\nexport default defineContentScript({\n  registration: 'runtime',\n  main(ctx) {\n    console.log('Script was executed!');\n    return 'Hello John!';\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT with Vue Module\nDESCRIPTION: Shows the configuration for adding Vue support to a WXT project using the built-in Vue module.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/frontend-frameworks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'wxt';\n\nexport default defineConfig({\n  modules: ['@wxt-dev/module-vue'],\n});\n```\n\n----------------------------------------\n\nTITLE: Config Update Module Implementation\nDESCRIPTION: Shows how to update the resolved configuration using a WXT module.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWxtModule } from 'wxt/modules';\n\nexport default defineWxtModule({\n  setup(wxt) {\n    wxt.hook('config:resolved', () => {\n      wxt.config.outDir = 'dist';\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT with Svelte Module\nDESCRIPTION: Illustrates how to configure WXT to use the Svelte module, enabling Svelte support in the web extension.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/frontend-frameworks.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'wxt';\n\nexport default defineConfig({\n  modules: ['@wxt-dev/module-svelte'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Accessible Resources for Main World Script\nDESCRIPTION: Shows how to configure the manifest in wxt.config.ts to make the main world script accessible as a web resource. This is necessary for injecting the script into the webpage.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    web_accessible_resources: [\n      {\n        resources: [\"example-main-world.js\"],\n        matches: [\"*://*/*\"],\n      }\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Background Script with Manifest Options\nDESCRIPTION: Demonstrates how to define a background script with manifest options and configuration\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineBackground({\n  // Set manifest options\n  persistent: undefined | true | false,\n  type: undefined | 'module',\n\n  // Set include/exclude if the background should be removed from some builds\n  include: undefined | string[],\n  exclude: undefined | string[],\n\n  main() {\n    // Executed when background is loaded, CANNOT BE ASYNC\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables at Runtime\nDESCRIPTION: Shows how to access environment variables in TypeScript code using the import.meta.env object. This example demonstrates using an API key stored in the environment.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/environment-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nawait fetch(`/some-api?apiKey=${import.meta.env.WXT_API_KEY}`);\n```\n\n----------------------------------------\n\nTITLE: Localization Configuration\nDESCRIPTION: Demonstrates how to configure internationalization in the manifest.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    name: '__MSG_extName__',\n    description: '__MSG_extDescription__',\n    default_locale: 'en',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Public Assets in JavaScript/TypeScript for WXT\nDESCRIPTION: Demonstrates how to import and use an image asset from the /public directory in JavaScript or TypeScript.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport imageUrl from '/image.png';\n\nconst img = document.createElement('img');\nimg.src = imageUrl;\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT with React Module\nDESCRIPTION: Demonstrates how to add the React module to the WXT configuration. This setup enables React support in the web extension project.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/frontend-frameworks.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'wxt';\n\nexport default defineConfig({\n  modules: ['@wxt-dev/module-react'],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Root UI in Vanilla TypeScript\nDESCRIPTION: Demonstrates how to create an isolated UI using Shadow Root in a vanilla TypeScript content script. It includes importing CSS, setting cssInjectionMode, defining the UI with createShadowRootUi, and mounting it.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport './style.css';\n\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n  cssInjectionMode: 'ui',\n\n  async main(ctx) {\n    const ui = await createShadowRootUi(ctx, {\n      name: 'example-ui',\n      position: 'inline',\n      anchor: 'body',\n      onMount(container) {\n        const app = document.createElement('p');\n        app.textContent = 'Hello world!';\n        container.append(app);\n      },\n    });\n\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Script into Main World\nDESCRIPTION: Illustrates how to inject a script into the main world of a webpage using injectScript. This approach allows for running scripts in the main world while maintaining access to extension APIs through message passing.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// entrypoints/example-main-world.ts\nexport default defineUnlistedScript(() => {\n  console.log('Hello from the main world');\n});\n\n// entrypoints/example.content.ts\nexport default defineContentScript({\n  matches: ['*://*/*'],\n  async main() {\n    console.log('Injecting script...');\n    await injectScript('/example-main-world.js', {\n      keepInDom: true,\n    });\n    console.log('Done!');\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic WXT Module Implementation\nDESCRIPTION: Demonstrates the basic structure of a WXT module using defineWxtModule.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWxtModule } from 'wxt/modules';\n\nexport default defineWxtModule({\n  setup(wxt) {\n    // Your module code here...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Manifest Version at Runtime in TypeScript\nDESCRIPTION: Demonstrates how to use WXT's built-in environment variables to detect the target manifest version at runtime, allowing for version-specific code execution.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/target-different-browsers.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nif (import.meta.env.MANIFEST_VERSION === 2) {\n  console.log('Do something only in MV2 builds');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Assets in JavaScript/TypeScript for WXT\nDESCRIPTION: Demonstrates how to import and use an image asset from the /assets directory in JavaScript or TypeScript.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport imageUrl from '~/assets/image.png';\n\nconst img = document.createElement('img');\nimg.src = imageUrl;\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Package Downloads for Firefox Submission\nDESCRIPTION: TypeScript configuration to handle private npm packages when creating source ZIP files for Firefox review by downloading them and including them in the bundle.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/publishing.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  zip: {\n    downloadPackages: [\n      '@mycompany/some-package',\n      //...\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone CSS Content Scripts in WXT\nDESCRIPTION: Configuration for creating content scripts that only include CSS files by modifying the manifest through WXT hooks.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  hooks: {\n    'build:manifestGenerated': (wxt, manifest) => {\n      manifest.content_scripts ??= [];\n      manifest.content_scripts.push({\n        // Build extension once to see where your CSS get's written to\n        css: ['content-scripts/example.css'],\n        matches: ['*://*/*'],\n      });\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Analytics Provider\nDESCRIPTION: Example of implementing a custom analytics provider\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAnalyticsProvider } from '@wxt-dev/analytics/client';\n\ninterface CustomAnalyticsOptions {\n  // ...\n}\n\nconst customAnalytics = defineAnalyticsProvider<CustomAnalyticsOptions>(\n  (analytics, analyticsConfig, providerOptions) => {\n    // ...\n  },\n);\n\nexport default defineAppConfig({\n  analytics: {\n    providers: [\n      customAnalytics({\n        // ...\n      }),\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Browser at Runtime in TypeScript\nDESCRIPTION: Shows how to use WXT's built-in environment variables to detect which browser is in use at runtime. This allows for browser-specific code execution.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/target-different-browsers.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nif (import.meta.env.BROWSER === 'firefox') {\n  console.log('Do something only in Firefox builds');\n}\nif (import.meta.env.FIREFOX) {\n  // Shorthand, equivalent to the if-statement above\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Using WASM in Content Script for WXT\nDESCRIPTION: Demonstrates how to load and initialize a WASM file in a content script, and use it to parse TypeScript code on GitHub pages.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport initWasm, { parseSync } from '@oxc-parser/wasm';\n\nexport default defineContentScript({\n  matches: '*://*.github.com/*',\n  async main(ctx) {\n    if (!location.pathname.endsWith('.ts')) return;\n\n    // Get text from GitHub\n    const code = document.getElementById(\n      'read-only-cursor-text-area',\n    )?.textContent;\n    if (!code) return;\n    const sourceFilename = document.getElementById('file-name-id')?.textContent;\n    if (!sourceFilename) return;\n\n    // Load the WASM file:\n    await initWasm({\n      module_or_path: browser.runtime.getURL('/oxc_parser_wasm_bg.wasm'),\n    });\n\n    // Once loaded, we can use `parseSync`!\n    const ast = parseSync(code, { sourceFilename });\n    console.log(ast);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Assets in Vue Components for WXT\nDESCRIPTION: Demonstrates how to import and use an image asset from the /assets directory in a Vue component.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport image from '~/assets/image.png';\n</script>\n\n<template>\n  <img :src=\"image\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Excluding HTML File for Chrome Using Meta Tag\nDESCRIPTION: Demonstrates how to use a meta tag to exclude an HTML file from being built for Chrome. This allows for browser-specific HTML file filtering.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/target-different-browsers.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"manifest.exclude\" content=\"['chrome', ...]\" />\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Analytics Events in Extension\nDESCRIPTION: Shows how to import the Google Analytics utility and track custom events within the extension's popup interface.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/remote-code.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// popup/main.ts\nimport '~/utils/google-analytics';\n\ngtag('event', 'event_name', {\n  key: 'value',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Versioning to an Existing Storage Item in TypeScript\nDESCRIPTION: Demonstrates how to add versioning to an existing unversioned storage item, including a migration function.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nanoid } from 'nanoid';\n\n// Retroactively add a type for the first version\ntype IgnoredWebsiteV1 = string;\ninterface IgnoredWebsiteV2 {\n  id: string;\n  website: string;\n}\n\nexport const ignoredWebsites = storage.defineItem<IgnoredWebsiteV2[]>(\n  'local:ignoredWebsites',\n  {\n    fallback: [],\n    version: 2,\n    migrations: {\n      // Ran when migrating from v1 to v2\n      2: (websites: IgnoredWebsiteV1[]): IgnoredWebsiteV2[] => {\n        return websites.map((website) => ({ id: nanoid(), website }));\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Web Extension Config in TypeScript\nDESCRIPTION: This snippet shows how to create a web-ext.config.ts file to configure WXT options. It uses the defineWebExtConfig function to set up the configuration.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/browser-startup.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWebExtConfig } from 'wxt';\n\nexport default defineWebExtConfig({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Unlisted Scripts at Runtime\nDESCRIPTION: Example showing how to access unlisted scripts at runtime using browser.runtime.getURL. Demonstrates URL construction for accessing the script.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = browser.runtime.getURL('/{name}.js');\n\nconsole.log(url); // \"chrome-extension://{id}/{name}.js\"\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Items with Default Values in TypeScript\nDESCRIPTION: Illustrates different ways to define default values for storage items using 'fallback' and 'init' options.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst theme = storage.defineItem('local:theme', {\n  fallback: 'dark',\n});\nconst allowEditing = storage.defineItem('local:allow-editing', {\n  fallback: true,\n});\n\nconst userId = storage.defineItem('local:user-id', {\n  init: () => globalThis.crypto.randomUUID(),\n});\nconst installDate = storage.defineItem('local:install-date', {\n  init: () => new Date().getTime(),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Integrated UI in Content Scripts with Svelte\nDESCRIPTION: Implementing an integrated UI in a content script using Svelte. Shows how to mount a Svelte component to the UI container and properly clean up when the UI is removed.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// entrypoints/example-ui.content/index.ts\nimport App from './App.svelte';\nimport { mount, unmount } from 'svelte';\n\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n\n  main(ctx) {\n    const ui = createIntegratedUi(ctx, {\n      position: 'inline',\n      anchor: 'body',\n      onMount: (container) => {\n        // Create the Svelte app inside the UI container\n        mount(App, {\n          target: container,\n        });\n      },\n      onRemove: (app) => {\n        // Destroy the app when the UI is removed\n        unmount(app);\n      },\n    });\n\n    // Call mount to add the UI to the DOM\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Declaration File Generation Module\nDESCRIPTION: Shows how to generate TypeScript declaration files in a module.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWxtModule } from 'wxt/modules';\nimport { resolve } from 'node:path';\n\nexport default defineWxtModule({\n  setup(wxt) {\n    const typesPath = resolve(wxt.config.wxtDir, 'my-module/types.d.ts');\n    const typesCode = `\n      // Declare global types, perform type augmentation\n    `;\n\n    wxt.hook('prepare:types', async (_, entries) => {\n      entries.push({\n        path: 'my-module/types.d.ts',\n        text: `\n          // Declare global types, perform type augmentation, etc\n        `,\n        // IMPORTANT - without this line your declaration file will not be a part of the TS project:\n        tsReference: true,\n      });\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Integrated UI in Content Scripts with Vanilla JS\nDESCRIPTION: Implementing an integrated UI in a content script using vanilla JavaScript. Integrated UIs are injected alongside page content and affected by the page's CSS.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// entrypoints/example-ui.content.ts\nexport default defineContentScript({\n  matches: ['<all_urls>'],\n\n  main(ctx) {\n    const ui = createIntegratedUi(ctx, {\n      position: 'inline',\n      anchor: 'body',\n      onMount: (container) => {\n        // Append children to the container\n        const app = document.createElement('p');\n        app.textContent = '...';\n        container.append(app);\n      },\n    });\n\n    // Call mount to add the UI to the DOM\n    ui.mount();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Understanding WXT Import Replacement for Testing\nDESCRIPTION: Explains how WXT's import replacement works for the #imports module during testing, and how to properly mock WXT utilities in tests by using their actual import paths.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/unit-testing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// What you write\nimport { injectScript, createShadowRootUi } from '#imports';\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Configuration in TypeScript with WXT\nDESCRIPTION: This snippet shows how to use the useAppConfig function to access the runtime configuration in WXT projects. It imports the function and logs the configuration object.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/runtime.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppConfig } from '#imports';\n\nconsole.log(useAppConfig()); // { theme: \"dark\" }\n```\n\n----------------------------------------\n\nTITLE: Versioning Storage Items in TypeScript (v2)\nDESCRIPTION: Updates the storage item to version 2, adding an ID field and providing a migration function.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nanoid } from 'nanoid';\n\ntype IgnoredWebsiteV1 = string;\ninterface IgnoredWebsiteV2 {\n  id: string;\n  website: string;\n}\n\nexport const ignoredWebsites = storage.defineItem<IgnoredWebsiteV2[]>(\n  'local:ignoredWebsites',\n  {\n    fallback: [],\n    version: 2,\n    migrations: {\n      // Ran when migrating from v1 to v2\n      2: (websites: IgnoredWebsiteV1[]): IgnoredWebsiteV2[] => {\n        return websites.map((website) => ({ id: nanoid(), website }));\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: History Page Template in HTML\nDESCRIPTION: HTML template for overriding the browser's history page. WXT automatically updates the manifest to implement this override.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Title</title>\n    <!-- Set include/exclude if the page should be removed from some builds -->\n    <meta name=\"manifest.include\" content=\"['chrome', ...]\" />\n    <meta name=\"manifest.exclude\" content=\"['chrome', ...]\" />\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Copying WASM Files in WXT Module\nDESCRIPTION: Defines a WXT module to copy a WASM file from node_modules to the output directory during the build process.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolve } from 'node:path';\n\nexport default defineWxtModule((wxt) => {\n  wxt.hook('build:publicAssets', (_, assets) => {\n    assets.push({\n      absoluteSrc: resolve(\n        'node_modules/@oxc-parser/wasm/web/oxc_parser_wasm_bg.wasm',\n      ),\n      relativeDest: 'oxc_parser_wasm_bg.wasm',\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Targeting Browsers with WXT CLI Commands\nDESCRIPTION: Demonstrates how to use the -b CLI flag to create separate builds for specific browsers. By default, Chrome is targeted if no flag is specified.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/target-different-browsers.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwxt            # same as: wxt -b chrome\nwxt -b firefox\nwxt -b custom\n```\n\n----------------------------------------\n\nTITLE: Host Permissions Configuration\nDESCRIPTION: Example of configuring host permissions in the manifest.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    host_permissions: ['https://www.google.com/*'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Browser Binaries for WXT Development\nDESCRIPTION: This code demonstrates how to set custom browser binaries for Chrome, Firefox, and Edge in the web-ext.config.ts file. It allows developers to use specific browser versions or installations for testing.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/browser-startup.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineWebExtConfig({\n  binaries: {\n    chrome: '/path/to/chrome-beta', // Use Chrome Beta instead of regular Chrome\n    firefox: 'firefoxdeveloperedition', // Use Firefox Developer Edition instead of regular Firefox\n    edge: '/path/to/edge', // Open MS Edge when running \"wxt -b edge\"\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Defined Storage Item in TypeScript\nDESCRIPTION: Demonstrates how to use the methods provided by a defined storage item.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait showChangelogOnUpdate.getValue();\nawait showChangelogOnUpdate.setValue(false);\nawait showChangelogOnUpdate.removeValue();\nconst unwatch = showChangelogOnUpdate.watch((newValue) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Optional Chaining for Browser API Feature Detection\nDESCRIPTION: Demonstrates a more concise approach to feature detection using JavaScript's optional chaining operator. This helps prevent errors when APIs are not available.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/extension-apis.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbrowser.runtime.onSuspend?.addListener(() => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Assets in Content Scripts for WXT\nDESCRIPTION: Demonstrates how to properly reference and use assets in content scripts by converting relative paths to full URLs using browser.runtime.getURL.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport iconUrl from '/icon/128.png';\n\nexport default defineContentScript({\n  matches: ['*://*.google.com/*'],\n  main() {\n    console.log(iconUrl); // \"/icon/128.png\"\n    console.log(browser.runtime.getURL(iconUrl)); // \"chrome-extension://<id>/icon/128.png\"\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Minimal Background Script Definition\nDESCRIPTION: Shows the minimal implementation of a background script entrypoint using defineBackground\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineBackground(() => {\n  // Executed when background is loaded\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Storage Metadata in TypeScript\nDESCRIPTION: Examples of setting, getting, and removing metadata for storage keys using WXT Storage.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait Promise.all([\n  storage.setItem('local:preference', true),\n  storage.setMeta('local:preference', { lastModified: Date.now() }),\n]);\n\nawait storage.setMeta('local:preference', { lastModified: Date.now() });\nawait storage.setMeta('local:preference', { v: 2 });\n\nawait storage.getMeta('local:preference'); // { v: 2, lastModified: 1703690746007 }\n\n// Remove all properties\nawait storage.removeMeta('local:preference');\n\n// Remove only the \"lastModified\" property\nawait storage.removeMeta('local:preference', 'lastModified');\n\n// Remove multiple properties\nawait storage.removeMeta('local:preference', ['lastModified', 'v']);\n```\n\n----------------------------------------\n\nTITLE: Submitting Extensions to Multiple Stores with WXT\nDESCRIPTION: Command to submit extension ZIP files to Chrome Web Store, Firefox Addon Store, and Edge Addons for review and publishing.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/publishing.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwxt submit \\\n  --chrome-zip .output/{your-extension}-{version}-chrome.zip \\\n  --firefox-zip .output/{your-extension}-{version}-firefox.zip --firefox-sources-zip .output/{your-extension}-{version}-sources.zip \\\n  --edge-zip .output/{your-extension}-{version}-chrome.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Module in WXT\nDESCRIPTION: TypeScript configuration for setting up the Vue module in WXT, including optional configuration options for Vite and Vue features.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/module-vue/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// wxt.config.ts\nexport default defineConfig({\n  // Required\n  modules: ['@wxt-dev/module-vue'],\n\n  // Optional: Pass options to the module:\n  vue: {\n    vite: {\n      script: {\n        propsDestructure: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Assets in CSS for WXT\nDESCRIPTION: Illustrates how to use an image asset from the /assets directory as a background image in CSS.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.bg-image {\n  background-image: url(~/assets/image.png);\n}\n```\n\n----------------------------------------\n\nTITLE: English Localization Messages Example\nDESCRIPTION: Example of a messages.json file containing English translations with a simple hello world message.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/i18n.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"helloWorld\": {\n    \"message\": \"Hello world!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT for Svelte integration\nDESCRIPTION: Configuration example for integrating Svelte in a WXT project. This demonstrates how to register the Svelte module in the WXT configuration file and how to pass optional configuration to the module.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/module-svelte/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// wxt.config.ts\nexport default defineConfig({\n  // Required\n  modules: ['@wxt-dev/module-svelte'],\n\n  // Optional: Pass options to the module:\n  svelte: {\n    vite: {\n      // ...\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: WXT Pre-processing Steps\nDESCRIPTION: Lists the key pre-processing steps WXT performs to enable browser-like code execution in NodeJS: providing browser globals via linkedom, creating fake browser/chrome APIs, and stripping/tree-shaking code outside the main function.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/entrypoint-loaders.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Use `linkedom` to make a small set of browser globals (`window`, `document`, etc) available.\n2. Use `@webext-core/fake-browser` to create a fake version of the `chrome` and `browser` globals expected by extensions.\n3. Pre-process the JS/TS code, stripping out the `main` function then tree-shaking unused code from the file\n```\n\n----------------------------------------\n\nTITLE: Building Extension ZIP Files with WXT CLI\nDESCRIPTION: Commands to create ZIP files for browser extensions targeting different platforms using WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/publishing.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwxt zip\nwxt zip -b firefox\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Accessible Resources for IFrame UI\nDESCRIPTION: Shows how to configure the manifest in wxt.config.ts to make the IFrame HTML page accessible as a web resource. This is necessary for loading the page into the IFrame.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    web_accessible_resources: [\n      {\n        resources: ['example-iframe.html'],\n        matches: [...],\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Assets in HTML for WXT\nDESCRIPTION: Shows how to reference an image asset from the /assets directory in an HTML file using a relative path.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- In HTML tags, you must use the relative path --->\n<img src=\"../assets/image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Plural Forms in Translations\nDESCRIPTION: Example of defining different translations for singular and plural forms based on a count.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n  1: 1 item\n  n: $1 items\n```\n\n----------------------------------------\n\nTITLE: WXT Path Alias Configuration\nDESCRIPTION: Example of configuring custom path aliases in WXT configuration file using the alias option, demonstrating both directory and file aliases.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolve } from 'node:path';\n\nexport default defineConfig({\n  alias: {\n    // Directory:\n    testing: resolve('utils/testing'),\n    // File:\n    strings: resolve('utils/strings.ts'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Accessible Resources for WASM in WXT\nDESCRIPTION: Configures the manifest to include the WASM file in web_accessible_resources, allowing it to be accessed by content scripts.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    web_accessible_resources: [\n      {\n        // We'll use this matches in the content script as well\n        matches: ['*://*.github.com/*'],\n        // Use the same path as `relativeDest` from the WXT module\n        resources: ['/oxc_parser_wasm_bg.wasm'],\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Translation in Code\nDESCRIPTION: Shows how to retrieve translated strings using the browser.i18n API.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/i18n.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbrowser.i18n.getMessage('helloWorld');\n```\n\n----------------------------------------\n\nTITLE: Basic YouTube Content Script Implementation\nDESCRIPTION: Basic example showing a content script implementation for YouTube that only runs on full page loads, demonstrating the limitations with SPA navigation.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineContentScript({\n  matches: ['*://*.youtube.com/watch*'],\n  main(ctx) {\n    console.log('YouTube content script loaded');\n\n    mountUi(ctx);\n  },\n});\n\nfunction mountUi(ctx: ContentScriptContext): void {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Config Module Implementation\nDESCRIPTION: Shows how to implement runtime configuration options in a WXT module.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWxtModule } from 'wxt/modules';\nimport 'wxt/utils/define-app-config';\n\nexport interface MyModuleRuntimeOptions {\n  // Add your runtime options here...\n}\ndeclare module 'wxt/utils/define-app-config' {\n  export interface WxtAppConfig {\n    myModule: MyModuleOptions;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Different Key Types in Translations\nDESCRIPTION: Example showing how to access both verbose and regular keys in a mixed locale file, including what works and what doesn't.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ni18n.t('appName'); // ✅ \"GitHub - Better Line Counts\"\ni18n.t('appName.message'); // ❌\ni18n.t('ok'); // ✅ \"OK\"\ni18n.t('deleteConfirmation'); // ❌\ni18n.t('deleteConfirmation.title'); // ✅ \"Delete XYZ?\"\ni18n.t('deleteConfirmation.message'); // ✅ \"You cannot undo this action once taken.\"\n```\n\n----------------------------------------\n\nTITLE: Using Context Helpers for Event Handling in Content Scripts\nDESCRIPTION: Helper methods provided by the context object to ensure events and timers are properly cleaned up when the extension context is invalidated.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.addEventListener(...);\nctx.setTimeout(...);\nctx.setInterval(...);\nctx.requestAnimationFrame(...);\n// and more\n```\n\n----------------------------------------\n\nTITLE: Runtime Module Generation Implementation\nDESCRIPTION: Shows how to generate a runtime module with auto-imports and aliases.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWxtModule } from 'wxt/modules';\nimport { resolve } from 'node:path';\n\nexport default defineWxtModule({\n  imports: [\n    // Add auto-imports\n    { from: '#analytics', name: 'analytics' },\n    { from: '#analytics', name: 'reportEvent' },\n    { from: '#analytics', name: 'reportPageView' },\n  ],\n\n  setup(wxt) {\n    const analyticsModulePath = resolve(\n      wxt.config.wxtDir,\n      'analytics/index.ts',\n    );\n    const analyticsModuleCode = `\n      import { createAnalytics } from 'some-module';\n\n      export const analytics = createAnalytics(useAppConfig().analytics);\n      export const { reportEvent, reportPageView } = analytics;\n    `;\n\n    addAlias(wxt, '#analytics', analyticsModulePath);\n\n    wxt.hook('prepare:types', async (_, entries) => {\n      entries.push({\n        path: analyticsModulePath,\n        text: analyticsModuleCode,\n      });\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Build-time Config Module Implementation\nDESCRIPTION: Demonstrates how to add build-time configuration options to a WXT module with TypeScript type definitions.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWxtModule } from 'wxt/modules';\nimport 'wxt';\n\nexport interface MyModuleOptions {\n  // Add your build-time options here...\n}\ndeclare module 'wxt' {\n  export interface InlineConfig {\n    // Add types for the \"myModule\" key in wxt.config.ts\n    myModule: MyModuleOptions;\n  }\n}\n\nexport default defineWxtModule<AnalyticModuleOptions>({\n  configKey: 'myModule',\n\n  // Build time config is available via the second argument of setup\n  setup(wxt, options) {\n    console.log(options);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Vite Plugins in WXT TypeScript Configuration\nDESCRIPTION: This example shows how to add Vite plugins to a WXT project. It demonstrates adding the VueRouter plugin from the unplugin-vue-router package.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/vite.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'wxt';\nimport VueRouter from 'unplugin-vue-router/vite';\n\nexport default defineConfig({\n  vite: () => ({\n    plugins: [\n      VueRouter({\n        /* ... */\n      }),\n    ],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking WXT APIs in Vitest Tests\nDESCRIPTION: Shows how to mock WXT utilities in Vitest tests by targeting their actual import paths rather than the #imports abstraction.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/unit-testing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvi.mock(\"wxt/utils/inject-script\", () => ({\n  injectScript: ...\n}))\n```\n\n----------------------------------------\n\nTITLE: Sample Messages JSON File for Non-WXT Setup\nDESCRIPTION: Example of a messages.json file in the standard format used by browser.i18n APIs. This format is used when not integrating with the WXT build process.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"helloWorld\": {\n    \"message\": \"Hello world!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the browser API in TypeScript\nDESCRIPTION: Example of importing and using the browser extension API with proper type support. Shows how to access runtime properties and register event listeners with TypeScript types.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/browser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { browser, Browser } from '@wxt-dev/browser';\n// Or if you're using WXT:\n// import { browser, Browser } from 'wxt/browser';\n\nconsole.log(browser.runtime.id);\n\nconst onMessage = (message: any, sender: Browser.runtime.MessageSender) => {\n  console.log(message);\n};\nbrowser.runtime.onMessage.addListener(onMessage);\n```\n\n----------------------------------------\n\nTITLE: File Generation Module Implementation\nDESCRIPTION: Shows how to generate output files and add them to web accessible resources.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWxtModule } from 'wxt/modules';\n\nexport default defineWxtModule({\n  setup(wxt) {\n    // Relative to the output directory\n    const generatedFilePath = 'some-file.txt';\n\n    wxt.hook('build:publicAssets', (_, assets) => {\n      assets.push({\n        relativeDest: generatedFilePath,\n        contents: 'some generated text',\n      });\n    });\n\n    wxt.hook('build:manifestGenerated', (_, manifest) => {\n      manifest.web_accessible_resources ??= [];\n      manifest.web_accessible_resources.push({\n        matches: ['*://*'],\n        resources: [generatedFilePath],\n      });\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Entrypoints Module Implementation\nDESCRIPTION: Demonstrates how to add custom entrypoints to the build process.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWxtModule } from 'wxt/modules';\n\nexport default defineWxtModule({\n  setup(wxt) {\n    wxt.hook('entrypoints:found', (_, entrypointInfos) => {\n      // Add your new entrypoint\n      entrypointInfos.push({\n        name: 'my-custom-script',\n        inputPath: 'path/to/custom-script.js',\n        type: 'content-script',\n      });\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Project Structure for I18n Files\nDESCRIPTION: Shows the required directory structure for organizing localization files in the public directory.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/i18n.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n📂 {srcDir}/\n   📂 public/\n      📂 _locales/\n         📂 en/\n            📄 messages.json\n         📂 de/\n            📄 messages.json\n         📂 ko/\n            📄 messages.json\n```\n\n----------------------------------------\n\nTITLE: Configuring @wxt-dev/module-solid in wxt.config.ts\nDESCRIPTION: TypeScript configuration for adding the @wxt-dev/module-solid to the web extension project. It demonstrates how to include the module in the config and optionally pass additional Vite options.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/module-solid/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// wxt.config.ts\nexport default defineConfig({\n  // Required\n  modules: ['@wxt-dev/module-solid'],\n\n  // Optional: Pass options to the module:\n  solid: {\n    vite: {\n      // ...\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Versioning Storage Items in TypeScript (v1)\nDESCRIPTION: Defines the first version of a versioned storage item for storing ignored websites.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype IgnoredWebsiteV1 = string;\n\nexport const ignoredWebsites = storage.defineItem<IgnoredWebsiteV1[]>(\n  'local:ignoredWebsites',\n  {\n    fallback: [],\n    version: 1,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding NPM Module Configuration in TypeScript\nDESCRIPTION: Shows how to configure an NPM-installed WXT module in the config file.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  modules: ['@wxt-dev/auto-icons'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT for i18n Support\nDESCRIPTION: Configuration for wxt.config.ts to enable the i18n module and set up a default locale. This is required to integrate the i18n functionality with WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  modules: ['@wxt-dev/i18n/module'],\n  manifest: {\n    default_locale: 'en',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Unlisted Script with Options\nDESCRIPTION: Extended implementation of an unlisted script with configuration options including include/exclude patterns and a main execution function.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineUnlistedScript({\n  // Set include/exclude if the script should be removed from some builds\n  include: undefined | string[],\n  exclude: undefined | string[],\n\n  main() {\n    // Executed when script is loaded\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Safe i18n Instance Creation\nDESCRIPTION: Example showing how to create a type-safe i18n instance by importing the generated type definitions.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { WxtI18nStructure } from './wxt-i18n-structure';\n\nexport const i18n = createI18n<WxtI18nStructure>();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Reference Path Declaration\nDESCRIPTION: Alternative setup for monorepos where extending the base config isn't desired, adding WXT type definitions directly.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"./.wxt/wxt.d.ts\" />\n```\n\n----------------------------------------\n\nTITLE: Installing WXT Storage Package\nDESCRIPTION: Commands for installing the @wxt-dev/storage package using various package managers when not using WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @wxt-dev/storage\npnpm add @wxt-dev/storage\nyarn add @wxt-dev/storage\nbun add @wxt-dev/storage\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Storage Items with Defined and String Keys in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the setItems method to perform a bulk operation, setting multiple storage items at once. It shows the usage of both a defined storage item (userId) and a string key ('local:installDate').\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = storage.defineItem('local:userId');\n\nawait storage.setItems([\n  { key: 'local:installDate', value: Date.now() },\n  { item: userId, value: generateUserId() },\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing Auto-imports Configuration in ESLint 8\nDESCRIPTION: Example of importing and using the WXT-generated auto-imports configuration in an ESLint 8 config file. This enables ESLint to recognize auto-imported variables.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/auto-imports.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// .eslintrc.mjs\nexport default {\n  extends: ['./.wxt/eslintrc-auto-import.json'],\n  // The rest of your config...\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing WXT Directory Structure\nDESCRIPTION: Shows how to customize various directory paths in the WXT configuration file, including source, modules, output, public, and entrypoints directories.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/project-structure.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  srcDir: \"src\",\n  modulesDir: \"wxt-modules\",\n  outDir: \"dist\",\n  publicDir: \"static\",\n  entrypointsDir: \"entries\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an i18n Instance Without WXT\nDESCRIPTION: Code to manually create and export an i18n object when not using WXT. This approach requires additional setup for full features.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createI18n } from '@wxt-dev/i18n';\n\nexport const i18n = createI18n();\n\ni18n.t('helloWorld'); // \"Hello world!\";\n```\n\n----------------------------------------\n\nTITLE: Installing WXT via Package Managers\nDESCRIPTION: Commands to initialize WXT project using different package managers including PNPM, Bun, NPM and Yarn.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dlx wxt@latest init\n```\n\nLANGUAGE: sh\nCODE:\n```\nbunx wxt@latest init\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx wxt@latest init\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Use NPM initially, but select Yarn when prompted\nnpx wxt@latest init\n```\n\n----------------------------------------\n\nTITLE: Setting Up Portal Target in React with Shadow DOM\nDESCRIPTION: React implementation for creating a portal target context within a Shadow DOM. This includes both the context creation and its usage in the content script entrypoint to ensure portals render within the Shadow DOM.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/faq.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// hooks/PortalTargetContext.ts\nimport { createContext } from 'react';\n\nexport const PortalTargetContext = createContext<HTMLElement>();\n\n// entrypoints/example.content.ts\nimport ReactDOM from 'react-dom/client';\nimport App from './App.tsx';\nimport PortalTargetContext from '~/hooks/PortalTargetContext';\n\nconst ui = await create`ShadowRoot`Ui(ctx, {\n  // ...\n  onMount: (container, shadow) => {\n    const portalTarget = shadow.querySelector('body')!;\n    const root = ReactDOM.createRoot(container);\n    root.render(\n      <PortalTargetContext.Provider value={portalTarget}>\n        <App />\n      </PortalTargetContext.Provider>,\n    );\n    return root;\n  },\n});\nui.mount();\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in WXT Content Scripts\nDESCRIPTION: In WXT, CSS for content scripts can be imported directly in the JavaScript file, and WXT automatically adds it to the manifest.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// entrypoints/example.content/index.ts\nimport './style.css';\n\nexport default defineContentScript({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Icon Configuration\nDESCRIPTION: Example of manually specifying extension icons in the manifest.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    icons: {\n      16: '/extension-icon-16.png',\n      24: '/extension-icon-24.png',\n      48: '/extension-icon-48.png',\n      96: '/extension-icon-96.png',\n      128: '/extension-icon-128.png',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Vite Plugin for Custom Framework Support\nDESCRIPTION: Shows how to add a custom Vite plugin (in this case, React) to the WXT configuration for frameworks without built-in modules.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/frontend-frameworks.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'wxt';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  vite: () => ({\n    plugins: [react()],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Plural Forms with Different Counts\nDESCRIPTION: Example showing how to use translations with plural forms by passing a count as the second argument to i18n.t().\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ni18n.t('items', 0); // \"0 items\"\ni18n.t('items', 1); // \"1 item\"\ni18n.t('items', 2); // \"2 items\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite SSR for WebExtension Polyfill (TypeScript)\nDESCRIPTION: Demonstrates how to update the WXT configuration to add NPM packages that depend on the webextension-polyfill to Vite's ssr.noExternal option when using the new vite-node entrypoint loader.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  vite: () => ({ // [!code ++]\n    ssr: { // [!code ++]\n      noExternal: ['@webext-core/messaging', '@webext-core/proxy-service'], // [!code ++]\n    }, // [!code ++]\n  }), // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Teleport Target in Vue with Shadow DOM\nDESCRIPTION: Vue implementation for creating a teleport target within a Shadow DOM. This provides a solution for components that need to render elements outside their parent component but still within the Shadow DOM's isolation boundary.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './App.vue';\n\nconst ui = await create`ShadowRoot`Ui(ctx, {\n  // ...\n  onMount: (container, shadow) => {\n    const teleportTarget = shadow.querySelector('body')!;\n    const app = createApp(App)\n      .provide('TeleportTarget', teleportTarget)\n      .mount(container);\n    return app;\n  },\n});\nui.mount();\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Translation Keys\nDESCRIPTION: Example showing how to access nested translation keys using dot notation in the i18n.t() function.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ni18n.t('ok'); // \"OK\"\ni18n.t('cancel'); // \"Cancel\"\ni18n.t('welcome.title'); // \"Welcome to XYZ\"\ni18n.t('dialogs.confirmation.title'); // \"Are you sure?\"\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration\nDESCRIPTION: JSON configuration showing the required npm scripts for WXT development, building and packaging.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"wxt\",\n    \"dev:firefox\": \"wxt -b firefox\",\n    \"build\": \"wxt build\",\n    \"build:firefox\": \"wxt build -b firefox\",\n    \"zip\": \"wxt zip\",\n    \"zip:firefox\": \"wxt zip -b firefox\",\n    \"postinstall\": \"wxt prepare\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Module in WXT\nDESCRIPTION: Example configuration showing how to pass custom options to the i18n module in a WXT configuration file.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  modules: ['@wxt-dev/i18n'],\n  i18n: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Keys in YAML Locale File\nDESCRIPTION: Example of organizing translations into nested groups in a YAML locale file, which improves organization for larger projects.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nok: OK\ncancel: Cancel\nwelcome:\n  title: Welcome to XYZ\ndialogs:\n  confirmation:\n    title: 'Are you sure?'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Content Scripts in Chrome\nDESCRIPTION: Code to list the content scripts dynamically registered by WXT during development. This can be run in the service worker's console to see which content scripts are currently active.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait chrome.scripting.getRegisteredContentScripts();\n```\n\n----------------------------------------\n\nTITLE: Configuring Ant Design with Shadow DOM in React\nDESCRIPTION: Example of configuring Ant Design's StyleProvider to work within a Shadow DOM by directing styles to the correct container. This ensures component styles are properly applied within the isolated Shadow DOM context.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleProvider } from '@ant-design/cssinjs';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.tsx';\n\nconst ui = await create`ShadowRoot`Ui(ctx, {\n  // ...\n  onMount: (container, shadow) => {\n    const cssContainer = shadow.querySelector('head')!;\n    const root = ReactDOM.createRoot(container);\n    root.render(\n      <StyleProvider container={cssContainer}>\n        <App />\n      </StyleProvider>,\n    );\n    return root;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Structure for Single File Entrypoint\nDESCRIPTION: Demonstrates the folder structure for a single file entrypoint in WXT\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n📂 entrypoints/\n   📄 {name}.{ext}\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Dotenv Files\nDESCRIPTION: Shows the naming pattern for dotenv files supported by WXT, which follows the same convention as Vite. Files can be customized for different modes and browsers.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/environment-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.env\n.env.local\n.env.[mode]\n.env.[mode].local\n.env.[browser]\n.env.[browser].local\n.env.[mode].[browser]\n.env.[mode].[browser].local\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Imports with #imports Module\nDESCRIPTION: Example of explicitly importing WXT APIs through the #imports module instead of relying on auto-imports. This approach is useful when auto-imports are disabled or when explicit imports are preferred.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/auto-imports.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  createShadowRootUi,\n  ContentScriptContext,\n  MatchPattern,\n} from '#imports';\n```\n\n----------------------------------------\n\nTITLE: Using i18n Translation in TypeScript\nDESCRIPTION: Example showing how to import and use the i18n object to translate a message key in TypeScript code.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from '#i18n';\n\ni18n.t('helloWorld'); // \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Unversioned Storage Item in TypeScript\nDESCRIPTION: Shows how to define a simple, unversioned storage item for storing ignored websites.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ignoredWebsites = storage.defineItem<string[]>(\n  'local:ignoredWebsites',\n  {\n    fallback: [],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Module in WXT\nDESCRIPTION: Adding the UnoCSS module to the WXT configuration file to enable UnoCSS integration.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/unocss/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  modules: ['@wxt-dev/unocss'],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Vite-Specific APIs in Content Script Entrypoint (TypeScript)\nDESCRIPTION: Shows an example of using Vite-specific APIs like import.meta.glob to define entrypoint options in a content script, which is now possible with the vite-node entrypoint loader.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst providers: Record<string, any> = import.meta.glob('../providers/*', {\n  eager: true,\n});\n\nexport default defineContentScript({\n  matches: Object.values(providers).flatMap(\n    (provider) => provider.default.paths,\n  ),\n  async main() {\n    console.log('Hello content.');\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in Dotenv Files\nDESCRIPTION: Example showing how to define environment variables in a .env file. Variables must be prefixed with WXT_ or VITE_ to be available at runtime.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/environment-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# .env\nWXT_API_KEY=...\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT ZIP Options in TypeScript\nDESCRIPTION: TypeScript configuration for customizing the ZIP process in WXT, including setting up options for how files are bundled.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/publishing.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'wxt';\n\nexport default defineConfig({\n  zip: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Configuration Setup\nDESCRIPTION: Minimal TSConfig configuration required for a WXT project that extends the base configuration generated by WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n// <rootDir>/tsconfig.json\n{\n  \"extends\": \".wxt/tsconfig.json\",\n}\n```\n\n----------------------------------------\n\nTITLE: Versioning Storage Items in TypeScript (v3)\nDESCRIPTION: Further updates the storage item to version 3, adding an 'enabled' field and providing another migration function.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nanoid } from 'nanoid';\n\ntype IgnoredWebsiteV1 = string;\ninterface IgnoredWebsiteV2 {\n  id: string;\n  website: string;\n}\ninterface IgnoredWebsiteV3 {\n  id: string;\n  website: string;\n  enabled: boolean;\n}\n\nexport const ignoredWebsites = storage.defineItem<IgnoredWebsiteV3[]>(\n  'local:ignoredWebsites',\n  {\n    fallback: [],\n    version: 3,\n    migrations: {\n      // Ran when migrating from v1 to v2\n      2: (websites: IgnoredWebsiteV1[]): IgnoredWebsiteV2[] => {\n        return websites.map((website) => ({ id: nanoid(), website }));\n      },\n      // Ran when migrating from v2 to v3\n      3: (websites: IgnoredWebsiteV2[]): IgnoredWebsiteV3[] => {\n        return websites.map((website) => ({ ...website, enabled: true }));\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Importing UnoCSS Styles in WXT Entrypoint\nDESCRIPTION: Importing the virtual UnoCSS stylesheet in your WXT entrypoint file to apply UnoCSS styles.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/unocss/README.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport 'virtual:uno.css';\n```\n\n----------------------------------------\n\nTITLE: Updating Import Paths to Use #imports\nDESCRIPTION: Example of updating import statements to use the new #imports virtual module instead of specific WXT imports.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { storage } from 'wxt/storage'; // [!code --]\nimport { defineContentScript } from 'wxt/sandbox'; // [!code --]\nimport { ContentScriptContext, useAppConfig } from 'wxt/client'; // [!code --]\nimport { storage } from '#imports'; // [!code ++]\nimport { defineContentScript } from '#imports'; // [!code ++]\nimport { ContentScriptContext, useAppConfig } from '#imports'; // [!code ++\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 9 Auto-imports in WXT\nDESCRIPTION: Configuration for enabling ESLint 9 integration with auto-imports in WXT. This generates the necessary ESLint configuration for auto-imported variables.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/auto-imports.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  imports: {\n    eslintrc: {\n      enabled: 9,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Package Version Configuration Examples\nDESCRIPTION: Shows how version and version_name are derived from package.json.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.3.0-alpha2\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.3.0\",\n  \"version_name\": \"1.3.0-alpha2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Path Alias Usage Example\nDESCRIPTION: Demonstration of how to use the configured path aliases in TypeScript code to import modules.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/typescript.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fakeTab } from 'testing/fake-objects';\nimport { toLowerCase } from 'strings';\n```\n\n----------------------------------------\n\nTITLE: Importing WXT Storage in TypeScript\nDESCRIPTION: Shows how to import the storage module when using WXT. The storage module is built-in and can be imported from '#imports'.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { storage } from '#imports';\n```\n\n----------------------------------------\n\nTITLE: Recommended Folder Structure for Multiple Apps\nDESCRIPTION: Presents the recommended folder structure for organizing multiple UI components in a web extension project using WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/frontend-frameworks.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n📂 {srcDir}/\n   📂 assets/          <---------- Put shared assets here\n      📄 tailwind.css\n   📂 components/\n      📄 Button.tsx\n   📂 entrypoints/\n      📂 options/       <--------- Use a folder with an index.html file in it\n         📁 pages/      <--------- A good place to put your router pages if you have them\n         📄 index.html\n         📄 App.tsx\n         📄 main.tsx    <--------- Create and mount your app here\n         📄 style.css   <--------- Entrypoint-specific styles\n         📄 router.ts\n```\n\n----------------------------------------\n\nTITLE: Options Page Template in HTML\nDESCRIPTION: HTML template for extension options page with customizable manifest options including open_in_tab and browser styling preferences.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Options Title</title>\n\n    <!-- Customize the manifest options -->\n    <meta name=\"manifest.open_in_tab\" content=\"true|false\" />\n    <meta name=\"manifest.chrome_style\" content=\"true|false\" />\n    <meta name=\"manifest.browser_style\" content=\"true|false\" />\n\n    <!-- Set include/exclude if the page should be removed from some builds -->\n    <meta name=\"manifest.include\" content=\"['chrome', ...]\" />\n    <meta name=\"manifest.exclude\" content=\"['chrome', ...]\" />\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing Auto-imports Configuration in ESLint 9\nDESCRIPTION: Example of importing and using the WXT-generated auto-imports configuration in an ESLint 9 config file. This enables ESLint to recognize auto-imported variables.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/auto-imports.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// eslint.config.mjs\nimport autoImports from './.wxt/eslint-auto-imports.mjs';\n\nexport default [\n  autoImports,\n  {\n    // The rest of your config...\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint 8 Auto-imports in WXT\nDESCRIPTION: Configuration for enabling ESLint 8 integration with auto-imports in WXT. This generates the necessary ESLint configuration for auto-imported variables.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/auto-imports.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  imports: {\n    eslintrc: {\n      enabled: 8,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generated File Access Example\nDESCRIPTION: Shows how to access a generated file at runtime.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await fetch(browser.runtime.getURL('/some-text.txt'));\n```\n\n----------------------------------------\n\nTITLE: Using Substitutions in Translations\nDESCRIPTION: Example of defining translations that accept substitutions with $1-$9 placeholders, similar to the browser.i18n API.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nhello: Hello $1!\norder: Thanks for ordering your $1\n```\n\n----------------------------------------\n\nTITLE: Extension Popup Template in HTML\nDESCRIPTION: HTML template for extension popup with configurable options for icons, action type, and browser styling.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\n    <!-- Set the `action.default_title` in the manifest -->\n    <title>Default Popup Title</title>\n\n    <!-- Customize the manifest options -->\n    <meta\n      name=\"manifest.default_icon\"\n      content=\"{\n        16: '/icon-16.png',\n        24: '/icon-24.png',\n        ...\n      }\"\n    />\n    <meta name=\"manifest.type\" content=\"page_action|browser_action\" />\n    <meta name=\"manifest.browser_style\" content=\"true|false\" />\n\n    <!-- Set include/exclude if the page should be removed from some builds -->\n    <meta name=\"manifest.include\" content=\"['chrome', ...]\" />\n    <meta name=\"manifest.exclude\" content=\"['chrome', ...]\" />\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Item Definition with Default Value (TypeScript)\nDESCRIPTION: Demonstrates how to update the storage item definition to include the required defaultValue option and adjust the type parameter for items with versioning.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst item = storage.defineItem<number>(\"local:count\", { // [!code --]\nconst item = storage.defineItem<number | null>(\"local:count\", { // [!code ++]\ndefaultValue: null, // [!code ++]\n  version: ...,\n  migrations: ...,\n})\n```\n\n----------------------------------------\n\nTITLE: Action Without Popup Configuration\nDESCRIPTION: Configuration for action without popup UI, showing both MV2 and MV3 compatibility.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    action: {},\n    page_action: {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Localized Manifest Properties\nDESCRIPTION: Shows how to reference localized strings in the extension manifest for name and description.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/i18n.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    name: '__MSG_extName__',\n    description: '__MSG_extDescription__',\n    default_locale: 'en',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced UnoCSS Configuration for WXT\nDESCRIPTION: Configuring UnoCSS with additional options, such as excluding specific entrypoints from UnoCSS processing.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/unocss/README.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  modules: ['@wxt-dev/unocss'],\n  unocss: {\n    // Exclude unocss from running for the background\n    excludeEntrypoints: ['background'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Plural Forms with Zero Case\nDESCRIPTION: Example showing how translations with plural forms work when a special zero case is defined.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ni18n.t('items', 0); // \"No items\"\ni18n.t('items', 1); // \"1 item\"\ni18n.t('items', 2); // \"2 items\"\n```\n\n----------------------------------------\n\nTITLE: Unlisted CSS Template\nDESCRIPTION: Basic CSS template for styling extension components. Supports various preprocessors through Vite configuration.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Watch Callback Types (TypeScript)\nDESCRIPTION: Shows how to update the type annotations in the storage watch callback to reflect the correct types for newValue and oldValue, which are no longer nullable when a default value is provided.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst item = storage.defineItem<number>('local:count', { defaultValue: 0 });\nitem.watch((newValue: number | null, oldValue: number | null) => { // [!code --]\nitem.watch((newValue: number, oldValue: number) => { // [!code ++]\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Standalone WXT Storage in TypeScript\nDESCRIPTION: Shows how to import the storage module when using it as a standalone package without WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { storage } from '@wxt-dev/storage';\n```\n\n----------------------------------------\n\nTITLE: Building Firefox ZIP Files with package managers\nDESCRIPTION: Commands for different package managers to install dependencies and build Firefox extension ZIP files for submission.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/publishing.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\npnpm zip:firefox\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Directory-based Entrypoint\nDESCRIPTION: Shows the folder structure for a directory-based entrypoint with an index file\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n📂 entrypoints/\n   📂 {name}/\n      📄 index.{ext}\n```\n\n----------------------------------------\n\nTITLE: Using Plural Forms with Custom Substitutions\nDESCRIPTION: Example showing how to provide custom substitution values when using plural forms, overriding the default count value.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ni18n.t('items', 0, ['Zero']); // \"No items\"\ni18n.t('items', 1, ['One']); // \"One item\"\ni18n.t('items', 2, ['Multiple']); // \"Multiple items\"\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Unlisted Script in TypeScript\nDESCRIPTION: Basic implementation of an unlisted script using defineUnlistedScript. This pattern shows the simplest way to define a script that executes when loaded.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineUnlistedScript(() => {\n  // Executed when script is loaded\n});\n```\n\n----------------------------------------\n\nTITLE: Bookmarks Page HTML Template\nDESCRIPTION: Example of a bookmarks page HTML entrypoint with manifest configuration options\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Title</title>\n    <!-- Set include/exclude if the page should be removed from some builds -->\n    <meta name=\"manifest.include\" content=\"['chrome', ...]\" />\n    <meta name=\"manifest.exclude\" content=\"['chrome', ...]\" />\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Permission in WXT\nDESCRIPTION: Demonstrates how to add the required 'storage' permission to the manifest when using WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/storage.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  manifest: {\n    permissions: ['storage'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Analytics Functions\nDESCRIPTION: Example of using various analytics tracking functions in the application\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analytics } from '#analytics';\n\nawait analytics.track('some-event');\nawait analytics.page();\nawait analytics.identify('some-user-id');\nanalytics.autoTrack(document.body);\n```\n\n----------------------------------------\n\nTITLE: Configuring Umami Provider\nDESCRIPTION: Implementation of Umami analytics provider configuration\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { umami } from '@wxt-dev/analytics/providers/umami';\n\nexport default defineAppConfig({\n  analytics: {\n    providers: [\n      umami({\n        apiUrl: 'https://<your-umami-instance>/api',\n        websiteId: import.meta.env.WXT_UMAMI_WEBSITE_ID,\n        domain: import.meta.env.WXT_UMAMI_DOMAIN,\n      }),\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing WXT Storage Module without WXT\nDESCRIPTION: This snippet demonstrates how to import the storage module when not using WXT, after installing the @wxt-dev/storage package.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/storage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { storage } from '@wxt-dev/storage';\n```\n\n----------------------------------------\n\nTITLE: Referencing Public Assets in HTML for WXT\nDESCRIPTION: Shows how to reference an image asset from the /public directory in an HTML file.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Using Teleport with Shadow DOM in Vue Component\nDESCRIPTION: Example Vue component that uses the teleport target provided by the parent application to render a dialog element. This ensures the teleported content stays within the Shadow DOM boundary.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/faq.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { Teleport } from 'vue';\n\nconst teleportTarget = inject('TeleportTarget');\n</script>\n\n<template>\n  <div>\n    <Teleport :to=\"teleportTarget\">\n      <dialog>My dialog</dialog>\n    </Teleport>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing WXT Storage Module in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the storage module when using WXT. The storage module is built-in to WXT, so no additional installation is required.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { storage } from 'wxt/storage';\n```\n\n----------------------------------------\n\nTITLE: Updating Manifest Transformation in WXT Config (TypeScript)\nDESCRIPTION: Demonstrates how to migrate from the deprecated 'transformManifest' option to using the 'build:manifestGenerated' hook for transforming the manifest in the WXT configuration file.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  transformManifest(manifest) { // [!code --]\n  hooks: { // [!code ++]\n    'build:manifestGenerated': (_, manifest) => { // [!code ++]\n       // ...\n    }, // [!code ++]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing WXT Submit Process with Dry Run\nDESCRIPTION: Command to test the extension submission process without actually submitting, using the --dry-run flag to validate configuration and credentials.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/publishing.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwxt submit --dry-run \\\n  --chrome-zip .output/{your-extension}-{version}-chrome.zip \\\n  --firefox-zip .output/{your-extension}-{version}-firefox.zip --firefox-sources-zip .output/{your-extension}-{version}-sources.zip \\\n  --edge-zip .output/{your-extension}-{version}-chrome.zip\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependencies for WXT\nDESCRIPTION: Commands to install React and the WXT React module using pnpm package manager.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/module-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i react react-dom\npnpm i -D @wxt-dev/module-react\n```\n\n----------------------------------------\n\nTITLE: Using Public Assets in CSS for WXT\nDESCRIPTION: Illustrates how to use an image asset from the /public directory as a background image in CSS.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.bg-image {\n  background-image: url(/image.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Portal with Shadow DOM in React Component\nDESCRIPTION: Example React component that uses the portal target context to create a portal for a dialog element. This ensures the portal content stays within the Shadow DOM boundary rather than being rendered to the document body.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/faq.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { createPortal } from 'react-dom';\nimport PortalTargetContext from '~/hooks/PortalTargetContext';\n\nconst MyComponent = () => {\n  const portalTarget = useContext(PortalTargetContext);\n\n  return <div>{createPortal(<dialog>My dialog</dialog>, portalTarget)}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Persistence for Chromium Browsers in WXT\nDESCRIPTION: These snippets show how to set up data persistence for Chromium-based browsers in WXT development. It includes separate configurations for Mac/Linux and Windows environments.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/browser-startup.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineWebExtConfig({\n  chromiumArgs: ['--user-data-dir=./.wxt/chrome-data'],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolve } from 'node:path';\n\nexport default defineWebExtConfig({\n  // On Windows, the path must be absolute\n  chromiumProfile: resolve('.wxt/chrome-data'),\n  keepProfileChanges: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Extension API Type Imports\nDESCRIPTION: Example of updating type imports to use the new Browser namespace from 'wxt/browser' instead of the old Runtime type.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Runtime } from 'wxt/browser'; // [!code --]\nimport type { Browser } from 'wxt/browser'; // [!code ++]\n\nfunction getMessageSenderUrl(sender: Runtime.MessageSender): string { // [!code --]\nfunction getMessageSenderUrl(sender: Browser.runtime.MessageSender): string { // [!code ++]\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Web Extension for Safari\nDESCRIPTION: Command to build a Safari-compatible extension using WXT and convert it to a Safari web extension using Xcode's command-line tool.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/publishing.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npnpm wxt build -b safari\nxcrun safari-web-extension-converter .output/safari-mv2\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte module dependencies for WXT\nDESCRIPTION: Commands to install Svelte and the WXT Svelte module using pnpm package manager.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/module-svelte/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i svelte\npnpm i -D @wxt-dev/module-svelte\n```\n\n----------------------------------------\n\nTITLE: Using Public Assets in JSX for WXT\nDESCRIPTION: Shows how to use an image asset from the /public directory in a JSX component.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<img src=\"/image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Sample JSON with Verbose and Regular Keys\nDESCRIPTION: Example of a JSON locale file that contains both verbose keys compatible with browser.i18n and regular nested keys.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appName\": {\n    \"message\": \"GitHub - Better Line Counts\",\n    \"description\": \"The app's name, should not be translated\"\n  },\n  \"ok\": \"OK\",\n  \"deleteConfirmation\": {\n    \"title\": \"Delete XYZ?\",\n    \"message\": \"You cannot undo this action once taken.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Config Usage Example\nDESCRIPTION: Demonstrates how to access runtime configuration in code.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/wxt-modules.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = useAppConfig();\nconsole.log(config.myModule);\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT to Use WebExtension Polyfill Module\nDESCRIPTION: TypeScript configuration to add the WXT polyfill module to the project config for those continuing to use the polyfill.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  modules: ['@wxt-dev/webextension-polyfill'],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing WXT Dependencies\nDESCRIPTION: Commands to install WXT as a development dependency using different package managers.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm i -D wxt\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun i -D wxt\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D wxt\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev wxt\n```\n\n----------------------------------------\n\nTITLE: Initializing WXT Project from Vanilla Template\nDESCRIPTION: Command to generate a new vanilla WXT project template in an existing project directory. This is recommended as the first step when migrating to WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/migrate.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/your/project\npnpm dlx wxt@latest init example-wxt --template vanilla\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Output Directory Template\nDESCRIPTION: TypeScript configuration to set a custom outDirTemplate option, reverting to the old behavior of writing all output to the same directory.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  outDirTemplate: '{{browser}}-mv{{manifestVersion}}', // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Error Message for Invalidated Extension Context\nDESCRIPTION: Common error message that appears when a content script continues to run after its extension has been disabled, uninstalled, or updated.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nError: Extension context invalidated.\n```\n\n----------------------------------------\n\nTITLE: Filtering Content Script for Firefox in TypeScript\nDESCRIPTION: Shows how to use the 'include' option to build a content script only when targeting Firefox. This allows for browser-specific entrypoint filtering.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/target-different-browsers.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineContentScript({\n  include: ['firefox'],\n\n  main(ctx) {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT to Use WebExtension Polyfill\nDESCRIPTION: TypeScript configuration to add the @wxt-dev/webextension-polyfill module to the WXT config file. This setup allows WXT to use the webextension-polyfill instead of default browser globals.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/webextension-polyfill/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// wxt.config.ts\nexport default defineConfig({\n  modules: ['@wxt-dev/webextension-polyfill'],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Template\nDESCRIPTION: Command to create a new template by copying the vanilla template to a new directory.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncp -r templates/vanilla templates/<new-template-name>\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated ExtensionApi Config\nDESCRIPTION: Example of removing the deprecated 'extensionApi' configuration from the WXT config file.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  extensionApi: 'chrome', // [!code --]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Runner Config Type Import (TypeScript)\nDESCRIPTION: Shows how to update the import statement for the runner configuration type, renaming 'ExtensionRunnerConfig' to 'WebExtConfig' for consistency with other API changes.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ExtensionRunnerConfig } from 'wxt'; // [!code --]\nimport type { WebExtConfig } from 'wxt'; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Escaping Dollar Signs in Translations\nDESCRIPTION: Example showing how to escape dollar signs in translations by using double dollar signs.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndollars: $$$1\n```\n\n----------------------------------------\n\nTITLE: Creating Analytics Instance\nDESCRIPTION: Example of creating a standalone analytics instance without WXT\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// utils/analytics.ts\nimport { createAnalytics } from '@wxt-dev/analytics';\n\nexport const analytics = createAnalytics({\n  providers: [\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: WXT Background Script Entrypoint\nDESCRIPTION: TypeScript code defining a background script entrypoint for the browser extension.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineBackground(() => {\n  console.log('Hello world!');\n});\n```\n\n----------------------------------------\n\nTITLE: Building the WXT Demo Extension\nDESCRIPTION: Commands to build the WXT package followed by building the demo extension for testing.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Build WXT package, then build demo extension\ncd packages/wxt-demo\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running WXT Prepare Command\nDESCRIPTION: Command to run 'wxt prepare' after addressing breaking changes, which should resolve type errors.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm wxt prepare\n```\n\n----------------------------------------\n\nTITLE: Removing Manual CSS Overrides for Shadow Root UI\nDESCRIPTION: Example of removing manual CSS overrides that are no longer necessary due to WXT's new style reset in shadow roots.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nbody { /* [!code --] */\n  /* Override Reddit's default \"hidden\" visibility on elements */ /* [!code --] */\n  visibility: visible !important; /* [!code --] */\n} /* [!code --] */\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadow Root UI to Inherit Styles\nDESCRIPTION: TypeScript configuration to disable the new style reset behavior in createShadowRootUi and continue using current CSS.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nconst ui = await createShadowRootUi({\n  inheritStyles: true, // [!code ++]\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WXT Module\nDESCRIPTION: Configuration setup for WXT analytics module in the project config file\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  modules: ['@wxt-dev/analytics/module'],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Runner Config Import in Web-Ext Config (TypeScript)\nDESCRIPTION: Demonstrates how to update the import statement in the web-ext.config.ts file to use the new 'defineWebExtConfig' function instead of the deprecated 'defineRunnerConfig'.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRunnerConfig } from 'wxt'; // [!code --]\nimport { defineWebExtConfig } from 'wxt'; // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack for PNPM Installation\nDESCRIPTION: Enables corepack to use pnpm for package management in the WXT project.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Creating Developer Experience Section with Video in HTML\nDESCRIPTION: This HTML snippet creates a section highlighting WXT's developer experience, including a video demonstration and descriptive text.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"margin: auto; width: 100%; max-width: 900px; text-align: center\">\n  <video src=\"https://github.com/wxt-dev/wxt/assets/10101283/4d678939-1bdb-495c-9c36-3aa281d84c94\" controls></video>\n  <br />\n  <small>\n    And who doesn't appreciate a beautiful CLI?\n  </small>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Modules Directory in WXT Config (TypeScript)\nDESCRIPTION: Shows how to configure WXT to look for modules in a custom directory instead of the default 'modules' folder, which is useful if you already have a directory named 'modules' in your project.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  modulesDir: 'wxt-modules', // defaults to \"modules\"\n});\n```\n\n----------------------------------------\n\nTITLE: Custom i18n Build Script\nDESCRIPTION: A Node.js script that processes custom locale files and generates standard messages.json files and TypeScript type definitions for a non-WXT project.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// build-i18n.js\nimport {\n  parseMessagesFile,\n  generateChromeMessagesFile,\n  generateTypeFile,\n} from '@wxt-dev/i18n/build';\n\n// Read your localization files\nconst messages = {\n  en: await parseMessagesFile('path/locales/en.yml'),\n  de: await parseMessagesFile('path/locales/de.yml'),\n  // ...\n};\n\n// Generate JSON files for the extension\nawait generateChromeMessagesFile('dist/_locales/en/messages.json', messages.en);\nawait generateChromeMessagesFile('dist/_locales/de/messages.json', messages.de);\n// ...\n\n// Generate a types file based on your default_locale\nawait generateTypeFile('wxt-i18n-structure.d.ts', messages.en);\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics Provider\nDESCRIPTION: Implementation of Google Analytics 4 provider configuration\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { googleAnalytics4 } from '@wxt-dev/analytics/providers/google-analytics-4';\n\nexport default defineAppConfig({\n  analytics: {\n    providers: [\n      googleAnalytics4({\n        apiSecret: import.meta.env.WXT_GA_API_SECRET,\n        measurementId: '...',\n      }),\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Entrypoint Loader in WXT Config (TypeScript)\nDESCRIPTION: Demonstrates how to configure WXT to use the deprecated 'jiti' entrypoint loader instead of the new default 'vite-node' loader.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  entrypointLoader: 'jiti', // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests\nDESCRIPTION: Command to run all unit and E2E tests for the WXT project.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Run unit and E2E tests\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Importing CLI Data with Vue Script Setup\nDESCRIPTION: This code snippet uses Vue's script setup syntax to import data for the WXT clean command from a data loader file.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-clean.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { data } from '../../.vitepress/loaders/cli.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing WebExtension Polyfill for WXT\nDESCRIPTION: Command to install webextension-polyfill and WXT's new polyfill module for those who want to continue using the polyfill.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm i webextension-polyfill @wxt-dev/webextension-polyfill\n```\n\n----------------------------------------\n\nTITLE: Runtime Code Placement in Unlisted Scripts\nDESCRIPTION: Example demonstrating proper placement of runtime code within the main function to ensure compatibility with NodeJS build environment.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/entrypoints.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.querySelectorAll('a').forEach((anchor) => { // [!code --]\n  // ... // [!code --]\n}); // [!code --]\n\nexport default defineUnlistedScript(() => {\n  document.querySelectorAll('a').forEach((anchor) => { // [!code ++]\n    // ... // [!code ++]\n  }); // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Umami Environment Configuration\nDESCRIPTION: Environment variable setup for Umami analytics\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dotenv\nCODE:\n```\nWXT_UMAMI_WEBSITE_ID='...'\nWXT_UMAMI_DOMAIN='...'\n```\n\n----------------------------------------\n\nTITLE: Adding wxt prepare to PostInstall Script\nDESCRIPTION: Configuration for package.json to add the wxt prepare command to the postinstall script, ensuring TypeScript and your editor recognize auto-imported variables after installing dependencies.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/auto-imports.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n    \"postinstall\": \"wxt prepare\", // [!code ++]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Runner Option to WebExt in WXT Config (TypeScript)\nDESCRIPTION: Shows how to update the WXT configuration file to use the new 'webExt' option name instead of the deprecated 'runner' option for consistency with the web-ext.config.ts filename.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  runner: { // [!code --]\n  webExt: { // [!code ++]\n    startUrls: [\"https://wxt.dev\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying WXT Clean Command Output in HTML\nDESCRIPTION: This HTML code snippet creates a div with a pre-formatted code block to display the output of the 'wxt clean' command using interpolated data.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-clean.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"language-sh vp-adaptive-theme active\"><pre class=\"shiki shiki-themes github-light github-dark vp-code\"><code>{{ data.clean }}</code></pre></div>\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Manifest Configuration\nDESCRIPTION: Demonstrates the incorrect and correct way to use environment variables in the manifest configuration. Shows how to use the function syntax for the manifest to ensure environment variables are available when the manifest is constructed.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/environment-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  extensionApi: 'chrome',\n  modules: ['@wxt-dev/module-vue'],\n  manifest: { // [!code --]\n    oauth2: { // [!code --]\n      client_id: import.meta.env.WXT_APP_CLIENT_ID // [!code --]\n    } // [!code --]\n  } // [!code --]\n  manifest: () => ({ // [!code ++]\n    oauth2: { // [!code ++]\n      client_id: import.meta.env.WXT_APP_CLIENT_ID // [!code ++]\n    } // [!code ++]\n  }), // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS with WXT Support\nDESCRIPTION: Commands for installing the UnoCSS WXT integration using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/unocss/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save-dev @wxt-dev/unocss unocss\npnpm i -D @wxt-dev/unocss unocss\nyarn add --dev @wxt-dev/unocss unocss\nbun i -D @wxt-dev/unocss unocss\n```\n\n----------------------------------------\n\nTITLE: Page Action Type Meta Tag\nDESCRIPTION: Shows how to specify page_action type in HTML meta tag.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/manifest.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"manifest.type\" content=\"page_action\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-imports in WXT\nDESCRIPTION: Configuration example for completely disabling auto-imports functionality in a WXT project by setting the imports property to false in defineConfig.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/auto-imports.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  imports: false, // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Public and Modules Directories\nDESCRIPTION: TypeScript configuration to specify custom locations for public and modules directories if keeping them in the src folder.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  srcDir: 'src',\n  publicDir: 'src/public', // [!code ++]\n  modulesDir: 'src/modules', // [!code ++]\n});\n```\n\n----------------------------------------\n\nTITLE: Executing WXT Submit Init Command in Shell\nDESCRIPTION: This snippet demonstrates how to use the 'wxt submit init' command in a shell environment. The command is an alias for the 'publish-browser-extension' package and is used to initialize the submission process for a browser extension.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-submit-init.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{{ data.submitInit }}\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Website Locally\nDESCRIPTION: Command to start a local development server for the WXT documentation website.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Start the docs website locally\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Installing WebExtension Polyfill Dependencies for WXT\nDESCRIPTION: Command to install the necessary dependencies for using webextension-polyfill with WXT using pnpm package manager.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/webextension-polyfill/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i @wxt-dev/webextension-polyfill webextension-polyfill\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Browser Opening in WXT\nDESCRIPTION: This snippet shows how to disable the automatic browser opening feature in WXT. It allows developers to manually load the extension into their browser if preferred.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/config/browser-startup.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineWebExtConfig({\n  disabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying WXT Project Structure with src Directory\nDESCRIPTION: Illustrates the project structure after enabling the src directory, showing how files and folders are reorganized.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n📂 {rootDir}/\n   📁 .output/\n   📁 .wxt/\n   📁 modules/\n   📁 public/\n   📂 src/\n      📁 assets/\n      📁 components/\n      📁 composables/\n      📁 entrypoints/\n      📁 hooks/\n      📁 utils/\n      📄 app.config.ts\n   📄 .env\n   📄 .env.publish\n   📄 package.json\n   📄 tsconfig.json\n   📄 web-ext.config.ts\n   📄 wxt.config.ts\n```\n\n----------------------------------------\n\nTITLE: Updating Zip Configuration in WXT Config (TypeScript)\nDESCRIPTION: Demonstrates how to update the zip configuration in WXT config file, renaming 'ignoredSources' to 'excludeSources' for consistency with other APIs.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  zip: {\n    ignoredSources: [\n      /*...*/\n    ], // [!code --]\n    excludeSources: [\n      /*...*/\n    ], // [!code ++]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Profiling WXT with Performance Tools\nDESCRIPTION: Commands for performance profiling the WXT build process using 0x for flamecharts and Chrome DevTools for inspection.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# Build the latest version\npnpm --filter wxt build\n\n# CD to the demo directory\ncd packages/wxt-demo\n\n# 1. Generate a flamechart with 0x\npnpm dlx 0x node_modules/wxt/bin/wxt.mjs build\n# 2. Inspect the process with chrome @ chrome://inspect\npnpm node --inspect node_modules/wxt/bin/wxt.mjs build\n```\n\n----------------------------------------\n\nTITLE: Updating Template WXT Dependency\nDESCRIPTION: A diff showing how to update a template's WXT dependency to point to the local development version for testing.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  \"devDependencies\": {\n    \"typescript\": \"^5.3.2\",\n    \"vite-plugin-solid\": \"^2.7.0\",\n-   \"wxt\": \"^0.8.0\"\n+   \"wxt\": \"../..\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Complete Localization Messages Example\nDESCRIPTION: Extended example of messages.json showing translations for extension name, description, and other content.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/i18n.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extName\": {\n    \"message\": \"...\"\n  },\n  \"extDescription\": {\n    \"message\": \"...\"\n  },\n  \"helloWorld\": {\n    \"message\": \"Hello world!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading @wxt-dev/browser to Latest Version\nDESCRIPTION: Shell command to upgrade the @wxt-dev/browser package to the latest version, which updates both manually installed versions and the subdependency within WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/browser/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm upgrade @wxt-dev/browser\n```\n\n----------------------------------------\n\nTITLE: Using Public Assets in Vue Components for WXT\nDESCRIPTION: Demonstrates how to use an image asset from the /public directory in a Vue component template.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/assets.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <img src=\"/image.png\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Content Script CSS Configuration in Traditional Web Extensions\nDESCRIPTION: Traditional way of specifying CSS files for content scripts in a web extension's manifest.json file.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content_scripts\": [\n    {\n      \"css\": [\"content/style.css\"],\n      \"js\": [\"content/index.js\"],\n      \"matches\": [\"*://*/*\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Installs all dependencies for the WXT project using pnpm package manager.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Working with Template Projects\nDESCRIPTION: Commands for managing template projects within the WXT repository, showing how to install dependencies and run development commands.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncd templates/vue\nnpm i\nnpm run dev\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding WebWorker Types to TSConfig in WXT\nDESCRIPTION: This snippet shows how to add WebWorker types to the project's TSConfig file in WXT. It extends the base configuration and adds the WebWorker library to the compiler options.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./.wxt/tsconfig.json\",\n  \"compilerOptions\": {\n    \"lib\": [\"ESNext\", \"DOM\", \"WebWorker\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @wxt-dev/browser Package\nDESCRIPTION: Shell command to install the @wxt-dev/browser package from NPM using pnpm. This is only necessary if not using WXT directly, as WXT already includes this package.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/browser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @wxt-dev/browser\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Module Dependencies\nDESCRIPTION: Commands to install Vue.js and the WXT Vue module using pnpm package manager.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/module-vue/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i vue\npnpm i -D @wxt-dev/module-vue\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for wxt.dev website\nDESCRIPTION: This robots.txt file sets rules for web crawlers, disallowing access to specific pages and specifying the sitemap location. It prevents crawling of the API and configuration documentation pages while allowing access to other content.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /api.html\nDisallow: /config.html\n\nSitemap: https://wxt.dev/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Starting the Demo Extension in Dev Mode\nDESCRIPTION: Commands to build the WXT package and then start the demo extension in development mode for real-time testing.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Build WXT package, then start the demo extension in dev mode\ncd packages/wxt-demo\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Executing WXT Submit Command in Shell\nDESCRIPTION: This snippet demonstrates how to use the 'wxt submit' command in a shell environment. The command is an alias for 'publish-browser-extension' and is used to publish browser extensions.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-submit.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n{{ data.submit }}\n```\n\n----------------------------------------\n\nTITLE: Installing WXT Analytics Package\nDESCRIPTION: Command to install the WXT analytics package using pnpm package manager\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @wxt-dev/analytics\n```\n\n----------------------------------------\n\nTITLE: Installing WXT Storage Module via Package Managers\nDESCRIPTION: This snippet shows how to install the @wxt-dev/storage package using various package managers (npm, pnpm, yarn, bun) when not using WXT.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @wxt-dev/storage\npnpm add @wxt-dev/storage\nyarn add @wxt-dev/storage\nbun add @wxt-dev/storage\n```\n\n----------------------------------------\n\nTITLE: Creating an Edge-specific ZIP File\nDESCRIPTION: Command to create a ZIP file specifically for Edge Addons when custom Edge features are implemented.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/publishing.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nwxt zip -b edge\n```\n\n----------------------------------------\n\nTITLE: Loading CLI Data for WXT Init Command in Vue.js\nDESCRIPTION: This snippet sets up a Vue.js script to import CLI data, likely containing information about the 'wxt init' command. The data is imported from a specific path and will be used to display command details.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-init.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { data } from '../../.vitepress/loaders/cli.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Unreleased Versions\nDESCRIPTION: Examples of how to install unreleased versions of WXT packages from pull requests, branches, or commits using pkg.pr.new.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm i https://pkg.pr.new/[package-name]@[ref]\n\n# Install the latest build of `wxt` from a PR:\nnpm i https://pkg.pr.new/wxt@1283\n\n# Install the latest build of `@wxt-dev/module-react` on the `main` branch\nnpm i https://pkg.pr.new/@wxt-dev/module-react@main\n\n# Install `@wxt-dev/storage` from a specific commit:\nnpm i https://pkg.pr.new/@wxt-dev/module-react@426f907\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup for WXT CLI Documentation\nDESCRIPTION: Imports CLI data from a VitePress loader to display command information.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-zip.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { data } from '../../.vitepress/loaders/cli.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using wxt build Command in Shell\nDESCRIPTION: This snippet shows the help output for the 'wxt build' command, displaying its options and flags.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-build.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{{ data.build }}\n```\n\n----------------------------------------\n\nTITLE: Plural Forms with Custom Substitutions\nDESCRIPTION: Example of defining plural forms that accept custom substitutions instead of using the count value.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n  0: No items\n  1: $1 item\n  n: $1 items\n```\n\n----------------------------------------\n\nTITLE: Updating Project Directory Structure\nDESCRIPTION: HTML-like representation of the updated project directory structure, showing the movement of 'modules/' and 'public/' directories to the root.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n📂 {rootDir}/\n   📁 modules/ <!-- [!code ++] -->\n   📁 public/ <!-- [!code ++] -->\n   📂 src/\n      📁 components/\n      📁 entrypoints/\n      📁 modules/ <!-- [!code --] -->\n      📁 public/ <!-- [!code --] -->\n      📁 utils/\n      📄 app.config.ts\n   📄 wxt.config.ts\n```\n\n----------------------------------------\n\nTITLE: Displaying WXT Init Command Output in HTML\nDESCRIPTION: This HTML snippet creates a pre-formatted code block to display the output of the 'wxt init' command. It uses Vue.js template syntax to render the command data dynamically.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-init.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"language-sh vp-adaptive-theme active\"><pre class=\"shiki shiki-themes github-light github-dark vp-code\"><code>{{ data.init }}</code></pre></div>\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific Files\nDESCRIPTION: Example command to run tests for a specific file or feature in the WXT project.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npnpm test manifest-contents\n```\n\n----------------------------------------\n\nTITLE: Displaying WXT Prepare Command Usage\nDESCRIPTION: This HTML snippet creates a pre-formatted code block to display the usage of the 'wxt prepare' command. It uses Vue.js template syntax to dynamically insert the command data.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-prepare.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"language-sh vp-adaptive-theme active\"><pre class=\"shiki shiki-themes github-light github-dark vp-code\"><code>{{ data.prepare }}</code></pre></div>\n```\n\n----------------------------------------\n\nTITLE: Updating WXT for Minor or Patch Versions\nDESCRIPTION: Simple command to update WXT to the latest version for minor or patch updates using pnpm.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm i wxt@latest\n```\n\n----------------------------------------\n\nTITLE: Installing @wxt-dev/i18n Package with Package Manager\nDESCRIPTION: Command to install the @wxt-dev/i18n package using pnpm. This is the first step in setting up internationalization for your web extension.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i @wxt-dev/i18n\n```\n\n----------------------------------------\n\nTITLE: VS Code I18n Ally Custom Framework Configuration\nDESCRIPTION: Configuration file to integrate with the VS Code I18n Ally extension, enabling features like go-to-definition and inline previews.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n# An array of strings which contain Language Ids defined by VS Code\n# You can check available language ids here: https://code.visualstudio.com/docs/languages/identifiers\nlanguageIds:\n  - typescript\n  - typescriptreact\n\n# Look for t(\"...\")\nusageMatchRegex:\n  - \"[^\\\\w\\\\d]t\\\\(['\\\"`]({key})['\\\"`]\"\n\n# Disable other built-in i18n ally frameworks\nmonopoly: true\n```\n\n----------------------------------------\n\nTITLE: Running the Custom i18n Build Script\nDESCRIPTION: Command to execute the custom i18n build script that processes localization files.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nnode generate-i18n.js\n```\n\n----------------------------------------\n\nTITLE: Building the WXT Package\nDESCRIPTION: Commands to build the core WXT package from the source code.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Build WXT package\ncd packages/wxt\npnpm build\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings for I18n Ally\nDESCRIPTION: VS Code settings.json configuration to set up the I18n Ally extension with the correct locales path and key style.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"i18n-ally.localesPaths\": [\"src/locales\"],\n  \"i18n-ally.keystyle\": \"nested\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Examples Page with HTML and Vue.js\nDESCRIPTION: Creates the structure for the examples page using HTML and a Vue.js component. It includes a title and an ExampleSearch component.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/examples.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"examples-container\">\n  <div class=\"vp-doc\">\n    <h1>Examples</h1>\n  </div>\n\n  <br />\n\n  <ExampleSearch />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running WXT Development Mode\nDESCRIPTION: Commands to start WXT in development mode using different package managers.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Using Escaped Dollar Signs with Substitutions\nDESCRIPTION: Example of using a translation with escaped dollar signs and providing a substitution value.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ni18n.t('dollars', ['1.00']); // \"$1.00\"\n```\n\n----------------------------------------\n\nTITLE: Including WXT Analytics Documentation via HTML Include Directive\nDESCRIPTION: This HTML comment directive instructs the documentation build system to include the content of the analytics package README.md file at this location. It's commonly used in documentation frameworks to maintain DRY (Don't Repeat Yourself) principles across documentation.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/analytics.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--@include: ../packages/analytics/README.md-->\n```\n\n----------------------------------------\n\nTITLE: Google Analytics Environment Configuration\nDESCRIPTION: Environment variable setup for Google Analytics credentials\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\nWXT_GA_API_SECRET='...'\n```\n\n----------------------------------------\n\nTITLE: Installing SolidJS and @wxt-dev/module-solid\nDESCRIPTION: Command-line instructions for installing the necessary dependencies using pnpm. This includes the SolidJS library and the @wxt-dev/module-solid development dependency.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/module-solid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i solid-js\npnpm i -D @wxt-dev/module-solid\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dependencies with Taze\nDESCRIPTION: Command to upgrade all dependencies in the monorepo using the taze tool.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npnpm dlx taze -r\n```\n\n----------------------------------------\n\nTITLE: Sample English Locale YAML File\nDESCRIPTION: Example of a simple localization YAML file for English. This file contains message keys and their translations.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# <srcDir>/locales/en.yml\nhelloWorld: Hello world!\n```\n\n----------------------------------------\n\nTITLE: Defining Special Case for Zero Items in Plural Forms\nDESCRIPTION: Example of defining a special translation for zero items in addition to singular and plural forms.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/README.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n  0: No items\n  1: 1 item\n  n: $1 items\n```\n\n----------------------------------------\n\nTITLE: Initializing VitePress Blog Home Component\nDESCRIPTION: Sets up a VitePress page by importing and rendering a BlogHome component using Vue 3 composition API with TypeScript. The component is imported from a relative path in the .vitepress/components directory.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/blog.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport BlogHome from './.vitepress/components/BlogHome.vue';\n</script>\n\n<BlogHome />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Analytics Provider\nDESCRIPTION: Example of configuring an analytics provider in the app configuration file\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/analytics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// <srcDir>/app.config.ts\nimport { umami } from '@wxt-dev/analytics/providers/umami';\n\nexport default defineAppConfig({\n  analytics: {\n    debug: true,\n    providers: [\n      // ...\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading CLI Data with Vue.js Script Setup\nDESCRIPTION: A Vue.js script that imports data from a CLI data loader file, which will be used to display the command-line interface documentation.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { data } from '../../.vitepress/loaders/cli.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Complete changelog for WXT Solid module tracking version changes, bug fixes, enhancements and contributions\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/module-solid/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## v1.1.3\n\n[compare changes](https://github.com/wxt-dev/wxt/compare/module-solid-v1.1.2...module-solid-v1.1.3)\n\n### 🩹 Fixes\n\n- Use `config:resolved` hook to update config instead of `ready` ([#1178](https://github.com/wxt-dev/wxt/pull/1178))\n\n### 🏡 Chore\n\n- Add  `oxlint` for linting ([#947](https://github.com/wxt-dev/wxt/pull/947))\n- Upgrade all non-major dependencies ([#1040](https://github.com/wxt-dev/wxt/pull/1040))\n- **deps:** Upgrade all non-major dependencies ([#1164](https://github.com/wxt-dev/wxt/pull/1164))\n\n### ❤️ Contributors\n\n- Aaron ([@aklinker1](http://github.com/aklinker1))\n\n## v1.1.2\n\n[compare changes](https://github.com/wxt-dev/wxt/compare/module-solid-v1.1.1...module-solid-v1.1.2)\n\n### 🏡 Chore\n\n- **deps:** Bump all non-major dependencies ([#834](https://github.com/wxt-dev/wxt/pull/834))\n- **deps:** Upgrade all dependencies ([#869](https://github.com/wxt-dev/wxt/pull/869))\n- Add more metadata for npm ([#885](https://github.com/wxt-dev/wxt/pull/885))\n\n### ❤️ Contributors\n\n- Florian Metz ([@Timeraa](http://github.com/Timeraa))\n\n## v1.1.1\n\n[compare changes](https://github.com/wxt-dev/wxt/compare/module-solid-v1.1.0...module-solid-v1.1.1)\n\n### 🩹 Fixes\n\n- Use `prepare` instead of `postinstall` for local dev setup ([#788](https://github.com/wxt-dev/wxt/pull/788))\n\n## v1.1.0\n\n[compare changes](https://github.com/wxt-dev/wxt/compare/module-solid-v1.0.1...module-solid-v1.1.0)\n\n### 🚀 Enhancements\n\n- Enable auto-imports for JSX/TSX files ([#773](https://github.com/wxt-dev/wxt/pull/773))\n\n### 🩹 Fixes\n\n- Upgrade wxt peer to >= 0.18.6 ([7edf1c8](https://github.com/wxt-dev/wxt/commit/7edf1c8))\n\n### 🏡 Chore\n\n- Extract build cache script to NPM package ([#737](https://github.com/wxt-dev/wxt/pull/737))\n- **deps:** Upgrade non-major deps ([#778](https://github.com/wxt-dev/wxt/pull/778))\n\n## v1.0.1\n\n[compare changes](https://github.com/wxt-dev/wxt/compare/module-solid-v1.0.0...module-solid-v1.0.1)\n\n### 🩹 Fixes\n\n- Add `target: esnext` by default ([#733](https://github.com/wxt-dev/wxt/pull/733))\n\n### 🏡 Chore\n\n- Add changelog ([21e8ca0](https://github.com/wxt-dev/wxt/commit/21e8ca0))\n\n## v1.0.0\n\nInitial release 🎉\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page for WXT Documentation\nDESCRIPTION: This snippet defines the layout and content for the WXT documentation home page using VitePress. It includes hero section configuration, feature list, and frontmatter for the page structure.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\ntitle: Next-gen Web Extension Framework\n\nhero:\n  name: WXT\n  text: Next-gen Web Extension Framework\n  tagline: An open source tool that makes web extension development faster than ever before.\n  image:\n    src: /hero-logo.svg\n    alt: WXT\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /guide/installation\n    - theme: alt\n      text: Learn More\n      link: /guide/introduction\n\nfeatures:\n  - icon: 🌐\n    title: Supported Browsers\n    details: WXT will build extensions for Chrome, Firefox, Edge, Safari, and any Chromium based browser.\n    link: /guide/essentials/target-different-browsers\n    linkText: Read docs\n  - icon: ✅\n    title: MV2 and MV3\n    details: Build Manifest V2 or V3 extensions for any browser using the same codebase.\n    link: /guide/essentials/config/manifest\n    linkText: Read docs\n  - icon: ⚡\n    title: Fast Dev Mode\n    details: Lightning fast HMR for UI development and fast reloads for content/background scripts enables faster iterations.\n  - icon: 📂\n    title: File Based Entrypoints\n    details: Manifest is generated based on files in the project with inline configuration.\n    link: /guide/essentials/project-structure\n    linkText: See project structure\n  - icon: 🚔\n    title: TypeScript\n    details: Create large projects with confidence using TS by default.\n  - icon: 🦾\n    title: Auto-imports\n    details: Nuxt-like auto-imports to speed up development.\n    link: /guide/essentials/config/auto-imports\n    linkText: Read docs\n  - icon: 🤖\n    title: Automated Publishing\n    details: Automatically zip, upload, submit, and publish extensions.\n  - icon: 🎨\n    title: Frontend Framework Agnostic\n    details: Works with any front-end framework with a Vite plugin.\n    link: /guide/essentials/frontend-frameworks\n    linkText: Add a framework\n  - icon: 📦\n    title: Module System\n    details: Reuse build-time and runtime-code across multiple extensions.\n    link: /guide/essentials/wxt-modules\n    linkText: Read docs\n  - icon: 🖍️\n    title: Bootstrap a New Project\n    details: Get started quickly with several awesome project templates.\n    link: /guide/installation#bootstrap-project\n    linkText: See templates\n  - icon: 📏\n    title: Bundle Analysis\n    details: Tools for analyzing the final extension bundle and minimizing your extension's size.\n  - icon: ⬇️\n    title: Bundle Remote Code\n    details: Downloads and bundles remote code imported from URLs.\n    link: /guide/essentials/remote-code\n    linkText: Read docs\n---\n```\n\n----------------------------------------\n\nTITLE: Importing CLI Data in Vue.js Script Setup\nDESCRIPTION: This snippet sets up a Vue.js component by importing data from a CLI data loader file. It's used to provide dynamic content for the command documentation.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt-prepare.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { data } from '../../.vitepress/loaders/cli.data.ts'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Manually Generating Browser API Types\nDESCRIPTION: Shell command to manually generate the browser API types. This is typically not needed as a GitHub action automatically updates the package daily.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/browser/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm gen\n```\n\n----------------------------------------\n\nTITLE: Rendering CLI Output in Shell Code Block\nDESCRIPTION: HTML markup that renders a shell code block with syntax highlighting, displaying the WXT command-line interface help text loaded from the data variable.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/api/cli/wxt.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"language-sh vp-adaptive-theme active\"><pre class=\"shiki shiki-themes github-light github-dark vp-code\"><code>{{ data.wxt }}</code></pre></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Latest WXT Version with Ignored Scripts\nDESCRIPTION: Command to install the latest version of WXT using pnpm, while ignoring scripts to prevent running 'wxt prepare' prematurely.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/resources/upgrading.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i wxt@latest --ignore-scripts\n```\n\n----------------------------------------\n\nTITLE: Styling Examples Container in CSS\nDESCRIPTION: Defines custom CSS styles for the examples container, setting padding to 32 pixels.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/examples.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.examples-container {\n  padding: 32px;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating i18n Translation Usage in JavaScript\nDESCRIPTION: This snippet demonstrates the change in usage of the i18n.t() function, removing the options argument and manually escaping the '<' symbol.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/packages/i18n/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n- i18n.t(\"someKey\", [\"sub1\"], { escapeLt: true });\n+ i18n.t(\"someKey\", [\"sub1\"]).replaceAll(\"<\", \"&lt;\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsors Section in HTML for WXT Documentation\nDESCRIPTION: This HTML snippet creates a section to display WXT sponsors, including a link to the sponsorship page and an image of current sponsors.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://github.com/sponsors/wxt-dev\"><img alt=\"WXT Sponsors\" src=\"https://raw.githubusercontent.com/wxt-dev/static/refs/heads/main/sponsorkit/sponsors-wide.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Page for IFrame UI\nDESCRIPTION: Defines the structure of an HTML page that will be loaded into an IFrame for content script UI. This page serves as the container for the IFrame-based UI.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/guide/essentials/content-scripts.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Your Content Script IFrame</title>\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Client-Side Only Component for WXT Users in Vue\nDESCRIPTION: This Vue component snippet adds a client-side only section to display users of WXT, likely to be populated dynamically.\nSOURCE: https://github.com/wxt-dev/wxt/blob/main/docs/index.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ClientOnly>\n  <UsingWxtSection />\n</ClientOnly>\n```"
  }
]