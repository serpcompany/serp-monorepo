[
  {
    "owner": "lynx-family",
    "repo": "lynx",
    "content": "TITLE: Writing C++ Unit Test Using Google Test for Lynx\nDESCRIPTION: This snippet demonstrates how to write a basic C++ unit test using the Google Test framework for the Lynx project. It includes the necessary header files and a simple test case.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/README_UT.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"third_party/googletest/googletest/include/gtest/gtest.h\"\n// optional: If the capabilities of gmock need to be used.\n#include \"third_party/googletest/googlemock/include/gmock/gmock.h\" \n\nTEST(HelloTest, HelloWorld) {\n  EXPECT_EQ(1, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Case Implementation\nDESCRIPTION: Example Python test script using Lynx-E2E framework to test button click functionality and verify text increment\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom lynx_e2e.api.lynx_view import LynxView\n\nconfig = {\n    \"type\": \"custom\",\n    \"path\": \"automation/event\"\n}\ndef run(test):\n    lynxview = self.app.get_lynxview('lynxview', LynxView)\n\n    count = lynxview.get_by_test_tag(\"count\")\n    button = lynxview.get_by_test_tag(\"button\")\n    button.click()\n    test.wait_for_equal('setData failed', count_view, 'text', '1')\n```\n\n----------------------------------------\n\nTITLE: Commit Message Format for Lynx Project\nDESCRIPTION: The required format for commit messages in the Lynx project, including labels, title, summary, and optional fields for issue references, documentation links, and test cases.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Label] Title of the commit message (one line)\n\nSummary of change:\nLonger description of change addressing as appropriate: why the change\nis made, context if it is part of many changes, description of previous\nbehavior and newly introduced differences, etc.\n\nLong lines should be wrapped to 72 columns for easier log message\nviewing in terminals.\n\nissue: #xxx\ndoc: https://xxxxxxxx\nTEST: Test cases\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering Basic Mako Template in Python\nDESCRIPTION: Demonstrates how to create a simple Mako template and render it using the Template class. The template is compiled into a Python module and the render() method is called to produce output.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\n\nmytemplate = Template(\"hello world!\")\nprint(mytemplate.render())\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator with Variables using PLY in Python\nDESCRIPTION: A complete example demonstrating PLY usage by implementing a calculator that supports variables and basic arithmetic operations. Includes lexer token definitions, grammar rules, and parsing logic.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/ply/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# -----------------------------------------------------------------------------\n# calc.py\n#\n# A simple calculator with variables.\n# -----------------------------------------------------------------------------\n\ntokens = (\n    'NAME','NUMBER',\n    'PLUS','MINUS','TIMES','DIVIDE','EQUALS',\n    'LPAREN','RPAREN',\n    )\n\n# Tokens\n\nt_PLUS    = r'\\+'\nt_MINUS   = r'-'\nt_TIMES   = r'\\*'\nt_DIVIDE  = r'/'\nt_EQUALS  = r'='\nt_LPAREN  = r'\\('\nt_RPAREN  = r'\\)'\nt_NAME    = r'[a-zA-Z_][a-zA-Z0-9_]*'\n\ndef t_NUMBER(t):\n    r'\\d+'\n    t.value = int(t.value)\n    return t\n\n# Ignored characters\nt_ignore = \" \\t\"\n\ndef t_newline(t):\n    r'\\n+'\n    t.lexer.lineno += t.value.count(\"\\n\")\n\ndef t_error(t):\n    print(\"Illegal character '%s'\" % t.value[0])\n    t.lexer.skip(1)\n\n# Build the lexer\nimport ply.lex as lex\nlex.lex()\n\n# Precedence rules for the arithmetic operators\nprecedence = (\n    ('left','PLUS','MINUS'),\n    ('left','TIMES','DIVIDE'),\n    ('right','UMINUS'),\n    )\n\n# dictionary of names (for storing variables)\nnames = { }\n\ndef p_statement_assign(p):\n    'statement : NAME EQUALS expression'\n    names[p[1]] = p[3]\n\ndef p_statement_expr(p):\n    'statement : expression'\n    print(p[1])\n\ndef p_expression_binop(p):\n    '''expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression'''\n    if p[2] == '+'  : p[0] = p[1] + p[3]\n    elif p[2] == '-': p[0] = p[1] - p[3]\n    elif p[2] == '*': p[0] = p[1] * p[3]\n    elif p[2] == '/': p[0] = p[1] / p[3]\n\ndef p_expression_uminus(p):\n    'expression : MINUS expression %prec UMINUS'\n    p[0] = -p[2]\n\ndef p_expression_group(p):\n    'expression : LPAREN expression RPAREN'\n    p[0] = p[2]\n\ndef p_expression_number(p):\n    'expression : NUMBER'\n    p[0] = p[1]\n\ndef p_expression_name(p):\n    'expression : NAME'\n    try:\n        p[0] = names[p[1]]\n    except LookupError:\n        print(\"Undefined name '%s'\" % p[1])\n        p[0] = 0\n\ndef p_error(p):\n    print(\"Syntax error at '%s'\" % p.value)\n\nimport ply.yacc as yacc\nyacc.yacc()\n\nwhile True:\n    try:\n        s = raw_input('calc > ')   # use input() on Python 3\n    except EOFError:\n        break\n    yacc.parse(s)\n```\n\n----------------------------------------\n\nTITLE: Declaring Metadata for Error Codes in YAML\nDESCRIPTION: Example showing how to declare metadata for error codes in error_code.yaml. Metadata defines attributes like consumer types with support for enum values and multi-selection options.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/error_code/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmeta-datas:\n    - name: Consumer\n      type: enum\n      keyword: consumers\n      multi-selection: true\n      values:\n        - front-end\n        - client\n        - lynx\n      default:\n        - front-end\n        - client\n        - lynx\n```\n\n----------------------------------------\n\nTITLE: Simple DOM Parsing and Modification in C++\nDESCRIPTION: Demonstrates basic JSON parsing into a DOM, modifying a value, and stringifying back to JSON using RapidJSON. Shows document parsing, value modification, and writer usage.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/rapidjson/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"rapidjson/document.h\"\n#include \"rapidjson/writer.h\"\n#include \"rapidjson/stringbuffer.h\"\n#include <iostream>\n\nusing namespace rapidjson;\n\nint main() {\n    // 1. Parse a JSON string into DOM.\n    const char* json = \"{\\\"project\\\":\\\"rapidjson\\\",\\\"stars\\\":10}\";\n    Document d;\n    d.Parse(json);\n\n    // 2. Modify it by DOM.\n    Value& s = d[\"stars\"];\n    s.SetInt(s.GetInt() + 1);\n\n    // 3. Stringify the DOM\n    StringBuffer buffer;\n    Writer<StringBuffer> writer(buffer);\n    d.Accept(writer);\n\n    // Output {\"project\":\"rapidjson\",\"stars\":11}\n    std::cout << buffer.GetString() << std::endl;\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lynx Base Dependencies in GN Build Configuration\nDESCRIPTION: Example showing how to add Lynx base library dependencies to a project using GN build system. Demonstrates including both core base functionality and logging components separately.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/base/README.md#2025-04-23_snippet_0\n\nLANGUAGE: GN\nCODE:\n```\n# Add the base dependency.\nsource_set(\"lynx_project\") {\n    deps = [\n        \"//lynx/base/src:base\", // \"//lynx/base/src:base\" hasn't include trace and log functions\n    ]\n    deps += [\n        \"//lynx/base/src:base_log\", // log functions\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Expression Substitution in Mako\nDESCRIPTION: Demonstrates the simplest form of expression substitution using the ${} construct in Mako templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_0\n\nLANGUAGE: mako\nCODE:\n```\nthis is x: ${x}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @lynx-js/types\nDESCRIPTION: Example of importing and using a type from the @lynx-js/types package.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/js_libraries/types/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListProps } from '@lynx-js/types';\nlet prop: ListProps;\n```\n\n----------------------------------------\n\nTITLE: Background Thread Access Proxy Implementation in C++\nDESCRIPTION: Implementation of proxy classes for accessing the native layer from background threads safely.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/core/shell/README.md#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nclass LynxEngineProxy {\n public:\n  virtual void CallFunction() = 0;\n};\n\nclass LynxEngineProxyImpl : public LynxEngineProxy {\n public:\n  void CallFunction() override {\n    engine_actor_->Act(\n        [](auto& engine) {\n          engine->CallFunction();\n        });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using TemplateLookup for Mako Template Resolution in Python\nDESCRIPTION: Shows how to use TemplateLookup to manage multiple templates and resolve includes. TemplateLookup is initialized with a list of directories to search for templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\nfrom mako.lookup import TemplateLookup\n\nmylookup = TemplateLookup(directories=['/docs'])\nmytemplate = Template(\"<%include file=\\\"header.txt\\\"/> hello world!\", lookup=mylookup)\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Serving with Mako TemplateLookup in Python\nDESCRIPTION: Demonstrates a typical setup for serving templates in an application using TemplateLookup. The get_template() method is used to retrieve and render templates by name.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\nfrom mako.lookup import TemplateLookup\n\nmylookup = TemplateLookup(directories=['/docs'], module_directory='/tmp/mako_modules')\n\ndef serve_template(templatename, **kwargs):\n    mytemplate = mylookup.get_template(templatename)\n    print(mytemplate.render(**kwargs))\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of Lynx Element API in TypeScript\nDESCRIPTION: Demonstrates how to use the Element API after installing the type package, showing the creation of a view with a process ID.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/js_libraries/type-element-api/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet pid = 10;\nlet viewRef = __CreateView(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Inheritance in Mako\nDESCRIPTION: Demonstrates basic template inheritance structure with blocks. Shows how to define a base template with header and body blocks that can be overridden by child templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_15\n\nLANGUAGE: mako\nCODE:\n```\n<html>\n    <body>\n    <%block name=\"header\">\n        <h2><%block name=\"title\"/></h2>\n    </%block>\n    ${self.body()}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running Test Suites\nDESCRIPTION: Commands to run test suites for both Android and iOS platforms using Python manage.py script\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# run on android\npython3 manage.py runtest android_test.core\n# run on ios\npython3 manage.py runtest ios_test.core\n```\n\n----------------------------------------\n\nTITLE: Error Code Generator Class Diagram\nDESCRIPTION: Mermaid class diagram showing the inheritance structure of base classes for error code generation scripts. The diagram illustrates how different generator types relate to each other for creating language-specific implementations.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/error_code/README.md#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class BaseGenerator{\n    }\n    class ModuleGenerator{\n    }\n    class GeneratorGroup{\n    }\n    class FileGenerator{\n    }\n    class PlatformGenerator{\n    }\n    class BehaviorGenerator{\n    }\n    class MetaDataEnumGenerator{\n    }\n    class SubErrorGenerator{\n    }\n\n    BaseGenerator <|-- ModuleGenerator\n    BaseGenerator <|-- GeneratorGroup\n    GeneratorGroup <|-- FileGenerator\n    GeneratorGroup <|-- PlatformGenerator\n    ModuleGenerator <|-- BehaviorGenerator\n    ModuleGenerator <|-- MetaDataEnumGenerator\n    BehaviorGenerator <|-- SubErrorGenerator\n```\n\n----------------------------------------\n\nTITLE: Template Inheritance with inherit Directive\nDESCRIPTION: Demonstrates how to establish template inheritance chains using the inherit directive.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_17\n\nLANGUAGE: mako\nCODE:\n```\n<%inherit file=\"base.html\"/>\n```\n\n----------------------------------------\n\nTITLE: Checking Available Plugins in Command Line\nDESCRIPTION: Shows how to display the help message after configuring plugins to discover newly added functionality. This allows you to see the updated list of available commands.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/README.md#2025-04-23_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\nrtf -h\n```\n\n----------------------------------------\n\nTITLE: Defining Lynx-specific CSS Properties\nDESCRIPTION: Example of using the Lynx-specific vendor prefix -x- for custom CSS properties, demonstrating linear layout implementation.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/css_generator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.linear {\n    /* similar to when Grid layout was -ms-grid, -webkit-grid: */\n    display: -x-linear;\n    display: linear; /* should also work */\n    -x-linear-orientation: horizontal;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Static Code Analysis for Lynx Project\nDESCRIPTION: Commands for running static code analysis tasks before submitting a pull request to the Lynx project.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource tools/envsetup.sh\ntools/hab sync . -f\ngit lynx check\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Layouts with Mako Callable Blocks\nDESCRIPTION: Demonstrates how to define a custom layout using Mako's <%def> tag and caller syntax. This pattern allows for structured page layouts with header, sidebar, and content sections that can be defined by the caller.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_15\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"layout()\">\n    ## a layout def\n    <div class=\"mainlayout\">\n        <div class=\"header\">\n            ${caller.header()}\n        </div>\n\n        <div class=\"sidebar\">\n            ${caller.sidebar()}\n        </div>\n\n        <div class=\"content\">\n            ${caller.body()}\n        </div>\n    </div>\n</%def>\n\n## calls the layout def\n<%self:layout>\n    <%def name=\"header()\">\n        I am the header\n    </%def>\n    <%def name=\"sidebar()\">\n        <ul>\n            <li>sidebar 1</li>\n            <li>sidebar 2</li>\n        </ul>\n    </%def>\n\n        this is the body\n</%self:layout>\n```\n\n----------------------------------------\n\nTITLE: Invoking a Def in Mako Templates\nDESCRIPTION: Demonstrates how to call a previously defined <%def> as an expression using the ${} syntax.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_1\n\nLANGUAGE: mako\nCODE:\n```\nthe def:  ${hello()}\n```\n\n----------------------------------------\n\nTITLE: Running Lynx Android Unit Tests for Code Coverage\nDESCRIPTION: Commands to run Android unit tests to generate code coverage data using JaCoCo. The tests are executed using the rtf tool which integrates with the JaCoCo plugin to collect coverage information.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/core/coverage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd repo_root_dir\ntools/rtf/rtf android-ut run --name lynx\n```\n\n----------------------------------------\n\nTITLE: Running C++ Unit Tests with RTF for Lynx\nDESCRIPTION: This Bash command demonstrates how to use the RTF tool to build and run C++ unit tests for the Lynx project. It specifies the test type, project name, and target to execute.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/README_UT.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncd your_project_path\ntools/rtf/rtf native-ut run --names lynx --target hello_unittest_exec\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Mako Template Syntax with Inheritance and Loop Generation\nDESCRIPTION: This example showcases key Mako features including file inheritance, Python code blocks, looping constructs, and template functions (defs). It creates a table by iterating through a nested list and using a custom function to generate each row.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: mako\nCODE:\n```\n<%inherit file=\"base.html\"/>\n<%\n    rows = [[v for v in range(0,10)] for row in range(0,10)]\n%>\n<table>\n    % for row in rows:\n        ${makerow(row)}\n    % endfor\n</table>\n\n<%def name=\"makerow(row)\">\n    <tr>\n    % for name in row:\n        <td>${name}</td>\\\n    % endfor\n    </tr>\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Mako Template Rendering in Python\nDESCRIPTION: Shows how to use Mako's exception handling utilities to format and display template-specific error information. The text_error_template function is used to format exceptions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom mako import exceptions\n\ntry:\n    template = lookup.get_template(uri)\n    print(template.render())\nexcept:\n```\n\n----------------------------------------\n\nTITLE: License and Auto-generation Header for C++ Project Files\nDESCRIPTION: Standard header comment block for auto-generated C++ files in the Lynx project. It includes copyright information, license reference, details about the Jinja2 template source, and instructions not to modify the file.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/templates/lynx_copyright_block_2024.txt#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n\n// This file has been auto-generated from the Jinja2 template\n// {{jinja_template_filename}}\n// by the script {{code_generator}}.\n// DO NOT MODIFY!\n\n// clang-format off\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Table Tag with Embedded Content\nDESCRIPTION: Shows how to create a custom template tag that wraps content in a table structure using the <%self:defname> syntax to call a def with embedded content.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_10\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"buildtable()\">\n    <table>\n        <tr><td>\n            ${caller.body()}\n        </td></tr>\n    </table>\n</%def>\n\n<%self:buildtable>\n    I am the table body.\n</%self:buildtable>\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Variables in Mako Templates\nDESCRIPTION: Shows how to check for and handle undefined variables in Mako templates using the UNDEFINED object.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_1\n\nLANGUAGE: mako\nCODE:\n```\n% if someval is UNDEFINED:\n    someval is: no value\n% else:\n    someval is: ${someval}\n% endif\n```\n\n----------------------------------------\n\nTITLE: Running Android Instrumentation Tests with RTF for Lynx\nDESCRIPTION: These Bash commands show how to use the RTF tool to run Android instrumentation tests for the Lynx project. It includes commands for running tests on both emulators and real devices.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/README_UT.md#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ntools/rtf/rtf android-ut run --name lynx\n```\n\nLANGUAGE: Bash\nCODE:\n```\ntools/rtf/rtf android-ut run --name lynx --rmd\n```\n\n----------------------------------------\n\nTITLE: Implementing TasmMediator Cross-Thread Function Call in C++\nDESCRIPTION: Example of accessing a LynxActor within TasmMediator to perform cross-thread function calls.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/core/shell/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid TasmMediator::CallFunction() {\n  runtime_actor_->Act(\n      [](auto& runtime) {\n        runtime->CallFunction();\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @lynx-js/types for Framework Developers\nDESCRIPTION: Configuration for adding @lynx-js/types as a peer dependency in package.json for framework developers.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/js_libraries/types/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@lynx-js/types\": \"latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: JsonCpp Library Target Configuration\nDESCRIPTION: Sets up the build targets for JsonCpp library, including both shared and static library variants with proper version information and installation rules.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/lib_json/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nIF(BUILD_SHARED_LIBS)\n    ADD_DEFINITIONS( -DJSON_DLL_BUILD )\n    ADD_LIBRARY(jsoncpp_lib SHARED ${PUBLIC_HEADERS} ${jsoncpp_sources})\n    SET_TARGET_PROPERTIES( jsoncpp_lib PROPERTIES VERSION ${JSONCPP_VERSION} SOVERSION ${JSONCPP_SOVERSION})\n    SET_TARGET_PROPERTIES( jsoncpp_lib PROPERTIES OUTPUT_NAME jsoncpp\n                           DEBUG_OUTPUT_NAME jsoncpp${DEBUG_LIBNAME_SUFFIX} )\n\n    IF(APPLE)\n        SET_TARGET_PROPERTIES( jsoncpp_lib PROPERTIES INSTALL_RPATH \"@loader_path/.\" )\n    ENDIF()\n\n    INSTALL( TARGETS jsoncpp_lib ${INSTALL_EXPORT}\n             RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n             LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n             ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\n    IF(NOT CMAKE_VERSION VERSION_LESS 2.8.11)\n        TARGET_INCLUDE_DIRECTORIES( jsoncpp_lib PUBLIC\n                                   $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n                                   $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/${JSONCPP_INCLUDE_DIR}>)\n    ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mako Template Decorator Using runtime.capture\nDESCRIPTION: This snippet shows an improved 'bar' decorator that uses runtime.capture to capture the output of the decorated function, then returns a modified string with 'BAR' added to both ends. This approach is more flexible as it returns the modified content rather than writing directly to the context.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_14\n\nLANGUAGE: mako\nCODE:\n```\n<%!\n    def bar(fn):\n        def decorate(context, *args, **kw):\n            return \"BAR\" + runtime.capture(context, fn, *args, **kw) + \"BAR\"\n        return decorate\n%>\n\n<%def name=\"foo()\" decorator=\"bar\">\n    this is foo\n</%def>\n\n${foo()}\n```\n\n----------------------------------------\n\nTITLE: Caching Mako Template Module on Filesystem in Python\nDESCRIPTION: Demonstrates how to cache the compiled Mako template as a Python module file for improved performance. The module_directory argument specifies where to store the cached files.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\n\nmytemplate = Template(filename='/docs/mytmpl.txt', module_directory='/tmp/mako_modules')\nprint(mytemplate.render())\n```\n\n----------------------------------------\n\nTITLE: Setting up a Lynx Development Environment with Git\nDESCRIPTION: Command for cloning the Lynx repository into a specific directory structure for better dependency management with Habitat. This approach helps keep the workspace organized as dependencies are installed.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/lynx-family/lynx.git src/lynx\n```\n\n----------------------------------------\n\nTITLE: Basic Mako Template Inheritance Example - Base Template\nDESCRIPTION: Example of a base template (base.html) that defines the main layout structure with placeholders for header, body, and footer content.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_1\n\nLANGUAGE: mako\nCODE:\n```\n## base.html\n<html>\n    <body>\n        <div class=\"header\">\n            <%block name=\"header\"/>\n        </div>\n\n        ${self.body()}\n\n        <div class=\"footer\">\n            <%block name=\"footer\">\n                this is the footer\n            </%block>\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cached Template Block in Mako\nDESCRIPTION: Example of caching a specific block of content using the <%block> directive. This block will be cached for 60 seconds before being regenerated.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_2\n\nLANGUAGE: mako\nCODE:\n```\n<%block cached=\"True\" cache_timeout=\"60\">\n    other text\n</%block>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Cache Invalidation with Mako\nDESCRIPTION: Shows how to programmatically invalidate different cache entries from Python code. Examples include invalidating a template's body, a specific def, or an arbitrary cache key.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntemplate = lookup.get_template('/sometemplate.html')\n\n# invalidate the \"body\" of the template\ntemplate.cache.invalidate_body()\n\n# invalidate an individual def\ntemplate.cache.invalidate_def('somedef')\n\n# invalidate an arbitrary key\ntemplate.cache.invalidate('somekey')\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Thread Communication Delegate in C++\nDESCRIPTION: Example showing how to define a delegate class for cross-thread communication in the native layer using the LynxActor system.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/core/shell/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nclass YourModule {\n public:\n  class Delegate {\n   public:\n    Delegate() = default;\n    virtual ~Delegate() = default;\n\n    virtual void CallFunction() = 0;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Types in @lynx-js/types\nDESCRIPTION: Example of how to extend the GlobalProps interface from @lynx-js/types with custom properties.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/js_libraries/types/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@lynx-js/types' {\n  interface GlobalProps {\n     foo: string;\n     bar: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Control Structures in Mako\nDESCRIPTION: Shows more complex control structures including nested if/elif/else and for loops in Mako templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_4\n\nLANGUAGE: mako\nCODE:\n```\n% for a in ['one', 'two', 'three', 'four', 'five']:\n    % if a[0] == 't':\n    its two or three\n    % elif a[0] == 'f':\n    four/five\n    % else:\n    one\n    % endif\n% endfor\n```\n\n----------------------------------------\n\nTITLE: Basic Mako Template Inheritance Example - Child Template\nDESCRIPTION: Example of an inheriting template (index.html) that extends a base template and defines a header block.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_0\n\nLANGUAGE: mako\nCODE:\n```\n## index.html\n<%inherit file=\"base.html\"/>\n\n<%block name=\"header\">\n    this is some header content\n</%block>\n\nthis is the body content.\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Conditional Tag in Mako\nDESCRIPTION: Demonstrates building a custom conditional tag that only renders its content if a specified expression evaluates to True.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_13\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"conditional(expression)\">\n    % if expression:\n        ${caller.body()}\n    % endif\n</%def>\n\n<%self:conditional expression=\"${4==4}\">\n    i'm the result\n</%self:conditional>\n```\n\n----------------------------------------\n\nTITLE: Python Blocks in Mako\nDESCRIPTION: Illustrates how to include arbitrary Python code blocks in Mako templates using <% %> tags.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_9\n\nLANGUAGE: mako\nCODE:\n```\nthis is a template\n<%\n    x = db.get_resource('foo')\n    y = [z.element for z in x if x.frobnizzle==5]\n%>\n% for elem in y:\n    element: ${elem}\n% endfor\n```\n\n----------------------------------------\n\nTITLE: Platform Property Integration\nDESCRIPTION: Code for integrating the custom property with platform-specific implementations and computed style handling.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/css_generator/README.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#define FOREACH_PLATFORM_PROPERTY(V)     \\\nV(Test)\n\nbool ComputedCSSValue::SetTest(const tasm::CSSValue& value, bool reset);\n\n// In prop_bundle_style_writter\n  static void TestWriterFunc(PropBundle* bundle, CSSPropertyID id,\n                                starlight::ComputedCSSStyle* style);\n\n  static constexpr std::array<WriterFunc, kPropertyEnd> kWriter = [] {\n    std::array<WriterFunc, kPropertyEnd> writer = {nullptr};\n    for (CSSPropertyID id : kPlatformIDs) {\n      writer[id] = &DefaultWriterFunc;\n    }\n    writer[kPropertyIDTest] = &TestWriterFunc;\n    return writer;\n  }();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Error Behaviors in YAML\nDESCRIPTION: Example showing how to define an error behavior within a section in the error_code.yaml file. Each behavior has a unique mid-code within its section that cannot exceed two digits.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/error_code/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbehaviors:\n    - name: ImageLoadFailed\n      mid-code: 1\n      level: error\n      codes: # ignore the definition of codes\n```\n\n----------------------------------------\n\nTITLE: Using Page Arguments in Named Blocks\nDESCRIPTION: Demonstrates how to pass arguments from the page to named blocks using the args attribute. This allows blocks to access variables passed to the template through <%include> or inheritance.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_24\n\nLANGUAGE: mako\nCODE:\n```\n<%page args=\"post\"/>\n\n<a name=\"${post.title}\" />\n\n<span class=\"post_prose\">\n    <%block name=\"post_prose\" args=\"post\">\n        ${post.content}\n    </%block>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Creating Named Blocks for Template Inheritance\nDESCRIPTION: Demonstrates how to define named blocks in Mako, which can be overridden by inheriting templates. This example shows a template with header and title blocks that can be customized by child templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_22\n\nLANGUAGE: mako\nCODE:\n```\n<html>\n<%block name=\"header\">\n    <head>\n        <title>\n            <%block name=\"title\">Title</%block>\n        </title>\n    </head>\n</%block>\n<body>\n    ${next.body()}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing Python Module as Namespace\nDESCRIPTION: Shows how to import a regular Python module function as a namespace in a Mako template, automatically handling the context parameter.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_11\n\nLANGUAGE: mako\nCODE:\n```\n<%namespace name=\"hw\" module=\"some.module\"/>\n\n${hw.my_tag()}\n```\n\n----------------------------------------\n\nTITLE: Defining Sub Error Codes in YAML\nDESCRIPTION: Example showing how to define a sub error code within a behavior in error_code.yaml. Each sub error code has a unique low-code within its behavior and can specify metadata like description and fix suggestions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/error_code/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncodes:\n    - name: InvalidImageUrl\n      low-code: 1\n      description: 'Failed to load image caused by invalid url'\n      fix-suggestion: 'Please check the image url'\n      consumers:\n          - front-end\n```\n\n----------------------------------------\n\nTITLE: Property Handler Header Implementation\nDESCRIPTION: C++ header file template for implementing a custom CSS property handler in the Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/css_generator/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"core/renderer/css/parser/handler_defines.h\"\n\nnamespace lynx {\nnamespace tasm {\nnamespace TestHandler {\n\nHANDLER_REGISTER_DECLARE();\n\n}  // namespace TestHandler\n}  // namespace tasm\n\n}  // namespace lynx\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Structure for PerformanceEntry Definition\nDESCRIPTION: Example YAML structure for defining a new PerformanceEntry. It demonstrates inheritance from PerformanceEntry and how to define new properties.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/performance/performance_observer/definition_yaml_files/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# NewEntry.yml\nNewEntry:\n  allOf:\n    - $ref: 'PerformanceEntry.yml#/PerformanceEntry'\n    - type: object\n      properties:\n        propName:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Calling Defs Programmatically in Python\nDESCRIPTION: Shows how to call template defs programmatically from Python code using the get_def() method, which returns a DefTemplate object.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\n\ntemplate = Template(\"\"\"\n    <%def name=\"hi(name)\">\n        hi ${name}!\n    </%def>\n\n    <%def name=\"bye(name)\">\n        bye ${name}!\n    </%def>\n\"\"\")\n\nprint(template.get_def(\"hi\").render(name=\"ed\"))\nprint(template.get_def(\"bye\").render(name=\"ed\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Dependencies Using Namespace Attributes in Mako\nDESCRIPTION: Demonstrates using Namespace.attr to manage static includes across templates. The base template iterates through namespaces to find and render includes defined in template attributes.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_19\n\nLANGUAGE: mako\nCODE:\n```\n## base.mako\n## base-most template, renders layout etc.\n<html>\n<head>\n## traverse through all namespaces present,\n## look for an attribute named 'includes'\n% for ns in context.namespaces.values():\n    % for incl in getattr(ns.attr, 'includes', []):\n        ${incl}\n    % endfor\n% endfor\n</head>\n<body>\n${next.body()}\n</body\n</html>\n\n## library.mako\n## library functions.\n<%!\n    includes = [\n        '<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\"/>',\n        '<script type=\"text/javascript\" src=\"functions.js\"></script>'\n    ]\n%>\n\n<%def name=\"mytag()\">\n    <form>\n        ${caller.body()}\n    </form>\n</%def>\n\n## index.mako\n## calling template.\n<%inherit file=\"base.mako\"/>\n<%namespace name=\"foo\" file=\"library.mako\"/>\n\n<%foo:mytag>\n    a form\n</%foo:mytag>\n```\n\n----------------------------------------\n\nTITLE: Loading Mako Template from File in Python\nDESCRIPTION: Shows how to create a Mako Template object from a file using the filename argument. This allows templates to be stored as separate files.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\n\nmytemplate = Template(filename='/docs/mytmpl.txt')\nprint(mytemplate.render())\n```\n\n----------------------------------------\n\nTITLE: Configuring Fullscreen Mode for OpenLynx Client\nDESCRIPTION: This snippet demonstrates how to launch an OpenLynx client in fullscreen mode, hiding the window frame and occupying the entire screen.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/core/options/README.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nlynx://domain:port?window.fullscreen=1\n```\n\n----------------------------------------\n\nTITLE: Building JsonCpp with CMake on Unix\nDESCRIPTION: This command sequence shows how to build JsonCpp using CMake on a Unix system. It sets up a debug build with static libraries and specifies installation directories.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir -p build/debug\ncd build/debug\ncmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G \"Unix Makefiles\" ../..\nmake\n```\n\n----------------------------------------\n\nTITLE: Control Structures in Mako\nDESCRIPTION: Demonstrates the use of control structures like if/else in Mako templates using the % marker.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_3\n\nLANGUAGE: mako\nCODE:\n```\n% if x==5:\n    this is some output\n% endif\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Body Content in Custom Tags\nDESCRIPTION: Shows how to create a complex layout def that passes arguments to its body content, allowing for dynamic content generation based on the passed data.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_14\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"layoutdata(somedata)\">\n    <table>\n    % for item in somedata:\n        <tr>\n        % for col in item:\n            <td>${caller.body(col=col)}</td>\n        % endfor\n        </tr>\n    % endfor\n    </table>\n</%def>\n\n<%self:layoutdata somedata=\"${[[1,2,3],[4,5,6],[7,8,9]]}\" args=\"col\">\\nBody data: ${col}\\n</%self:layoutdata>\n```\n\n----------------------------------------\n\nTITLE: Platform Layer Access Implementation in LynxShell\nDESCRIPTION: Example of implementing platform layer access to call functions on the TASM thread through LynxShell.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/core/shell/README.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvoid LynxShell::CallFunction() {\n  engine_actor_->Act(\n      [](auto& engine) {\n        engine->CallFunction();\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Code Sections in YAML\nDESCRIPTION: Example showing how to define an error code section in the error_code.yaml file. Each section represents a category of errors with a unique high-code that cannot exceed two digits.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/error_code/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# example\nsections:\n  - name: Resource\n    description: 'Resource related errors.'\n    high-code: 3\n    behaviors: # ignore the definition of behaviors\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Position for OpenLynx Client\nDESCRIPTION: This snippet demonstrates how to set the initial window position (x and y coordinates) when launching an OpenLynx client.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/core/options/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nlynx://domain:port?window.position.x=<number>&window.position.y=<number>\n```\n\n----------------------------------------\n\nTITLE: Def Tag in Mako\nDESCRIPTION: Shows how to define and use functions within Mako templates using the <%def> tag.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_13\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"myfunc(x)\">\n    this is myfunc, x is ${x}\n</%def>\n\n${myfunc(7)}\n```\n\n----------------------------------------\n\nTITLE: Importing Namespaces with Named Reference\nDESCRIPTION: Demonstrates importing components from another file using the namespace tag with a name attribute, creating a proxy object for accessing the imported definitions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_1\n\nLANGUAGE: mako\nCODE:\n```\n## index.html\n<%namespace name=\"comp\" file=\"components.html\"/>\n\nHere's comp1:  ${comp.comp1()}\nHere's comp2:  ${comp.comp2(x=5)}\n```\n\n----------------------------------------\n\nTITLE: Defining Defs Inside a Namespace\nDESCRIPTION: Example of defining defs directly inside a namespace tag, making them part of the namespace and allowing them to override imported definitions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_14\n\nLANGUAGE: mako\nCODE:\n```\n## define a namespace\n<%namespace name=\"stuff\">\n    <%def name=\"comp1()\">\n        comp1\n    </%def>\n</%namespace>\n\n## then call it\n${stuff.comp1()}\n```\n\n----------------------------------------\n\nTITLE: Running Lynx C++ Unit Tests for Code Coverage\nDESCRIPTION: Commands to run native unit tests to generate C++ code coverage data. The tests are executed using the rtf tool which will automatically instrument the code and collect coverage information.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/core/coverage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd repo_root_dir\ntools/rtf/rtf native-ut run --names lynx\n```\n\n----------------------------------------\n\nTITLE: Rendering Mako Template with Variables in Python\nDESCRIPTION: Shows how to pass variables to a Mako template during rendering. The render() method accepts keyword arguments that become available in the template namespace.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\n\nmytemplate = Template(\"hello, ${name}!\")\nprint(mytemplate.render(name=\"jack\"))\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions with HTML Error Template in Mako\nDESCRIPTION: Demonstrates a try/except pattern for handling exceptions when rendering Mako templates, using the html_error_template to display formatted error information.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom mako import exceptions\n\ntry:\n    template = lookup.get_template(uri)\n    print(template.render())\nexcept:\n    print(exceptions.html_error_template().render())\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Default Filters with Imports in Mako TemplateLookup\nDESCRIPTION: Demonstrates configuring custom default filters and adding imports for all templates using TemplateLookup in Python.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nt = TemplateLookup(directories=['/tmp'],\n                   default_filters=['unicode', 'myfilter'],\n                   imports=['from mypackage import myfilter'])\n```\n\n----------------------------------------\n\nTITLE: Defining Template File Encoding in Mako\nDESCRIPTION: Shows how to specify UTF-8 encoding in a Mako template using Python's magic encoding comment syntax.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/unicode.rst#2025-04-23_snippet_0\n\nLANGUAGE: mako\nCODE:\n```\n## -*- coding: utf-8 -*-\n\nAlors vous imaginez ma surprise, au lever du jour, quand\nune drôle de petite voix m'a réveillé. Elle disait:\n « S'il vous plaît… dessine-moi un mouton! »\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonCpp Project in CMake\nDESCRIPTION: The main CMake configuration file for the JsonCpp project. It defines build options, compiler settings, version handling, and installation rules. The file supports different compilers (MSVC, GCC, Clang, Intel) with appropriate warning flags and C++11 requirements.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# vim: et ts=4 sts=4 sw=4 tw=0\n\nCMAKE_MINIMUM_REQUIRED(VERSION 3.1)\nPROJECT(jsoncpp)\nENABLE_TESTING()\n\nOPTION(JSONCPP_WITH_TESTS \"Compile and (for jsoncpp_check) run JsonCpp test executables\" ON)\nOPTION(JSONCPP_WITH_POST_BUILD_UNITTEST \"Automatically run unit-tests as a post build step\" ON)\nOPTION(JSONCPP_WITH_WARNING_AS_ERROR \"Force compilation to fail if a warning occurs\" OFF)\nOPTION(JSONCPP_WITH_STRICT_ISO \"Issue all the warnings demanded by strict ISO C and ISO C++\" ON)\nOPTION(JSONCPP_WITH_PKGCONFIG_SUPPORT \"Generate and install .pc files\" ON)\nOPTION(JSONCPP_WITH_CMAKE_PACKAGE \"Generate and install cmake package files\" OFF)\nOPTION(BUILD_SHARED_LIBS \"Build jsoncpp_lib as a shared library.\" OFF)\nOPTION(BUILD_STATIC_LIBS \"Build jsoncpp_lib static library.\" ON)\n\n# Ensures that CMAKE_BUILD_TYPE is visible in cmake-gui on Unix\nIF(NOT WIN32)\n    IF(NOT CMAKE_BUILD_TYPE)\n        SET(CMAKE_BUILD_TYPE Release CACHE STRING\n            \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel Coverage.\"\n            FORCE)\n    ENDIF()\nENDIF()\n\n# Enable runtime search path support for dynamic libraries on OSX\nIF(APPLE)\n    SET(CMAKE_MACOSX_RPATH 1)\nENDIF()\n\n# Adhere to GNU filesystem layout conventions\nINCLUDE(GNUInstallDirs)\n\nSET(DEBUG_LIBNAME_SUFFIX \"\" CACHE STRING \"Optional suffix to append to the library name for a debug build\")\n\n# Set variable named ${VAR_NAME} to value ${VALUE}\nFUNCTION(set_using_dynamic_name VAR_NAME VALUE)\n    SET( \"${VAR_NAME}\" \"${VALUE}\" PARENT_SCOPE)\nENDFUNCTION()\n\n# Extract major, minor, patch from version text\n# Parse a version string \"X.Y.Z\" and outputs\n# version parts in ${OUPUT_PREFIX}_MAJOR, _MINOR, _PATCH.\n# If parse succeeds then ${OUPUT_PREFIX}_FOUND is TRUE.\nMACRO(jsoncpp_parse_version VERSION_TEXT OUPUT_PREFIX)\n    SET(VERSION_REGEX \"[0-9]+\\\\.[0-9]+\\\\.[0-9]+(-[a-zA-Z0-9_]+)?\")\n    IF( ${VERSION_TEXT} MATCHES ${VERSION_REGEX} )\n        STRING(REGEX MATCHALL \"[0-9]+|-([A-Za-z0-9_]+)\" VERSION_PARTS ${VERSION_TEXT})\n        LIST(GET VERSION_PARTS 0 ${OUPUT_PREFIX}_MAJOR)\n        LIST(GET VERSION_PARTS 1 ${OUPUT_PREFIX}_MINOR)\n        LIST(GET VERSION_PARTS 2 ${OUPUT_PREFIX}_PATCH)\n        set_using_dynamic_name( \"${OUPUT_PREFIX}_FOUND\" TRUE )\n    ELSE( ${VERSION_TEXT} MATCHES ${VERSION_REGEX} )\n        set_using_dynamic_name( \"${OUPUT_PREFIX}_FOUND\" FALSE )\n    ENDIF()\nENDMACRO()\n\n# Read out version from \"version\" file\n#FILE(STRINGS \"version\" JSONCPP_VERSION)\n#SET( JSONCPP_VERSION_MAJOR X )\n#SET( JSONCPP_VERSION_MINOR Y )\n#SET( JSONCPP_VERSION_PATCH Z )\nSET( JSONCPP_VERSION 1.8.1 )\njsoncpp_parse_version( ${JSONCPP_VERSION} JSONCPP_VERSION )\n#IF(NOT JSONCPP_VERSION_FOUND)\n#    MESSAGE(FATAL_ERROR \"Failed to parse version string properly. Expect X.Y.Z\")\n#ENDIF(NOT JSONCPP_VERSION_FOUND)\nSET( JSONCPP_SOVERSION 11 )\nSET( JSONCPP_USE_SECURE_MEMORY \"0\" CACHE STRING \"-D...=1 to use memory-wiping allocator for STL\" )\n\nMESSAGE(STATUS \"JsonCpp Version: ${JSONCPP_VERSION_MAJOR}.${JSONCPP_VERSION_MINOR}.${JSONCPP_VERSION_PATCH}\")\n# File version.h is only regenerated on CMake configure step\nCONFIGURE_FILE( \"${PROJECT_SOURCE_DIR}/src/lib_json/version.h.in\"\n                \"${PROJECT_SOURCE_DIR}/include/json/version.h\"\n                NEWLINE_STYLE UNIX )\nCONFIGURE_FILE( \"${PROJECT_SOURCE_DIR}/version.in\"\n                \"${PROJECT_SOURCE_DIR}/version\"\n                NEWLINE_STYLE UNIX )\n\nMACRO(UseCompilationWarningAsError)\n    IF(MSVC)\n        # Only enabled in debug because some old versions of VS STL generate\n        # warnings when compiled in release configuration.\n        SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /WX \")\n    ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror\")\n        IF(JSONCPP_WITH_STRICT_ISO)\n            SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic-errors\")\n        ENDIF()\n    ENDIF()\nENDMACRO()\n\n# Include our configuration header\nINCLUDE_DIRECTORIES( ${jsoncpp_SOURCE_DIR}/include )\n\nIF(MSVC)\n    # Only enabled in debug because some old versions of VS STL generate\n    # unreachable code warning when compiled in release configuration.\n    SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /W4 \")\nENDIF()\n\n# Require C++11 support, prefer ISO C++ over GNU variants,\n# as relying solely on ISO C++ is more portable.\nSET(CMAKE_CXX_STANDARD 11)\nSET(CMAKE_CXX_STANDARD_REQUIRED ON)\nSET(CMAKE_CXX_EXTENSIONS OFF)\n\nIF(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    # using regular Clang or AppleClang\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wconversion -Wshadow -Werror=conversion -Werror=sign-compare\")\nELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    # using GCC\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wconversion -Wshadow -Wextra\")\n    # not yet ready for -Wsign-conversion\n\n    IF(JSONCPP_WITH_STRICT_ISO)\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic\")\n    ENDIF()\n    IF(JSONCPP_WITH_WARNING_AS_ERROR)\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror=conversion\")\n    ENDIF()\nELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n    # using Intel compiler\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wconversion -Wshadow -Wextra -Werror=conversion\")\n\n    IF(JSONCPP_WITH_STRICT_ISO AND NOT JSONCPP_WITH_WARNING_AS_ERROR)\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic\")\n    ENDIF()\nENDIF()\n\nFIND_PROGRAM(CCACHE_FOUND ccache)\nIF(CCACHE_FOUND)\n    SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n    SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\nENDIF(CCACHE_FOUND)\n\nIF(JSONCPP_WITH_WARNING_AS_ERROR)\n    UseCompilationWarningAsError()\nENDIF()\n\nIF(JSONCPP_WITH_PKGCONFIG_SUPPORT)\n    CONFIGURE_FILE(\n        \"pkg-config/jsoncpp.pc.in\"\n        \"pkg-config/jsoncpp.pc\"\n        @ONLY)\n    INSTALL(FILES \"${CMAKE_CURRENT_BINARY_DIR}/pkg-config/jsoncpp.pc\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nENDIF()\n\nIF(JSONCPP_WITH_CMAKE_PACKAGE)\n        INSTALL(EXPORT jsoncpp\n                DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/jsoncpp\n                FILE        jsoncppConfig.cmake)\nENDIF()\n\n# Build the different applications\nADD_SUBDIRECTORY( src )\n\n#install the includes\nADD_SUBDIRECTORY( include )\n\n```\n\n----------------------------------------\n\nTITLE: Including JsonCpp Headers in C++\nDESCRIPTION: This snippet shows how to include JsonCpp headers in a C++ project. It also mentions a macro definition required for Windows dynamic library builds.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <json/json.h>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Attributes in Mako Templates\nDESCRIPTION: Illustrates how to set and access global attributes within a Mako template using a shared dictionary.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_2\n\nLANGUAGE: mako\nCODE:\n```\n<%\n    attributes['foo'] = 'bar'\n%>\n'foo' attribute is: ${attributes['foo']}\n```\n\n----------------------------------------\n\nTITLE: Configuring TemplateLookup with Collection Size in Python\nDESCRIPTION: Shows how to set a fixed cache size for TemplateLookup to limit memory usage. The collection_size argument determines the maximum number of templates to keep in memory.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmylookup = TemplateLookup(directories=['/docs'],\n                module_directory='/tmp/mako_modules', collection_size=500)\n```\n\n----------------------------------------\n\nTITLE: Python Function with Caller Support for Embedded Content\nDESCRIPTION: Demonstrates a Python function that supports embedded content from the caller using the supports_caller decorator, allowing it to handle content passed from the template.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.runtime import supports_caller\n\n@supports_caller\ndef my_tag(context):\n    context.write(\"<div>\")\n    context['caller'].body()\n    context.write(\"</div>\")\n    return ''\n```\n\n----------------------------------------\n\nTITLE: Early Template Exit with STOP_RENDERING\nDESCRIPTION: Demonstrates how to exit template rendering early using return statements and the STOP_RENDERING symbol.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_21\n\nLANGUAGE: mako\nCODE:\n```\n% if not len(records):\n    No records found.\n    <% return STOP_RENDERING %>\n% endif\n```\n\nLANGUAGE: mako\nCODE:\n```\n<%\n    if not len(records):\n        return STOP_RENDERING\n%>\n```\n\nLANGUAGE: mako\nCODE:\n```\n<% return '' %>\n```\n\n----------------------------------------\n\nTITLE: Using Context Object for Mako Template Rendering in Python\nDESCRIPTION: Demonstrates manual creation of a Context object for rendering a Mako template. This approach allows more control over the rendering process and output capture.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\nfrom mako.runtime import Context\nfrom StringIO import StringIO\n\nmytemplate = Template(\"hello, ${name}!\")\nbuf = StringIO()\nctx = Context(buf, name=\"jack\")\nmytemplate.render_context(ctx)\nprint(buf.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Installing Android components for Lynx\nDESCRIPTION: Python command to run a script that installs required Android components including SDK and NDK.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython3 tools/android_tools/prepare_android_build.py\n```\n\n----------------------------------------\n\nTITLE: Using Array Index with Json::Value in C++\nDESCRIPTION: Example of using array index as an int with Json::Value, which is now supported for better usability.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/NEWS.txt#2025-04-23_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nJson::Value array;\narray.append( 1234 );\nint value = array[0].asInt();  // now compiles\n```\n\n----------------------------------------\n\nTITLE: Creating Version Parser Macro in CMake\nDESCRIPTION: A CMake macro that parses a version string in the format 'X.Y.Z' and extracts major, minor, and patch components. Uses regular expressions to validate and extract version parts. Sets a 'FOUND' flag to indicate successful parsing.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMACRO(jsoncpp_parse_version VERSION_TEXT OUPUT_PREFIX)\n    SET(VERSION_REGEX \"[0-9]+\\\\.[0-9]+\\\\.[0-9]+(-[a-zA-Z0-9_]+)?\")\n    IF( ${VERSION_TEXT} MATCHES ${VERSION_REGEX} )\n        STRING(REGEX MATCHALL \"[0-9]+|-([A-Za-z0-9_]+)\" VERSION_PARTS ${VERSION_TEXT})\n        LIST(GET VERSION_PARTS 0 ${OUPUT_PREFIX}_MAJOR)\n        LIST(GET VERSION_PARTS 1 ${OUPUT_PREFIX}_MINOR)\n        LIST(GET VERSION_PARTS 2 ${OUPUT_PREFIX}_PATCH)\n        set_using_dynamic_name( \"${OUPUT_PREFIX}_FOUND\" TRUE )\n    ELSE( ${VERSION_TEXT} MATCHES ${VERSION_REGEX} )\n        set_using_dynamic_name( \"${OUPUT_PREFIX}_FOUND\" FALSE )\n    ENDIF()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Multiple Block Rendering in Mako\nDESCRIPTION: Example showing how to render the same named block multiple times in different locations of a template.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_4\n\nLANGUAGE: mako\nCODE:\n```\n<html>\n    <head>\n        <title>${self.title()}</title>\n    </head>\n    <body>\n    <%block name=\"header\">\n        <h2><%block name=\"title\"/></h2>\n    </%block>\n    ${self.body()}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Propagating Context Variables in Mako\nDESCRIPTION: Shows how to propagate all variables in the current context to a function call using context.kwargs.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_3\n\nLANGUAGE: mako\nCODE:\n```\n${next.body(**context.kwargs)}\n```\n\n----------------------------------------\n\nTITLE: Initializing RTF Project in Command Line\nDESCRIPTION: Demonstrates how to initialize an RTF project in the current directory. This creates a .rtf folder in the initialization directory which is required for RTF to work with a repository.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\nrtf init -h\nrtf init project --path .\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Lynx Explorer iOS Build\nDESCRIPTION: This snippet shows how to create a virtual environment and install the PyYAML package required for auto-generation logic in the Lynx Explorer build process.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/darwin/ios/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# use the virtual environment to manage python environment\npython3 -m venv venv\nsource venv/bin/activate\n# install PyYAML package\npip3 install pyyaml\n```\n\n----------------------------------------\n\nTITLE: Creating Inheritable Namespaces\nDESCRIPTION: Demonstrates creating an inheritable namespace that will be available to all templates in an inheritance chain through the self namespace.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_18\n\nLANGUAGE: mako\nCODE:\n```\n## base.html\n<%namespace name=\"foo\" file=\"foo.html\" inheritable=\"True\"/>\n\n${next.body()}\n\n## somefile.html\n<%inherit file=\"base.html\"/>\n\n${self.foo.bar()}\n```\n\n----------------------------------------\n\nTITLE: Installing JDK 11 on MacOS using Homebrew\nDESCRIPTION: Command to install OpenJDK 11 (Zulu distribution) on MacOS using Homebrew package manager.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install --cask zulu@11\n```\n\n----------------------------------------\n\nTITLE: Applying Filter to Mako Def Tag\nDESCRIPTION: Demonstrates applying HTML escaping and whitespace trimming filters to the output of a def tag in Mako.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_8\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"foo()\" filter=\"h, trim\">\n    <b>this is bold</b>\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Importing All Namespace Elements with Wildcard\nDESCRIPTION: Example of importing all definitions from another template file using the wildcard (*) operator, which can impact performance in current Mako versions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_3\n\nLANGUAGE: mako\nCODE:\n```\n<%namespace file=\"components.html\" import=\"*\"/>\n\nHeres comp1:  ${comp1()}\nHeres comp2:  ${comp2(x=5)}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Lynx Repository\nDESCRIPTION: This command clones the Lynx repository from GitHub to a specific path to avoid directory contamination when installing dependencies.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/darwin/ios/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/lynx-family/lynx.git src/lynx\n```\n\n----------------------------------------\n\nTITLE: Installing Third-Party Libraries for Lynx\nDESCRIPTION: These commands navigate to the repository root and run tools to sync dependencies and set up the environment for building Lynx Explorer.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/darwin/ios/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd src/lynx\ntools/hab sync .\nsource tools/envsetup.sh\n```\n\n----------------------------------------\n\nTITLE: Setting up Python virtual environment on MacOS\nDESCRIPTION: Commands to create a Python virtual environment, activate it, and install the PyYAML package on MacOS.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip3 install pyyaml\n```\n\n----------------------------------------\n\nTITLE: Using Template Context Variables within a Def\nDESCRIPTION: Shows how defs have access to the current contextual namespace, with variables like 'username' and 'accountdata' being accessible both in the main template and within the def.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_2\n\nLANGUAGE: mako\nCODE:\n```\nHello there ${username}, how are ya.  Lets see what your account says:\n\n${account()}\n\n<%def name=\"account()\">\n    Account for ${username}:<br/>\n\n    % for row in accountdata:\n        Value: ${row}<br/>\n    % endfor\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Accessing Cache with Template and Namespace Objects in Mako\nDESCRIPTION: Example showing how to access the cache object in Mako templates through both the local namespace and the template object. This allows retrieving cached values by key name.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n${local.cache.get('somekey')}\n```\n\n----------------------------------------\n\nTITLE: Generating PerformanceEntry Files using Habitat Sync in Shell\nDESCRIPTION: Commands to generate PerformanceEntry files using the habitat sync tool. This process involves setting up the environment and running the sync command.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/performance/performance_observer/definition_yaml_files/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/lynx\nsource ./tools/envsetup.sh\n./hab sync\n```\n\n----------------------------------------\n\nTITLE: Configuring JAVA_HOME on Linux\nDESCRIPTION: Bash commands to set JAVA_HOME environment variable and update PATH for JDK 11 on Linux.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Captured Function in Mako\nDESCRIPTION: Shows how to pass arguments to a function when using the capture function in a Mako template.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_11\n\nLANGUAGE: mako\nCODE:\n```\n${capture(somedef, 17, 'hi', use_paging=True)}\n```\n\n----------------------------------------\n\nTITLE: Compiling LynxExplorer using Gradle\nDESCRIPTION: Gradle command to compile the LynxExplorer Android app in debug mode without Address Sanitizer.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd explorer/android\n./gradlew :LynxExplorer:assembleNoAsanDebug --no-daemon\n```\n\n----------------------------------------\n\nTITLE: Nested Blocks in Mako Base Template\nDESCRIPTION: Example showing how to nest blocks within other blocks in a base template, specifically nesting a title block within a header block.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_2\n\nLANGUAGE: mako\nCODE:\n```\n## base.html\n<html>\n    <body>\n        <div class=\"header\">\n            <%block name=\"header\">\n                <h2>\n                    <%block name=\"title\"/>\n                </h2>\n            </%block>\n        </div>\n\n        ${self.body()}\n\n        <div class=\"footer\">\n            <%block name=\"footer\">\n                this is the footer\n            </%block>\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Cache Key with Template Parameters in Mako\nDESCRIPTION: Example showing how to use parameters passed to a def as part of the cache key in Mako, enabling dynamic cache key generation based on function arguments.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n<%def name=\"foo(x)\" cached=\"True\" cache_key=\"${x}\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing JDK 11 on Ubuntu/Debian\nDESCRIPTION: Command to install OpenJDK 11 on Ubuntu or Debian-based Linux distributions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install openjdk-11-jdk\n```\n\n----------------------------------------\n\nTITLE: Creating Anonymous Blocks in Mako Templates\nDESCRIPTION: Shows how to use Mako's anonymous <%block> tag, which renders content at the point it is defined. This example demonstrates the basic syntax of blocks.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_17\n\nLANGUAGE: mako\nCODE:\n```\n<html>\n    <body>\n        <%block>\n            this is a block.\n        </%block>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Expression Filter in Mako Page Tag\nDESCRIPTION: Demonstrates setting a default HTML escaping filter for all expressions in a Mako template using the page tag.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_4\n\nLANGUAGE: mako\nCODE:\n```\n<%page expression_filter=\"h\"/>\n\nEscaped text:  ${\"<html>some html</html>\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Mako Blocks\nDESCRIPTION: Demonstrates how to apply HTML escaping to a Mako block using the filter attribute. This is useful for ensuring content safety by automatically escaping HTML characters.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_18\n\nLANGUAGE: mako\nCODE:\n```\n<html>\n    <body>\n        <%block filter=\"h\">\n            <html>this is some escaped html.</html>\n        </%block>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Short-Term Cache Region in Mako Template\nDESCRIPTION: Example of using a named cache region ('short_term') at the page level to determine caching behavior. The configuration for this region is defined in the TemplateLookup setup.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_6\n\nLANGUAGE: mako\nCODE:\n```\n<%page cached=\"True\" cache_region=\"short_term\">\n\n## ...\n```\n\n----------------------------------------\n\nTITLE: Setting Output Encoding for Mako Templates in Python\nDESCRIPTION: Demonstrates how to configure output encoding for Mako templates. The output_encoding and encoding_errors parameters control the encoding of the rendered output.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\nfrom mako.lookup import TemplateLookup\n\nmylookup = TemplateLookup(directories=['/docs'], output_encoding='utf-8', encoding_errors='replace')\n\nmytemplate = mylookup.get_template(\"foo.txt\")\nprint(mytemplate.render())\n```\n\n----------------------------------------\n\nTITLE: Verifying JDK installation\nDESCRIPTION: Command to check the installed Java compiler version, expecting version 11.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njavac --version\n```\n\n----------------------------------------\n\nTITLE: Module-level Blocks in Mako\nDESCRIPTION: Demonstrates the use of module-level code blocks in Mako templates using <%! %> tags for imports and function definitions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_10\n\nLANGUAGE: mako\nCODE:\n```\n<%!\n    import mylib\n    import re\n\n    def filter(text):\n        return re.sub(r'^@', '', text)\n%>\n```\n\n----------------------------------------\n\nTITLE: Using Namespace Import in Mako\nDESCRIPTION: Shows how to import functions and metadata from other template files using the namespace directive.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_16\n\nLANGUAGE: mako\nCODE:\n```\n<%namespace file=\"functions.html\" import=\"*\"/>\n```\n\n----------------------------------------\n\nTITLE: Buffering Mako Def Output\nDESCRIPTION: Shows how to enable buffering for a Mako def tag to capture its output before returning.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_9\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"somedef()\" buffered=\"True\">\n    somedef's results\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Encoding Programmatically\nDESCRIPTION: Demonstrates how to set input encoding programmatically when initializing a TemplateLookup instance.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/unicode.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nt = TemplateLookup(directories=['./'], input_encoding='utf-8')\n```\n\n----------------------------------------\n\nTITLE: Resolving Ruby Gem Installation Errors\nDESCRIPTION: This troubleshooting snippet shows how to fix Ruby gem installation issues when running bundle_install.sh by setting the SDKROOT environment variable.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/darwin/ios/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk bundle install\n./bundle_install.sh\n```\n\n----------------------------------------\n\nTITLE: Running JsonCpp Tests with Python\nDESCRIPTION: These Python commands demonstrate how to run various test suites for JsonCpp, including Reader/Writer tests and unit tests. They also show options for using JSONChecker and Valgrind.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npython runjsontests.py path/to/jsontest\n\npython runjsontests.py --with-json-checker path/to/jsontest\n\npython rununittests.py path/to/test_lib_json\n\npython rununittests.py --valgrind path/to/test_lib_json\n```\n\n----------------------------------------\n\nTITLE: Page Tag in Mako\nDESCRIPTION: Shows how to use the <%page> tag to define template arguments and caching characteristics in Mako.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_11\n\nLANGUAGE: mako\nCODE:\n```\n<%page args=\"x, y, z='default'\"/>\n```\n\nLANGUAGE: mako\nCODE:\n```\n<%page cached=\"True\" cache_type=\"memory\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Loop Context in Mako For Loops\nDESCRIPTION: Demonstrates the usage of the loop context object to track iteration progress in Mako for loops.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_4\n\nLANGUAGE: mako\nCODE:\n```\n<ul>\n% for a in (\"one\", \"two\", \"three\"):\n    <li>Item ${loop.index}: ${a}</li>\n% endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Expression Filters for Encoding\nDESCRIPTION: Shows how to configure default filters to handle encoding for all expressions in a template.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/unicode.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nt = Template(templatetext, default_filters=['decode.utf8'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Filters in Python for Mako TemplateLookup\nDESCRIPTION: Shows how to set default filters for all templates using the TemplateLookup class in Python.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nt = TemplateLookup(directories=['/tmp'], default_filters=['unicode'])\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Appium Drivers\nDESCRIPTION: Command sequence for installing the three essential Appium drivers (xcuitest for iOS, uiautomator2 and espresso for Android) if they are not already installed.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/ENV_SETUP.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nappium driver install xcuitest\nappium driver install uiautomator2\nappium driver install espresso\n```\n\n----------------------------------------\n\nTITLE: Property Handler Implementation\nDESCRIPTION: C++ implementation file for the custom CSS property handler, including parsing and validation logic.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/css_generator/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"core/renderer/css/parser/test_handler.h\"\n\n#include <string>\n#include <utility>\n\n#include \"base/include/debug/lynx_assert.h\"\n#include \"core/renderer/css/parser/css_string_parser.h\"\n#include \"core/renderer/css/unit_handler.h\"\n#include \"core/renderer/tasm/config.h\"\n\nnamespace lynx {\nnamespace tasm {\nnamespace TestHandler {\n\nHANDLER_IMPL() {\n  CSS_HANDLER_FAIL_IF_NOT(input.IsString(), configs.enable_css_strict_mode,\n                          TYPE_MUST_BE, CSSProperty::GetPropertyNameCStr(key),\n                          STRING_TYPE)\n\n  CSSStringParser parser = CSSStringParser::FromLepusString(input, configs);\n  parser.SetIsLegacyParser(configs.enable_legacy_parser);\n  output[kPropertyIDTest] = parser.ParseTest();\n  return true;\n}\n\nHANDLER_REGISTER_IMPL() {\n  array[kPropertyIDTest] = &Handle;\n}\n\n}  // namespace BackgroundSizeHandler\n}  // namespace tasm\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Contribution in Git\nDESCRIPTION: Command for creating a new branch in Git when contributing to the Lynx project.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b name-of-your-branch\n```\n\n----------------------------------------\n\nTITLE: Zebra Striping with Loop Cycling in Mako\nDESCRIPTION: Shows how to create alternating row colors (zebra striping) using the loop.cycle() method in Mako templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_5\n\nLANGUAGE: mako\nCODE:\n```\n<ul>\n% for item in ('spam', 'ham', 'eggs'):\n  <li class=\"${loop.cycle('even', 'odd')}\">${item}</li>\n% endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using RichTraceback Object for Custom Error Handling in Mako\nDESCRIPTION: Shows how to directly use the RichTraceback object to create custom error display functionality, including access to detailed traceback information.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.exceptions import RichTraceback\n\ntry:\n    template = lookup.get_template(uri)\n    print(template.render())\nexcept:\n    traceback = RichTraceback()\n    for (filename, lineno, function, line) in traceback.traceback:\n        print(\"File %s, line %s, in %s\" % (filename, lineno, function))\n        print(line, \"\\n\")\n    print(\"%s: %s\" % (str(traceback.error.__class__.__name__), traceback.error))\n```\n\n----------------------------------------\n\nTITLE: Cloning WebDriverAgent for iOS Testing\nDESCRIPTION: Command to clone the WebDriverAgent repository, which is required for iOS testing with Appium XCUITest driver.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/ENV_SETUP.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/appium/WebDriverAgent.git\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Project Dependencies\nDESCRIPTION: This command installs the iOS-specific dependencies for the Lynx Explorer project, which generates the necessary Xcode workspace file.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/darwin/ios/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd explorer/darwin/ios/lynx_explorer\n./bundle_install.sh\n```\n\n----------------------------------------\n\nTITLE: Installing @lynx-js/types for Product Developers\nDESCRIPTION: Configuration for adding @lynx-js/types as a dev dependency in package.json for product developers.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/js_libraries/types/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n  \"@lynx-js/types\": \"latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Base Template with Next Namespace\nDESCRIPTION: Demonstrates the base template using next.body() to enable multi-level inheritance chains.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_5\n\nLANGUAGE: mako\nCODE:\n```\n<html>\n    <body>\n        <div class=\"header\">\n            <%block name=\"header\"/>\n        </div>\n\n        ${next.body()}\n\n        <div class=\"footer\">\n            <%block name=\"footer\">\n                this is the footer\n            </%block>\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Expression Escaping in Mako\nDESCRIPTION: Illustrates the use of built-in escaping mechanisms in Mako, such as URL escaping, using the | operator.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_2\n\nLANGUAGE: mako\nCODE:\n```\n${\"this is some text\" | u}\n```\n\n----------------------------------------\n\nTITLE: Passing Context Arguments to Body Method\nDESCRIPTION: Shows how to pass all top-level context arguments to a body method using the context.kwargs accessor, useful in inheritance scenarios.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_17\n\nLANGUAGE: mako\nCODE:\n```\n${next.body(**context.kwargs)}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using External Filter in Mako Template\nDESCRIPTION: Shows how to import a filter function from an external Python module and use it in a Mako template.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_3\n\nLANGUAGE: mako\nCODE:\n```\n<%!\n    import myfilters\n%>\n\nHere's some tagged text: ${\"text\" | myfilters.tagfilter}\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Linker Flags\nDESCRIPTION: Configures the linker flags for building the shared library. Includes security options, warning settings, and specific linking behaviors needed for the GN test library.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Compiler and Linker flags\nset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--exclude-libs,ALL,--gc-sections -Wl,--fatal-warnings -m64 -fPIC -Wl,-z,noexecstack -Wl,-z,now -Wl,-z,relro -Wl,-z,defs -pthread -Wl,--undefined-version -stdlib=libstdc++ \")\n```\n\n----------------------------------------\n\nTITLE: Using Blocks in Loops with Local Variable Access\nDESCRIPTION: Shows how anonymous blocks in Mako can access local variables when used inside loops. Anonymous blocks are defined as closures in the local rendering body.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_21\n\nLANGUAGE: mako\nCODE:\n```\n% for i in range(1, 4):\n    <%block>i is ${i}</%block>\n% endfor\n```\n\n----------------------------------------\n\nTITLE: Disabling Filters in Mako Expression\nDESCRIPTION: Shows how to use the 'n' filter to disable all other filters for a specific expression in a Mako template.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_7\n\nLANGUAGE: mako\nCODE:\n```\n${'myexpression' | n}\n```\n\n----------------------------------------\n\nTITLE: Index Template with Parent Namespace\nDESCRIPTION: Demonstrates using parent namespace to augment inherited blocks while maintaining original content.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_7\n\nLANGUAGE: mako\nCODE:\n```\n<%inherit file=\"layout.html\"/>\n\n<%block name=\"header\">\n    this is some header content\n</%block>\n\n<%block name=\"toolbar\">\n    ## call the parent's toolbar first\n    ${parent.toolbar()}\n    <li>selection 4</li>\n    <li>selection 5</li>\n</%block>\n\nthis is the body content.\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Error Template Output in Mako\nDESCRIPTION: Shows how to customize the HTML error template output by disabling the full page render with the full=False parameter.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprint(exceptions.html_error_template().render(full=False))\n```\n\n----------------------------------------\n\nTITLE: Setting Search Path for Shared Libraries\nDESCRIPTION: Configures the search path for shared libraries needed by the GN test library. Uses string replacement to transform paths as needed.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(lynx__tools__gn_tools__test_gn_test_sub_shared_search_path \n  ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\n  )\n\nstring(REPLACE \n${ROOT_PATH}/lynx/tools/gn_tools/test \n${ROOT_PATH}/lynx/tools/gn_tools/test \nlynx__tools__gn_tools__test_gn_test_sub_shared_search_path \n${lynx__tools__gn_tools__test_gn_test_sub_shared_search_path}) \n\ntarget_link_directories(gn_test PUBLIC  \n  ${lynx__tools__gn_tools__test_gn_test_sub_shared_search_path}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Android Explorer App\nDESCRIPTION: Gradle command to build Explorer app with demo pages for Android integration testing\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :LynxExplorer:assembleNoAsanDebug -PIntegrationTest\n```\n\n----------------------------------------\n\nTITLE: Enabling Loop Context in Individual Templates with Page Directive\nDESCRIPTION: Shows how to enable the loop context feature for an individual template when it has been disabled globally, using the page directive with enable_loop parameter.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_8\n\nLANGUAGE: mako\nCODE:\n```\n<%page enable_loop=\"True\"/>\n\n% for i in collection:\n    ${i} ${loop.index}\n% endfor\n```\n\n----------------------------------------\n\nTITLE: Intermediate Layout Template\nDESCRIPTION: Shows an intermediate template that inherits from base.html and adds toolbar functionality.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_6\n\nLANGUAGE: mako\nCODE:\n```\n<%inherit file=\"base.html\"/>\n<ul>\n    <%block name=\"toolbar\">\n        <li>selection 1</li>\n        <li>selection 2</li>\n        <li>selection 3</li>\n    </%block>\n</ul>\n<div class=\"mainlayout\">\n    ${next.body()}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Multiline Comments in Mako\nDESCRIPTION: Demonstrates the use of multiline comments in Mako templates using <%doc> tags.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_7\n\nLANGUAGE: mako\nCODE:\n```\n<%doc>\n    these are comments\n    more comments\n</%doc>\n```\n\n----------------------------------------\n\nTITLE: Include Tag in Mako\nDESCRIPTION: Demonstrates the use of the <%include> tag to include other template files and pass arguments in Mako.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_12\n\nLANGUAGE: mako\nCODE:\n```\n<%include file=\"header.html\"/>\n\n    hello world\n\n<%include file=\"footer.html\"/>\n```\n\nLANGUAGE: mako\nCODE:\n```\n<%include file=\"toolbar.html\" args=\"current_section='members', username='ed'\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Requirements Groups\nDESCRIPTION: Requirements file specifying the core MarkupSafe dependency and optional groups for Babel and Lingua packages. Uses pip's requirements file format with requirement groups indicated in square brackets.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/Mako.egg-info/requires.txt#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nMarkupSafe>=0.9.2\n\n[babel]\nBabel\n\n[lingua]\nlingua\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Explorer Dependencies\nDESCRIPTION: Command to install iOS project dependencies for integration testing\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd explorer/darwin/ios/lynx_explorer\n./bundle_install.sh --integration-test\n```\n\n----------------------------------------\n\nTITLE: Python Template Argument Syntax\nDESCRIPTION: Example showing percentage sign escape syntax in Mako templates where %% outputs a literal %\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n%%\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Filters in Mako Expression\nDESCRIPTION: Shows how to apply multiple filters (HTML escaping and whitespace trimming) to a Mako expression output.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_1\n\nLANGUAGE: mako\nCODE:\n```\n${\" <tag>some value</tag> \" | h,trim}\n```\n\n----------------------------------------\n\nTITLE: Using Text Error Template with Mako\nDESCRIPTION: Shows how to use Mako's text_error_template to render exception information in a text format.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprint(exceptions.text_error_template().render())\n```\n\n----------------------------------------\n\nTITLE: GCC Compiler Version Check and Flags\nDESCRIPTION: Checks if using GCC compiler, gets its version, and sets strict aliasing warnings for versions above 4.1.2\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/lib_json/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF( CMAKE_COMPILER_IS_GNUCXX )\n    #Get compiler version.\n    EXECUTE_PROCESS( COMMAND ${CMAKE_CXX_COMPILER} -dumpversion\n                     OUTPUT_VARIABLE GNUCXX_VERSION )\n\n    #-Werror=* was introduced -after- GCC 4.1.2\n    IF( GNUCXX_VERSION VERSION_GREATER 4.1.2 )\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror=strict-aliasing\")\n    ENDIF()\nENDIF( CMAKE_COMPILER_IS_GNUCXX )\n```\n\n----------------------------------------\n\nTITLE: Dynamic Cache Key Generation in Mako\nDESCRIPTION: Demonstrates using a dynamic cache key based on the filename of the calling template. This pattern is useful for templates that inherit from a parent template to ensure each has a unique cache entry.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_3\n\nLANGUAGE: mako\nCODE:\n```\n<%page cached=\"True\" cache_key=\"${self.filename}\"/>\n\n${next.body()}\n\n## rest of template\n```\n\n----------------------------------------\n\nTITLE: Replacing inspect.getfullargspec() with vendored version\nDESCRIPTION: Replaces usage of inspect.getfullargspec() with a vendored version to avoid future deprecation warnings. This change improves compatibility across different Python versions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Old code (removed):\n# inspect.getfullargspec()\n\n# New code:\n# (using vendored version of getfullargspec)\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Names from a Template Namespace\nDESCRIPTION: Demonstrates how to import specific function names from another template into the local namespace using the import attribute.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_5\n\nLANGUAGE: mako\nCODE:\n```\n<%namespace file=\"mystuff.html\" import=\"foo, bar\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding 'n' filter support in <%page> tag\nDESCRIPTION: Adds support for the 'n' filter in the <%page> tag, allowing templates to omit default expression filters throughout the entire template. This is useful for cases where a template-wide filter needs to have default filtering disabled.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_3\n\nLANGUAGE: Mako\nCODE:\n```\n<%page n_filter=\"h\">\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Namespace Elements\nDESCRIPTION: Shows how to import specific named definitions from another template file directly into the current template's namespace using the import attribute.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_2\n\nLANGUAGE: mako\nCODE:\n```\n<%namespace file=\"components.html\" import=\"comp1, comp2\"/>\n\nHeres comp1:  ${comp1()}\nHeres comp2:  ${comp2(x=5)}\n```\n\n----------------------------------------\n\nTITLE: Suppressing C4251 Warning in Visual Studio DLL\nDESCRIPTION: Visual Studio DLL: suppressed warning C4251 related to DLL interface using pragma directives in json-cpp headers.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/NEWS.txt#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#pragma push\n// C4251 warning suppression\n#pragma pop\n```\n\n----------------------------------------\n\nTITLE: Template Include Examples\nDESCRIPTION: Shows proper patterns for using <%include> with template inheritance using namespaces.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_8\n\nLANGUAGE: mako\nCODE:\n```\n## parent.mako\n<%namespace name=\"partials\" file=\"partials.mako\"/>\n<%block name=\"header\">\n    ${partials.header()}\n</%block>\n\n## child.mako\n<%inherit file=\"parent.mako\">\n<%block name=\"header\">\n    Custom Header\n</%block>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Lynx Documentation\nDESCRIPTION: This snippet defines the table of contents for the Lynx project documentation using reStructuredText syntax. It specifies a maximum depth of 2 and lists various topic files to be included in the documentation.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    usage\n    syntax\n    defs\n    runtime\n    namespaces\n    inheritance\n    filtering\n    unicode\n    caching\n    changelog\n```\n\n----------------------------------------\n\nTITLE: Using Python Expressions in Custom Tag Arguments\nDESCRIPTION: Demonstrates how to embed Python expressions as arguments in the custom tag format using the embedded expression syntax.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_7\n\nLANGUAGE: mako\nCODE:\n```\n<%mynamespace:somefunction arg1=\"${someobject.format()}\" arg2=\"${somedef(5, 12)}\"/>\n```\n\n----------------------------------------\n\nTITLE: Architecture Diagram - Lynx Shell Module Structure\nDESCRIPTION: ASCII diagram showing the hierarchical structure of the Lynx shell module, including the relationships between different layers and actors.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/core/shell/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+---------------------------------------------------------------------------+\n|                             LynxView (Platform Layer)                     |\n+--------------------------------------^------------------------------------+\n                                       |\n                                       v\n+---------------------------------------------------------------------------+\n|                         LynxShell (Shell Layer)                           |\n|                (Manages lifecycle, cross-thread comm, etc.)               |\n+----------+---------------+------------------+-------------------+---------+\n           |               |                  |                   |\n           v               v                  v                   v\n+----------------+  +---------------+  +----------------+  +----------------+\n|  NativeFacade  |  |  LynxEngine   |  | LayoutContext  |  |  LynxRuntime   |\n| (Platform-     |  | (Tasm-thread  |  | (Layout-thread |  | (JS-thread     |\n|  thread Actor) |  |     Actor)    |  |     Actor)     |  |     Actor)     |\n+------^---------+  +------^--------+  +------^---------+  +------^---------+\n                           |                  |                   |\n                           v                  v                   v\n                    +---------------+  +----------------+  +-----------------+\n                    |  TasmMediator |  | LayoutMediator |  | RuntimeMediator |\n                    |               |  |                |  |                 |\n                    |               |  |                |  |                 |\n                    +------^--------+  +------^---------+  +------^----------+\n```\n\n----------------------------------------\n\nTITLE: Using format_exceptions Flag with Mako Templates\nDESCRIPTION: Demonstrates using the format_exceptions flag when creating a Template object, which automatically substitutes any render-stage exceptions with html_error_template output.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntemplate = Template(filename=\"/foo/bar\", format_exceptions=True)\nprint(template.render())\n```\n\n----------------------------------------\n\nTITLE: Implementing LynxEngine Delegate and TasmMediator in C++\nDESCRIPTION: Implementation of the delegate inheritance structure and TasmMediator class for handling cross-thread communication.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/core/shell/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nclass LynxEngine {\n public:\n  class Delegate : public YourModule::Delegate {        \n  };\n};\n\nclass TasmMediator : public LynxEngine::Delegate {\n public:\n  void CallFunction() override;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Product Developers in package.json\nDESCRIPTION: Shows how to include @lynx-js/type-element-api as a dev dependency in a product project's package.json file.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/js_libraries/type-element-api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n  \"@lynx-js/type-element-api\": \"latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Decorator Function for Mako Def\nDESCRIPTION: Partial example showing the start of defining a decorator function for use with Mako def tags.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_12\n\nLANGUAGE: mako\nCODE:\n```\n<%!\n    def bar(fn):\n```\n\n----------------------------------------\n\nTITLE: Single Line Comments in Mako\nDESCRIPTION: Shows how to add single line comments in Mako templates using ##.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_6\n\nLANGUAGE: mako\nCODE:\n```\n## this is a comment.\n...text ...\n```\n\n----------------------------------------\n\nTITLE: Nested Blocks in Mako Child Template\nDESCRIPTION: Example of an inheriting template that overrides both header and title blocks, demonstrating parent block access.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_3\n\nLANGUAGE: mako\nCODE:\n```\n## index.html\n<%inherit file=\"base.html\"/>\n\n<%block name=\"header\">\n    this is some header content\n    ${parent.header()}\n</%block>\n\n<%block name=\"title\">\n    this is the title\n</%block>\n\nthis is the body content.\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Defs in Mako\nDESCRIPTION: Demonstrates defining a def with parameters and calling it with arguments, showing how defs follow normal Python parameter conventions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_3\n\nLANGUAGE: mako\nCODE:\n```\n${account(accountname='john')}\n\n<%def name=\"account(accountname, type='regular')\">\n    account name: ${accountname}, type: ${type}\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Configuring Beaker Cache Regions with Mako\nDESCRIPTION: Shows how to configure Beaker cache regions for Mako templates. This example creates two regions: 'short_term' using memory cache and 'long_term' using Memcached, each with different expiration times.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom beaker.cache import CacheManager\n\nmanager = CacheManager(cache_regions={\n    'short_term':{\n        'type': 'memory',\n        'expire': 60\n    },\n    'long_term':{\n        'type': 'ext:memcached',\n        'url': '127.0.0.1:11211',\n        'expire': 300\n    }\n})\n\nlookup = TemplateLookup(\n                directories=['/path/to/templates'],\n                module_directory='/path/to/modules',\n                cache_impl='beaker',\n                cache_args={\n                    'manager':manager\n                }\n        )\n```\n\n----------------------------------------\n\nTITLE: Locale Support Check Configuration\nDESCRIPTION: Performs various checks for locale support functionality including header files and struct members. Sets up different checks based on CMake version.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/lib_json/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_include_file_cxx(clocale HAVE_CLOCALE)\ncheck_cxx_symbol_exists(localeconv clocale HAVE_LOCALECONV)\n\nIF(CMAKE_VERSION VERSION_LESS 3.0.0)\n    check_include_file(locale.h HAVE_LOCALE_H)\n    SET(CMAKE_EXTRA_INCLUDE_FILES locale.h)\n    check_type_size(\"struct lconv\" LCONV_SIZE)\n    UNSET(CMAKE_EXTRA_INCLUDE_FILES)\n    check_struct_has_member(\"struct lconv\" decimal_point locale.h HAVE_DECIMAL_POINT)\nELSE()\n    SET(CMAKE_EXTRA_INCLUDE_FILES clocale)\n    check_type_size(lconv LCONV_SIZE LANGUAGE CXX)\n    UNSET(CMAKE_EXTRA_INCLUDE_FILES)\n    check_struct_has_member(lconv decimal_point clocale HAVE_DECIMAL_POINT LANGUAGE CXX)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Using the %call Syntax for Embedded Content\nDESCRIPTION: Demonstrates the older <%call> syntax for calling a def with embedded content, which is functionally equivalent to the <%self:defname> syntax.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_11\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"buildtable()\">\n    <table>\n        <tr><td>\n            ${caller.body()}\n        </td></tr>\n    </table>\n</%def>\n\n<%call expr=\"buildtable()\">\n    I am the table body.\n</%call>\n```\n\n----------------------------------------\n\nTITLE: Running Babel Extraction Command for Mako Templates\nDESCRIPTION: Shell command example showing how to invoke Babel's extraction tool to generate a gettext catalog from Mako templates with translator comments.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nmyproj$ pybabel extract -F babel.cfg -c \"TRANSLATORS:\" .\n```\n\n----------------------------------------\n\nTITLE: Importing and Calling Defs from Other Templates\nDESCRIPTION: Shows how to use <%namespace> to import defs from other template files and call them in the current template.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_4\n\nLANGUAGE: mako\nCODE:\n```\n<%namespace name=\"mystuff\" file=\"mystuff.html\"/>\n\n${mystuff.somedef(x=5,y=7)}\n```\n\n----------------------------------------\n\nTITLE: Calling Body Method with Arguments\nDESCRIPTION: Example of calling a template's body method with various arguments that match the signature defined in the <%page> tag.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_16\n\nLANGUAGE: mako\nCODE:\n```\n${self.body(5, y=10, someval=15, delta=7)}\n```\n\n----------------------------------------\n\nTITLE: Using Long-Term Cache Region in a Block\nDESCRIPTION: Shows how to apply a named cache region ('long_term') to a specific named block in a Mako template. The block will be cached according to the configuration of the specified region.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_7\n\nLANGUAGE: mako\nCODE:\n```\n<%block name=\"header\" cached=\"True\" cache_region=\"long_term\">\n    other text\n</%block>\n```\n\n----------------------------------------\n\nTITLE: Variable Scope Error in Mako Defs\nDESCRIPTION: Demonstrates an error case where a variable assignment inside a def makes it local to that scope, making the outer variable with the same name unreachable.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_9\n\nLANGUAGE: mako\nCODE:\n```\n<%\n    x = 10\n%>\n<%def name=\"somedef()\">\n    ## error !\n    somedef, x is ${x}\n    <%\n        x = 27\n    %>\n</%def>\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Mako Layout System\nDESCRIPTION: Shows the HTML output generated by the Mako layout system. This represents the rendered result of the layout template with header, sidebar, and content sections.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mainlayout\">\n    <div class=\"header\">\n    I am the header\n    </div>\n\n    <div class=\"sidebar\">\n    <ul>\n        <li>sidebar 1</li>\n        <li>sidebar 2</li>\n    </ul>\n    </div>\n\n    <div class=\"content\">\n    this is the body\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Reusing Named Blocks Multiple Times in Templates\nDESCRIPTION: Shows how named blocks can be reused multiple times within a template by calling them as functions. This allows for repeating the same content in different parts of the template.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_23\n\nLANGUAGE: mako\nCODE:\n```\n<div name=\"page\">\n    <%block name=\"pagecontrol\">\n        <a href=\"\">previous page</a> |\n        <a href=\"\">next page</a>\n    </%block>\n\n    <table>\n        ## some content\n    </table>\n\n    ${pagecontrol()}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Iterator Tag in Mako\nDESCRIPTION: Shows how to build a custom repeating tag that renders its body content multiple times based on a count parameter.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_12\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"lister(count)\">\n    % for x in range(count):\n        ${caller.body()}\n    % endfor\n</%def>\n\n<%self:lister count=\"${3}\">\n    hi\n</%self:lister>\n```\n\n----------------------------------------\n\nTITLE: Printing RTF Help Message in Command Line\nDESCRIPTION: Shows how to display the RTF help message using the command line interface. This provides information about available commands and options.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\nrtf -h\n```\n\n----------------------------------------\n\nTITLE: Block Tag in Mako\nDESCRIPTION: Illustrates the use of the <%block> tag for immediate execution and optional naming of code blocks in Mako.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_14\n\nLANGUAGE: mako\nCODE:\n```\n<%block filter=\"h\">\n    some <html> stuff.\n</%block>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Cache Data Storage in Mako\nDESCRIPTION: Demonstrates how to directly interact with a template's cache object to store arbitrary values. This example sets a value with key 'somekey' in a memory cache.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_8\n\nLANGUAGE: mako\nCODE:\n```\n<%\n    local.cache.set(\"somekey\", type=\"memory\", \"somevalue\")\n%>\n```\n\n----------------------------------------\n\nTITLE: Text Block for Documentation\nDESCRIPTION: Shows how to use the text tag to display Mako syntax as plain text, useful for documentation purposes.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_20\n\nLANGUAGE: mako\nCODE:\n```\n<%text filter=\"h\">\n    heres some fake mako ${syntax}\n    <%def name=\"x()\">${x}</%def>\n</%text>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Def in Mako Templates\nDESCRIPTION: A simple example of creating a <%def> tag with a name attribute that references a Python function signature. The def contains a 'hello world' message.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_0\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"hello()\">\n    hello world\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Dictionary Cache Plugin for Mako Templates in Python\nDESCRIPTION: This snippet demonstrates how to create a basic cache implementation plugin for Mako templates using a local dictionary. It implements the CacheImpl interface with methods for storing, retrieving, and invalidating cached template fragments, and shows how to register the plugin for use in templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.cache import Cacheimpl, register_plugin\n\nclass SimpleCacheImpl(CacheImpl):\n    def __init__(self, cache):\n        super(SimpleCacheImpl, self).__init__(cache)\n        self._cache = {}\n\n    def get_or_create(self, key, creation_function, **kw):\n        if key in self._cache:\n            return self._cache[key]\n        else:\n            self._cache[key] = value = creation_function()\n            return value\n\n    def set(self, key, value, **kwargs):\n        self._cache[key] = value\n\n    def get(self, key, **kwargs):\n        return self._cache.get(key)\n\n    def invalidate(self, key, **kwargs):\n        self._cache.pop(key, None)\n\n# optional - register the class locally\nregister_plugin(\"simple\", __name__, \"SimpleCacheImpl\")\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Mako Template Extraction\nDESCRIPTION: Example Babel configuration file (babel.cfg) that sets up extraction of gettext messages from both Python source files and Mako templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_16\n\nLANGUAGE: cfg\nCODE:\n```\n# Extraction from Python source files\n\n[python: myproj/**.py]\n\n# Extraction from Mako templates\n\n[mako: myproj/templates/**.html]\ninput_encoding = utf-8\n```\n\n----------------------------------------\n\nTITLE: Creating a Conan Package File for JsonCpp\nDESCRIPTION: This example demonstrates how to create a conanfile.txt for including JsonCpp in a project using the Conan package manager. It specifies the required version and generator.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n[requires]\njsoncpp/1.8.0@theirix/ci\n\n[generators]\ncmake\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Mako Template Decorator with Direct Context Writing\nDESCRIPTION: This snippet demonstrates a 'bar' decorator that adds 'BAR' before and after the content of a decorated function by writing directly to the context. The template function 'foo' is decorated with 'bar', and the result is rendered with the decorator's added content.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_13\n\nLANGUAGE: mako\nCODE:\n```\ndef decorate(context, *args, **kw):\n    context.write(\"BAR\")\n    fn(*args, **kw)\n    context.write(\"BAR\")\n    return ''\nreturn decorate\n\n<%def name=\"foo()\" decorator=\"bar\">\n    this is foo\n</%def>\n\n${foo()}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Defs in Mako\nDESCRIPTION: Illustrates how to define a <%def> inside another <%def>, following Python's closure rules where the inner def is declared within the parent's enclosing scope.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_7\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"mydef()\">\n    <%def name=\"subdef()\">\n        a sub def\n    </%def>\n\n    i'm the def, and the subcomponent is ${subdef()}\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Newline Filters in Mako\nDESCRIPTION: Shows how to use backslash to consume newline characters in Mako templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_8\n\nLANGUAGE: mako\nCODE:\n```\nhere is a line that goes onto \\\nanother line.\n```\n\n----------------------------------------\n\nTITLE: Installing Appium and Required Drivers\nDESCRIPTION: Demonstrates how to set up the Appium environment by installing Appium, appium-doctor for environment validation, and checking the installed drivers. It starts with environment preparation for Lynx.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/ENV_SETUP.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# First execute the environment preparation in the root directory of Lynx\nsource tools/envsetup.sh\ntools/hab sync -f .\n# Install Appium by npm\nnpm install -g appium@2.11.2\n# Install appium-doctor\nnpm install -g appium-doctor\n# Use appium-doctor to check if the environment is set up successfully.\nappium-doctor\n```\n\n----------------------------------------\n\nTITLE: Configuring GN Build for C++ Unit Tests in Lynx\nDESCRIPTION: This snippet shows how to configure the GN build system to include C++ unit test files for the Lynx project. It defines a unittest_set and unittest_exec for building and running tests.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/README_UT.md#2025-04-23_snippet_1\n\nLANGUAGE: GN\nCODE:\n```\nunittest_set(\"example_testset\") {\n  # ...\n  sources = [\n    # ....\n    \"hello_unittests.cc\",\n  ]\n  # ...\n}\n\nunittest_exec(\"example_unittest_exec\") {\n  deps = [ \":hello_testset\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Outer Scope Variables in Nested Defs\nDESCRIPTION: Shows how variables defined in outer scopes are accessible within nested defs, following Python's scoping rules.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_8\n\nLANGUAGE: mako\nCODE:\n```\n<%\n    x = 12\n%>\n<%def name=\"outer()\">\n    <%\n        y = 15\n    %>\n    <%def name=\"inner()\">\n        inner, x is ${x}, y is ${y}\n    </%def>\n\n    outer, x is ${x}, y is ${y}\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Accessing Module-Level Attributes via Namespace in Mako\nDESCRIPTION: Example demonstrating how to access module-level attributes defined in <%! %> sections through the namespace's attr accessor in Mako templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# somefile.html\n<%!\n    foo = 27\n%>\n\n# some other template\n<%namespace name=\"myns\" file=\"somefile.html\"/>\n${myns.attr.foo}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Lookup with Disabled Caching\nDESCRIPTION: Example of configuring a TemplateLookup with caching disabled. This disables all caching functionality when templates are rendered.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlookup = TemplateLookup(\n                directories='/path/to/templates',\n                cache_enabled = False\n                )\n```\n\n----------------------------------------\n\nTITLE: Installing JSON Header Files with CMake\nDESCRIPTION: This snippet uses CMake's FILE and INSTALL commands to gather all header files from the json directory and install them to the system's include directory. The FILE(GLOB) command creates a list of files matching the specified pattern, which is then used by the INSTALL command to copy them to the destination.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/include/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB INCLUDE_FILES \"json/*.h\")\nINSTALL(FILES ${INCLUDE_FILES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/json)\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build Unit Tests in CMake\nDESCRIPTION: Sets up post-build commands to run unit tests immediately after building, improving the development workflow. For shared library builds, it also copies the library to the test executable's directory to ensure it can be found at runtime on Windows.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/test_lib_json/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(JSONCPP_WITH_POST_BUILD_UNITTEST)\n    IF(BUILD_SHARED_LIBS)\n        # First, copy the shared lib, for Microsoft.\n        # Then, run the test executable.\n        ADD_CUSTOM_COMMAND( TARGET jsoncpp_test\n                            POST_BUILD\n                            COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:jsoncpp_lib> $<TARGET_FILE_DIR:jsoncpp_test>\n                            COMMAND $<TARGET_FILE:jsoncpp_test>)\n    ELSE(BUILD_SHARED_LIBS)\n        # Just run the test executable.\n        ADD_CUSTOM_COMMAND( TARGET jsoncpp_test\n                            POST_BUILD\n                            COMMAND $<TARGET_FILE:jsoncpp_test>)\n    ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including Implementation-Specific CMakeLists for Lynx Project\nDESCRIPTION: This snippet dynamically includes a CMakeLists file based on the build flavor, type, and Android ABI. It allows for flexible configuration depending on the build parameters.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/core/runtime/jsi/v8/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists_impl/${FLAVOR_NAME}${BUILD_TYPE}${ANDROID_ABI}/CMakeLists.txt)\n```\n\n----------------------------------------\n\nTITLE: Calling Namespace Functions with Expression Format\nDESCRIPTION: Demonstrates the standard expression format for calling a function from a namespace with various argument types.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_5\n\nLANGUAGE: mako\nCODE:\n```\n${mynamespace.somefunction('some arg1', 'some arg2', arg3='some arg3', arg4='some arg4')}\n```\n\n----------------------------------------\n\nTITLE: Running Git Lynx Code Formatter\nDESCRIPTION: Command to automatically format code using the Git Lynx tool when coding style checks fail. The tool only checks changes that have been committed.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit lynx format\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching with Mako Blocks\nDESCRIPTION: Shows how to apply caching directives to a Mako block. This example sets the block to be cached for 60 seconds, which can improve performance for expensive content generation.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_19\n\nLANGUAGE: mako\nCODE:\n```\n<html>\n    <body>\n        <%block cached=\"True\" cache_timeout=\"60\">\n            This content will be cached for 60 seconds.\n        </%block>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonCpp Test Runner Executable in CMake\nDESCRIPTION: Creates an executable target named 'jsontestrunner_exe' from main.cpp source file and links it with either the shared or static JsonCpp library based on the BUILD_SHARED_LIBS option.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/jsontestrunner/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_EXECUTABLE(jsontestrunner_exe\n               main.cpp\n               )\n\nIF(BUILD_SHARED_LIBS)\n    ADD_DEFINITIONS( -DJSON_DLL )\n    TARGET_LINK_LIBRARIES(jsontestrunner_exe jsoncpp_lib)\nELSE(BUILD_SHARED_LIBS)\n    TARGET_LINK_LIBRARIES(jsontestrunner_exe jsoncpp_lib_static)\nENDIF()\n\nSET_TARGET_PROPERTIES(jsontestrunner_exe PROPERTIES OUTPUT_NAME jsontestrunner_exe)\n```\n\n----------------------------------------\n\nTITLE: Installing PyJSON5 Development Dependencies\nDESCRIPTION: Command to install development dependencies for running tests using pip in a virtual environment.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/pyjson5/src/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -e '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Dynamic Namespace File Reference\nDESCRIPTION: Shows how to use a dynamic expression to determine the file to import as a namespace, requiring explicit context reference.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_4\n\nLANGUAGE: mako\nCODE:\n```\n<%namespace name=\"dyn\" file=\"${context['namespace_name']}\"/>\n```\n\n----------------------------------------\n\nTITLE: Checking Installed Appium Drivers\nDESCRIPTION: Shows how to check the currently installed Appium drivers, which should include xcuitest, uiautomator2, and espresso drivers for testing iOS and Android applications.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/ENV_SETUP.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappium driver list --installed\n✔ Listing installed drivers\n- xcuitest@7.24.18 [installed (npm)]\n- uiautomator2@3.7.7 [installed (npm)]\n- espresso@3.3.1 [installed (npm)]\n```\n\n----------------------------------------\n\nTITLE: Defining JSON_NO_INT64 Macro for Disabling 64-bit Integer Support\nDESCRIPTION: Support for 64-bit integers can be disabled by defining the JSON_NO_INT64 macro, typically in json/config.h.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/NEWS.txt#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// Uncomment to disable 64-bit integer support\n// #define JSON_NO_INT64\n```\n\n----------------------------------------\n\nTITLE: Configuring Double-Conversion Library Build with CMake\nDESCRIPTION: Sets up the build configuration for the double-conversion library. It specifies the minimum CMake version required, defines the project name and version, lists header files, adds source files to create a static library, and sets up include directories.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/double-conversion/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(double-conversion VERSION 3.2.0)\n\nset(headers\n    double-conversion/bignum.h\n    double-conversion/cached-powers.h\n    double-conversion/diy-fp.h\n    double-conversion/double-conversion.h\n    double-conversion/double-to-string.h\n    double-conversion/fast-dtoa.h\n    double-conversion/fixed-dtoa.h\n    double-conversion/ieee.h\n    double-conversion/string-to-double.h\n    double-conversion/strtod.h\n    double-conversion/utils.h)\n\nadd_library(double-conversion\n            STATIC\n            double-conversion/bignum.cc\n            double-conversion/bignum-dtoa.cc\n            double-conversion/cached-powers.cc\n            double-conversion/double-to-string.cc\n            double-conversion/fast-dtoa.cc\n            double-conversion/fixed-dtoa.cc\n            double-conversion/string-to-double.cc\n            double-conversion/strtod.cc\n            ${headers})\n\ninclude_directories(\n    ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining the GN Test Shared Library\nDESCRIPTION: Creates the main shared library target 'gn_test' and includes object files from other targets. This assembles the final library from multiple components.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Main target\nadd_library(gn_test SHARED\n  \n  $<TARGET_OBJECTS:lynx__tools__gn_tools__test_cmake_test>\n  \n  $<TARGET_OBJECTS:lynx__tools__gn_tools__test_gn_test_source>\n  )\n```\n\n----------------------------------------\n\nTITLE: Dynamic Variable Setting in CMake\nDESCRIPTION: A helper function for setting a variable by name at runtime in CMake. Takes a variable name and value as parameters and sets the variable in the parent scope. Used by the version parser to set dynamic variable names.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFUNCTION(set_using_dynamic_name VAR_NAME VALUE)\n    SET( \"${VAR_NAME}\" \"${VALUE}\" PARENT_SCOPE)\nENDFUNCTION()\n```\n\n----------------------------------------\n\nTITLE: Python Function for Mako Namespace\nDESCRIPTION: Defines a Python function in a module that can be imported into a Mako template as a namespace function. It requires a context parameter that provides access to template operations.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef my_tag(context):\n    context.write(\"hello world\")\n    return ''\n```\n\n----------------------------------------\n\nTITLE: Compiler Warning Configuration in CMake\nDESCRIPTION: A macro that configures compiler flags to treat warnings as errors. Handles different compilers (MSVC and GCC) with appropriate flags. For MSVC, it only enables warnings as errors in debug mode due to STL limitations in older versions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nMACRO(UseCompilationWarningAsError)\n    IF(MSVC)\n        # Only enabled in debug because some old versions of VS STL generate\n        # warnings when compiled in release configuration.\n        SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /WX \")\n    ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror\")\n        IF(JSONCPP_WITH_STRICT_ISO)\n            SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic-errors\")\n        ENDIF()\n    ENDIF()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Defining Template Components with Mako Defs\nDESCRIPTION: Example of creating reusable components in a components.html file using Mako defs that can be imported into other templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_0\n\nLANGUAGE: mako\nCODE:\n```\n## components.html\n<%def name=\"comp1()\">\n    this is comp1\n</%def>\n\n<%def name=\"comp2(x)\">\n    this is comp2, x is ${x}\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonCpp Test Executable in CMake\nDESCRIPTION: Defines the jsoncpp_test executable and its source files. This is the main test suite configuration for the JsonCpp library.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/test_lib_json/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE( jsoncpp_test \n                jsontest.cpp\n                jsontest.h\n                main.cpp\n                )\n```\n\n----------------------------------------\n\nTITLE: Defining Copy Targets for GN Tools Tests\nDESCRIPTION: Sets up custom commands and targets for copying directories, files, and performing custom actions in the GN tools test suite.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(copy_target \n  lynx__tools__gn_tools__test_copy_test_dirs_to_dir\n  )\n\nset(${copy_target}__sources\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/copy/dirs/to/dir/sources1\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/copy/dirs/to/dir/sources2\n  )\n\nset(${copy_target}__output\n  ${ROOT_PATH}/out/gn_cmake_test/gen/lynx/tools/gn_tools/test/sources1\n  ${ROOT_PATH}/out/gn_cmake_test/gen/lynx/tools/gn_tools/test/sources2\n  )\n\nadd_custom_command(OUTPUT ${${copy_target}__output}\n  COMMAND ${CMAKE_COMMAND} -E make_directory \"${ROOT_PATH}/out/gn_cmake_test/gen/lynx/tools/gn_tools/test\"\n  COMMAND python3 \"${ROOT_PATH}/lynx/tools/gn_tools/copy_files.py\"\n    \"--sources\"\n    \"${ROOT_PATH}/lynx/tools/gn_tools/test/copy/dirs/to/dir/sources1\"\n    \"${ROOT_PATH}/lynx/tools/gn_tools/test/copy/dirs/to/dir/sources2\"\n    \"--destinations\"\n    \"${ROOT_PATH}/out/gn_cmake_test/gen/lynx/tools/gn_tools/test/sources1\"\n    \"${ROOT_PATH}/out/gn_cmake_test/gen/lynx/tools/gn_tools/test/sources2\"\n  DEPENDS  ${${copy_target}__sources}\n  WORKING_DIRECTORY \"${ROOT_PATH}/out/gn_cmake_test/\"\n  COMMENT \"copy: ${copy_target}\"\n  VERBATIM)\nadd_custom_target(${copy_target} SOURCES ${${copy_target}__sources} DEPENDS ${${copy_target}__output})\n\nadd_dependencies(\"${copy_target}\"\n  \"lynx__tools__gn_tools__test_copy_test_files_to_dir\")\n```\n\n----------------------------------------\n\nTITLE: Defining Page Arguments for Body Method\nDESCRIPTION: Shows how to define explicit arguments for a template's body method using the <%page> tag, allowing parameters to be passed to the template.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_15\n\nLANGUAGE: mako\nCODE:\n```\n<%page args=\"x, y, someval=8, scope='foo', **kwargs\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting ANDROID_HOME environment variable\nDESCRIPTION: Bash command to set the ANDROID_HOME environment variable for Android SDK location.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_HOME=<path-to-android-sdk>\n```\n\n----------------------------------------\n\nTITLE: Defining Version Macros in C++ Header\nDESCRIPTION: New header json/version.h introduced to contain version number macros for JsonCpp.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/NEWS.txt#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nJSONCPP_VERSION_MAJOR\nJSONCPP_VERSION_MINOR\nJSONCPP_VERSION_PATCH\nJSONCPP_VERSION_HEXA\n```\n\n----------------------------------------\n\nTITLE: Defining Library Target for CMake Test\nDESCRIPTION: Creates a library target for CMake testing with specific compile definitions, include directories, and compile options.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(lynx__tools__gn_tools__test_cmake_test OBJECT EXCLUDE_FROM_ALL\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/gn_test_shared.cc\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/gn_test_shared.h\n  )\n\ntarget_compile_definitions(lynx__tools__gn_tools__test_cmake_test PRIVATE\n  GN_TESTING_DEFINE=1\n  USE_OPENSSL=1\n  _DEBUG\n  _FILE_OFFSET_BITS=64\n  _GLIBCXX_DEBUG=1\n  _LARGEFILE64_SOURCE\n  _LARGEFILE_SOURCE\n  _LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS\n  _LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS\n  __STDC_CONSTANT_MACROS\n  __STDC_FORMAT_MACROS\n  )\n\ntarget_include_directories(lynx__tools__gn_tools__test_cmake_test PRIVATE\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/\n  ${ROOT_PATH}/\n  ${ROOT_PATH}/lynx/\n  ${ROOT_PATH}/out/gn_cmake_test/gen/\n  )\n\ntarget_compile_options(lynx__tools__gn_tools__test_cmake_test PRIVATE\n  $<$<COMPILE_LANGUAGE:ASM>: \"SHELL:-fno-strict-aliasing -fstack-protector --param=ssp-buffer-size=4 -m64 -march=x86-64 -fPIC -pipe -pthread -fcolor-diagnostics\" >\n  )\n\ntarget_compile_options(lynx__tools__gn_tools__test_cmake_test PRIVATE\n  $<$<COMPILE_LANGUAGE:C>: \"SHELL:-fvisibility=hidden -fvisibility-inlines-hidden -fno-strict-aliasing -fstack-protector --param=ssp-buffer-size=4 -m64 -march=x86-64 -fPIC -pipe -pthread -fcolor-diagnostics -Wall -Wextra -Wendif-labels -Werror -Wno-missing-field-initializers -Wno-unused-parameter -Wno-vla-extension -Wno-unused-but-set-parameter -Wno-unused-but-set-variable -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-deprecated-copy -Wno-psabi -Wno-deprecated-non-prototype -Wno-enum-constexpr-conversion -Wno-unqualified-std-cast-call -Wno-non-c-typedef-for-linkage -Wno-range-loop-construct -fvisibility=hidden -Wstring-conversion -Wnewline-eof -O0 -g2\" >\n  )\n\ntarget_compile_options(lynx__tools__gn_tools__test_cmake_test PRIVATE\n  $<$<COMPILE_LANGUAGE:CXX>: \"SHELL:-fvisibility=hidden -fvisibility-inlines-hidden -fno-strict-aliasing -fstack-protector --param=ssp-buffer-size=4 -m64 -march=x86-64 -fPIC -pipe -pthread -fcolor-diagnostics -Wall -Wextra -Wendif-labels -Werror -Wno-missing-field-initializers -Wno-unused-parameter -Wno-vla-extension -Wno-unused-but-set-parameter -Wno-unused-but-set-variable -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-deprecated-copy -Wno-psabi -Wno-deprecated-non-prototype -Wno-enum-constexpr-conversion -Wno-unqualified-std-cast-call -Wno-non-c-typedef-for-linkage -Wno-range-loop-construct -fvisibility=hidden -Wstring-conversion -Wnewline-eof -O0 -g2 -fvisibility-inlines-hidden -std=c++17 -fno-rtti -stdlib=libstdc++\" >\n  )\n\nadd_dependencies(lynx__tools__gn_tools__test_cmake_test\n  lynx__tools__gn_tools__test_action_foreach_test\n  lynx__tools__gn_tools__test_copy_test_dirs_to_dir\n  lynx__tools__gn_tools__test_copy_test_file_to_file\n  lynx__tools__gn_tools__test_copy_test_files_to_dir\n  lynx__tools__gn_tools__test_gn_test_action\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Up iOS Unit Test Environment for Lynx\nDESCRIPTION: These Bash commands demonstrate how to initialize the environment, sync dependencies, and generate the Xcode workspace for running iOS unit tests in the Lynx project.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/README_UT.md#2025-04-23_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nsource tools/envsetup.sh\ntools/hab sync .\n```\n\nLANGUAGE: Bash\nCODE:\n```\ncd explorer/darwin/ios/LynxExplorer\n./bundle_install.sh\nopen LynxExplorer.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring JAVA_HOME on MacOS\nDESCRIPTION: Bash commands to set JAVA_HOME environment variable and update PATH for JDK 11 on MacOS.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Managing Static Dependencies Using Named Definitions in Mako\nDESCRIPTION: Shows an alternative approach using named template definitions to manage static includes. The base template looks for specific def names to include static dependencies.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_20\n\nLANGUAGE: mako\nCODE:\n```\n## base.mako\n## base-most template, renders layout etc.\n<html>\n<head>\n## traverse through all namespaces present,\n## look for a %def named 'includes'\n% for ns in context.namespaces.values():\n    % if hasattr(ns, 'includes'):\n        ${ns.includes()}\n    % endif\n% endfor\n</head>\n<body>\n${next.body()}\n</body\n</html>\n\n## library.mako\n## library functions.\n\n<%def name=\"includes()\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\"/>\n    <script type=\"text/javascript\" src=\"functions.js\"></script>\n</%def>\n\n<%def name=\"mytag()\">\n    <form>\n        ${caller.body()}\n    </form>\n</%def>\n\n\n## index.mako\n## calling template.\n<%inherit file=\"base.mako\"/>\n<%namespace name=\"foo\" file=\"library.mako\"/>\n\n<%foo:mytag>\n    a form\n</%foo:mytag>\n```\n\n----------------------------------------\n\nTITLE: Setting Android SDK Environment Variable\nDESCRIPTION: Shows how to set the ANDROID_SDK_ROOT environment variable, which is required for Android test execution with Appium.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/ENV_SETUP.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_SDK_ROOT=<path-to-android-sdk>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Lynx repository\nDESCRIPTION: Git command to clone the Lynx repository into a specific directory structure.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/lynx-family/lynx.git src/lynx\n```\n\n----------------------------------------\n\nTITLE: Defining GN Test Source Library\nDESCRIPTION: Creates a library target for GN test sources with specific compile definitions and include directories.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(lynx__tools__gn_tools__test_gn_test_source OBJECT EXCLUDE_FROM_ALL\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/gn_test_source.cc\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/gn_test_source.h\n  )\n\ntarget_compile_definitions(lynx__tools__gn_tools__test_gn_test_source PRIVATE\n  USE_OPENSSL=1\n  _DEBUG\n  _FILE_OFFSET_BITS=64\n  _GLIBCXX_DEBUG=1\n  _LARGEFILE64_SOURCE\n  _LARGEFILE_SOURCE\n  _LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS\n  _LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS\n  __STDC_CONSTANT_MACROS\n  __STDC_FORMAT_MACROS\n  )\n\ntarget_include_directories(lynx__tools__gn_tools__test_gn_test_source PRIVATE\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/\n  ${ROOT_PATH}/\n  ${ROOT_PATH}/lynx/\n  ${ROOT_PATH}/out/gn_cmake_test/gen/\n  )\n```\n\n----------------------------------------\n\nTITLE: Resigning Android APK with Espresso Keys\nDESCRIPTION: Command for resigning an Android APK using the Espresso test key, which is necessary for Espresso driver compatibility.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/ENV_SETUP.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava -jar $ANDROID_SDK_ROOT/build-tools/34.0.0/lib/apksigner.jar sign --key $HOME/.appium/node_modules/appium-espresso-driver/node_modules/appium-adb/keys/testkey.pk8 --cert $HOME/.appium/node_modules/appium-espresso-driver/node_modules/appium-adb/keys/testkey.x509.pem  --out <target-apk-path> <origin-apk-path>\n```\n\n----------------------------------------\n\nTITLE: Custom Namespace Tag Definition\nDESCRIPTION: Shows how to create and use custom namespace-based tags with parameters and body content.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_18\n\nLANGUAGE: mako\nCODE:\n```\n<%mynamespace:somedef param=\"some value\">\n    this is the body\n</%mynamespace:somedef>\n```\n\n----------------------------------------\n\nTITLE: Starting Appium Server\nDESCRIPTION: Command to start the Appium server on port 4723, which must remain running throughout the test execution process.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/integration_test/ENV_SETUP.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nappium --port 4723\n# The Appium process is a persistent process and needs to be retained throughout the execution of test cases.\n```\n\n----------------------------------------\n\nTITLE: Mako Template with Ineffective Translator Comments\nDESCRIPTION: Example showing a Mako template where translator comments would not be extracted by Babel because they don't immediately precede the gettext message.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_19\n\nLANGUAGE: mako\nCODE:\n```\n<div id=\"name\">\n  ## TRANSLATORS: This is a proper name. See the gettext\n  ## manual, section Names.\n  Name: ${_('Francois Pinard')}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version and Language Support\nDESCRIPTION: Sets the minimum required CMake version to 3.4.1 and enables Assembly language support.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nenable_language(ASM)\n```\n\n----------------------------------------\n\nTITLE: YAML with Extension Tag for TypeScript-Only Generation\nDESCRIPTION: Example of using the x-ts-only extension tag to generate TypeScript files exclusively, without producing scripts for other languages.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/performance/performance_observer/definition_yaml_files/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# NewEntry.yml\nNewEntry:\n  x-ts-only: true\n  allOf:\n    - $ref: 'PerformanceEntry.yml#/PerformanceEntry'\n    - type: object\n      properties:\n        propName:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Installing Python and PyYAML on Linux using pyenv\nDESCRIPTION: Commands to install Python 3.9 or higher using pyenv and install the PyYAML package on Linux.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npyenv install 3.9 # or higher\npyenv global 3.9 # or higher\npip3 install pyyaml\n```\n\n----------------------------------------\n\nTITLE: Multiline Comments in Mako\nDESCRIPTION: Demonstrates the use of the doc tag for multiline comments in templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_19\n\nLANGUAGE: mako\nCODE:\n```\n<%doc>\n    these are comments\n    more comments\n</%doc>\n```\n\n----------------------------------------\n\nTITLE: Installing JDK 11 on RHEL/CentOS\nDESCRIPTION: Command to install OpenJDK 11 on RHEL or CentOS Linux distributions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install openjdk-11-jdk\n```\n\n----------------------------------------\n\nTITLE: Accessing Implementation-Specific Cache Methods\nDESCRIPTION: Example of accessing the underlying cache implementation object to use implementation-specific methods. This approach limits portability if you change cache backends later.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntemplate.cache.impl.do_something_special()\n```\n\n----------------------------------------\n\nTITLE: Setting C Compile Options for GN Test Source\nDESCRIPTION: Configures C language compiler options for the GN test source target. Includes optimization flags, warning configurations, and debug settings specific to C compilation.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(lynx__tools__gn_tools__test_gn_test_source PRIVATE\n  $<$<COMPILE_LANGUAGE:C>: \"SHELL:-fno-strict-aliasing -fstack-protector --param=ssp-buffer-size=4 -m64 -march=x86-64 -fPIC -pipe -pthread -fcolor-diagnostics -Wall -Wextra -Wendif-labels -Werror -Wno-missing-field-initializers -Wno-unused-parameter -Wno-vla-extension -Wno-unused-but-set-parameter -Wno-unused-but-set-variable -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-deprecated-copy -Wno-psabi -Wno-deprecated-non-prototype -Wno-enum-constexpr-conversion -Wno-unqualified-std-cast-call -Wno-non-c-typedef-for-linkage -Wno-range-loop-construct -fvisibility=hidden -Wstring-conversion -Wnewline-eof -O0 -g2\" >\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing LynxExplorer APK using ADB\nDESCRIPTION: ADB command to install the compiled LynxExplorer APK on a connected Android device.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nadb install lynx_explorer/build/outputs/apk/noasan/debug/LynxExplorer-noasan-debug.apk\n```\n\n----------------------------------------\n\nTITLE: Complex Expression Evaluation in Mako\nDESCRIPTION: Shows how full Python expressions can be evaluated within ${} tags in Mako templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_1\n\nLANGUAGE: mako\nCODE:\n```\npythagorean theorem:  ${pow(x,2) + pow(y,2)}\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Nested Loop Example\nDESCRIPTION: Shows the rendered HTML output from the nested loop example, with alternating cell colors based on parent and child loop indices.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <td class=\"black\">\n      pit\n    </td>\n    <td class=\"red\">\n      pot\n    </td>\n    <td class=\"black\">\n      put\n    </td>\n  </tr>\n  <tr>\n    <td class=\"red\">\n      bit\n    </td>\n    <td class=\"black\">\n      bot\n    </td>\n    <td class=\"red\">\n      but\n    </td>\n  </tr>\n  <tr>\n    <td class=\"black\">\n      jit\n    </td>\n    <td class=\"red\">\n      jot\n    </td>\n    <td class=\"black\">\n      jut\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Python Function with Output Capture\nDESCRIPTION: Shows a Python function that captures the output of the caller's body with arguments, using the capture function to process embedded content.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.runtime import supports_caller, capture\n\n@supports_caller\ndef my_tag(context):\n    return \"<div>%s</div>\" % \\\n            capture(context, context['caller'].body, x=\"foo\", y=\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Commented Fix for Issue #90 in JsonCpp\nDESCRIPTION: A commented-out solution for issue #90, which appears to be related to floating-point precision. The fix would apply a specific compiler flag to the target.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/test_lib_json/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# another way to solve issue #90\n#set_target_properties(jsoncpp_test PROPERTIES COMPILE_FLAGS -ffloat-store)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mako Template Engine Entry Points\nDESCRIPTION: Configuration defining various Mako template engine integrations including syntax highlighting lexers, translation extractors, and command-line tools. Sets up Mako integration with TurboGears, Pygments, Babel, and Lingua frameworks.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/Mako.egg-info/entry_points.txt#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[python.templating.engines]\nmako = mako.ext.turbogears:TGPlugin\n\n[pygments.lexers]\nmako = mako.ext.pygmentplugin:MakoLexer\nhtml+mako = mako.ext.pygmentplugin:MakoHtmlLexer\nxml+mako = mako.ext.pygmentplugin:MakoXmlLexer\njs+mako = mako.ext.pygmentplugin:MakoJavascriptLexer\ncss+mako = mako.ext.pygmentplugin:MakoCssLexer\n\n[babel.extractors]\nmako = mako.ext.babelplugin:extract [babel]\n\n[lingua.extractors]\nmako = mako.ext.linguaplugin:LinguaMakoExtractor [lingua]\n\n[console_scripts]\nmako-render = mako.cmd:cmdline\n```\n\n----------------------------------------\n\nTITLE: Setting up the Lynx build environment\nDESCRIPTION: Commands to navigate to the Lynx directory, set up the environment, and sync dependencies.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd src/lynx\nsource tools/envsetup.sh\ntools/hab sync .\n```\n\n----------------------------------------\n\nTITLE: Basic Template Caching with Mako\nDESCRIPTION: Demonstrates how to enable caching for an entire template using the cache flag in the <%page> directive. The template will store its content in memory and return cached content on subsequent renders.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_0\n\nLANGUAGE: mako\nCODE:\n```\n<%page cached=\"True\"/>\n\ntemplate text\n```\n\n----------------------------------------\n\nTITLE: Python Extra Arguments Collection\nDESCRIPTION: Example showing the syntax for collecting extra keyword arguments in setup.py\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\\**extra\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Main GN Test Library\nDESCRIPTION: Defines build dependencies for the main 'gn_test' library. Ensures all required components are built before the main library is linked.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(gn_test\n  lynx__tools__gn_tools__test_action_foreach_test\n  lynx__tools__gn_tools__test_copy_test_dirs_to_dir\n  lynx__tools__gn_tools__test_copy_test_file_to_file\n  lynx__tools__gn_tools__test_copy_test_files_to_dir\n  lynx__tools__gn_tools__test_gn_test_action\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenLynx Client URL Structure\nDESCRIPTION: This snippet shows the URL structure for connecting to an OpenLynx server. It specifies the format with optional authentication credentials in the URL.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/core/options/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlynx://domain:port/path#fragment?options=value\n```\n\n----------------------------------------\n\nTITLE: Adding GN Test Subdirectory\nDESCRIPTION: Adds a subdirectory to the build process for additional GN test components. Specifies both the source directory and binary directory for the build.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# subdirectory\nadd_subdirectory(${ROOT_PATH}/lynx/tools/gn_tools/test \n  gn_test_cmake\n  )\n```\n\n----------------------------------------\n\nTITLE: Cached Template Definition in Mako\nDESCRIPTION: Shows how to cache a specific template component defined with <%def> tag. This example caches the 'mycomp' component for 60 seconds before requiring regeneration.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_1\n\nLANGUAGE: mako\nCODE:\n```\n<%def name=\"mycomp\" cached=\"True\" cache_timeout=\"60\">\n    other text\n</%def>\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonCpp Build Directories in CMake\nDESCRIPTION: This CMake script configures the build structure for the JsonCpp project. It adds the main library directory and conditionally includes test directories when the JSONCPP_WITH_TESTS flag is enabled.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(lib_json)\nIF(JSONCPP_WITH_TESTS)\n    ADD_SUBDIRECTORY(jsontestrunner)\n    ADD_SUBDIRECTORY(test_lib_json)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Linkage Based on Build Type in CMake\nDESCRIPTION: Conditional logic to link against either the shared (jsoncpp_lib) or static (jsoncpp_lib_static) version of the JsonCpp library based on the BUILD_SHARED_LIBS variable. When building shared libraries, it also adds the JSON_DLL definition.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/test_lib_json/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(BUILD_SHARED_LIBS)\n    ADD_DEFINITIONS( -DJSON_DLL )\n    TARGET_LINK_LIBRARIES(jsoncpp_test jsoncpp_lib)\nELSE(BUILD_SHARED_LIBS)\n    TARGET_LINK_LIBRARIES(jsoncpp_test jsoncpp_lib_static)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenLynx Client Authentication in URL\nDESCRIPTION: This snippet demonstrates how to include authentication credentials (username and password) in an OpenLynx connection URL.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/core/options/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nlynx://username:password@domain:port\n```\n\n----------------------------------------\n\nTITLE: Lynx Project Copyright Header and Generation Notice\nDESCRIPTION: Standard copyright header indicating Lynx Authors ownership and Apache License 2.0 terms, along with template generation metadata and formatting directives.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/templates/lynx_copyright_block.txt#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Copyright 2021 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n\n// This file has been auto-generated from the Jinja2 template\n// {{jinja_template_filename}}\n// by the script {{code_generator}}.\n// DO NOT MODIFY!\n\n// clang-format off\n```\n\n----------------------------------------\n\nTITLE: Adding ADB to PATH\nDESCRIPTION: Bash command to add the ADB tool to the system PATH for easier access.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/explorer/android/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=${PATH}:${ANDROID_HOME}/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Enabling a Cache Plugin in a Mako Template\nDESCRIPTION: This snippet shows how to enable a custom cache plugin when initializing a Mako Template. The 'cache_impl' parameter is used to specify which registered plugin to use for caching template fragments.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/caching.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nt = Template(\"mytemplate\",\n             file=\"mytemplate.html\",\n             cache_impl='simple')\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Compile Options for GN Test Source\nDESCRIPTION: Configures C++ language compiler options for the GN test source target. Includes C++17 standard specification, warning configurations, and optimization flags specific to C++ compilation.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(lynx__tools__gn_tools__test_gn_test_source PRIVATE\n  $<$<COMPILE_LANGUAGE:CXX>: \"SHELL:-fno-strict-aliasing -fstack-protector --param=ssp-buffer-size=4 -m64 -march=x86-64 -fPIC -pipe -pthread -fcolor-diagnostics -Wall -Wextra -Wendif-labels -Werror -Wno-missing-field-initializers -Wno-unused-parameter -Wno-vla-extension -Wno-unused-but-set-parameter -Wno-unused-but-set-variable -Wno-implicit-int-float-conversion -Wno-c99-designator -Wno-deprecated-copy -Wno-psabi -Wno-deprecated-non-prototype -Wno-enum-constexpr-conversion -Wno-unqualified-std-cast-call -Wno-non-c-typedef-for-linkage -Wno-range-loop-construct -fvisibility=hidden -Wstring-conversion -Wnewline-eof -O0 -g2 -fvisibility-inlines-hidden -std=c++17 -fno-rtti -stdlib=libstdc++\" >\n  )\n```\n\n----------------------------------------\n\nTITLE: Running PyJSON5 Tests\nDESCRIPTION: Command to execute the test suite using Python's setup tools.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/pyjson5/src/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython setup.py test\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode in OpenLynx Client\nDESCRIPTION: This snippet shows how to enable debug mode with different verbosity levels when connecting to an OpenLynx server.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/core/options/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nlynx://domain:port?debug=1\n```\n\n----------------------------------------\n\nTITLE: Replacing time.clock() with timeit.default_timer() for Python 3.8 compatibility\nDESCRIPTION: Replaces usage of time.clock() on Windows and time.time() elsewhere with timeit.default_timer() for microsecond timestamps. This change was made because time.clock() is being removed in Python 3.8.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Old code (removed):\n# time.clock() on Windows\n# time.time() elsewhere\n\n# New code:\ntimeit.default_timer()\n```\n\n----------------------------------------\n\nTITLE: Writing to Context Buffer in Mako\nDESCRIPTION: Demonstrates how to programmatically write content to the output stream within a Mako template using the context.write() method.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_0\n\nLANGUAGE: mako\nCODE:\n```\n<%\n    context.write(\"some programmatic text\")\n%>\n```\n\n----------------------------------------\n\nTITLE: Linking External Libraries to GN Test\nDESCRIPTION: Links required external libraries to the GN test shared library. Includes Android-specific libraries and system libraries needed for proper functionality.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(gn_test\n  android\n  dl\n  gcc\n  gn_test_sub\n  jnigraphics\n  log\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting OpenLynx Client Window Size\nDESCRIPTION: This snippet shows how to configure the initial window size (width and height) when launching an OpenLynx client.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/core/options/README.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nlynx://domain:port?window.size.width=<number>&window.size.height=<number>\n```\n\n----------------------------------------\n\nTITLE: Applying URL Escaping Filter in Mako Expression\nDESCRIPTION: Demonstrates using the 'u' filter to apply URL escaping to a Mako expression output.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_0\n\nLANGUAGE: mako\nCODE:\n```\n${\"this is some text\" | u}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Loop Context in Mako Templates\nDESCRIPTION: Demonstrates how to access parent loop context using loop.parent in nested loops to create a checkered table pattern based on whether the parent and child loop indices are both even or both odd.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_6\n\nLANGUAGE: mako\nCODE:\n```\n<table>\n% for consonant in 'pbj':\n  <tr>\n  % for vowel in 'iou':\n    <td class=\"${('black' if (loop.parent.even == loop.even) else 'red')}\">\n      ${consonant + vowel}t\n    </td>\n  % endfor\n  </tr>\n% endfor\n</table>\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to GN Test Source\nDESCRIPTION: Defines the build dependencies for the GN test source target. These dependencies ensure prerequisite components are built before the main target.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(lynx__tools__gn_tools__test_gn_test_source\n  lynx__tools__gn_tools__test_action_foreach_test\n  lynx__tools__gn_tools__test_copy_test_dirs_to_dir\n  lynx__tools__gn_tools__test_copy_test_file_to_file\n  lynx__tools__gn_tools__test_copy_test_files_to_dir\n  lynx__tools__gn_tools__test_gn_test_action\n  )\n```\n\n----------------------------------------\n\nTITLE: YAML Syntax for Referencing Complex Object Types\nDESCRIPTION: Shows how to reference more complex object types in YAML using the $ref keyword.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/performance/performance_observer/definition_yaml_files/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname:\n    $ref: 'ReferenceObject.yml#/ReferenceObject'\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Encoding for Templates\nDESCRIPTION: Demonstrates setting up output encoding and error handling for template rendering.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/unicode.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom mako.template import Template\nfrom mako.lookup import TemplateLookup\n\nmylookup = TemplateLookup(directories=['/docs'], output_encoding='utf-8', encoding_errors='replace')\n\nmytemplate = mylookup.get_template(\"foo.txt\")\nprint(mytemplate.render())\n```\n\n----------------------------------------\n\nTITLE: Setting ASM Compile Options for GN Test Source\nDESCRIPTION: Configures assembly language compiler options for the GN test source. Includes various optimization and security flags like stack protection and architecture-specific settings.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n$<$<COMPILE_LANGUAGE:ASM>: \"SHELL:-fno-strict-aliasing -fstack-protector --param=ssp-buffer-size=4 -m64 -march=x86-64 -fPIC -pipe -pthread -fcolor-diagnostics\" >\n```\n\n----------------------------------------\n\nTITLE: YAML Syntax for Defining Basic Data Types\nDESCRIPTION: Demonstrates how to define basic data types like number, string, and map in YAML for PerformanceEntry properties.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/performance/performance_observer/definition_yaml_files/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname:\n    type: number/string/string/map\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Filter Function in Mako Template\nDESCRIPTION: Demonstrates defining a custom escape function locally in a Mako template and using it as a filter.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_2\n\nLANGUAGE: mako\nCODE:\n```\n<%!\n    def myescape(text):\n        return \"<TAG>\" + text + \"</TAG>\"\n%>\n\nHere's some tagged text: ${\"text\" | myescape}\n```\n\n----------------------------------------\n\nTITLE: Generated Module Source with Disabled Unicode\nDESCRIPTION: Demonstrates the generated Python code when Unicode is disabled, showing how string literals are handled as byte-strings in the Context.write method.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/unicode.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding:utf-8 -*-\n#  ...more generated code ...\n\ndef render_body(context,**pageargs):\n    context.caller_stack.push_frame()\n    try:\n        __M_locals = dict(pageargs=pageargs)\n        # SOURCE LINE 1\n        context.write('dr\\xc3\\xb4le de petite voix m\\xe2\\x80\\x99a r\\xc3\\xa9veill\\xc3\\xa9.')\n        return ''\n    finally:\n        context.caller_stack.pop_frame()\n```\n\n----------------------------------------\n\nTITLE: Defining Action Foreach Target for GN Tools Test\nDESCRIPTION: Sets up variables and custom command for the action_foreach test target, including source files and output generation.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/gn_tools/test/CMakeLists_impl/gn_cmake_test/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(action_foreach_target \n  lynx__tools__gn_tools__test_action_foreach_test\n  )\n\nset(${action_foreach_target}__sources\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/action_foreach/files/to/dir/sources1.cc\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/action_foreach/files/to/dir/sources2.cc\n  ${ROOT_PATH}/lynx/tools/gn_tools/test/action_foreach/files/to/dir/sources3.cc\n  )\n\nset(${action_foreach_target}__output\n  ${ROOT_PATH}/out/gn_cmake_test/gen/action_foreach/files/to/dir/sources1.cc\n  ${ROOT_PATH}/out/gn_cmake_test/gen/action_foreach/files/to/dir/sources2.cc\n  ${ROOT_PATH}/out/gn_cmake_test/gen/action_foreach/files/to/dir/sources3.cc\n  )\n\nadd_custom_command(OUTPUT ${${action_foreach_target}__output}\n  COMMAND ${CMAKE_COMMAND} -E make_directory \"${ROOT_PATH}/out/gn_cmake_test/gen/action_foreach/files/to/dir\"\n  COMMAND python3 \"${ROOT_PATH}/lynx/tools/gn_tools/action_foreach_files.py\"\n    \"--script\"\n    \"${ROOT_PATH}/lynx/tools/gn_tools/action_foreach_test.py\"\n    \"--arguments\"\n    \"@&--sources@&{{source}}@&{{source}}@&--destinations@&${ROOT_PATH}/out/gn_cmake_test/gen/lynx/tools/gn_tools/test/{{source_name_part}}.h@&${ROOT_PATH}/out/gn_cmake_test/gen/lynx/tools/gn_tools/test/{{source_name_part}}.cc\"\n    \"--sources\"\n    \"${${action_foreach_target}__sources}\"\n    \"--target-dir\"\n    \"${ROOT_PATH}/lynx/tools/gn_tools/test\"\n    \"--gn-out-dir\"\n    \"${ROOT_PATH}/out/gn_cmake_test/\"\n    \"--root-dir\"\n    \"${ROOT_PATH}\"\n  DEPENDS  ${${action_foreach_target}__sources}\n  WORKING_DIRECTORY \"${ROOT_PATH}/out/gn_cmake_test/\"\n  COMMENT \"action_foreach: ${action_foreach_target}\"\n  VERBATIM)\nadd_custom_target(${action_foreach_target} SOURCES ${${action_foreach_target}__sources} DEPENDS ${${action_foreach_target}__output})\n```\n\n----------------------------------------\n\nTITLE: Property Definition JSON Schema\nDESCRIPTION: JSON schema for defining a new CSS property including metadata, compatibility information, and supported values.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/css_generator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"test\",\n    \"id\": 213,\n    \"type\": \"complex\",\n    \"default_value\": \"auto\",\n    \"version\": \"1.0\",\n    \"author\": \"wangerpao\",\n    \"consumption_status\": \"layout-only\",\n    \"desc\": \"left offset\",\n    \"keywords\":[\"foo\",\"bar\",\"foobar\"],\n    \"values\": [\n        {\n            \"value\": \"test-value\",\n            \"version\": \"1.0\"\n        }\n    ],\n    \"links\": [\n        {\n            \"url\": \"<reference docs>\",\n            \"desc\": \"description of the reference\"\n        },\n        {\n            \"url\":\"123\"\n        }\n    ],\n    \"note\": [\n        {\n            \"literal\": \"this is a note\",\n            \"level\": \"tip\"\n        },\n        {\n            \"literal\":\"This is a warning for user of this property.\",\n            \"level\": \"warning\"\n        }\n    ],\n    \"__compat\": { \n      \"description\": \"<Description of this compat data entry>\",\n      \"lynx_path\": \"<path to api reference in lynx website> docs/zh/api/css/properties/left)\",\n      \"mdn_url\": \"<path to mdn definition> https://developer.mozilla.org/zh-CN/docs/Web/CSS/left\", \"spec_url\": [\"<path to w3c specification file>\"],\n      \"status\": {\n        \"deprecated\": false,\n        \"experimental\": false\n      },\n      \"support\": {\n        \"android\": {\n          \"version_added\": \"1.0\"\n        },\n        \"ios\": {\n          \"version_added\": \"1.0\"\n        }\n     }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing parser.suite with ast.parse in Python 3.9\nDESCRIPTION: Replaces usage of the deprecated parser.suite module with ast.parse for parsing Python magic encoding comments. This change was made to address deprecation warnings in Python 3.9.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Old code (removed):\n# parser.suite\n\n# New code:\nast.parse\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Lynx Project Build\nDESCRIPTION: Sets the minimum required CMake version to 3.4.1 and includes a specific CMakeLists implementation file based on build flavor, type, and Android ABI.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/platform/android/lynx_android/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum version of CMAKE that is required\ncmake_minimum_required(VERSION 3.4.1)\n\n# According to the build variant, \n# import the CMakeLists-impl.cmake file to compile the native methods.\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists_impl/${FLAVOR_NAME}${BUILD_TYPE}${ANDROID_ABI}/CMakeLists.txt)\n```\n\n----------------------------------------\n\nTITLE: Generating Feature Enums with Python Script\nDESCRIPTION: Command to run the Python script that generates feature enum implementations for C++, Java, Objective-C and TypeScript based on YAML specification\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/feature_count/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 tools/feature_count/generate_feature_count.py\n```\n\n----------------------------------------\n\nTITLE: Using Capture Function in Mako Expression\nDESCRIPTION: Demonstrates using the capture function to buffer the output of a def call within a Mako expression.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/filtering.rst#2025-04-23_snippet_10\n\nLANGUAGE: mako\nCODE:\n```\n${\" results \" + capture(somedef) + \" more results \"}\n```\n\n----------------------------------------\n\nTITLE: Using sys.stdout.write() in mako-render script\nDESCRIPTION: Changes the \"print\" statement in the mako-render command to sys.stdout.write(), avoiding an extra newline at the end of the template output.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Old code:\n# print(template.render(**kw))\n\n# New code:\nsys.stdout.write(template.render(**kw))\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Lynx Project\nDESCRIPTION: Sets the minimum required CMake version and dynamically includes a build variant-specific implementation file based on environment variables FLAVOR_NAME, BUILD_TYPE, and ANDROID_ABI.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/platform/android/lynx_devtool/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum version of CMAKE that is required\ncmake_minimum_required(VERSION 3.4.1)\n\n# According to the build variant, \n# import the CMakeLists-impl.cmake file to compile the native methods.\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists_impl/${FLAVOR_NAME}${BUILD_TYPE}${ANDROID_ABI}/CMakeLists.txt)\n```\n\n----------------------------------------\n\nTITLE: Configuring RTF Plugins in Python\nDESCRIPTION: Shows how to configure plugins in the .rtf/config file. This example adds NativeUT, AndroidUT, and CoverageChecker plugins to the RTF configuration.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# .rtf/config\n\nplugins = [\"NativeUT\", \"AndroidUT\", \"CoverageChecker\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Including Implementation-Specific CMake File\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.4.1 and includes a specific implementation CMake file based on build parameters. The implementation file path is constructed dynamically using the FLAVOR_NAME, BUILD_TYPE, and ANDROID_ABI variables.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/devtool/base_devtool/android/base_devtool/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum version of CMAKE that is required\ncmake_minimum_required(VERSION 3.4.1)\n\n# According to the build variant, \n# import the CMakeLists-impl.cmake file to compile the native methods.\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists_impl/${FLAVOR_NAME}${BUILD_TYPE}${ANDROID_ABI}/CMakeLists.txt)\n```\n\n----------------------------------------\n\nTITLE: Generated Gettext Catalog Entry from Mako Template\nDESCRIPTION: Example of a gettext catalog (.pot) entry generated by Babel when extracting internationalization strings from Mako templates with translator comments.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_18\n\nLANGUAGE: pot\nCODE:\n```\n#. TRANSLATORS: This is a proper name. See the gettext\n#. manual, section Names.\n#: myproj/templates/name.html:5\nmsgid \"Francois Pinard\"\nmsgstr \"\"\n```\n\n----------------------------------------\n\nTITLE: Calling Namespace Functions with Custom Tag Format\nDESCRIPTION: Shows the custom tag format for calling namespace functions, using named attributes as function arguments.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_6\n\nLANGUAGE: mako\nCODE:\n```\n<%mynamespace:somefunction arg1=\"some arg1\" arg2=\"some arg2\" arg3=\"some arg3\" arg4=\"some arg4\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version and Including Implementation-Specific Configuration in Lynx Project\nDESCRIPTION: This CMake script sets the minimum required CMake version to 3.4.1 and includes an implementation-specific CMake file based on build variables. The implementation file path is constructed dynamically using FLAVOR_NAME, BUILD_TYPE, and ANDROID_ABI variables.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/base/trace/android/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum version of CMAKE that is required\ncmake_minimum_required(VERSION 3.4.1)\n\n# According to the build variant, \n# import the CMakeLists-impl.cmake file to compile the native methods.\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists_impl/${FLAVOR_NAME}${BUILD_TYPE}${ANDROID_ABI}/CMakeLists.txt)\n```\n\n----------------------------------------\n\nTITLE: Adding default encoding for RichTraceback\nDESCRIPTION: Adds a default encoding of \"utf-8\" when the RichTraceback object retrieves Python source lines from a Python traceback. This change ensures proper decoding of byte strings in Python 3 for formatting in templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Inside RichTraceback class\nlines = file_source.splitlines()\nlines = [line.decode(\"utf-8\", \"replace\") if isinstance(line, bytes) else line for line in lines]\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for Lynx Project\nDESCRIPTION: The standard MIT license text used for the Lynx project, indicating copyright ownership by THL A29 Limited (a Tencent company) and Milo Yip. This license grants permissions to use, modify, and distribute the software under specific conditions.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/rapidjson/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTencent is pleased to support the open source community by making RapidJSON available.\n\nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.\n\nLicensed under the MIT License (the \"License\"); you may not use this file except\nin compliance with the License. You may obtain a copy of the License at\n\nhttp://opensource.org/licenses/MIT\n\nUnless required by applicable law or agreed to in writing, software distributed \nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR \nCONDITIONS OF ANY KIND, either express or implied. See the License for the \nspecific language governing permissions and limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Python Code Example in Error Template\nDESCRIPTION: Example showing variable usage in error templates using unicode.strip() which had compatibility issues in Python 3\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/changelog.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nunicode.strip\n```\n\n----------------------------------------\n\nTITLE: Custom Tag with Embedded Content for Def Calls\nDESCRIPTION: Example of using the custom tag format with embedded content, allowing the called function to access content provided by the caller.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_8\n\nLANGUAGE: mako\nCODE:\n```\n<%mynamespace:somefunction arg1=\"some argument\" args=\"x, y\">\n    Some record: ${x}, ${y}\n</%mynamespace:somefunction>\n```\n\n----------------------------------------\n\nTITLE: TypeScript File Header with Copyright Notice\nDESCRIPTION: Standard file header containing copyright information for Lynx project, Apache License reference, and TypeScript compiler directive to ignore type checking. Includes a notice that the file is auto-generated.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/templates/lynx_copyright_block_js.txt#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n\n//@ts-nocheck\n/**\n * This file is auto-generated, DO NOT MODIFY!!\n */\n```\n\n----------------------------------------\n\nTITLE: Classic Call Tag for Embedding Content\nDESCRIPTION: Shows the classic <%call> tag approach for calling defs with embedded content, providing arguments and embedded template content.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/namespaces.rst#2025-04-23_snippet_9\n\nLANGUAGE: mako\nCODE:\n```\n<%call expr=\"mynamespace.somefunction(arg1='some argument')\" args=\"x, y\">\n    Some record: ${x}, ${y}\n</%call>\n```\n\n----------------------------------------\n\nTITLE: Inheritable Attributes Example\nDESCRIPTION: Demonstrates using inheritable attributes via self.attr to pass values through the inheritance chain.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/inheritance.rst#2025-04-23_snippet_9\n\nLANGUAGE: mako\nCODE:\n```\n<%!\n    class_ = \"grey\"\n%>\n\n<div class=\"${self.attr.class_}\">\n    ${self.body()}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Blocks in Conditional Statements\nDESCRIPTION: Demonstrates how Mako blocks can be used within conditional statements. Blocks can be placed inside flow control structures like if statements and loops.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_20\n\nLANGUAGE: mako\nCODE:\n```\n% if some_condition:\n    <%block>condition is met</%block>\n% endif\n```\n\n----------------------------------------\n\nTITLE: Accessing Implicit Page Arguments in Named Blocks\nDESCRIPTION: Shows how to access implicit page arguments in named blocks using the pageargs variable. This is useful for accessing arguments not explicitly declared in the <%page> tag.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/defs.rst#2025-04-23_snippet_25\n\nLANGUAGE: mako\nCODE:\n```\n<%block name=\"post_prose\">\n    ${pageargs['post'].content}\n</%block>\n```\n\n----------------------------------------\n\nTITLE: Loop Context in Mako\nDESCRIPTION: Illustrates the use of the loop context to access additional information about a loop in Mako templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/syntax.rst#2025-04-23_snippet_5\n\nLANGUAGE: mako\nCODE:\n```\n<ul>\n% for a in (\"one\", \"two\", \"three\"):\n    <li>Item ${loop.index}: ${a}</li>\n% endfor\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting OpenLynx Client Authentication Credentials\nDESCRIPTION: This snippet shows alternative methods for specifying authentication credentials (username and password) when connecting to an OpenLynx server.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/tools/rtf/core/options/README.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nlynx://domain:port?auth.username=username&auth.password=password\n```\n\n----------------------------------------\n\nTITLE: Running Bindings Tests for IDL Code Generator in Python\nDESCRIPTION: This command executes the bindings tests for the IDL code generator, skipping unit tests. It's used to test drive the setup and ensure the code generation process is working correctly.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython tools/run_bindings_tests.py --skip-unit-tests\n```\n\n----------------------------------------\n\nTITLE: Disabling Loop Context Globally in Python Code\nDESCRIPTION: Python code showing how to disable the loop context feature globally when initializing a TemplateLookup or Template object, useful for migration of legacy templates.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/runtime.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlookup = TemplateLookup(directories=['/docs'], enable_loop=False)\n```\n\nLANGUAGE: python\nCODE:\n```\ntemplate = Template(\"some template\", enable_loop=False)\n```\n\n----------------------------------------\n\nTITLE: Mako Template with Translator Comments for Babel Extraction\nDESCRIPTION: Example of a Mako template that includes translator comments for gettext internationalization, which can be extracted by Babel.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/usage.rst#2025-04-23_snippet_15\n\nLANGUAGE: mako\nCODE:\n```\n<div id=\"name\">\n  Name:\n  ## TRANSLATORS: This is a proper name. See the gettext\n  ## manual, section Names.\n  ${_('Francois Pinard')}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Dependencies for SQLAlchemy Development\nDESCRIPTION: This snippet lists three Git repository URLs that are required for SQLAlchemy development. These dependencies are likely used for documentation generation and changelog management.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngit+https://github.com/sqlalchemyorg/changelog.git#egg=changelog\ngit+https://github.com/sqlalchemyorg/sphinx-paramlinks.git#egg=sphinx-paramlinks\ngit+https://github.com/sqlalchemyorg/zzzeeksphinx.git#egg=zzzeeksphinx\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Framework Developers in package.json\nDESCRIPTION: Shows how to include @lynx-js/type-element-api as a peer dependency in a framework project's package.json file.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/js_libraries/type-element-api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"@lynx-js/type-element-api\": \"latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting GN to CMake using Python Script\nDESCRIPTION: Command to generate CMakeLists.txt file for lepus_cmd_exec compilation by converting from GN build files using a Python conversion script\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/oliver/lynx-tasm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython tools/oliver/lynx-tasm/gn_to_cmake_oliver.py\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version for Lynx Project\nDESCRIPTION: This snippet sets the minimum required version of CMake for the project. It ensures that the build process uses a compatible CMake version.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/core/runtime/jsi/v8/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Name for JsonCpp Test Executable\nDESCRIPTION: Explicitly sets the output name of the test executable to 'jsoncpp_test' using the SET_TARGET_PROPERTIES command.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/test_lib_json/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSET_TARGET_PROPERTIES(jsoncpp_test PROPERTIES OUTPUT_NAME jsoncpp_test)\n```\n\n----------------------------------------\n\nTITLE: Finding Python Interpreter in CMake\nDESCRIPTION: Locates a Python interpreter of version 2.6 or higher on the system using the CMake FIND_PACKAGE command.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/jsontestrunner/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nFIND_PACKAGE(PythonInterp 2.6)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python-Based JsonCpp Tests in CMake\nDESCRIPTION: Configures custom targets for running end-to-end parser/writer tests using Python when a Python interpreter is found. Creates 'jsoncpp_readerwriter_tests' and 'jsoncpp_check' targets.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/jsoncpp/src/jsontestrunner/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nIF(PYTHONINTERP_FOUND)\n    # Run end to end parser/writer tests\n    SET(TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../test)\n    SET(RUNJSONTESTS_PATH ${TEST_DIR}/runjsontests.py)\n    ADD_CUSTOM_TARGET(jsoncpp_readerwriter_tests\n                      \"${PYTHON_EXECUTABLE}\" -B \"${RUNJSONTESTS_PATH}\" $<TARGET_FILE:jsontestrunner_exe> \"${TEST_DIR}/data\"\n                      DEPENDS jsontestrunner_exe jsoncpp_test\n                      )\n    ADD_CUSTOM_TARGET(jsoncpp_check DEPENDS jsoncpp_readerwriter_tests)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating Indices and Tables Section in reStructuredText for Lynx Documentation\nDESCRIPTION: This snippet defines an 'Indices and Tables' section in the documentation, providing links to the general index and search functionality using reStructuredText directives.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n* :ref:`genindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Configuring RTF for New C++ Unit Test Execution in Lynx\nDESCRIPTION: This Python snippet demonstrates how to configure the RTF tool to include a new C++ unit test execution target for the Lynx project. It specifies the target, working directory, owners, and other execution options.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/testing/README_UT.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n#.rtf/native-ut-lynx.template\ntargets({\n    #....\n    \"hello_unittest_exec\": {\n        \"cwd\": \".\",\n        \"owners\":[\"YourName\"],\n        \"coverage\": True,\n        \"enable_parallel\":True,\n    },\n    #....\n}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Individual Code Checker in Lynx Project\nDESCRIPTION: Example command for running a specific code checker (api-check) in the Lynx project's validation system.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit lynx check --checkers=api-check\n```\n\n----------------------------------------\n\nTITLE: Initializing Mako Template with Disabled Unicode\nDESCRIPTION: Shows how to create a Mako template with Unicode disabled using disable_unicode=True flag and specific input encoding. This configuration is only supported in Python 2.\nSOURCE: https://github.com/lynx-family/lynx/blob/develop/third_party/binding/idl-codegen/third_party/doc/build/unicode.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding:utf-8 -*-\nfrom mako.template import Template\n\nt = Template(\"drôle de petite voix m'a réveillé.\", disable_unicode=True, input_encoding='utf-8')\nprint(t.code)\n```"
  }
]